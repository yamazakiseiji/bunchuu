SH SERIES C/C++ Compiler (V.9.02.00.003)                                                         08-Sep-2023 13:46:36  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskrx0.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             tskrx0.c          1    /******************************************************************************
             tskrx0.c          2    * ＰＣ通信受信タスク(SIO0)                                                    *
             tskrx0.c          3    *                                                                             *
             tskrx0.c          4    * File name : tskrx0.c                                                        *
             tskrx0.c          5    *                                                                             *
             tskrx0.c          6    * Copyright (c) 2018 NICHIRYO Co., Ltd.                                       *
             tskrx0.c          7    *                                                                             *
             tskrx0.c          8    ******************************************************************************/
             tskrx0.c          9    #include <kernel.h>
             tskrx0.c         10    #include "iodefine.h"
             tskrx0.c         11    #include "define.h"
             tskrx0.c         12    #include "tskrx0.h"
             tskrx0.c         13    #include "datastruct.h"
             tskrx0.c         14    #include "sub.h"
             tskrx0.c         15    #include "tblchr.h"
             tskrx0.c         16    #include "macro.h"
             tskrx0.c         17    #include "automachine.h"
             tskrx0.c         18    #include "mnet.h"
             tskrx0.c         19    #include "tskeep.h"
             tskrx0.c         20    
             tskrx0.c         21    
             tskrx0.c         22    //*************************************
             tskrx0.c         23    // 関数定義
             tskrx0.c         24    //*************************************
             tskrx0.c         25    static void   sio_init( void );
             tskrx0.c         26    static void rx0_init(void);                                           // 初期化処理
             tskrx0.c         27    static ER     rx0_dmy(UB rxdata);
             tskrx0.c         28    static ER     rx0_idle(UB rxdata);                                    // 受信処理 待機中
             tskrx0.c         29    static ER     rx0_cmdrecv(UB rxdata);                                 // コマンド+データ(ETXまで)受信処理
             tskrx0.c         30    static ER     rx0_bcc1recv(UB rxdata);                                // BCC1受信処理
             tskrx0.c         31    static ER     rx0_bcc2recv(UB rxdata);                                // BCC2受信処理
             tskrx0.c         32    static UB rx0_ComChk( UB *cmd );
             tskrx0.c         33    static ER rx0_BCdatset( UB msg );
             tskrx0.c         34    typedef ER    (*RX0_FUNC)(UB data);
             tskrx0.c         35    static ER rx0_SetIMPPDAT();
             tskrx0.c         36    static ER rx0_SetEXPSPED();
             tskrx0.c         37    static ER rx0_SetEXPPOSI();
             tskrx0.c         38    static ER rx0_SetEXPOPTN();
             tskrx0.c         39    static ER rx0_SetEXPCLOG();
             tskrx0.c         40    static ER rx0_SetIMPSPED();
             tskrx0.c         41    static ER rx0_SetIMPPOSI();
             tskrx0.c         42    static ER rx0_SetIMPOPTN();
             tskrx0.c         43    static ER rx0_SetEXPPDAT();
             tskrx0.c         44    
             tskrx0.c         45    
             tskrx0.c         46    UB Get_pcnt();
             tskrx0.c         47    UB Get_pno();
             tskrx0.c         48    void Set_pno( UB pno );
             tskrx0.c         49    void Set_pcnt( UB pcnt );
             tskrx0.c         50    //void ImportCommDataSet( const char* str , UB* imp );
             tskrx0.c         51    
             tskrx0.c         52    
             tskrx0.c         53    
             tskrx0.c         54    
             tskrx0.c         55    
             tskrx0.c         56    
             tskrx0.c         57    
             tskrx0.c         58    
             tskrx0.c         59    
             tskrx0.c         60    
             tskrx0.c         61    void rx_enable( void );
             tskrx0.c         62    void rx_disable( void );
             tskrx0.c         63    //static void RpMakeSendM( UB parno, INT pardat );
             tskrx0.c         64    
             tskrx0.c         65    //void Rcvset_spddat( const char* str );
             tskrx0.c         66    //void Rcvset_spdptn( const char* str );
             tskrx0.c         67    
             tskrx0.c         68    //*************************************
             tskrx0.c         69    // テーブル
             tskrx0.c         70    //*************************************
             tskrx0.c         71    
             tskrx0.c         72    // コールファンクション
             tskrx0.c         73    RX0_FUNC  Rx0FuncTbl[5] = 
             tskrx0.c         74    {
             tskrx0.c         75      &rx0_dmy     ,                                                      // STS00
             tskrx0.c         76      &rx0_idle    ,                                                      // STS01
             tskrx0.c         77      &rx0_cmdrecv ,                                                      // STS02
             tskrx0.c         78      &rx0_bcc1recv,                                                      // STS03
             tskrx0.c         79      &rx0_bcc2recv                                                       // STS04
             tskrx0.c         80    };
             tskrx0.c         81    
             tskrx0.c         82    //*************************************
             tskrx0.c         83    // データ定義
             tskrx0.c         84    //*************************************
             tskrx0.c         85    //#define SRAM_START_ADDRESS          0x0C000000  // 0C00 0000 - 0C07 FFFF
             tskrx0.c         86    
             tskrx0.c         87    static    ST_SEQ seq;
             tskrx0.c         88    static    UB RecvData[CMD_BUFSIZ];
             tskrx0.c         89    static    const char* RecvArgs[MAX_ARGS];
             tskrx0.c         90    static    ST_PROTCOL          *pProcAdr;
             tskrx0.c         91    static    ST_PROTCOL_INFO     prinf;
             tskrx0.c         92    static    UB wkbuf[32];
             tskrx0.c         93    static    UB potcol_no;
             tskrx0.c         94    static    UB potcol_cnt;
             tskrx0.c         95    
             tskrx0.c         96    
             tskrx0.c         97    /***********************************************************************
             tskrx0.c         98    * 
             tskrx0.c         99    * [概要]  ＰＣ通信受信タスク
             tskrx0.c        100    *             ＰＣからデータ受信を行う。（ＰＣ→装置）
             tskrx0.c        101    * [引数]  -
             tskrx0.c        102    * [戻値]  -
             tskrx0.c        103    * 
             tskrx0.c        104    ***********************************************************************/
             tskrx0.c        105    TASK TskRx0( void )
P   00000000              _TskRx0:                         ; function: TskRx0
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
             tskrx0.c        106    {
             tskrx0.c        107      T_COM_CHAR  rxd;
             tskrx0.c        108        ER          err;
             tskrx0.c        109      UB          rxdat;
             tskrx0.c        110    
             tskrx0.c        111      sio_init();                                                         // シリアル通信制御データ初期化
    00000002 B014                   BSR         __$sio_init
    00000004 0009                   NOP
    00000006 DEA4                   MOV.L       L112,R14   ; _v4_trcv_dtq
    00000008 DDA4                   MOV.L       L112+4,R13 ; __$seq
    0000000A              L11:
    0000000A B044                   BSR         __$rx0_init
    0000000C 0009                   NOP
    0000000E              L12:
             tskrx0.c        112      rx0_init();                                                         // 初期化
             tskrx0.c        113    
             tskrx0.c        114      for( ; ; )
             tskrx0.c        115      {
             tskrx0.c        116          err = rcv_dtq( ID_DTQ_RXD, &rxd.data );                         // データ受信
    0000000E E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00000010 E401                   MOV         #1,R4      ; H'00000001
    00000012 4E0B                   JSR         @R14
    00000014 65F3                   MOV         R15,R5
             tskrx0.c        117          if( rxd.byte.type != COM_MTYP_CHR )                             // エラー？
    00000016 62F0                   MOV.B       @R15,R2    ; rxd.byte.type
    00000018 2228                   TST         R2,R2
    0000001A 8BF6                   BF          L11
             tskrx0.c        118          {
             tskrx0.c        119              rx0_init();                                                 // 初期化
             tskrx0.c        120              continue;
             tskrx0.c        121          }
             tskrx0.c        122    
             tskrx0.c        123          rxdat = rxd.byte.data;                                          // 受信データ取得
    0000001C 84F1                   MOV.B       @(1,R15),R0; rxd.byte.data
             tskrx0.c        124          
             tskrx0.c        125          err = Rx0FuncTbl[seq.rstatus]( rxdat ) ;                        // ファンクションテーブル実行
    0000001E D5A0                   MOV.L       L112+8,R5  ; _Rx0FuncTbl
    00000020 6403                   MOV         R0,R4
    00000022 60D2                   MOV.L       @R13,R0    ; seq.rstatus
    00000024 4008                   SHLL2       R0
    00000026 065E                   MOV.L       @(R0,R5),R6; Rx0FuncTbl[]
    00000028 464B                   JSR/N       @R6
    0000002A AFF0                   BRA         L12
    0000002C 0009                   NOP
             tskrx0.c        126      }
             tskrx0.c        127    }
             tskrx0.c        128    /***********************************************************************
             tskrx0.c        129    * 
             tskrx0.c        130    * [概要]  シリアルポート初期化
             tskrx0.c        131    * [引数]  -
             tskrx0.c        132    * [戻値]  -
             tskrx0.c        133    * 
             tskrx0.c        134    ***********************************************************************/
             tskrx0.c        135    static void sio_init( void )
    0000002E              __$sio_init:                     ; function: __$sio_init
                                                           ; frame size=0
             tskrx0.c        136    {
             tskrx0.c        137      // SCI0設定(ＰＣ通信用)
             tskrx0.c        138      SCI0.SCSMR.BIT.CA       = 0;                                        // 調歩同期式
    0000002E E480                   MOV         #-128,R4   ; H'FFFFFF80
             tskrx0.c        139      SCI0.SCSMR.BIT.CHR      = 0;                                        // ８ビット長
             tskrx0.c        140      SCI0.SCSMR.BIT._PE      = 0;                                        // パリティなし
             tskrx0.c        141      SCI0.SCSMR.BIT.STOP     = 0;                                        // １ストップビット
             tskrx0.c        142      SCI0.SCSMR.BIT.CKS      = 0;                                        // PΦ(40MHz)
             tskrx0.c        143      SCI0.SCBRR              = 32;                                       // 38400bps
             tskrx0.c        144    
             tskrx0.c        145      SCI0.SCSCR.BIT.TIE      = 0;                                        // 送信データエンプティ割り込み禁止
             tskrx0.c        146      SCI0.SCSCR.BIT.RIE      = 1;                                        // 受信データフル割り込み許可
             tskrx0.c        147      SCI0.SCSCR.BIT.TEIE     = 0;                                        // 送信終了割り込み禁止
             tskrx0.c        148      SCI0.SCSCR.BIT.TE       = 1;                                        // 送信許可
             tskrx0.c        149      SCI0.SCSCR.BIT.RE       = 1;                                        // 受信許可
             tskrx0.c        150      INTC.IPR16.BIT._SCI0    = INT_PRI_SCI0;                             // 優先順位
    00000030 06E00C14               MOVI20      #-127980,R6; H'FFFE0C14
    00000034 4418                   SHLL8       R4
    00000036 E570                   MOV         #112,R5    ; H'00000070
    00000038 34790000               BCLR.B      #7,@(0,R4)
    0000003C 02000FFF               MOVI20      #4095,R2   ; H'00000FFF
    00000040 34690000               BCLR.B      #6,@(0,R4)
    00000044 4518                   SHLL8       R5
    00000046 34590000               BCLR.B      #5,@(0,R4)
    0000004A 34390000               BCLR.B      #3,@(0,R4)
    0000004E 6040                   MOV.B       @R4,R0
    00000050 C9FC                   AND         #252,R0
    00000052 2400                   MOV.B       R0,@R4
    00000054 E020                   MOV         #32,R0     ; H'00000020
    00000056 8042                   MOV.B       R0,@(2,R4)
    00000058 34790004               BCLR.B      #7,@(4,R4)
    0000005C 34691004               BSET.B      #6,@(4,R4)
    00000060 34290004               BCLR.B      #2,@(4,R4)
    00000064 34591004               BSET.B      #5,@(4,R4)
    00000068 34491004               BSET.B      #4,@(4,R4)
    0000006C E401                   MOV         #1,R4      ; H'00000001
    0000006E 6161                   MOV.W       @R6,R1
    00000070 2129                   AND         R2,R1
    00000072 215B                   OR          R5,R1
    00000074 D78B                   MOV.L       L112+12,R7 ; _v4_stp_alm
    00000076 472B                   JMP         @R7
    00000078 2611                   MOV.W       R1,@R6
             tskrx0.c        151    
             tskrx0.c        152      stp_alm( ID_ALM_R0DAT );                                                // アラームハンドラ停止
             tskrx0.c        153    
             tskrx0.c        154    }
             tskrx0.c        155    
             tskrx0.c        156    void rx_enable( void )
    0000007A              _rx_enable:                      ; function: rx_enable
                                                           ; frame size=0
             tskrx0.c        157    {
             tskrx0.c        158      SCI0.SCSCR.BIT.RIE      = 1;                                        // 受信データフル割り込み許可
    0000007A E280                   MOV         #-128,R2   ; H'FFFFFF80
    0000007C 4218                   SHLL8       R2
    0000007E 32691004               BSET.B      #6,@(4,R2)
             tskrx0.c        159      SCI0.SCSCR.BIT.RE       = 1;                                        // 受信許可
    00000082 32491004               BSET.B      #4,@(4,R2)
             tskrx0.c        160    }
    00000086 006B                   RTS/N
             tskrx0.c        161    void rx_disable( void )
    00000088              _rx_disable:                     ; function: rx_disable
                                                           ; frame size=0
             tskrx0.c        162    {
             tskrx0.c        163      SCI0.SCSCR.BIT.RIE      = 0;                                        // 受信データフル割り込み許可
    00000088 E280                   MOV         #-128,R2   ; H'FFFFFF80
    0000008A 4218                   SHLL8       R2
    0000008C 32690004               BCLR.B      #6,@(4,R2)
             tskrx0.c        164      SCI0.SCSCR.BIT.RE       = 0;                                        // 受信許可
    00000090 32490004               BCLR.B      #4,@(4,R2)
             tskrx0.c        165    }
    00000094 006B                   RTS/N
             tskrx0.c        166    /***********************************************************************
             tskrx0.c        167    * 
             tskrx0.c        168    * [概要]  初期化処理
             tskrx0.c        169    * [引数]  
             tskrx0.c        170    * [戻値]  
             tskrx0.c        171    * 
             tskrx0.c        172    ***********************************************************************/
             tskrx0.c        173    static void rx0_init(void)
    00000096              __$rx0_init:                     ; function: __$rx0_init
                                                           ; frame size=4
    00000096 4F22                   STS.L       PR,@-R15
             tskrx0.c        174    {
             tskrx0.c        175      memset( &seq, 0x00, sizeof( seq ) );
    00000098 D480                   MOV.L       L112+4,R4  ; __$seq
    0000009A 06000E28               MOVI20      #3624,R6   ; H'00000E28
    0000009E D182                   MOV.L       L112+16,R1 ; _memset
    000000A0 410B                   JSR         @R1
    000000A2 E500                   MOV         #0,R5      ; H'00000000
             tskrx0.c        176      seq.rstatus = STS01;
    000000A4 E501                   MOV         #1,R5      ; H'00000001
    000000A6 E401                   MOV         #1,R4      ; H'00000001
    000000A8 D17C                   MOV.L       L112+4,R1  ; __$seq
    000000AA 2152                   MOV.L       R5,@R1     ; seq.rstatus
             tskrx0.c        177      stp_alm( ID_ALM_R0DAT );                                                // アラームハンドラ停止
    000000AC D77D                   MOV.L       L112+12,R7 ; _v4_stp_alm
    000000AE 472B                   JMP         @R7
    000000B0 4F26                   LDS.L       @R15+,PR
             tskrx0.c        178    }
             tskrx0.c        179    /***********************************************************************
             tskrx0.c        180    * 
             tskrx0.c        181    * [概要]  ダミー
             tskrx0.c        182    * [引数]  
             tskrx0.c        183    * [戻値]  
             tskrx0.c        184    * 
             tskrx0.c        185    ***********************************************************************/
             tskrx0.c        186    static ER rx0_dmy(UB rxdata)
    000000B2              __$rx0_dmy:                      ; function: __$rx0_dmy
                                                           ; frame size=0
             tskrx0.c        187    {
             tskrx0.c        188        ER          err = E_SUCCESS;
             tskrx0.c        189      rxdata = 0;
             tskrx0.c        190      return( err );
             tskrx0.c        191    }
    000000B2 000B                   RTS
    000000B4 E000                   MOV         #0,R0      ; H'00000000
             tskrx0.c        192    /***********************************************************************
             tskrx0.c        193    * 
             tskrx0.c        194    * [概要]  受信処理 待機中
             tskrx0.c        195    * [引数]  受信データ
             tskrx0.c        196    * [戻値]  
             tskrx0.c        197    * 
             tskrx0.c        198    ***********************************************************************/
             tskrx0.c        199    static ER rx0_idle(UB rxdata)
    000000B6              __$rx0_idle:                     ; function: __$rx0_idle
                                                           ; frame size=36
    000000B6 4DF0                   MOVMU.L     R13,@-R15
             tskrx0.c        200    {
             tskrx0.c        201        ER          err = E_SUCCESS;
             tskrx0.c        202      ID          msgid;
             tskrx0.c        203      
             tskrx0.c        204      switch( rxdata )
    000000B8 624C                   EXTU.B      R4,R2
    000000BA ED00                   MOV         #0,R13     ; H'00000000
    000000BC 6023                   MOV         R2,R0
    000000BE 8802                   CMP/EQ      #2,R0
    000000C0 8F19                   BF/S        L26
    000000C2 6E43                   MOV         R4,R14
    000000C4 E63C                   MOV         #60,R6     ; H'0000003C
             tskrx0.c        205      {
             tskrx0.c        206          case STX:
             tskrx0.c        207              memset( &RecvData[0], 0x00, sizeof(RecvData) );
    000000C6 D479                   MOV.L       L112+20,R4 ; __$RecvData
    000000C8 D177                   MOV.L       L112+16,R1 ; _memset
    000000CA 410B                   JSR         @R1
    000000CC E500                   MOV         #0,R5      ; H'00000000
             tskrx0.c        208    
             tskrx0.c        209              seq.type = RCVCMD;
             tskrx0.c        210              seq.rstatus = STS02;
             tskrx0.c        211              seq.rbuff[0] = rxdata;
    000000CE D778                   MOV.L       L112+24,R7 ; H'0000000C+__$seq
    000000D0 E410                   MOV         #16,R4     ; H'00000010
    000000D2 E502                   MOV         #2,R5      ; H'00000002
    000000D4 D271                   MOV.L       L112+4,R2  ; __$seq
    000000D6 27E0                   MOV.B       R14,@R7    ; seq.rbuff[]
             tskrx0.c        212              seq.wpnt = 1;
    000000D8 EE01                   MOV         #1,R14     ; H'00000001
             tskrx0.c        213              seq.sizmax = 0;
    000000DA E100                   MOV         #0,R1      ; H'00000000
    000000DC 1242                   MOV.L       R4,@(8,R2) ; seq.type
    000000DE 2252                   MOV.L       R5,@R2     ; seq.rstatus
    000000E0 32E12388               MOV.L       R14,@(3616:12,R2); seq.wpnt
    000000E4 32112389               MOV.L       R1,@(3620:12,R2); seq.sizmax
             tskrx0.c        214              sta_alm( ID_ALM_R0DAT, TMOUT_RCV );                         // 受信タイマスタート
    000000E8 05000BB8               MOVI20      #3000,R5   ; H'00000BB8
    000000EC D271                   MOV.L       L112+28,R2 ; _v4_sta_alm
    000000EE 420B                   JSR         @R2
    000000F0 E401                   MOV         #1,R4      ; H'00000001
    000000F2 A023                   BRA         L28
    000000F4 0009                   NOP
    000000F6              L26:
    000000F6 8806                   CMP/EQ      #6,R0
    000000F8 8901                   BT          L30
    000000FA 8815                   CMP/EQ      #21,R0
    000000FC 8B1C                   BF          L31
    000000FE              L30:
             tskrx0.c        215              break;
             tskrx0.c        216          case ACK:
             tskrx0.c        217          case NAK:
             tskrx0.c        218              if( rxdata == ACK )
    000000FE 6023                   MOV         R2,R0
    00000100 8806                   CMP/EQ      #6,R0
    00000102 8F01                   BF/S        L33
    00000104 EE66                   MOV         #102,R14   ; H'00000066
             tskrx0.c        219              {
             tskrx0.c        220                  msgid = ID_MSG_ACK;
    00000106 EE65                   MOV         #101,R14   ; H'00000065
    00000108              L33:
    00000108 E63C                   MOV         #60,R6     ; H'0000003C
    0000010A E500                   MOV         #0,R5      ; H'00000000
             tskrx0.c        221              }
             tskrx0.c        222              else
             tskrx0.c        223              {
             tskrx0.c        224                  msgid = ID_MSG_NAK;
             tskrx0.c        225              }
             tskrx0.c        226              memset( &RecvData[0], 0x00, sizeof(RecvData) );
    0000010C D467                   MOV.L       L112+20,R4 ; __$RecvData
    0000010E D166                   MOV.L       L112+16,R1 ; _memset
    00000110 410B                   JSR         @R1
    00000112 ED3C                   MOV         #60,R13    ; H'0000003C
    00000114 2FD6                   MOV.L       R13,@-R15
    00000116 D165                   MOV.L       L112+20,R1 ; __$RecvData
    00000118 2F16                   MOV.L       R1,@-R15
    0000011A E700                   MOV         #0,R7      ; H'00000000
    0000011C 2F76                   MOV.L       R7,@-R15
    0000011E 2F76                   MOV.L       R7,@-R15
    00000120 2FE6                   MOV.L       R14,@-R15
    00000122 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    00000124 6EEC                   EXTU.B      R14,R14
    00000126 67E3                   MOV         R14,R7
    00000128 2FE6                   MOV.L       R14,@-R15
    0000012A E605                   MOV         #5,R6      ; H'00000005
    0000012C E504                   MOV         #4,R5      ; H'00000004
    0000012E D262                   MOV.L       L112+32,R2 ; _mbx_send
    00000130 420B                   JSR         @R2
    00000132 E401                   MOV         #1,R4      ; H'00000001
    00000134 7F18                   ADD         #24,R15
    00000136 6D03                   MOV         R0,R13
    00000138              L31:
    00000138 BFAD                   BSR         __$rx0_init
    0000013A 0009                   NOP
    0000013C              L28:
             tskrx0.c        227    
             tskrx0.c        228              err = mbx_send  (
             tskrx0.c        229                                  ID_TSK_RX0,                             // tskid
             tskrx0.c        230                                  ID_MPF_CMD,                             // memory
             tskrx0.c        231                                  ID_MBX_CMD,                             // mailbox
             tskrx0.c        232                                  NO_DATA,                                // prid1
             tskrx0.c        233                                  NO_DATA,                                // bcid
             tskrx0.c        234                                  msgid,                                  // msg
             tskrx0.c        235                                  0,                                      // sts
             tskrx0.c        236                                  0,                                      // sts2
             tskrx0.c        237                                  &RecvData[0],                           // data
             tskrx0.c        238                                  CMD_BUFSIZ                              // data siz
             tskrx0.c        239                              );
             tskrx0.c        240              rx0_init();                                                 // 初期化
             tskrx0.c        241              break;
             tskrx0.c        242          default:
             tskrx0.c        243              rx0_init();                                                 // 初期化
             tskrx0.c        244              break;
             tskrx0.c        245      }
             tskrx0.c        246    
             tskrx0.c        247      return( err );
    0000013C 60D3                   MOV         R13,R0
    0000013E 4DF4                   MOVMU.L     @R15+,R13
             tskrx0.c        248    }
    00000140 006B                   RTS/N
             tskrx0.c        249    /***********************************************************************
             tskrx0.c        250    * 
             tskrx0.c        251    * [概要]  コマンド+データ(ETXまで)受信
             tskrx0.c        252    * [引数]  受信データ
             tskrx0.c        253    * [戻値]  状態
             tskrx0.c        254    * 
             tskrx0.c        255    ***********************************************************************/
             tskrx0.c        256    static ER rx0_cmdrecv(UB rxdata)
    00000142              __$rx0_cmdrecv:                  ; function: __$rx0_cmdrecv
                                                           ; frame size=0
             tskrx0.c        257    {
             tskrx0.c        258      ER  err = E_SUCCESS;
             tskrx0.c        259    
             tskrx0.c        260      if(seq.wpnt >= 1800)
    00000142 D156                   MOV.L       L112+4,R1  ; __$seq
    00000144 30116388               MOV.L       @(3616:12,R1),R0; seq.wpnt
    00000148 05000708               MOVI20      #1800,R5   ; H'00000708
    0000014C 3053                   CMP/GE      R5,R0
    0000014E 8F04                   BF/S        L36
    00000150 E200                   MOV         #0,R2      ; H'00000000
             tskrx0.c        261      {
             tskrx0.c        262          err = E_SYS_POLGET;
    00000152 0200F009               MOVI20      #61449,R2  ; H'0000F009
    00000156 A005                   BRA         L37
    00000158 0009                   NOP
    0000015A              L36:
             tskrx0.c        263      }
             tskrx0.c        264      else
             tskrx0.c        265      {
             tskrx0.c        266          seq.rbuff[seq.wpnt++] = rxdata;
    0000015A D555                   MOV.L       L112+24,R5 ; H'0000000C+__$seq
    0000015C 0544                   MOV.B       R4,@(R0,R5); seq.rbuff[]
    0000015E 7001                   ADD         #1,R0
    00000160 31012388               MOV.L       R0,@(3616:12,R1); seq.wpnt
    00000164              L37:
             tskrx0.c        267      }
             tskrx0.c        268    
             tskrx0.c        269      if( rxdata == ETX )
    00000164 604C                   EXTU.B      R4,R0
    00000166 8803                   CMP/EQ      #3,R0
    00000168 8B02                   BF          L39
             tskrx0.c        270      {
             tskrx0.c        271          seq.rstatus++;
    0000016A 6612                   MOV.L       @R1,R6     ; seq.rstatus
    0000016C 7601                   ADD         #1,R6
    0000016E 2162                   MOV.L       R6,@R1     ; seq.rstatus
    00000170              L39:
             tskrx0.c        272      }
             tskrx0.c        273    
             tskrx0.c        274      return( err );
             tskrx0.c        275    }
    00000170 027B                   RTV/N       R2
             tskrx0.c        276    /***********************************************************************
             tskrx0.c        277    * 
             tskrx0.c        278    * [概要]  BCC1受信
             tskrx0.c        279    * [引数]  受信データ
             tskrx0.c        280    * [戻値]  状態
             tskrx0.c        281    * 
             tskrx0.c        282    ***********************************************************************/
             tskrx0.c        283    static ER rx0_bcc1recv(UB rxdata)
    00000172              __$rx0_bcc1recv:                 ; function: __$rx0_bcc1recv
                                                           ; frame size=0
    00000172 D54A                   MOV.L       L112+4,R5  ; __$seq
    00000174 30516388               MOV.L       @(3616:12,R5),R0; seq.wpnt
             tskrx0.c        284    {
             tskrx0.c        285      ER  err = E_SUCCESS;
             tskrx0.c        286    
             tskrx0.c        287      seq.rbuff[seq.wpnt++] = rxdata;
             tskrx0.c        288      seq.bcc[0] = rxdata;
             tskrx0.c        289      seq.rstatus++;
    00000178 6752                   MOV.L       @R5,R7     ; seq.rstatus
    0000017A D64D                   MOV.L       L112+24,R6 ; H'0000000C+__$seq
    0000017C 0644                   MOV.B       R4,@(R0,R6); seq.rbuff[]
    0000017E 7001                   ADD         #1,R0
    00000180 7701                   ADD         #1,R7
    00000182 35012388               MOV.L       R0,@(3616:12,R5); seq.wpnt
    00000186 2572                   MOV.L       R7,@R5     ; seq.rstatus
             tskrx0.c        290    
             tskrx0.c        291      return( err );
    00000188 E000                   MOV         #0,R0      ; H'00000000
    0000018A D14C                   MOV.L       L112+36,R1 ; H'00000E1C+__$seq
             tskrx0.c        292    }
    0000018C 000B                   RTS
    0000018E 2140                   MOV.B       R4,@R1     ; seq.bcc[]
             tskrx0.c        293    
             tskrx0.c        294    /***********************************************************************
             tskrx0.c        295    * 
             tskrx0.c        296    * [概要]  BCC2受信
             tskrx0.c        297    * [引数]  受信データ
             tskrx0.c        298    * [戻値]  状態
             tskrx0.c        299    * 
             tskrx0.c        300    ***********************************************************************/
             tskrx0.c        301    static ER rx0_bcc2recv(UB rxdata)
    00000190              __$rx0_bcc2recv:                 ; function: __$rx0_bcc2recv
                                                           ; frame size=56
    00000190 49F0                   MOVMU.L     R9,@-R15
    00000192 7FFC                   ADD         #-4,R15
    00000194 D94A                   MOV.L       L112+40,R9 ; H'00000E20+__$seq
    00000196 6092                   MOV.L       @R9,R0     ; seq.wpnt
             tskrx0.c        302    {
             tskrx0.c        303      UB  anum;
             tskrx0.c        304      UB  msgid = CLR;
    00000198 EC00                   MOV         #0,R12     ; H'00000000
             tskrx0.c        305      UB  prid1 = CLR;
             tskrx0.c        306      UB  bcid = NO_DATA;
             tskrx0.c        307      UB  ubInf1 = CLR;
             tskrx0.c        308      INT msglen = CLR;
             tskrx0.c        309      INT ubCalSiz;
             tskrx0.c        310      UB  ubCalBcc;
             tskrx0.c        311      UB  ubRcvBcc;
             tskrx0.c        312      ER  err = E_CONTINUE;
             tskrx0.c        313    
             tskrx0.c        314      seq.rbuff[seq.wpnt++] = rxdata;
    0000019A DA45                   MOV.L       L112+24,R10; H'0000000C+__$seq
    0000019C 0A44                   MOV.B       R4,@(R0,R10); seq.rbuff[]
    0000019E 7001                   ADD         #1,R0
             tskrx0.c        315      seq.bcc[1] = rxdata;
    000001A0 D648                   MOV.L       L112+44,R6 ; H'00000E1D+__$seq
    000001A2 2902                   MOV.L       R0,@R9     ; seq.wpnt
    000001A4 EEF1                   MOV         #-15,R14   ; H'FFFFFFF1
    000001A6 2640                   MOV.B       R4,@R6     ; seq.bcc[]
             tskrx0.c        316      stp_alm( ID_ALM_R0DAT );                                            // 受信タイマ停止
    000001A8 D13E                   MOV.L       L112+12,R1 ; _v4_stp_alm
    000001AA 410B                   JSR         @R1
    000001AC E401                   MOV         #1,R4      ; H'00000001
             tskrx0.c        317    
             tskrx0.c        318      if( seq.wpnt > 3 )
    000001AE 6592                   MOV.L       @R9,R5     ; seq.wpnt
    000001B0 E703                   MOV         #3,R7      ; H'00000003
    000001B2 6BC3                   MOV         R12,R11
    000001B4 3577                   CMP/GT      R7,R5
    000001B6 8F4C                   BF/S        L48
    000001B8 6EEC                   EXTU.B      R14,R14
             tskrx0.c        319      {
             tskrx0.c        320          ubCalSiz  = (seq.wpnt-3);                                       // サイズ取得
             tskrx0.c        321    
             tskrx0.c        322          /*******************/
             tskrx0.c        323          /* BCC一致チェック */
             tskrx0.c        324          /*******************/
             tskrx0.c        325          ubCalBcc = CalcBCC( &seq.rbuff[1], ubCalSiz );                  // BCC計算
    000001BA 75FD                   ADD         #-3,R5
    000001BC 64A3                   MOV         R10,R4
    000001BE DD42                   MOV.L       L112+48,R13; _CalcBCC
    000001C0 4D0B                   JSR         @R13
    000001C2 7401                   ADD         #1,R4
             tskrx0.c        326          ubRcvBcc = AsctoHex( seq.bcc[0] ) * 0x10 + AsctoHex( seq.bcc[1] ) ;     // ASC→HEX変換
    000001C4 D13D                   MOV.L       L112+36,R1 ; H'00000E1C+__$seq
    000001C6 6410                   MOV.B       @R1,R4     ; seq.bcc[]
    000001C8 D240                   MOV.L       L112+52,R2 ; _AsctoHex
    000001CA 420B                   JSR         @R2
    000001CC 6D0C                   EXTU.B      R0,R13
    000001CE D63D                   MOV.L       L112+44,R6 ; H'00000E1D+__$seq
    000001D0 4008                   SHLL2       R0
    000001D2 6460                   MOV.B       @R6,R4     ; seq.bcc[]
    000001D4 4008                   SHLL2       R0
    000001D6 D73D                   MOV.L       L112+52,R7 ; _AsctoHex
    000001D8 470B                   JSR         @R7
    000001DA 6E03                   MOV         R0,R14
    000001DC 3E0C                   ADD         R0,R14
             tskrx0.c        327          
             tskrx0.c        328          if( ubCalBcc == ubRcvBcc )
    000001DE 61EC                   EXTU.B      R14,R1
    000001E0 3D10                   CMP/EQ      R1,R13
    000001E2 0E000606               MOVI20      #1542,R14  ; H'00000606
    000001E6 8B34                   BF          L48
             tskrx0.c        329          {
             tskrx0.c        330              err = E_SUCCESS;
             tskrx0.c        331          }
             tskrx0.c        332          else
             tskrx0.c        333          {
             tskrx0.c        334              err = E_COM_BCCERR;
             tskrx0.c        335          }
             tskrx0.c        336    
             tskrx0.c        337          /********************/
             tskrx0.c        338          /* コマンドチェック */
             tskrx0.c        339          /********************/
             tskrx0.c        340          if( err == E_SUCCESS )
             tskrx0.c        341          {
             tskrx0.c        342              msgid = rx0_ComChk( &seq.rbuff[1] ) ;
    000001E8 64A3                   MOV         R10,R4
    000001EA B0B0                   BSR         __$rx0_ComChk
    000001EC 7401                   ADD         #1,R4
    000001EE E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    000001F0 6C0C                   EXTU.B      R0,R12
    000001F2 666C                   EXTU.B      R6,R6
    000001F4 EE00                   MOV         #0,R14     ; H'00000000
    000001F6 3C60                   CMP/EQ      R6,R12
             tskrx0.c        343              // 規定外
             tskrx0.c        344              if(  msgid == NO_DATA )
    000001F8 8D29                   BT/S        L52
    000001FA 2FC2                   MOV.L       R12,@R15
    000001FC E63C                   MOV         #60,R6     ; H'0000003C
             tskrx0.c        345              {
             tskrx0.c        346                  err = E_COM_CMDDEF;
             tskrx0.c        347              }
             tskrx0.c        348              else
             tskrx0.c        349              {
             tskrx0.c        350                  memset( &RecvData,    CLR,  sizeof( RecvData ) );
    000001FE D42B                   MOV.L       L112+20,R4 ; __$RecvData
    00000200 D729                   MOV.L       L112+16,R7 ; _memset
    00000202 470B                   JSR         @R7
    00000204 E500                   MOV         #0,R5      ; H'00000000
             tskrx0.c        351                  msglen = seq.wpnt-4;
    00000206 6B92                   MOV.L       @R9,R11    ; seq.wpnt
             tskrx0.c        352                  memcpy( &RecvData[0], &seq.rbuff[1], msglen );
    00000208 65A3                   MOV         R10,R5
    0000020A 7501                   ADD         #1,R5
    0000020C 7BFC                   ADD         #-4,R11
    0000020E D427                   MOV.L       L112+20,R4 ; __$RecvData
    00000210 DD2F                   MOV.L       L112+56,R13; _memcpy
    00000212 4D0B                   JSR         @R13
    00000214 66B3                   MOV         R11,R6
             tskrx0.c        353                  
             tskrx0.c        354    
             tskrx0.c        355                  if(
    00000216 60F2                   MOV.L       @R15,R0
    00000218 8824                   CMP/EQ      #36,R0
    0000021A 8909                   BT          L53
    0000021C 8825                   CMP/EQ      #37,R0
    0000021E 8907                   BT          L53
    00000220 8826                   CMP/EQ      #38,R0
    00000222 8905                   BT          L53
    00000224 8827                   CMP/EQ      #39,R0
    00000226 8903                   BT          L53
    00000228 8828                   CMP/EQ      #40,R0
    0000022A 8901                   BT          L53
    0000022C 8829                   CMP/EQ      #41,R0
    0000022E 8B10                   BF          L48
    00000230              L53:
    00000230 E664                   MOV         #100,R6    ; H'00000064
    00000232 E500                   MOV         #0,R5      ; H'00000000
    00000234 4608                   SHLL2       R6
             tskrx0.c        356                      ( msgid == ID_MSG_IMPPDAT )||
             tskrx0.c        357                      ( msgid == ID_MSG_IMPSPED )||
             tskrx0.c        358                      ( msgid == ID_MSG_IMPPOSI )||
             tskrx0.c        359                      ( msgid == ID_MSG_IMPOPTN )||
             tskrx0.c        360                      ( msgid == ID_MSG_EXPRUNL )||
             tskrx0.c        361                      ( msgid == ID_MSG_EXPCOML )
             tskrx0.c        362                  )
             tskrx0.c        363                  {
             tskrx0.c        364                      memset( &RecvArgs,    CLR,  sizeof( RecvArgs ) );
    00000236 D427                   MOV.L       L112+60,R4 ; __$RecvArgs
    00000238 DE1B                   MOV.L       L112+16,R14; _memset
    0000023A 4E0B                   JSR         @R14
    0000023C 7A01                   ADD         #1,R10
             tskrx0.c        365                      anum = SplitOnly( (char *)&seq.rbuff[1], RecvArgs );
    0000023E D525                   MOV.L       L112+60,R5 ; __$RecvArgs
    00000240 D125                   MOV.L       L112+64,R1 ; _SplitOnly
    00000242 410B                   JSR         @R1
    00000244 64A3                   MOV         R10,R4
             tskrx0.c        366                      err = rx0_BCdatset( msgid );
    00000246 B0A7                   BSR         __$rx0_BCdatset
    00000248 64C3                   MOV         R12,R4
    0000024A A002                   BRA         L48
    0000024C 6E03                   MOV         R0,R14
    0000024E              L52:
    0000024E 0E000610               MOVI20      #1552,R14  ; H'00000610
    00000252              L48:
             tskrx0.c        367                  }
             tskrx0.c        368                  else
             tskrx0.c        369                  {
             tskrx0.c        370    //                    ToUpper( (char*)&RecvData );
             tskrx0.c        371    //                    anum = Split( (char *)&RecvData[0], RecvArgs );
             tskrx0.c        372                  }
             tskrx0.c        373              }
             tskrx0.c        374          }
             tskrx0.c        375      }
             tskrx0.c        376    
             tskrx0.c        377      /**********************************************************/
             tskrx0.c        378      /* 状態別対応 ※電文として問題ある場合にNAKを返信する     */
             tskrx0.c        379      /**********************************************************/
             tskrx0.c        380      switch( err )
    00000252 2EE8                   TST         R14,R14
    00000254 8B15                   BF          L59
             tskrx0.c        381      {
             tskrx0.c        382          // 成功・完了
             tskrx0.c        383          case E_SUCCESS:
             tskrx0.c        384              SendACK();                                                  // ACK送信
    00000256 B04E                   BSR         _SendACK
    00000258 0009                   NOP
             tskrx0.c        385    
             tskrx0.c        386              err = mbx_send  (
             tskrx0.c        387                                  ID_TSK_RX0,                             // 送信元タスクＩＤ
             tskrx0.c        388                                  ID_MPF_CMD,                             // メモリプールＩＤ
             tskrx0.c        389                                  ID_MBX_CMD,                             // メールボックスＩＤ
             tskrx0.c        390                                  prid1,
             tskrx0.c        391                                  bcid,                                   // ブロックコマンド管理ＩＤ(受信タスクでセット)
             tskrx0.c        392                                  msgid,                                  // メッセージＩＤ
             tskrx0.c        393                                  ubInf1,                                 // inf1
             tskrx0.c        394                                  0,                                      // inf2
             tskrx0.c        395                                  &RecvData[0],                           // 受信データ
             tskrx0.c        396                                  msglen                                  // 受信サイズ
             tskrx0.c        397                              );
    0000025A 2FB6                   MOV.L       R11,@-R15
    0000025C D413                   MOV.L       L112+20,R4 ; __$RecvData
    0000025E 2F46                   MOV.L       R4,@-R15
    00000260 E700                   MOV         #0,R7      ; H'00000000
    00000262 2F76                   MOV.L       R7,@-R15
    00000264 2F76                   MOV.L       R7,@-R15
    00000266 2FC6                   MOV.L       R12,@-R15
    00000268 EAFF                   MOV         #-1,R10    ; H'FFFFFFFF
    0000026A 6AAC                   EXTU.B      R10,R10
    0000026C 2FA6                   MOV.L       R10,@-R15
    0000026E E605                   MOV         #5,R6      ; H'00000005
    00000270 E504                   MOV         #4,R5      ; H'00000004
    00000272 D911                   MOV.L       L112+32,R9 ; _mbx_send
    00000274 490B                   JSR         @R9
    00000276 E401                   MOV         #1,R4      ; H'00000001
    00000278 7F18                   ADD         #24,R15
             tskrx0.c        398          
             tskrx0.c        399              rx0_init();                                                 // 初期化
    0000027A BF0C                   BSR         __$rx0_init
    0000027C 6E03                   MOV         R0,R14
    0000027E A007                   BRA         L61
    00000280 0009                   NOP
    00000282              L59:
    00000282 E1F1                   MOV         #-15,R1    ; H'FFFFFFF1
    00000284 611C                   EXTU.B      R1,R1
    00000286 3E10                   CMP/EQ      R1,R14
    00000288 8902                   BT          L61
             tskrx0.c        400              break;
             tskrx0.c        401    
             tskrx0.c        402          // システムエラー(ＢＣＣエラー)
             tskrx0.c        403          case E_COM_BCCERR:
             tskrx0.c        404          // 未定義コマンド
             tskrx0.c        405          case E_COM_CMDDEF:
             tskrx0.c        406          default:
             tskrx0.c        407              rx0_init();                                                 // 初期化
    0000028A BF04                   BSR         __$rx0_init
    0000028C 0009                   NOP
             tskrx0.c        408              err = E_SUCCESS;
    0000028E EE00                   MOV         #0,R14     ; H'00000000
    00000290              L61:
             tskrx0.c        409              break;
             tskrx0.c        410    
             tskrx0.c        411          // 継続中
             tskrx0.c        412          case E_CONTINUE:
             tskrx0.c        413              break;
             tskrx0.c        414      }
             tskrx0.c        415      
             tskrx0.c        416      return( err );
    00000290 60E3                   MOV         R14,R0
    00000292 7F04                   ADD         #4,R15
    00000294 49F4                   MOVMU.L     @R15+,R9
             tskrx0.c        417    }
    00000296 006B                   RTS/N
    00000298              L112:
    00000298 <00000000>             .DATA.L     _v4_trcv_dtq
    0000029C <00000000>             .DATA.L     __$seq
    000002A0 <00000000>             .DATA.L     _Rx0FuncTbl
    000002A4 <00000000>             .DATA.L     _v4_stp_alm
    000002A8 <00000000>             .DATA.L     _memset
    000002AC <00000000>             .DATA.L     __$RecvData
    000002B0 <0000000C>             .DATA.L     H'0000000C+__$seq
    000002B4 <00000000>             .DATA.L     _v4_sta_alm
    000002B8 <00000000>             .DATA.L     _mbx_send
    000002BC <00000E1C>             .DATA.L     H'00000E1C+__$seq
    000002C0 <00000E20>             .DATA.L     H'00000E20+__$seq
    000002C4 <00000E1D>             .DATA.L     H'00000E1D+__$seq
    000002C8 <00000000>             .DATA.L     _CalcBCC
    000002CC <00000000>             .DATA.L     _AsctoHex
    000002D0 <00000000>             .DATA.L     _memcpy
    000002D4 <00000000>             .DATA.L     __$RecvArgs
    000002D8 <00000000>             .DATA.L     _SplitOnly
             tskrx0.c        418    /***********************************************************************
             tskrx0.c        419    * 
             tskrx0.c        420    * [概要]  コマンドリクエスト受信監視用アラームハンドラ
             tskrx0.c        421    *         
             tskrx0.c        422    * 
             tskrx0.c        423    * 
             tskrx0.c        424    ***********************************************************************/
             tskrx0.c        425    void AlmComR0Dat( VP_INT exinf )
    000002DC              _AlmComR0Dat:                    ; function: AlmComR0Dat
                                                           ; frame size=4
    000002DC 7FFC                   ADD         #-4,R15
             tskrx0.c        426    {
             tskrx0.c        427        T_COM_CHAR  dat;
             tskrx0.c        428    
             tskrx0.c        429      exinf = 0;
             tskrx0.c        430        dat.byte.type = COM_MTYP_RTMO;
    000002DE E104                   MOV         #4,R1      ; H'00000004
             tskrx0.c        431        dat.byte.data = 0;
    000002E0 E000                   MOV         #0,R0      ; H'00000000
    000002E2 2F10                   MOV.B       R1,@R15    ; dat.byte.type
    000002E4 E56C                   MOV         #108,R5    ; H'0000006C
    000002E6 80F1                   MOV.B       R0,@(1,R15); dat.byte.data
    000002E8 E601                   MOV         #1,R6      ; H'00000001
    000002EA 4508                   SHLL2       R5
    000002EC 67F2                   MOV.L       @R15,R7    ; dat.data
             tskrx0.c        432        SndDtq( ID_DTQ_RXD, dat.data );
    000002EE D49A                   MOV.L       L113,R4    ; L124
    000002F0 D29A                   MOV.L       L113+4,R2  ; _api_snd_dtq
    000002F2 422B                   JMP         @R2
    000002F4 7F04                   ADD         #4,R15
             tskrx0.c        433    }
             tskrx0.c        434    /***********************************************************************
             tskrx0.c        435    * 
             tskrx0.c        436    * [概要]  ACKの送信
             tskrx0.c        437    * [引数]  -
             tskrx0.c        438    * [戻値]  err:状態
             tskrx0.c        439    * 
             tskrx0.c        440    ***********************************************************************/
             tskrx0.c        441    ER SendACK( void )
    000002F6              _SendACK:                        ; function: SendACK
                                                           ; frame size=28
    000002F6 4F22                   STS.L       PR,@-R15
             tskrx0.c        442    {
             tskrx0.c        443        ER          err;
             tskrx0.c        444    
             tskrx0.c        445      err = mbx_send  (
             tskrx0.c        446                          ID_TSK_RX0,    // tskid
             tskrx0.c        447                          ID_MPF_TX0,    // memory
             tskrx0.c        448                          ID_MBX_TX0,    // mailbox
             tskrx0.c        449                          NO_DATA,       // prid1
             tskrx0.c        450                          NO_DATA,       // bcid
             tskrx0.c        451                          ID_MSG_ACK,    // msg
             tskrx0.c        452                          0,             // sts
             tskrx0.c        453                          0,             // sts2
             tskrx0.c        454                          &RecvData[0],  // data
             tskrx0.c        455                          CMD_BUFSIZ     // data siz
             tskrx0.c        456                          );
    000002F8 E13C                   MOV         #60,R1     ; H'0000003C
    000002FA 2F16                   MOV.L       R1,@-R15
    000002FC D498                   MOV.L       L113+8,R4  ; __$RecvData
    000002FE 2F46                   MOV.L       R4,@-R15
    00000300 E500                   MOV         #0,R5      ; H'00000000
    00000302 2F56                   MOV.L       R5,@-R15
    00000304 2F56                   MOV.L       R5,@-R15
    00000306 E665                   MOV         #101,R6    ; H'00000065
    00000308 2F66                   MOV.L       R6,@-R15
    0000030A E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    0000030C 611C                   EXTU.B      R1,R1
    0000030E 6713                   MOV         R1,R7
    00000310 2F16                   MOV.L       R1,@-R15
    00000312 E602                   MOV         #2,R6      ; H'00000002
    00000314 E401                   MOV         #1,R4      ; H'00000001
    00000316 D293                   MOV.L       L113+12,R2 ; _mbx_send
    00000318 420B                   JSR         @R2
    0000031A 6563                   MOV         R6,R5
    0000031C 7F18                   ADD         #24,R15
    0000031E 4F26                   LDS.L       @R15+,PR
             tskrx0.c        457    
             tskrx0.c        458      return( err );
             tskrx0.c        459    }
    00000320 006B                   RTS/N
             tskrx0.c        460    
             tskrx0.c        461    /***********************************************************************
             tskrx0.c        462    * 
             tskrx0.c        463    * [概要]  NAKの送信
             tskrx0.c        464    * [引数]  -
             tskrx0.c        465    * [戻値]  err:状態
             tskrx0.c        466    * 
             tskrx0.c        467    ***********************************************************************/
             tskrx0.c        468    ER SendNAK( void )
    00000322              _SendNAK:                        ; function: SendNAK
                                                           ; frame size=28
    00000322 4F22                   STS.L       PR,@-R15
             tskrx0.c        469    {
             tskrx0.c        470        ER          err;
             tskrx0.c        471    
             tskrx0.c        472      err = mbx_send  (
             tskrx0.c        473                          ID_TSK_RX0,     // tskid
             tskrx0.c        474                          ID_MPF_TX0,     // memory
             tskrx0.c        475                          ID_MBX_TX0,     // mailbox
             tskrx0.c        476                          NO_DATA,        // prid1
             tskrx0.c        477                          NO_DATA,        // bcid
             tskrx0.c        478                          ID_MSG_NAK,     // msg
             tskrx0.c        479                          0,              // sts
             tskrx0.c        480                          0,              // sts2
             tskrx0.c        481                          &RecvData[0],   // data
             tskrx0.c        482                          CMD_BUFSIZ      // data siz
             tskrx0.c        483                      );
    00000324 E13C                   MOV         #60,R1     ; H'0000003C
    00000326 2F16                   MOV.L       R1,@-R15
    00000328 D48D                   MOV.L       L113+8,R4  ; __$RecvData
    0000032A 2F46                   MOV.L       R4,@-R15
    0000032C E500                   MOV         #0,R5      ; H'00000000
    0000032E 2F56                   MOV.L       R5,@-R15
    00000330 2F56                   MOV.L       R5,@-R15
    00000332 E666                   MOV         #102,R6    ; H'00000066
    00000334 2F66                   MOV.L       R6,@-R15
    00000336 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00000338 611C                   EXTU.B      R1,R1
    0000033A 6713                   MOV         R1,R7
    0000033C 2F16                   MOV.L       R1,@-R15
    0000033E E602                   MOV         #2,R6      ; H'00000002
    00000340 E401                   MOV         #1,R4      ; H'00000001
    00000342 D288                   MOV.L       L113+12,R2 ; _mbx_send
    00000344 420B                   JSR         @R2
    00000346 6563                   MOV         R6,R5
    00000348 7F18                   ADD         #24,R15
    0000034A 4F26                   LDS.L       @R15+,PR
             tskrx0.c        484    
             tskrx0.c        485      return( err );
             tskrx0.c        486    }
    0000034C 006B                   RTS/N
             tskrx0.c        487    
             tskrx0.c        488    /***********************************************************************
             tskrx0.c        489    * 
             tskrx0.c        490    * [概要]  
             tskrx0.c        491    *         
             tskrx0.c        492    * 
             tskrx0.c        493    * 
             tskrx0.c        494    ***********************************************************************/
             tskrx0.c        495    static UB rx0_ComChk( UB *cmd )
    0000034E              __$rx0_ComChk:                   ; function: __$rx0_ComChk
                                                           ; frame size=32
    0000034E 48F0                   MOVMU.L     R8,@-R15
             tskrx0.c        496    {
             tskrx0.c        497      UB Loop;
             tskrx0.c        498      INT Len;
             tskrx0.c        499    
             tskrx0.c        500      for( Loop = 0; Loop < ID_MSG_BASE_CMD_MAX; Loop++ )
    00000350 6B43                   MOV         R4,R11
    00000352 ED00                   MOV         #0,R13     ; H'00000000
    00000354 DC84                   MOV.L       L113+16,R12; _STRTBL_MSG
    00000356 D885                   MOV.L       L113+20,R8 ; _strlen
    00000358 D985                   MOV.L       L113+24,R9 ; _ToUppern
    0000035A DA86                   MOV.L       L113+28,R10; _Strncmp
    0000035C              L67:
             tskrx0.c        501      {
             tskrx0.c        502          Len = strlen( &STRTBL_MSG[Loop][0] );
    0000035C 480B                   JSR         @R8
    0000035E 64C2                   MOV.L       @R12,R4    ; STRTBL_MSG[]
    00000360 6E03                   MOV         R0,R14
             tskrx0.c        503          ToUppern( (char*)cmd, Len );
    00000362 64B3                   MOV         R11,R4
    00000364 490B                   JSR         @R9
    00000366 6503                   MOV         R0,R5
             tskrx0.c        504    
             tskrx0.c        505          if( !Strncmp( cmd, &STRTBL_MSG[Loop][0],Len ))
    00000368 65C2                   MOV.L       @R12,R5    ; STRTBL_MSG[]
    0000036A 64B3                   MOV         R11,R4
    0000036C 4A0B                   JSR         @R10
    0000036E 66E3                   MOV         R14,R6
    00000370 2008                   TST         R0,R0
    00000372 8B08                   BF          L69
             tskrx0.c        506          {
             tskrx0.c        507              if( ( cmd[Len] == ',' )||( cmd[Len] == ETX ) )
    00000374 60E3                   MOV         R14,R0
    00000376 02BC                   MOV.B       @(R0,R11),R2; cmd[]
    00000378 602C                   EXTU.B      R2,R0
    0000037A 882C                   CMP/EQ      #44,R0
    0000037C 8901                   BT          L71
    0000037E 8803                   CMP/EQ      #3,R0
    00000380 8B01                   BF          L69
    00000382              L71:
    00000382 A007                   BRA         L72
    00000384 60D3                   MOV         R13,R0
    00000386              L69:
    00000386 7D01                   ADD         #1,R13
    00000388 E12D                   MOV         #45,R1     ; H'0000002D
    0000038A 62DC                   EXTU.B      R13,R2
    0000038C 7C04                   ADD         #4,R12
    0000038E 3213                   CMP/GE      R1,R2
    00000390 8FE4                   BF/S        L67
    00000392 E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
    00000394              L72:
    00000394 48F4                   MOVMU.L     @R15+,R8
             tskrx0.c        508              {
             tskrx0.c        509                  return( Loop );
             tskrx0.c        510              }
             tskrx0.c        511          }
             tskrx0.c        512      }
             tskrx0.c        513      
             tskrx0.c        514      return( NO_DATA );
             tskrx0.c        515    }
    00000396 006B                   RTS/N
             tskrx0.c        516    /***********************************************************************
             tskrx0.c        517    * 
             tskrx0.c        518    * [概要]パラメータ数が多くプールでは引き渡せないコマンドについては
             tskrx0.c        519    *         ここでデータセットしておく
             tskrx0.c        520    * 
             tskrx0.c        521    * 
             tskrx0.c        522    ***********************************************************************/
             tskrx0.c        523    static ER rx0_BCdatset( UB msg )
    00000398              __$rx0_BCdatset:                 ; function: __$rx0_BCdatset
                                                           ; frame size=4
    00000398 4F22                   STS.L       PR,@-R15
             tskrx0.c        524    {
             tskrx0.c        525      ER result = E_SUCCESS;
             tskrx0.c        526    
             tskrx0.c        527      switch( msg )
    0000039A 604C                   EXTU.B      R4,R0
    0000039C 8824                   CMP/EQ      #36,R0
    0000039E 8D08                   BT/S        L83
    000003A0 E200                   MOV         #0,R2      ; H'00000000
    000003A2 8825                   CMP/EQ      #37,R0
    000003A4 8909                   BT          L85
    000003A6 8826                   CMP/EQ      #38,R0
    000003A8 890B                   BT          L87
    000003AA 8827                   CMP/EQ      #39,R0
    000003AC 890D                   BT          L88
    000003AE A00F                   BRA         L89
    000003B0 0009                   NOP
    000003B2              L83:
             tskrx0.c        528      {
             tskrx0.c        529      case ID_MSG_IMPPDAT:                                                    // 
             tskrx0.c        530          result = rx0_SetIMPPDAT();
    000003B2 B00F                   BSR         __$rx0_SetIMPPDAT
    000003B4 0009                   NOP
    000003B6 A00B                   BRA         L89
    000003B8 6203                   MOV         R0,R2
    000003BA              L85:
             tskrx0.c        531          break;
             tskrx0.c        532      case ID_MSG_IMPSPED:                                                    // 
             tskrx0.c        533          result = rx0_SetIMPSPED();
    000003BA B0BB                   BSR         __$rx0_SetIMPSPED
    000003BC 0009                   NOP
    000003BE A007                   BRA         L89
    000003C0 6203                   MOV         R0,R2
    000003C2              L87:
             tskrx0.c        534          break;
             tskrx0.c        535      case ID_MSG_IMPPOSI:                                                    // 
             tskrx0.c        536          result = rx0_SetIMPPOSI();
    000003C2 B0BF                   BSR         __$rx0_SetIMPPOSI
    000003C4 0009                   NOP
    000003C6 A003                   BRA         L89
    000003C8 6203                   MOV         R0,R2
    000003CA              L88:
             tskrx0.c        537          break;
             tskrx0.c        538      case ID_MSG_IMPOPTN:                                                    // 
             tskrx0.c        539          result = rx0_SetIMPOPTN();
    000003CA B0C3                   BSR         __$rx0_SetIMPOPTN
    000003CC 0009                   NOP
    000003CE 6203                   MOV         R0,R2
    000003D0              L89:
    000003D0 4F26                   LDS.L       @R15+,PR
             tskrx0.c        540          break;
             tskrx0.c        541      case ID_MSG_EXPRUNL:                                                    // 
             tskrx0.c        542    //        result = rx0_SetEXPRUNL();
             tskrx0.c        543          break;
             tskrx0.c        544      case ID_MSG_EXPCOML:                                                    // 
             tskrx0.c        545    //        result = rx0_SetEXPCOML();
             tskrx0.c        546          break;
             tskrx0.c        547    //    case ID_MSG_EXPPOSI:                                                    // 
             tskrx0.c        548    //        result = rx0_SetEXPPOSI();
             tskrx0.c        549    //        break;
             tskrx0.c        550    //    case ID_MSG_EXPOPTN:                                                    // 
             tskrx0.c        551    //        result = rx0_SetEXPOPTN();
             tskrx0.c        552    //        break;
             tskrx0.c        553    //    case ID_MSG_EXPCLOG:                                                    // 
             tskrx0.c        554    //        result = rx0_SetEXPCLOG();
             tskrx0.c        555    //        break;
             tskrx0.c        556      }
             tskrx0.c        557      return( result );
             tskrx0.c        558    }
    000003D2 027B                   RTV/N       R2
             tskrx0.c        559    
             tskrx0.c        560    /***********************************************************************
             tskrx0.c        561    * 
             tskrx0.c        562    * [概要]  プロトコル情報    →内蔵RAM展開→タッチパネルへ通知
             tskrx0.c        563    *         プロトコルタイトル→内蔵RAM展開→タッチパネルへ通知
             tskrx0.c        564    *         プロトコル        →SRAM展開   →EEPROMバックアップ→タッチパネルへ通知
             tskrx0.c        565    * 
             tskrx0.c        566    ***********************************************************************/
             tskrx0.c        567    static ER     rx0_SetIMPPDAT()
    000003D4              __$rx0_SetIMPPDAT:               ; function: __$rx0_SetIMPPDAT
                                                           ; frame size=28
    000003D4 4AF0                   MOVMU.L     R10,@-R15
    000003D6 7FFC                   ADD         #-4,R15
             tskrx0.c        568    {
             tskrx0.c        569      ER  result = E_SUCCESS;
             tskrx0.c        570      UB  pno;
             tskrx0.c        571      UB  pcnt;
             tskrx0.c        572      UB  loop;
             tskrx0.c        573      char* rcvpnt;
             tskrx0.c        574      
             tskrx0.c        575      
             tskrx0.c        576      pno = Rcvset_pinf( RecvArgs[1] );
    000003D8 DA67                   MOV.L       L113+32,R10; __$RecvArgs
    000003DA 54A1                   MOV.L       @(4,R10),R4; RecvArgs[]
    000003DC B034                   BSR         _Rcvset_pinf
    000003DE EC00                   MOV         #0,R12     ; H'00000000
    000003E0 6E0C                   EXTU.B      R0,R14
             tskrx0.c        577    
             tskrx0.c        578      if( ( pno > 0 )&&( pno <= PROTMAX ) )
    000003E2 2EE8                   TST         R14,R14
    000003E4 892B                   BT          L92
    000003E6 E614                   MOV         #20,R6     ; H'00000014
    000003E8 3E67                   CMP/GT      R6,R14
    000003EA 8928                   BT          L92
             tskrx0.c        579      {
             tskrx0.c        580          SetRcvData( &seq.rbuff[9], (seq.wpnt-12));
    000003EC DB63                   MOV.L       L113+36,R11; H'00000E20+__$seq
    000003EE 65B2                   MOV.L       @R11,R5    ; seq.wpnt
             tskrx0.c        581    
             tskrx0.c        582          pcnt = Get_pcnt();
             tskrx0.c        583          
             tskrx0.c        584          
             tskrx0.c        585          pProcAdr = (ST_PROTCOL *)( SRAM_START_ADDRESS + sizeof( ST_PROTCOL )*( pno - 1) );
             tskrx0.c        586          memset( pProcAdr, CLR, sizeof( ST_PROTCOL ) );
             tskrx0.c        587          
             tskrx0.c        588          
             tskrx0.c        589          for( loop = 0; loop < pcnt; loop++ )
    000003F0 ED00                   MOV         #0,R13     ; H'00000000
    000003F2 D463                   MOV.L       L113+40,R4 ; H'00000015+__$seq
    000003F4 D163                   MOV.L       L113+44,R1 ; _SetRcvData
    000003F6 410B                   JSR         @R1
    000003F8 75F4                   ADD         #-12,R5
    000003FA B092                   BSR         _Get_pcnt
    000003FC 0009                   NOP
    000003FE 64E3                   MOV         R14,R4
    00000400 74FF                   ADD         #-1,R4
    00000402 06000640               MOVI20      #1600,R6   ; H'00000640
    00000406 2F00                   MOV.B       R0,@R15    ; pcnt
    00000408 6063                   MOV         R6,R0
    0000040A 4480                   MULR        R0,R4
    0000040C 05000C00               MOVI20      #3072,R5   ; H'00000C00
    00000410 4528                   SHLL16      R5
    00000412 D75D                   MOV.L       L113+48,R7 ; __$pProcAdr
    00000414 345C                   ADD         R5,R4
    00000416 E500                   MOV         #0,R5      ; H'00000000
    00000418 D25C                   MOV.L       L113+52,R2 ; _memset
    0000041A 420B                   JSR         @R2
    0000041C 2742                   MOV.L       R4,@R7     ; pProcAdr
    0000041E 3BF18000               MOVU.B      @(0,R15),R11; pcnt
    00000422              L94:
    00000422 62DC                   EXTU.B      R13,R2
    00000424 32B3                   CMP/GE      R11,R2
    00000426 890B                   BT          L96
             tskrx0.c        590          {
             tskrx0.c        591              Rcvset_prot( RecvArgs[(3+loop)] , pno , loop );
    00000428 6DDC                   EXTU.B      R13,R13
    0000042A 60D3                   MOV         R13,R0
    0000042C 7003                   ADD         #3,R0
    0000042E 4008                   SHLL2       R0
    00000430 04AE                   MOV.L       @(R0,R10),R4; RecvArgs[]
    00000432 65E3                   MOV         R14,R5
    00000434 66D3                   MOV         R13,R6
    00000436 B04C                   BSR         _Rcvset_prot
    00000438 7D01                   ADD         #1,R13
    0000043A AFF2                   BRA         L94
    0000043C 0009                   NOP
    0000043E              L92:
             tskrx0.c        592          }
             tskrx0.c        593      }
             tskrx0.c        594      else
             tskrx0.c        595      {
             tskrx0.c        596          result = E_RECV_FAIL;
    0000043E EC32                   MOV         #50,R12    ; H'00000032
    00000440              L96:
             tskrx0.c        597      }
             tskrx0.c        598      return( result );
    00000440 60C3                   MOV         R12,R0
    00000442 7F04                   ADD         #4,R15
    00000444 4AF4                   MOVMU.L     @R15+,R10
             tskrx0.c        599    }
    00000446 006B                   RTS/N
             tskrx0.c        600    static    UB h_dat;
             tskrx0.c        601    static    UB l_dat;
             tskrx0.c        602    static    UB pno;
             tskrx0.c        603    /***********************************************************************
             tskrx0.c        604    * 
             tskrx0.c        605    *  [機能] 文字列を数値にする
             tskrx0.c        606    *  [引数] str     数字文字
             tskrx0.c        607    *           rad     進数( 10 or 16 )
             tskrx0.c        608    *           byte    バイト数(1/2/4)
             tskrx0.c        609    *           sig     符号(0:符号なし、1:符号あり)
             tskrx0.c        610    *  [戻値]   数値
             tskrx0.c        611    * 
             tskrx0.c        612    ***********************************************************************/
             tskrx0.c        613    UB Rcvset_pinf( const char* str )
    00000448              _Rcvset_pinf:                    ; function: Rcvset_pinf
                                                           ; frame size=32
    00000448 48F0                   MOVMU.L     R8,@-R15
             tskrx0.c        614    {
             tskrx0.c        615      UB cnt;
             tskrx0.c        616      UB prc;
             tskrx0.c        617      char* rcvpnt;
             tskrx0.c        618    
             tskrx0.c        619      rcvpnt = str;
             tskrx0.c        620    
             tskrx0.c        621      h_dat = rcvpnt[0];
    0000044A 6D43                   MOV         R4,R13
    0000044C 6440                   MOV.B       @R4,R4     ; rcvpnt[]
    0000044E D950                   MOV.L       L113+56,R9 ; __$h_dat
    00000450 2940                   MOV.B       R4,@R9     ; h_dat
    00000452 DA50                   MOV.L       L113+60,R10; __$l_dat
             tskrx0.c        622      l_dat = rcvpnt[1];
    00000454 84D1                   MOV.B       @(1,R13),R0; rcvpnt[]
             tskrx0.c        623      pno = AsctoHex(h_dat) * 0x10 + AsctoHex(l_dat);
    00000456 DC50                   MOV.L       L113+64,R12; _AsctoHex
    00000458 4C0B                   JSR         @R12
    0000045A 2A00                   MOV.B       R0,@R10    ; l_dat
    0000045C 4008                   SHLL2       R0
    0000045E 64A0                   MOV.B       @R10,R4    ; l_dat
    00000460 4008                   SHLL2       R0
    00000462 4C0B                   JSR         @R12
    00000464 6B03                   MOV         R0,R11
    00000466 3B0C                   ADD         R0,R11
    00000468 D84C                   MOV.L       L113+68,R8 ; __$pno
    0000046A 28B0                   MOV.B       R11,@R8    ; pno
             tskrx0.c        624      
             tskrx0.c        625      h_dat = rcvpnt[2];
    0000046C 84D2                   MOV.B       @(2,R13),R0; rcvpnt[]
    0000046E 2900                   MOV.B       R0,@R9     ; h_dat
    00000470 6403                   MOV         R0,R4
             tskrx0.c        626      l_dat = rcvpnt[3];
    00000472 84D3                   MOV.B       @(3,R13),R0; rcvpnt[]
             tskrx0.c        627      cnt = AsctoHex(h_dat) * 0x10 + AsctoHex(l_dat);
    00000474 4C0B                   JSR         @R12
    00000476 2A00                   MOV.B       R0,@R10    ; l_dat
    00000478 64A0                   MOV.B       @R10,R4    ; l_dat
    0000047A 6B0C                   EXTU.B      R0,R11
    0000047C 4C0B                   JSR         @R12
    0000047E 4B08                   SHLL2       R11
    00000480 620C                   EXTU.B      R0,R2
             tskrx0.c        628    
             tskrx0.c        629      h_dat = rcvpnt[4];
    00000482 84D4                   MOV.B       @(4,R13),R0; rcvpnt[]
    00000484 4B08                   SHLL2       R11
    00000486 2900                   MOV.B       R0,@R9     ; h_dat
    00000488 6403                   MOV         R0,R4
    0000048A 3B2C                   ADD         R2,R11
             tskrx0.c        630      l_dat = rcvpnt[5];
    0000048C 84D5                   MOV.B       @(5,R13),R0; rcvpnt[]
             tskrx0.c        631      prc = AsctoHex(h_dat) * 0x10 + AsctoHex(l_dat);
    0000048E 4C0B                   JSR         @R12
    00000490 2A00                   MOV.B       R0,@R10    ; l_dat
    00000492 4008                   SHLL2       R0
    00000494 64A0                   MOV.B       @R10,R4    ; l_dat
    00000496 4008                   SHLL2       R0
    00000498 4C0B                   JSR         @R12
    0000049A 6E03                   MOV         R0,R14
             tskrx0.c        632        
             tskrx0.c        633      if( ( pno > 0 )&&( pno <= PROTMAX ) )
    0000049C 34818000               MOVU.B      @(0,R8),R4 ; pno
    000004A0 2448                   TST         R4,R4
    000004A2 8D14                   BT/S        L99
    000004A4 3E0C                   ADD         R0,R14
    000004A6 E614                   MOV         #20,R6     ; H'00000014
    000004A8 3467                   CMP/GT      R6,R4
    000004AA 8910                   BT          L99
             tskrx0.c        634      {
             tskrx0.c        635          Set_pno( pno );
    000004AC B03C                   BSR         _Set_pno
    000004AE 0009                   NOP
             tskrx0.c        636          Set_pcnt( cnt );
    000004B0 64B3                   MOV         R11,R4
    000004B2 B03C                   BSR         _Set_pcnt
    000004B4 ED00                   MOV         #0,R13     ; H'00000000
             tskrx0.c        637          
             tskrx0.c        638          prinf.Dat[(pno-1)].Cnt = cnt;
    000004B6 34818000               MOVU.B      @(0,R8),R4 ; pno
    000004BA D539                   MOV.L       L113+72,R5 ; __$prinf
    000004BC 6043                   MOV         R4,R0
    000004BE 70FF                   ADD         #-1,R0
    000004C0 4008                   SHLL2       R0
    000004C2 05B4                   MOV.B       R11,@(R0,R5); Dat[].Cnt
             tskrx0.c        639          prinf.Dat[(pno-1)].Prc = prc;
    000004C4 6C53                   MOV         R5,R12
    000004C6 7C01                   ADD         #1,R12
             tskrx0.c        640          prinf.Dat[(pno-1)].Dmy = CLR;
    000004C8 7503                   ADD         #3,R5
    000004CA 0CE4                   MOV.B       R14,@(R0,R12); Dat[].Prc
    000004CC 05D4                   MOV.B       R13,@(R0,R5); Dat[].Dmy
    000004CE              L99:
    000004CE 48F4                   MOVMU.L     @R15+,R8
             tskrx0.c        641      }
             tskrx0.c        642      
             tskrx0.c        643      return( pno );
             tskrx0.c        644    }
    000004D0 047B                   RTV/N       R4
             tskrx0.c        645    void Rcvset_prot( const char* str , UB pno , UB adr )
    000004D2              _Rcvset_prot:                    ; function: Rcvset_prot
                                                           ; frame size=4
    000004D2 4F22                   STS.L       PR,@-R15
    000004D4 655C                   EXTU.B      R5,R5
    000004D6 2558                   TST         R5,R5
             tskrx0.c        646    {
             tskrx0.c        647    
             tskrx0.c        648      if( ( pno > 0 )&&( pno <= PROTMAX ) )
    000004D8 6143                   MOV         R4,R1
    000004DA 8D1D                   BT/S        L103
    000004DC 6463                   MOV         R6,R4
    000004DE E614                   MOV         #20,R6     ; H'00000014
    000004E0 3567                   CMP/GT      R6,R5
    000004E2 8919                   BT          L103
             tskrx0.c        649      {
             tskrx0.c        650          pProcAdr = (ST_PROTCOL *)( SRAM_START_ADDRESS + sizeof( ST_PROTCOL )*( pno - 1) +  adr * sizeof( ST_PROTCOL_STEP ) );
    000004E4 75FF                   ADD         #-1,R5
    000004E6 644C                   EXTU.B      R4,R4
    000004E8 00000640               MOVI20      #1600,R0   ; H'00000640
    000004EC 4580                   MULR        R0,R5
    000004EE E014                   MOV         #20,R0     ; H'00000014
    000004F0 02000C00               MOVI20      #3072,R2   ; H'00000C00
    000004F4 4480                   MULR        R0,R4
    000004F6 4228                   SHLL16      R2
    000004F8 D723                   MOV.L       L113+48,R7 ; __$pProcAdr
    000004FA 6603                   MOV         R0,R6
    000004FC 354C                   ADD         R4,R5
    000004FE 352C                   ADD         R2,R5
    00000500 2752                   MOV.L       R5,@R7     ; pProcAdr
             tskrx0.c        651          
             tskrx0.c        652          
             tskrx0.c        653          //          s1:コピー先、      s2:コピー元
             tskrx0.c        654          StrHexcpyn( (char * )&wkbuf[0], (char * )str , 20);
    00000502 D428                   MOV.L       L113+76,R4 ; __$wkbuf
    00000504 D228                   MOV.L       L113+80,R2 ; _StrHexcpyn
    00000506 420B                   JSR         @R2
    00000508 6513                   MOV         R1,R5
    0000050A D71F                   MOV.L       L113+48,R7 ; __$pProcAdr
    0000050C 6472                   MOV.L       @R7,R4     ; pProcAdr
    0000050E E614                   MOV         #20,R6     ; H'00000014
             tskrx0.c        655          memcpy( pProcAdr, &wkbuf[0], sizeof( ST_PROTCOL_STEP ) );
    00000510 D524                   MOV.L       L113+76,R5 ; __$wkbuf
    00000512 D126                   MOV.L       L113+84,R1 ; _memcpy
    00000514 412B                   JMP         @R1
    00000516 4F26                   LDS.L       @R15+,PR
    00000518              L103:
    00000518 4F26                   LDS.L       @R15+,PR
    0000051A 006B                   RTS/N
             tskrx0.c        656          
             tskrx0.c        657          
             tskrx0.c        658    //x       memcpy( pProcAdr, str, sizeof( ST_PROTCOL_STEP ) );
             tskrx0.c        659          
             tskrx0.c        660          
             tskrx0.c        661          
             tskrx0.c        662      }
             tskrx0.c        663    }
             tskrx0.c        664    
             tskrx0.c        665    //UB Get_pcnt( UB pno )
             tskrx0.c        666    //{
             tskrx0.c        667    //    UB cnt = CLR;
             tskrx0.c        668    //    
             tskrx0.c        669    //    if( ( pno > 0 )&&( pno <= PROTMAX ) )
             tskrx0.c        670    //    {
             tskrx0.c        671    //        cnt = prinf.Dat[(pno-1)].Cnt;
             tskrx0.c        672    //    }
             tskrx0.c        673    //    return( cnt );
             tskrx0.c        674    //}
             tskrx0.c        675    UB Get_pno()
    0000051C              _Get_pno:                        ; function: Get_pno
                                                           ; frame size=0
             tskrx0.c        676    {
             tskrx0.c        677      return( potcol_no );
    0000051C D624                   MOV.L       L113+88,R6 ; __$potcol_no
             tskrx0.c        678    }
    0000051E 000B                   RTS
    00000520 6060                   MOV.B       @R6,R0     ; potcol_no
             tskrx0.c        679    UB Get_pcnt()
    00000522              _Get_pcnt:                       ; function: Get_pcnt
                                                           ; frame size=0
             tskrx0.c        680    {
             tskrx0.c        681      return( potcol_cnt );
    00000522 D624                   MOV.L       L113+92,R6 ; __$potcol_cnt
             tskrx0.c        682    }
    00000524 000B                   RTS
    00000526 6060                   MOV.B       @R6,R0     ; potcol_cnt
             tskrx0.c        683    void Set_pno( UB pno )
    00000528              _Set_pno:                        ; function: Set_pno
                                                           ; frame size=0
             tskrx0.c        684    {
             tskrx0.c        685      potcol_no = pno;
    00000528 D221                   MOV.L       L113+88,R2 ; __$potcol_no
             tskrx0.c        686    }
    0000052A 000B                   RTS
    0000052C 2240                   MOV.B       R4,@R2     ; potcol_no
             tskrx0.c        687    void Set_pcnt( UB pcnt )
    0000052E              _Set_pcnt:                       ; function: Set_pcnt
                                                           ; frame size=0
             tskrx0.c        688    {
             tskrx0.c        689      potcol_cnt = pcnt;
    0000052E D221                   MOV.L       L113+92,R2 ; __$potcol_cnt
             tskrx0.c        690    }
    00000530 000B                   RTS
    00000532 2240                   MOV.B       R4,@R2     ; potcol_cnt
             tskrx0.c        691    
             tskrx0.c        692    /***********************************************************************
             tskrx0.c        693    * 
             tskrx0.c        694    * [概要]  
             tskrx0.c        695    * [引数]  
             tskrx0.c        696    * [戻値]  
             tskrx0.c        697    * 
             tskrx0.c        698    ***********************************************************************/
             tskrx0.c        699    static ER     rx0_SetIMPSPED()
    00000534              __$rx0_SetIMPSPED:               ; function: __$rx0_SetIMPSPED
                                                           ; frame size=4
    00000534 4F22                   STS.L       PR,@-R15
             tskrx0.c        700    {
             tskrx0.c        701      Rcvset_spddat( RecvArgs[1] );
    00000536 D120                   MOV.L       L113+96,R1 ; H'00000004+__$RecvArgs
    00000538 D520                   MOV.L       L113+100,R5; _Rcvset_spddat
    0000053A 450B                   JSR         @R5
    0000053C 6412                   MOV.L       @R1,R4     ; RecvArgs[]
             tskrx0.c        702      
             tskrx0.c        703      return( E_SUCCESS );
    0000053E 4F26                   LDS.L       @R15+,PR
             tskrx0.c        704    }
    00000540 000B                   RTS
    00000542 E000                   MOV         #0,R0      ; H'00000000
             tskrx0.c        705    
             tskrx0.c        706    /***********************************************************************
             tskrx0.c        707    * 
             tskrx0.c        708    * [概要]  
             tskrx0.c        709    * [引数]  
             tskrx0.c        710    * [戻値]  
             tskrx0.c        711    * 
             tskrx0.c        712    ***********************************************************************/
             tskrx0.c        713    static ER     rx0_SetIMPPOSI()
    00000544              __$rx0_SetIMPPOSI:               ; function: __$rx0_SetIMPPOSI
                                                           ; frame size=4
    00000544 4F22                   STS.L       PR,@-R15
             tskrx0.c        714    {
             tskrx0.c        715      Rcvset_posdat( RecvArgs[1] );
    00000546 D11C                   MOV.L       L113+96,R1 ; H'00000004+__$RecvArgs
    00000548 D51D                   MOV.L       L113+104,R5; _Rcvset_posdat
    0000054A 450B                   JSR         @R5
    0000054C 6412                   MOV.L       @R1,R4     ; RecvArgs[]
             tskrx0.c        716    
             tskrx0.c        717      return( E_SUCCESS );
    0000054E 4F26                   LDS.L       @R15+,PR
             tskrx0.c        718    }
    00000550 000B                   RTS
    00000552 E000                   MOV         #0,R0      ; H'00000000
             tskrx0.c        719    
             tskrx0.c        720    /***********************************************************************
             tskrx0.c        721    * 
             tskrx0.c        722    * [概要]  
             tskrx0.c        723    * [引数]  
             tskrx0.c        724    * [戻値]  
             tskrx0.c        725    * 
             tskrx0.c        726    ***********************************************************************/
             tskrx0.c        727    static ER     rx0_SetIMPOPTN()
    00000554              __$rx0_SetIMPOPTN:               ; function: __$rx0_SetIMPOPTN
                                                           ; frame size=0
             tskrx0.c        728    {
             tskrx0.c        729      return( E_SUCCESS );
             tskrx0.c        730    }
    00000554 000B                   RTS
    00000556 E000                   MOV         #0,R0      ; H'00000000
    00000558              L113:
    00000558 <00000000>             .DATA.L     L124
    0000055C <00000000>             .DATA.L     _api_snd_dtq
    00000560 <00000000>             .DATA.L     __$RecvData
    00000564 <00000000>             .DATA.L     _mbx_send
    00000568 <00000000>             .DATA.L     _STRTBL_MSG
    0000056C <00000000>             .DATA.L     _strlen
    00000570 <00000000>             .DATA.L     _ToUppern
    00000574 <00000000>             .DATA.L     _Strncmp
    00000578 <00000000>             .DATA.L     __$RecvArgs
    0000057C <00000E20>             .DATA.L     H'00000E20+__$seq
    00000580 <00000015>             .DATA.L     H'00000015+__$seq
    00000584 <00000000>             .DATA.L     _SetRcvData
    00000588 <00000000>             .DATA.L     __$pProcAdr
    0000058C <00000000>             .DATA.L     _memset
    00000590 <00000000>             .DATA.L     __$h_dat
    00000594 <00000000>             .DATA.L     __$l_dat
    00000598 <00000000>             .DATA.L     _AsctoHex
    0000059C <00000000>             .DATA.L     __$pno
    000005A0 <00000000>             .DATA.L     __$prinf
    000005A4 <00000000>             .DATA.L     __$wkbuf
    000005A8 <00000000>             .DATA.L     _StrHexcpyn
    000005AC <00000000>             .DATA.L     _memcpy
    000005B0 <00000000>             .DATA.L     __$potcol_no
    000005B4 <00000000>             .DATA.L     __$potcol_cnt
    000005B8 <00000004>             .DATA.L     H'00000004+__$RecvArgs
    000005BC <00000000>             .DATA.L     _Rcvset_spddat
    000005C0 <00000000>             .DATA.L     _Rcvset_posdat
             tskrx0.c        731    
             tskrx0.c        732    /***********************************************************************
             tskrx0.c        733    * 
             tskrx0.c        734    * [概要]  
             tskrx0.c        735    * [引数]  
             tskrx0.c        736    * [戻値]  
             tskrx0.c        737    * 
             tskrx0.c        738    ***********************************************************************/
             tskrx0.c        739    static ER     rx0_SetEXPRUNL()
             tskrx0.c        740    {
             tskrx0.c        741      return( E_SUCCESS );
             tskrx0.c        742    }
             tskrx0.c        743    
             tskrx0.c        744    /***********************************************************************
             tskrx0.c        745    * 
             tskrx0.c        746    * [概要]  
             tskrx0.c        747    * [引数]  
             tskrx0.c        748    * [戻値]  
             tskrx0.c        749    * 
             tskrx0.c        750    ***********************************************************************/
             tskrx0.c        751    static ER     rx0_SetEXPCOML()
             tskrx0.c        752    {
             tskrx0.c        753      return( E_SUCCESS );
             tskrx0.c        754    }
             tskrx0.c        755    
             tskrx0.c        756    /***********************************************************************
             tskrx0.c        757    * 
             tskrx0.c        758    * [概要]  
             tskrx0.c        759    * [引数]  
             tskrx0.c        760    * [戻値]  
             tskrx0.c        761    * 
             tskrx0.c        762    ***********************************************************************/
             tskrx0.c        763    //static ER       rx0_SetEXPPOSI()
             tskrx0.c        764    //{
             tskrx0.c        765    //    return( E_SUCCESS );
             tskrx0.c        766    //}
             tskrx0.c        767    //
             tskrx0.c        768    /***********************************************************************
             tskrx0.c        769    * 
             tskrx0.c        770    * [概要]  
             tskrx0.c        771    * [引数]  
             tskrx0.c        772    * [戻値]  
             tskrx0.c        773    * 
             tskrx0.c        774    ***********************************************************************/
             tskrx0.c        775    //static ER       rx0_SetEXPOPTN()
             tskrx0.c        776    //{
             tskrx0.c        777    //    return( E_SUCCESS );
             tskrx0.c        778    //}
             tskrx0.c        779    //
             tskrx0.c        780    /***********************************************************************
             tskrx0.c        781    * 
             tskrx0.c        782    * [概要]  
             tskrx0.c        783    * [引数]  
             tskrx0.c        784    * [戻値]  
             tskrx0.c        785    * 
             tskrx0.c        786    ***********************************************************************/
             tskrx0.c        787    //static ER       rx0_SetEXPCLOG()
             tskrx0.c        788    //{
             tskrx0.c        789    //    return( E_SUCCESS );
             tskrx0.c        790    //}
             tskrx0.c        791    //
D   00000000              _Rx0FuncTbl:                     ; static: Rx0FuncTbl
    00000000 <00000000>   
             <00000000>             .DATA.L     __$rx0_dmy,__$rx0_idle,__$rx0_cmdrecv,__$rx0_bcc1recv,__$rx0_bcc2recv
             <00000000>   
             <00000000>   
             <00000000>   
C   00000000              L124:
    00000000 433A5C5573             .SDATA      "C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskrx0.c"
             6572735C53   
             65696A6959   
             616D617A61   
             6B695C446F   
             63756D656E   
             74735C5175   
             69636B6765   
             6E655C536F   
             66745F4669   
             726D5C5175   
             69636B4765   
             6E655F5072   
             6F6A656374   
             325C74736B   
             7278302E63   
    00000050 00                     .DATA.B     H'00
B   00000000              __$seq:                          ; static: __$seq
    00000000 00000004               .RES.L      906
    00000E28              __$RecvData:                     ; static: __$RecvData
    00000E28 00000001               .RES.B      60
    00000E64              __$RecvArgs:                     ; static: __$RecvArgs
    00000E64 00000004               .RES.L      100
    00000FF4              __$pProcAdr:                     ; static: __$pProcAdr
    00000FF4 00000004               .RES.L      1
    00000FF8              __$prinf:                        ; static: __$prinf
    00000FF8 00000001               .RES.B      128
    00001078              __$wkbuf:                        ; static: __$wkbuf
    00001078 00000001               .RES.B      32
    00001098              __$potcol_no:                    ; static: __$potcol_no
    00001098 00000001               .RES.B      1
    00001099              __$potcol_cnt:                   ; static: __$potcol_cnt
    00001099 00000001               .RES.B      1
    0000109A              __$h_dat:                        ; static: __$h_dat
    0000109A 00000001               .RES.B      1
    0000109B              __$l_dat:                        ; static: __$l_dat
    0000109B 00000001               .RES.B      1
    0000109C              __$pno:                          ; static: __$pno
    0000109C 00000001               .RES.B      1
SH SERIES C/C++ Compiler (V.9.02.00.003)                                                         08-Sep-2023 13:46:36  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      791



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 000005C4 Byte(s)
CONSTANT SECTION (C):                                 00000051 Byte(s)
DATA     SECTION (D):                                 00000014 Byte(s)
BSS      SECTION (B):                                 0000109D Byte(s)

TOTAL PROGRAM  SECTION: 000005C4 Byte(s)
TOTAL CONSTANT SECTION: 00000051 Byte(s)
TOTAL DATA     SECTION: 00000014 Byte(s)
TOTAL BSS      SECTION: 0000109D Byte(s)

    TOTAL PROGRAM SIZE: 000016C6 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           18
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          13
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            63



*** COMMAND PARAMETER ***

-subcommand=C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskrx0.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-object="C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskrx0.obj"
-debug
-listfile="C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskrx0.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskrx0.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
