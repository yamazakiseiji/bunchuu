SH SERIES C/C++ Compiler (V.9.02.00.003)                                                         08-Sep-2023 13:46:37  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskrxEx.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

            tskrxEx.c          1    /******************************************************************************
            tskrxEx.c          2    * シリアル通信２ 受信タスク                                                   *
            tskrxEx.c          3    *                                                                             *
            tskrxEx.c          4    * File name : tskrxEx.c                                                       *
            tskrxEx.c          5    *                                                                             *
            tskrxEx.c          6    * Copyright (c) 2018 NICHIRYO Co., Ltd.                                       *
            tskrxEx.c          7    *                                                                             *
            tskrxEx.c          8    ******************************************************************************/
            tskrxEx.c          9    
            tskrxEx.c         10    // （注）----------------------------------------------------------------------
            tskrxEx.c         11    //       シリアル０通信：ＰＣ制御に使用（固定）
            tskrxEx.c         12    //       シリアル１通信：ＥＥＰＲＯＭアクセスのためＳＰＩ通信に使用（固定）
            tskrxEx.c         13    //       シリアル２通信：タッチパネル通信
            tskrxEx.c         14    //       シリアル３通信：拡張用（ただしＨＵＤＩのためエミレータ使用中は使えない）
            tskrxEx.c         15    // （注）----------------------------------------------------------------------
            tskrxEx.c         16    
            tskrxEx.c         17    
            tskrxEx.c         18    #include <kernel.h>
            tskrxEx.c         19    #include "iodefine.h"
            tskrxEx.c         20    #include "define.h"
            tskrxEx.c         21    #include "tskrxEx.h"
            tskrxEx.c         22    #include "datastruct.h"
            tskrxEx.c         23    #include "sub.h"
            tskrxEx.c         24    #include "macro.h"
            tskrxEx.c         25    
            tskrxEx.c         26    //*************************************
            tskrxEx.c         27    // 定数定義
            tskrxEx.c         28    //*************************************
            tskrxEx.c         29    #define COM2_BUFSIZ           128                                         // 通信データ受信バッファサイズ
            tskrxEx.c         30    #define KINDID_MAX            256                                         // 
            tskrxEx.c         31    
            tskrxEx.c         32    //*************************************
            tskrxEx.c         33    // 関数定義
            tskrxEx.c         34    //*************************************
            tskrxEx.c         35    static void rx2_init();                                                   // 初期化
            tskrxEx.c         36    typedef   ER  (*RX2_FUNC)( UB data );                                     // コールファンクション
            tskrxEx.c         37    static    ER  rx2_dmy( UB rxdata );                                       // ダミー
            tskrxEx.c         38    static    ER  rx2_idle( UB rxdata );                                      // 待機状態
            tskrxEx.c         39    static    ER  rx2_crrecv( UB rxdata );                                    // CR受信
            tskrxEx.c         40    
            tskrxEx.c         41    static    ER  rx2_etx( UB rxdata );                                       // 
            tskrxEx.c         42    static    ER  rx2_sum1( UB rxdata );                                      // 
            tskrxEx.c         43    static    ER  rx2_sum2( UB rxdata );                                      // 
            tskrxEx.c         44    
            tskrxEx.c         45    
            tskrxEx.c         46    //*************************************
            tskrxEx.c         47    // テーブル
            tskrxEx.c         48    //*************************************
            tskrxEx.c         49    
            tskrxEx.c         50    // コールファンクション
            tskrxEx.c         51    RX2_FUNC  Rx2FuncTbl[3] = 
            tskrxEx.c         52    {
            tskrxEx.c         53      &rx2_dmy     ,                                                      // STS00
            tskrxEx.c         54      &rx2_idle    ,                                                      // STS01
            tskrxEx.c         55      &rx2_crrecv                                                         // STS02
            tskrxEx.c         56    };
            tskrxEx.c         57    
            tskrxEx.c         58    //*************************************
            tskrxEx.c         59    // データ定義
            tskrxEx.c         60    //*************************************
            tskrxEx.c         61    static    ST_SEQ2 seq2;                                                   // 
            tskrxEx.c         62    static    UB      TplRecvData[512];                                       // 
            tskrxEx.c         63    
            tskrxEx.c         64    
            tskrxEx.c         65    
            tskrxEx.c         66    /******************************************************************************
            tskrxEx.c         67    * 
            tskrxEx.c         68    * [概要]  シリアル通信（拡張用）タスク処理
            tskrxEx.c         69    * [引数]  なし
            tskrxEx.c         70    * [戻値]  なし
            tskrxEx.c         71    * 
            tskrxEx.c         72    ******************************************************************************/
            tskrxEx.c         73    TASK TskRxEx( void )
P   00000000              _TskRxEx:                        ; function: TskRxEx
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
            tskrxEx.c         74    {
            tskrxEx.c         75      T_COM_CHAR  rxd;
            tskrxEx.c         76        ER          err;
            tskrxEx.c         77      UB          rxdat;
            tskrxEx.c         78      volatile struct st_sci*  sci2;
            tskrxEx.c         79    
            tskrxEx.c         80      // 制御データ初期化
            tskrxEx.c         81      rx2_init();
    00000002 B080                   BSR         __$rx2_init
    00000004 0009                   NOP
            tskrxEx.c         82    
            tskrxEx.c         83      //バーコードリーダ通信設定(Port2)
            tskrxEx.c         84      sci2 = &SCI2;
    00000006 E490                   MOV         #-112,R4   ; H'FFFFFF90
            tskrxEx.c         85      sci2->SCBRR          = 32;                                          // ボーレート       38400bps
    00000008 E020                   MOV         #32,R0     ; H'00000020
    0000000A 4418                   SHLL8       R4
    0000000C 8042                   MOV.B       R0,@(2,R4) ; (sci2)->SCBRR
            tskrxEx.c         86      sci2->SCSMR.BIT.CHR  = 0;                                           // データ長         8bit
    0000000E 34690000               BCLR.B      #6,@(0,R4) ; (part of)(sci2)->sci2
    00000012 DEAA                   MOV.L       L68,R14    ; _v4_trcv_dtq
            tskrxEx.c         87      sci2->SCSMR.BIT.STOP = 0;                                           // ストップビット   1bit
    00000014 34390000               BCLR.B      #3,@(0,R4) ; (part of)(sci2)->sci2
    00000018 DDA9                   MOV.L       L68+4,R13  ; _Rx2FuncTbl
            tskrxEx.c         88      sci2->SCSMR.BIT._PE  = 0;                                           // パリティ         なし
    0000001A 34590000               BCLR.B      #5,@(0,R4) ; (part of)(sci2)->sci2
            tskrxEx.c         89      sio2_set(sci2);
    0000001E B041                   BSR         _sio2_set
    00000020 0009                   NOP
            tskrxEx.c         90    
            tskrxEx.c         91      //バーコードリーダ通信開始(Port2)
            tskrxEx.c         92      sio2_init(SIO_OPEN);
    00000022 B015                   BSR         _sio2_init
    00000024 E401                   MOV         #1,R4      ; H'00000001
    00000026 DCA7                   MOV.L       L68+8,R12  ; __$seq2
    00000028              L11:
            tskrxEx.c         93    
            tskrxEx.c         94      for( ; ; )
            tskrxEx.c         95      {
            tskrxEx.c         96          err = rcv_dtq( ID_DTQ_RXEX, &rxd.data );                        // データ受信
    00000028 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    0000002A E402                   MOV         #2,R4      ; H'00000002
    0000002C 4E0B                   JSR         @R14
    0000002E 65F3                   MOV         R15,R5
            tskrxEx.c         97          if( rxd.byte.type != COM_MTYP_CHR )                             // エラー？
    00000030 62F0                   MOV.B       @R15,R2    ; rxd.byte.type
    00000032 2228                   TST         R2,R2
    00000034 8903                   BT          L13
            tskrxEx.c         98          {
            tskrxEx.c         99              rx2_init();                                                 // 初期化
    00000036 B066                   BSR         __$rx2_init
    00000038 0009                   NOP
    0000003A AFF5                   BRA         L11
    0000003C 0009                   NOP
    0000003E              L13:
            tskrxEx.c        100              continue;
            tskrxEx.c        101          }
            tskrxEx.c        102          rxdat = rxd.byte.data;                                          // 受信データ取得
    0000003E 84F1                   MOV.B       @(1,R15),R0; rxd.byte.data
    00000040 6403                   MOV         R0,R4
            tskrxEx.c        103          err = Rx2FuncTbl[seq2.rstatus]( rxdat ) ;                       // ファンクションテーブル実行
    00000042 30C18000               MOVU.B      @(0,R12),R0; seq2.rstatus
    00000046 4008                   SHLL2       R0
    00000048 06DE                   MOV.L       @(R0,R13),R6; Rx2FuncTbl[]
    0000004A 464B                   JSR/N       @R6
    0000004C AFEC                   BRA         L11
    0000004E 0009                   NOP
            tskrxEx.c        104      }
            tskrxEx.c        105    }
            tskrxEx.c        106    
            tskrxEx.c        107    /******************************************************************************
            tskrxEx.c        108    * 
            tskrxEx.c        109    * [概要]  シリアルポート２初期化
            tskrxEx.c        110    * [引数]  act:OPEN/CLOSE指定
            tskrxEx.c        111    * [戻値]  なし
            tskrxEx.c        112    * 
            tskrxEx.c        113    ******************************************************************************/
            tskrxEx.c        114    ER sio2_init(INT act)
    00000050              _sio2_init:                      ; function: sio2_init
                                                           ; frame size=0
            tskrxEx.c        115    {
            tskrxEx.c        116      // SCI2設定
            tskrxEx.c        117      if( act == SIO_OPEN )
    00000050 E690                   MOV         #-112,R6   ; H'FFFFFF90
    00000052 6043                   MOV         R4,R0
    00000054 8801                   CMP/EQ      #1,R0
    00000056 8F0E                   BF/S        L17
    00000058 4618                   SHLL8       R6
            tskrxEx.c        118      {
            tskrxEx.c        119          if( SCI2.SCSCR.BIT.TE )     return( E_COM_P_OPEN );
    0000005A 36593004               BLD.B       #5,@(4,R6)
    0000005E 891E                   BT          L19
            tskrxEx.c        120          if( SCI2.SCSCR.BIT.RE )     return( E_COM_P_OPEN );
    00000060 36493004               BLD.B       #4,@(4,R6)
    00000064 891B                   BT          L19
            tskrxEx.c        121    
            tskrxEx.c        122          SCI2.SCSCR.BIT.RIE      = 1;                                    // 受信データフル割り込み許可
    00000066 36691004               BSET.B      #6,@(4,R6)
            tskrxEx.c        123          SCI2.SCSCR.BIT.TE       = 1;                                    // 送信許可
    0000006A 36591004               BSET.B      #5,@(4,R6)
            tskrxEx.c        124          SCI2.SCSCR.BIT.RE       = 1;                                    // 受信許可
    0000006E 36491004               BSET.B      #4,@(4,R6)
    00000072 A006                   BRA         L21
    00000074 0009                   NOP
    00000076              L17:
            tskrxEx.c        125      }
            tskrxEx.c        126      else
            tskrxEx.c        127      {
            tskrxEx.c        128          SCI2.SCSCR.BIT.RIE      = 0;                                    // 受信データフル割り込み許可
    00000076 36690004               BCLR.B      #6,@(4,R6)
            tskrxEx.c        129          SCI2.SCSCR.BIT.TE       = 0;                                    // 送信禁止
    0000007A 36590004               BCLR.B      #5,@(4,R6)
            tskrxEx.c        130          SCI2.SCSCR.BIT.RE       = 0;                                    // 受信禁止
    0000007E 36490004               BCLR.B      #4,@(4,R6)
    00000082              L21:
            tskrxEx.c        131      }
            tskrxEx.c        132    
            tskrxEx.c        133      SCI2.SCSCR.BIT.TIE      = 0;                                        // 送信データエンプティ割り込み禁止
    00000082 36790004               BCLR.B      #7,@(4,R6)
            tskrxEx.c        134      SCI2.SCSCR.BIT.TEIE     = 0;                                        // 送信終了割り込み禁止
            tskrxEx.c        135      INTC.IPR16.BIT._SCI2    = INT_PRI_SCI2;                             // 優先順位
    00000086 01E00C14               MOVI20      #-127980,R1; H'FFFE0C14
    0000008A 36290004               BCLR.B      #2,@(4,R6)
    0000008E 6011                   MOV.W       @R1,R0
    00000090 0500FF0F               MOVI20      #65295,R5  ; H'0000FF0F
    00000094 2059                   AND         R5,R0
    00000096 CB70                   OR          #112,R0
    00000098 2101                   MOV.W       R0,@R1
            tskrxEx.c        136    
            tskrxEx.c        137      return( E_SUCCESS );
    0000009A 000B                   RTS
    0000009C E000                   MOV         #0,R0      ; H'00000000
    0000009E              L19:
    0000009E 00000604               MOVI20      #1540,R0   ; H'00000604
    000000A2 006B                   RTS/N
            tskrxEx.c        138    }
            tskrxEx.c        139    /******************************************************************************
            tskrxEx.c        140    * 
            tskrxEx.c        141    * [概要]  シリアル２通信設定
            tskrxEx.c        142    * [引数]  comm:シリアル設定データアドレス
            tskrxEx.c        143    * [戻値]  なし
            tskrxEx.c        144    * 
            tskrxEx.c        145    ******************************************************************************/
            tskrxEx.c        146    void sio2_set( volatile struct st_sci* comm )
    000000A4              _sio2_set:                       ; function: sio2_set
                                                           ; frame size=0
            tskrxEx.c        147    {
            tskrxEx.c        148      SCI2.SCSCR.BIT.RIE      = 0;                                        // 受信データフル割り込み許可
    000000A4 E690                   MOV         #-112,R6   ; H'FFFFFF90
    000000A6 4618                   SHLL8       R6
    000000A8 36690004               BCLR.B      #6,@(4,R6)
            tskrxEx.c        149      SCI2.SCSCR.BIT.TIE      = 0;                                        // 送信データエンプティ割り込み禁止
    000000AC 36790004               BCLR.B      #7,@(4,R6)
            tskrxEx.c        150      SCI2.SCSCR.BIT.TEIE     = 0;                                        // 送信終了割り込み禁止
    000000B0 36290004               BCLR.B      #2,@(4,R6)
            tskrxEx.c        151      SCI2.SCSCR.BIT.MPIE     = 0;                                        // 
    000000B4 36390004               BCLR.B      #3,@(4,R6)
            tskrxEx.c        152      SCI2.SCSCR.BIT.TE       = 0;                                        // 送信禁止
    000000B8 36590004               BCLR.B      #5,@(4,R6)
            tskrxEx.c        153      SCI2.SCSCR.BIT.RE       = 0;                                        // 受信禁止
    000000BC 36490004               BCLR.B      #4,@(4,R6)
            tskrxEx.c        154    
            tskrxEx.c        155      
            tskrxEx.c        156      // SCI2設定
            tskrxEx.c        157      SCI2.SCSMR.BIT.CA    = 0;                                           // 調歩同期式
    000000C0 36790000               BCLR.B      #7,@(0,R6)
            tskrxEx.c        158      SCI2.SCSMR.BIT.CHR   = comm->SCSMR.BIT.CHR;                         // データビット長（７、８）
    000000C4 34693000               BLD.B       #6,@(0,R4) ; (part of)(comm)->comm
    000000C8 36692000               BST.B       #6,@(0,R6)
            tskrxEx.c        159      SCI2.SCSMR.BIT._PE   = comm->SCSMR.BIT._PE;                         // パリティ（NON,EVE,ODD）
    000000CC 34593000               BLD.B       #5,@(0,R4) ; (part of)(comm)->comm
    000000D0 36592000               BST.B       #5,@(0,R6)
            tskrxEx.c        160      SCI2.SCSMR.BIT.STOP  = comm->SCSMR.BIT.STOP;                        // ストップビット(NON,1,2)
    000000D4 34393000               BLD.B       #3,@(0,R4) ; (part of)(comm)->comm
    000000D8 36392000               BST.B       #3,@(0,R6)
            tskrxEx.c        161      SCI2.SCSMR.BIT.CKS   = 0;                                           // クロックセレクト
    000000DC 6060                   MOV.B       @R6,R0
    000000DE C9FC                   AND         #252,R0
    000000E0 2600                   MOV.B       R0,@R6
            tskrxEx.c        162      SCI2.SCBRR           = comm->SCBRR;                                 // ボーレート(9600,14400,19200,38400)
    000000E2 8442                   MOV.B       @(2,R4),R0 ; (comm)->SCBRR
            tskrxEx.c        163    }
    000000E4 000B                   RTS
    000000E6 8062                   MOV.B       R0,@(2,R6)
            tskrxEx.c        164    
            tskrxEx.c        165    /***********************************************************************
            tskrxEx.c        166    * 
            tskrxEx.c        167    * [概要]  コマンドリクエスト受信監視用アラームハンドラ
            tskrxEx.c        168    * [引数]  exinf:OS拡張情報
            tskrxEx.c        169    * [戻値]  なし
            tskrxEx.c        170    * 
            tskrxEx.c        171    ***********************************************************************/
            tskrxEx.c        172    void AlmComR2Dat( VP_INT exinf )
    000000E8              _AlmComR2Dat:                    ; function: AlmComR2Dat
                                                           ; frame size=0
            tskrxEx.c        173    {
            tskrxEx.c        174      VP_INT dmyint;
            tskrxEx.c        175      
            tskrxEx.c        176      dmyint = exinf;                                                     // 読み捨て
            tskrxEx.c        177      
            tskrxEx.c        178      rx2_init();                                                         // 初期化
    000000E8 A00D                   BRA         __$rx2_init
    000000EA 0009                   NOP
            tskrxEx.c        179    }
            tskrxEx.c        180    /***********************************************************************
            tskrxEx.c        181    * 
            tskrxEx.c        182    * [概要]  ポート状態取得
            tskrxEx.c        183    * [引数]  なし
            tskrxEx.c        184    * [戻値]  TRUE:オープン、FALSE:クローズ
            tskrxEx.c        185    * 
            tskrxEx.c        186    ***********************************************************************/
            tskrxEx.c        187    BOOL GetPortActive()
    000000EC              _GetPortActive:                  ; function: GetPortActive
                                                           ; frame size=0
            tskrxEx.c        188    {
            tskrxEx.c        189      BOOL    actflg = FALSE;
            tskrxEx.c        190    
            tskrxEx.c        191      if(( SCI2.SCSCR.BIT.TE )&&( SCI2.SCSCR.BIT.RE ))
    000000EC E590                   MOV         #-112,R5   ; H'FFFFFF90
    000000EE 4518                   SHLL8       R5
    000000F0 35593004               BLD.B       #5,@(4,R5)
    000000F4 8F04                   BF/S        L27
    000000F6 E600                   MOV         #0,R6      ; H'00000000
    000000F8 35493004               BLD.B       #4,@(4,R5)
    000000FC 8B00                   BF          L27
            tskrxEx.c        192      {
            tskrxEx.c        193          actflg = TRUE;
    000000FE E601                   MOV         #1,R6      ; H'00000001
    00000100              L27:
            tskrxEx.c        194      }
            tskrxEx.c        195    
            tskrxEx.c        196      return( actflg );
            tskrxEx.c        197    }
    00000100 067B                   RTV/N       R6
            tskrxEx.c        198    
            tskrxEx.c        199    /***********************************************************************
            tskrxEx.c        200    * 
            tskrxEx.c        201    * [概要]  ダミー
            tskrxEx.c        202    * [引数]  rxdata:受信データ
            tskrxEx.c        203    * [戻値]  状態
            tskrxEx.c        204    * 
            tskrxEx.c        205    ***********************************************************************/
            tskrxEx.c        206    static ER rx2_dmy( UB rxdata )
    00000102              __$rx2_dmy:                      ; function: __$rx2_dmy
                                                           ; frame size=0
            tskrxEx.c        207    {
            tskrxEx.c        208      UB dmy;
            tskrxEx.c        209        ER          err = E_SUCCESS;
            tskrxEx.c        210      
            tskrxEx.c        211      dmy = rxdata;   // 読み捨て
            tskrxEx.c        212      return( err );
            tskrxEx.c        213    }
    00000102 000B                   RTS
    00000104 E000                   MOV         #0,R0      ; H'00000000
            tskrxEx.c        214    
            tskrxEx.c        215    /***********************************************************************
            tskrxEx.c        216    * 
            tskrxEx.c        217    * [概要]  初期化
            tskrxEx.c        218    * [引数]  なし
            tskrxEx.c        219    * [戻値]  なし
            tskrxEx.c        220    * 
            tskrxEx.c        221    ***********************************************************************/
            tskrxEx.c        222    static void rx2_init()
    00000106              __$rx2_init:                     ; function: __$rx2_init
                                                           ; frame size=4
    00000106 4F22                   STS.L       PR,@-R15
            tskrxEx.c        223    {
            tskrxEx.c        224      stp_alm( ID_ALM_R2DAT );
    00000108 D16F                   MOV.L       L68+12,R1  ; _v4_stp_alm
    0000010A 410B                   JSR         @R1
    0000010C E404                   MOV         #4,R4      ; H'00000004
    0000010E E60C                   MOV         #12,R6     ; H'0000000C
            tskrxEx.c        225    
            tskrxEx.c        226      memset( &seq2, 0x00, sizeof( seq2 ) );
    00000110 D46C                   MOV.L       L68+8,R4   ; __$seq2
    00000112 D76E                   MOV.L       L68+16,R7  ; _memset
    00000114 470B                   JSR         @R7
    00000116 E500                   MOV         #0,R5      ; H'00000000
            tskrxEx.c        227      
            tskrxEx.c        228      seq2.rstatus = STS01;
    00000118 E201                   MOV         #1,R2      ; H'00000001
    0000011A D16A                   MOV.L       L68+8,R1   ; __$seq2
    0000011C 4F26                   LDS.L       @R15+,PR
            tskrxEx.c        229    }
    0000011E 000B                   RTS
    00000120 2120                   MOV.B       R2,@R1     ; seq2.rstatus
            tskrxEx.c        230    
            tskrxEx.c        231    /***********************************************************************
            tskrxEx.c        232    * 
            tskrxEx.c        233    * [概要]  アイドリング
            tskrxEx.c        234    * [引数]  なし
            tskrxEx.c        235    * [戻値]  なし
            tskrxEx.c        236    * 
            tskrxEx.c        237    ***********************************************************************/
            tskrxEx.c        238    static ER rx2_idle( UB rxdata )
    00000122              __$rx2_idle:                     ; function: __$rx2_idle
                                                           ; frame size=36
    00000122 4EF0                   MOVMU.L     R14,@-R15
    00000124 7FFC                   ADD         #-4,R15
            tskrxEx.c        239    {
            tskrxEx.c        240        ER  err = E_SUCCESS;
            tskrxEx.c        241    
            tskrxEx.c        242      switch( rxdata )
    00000126 604C                   EXTU.B      R4,R0
    00000128 2F42                   MOV.L       R4,@R15
    0000012A 8802                   CMP/EQ      #2,R0
    0000012C 3F410003               MOV.B       R4,@(3:12,R15); rxdata
    00000130 8D06                   BT/S        L38
    00000132 EE00                   MOV         #0,R14     ; H'00000000
    00000134 8806                   CMP/EQ      #6,R0
    00000136 891B                   BT          L40
    00000138 8815                   CMP/EQ      #21,R0
    0000013A 892F                   BT          L41
    0000013C A043                   BRA         L42
    0000013E 0009                   NOP
    00000140              L38:
    00000140 E602                   MOV         #2,R6      ; H'00000002
    00000142 E500                   MOV         #0,R5      ; H'00000000
            tskrxEx.c        243      {
            tskrxEx.c        244          case STX:
            tskrxEx.c        245              memset( &TplRecvData[0], 0x00, sizeof(TplRecvData) );
    00000144 D462                   MOV.L       L68+20,R4  ; __$TplRecvData
    00000146 D161                   MOV.L       L68+16,R1  ; _memset
    00000148 410B                   JSR         @R1
    0000014A 4618                   SHLL8       R6
            tskrxEx.c        246    
            tskrxEx.c        247              seq2.type = RCVCMD;
            tskrxEx.c        248              seq2.rstatus = STS02;
            tskrxEx.c        249              TplRecvData[0] = rxdata;
    0000014C 37F14003               MOV.B       @(3:12,R15),R7; rxdata
    00000150 E410                   MOV         #16,R4     ; H'00000010
    00000152 E502                   MOV         #2,R5      ; H'00000002
    00000154 D65B                   MOV.L       L68+8,R6   ; __$seq2
    00000156 D25E                   MOV.L       L68+20,R2  ; __$TplRecvData
            tskrxEx.c        250              seq2.wpnt = 1;
    00000158 E101                   MOV         #1,R1      ; H'00000001
    0000015A 1641                   MOV.L       R4,@(4,R6) ; seq2.type
    0000015C 2650                   MOV.B       R5,@R6     ; seq2.rstatus
    0000015E 2270                   MOV.B       R7,@R2     ; TplRecvData[]
    00000160 1612                   MOV.L       R1,@(8,R6) ; seq2.wpnt
            tskrxEx.c        251              sta_alm( ID_ALM_R2DAT, TMOUT_RCV );
    00000162 05000BB8               MOVI20      #3000,R5   ; H'00000BB8
    00000166 D25B                   MOV.L       L68+24,R2  ; _v4_sta_alm
    00000168 420B                   JSR         @R2
    0000016A E404                   MOV         #4,R4      ; H'00000004
    0000016C A02D                   BRA         L43
    0000016E 0009                   NOP
    00000170              L40:
            tskrxEx.c        252              break;
            tskrxEx.c        253          case ACK:
            tskrxEx.c        254              err = mbx_send  (
            tskrxEx.c        255                                  ID_TSK_RXEX,
            tskrxEx.c        256                                  ID_MPF_CMD,
            tskrxEx.c        257                                  ID_MBX_CMD,
            tskrxEx.c        258                                  NO_DATA,
            tskrxEx.c        259                                  NO_DATA,
            tskrxEx.c        260                                  ID_MSG_ACK,
            tskrxEx.c        261                                  0, 
            tskrxEx.c        262                                  0, 
            tskrxEx.c        263                                  &rxdata,
            tskrxEx.c        264                                  sizeof( rxdata )
            tskrxEx.c        265                              );
    00000170 0129                   MOVT        R1
    00000172 2F16                   MOV.L       R1,@-R15
    00000174 64F3                   MOV         R15,R4
    00000176 7407                   ADD         #7,R4
    00000178 2F46                   MOV.L       R4,@-R15
    0000017A E500                   MOV         #0,R5      ; H'00000000
    0000017C 2F56                   MOV.L       R5,@-R15
    0000017E 2F56                   MOV.L       R5,@-R15
    00000180 E765                   MOV         #101,R7    ; H'00000065
    00000182 2F76                   MOV.L       R7,@-R15
    00000184 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    00000186 6EEC                   EXTU.B      R14,R14
    00000188 67E3                   MOV         R14,R7
    0000018A 2FE6                   MOV.L       R14,@-R15
    0000018C E605                   MOV         #5,R6      ; H'00000005
    0000018E E504                   MOV         #4,R5      ; H'00000004
    00000190 D251                   MOV.L       L68+28,R2  ; _mbx_send
    00000192 420B                   JSR         @R2
    00000194 E403                   MOV         #3,R4      ; H'00000003
    00000196 7F18                   ADD         #24,R15
    00000198 A015                   BRA         L42
    0000019A 6E03                   MOV         R0,R14
    0000019C              L41:
            tskrxEx.c        266              rx2_init();
            tskrxEx.c        267              break;
            tskrxEx.c        268          case NAK:
            tskrxEx.c        269              err = mbx_send  (
            tskrxEx.c        270                                  ID_TSK_RXEX,
            tskrxEx.c        271                                  ID_MPF_CMD,
            tskrxEx.c        272                                  ID_MBX_CMD,
            tskrxEx.c        273                                  NO_DATA,
            tskrxEx.c        274                                  NO_DATA,
            tskrxEx.c        275                                  ID_MSG_NAK,
            tskrxEx.c        276                                  0, 
            tskrxEx.c        277                                  0, 
            tskrxEx.c        278                                  &rxdata,
            tskrxEx.c        279                                  sizeof( rxdata )
            tskrxEx.c        280                              );
    0000019C 0129                   MOVT        R1
    0000019E 2F16                   MOV.L       R1,@-R15
    000001A0 64F3                   MOV         R15,R4
    000001A2 7407                   ADD         #7,R4
    000001A4 2F46                   MOV.L       R4,@-R15
    000001A6 E500                   MOV         #0,R5      ; H'00000000
    000001A8 2F56                   MOV.L       R5,@-R15
    000001AA 2F56                   MOV.L       R5,@-R15
    000001AC E766                   MOV         #102,R7    ; H'00000066
    000001AE 2F76                   MOV.L       R7,@-R15
    000001B0 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    000001B2 6EEC                   EXTU.B      R14,R14
    000001B4 67E3                   MOV         R14,R7
    000001B6 2FE6                   MOV.L       R14,@-R15
    000001B8 E605                   MOV         #5,R6      ; H'00000005
    000001BA E504                   MOV         #4,R5      ; H'00000004
    000001BC D246                   MOV.L       L68+28,R2  ; _mbx_send
    000001BE 420B                   JSR         @R2
    000001C0 E403                   MOV         #3,R4      ; H'00000003
    000001C2 7F18                   ADD         #24,R15
    000001C4 6E03                   MOV         R0,R14
    000001C6              L42:
    000001C6 BF9E                   BSR         __$rx2_init
    000001C8 0009                   NOP
    000001CA              L43:
            tskrxEx.c        281              rx2_init();
            tskrxEx.c        282              break;
            tskrxEx.c        283          default:
            tskrxEx.c        284              rx2_init();
            tskrxEx.c        285              break;
            tskrxEx.c        286      }
            tskrxEx.c        287    
            tskrxEx.c        288      return( err );
    000001CA 60E3                   MOV         R14,R0
    000001CC 7F04                   ADD         #4,R15
    000001CE 4EF4                   MOVMU.L     @R15+,R14
            tskrxEx.c        289    }
    000001D0 006B                   RTS/N
            tskrxEx.c        290    static    UB  ubDatSiz  ;
            tskrxEx.c        291    static    UB  ubCalSiz  ;
            tskrxEx.c        292    static    UB  ubCalSum  ;
            tskrxEx.c        293    static    UB  ubRcvSum  ;
            tskrxEx.c        294    static    UB  ubRcvSum1 ;
            tskrxEx.c        295    static    UB  ubRcvSum2 ;
            tskrxEx.c        296    static    UB  ubKindId  ;
            tskrxEx.c        297    
            tskrxEx.c        298    /***********************************************************************
            tskrxEx.c        299    * 
            tskrxEx.c        300    * [概要]  改行コード（CR）まで受信処理
            tskrxEx.c        301    * [引数]  なし
            tskrxEx.c        302    * [戻値]  なし
            tskrxEx.c        303    * 
            tskrxEx.c        304    ***********************************************************************/
            tskrxEx.c        305    static ER rx2_crrecv( UB rxdata )
    000001D2              __$rx2_crrecv:                   ; function: __$rx2_crrecv
                                                           ; frame size=44
    000001D2 4DF0                   MOVMU.L     R13,@-R15
    000001D4 7FF8                   ADD         #-8,R15
            tskrxEx.c        306    {
            tskrxEx.c        307      ER  err       = E_CONTINUE;
    000001D6 E2F1                   MOV         #-15,R2    ; H'FFFFFFF1
    000001D8 D53A                   MOV.L       L68+8,R5   ; __$seq2
    000001DA 622C                   EXTU.B      R2,R2
    000001DC 5052                   MOV.L       @(8,R5),R0 ; seq2.wpnt
    000001DE 2F22                   MOV.L       R2,@R15    ; err
            tskrxEx.c        308    #if 0
            tskrxEx.c        309      UB  ubDatSiz  = CLR;
            tskrxEx.c        310      UB  ubCalSiz  = CLR;
            tskrxEx.c        311      UB  ubCalSum  = CLR;
            tskrxEx.c        312      UB  ubRcvSum  = CLR;
            tskrxEx.c        313      UB  ubRcvSum1 = CLR;
            tskrxEx.c        314      UB  ubRcvSum2 = CLR;
            tskrxEx.c        315      UB  ubKindId  = CLR;
            tskrxEx.c        316    #endif
            tskrxEx.c        317      
            tskrxEx.c        318      if(seq2.wpnt < COM2_BUFSIZ)
    000001E0 728F                   ADD         #-113,R2
    000001E2 3023                   CMP/GE      R2,R0
    000001E4 8B01                   BF          L70
    000001E6 A08D                   BRA         L52
    000001E8 0009                   NOP
    000001EA              L70:
            tskrxEx.c        319      {
            tskrxEx.c        320          TplRecvData[seq2.wpnt++] = rxdata;
    000001EA DE39                   MOV.L       L68+20,R14 ; __$TplRecvData
    000001EC 0E44                   MOV.B       R4,@(R0,R14); TplRecvData[]
    000001EE 7001                   ADD         #1,R0
    000001F0 6603                   MOV         R0,R6
    000001F2 1502                   MOV.L       R0,@(8,R5) ; seq2.wpnt
            tskrxEx.c        321    
            tskrxEx.c        322          if( rxdata == LFCHR )
    000001F4 604C                   EXTU.B      R4,R0
    000001F6 880A                   CMP/EQ      #10,R0
    000001F8 8901                   BT          L71
    000001FA A086                   BRA         L54
    000001FC 0009                   NOP
    000001FE              L71:
            tskrxEx.c        323          {
            tskrxEx.c        324              seq2.rstatus++;
    000001FE 6150                   MOV.B       @R5,R1     ; seq2.rstatus
            tskrxEx.c        325              
            tskrxEx.c        326              if( seq2.wpnt >= 10 )                                       // STX A$ 識別ID ETX SUM1 SUM2 CR LF  最低でも10byte有る
    00000200 E40A                   MOV         #10,R4     ; H'0000000A
    00000202 3643                   CMP/GE      R4,R6
    00000204 7101                   ADD         #1,R1
    00000206 8F55                   BF/S        L56
    00000208 2510                   MOV.B       R1,@R5     ; seq2.rstatus
            tskrxEx.c        327              {
            tskrxEx.c        328                  ubDatSiz  = seq2.wpnt - 6;
            tskrxEx.c        329                  ubRcvSum1 = AsctoHex( TplRecvData[seq2.wpnt - 4] );
    0000020A 65E3                   MOV         R14,R5
    0000020C 75FC                   ADD         #-4,R5
    0000020E 6163                   MOV         R6,R1
    00000210 71FA                   ADD         #-6,R1
    00000212 D232                   MOV.L       L68+32,R2  ; __$ubDatSiz
    00000214 6063                   MOV         R6,R0
    00000216 045C                   MOV.B       @(R0,R5),R4; TplRecvData[]
    00000218 D531                   MOV.L       L68+36,R5  ; _AsctoHex
    0000021A 450B                   JSR         @R5
    0000021C 2210                   MOV.B       R1,@R2     ; ubDatSiz
    0000021E DD31                   MOV.L       L68+40,R13 ; __$ubRcvSum1
    00000220 D131                   MOV.L       L68+44,R1  ; H'00000008+__$seq2
    00000222 2D00                   MOV.B       R0,@R13    ; ubRcvSum1
            tskrxEx.c        330                  ubRcvSum2 = AsctoHex( TplRecvData[seq2.wpnt - 3] );
    00000224 66E3                   MOV         R14,R6
    00000226 6012                   MOV.L       @R1,R0     ; seq2.wpnt
    00000228 76FD                   ADD         #-3,R6
    0000022A 046C                   MOV.B       @(R0,R6),R4; TplRecvData[]
    0000022C D62C                   MOV.L       L68+36,R6  ; _AsctoHex
    0000022E 464B                   JSR/N       @R6
            tskrxEx.c        331                  
            tskrxEx.c        332                  ubCalSum = CalcBCC( &TplRecvData[1], ubDatSiz );        // STXの次〜ETX
    00000230 D72A                   MOV.L       L68+32,R7  ; __$ubDatSiz
    00000232 D12E                   MOV.L       L68+48,R1  ; __$ubRcvSum2
    00000234 35718000               MOVU.B      @(0,R7),R5 ; ubDatSiz
    00000238 2100                   MOV.B       R0,@R1     ; ubRcvSum2
    0000023A 64E3                   MOV         R14,R4
    0000023C D72C                   MOV.L       L68+52,R7  ; _CalcBCC
    0000023E 470B                   JSR         @R7
    00000240 7401                   ADD         #1,R4
            tskrxEx.c        333                  ubRcvSum = ubRcvSum1 * 0x10 + ubRcvSum2 ;               // 
    00000242 65D0                   MOV.B       @R13,R5    ; ubRcvSum1
    00000244 640C                   EXTU.B      R0,R4
    00000246 D22B                   MOV.L       L68+56,R2  ; __$ubCalSum
    00000248 DD28                   MOV.L       L68+48,R13 ; __$ubRcvSum2
    0000024A 2240                   MOV.B       R4,@R2     ; ubCalSum
    0000024C 4508                   SHLL2       R5
    0000024E 62D0                   MOV.B       @R13,R2    ; ubRcvSum2
    00000250 4508                   SHLL2       R5
    00000252 DD29                   MOV.L       L68+60,R13 ; __$ubRcvSum
    00000254 352C                   ADD         R2,R5
    00000256 2D50                   MOV.B       R5,@R13    ; ubRcvSum
            tskrxEx.c        334                  
            tskrxEx.c        335                  if( ubCalSum == ubRcvSum )
    00000258 655C                   EXTU.B      R5,R5
    0000025A 3450                   CMP/EQ      R5,R4
    0000025C 8B26                   BF          L58
            tskrxEx.c        336                  {
            tskrxEx.c        337                      ubKindId = AsctoHex( TplRecvData[3]  ) * 0x10 + AsctoHex( TplRecvData[4] ); // 識別ID取得
    0000025E 84E3                   MOV.B       @(3,R14),R0; TplRecvData[]
    00000260 D51F                   MOV.L       L68+36,R5  ; _AsctoHex
    00000262 450B                   JSR         @R5
    00000264 6403                   MOV         R0,R4
    00000266 4008                   SHLL2       R0
    00000268 4008                   SHLL2       R0
    0000026A 3F010004               MOV.B       R0,@(4:12,R15)
    0000026E 84E4                   MOV.B       @(4,R14),R0; TplRecvData[]
    00000270 D61B                   MOV.L       L68+36,R6  ; _AsctoHex
    00000272 460B                   JSR         @R6
    00000274 6403                   MOV         R0,R4
    00000276 36F14004               MOV.B       @(4:12,R15),R6
    0000027A D720                   MOV.L       L68+64,R7  ; __$ubKindId
    0000027C 360C                   ADD         R0,R6
    0000027E E201                   MOV         #1,R2      ; H'00000001
    00000280 2760                   MOV.B       R6,@R7     ; ubKindId
            tskrxEx.c        338    
            tskrxEx.c        339                      if(( ubKindId >= ID_TPL_FWVER )&&( ubKindId <= ID_TPL_PRINF ))// ざっくりチェック
    00000282 666C                   EXTU.B      R6,R6
    00000284 3623                   CMP/GE      R2,R6
    00000286 8B0D                   BF          L60
    00000288 E26E                   MOV         #110,R2    ; H'0000006E
    0000028A 3627                   CMP/GT      R2,R6
    0000028C 890A                   BT          L60
            tskrxEx.c        340                      {
            tskrxEx.c        341                          err = E_SUCCESS;
            tskrxEx.c        342                          SetRcvData( &TplRecvData[1],  ubDatSiz );
    0000028E D713                   MOV.L       L68+32,R7  ; __$ubDatSiz
    00000290 ED00                   MOV         #0,R13     ; H'00000000
    00000292 7E01                   ADD         #1,R14
    00000294 35718000               MOVU.B      @(0,R7),R5 ; ubDatSiz
    00000298 2FD2                   MOV.L       R13,@R15   ; err
    0000029A D119                   MOV.L       L68+68,R1  ; _SetRcvData
    0000029C 410B                   JSR         @R1
    0000029E 64E3                   MOV         R14,R4
    000002A0 A033                   BRA         L54
    000002A2 0009                   NOP
    000002A4              L60:
            tskrxEx.c        343                      }
            tskrxEx.c        344                      else
            tskrxEx.c        345                      {
            tskrxEx.c        346                          err = E_COM_CMDDEF;                             // コマンド未定義
    000002A4 06000610               MOVI20      #1552,R6   ; H'00000610
    000002A8 A02F                   BRA         L54
    000002AA 2F62                   MOV.L       R6,@R15    ; err
    000002AC              L58:
            tskrxEx.c        347                      }
            tskrxEx.c        348                  }
            tskrxEx.c        349                  else
            tskrxEx.c        350                  {
            tskrxEx.c        351                      err = E_COM_BCCERR;                                 // BCC不一致
    000002AC 06000606               MOVI20      #1542,R6   ; H'00000606
    000002B0 A02B                   BRA         L54
    000002B2 2F62                   MOV.L       R6,@R15    ; err
    000002B4              L56:
            tskrxEx.c        352                  }
            tskrxEx.c        353              }
            tskrxEx.c        354              else
            tskrxEx.c        355              {
            tskrxEx.c        356                  err = E_PAR_SHORTG;                                     // パラメータ過不足
    000002B4 E607                   MOV         #7,R6      ; H'00000007
    000002B6 4618                   SHLL8       R6
    000002B8 A027                   BRA         L54
    000002BA 2F62                   MOV.L       R6,@R15    ; err
    000002BC              L68:
    000002BC <00000000>             .DATA.L     _v4_trcv_dtq
    000002C0 <00000000>             .DATA.L     _Rx2FuncTbl
    000002C4 <00000000>             .DATA.L     __$seq2
    000002C8 <00000000>             .DATA.L     _v4_stp_alm
    000002CC <00000000>             .DATA.L     _memset
    000002D0 <00000000>             .DATA.L     __$TplRecvData
    000002D4 <00000000>             .DATA.L     _v4_sta_alm
    000002D8 <00000000>             .DATA.L     _mbx_send
    000002DC <00000000>             .DATA.L     __$ubDatSiz
    000002E0 <00000000>             .DATA.L     _AsctoHex
    000002E4 <00000000>             .DATA.L     __$ubRcvSum1
    000002E8 <00000008>             .DATA.L     H'00000008+__$seq2
    000002EC <00000000>             .DATA.L     __$ubRcvSum2
    000002F0 <00000000>             .DATA.L     _CalcBCC
    000002F4 <00000000>             .DATA.L     __$ubCalSum
    000002F8 <00000000>             .DATA.L     __$ubRcvSum
    000002FC <00000000>             .DATA.L     __$ubKindId
    00000300 <00000000>             .DATA.L     _SetRcvData
    00000304              L52:
            tskrxEx.c        357              }
            tskrxEx.c        358          }
            tskrxEx.c        359      }
            tskrxEx.c        360      else
            tskrxEx.c        361      {
            tskrxEx.c        362          err = E_PAR_OUTRNG;                                             // パラメータ範囲外
    00000304 E608                   MOV         #8,R6      ; H'00000008
    00000306 4618                   SHLL8       R6
    00000308 2F62                   MOV.L       R6,@R15    ; err
    0000030A              L54:
            tskrxEx.c        363      }
            tskrxEx.c        364    
            tskrxEx.c        365      switch( err )
    0000030A 62F2                   MOV.L       @R15,R2    ; err
    0000030C 2228                   TST         R2,R2
    0000030E 8B18                   BF          L62
            tskrxEx.c        366      {
            tskrxEx.c        367          // 成功・完了
            tskrxEx.c        368          case E_SUCCESS:
            tskrxEx.c        369    //            SendACK();                                                  // ACK送信
            tskrxEx.c        370              err = mbx_send  (
            tskrxEx.c        371                                  ID_TSK_RXEX,                            // 送信元タスクＩＤ
            tskrxEx.c        372                                  ID_MPF_CMD,                             // メモリプールＩＤ
            tskrxEx.c        373                                  ID_MBX_CMD,                             // メールボックスＩＤ
            tskrxEx.c        374                                  ubKindId,                               // プロセスＩＤ
            tskrxEx.c        375                                  NO_DATA,                                // bcid
            tskrxEx.c        376                                  NO_DATA,                                // msgid
            tskrxEx.c        377                                  0,                                      // inf1
            tskrxEx.c        378                                  0,                                      // inf2
            tskrxEx.c        379                                  &TplRecvData[0],                        // 受信データ
            tskrxEx.c        380                                  ubDatSiz                                // 受信サイズ
            tskrxEx.c        381                              );
    00000310 D21F                   MOV.L       L69+2,R2   ; __$ubDatSiz
    00000312 3E218000               MOVU.B      @(0,R2),R14; ubDatSiz
    00000316 2FE6                   MOV.L       R14,@-R15
    00000318 D41E                   MOV.L       L69+6,R4   ; __$TplRecvData
    0000031A 2F46                   MOV.L       R4,@-R15
    0000031C E500                   MOV         #0,R5      ; H'00000000
    0000031E 2F56                   MOV.L       R5,@-R15
    00000320 2F56                   MOV.L       R5,@-R15
    00000322 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00000324 611C                   EXTU.B      R1,R1
    00000326 2F16                   MOV.L       R1,@-R15
    00000328 2F16                   MOV.L       R1,@-R15
    0000032A E605                   MOV         #5,R6      ; H'00000005
    0000032C D11A                   MOV.L       L69+10,R1  ; __$ubKindId
    0000032E 6710                   MOV.B       @R1,R7     ; ubKindId
    00000330 E504                   MOV         #4,R5      ; H'00000004
    00000332 DD1A                   MOV.L       L69+14,R13 ; _mbx_send
    00000334 4D0B                   JSR         @R13
    00000336 E403                   MOV         #3,R4      ; H'00000003
    00000338 7F18                   ADD         #24,R15
            tskrxEx.c        382          
            tskrxEx.c        383              rx2_init();                                                 // 初期化
    0000033A BEE4                   BSR         __$rx2_init
    0000033C 2F02                   MOV.L       R0,@R15    ; err
    0000033E A022                   BRA         L64
    00000340 0009                   NOP
    00000342              L62:
    00000342 E1F1                   MOV         #-15,R1    ; H'FFFFFFF1
    00000344 611C                   EXTU.B      R1,R1
    00000346 3210                   CMP/EQ      R1,R2
    00000348 891D                   BT          L64
            tskrxEx.c        384              break;
            tskrxEx.c        385    
            tskrxEx.c        386          // システムエラー(ＢＣＣエラー)
            tskrxEx.c        387          case E_COM_BCCERR:
            tskrxEx.c        388    
            tskrxEx.c        389          // 未定義コマンド
            tskrxEx.c        390          case E_COM_CMDDEF:
            tskrxEx.c        391    
            tskrxEx.c        392          // 上記以外
            tskrxEx.c        393          default:
            tskrxEx.c        394              if( ubKindId == ID_TPL_EXRUN )
    0000034A D113                   MOV.L       L69+10,R1  ; __$ubKindId
    0000034C 37118000               MOVU.B      @(0,R1),R7 ; ubKindId
    00000350 6073                   MOV         R7,R0
    00000352 886B                   CMP/EQ      #107,R0
    00000354 8B13                   BF          L67
            tskrxEx.c        395              {
            tskrxEx.c        396                  err = mbx_send  (
            tskrxEx.c        397                                      ID_TSK_RXEX,                            // 送信元タスクＩＤ
            tskrxEx.c        398                                      ID_MPF_CMD,                             // メモリプールＩＤ
            tskrxEx.c        399                                      ID_MBX_CMD,                             // メールボックスＩＤ
            tskrxEx.c        400                                      ubKindId,                               // プロセスＩＤ
            tskrxEx.c        401                                      NO_DATA,                                // bcid
            tskrxEx.c        402                                      NO_DATA,                                // msgid
            tskrxEx.c        403                                      0,                                      // inf1
            tskrxEx.c        404                                      0,                                      // inf2
            tskrxEx.c        405                                      (UB *)&err,                                 // 受信データ
            tskrxEx.c        406                                      sizeof(err)                             // 受信サイズ
            tskrxEx.c        407                                  );
    00000356 E404                   MOV         #4,R4      ; H'00000004
    00000358 2F46                   MOV.L       R4,@-R15
    0000035A 65F3                   MOV         R15,R5
    0000035C 7504                   ADD         #4,R5
    0000035E 2F56                   MOV.L       R5,@-R15
    00000360 ED00                   MOV         #0,R13     ; H'00000000
    00000362 2FD6                   MOV.L       R13,@-R15
    00000364 2FD6                   MOV.L       R13,@-R15
    00000366 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00000368 611C                   EXTU.B      R1,R1
    0000036A 2F16                   MOV.L       R1,@-R15
    0000036C 2F16                   MOV.L       R1,@-R15
    0000036E E605                   MOV         #5,R6      ; H'00000005
    00000370 E504                   MOV         #4,R5      ; H'00000004
    00000372 DE0A                   MOV.L       L69+14,R14 ; _mbx_send
    00000374 4E0B                   JSR         @R14
    00000376 E403                   MOV         #3,R4      ; H'00000003
    00000378 7F18                   ADD         #24,R15
    0000037A A004                   BRA         L64
    0000037C 2F02                   MOV.L       R0,@R15    ; err
    0000037E              L67:
            tskrxEx.c        408              }
            tskrxEx.c        409              else
            tskrxEx.c        410              {
            tskrxEx.c        411                  rx2_init();                                                 // 初期化
    0000037E BEC2                   BSR         __$rx2_init
    00000380 0009                   NOP
            tskrxEx.c        412                  err = E_SUCCESS;
    00000382 E200                   MOV         #0,R2      ; H'00000000
    00000384 2F22                   MOV.L       R2,@R15    ; err
    00000386              L64:
            tskrxEx.c        413              }
            tskrxEx.c        414              break;
            tskrxEx.c        415    
            tskrxEx.c        416          // 継続中
            tskrxEx.c        417          case E_CONTINUE:
            tskrxEx.c        418              break;
            tskrxEx.c        419      }
            tskrxEx.c        420      
            tskrxEx.c        421      return( err );
    00000386 60F2                   MOV.L       @R15,R0    ; err
    00000388 7F08                   ADD         #8,R15
    0000038A 4DF4                   MOVMU.L     @R15+,R13
            tskrxEx.c        422    
            tskrxEx.c        423    }
    0000038C 006B                   RTS/N
    0000038E              L69:
    0000038E 00000002               .RES.W      1
    00000390 <00000000>             .DATA.L     __$ubDatSiz
    00000394 <00000000>             .DATA.L     __$TplRecvData
    00000398 <00000000>             .DATA.L     __$ubKindId
    0000039C <00000000>             .DATA.L     _mbx_send
D   00000000              _Rx2FuncTbl:                     ; static: Rx2FuncTbl
    00000000 <00000000>   
             <00000000>             .DATA.L     __$rx2_dmy,__$rx2_idle,__$rx2_crrecv
             <00000000>   
B   00000000              __$seq2:                         ; static: __$seq2
    00000000 00000004               .RES.L      3
    0000000C              __$TplRecvData:                  ; static: __$TplRecvData
    0000000C 00000001               .RES.B      512
    0000020C              __$ubDatSiz:                     ; static: __$ubDatSiz
    0000020C 00000001               .RES.B      1
    0000020D              __$ubCalSiz:                     ; static: __$ubCalSiz
    0000020D 00000001               .RES.B      1
    0000020E              __$ubCalSum:                     ; static: __$ubCalSum
    0000020E 00000001               .RES.B      1
    0000020F              __$ubRcvSum:                     ; static: __$ubRcvSum
    0000020F 00000001               .RES.B      1
    00000210              __$ubRcvSum1:                    ; static: __$ubRcvSum1
    00000210 00000001               .RES.B      1
    00000211              __$ubRcvSum2:                    ; static: __$ubRcvSum2
    00000211 00000001               .RES.B      1
    00000212              __$ubKindId:                     ; static: __$ubKindId
    00000212 00000001               .RES.B      1
SH SERIES C/C++ Compiler (V.9.02.00.003)                                                         08-Sep-2023 13:46:37  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      423



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 000003A0 Byte(s)
CONSTANT SECTION (C):                                 00000000 Byte(s)
DATA     SECTION (D):                                 0000000C Byte(s)
BSS      SECTION (B):                                 00000213 Byte(s)

TOTAL PROGRAM  SECTION: 000003A0 Byte(s)
TOTAL CONSTANT SECTION: 00000000 Byte(s)
TOTAL DATA     SECTION: 0000000C Byte(s)
TOTAL BSS      SECTION: 00000213 Byte(s)

    TOTAL PROGRAM SIZE: 000005BF Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            8
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           6
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            37



*** COMMAND PARAMETER ***

-subcommand=C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskrxEx.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-object="C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskrxEx.obj"
-debug
-listfile="C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskrxEx.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskrxEx.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
