SH SERIES C/C++ Compiler (V.9.02.00.003)                                                         08-Sep-2023 13:46:34  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskcmd.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             tskcmd.c          1    /******************************************************************************
             tskcmd.c          2    * コマンド実行タスク                                                          *
             tskcmd.c          3    *                                                                             *
             tskcmd.c          4    * File name : tskcmd.c                                                        *
             tskcmd.c          5    *                                                                             *
             tskcmd.c          6    * Copyright (c) 2018 NICHIRYO Co., Ltd.                                       *
             tskcmd.c          7    *                                             h                                *
             tskcmd.c          8    ******************************************************************************/
             tskcmd.c          9    #include <kernel.h>
             tskcmd.c         10    #include <stdio.h>
             tskcmd.c         11    #include <stdlib.h>
             tskcmd.c         12    #include "iodefine.h"
             tskcmd.c         13    #include "define.h"
             tskcmd.c         14    #include "datastruct.h"
             tskcmd.c         15    #include "automachine.h"
             tskcmd.c         16    #include "tskcmd.h"
             tskcmd.c         17    #include "sub.h"
             tskcmd.c         18    #include "mnet.h"
             tskcmd.c         19    #include "machine.h"
             tskcmd.c         20    #include "tskmotwait.h"
             tskcmd.c         21    #include "tblchr.h"
             tskcmd.c         22    #include "macro.h"
             tskcmd.c         23    
             tskcmd.c         24    
             tskcmd.c         25    
             tskcmd.c         26    //*************************************
             tskcmd.c         27    // 定数定義
             tskcmd.c         28    //*************************************
             tskcmd.c         29    //#define SRAM_START_ADDRESS          0x0C000000  // 0C00 0000 - 0C07 FFFF
             tskcmd.c         30    #define   USER_CT_MAX                 10
             tskcmd.c         31    #define   USER_ID_MAX                 8
             tskcmd.c         32    #define   USER_PW_MAX                 4
             tskcmd.c         33    #define   PROT_CT_MAX                 20
             tskcmd.c         34    
             tskcmd.c         35    #define   PULSEMOTOR_ADDR         0x0C009000      // パルスモータコントローラアドレス
             tskcmd.c         36    #define   PULSEMOTOR_CMD_CUN1R    0x20            // カウンタリセット（COUNTER1）
             tskcmd.c         37    #define   PULSEMOTOR_CMD_CUN2R    0x21            // カウンタリセット（COUNTER2）
             tskcmd.c         38    #define   PULSEMOTOR_CMD_STOP     0x49            // 即停止
             tskcmd.c         39    #define   PULSEMOTOR_CMD_STAFL    0x50            // FL低速スタート
             tskcmd.c         40    #define   PULSEMOTOR_CMD_WPRFL    0x81            // [W] 初速度
             tskcmd.c         41    #define   PULSEMOTOR_CMD_WPRMG    0x85            // [W] 速度倍率
             tskcmd.c         42    #define   PULSEMOTOR_CMD_WPRMD    0x87            // [W] 動作モード
             tskcmd.c         43    #define   PULSEMOTOR_CMD_WRENV1   0x9C            // [W] 環境設定1
             tskcmd.c         44    #define   PULSEMOTOR_CMD_WRENV2   0x9D            // [W] 環境設定2
             tskcmd.c         45    #define   PULSEMOTOR_CMD_RRENV1   0xDC            // [R] 環境設定1
             tskcmd.c         46    #define   PULSEMOTOR_CMD_RCUN1    0xE3            // [R] COUNTER1（指令位置カウンタ）
             tskcmd.c         47    #define   PULSEMOTOR_CMD_RCUN2    0xE4            // [R] COUNTER2（機械位置カウンタ）
             tskcmd.c         48    #define   PULSEMOTOR_CMD_RREST    0xF2            // [R] エラー割り込み要因取得
             tskcmd.c         49    #define   PULSEMOTOR_COUNT_ERROR_LIMIT    1       // カウントエラー許容値 [cnt]
             tskcmd.c         50    
             tskcmd.c         51    
             tskcmd.c         52    //*************************************
             tskcmd.c         53    // 関数定義
             tskcmd.c         54    //*************************************
             tskcmd.c         55    static    void    CmdTskInit();                                           // コマンドタスクデータ初期化
             tskcmd.c         56    static    void    CmdTskInitAct();                                        // コマンドタスク動作データ初期化
             tskcmd.c         57    static    void    CmdProc(T_CMD_MSG* mrcv);                               // タスク別解析処理
             tskcmd.c         58    static    void    Rx0RcvMsg( T_CMD_MSG* mrcv );                           // ＰＣ受信（ＲＸ０）タスクからのメッセージ受信処理
             tskcmd.c         59    static    void    Tx0RcvMsg( T_CMD_MSG* mrcv );                           // ＰＣ送信（ＴＸ０）タスクからのメッセージ受信処理
             tskcmd.c         60    static    void    AlmRcvMsg( T_CMD_MSG* mrcv );                           // アラームハンドラから受信
             tskcmd.c         61    static    void    EepRcvMsg( T_CMD_MSG* mrcv );                           // ＥＥＰＲＯＭ管理タスクからのメッセージ受信処理
             tskcmd.c         62    static    void    IntRcvMsg( T_CMD_MSG* mrcv );                           // ＩＮＴタスクから受信
             tskcmd.c         63    static    void    MotWaitRcvMsg( T_CMD_MSG* mrcv );                       // ウェイトタスクから受信
             tskcmd.c         64    static    void    MotEndRcvMsg( T_CMD_MSG* mrcv );                        // 終了監視タスクから受信
             tskcmd.c         65    static    void    RxExRcvMsg( T_CMD_MSG* mrcv );                          // 受信（ＲＸＥＸ）タスクからのメッセージ受信処理
             tskcmd.c         66    static    void    PunitRcvMsg( T_CMD_MSG* mrcv );
             tskcmd.c         67    static    void    TmpCntRcvMsg( T_CMD_MSG* mrcv );
             tskcmd.c         68    
             tskcmd.c         69    static    void    CmdAnalyze( T_CMD_MSG* mrcv );                          // コマンド解析
             tskcmd.c         70    typedef   void    (*CMD_FUNCTBL)( T_CMD_MSG* mrcv, UB anum, const char** args );// 動作実行ファンクション
             tskcmd.c         71    typedef   void    (*TP_FUNCTBL) ( T_CMD_MSG* mrcv, UB anum, const char** args );// 動作実行ファンクション
             tskcmd.c         72    static    ER      ParamDataCheck( UB msg , UB anum ,  const char** args );// 受信パラメータチェック
             tskcmd.c         73    
             tskcmd.c         74    
             tskcmd.c         75    // コマンド処理
             tskcmd.c         76    static void CmdDummy  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ダミールーチン                                    */
             tskcmd.c         77    static void CmdHELLO  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   HELLO   起動通知                                  */
             tskcmd.c         78    static void CmdVER    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   VER     バージョン確認                            */
             tskcmd.c         79    static void CmdALLIN  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ALLIN   全I/O入力                                 */
             tskcmd.c         80    static void CmdBIN    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   BIN     I/O入力                                   */
             tskcmd.c         81    static void CmdBOUT   ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   BOUT    I/O出力                                   */
             tskcmd.c         82    static void CmdCINIT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   CINIT   入力カウンタの設定                        */
             tskcmd.c         83    static void CmdCOUNT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   COUNT   入力カウンタの読み出し                    */
             tskcmd.c         84    static void CmdINT    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   INT     割り込み設定                              */
             tskcmd.c         85    static void CmdABSMV  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ABSMV   パルスモータ移動(絶対位置)                */
             tskcmd.c         86    static void CmdABORT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ABORT   パルスモータ即停止                        */
             tskcmd.c         87    static void CmdENCODER( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ENCODER エンコーダの設定                          */
             tskcmd.c         88    static void CmdLIMIT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   LIMIT   パルスモータ原点復帰                      */
             tskcmd.c         89    static void CmdMAP    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   MAP     ２軸のパルスモータ移動                    */
             tskcmd.c         90    static void CmdPDELAY ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   PDELAY  パルスモータのパワー制御待ち時間設定      */
             tskcmd.c         91    static void CmdPOWER  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   POWER   パルスモータの励磁制御                    */
             tskcmd.c         92    static void CmdPSET   ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   PSET    パルスモータのカウンタリセット            */
             tskcmd.c         93    static void CmdRELMV  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   RELMV   パルスモータ移動(相対位置)                */
             tskcmd.c         94    static void CmdSET    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   SET     パルスモータ速度設定                      */
             tskcmd.c         95    static void CmdSTATUS ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   STATUS  パルスモータ状態読み出し                  */
             tskcmd.c         96    static void CmdSTOP   ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   STOP    パルスモータ減速停止                      */
             tskcmd.c         97    static void CmdBZCNT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   BZCNT                                             */
             tskcmd.c         98    static void CmdEEPREAD( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   EEPREAD   */
             tskcmd.c         99    static void CmdEEPWRIT( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   EEPWRIT   */
             tskcmd.c        100    static void CmdTmpSet ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        101    static void CmdTmpGet ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        102    static void CmdVini   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        103    static void CmdPini   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        104    static void CmdPren   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        105    static void CmdPtan   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        106    static void CmdPcan   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        107    static void CmdVout   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        108    static void CmdPsns   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        109    static void CmdImpPdat( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        110    static void CmdImpSped( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        111    static void CmdImpPosi( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        112    static void CmdImpOptn( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        113    static void CmdExpRunl( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        114    static void CmdExpComl( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        115    static void CmdExpClog( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        116    
             tskcmd.c        117    static void SetDevice( UB DevNo );                                        // デバイス動作中セット
             tskcmd.c        118    static BOOL GetDeviceStatus( UB DevNo );                              // デバイス動作状態取得
             tskcmd.c        119    static void ClrDevice( UB DevNo );                                        // デバイス動作中クリア
             tskcmd.c        120    static ER GetDeviceActionChk ( UB msg, UB bcid, UB mm );              // ＢＣ動作可能／不可判定
             tskcmd.c        121    static ER LimitAction( UB prid1, UB bcid, UB mm, UB dr, UB md, INT sp );  // リミット動作
             tskcmd.c        122    static ER RelmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp );               // 相対位置移動動作
             tskcmd.c        123    static ER AbsmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp );               // 絶対位置移動動作
             tskcmd.c        124    static ER MapAction( UB prid1, UB bcid, UB mm1, UB mm2, INT pppp1, INT pppp2 );   // MAP移動動作
             tskcmd.c        125    static ER WaitAction( UB prid1, UB bcid, INT waittim );                           // ＷＡＩＴ動作
             tskcmd.c        126    static void GetBCDevice( UB msg, UB mm, INT *data );                  // ＢＣで利用されるデバイス情報の取得
             tskcmd.c        127    
             tskcmd.c        128    static ER QgProcList_INITA( T_CMD_MSG* mrcv );
             tskcmd.c        129    static void TpRspFWVER();
             tskcmd.c        130    static void TpRspLGIN1();
             tskcmd.c        131    static void TpRspOPTIF();
             tskcmd.c        132    static void TpRspINITA( ER result );
             tskcmd.c        133    static void TpRspPRCTL();
             tskcmd.c        134    static void TpRspFWPOL();
             tskcmd.c        135    void TplRpMakeSend( UB parno, INT pardat );
             tskcmd.c        136    void TplRpDataSend();
             tskcmd.c        137    
             tskcmd.c        138    
             tskcmd.c        139    //*************************************
             tskcmd.c        140    // タッチパネル関数定義
             tskcmd.c        141    //*************************************
             tskcmd.c        142           void TpAnalyze( T_CMD_MSG* mrcv );
             tskcmd.c        143    static void TplDummy( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 00 ダミー                                             */
             tskcmd.c        144    static void TplFwver( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 01 FWバージョン情報                                   */
             tskcmd.c        145    static void TplOptif( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 02 オプション情報                                     */
             tskcmd.c        146    static void TplLgin1( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 03 ログイン認証1                                      */
             tskcmd.c        147    static void TplLgin2( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 04 ログイン認証2                                      */
             tskcmd.c        148    static void TplInita( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 05 初期化指示                                         */
             tskcmd.c        149    static void TplTitle( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 06 プロトコルタイトル要求                             */
             tskcmd.c        150    static void TplPrExt( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 07 プロトコル有無                                     */
             tskcmd.c        151    static void TplUsral( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 08 ユーザー情報全取得                                 */
             tskcmd.c        152    static void TplInf01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 11 ユーザー1情報                                      */
             tskcmd.c        153    static void TplInf02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 12 ユーザー2情報                                      */
             tskcmd.c        154    static void TplInf03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 13 ユーザー3情報                                      */
             tskcmd.c        155    static void TplInf04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 14 ユーザー4情報                                      */
             tskcmd.c        156    static void TplInf05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 15 ユーザー5情報                                      */
             tskcmd.c        157    static void TplInf06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 16 ユーザー6情報                                      */
             tskcmd.c        158    static void TplInf07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 17 ユーザー7情報                                      */
             tskcmd.c        159    static void TplInf08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 18 ユーザー8情報                                      */
             tskcmd.c        160    static void TplInf09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 19 ユーザー9情報                                      */
             tskcmd.c        161    static void TplInf10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 1A ユーザー10情報                                     */
             tskcmd.c        162    static void TplRec01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 21 ユーザー1登録                                      */
             tskcmd.c        163    static void TplRec02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 22 ユーザー2登録                                      */
             tskcmd.c        164    static void TplRec03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 23 ユーザー3登録                                      */
             tskcmd.c        165    static void TplRec04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 24 ユーザー4登録                                      */
             tskcmd.c        166    static void TplRec05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 25 ユーザー5登録                                      */
             tskcmd.c        167    static void TplRec06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 26 ユーザー6登録                                      */
             tskcmd.c        168    static void TplRec07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 27 ユーザー7登録                                      */
             tskcmd.c        169    static void TplRec08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 28 ユーザー8登録                                      */
             tskcmd.c        170    static void TplRec09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 29 ユーザー9登録                                      */
             tskcmd.c        171    static void TplRec10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 2A ユーザー10登録                                     */
             tskcmd.c        172    static void TplChg01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 31 ユーザー1変更                                      */
             tskcmd.c        173    static void TplChg02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 32 ユーザー2変更                                      */
             tskcmd.c        174    static void TplChg03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 33 ユーザー3変更                                      */
             tskcmd.c        175    static void TplChg04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 34 ユーザー4変更                                      */
             tskcmd.c        176    static void TplChg05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 35 ユーザー5変更                                      */
             tskcmd.c        177    static void TplChg06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 36 ユーザー6変更                                      */
             tskcmd.c        178    static void TplChg07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 37 ユーザー7変更                                      */
             tskcmd.c        179    static void TplChg08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 38 ユーザー8変更                                      */
             tskcmd.c        180    static void TplChg09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 39 ユーザー9変更                                      */
             tskcmd.c        181    static void TplChg10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 3A ユーザー10変更                                     */
             tskcmd.c        182    static void TplDel01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 41 ユーザー1削除                                      */
             tskcmd.c        183    static void TplDel02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 42 ユーザー2削除                                      */
             tskcmd.c        184    static void TplDel03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 43 ユーザー3削除                                      */
             tskcmd.c        185    static void TplDel04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 44 ユーザー4削除                                      */
             tskcmd.c        186    static void TplDel05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 45 ユーザー5削除                                      */
             tskcmd.c        187    static void TplDel06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 46 ユーザー6削除                                      */
             tskcmd.c        188    static void TplDel07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 47 ユーザー7削除                                      */
             tskcmd.c        189    static void TplDel08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 48 ユーザー8削除                                      */
             tskcmd.c        190    static void TplDel09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 49 ユーザー9削除                                      */
             tskcmd.c        191    static void TplDel10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 4A ユーザー10削除                                     */
             tskcmd.c        192    static void TplFwpol( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 50 FW状態（ポーリング）                               */
             tskcmd.c        193    static void TplPrtcl( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 51 プロトコル実行                                     */
             tskcmd.c        194    static void TplResta( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 52 リスタート実行                                     */
             tskcmd.c        195    static void TplPause( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 53 一時停止                                           */
             tskcmd.c        196    static void TplResum( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 54 再開                                               */
             tskcmd.c        197    static void TplAbort( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 55 中断                                               */
             tskcmd.c        198    static void TplOptcd( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 58 オプションバーコード実行                           */
             tskcmd.c        199    static void TplSmbar( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 59 サンプルチューブQRコード                           */
             tskcmd.c        200    static void TplSmsgl( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5A サンプルチューブ有無確認（単）                     */
             tskcmd.c        201    static void TplSmall( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5B サンプルチューブ有無確認（全）                     */
             tskcmd.c        202    static void TplCllne( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5C 回収チューブレーンQRコード                         */
             tskcmd.c        203    static void TplClqrc( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5D 回収チューブQRコード                               */
             tskcmd.c        204    static void TplClsgl( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5E 回収チューブ有無（単）                             */
             tskcmd.c        205    static void TplClall( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5F 回収チューブ有無（全）                             */
             tskcmd.c        206    static void TplLdlmp( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 60 LED                                                */
             tskcmd.c        207    static void TplUvlmp( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 61 UV点灯                                             */
             tskcmd.c        208    static void TplPtlmp( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 62 パトランプ                                         */
             tskcmd.c        209    static void TplPowof( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 63 電源OFF                                            */
             tskcmd.c        210    static void TplExRun( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 6B 運転履歴                                           */
             tskcmd.c        211    static void TplCommDataSend( UB *tpdat, INT tpsiz );                  /* */
             tskcmd.c        212    static void TplCommDataSendImp( UB *tpdat, INT tpsiz, UB msg );
             tskcmd.c        213    static void TplRidDataSend( UB *txdat, UB id );
             tskcmd.c        214    static ER   TpCmdCheck( T_CMD_MSG* mrcv );                                /* タッチパネルコマンド確認                              */
             tskcmd.c        215    static void InitQgProcList( UB procid );
             tskcmd.c        216    static void StaQgProcList( UB bcid, UB msgid, UB devno, UB actstp, UB prid1, UB inf, UB inf2);
             tskcmd.c        217    static UB GetQgProcList( UB procid );
             tskcmd.c        218    static BOOL IsQgProcList( UB procid );
             tskcmd.c        219    static ER QgProcList( T_CMD_MSG* mrcv );
             tskcmd.c        220    static ER QgProcList_INITA( T_CMD_MSG* mrcv );
             tskcmd.c        221    static ER QgProcList_PRTCL( T_CMD_MSG* mrcv );
             tskcmd.c        222    static void SetUserInfoSorce( ST_USERINFO *user );
             tskcmd.c        223    static void ClrUserInfoSorce();
             tskcmd.c        224    static UB   ChkUserInfo();
             tskcmd.c        225    void  check_main_pulsemotor_initialize( void );
             tskcmd.c        226    
             tskcmd.c        227    
             tskcmd.c        228    static ER  CmdActionStatus( T_CMD_MSG* mrcv );    //状態取得
             tskcmd.c        229    static ER  CmdActionTipGet( T_CMD_MSG* mrcv );    //チップ取得
             tskcmd.c        230    static ER  CmdActionTipDsp( T_CMD_MSG* mrcv );    //チップ廃棄
             tskcmd.c        231    static ER  CmdActionStrOpn( T_CMD_MSG* mrcv );    //穴あけ
             tskcmd.c        232    static ER  CmdActionPress ( T_CMD_MSG* mrcv );    //加圧
             tskcmd.c        233    static ER  CmdActionWait  ( T_CMD_MSG* mrcv );    //ウェイト
             tskcmd.c        234    static ER  CmdActionMix   ( T_CMD_MSG* mrcv );    //攪拌
             tskcmd.c        235    static ER  CmdActionSuc   ( T_CMD_MSG* mrcv );    //吸引
             tskcmd.c        236    static ER  CmdActionPut   ( T_CMD_MSG* mrcv );    //吐出
             tskcmd.c        237    static ER  CmdActionPrep1 ( T_CMD_MSG* mrcv );    //分注１
             tskcmd.c        238    static ER  CmdActionPrep2 ( T_CMD_MSG* mrcv );    //分注２
             tskcmd.c        239    static ER  CmdActionIncub ( T_CMD_MSG* mrcv );    //インキュベーション
             tskcmd.c        240    static ER  CmdActionMove  ( T_CMD_MSG* mrcv );    //移動
             tskcmd.c        241    
             tskcmd.c        242    static ER  PressReq( UB *par );
             tskcmd.c        243    static INT PressStatus( UB *par );
             tskcmd.c        244    static INT GetPositionValue( UB index );
             tskcmd.c        245    static UB  GetMoveDevice( UB posi );
             tskcmd.c        246    static UB  GetTipPatern( UB commdat );
             tskcmd.c        247    static void  SetPauseStop( UB act );
             tskcmd.c        248    static UB  GetPauseStop();
             tskcmd.c        249    static UB  InitPauseStop();
             tskcmd.c        250    static INT  BlowoutAirValue( ST_HOSEI_PTN *adr );
             tskcmd.c        251    static INT  AirGapValue( ST_HOSEI_PTN *adr );
             tskcmd.c        252    static INT  SurplusValue( ST_HOSEI_PTN *adr );
             tskcmd.c        253    static INT  ValueCal( ST_HOSEI_PTN *adr, INT value );
             tskcmd.c        254    static INT GetPosiData( UB posino );
             tskcmd.c        255    static unsigned short  NzlTargetGet();
             tskcmd.c        256    static ER PressureChk();
             tskcmd.c        257    static ER RePressureChk();
             tskcmd.c        258    static BOOL TempChk();
             tskcmd.c        259    static void IncuvDataInit( unsigned char tmp, unsigned int tim );
             tskcmd.c        260    
             tskcmd.c        261    void SetRcvData( unsigned char *buf, unsigned int len );
             tskcmd.c        262    void TplExRunSend();
             tskcmd.c        263    void TplRpExpReqSend();
             tskcmd.c        264    
             tskcmd.c        265    //*************************************
             tskcmd.c        266    // テーブル
             tskcmd.c        267    //*************************************
             tskcmd.c        268    // コールファンクション
             tskcmd.c        269    static CMD_FUNCTBL    CmdFuncTbl[ID_MSG_BASE_CMD_MAX] = 
             tskcmd.c        270    {
             tskcmd.c        271      /*===========================================================================================================================*/
             tskcmd.c        272      /*  基本コマンド                                                       No. Command 内容                                      */
             tskcmd.c        273      /*===========================================================================================================================*/
             tskcmd.c        274      &CmdVER    ,                                                        /* 0   HELLO   起動通知                                  */
             tskcmd.c        275      &CmdDummy  ,                                                        /* 1   dummy                                             */
             tskcmd.c        276      &CmdVER    ,                                                        /* 2   VER     バージョン確認                            */
             tskcmd.c        277      &CmdALLIN  ,                                                        /* 3   ALLIN   全I/O入力                                 */
             tskcmd.c        278      &CmdBIN    ,                                                        /* 4   BIN     I/O入力                                   */
             tskcmd.c        279      &CmdBOUT   ,                                                        /* 5   BOUT    I/O出力                                   */
             tskcmd.c        280      &CmdCINIT  ,                                                        /* 6   CINIT   入力カウンタの設定                        */
             tskcmd.c        281      &CmdCOUNT  ,                                                        /* 7   COUNT   入力カウンタの読み出し                    */
             tskcmd.c        282      &CmdINT    ,                                                        /* 8   INT     割り込み設定                              */
             tskcmd.c        283      &CmdABSMV  ,                                                        /* 9   ABSMV   パルスモータ移動(絶対位置)                */
             tskcmd.c        284      &CmdABORT  ,                                                        /* 10  ABORT   パルスモータ即停止                        */
             tskcmd.c        285      &CmdENCODER,                                                        /* 11  ENCODER エンコーダの設定                          */
             tskcmd.c        286      &CmdLIMIT  ,                                                        /* 12  LIMIT   パルスモータ原点復帰                      */
             tskcmd.c        287      &CmdMAP    ,                                                        /* 13  MAP     ２軸のパルスモータ移動                    */
             tskcmd.c        288      &CmdPDELAY ,                                                        /* 14  PDELAY  パルスモータのパワー制御待ち時間設定      */
             tskcmd.c        289      &CmdPOWER  ,                                                        /* 15  POWER   パルスモータの励磁制御                    */
             tskcmd.c        290      &CmdPSET   ,                                                        /* 16  PSET    パルスモータのカウンタリセット            */
             tskcmd.c        291      &CmdRELMV  ,                                                        /* 17  RELMV   パルスモータ移動(相対位置)                */
             tskcmd.c        292      &CmdSET    ,                                                        /* 18  SET     パルスモータ速度設定                      */
             tskcmd.c        293      &CmdSTATUS ,                                                        /* 19  STATUS  パルスモータ状態読み出し                  */
             tskcmd.c        294      &CmdSTOP   ,                                                        /* 20  STOP    パルスモータ減速停止                      */
             tskcmd.c        295      &CmdBZCNT,                                                          /* 21                                                    */
             tskcmd.c        296      &CmdEEPREAD,                                                        /* 22                                                    */
             tskcmd.c        297      &CmdEEPWRIT,                                                        /* 23                                                    */
             tskcmd.c        298      &CmdDummy  ,                                                        /* 24                                                    */
             tskcmd.c        299      &CmdDummy  ,                                                        /* 25                                                    */
             tskcmd.c        300      &CmdTmpSet ,                                                        /* 26                                                    */
             tskcmd.c        301      &CmdTmpGet ,                                                        /* 27                                                    */
             tskcmd.c        302      &CmdDummy  ,                                                        /* 28                                                    */
             tskcmd.c        303      &CmdVini   ,                                                        /* 29                                                    */
             tskcmd.c        304      &CmdPini   ,                                                        /* 30                                                    */
             tskcmd.c        305      &CmdPren   ,                                                        /* 31                                                    */
             tskcmd.c        306      &CmdPtan   ,                                                        /* 32                                                    */
             tskcmd.c        307      &CmdPcan   ,                                                        /* 33                                                    */
             tskcmd.c        308      &CmdVout   ,                                                        /* 34                                                    */
             tskcmd.c        309      &CmdPsns   ,                                                        /* 35                                                    */
             tskcmd.c        310      &CmdImpPdat,                                                        /* 36                                                    */
             tskcmd.c        311      &CmdImpSped,                                                        /* 37                                                    */
             tskcmd.c        312      &CmdImpPosi,                                                        /* 38                                                    */
             tskcmd.c        313      &CmdImpOptn,                                                        /* 39                                                    */
             tskcmd.c        314      &CmdExpRunl,                                                        /* 40                                                    */
             tskcmd.c        315      &CmdExpComl,                                                        /* 41                                                    */
             tskcmd.c        316      &CmdDummy  ,                                                        /* 42                                                    */
             tskcmd.c        317      &CmdDummy  ,                                                        /* 43                                                    */
             tskcmd.c        318      &CmdDummy                                                           /* 44                                                    */
             tskcmd.c        319    };
             tskcmd.c        320    
             tskcmd.c        321    
             tskcmd.c        322    //-----------------------------
             tskcmd.c        323    //        タッチパネル通信
             tskcmd.c        324    //-----------------------------
             tskcmd.c        325    // コールファンクション
             tskcmd.c        326    TP_FUNCTBL    TpFuncTbl[TP_ID_PROC_MAX] = 
             tskcmd.c        327    {
             tskcmd.c        328      /*===========================================================================================================================*/
             tskcmd.c        329      /*  基本コマンド                                                       No. Command 内容                                      */
             tskcmd.c        330      /*===========================================================================================================================*/
             tskcmd.c        331      &TplDummy ,                                                         /* 00 ダミー                                             */
             tskcmd.c        332      &TplFwver ,                                                         /* 01 FWバージョン情報                                   */
             tskcmd.c        333      &TplOptif ,                                                         /* 02 オプション情報                                     */
             tskcmd.c        334      &TplLgin1 ,                                                         /* 03 ログイン認証1                                      */
             tskcmd.c        335      &TplLgin2 ,                                                         /* 04 ログイン認証2                                      */
             tskcmd.c        336      &TplInita ,                                                         /* 05 初期化指示                                         */
             tskcmd.c        337      &TplDummy ,                                                         /* 06 ダミー                                             */
             tskcmd.c        338      &TplDummy ,                                                         /* 07 ダミー                                             */
             tskcmd.c        339      &TplUsral ,                                                         /* 08 ユーザー情報全取得                                 */
             tskcmd.c        340      &TplDummy ,                                                         /* 09 ダミー                                             */
             tskcmd.c        341      &TplDummy ,                                                         /* 0A ダミー                                             */
             tskcmd.c        342      &TplDummy ,                                                         /* 0B ダミー                                             */
             tskcmd.c        343      &TplDummy ,                                                         /* 0C ダミー                                             */
             tskcmd.c        344      &TplDummy ,                                                         /* 0D ダミー                                             */
             tskcmd.c        345      &TplDummy ,                                                         /* 0E ダミー                                             */
             tskcmd.c        346      &TplDummy ,                                                         /* 0F ダミー                                             */
             tskcmd.c        347      &TplDummy ,                                                         /* 10 ダミー                                             */
             tskcmd.c        348      &TplInf01 ,                                                         /* 11 ユーザー1情報                                      */
             tskcmd.c        349      &TplInf02 ,                                                         /* 12 ユーザー2情報                                      */
             tskcmd.c        350      &TplInf03 ,                                                         /* 13 ユーザー3情報                                      */
             tskcmd.c        351      &TplInf04 ,                                                         /* 14 ユーザー4情報                                      */
             tskcmd.c        352      &TplInf05 ,                                                         /* 15 ユーザー5情報                                      */
             tskcmd.c        353      &TplInf06 ,                                                         /* 16 ユーザー6情報                                      */
             tskcmd.c        354      &TplInf07 ,                                                         /* 17 ユーザー7情報                                      */
             tskcmd.c        355      &TplInf08 ,                                                         /* 18 ユーザー8情報                                      */
             tskcmd.c        356      &TplInf09 ,                                                         /* 19 ユーザー9情報                                      */
             tskcmd.c        357      &TplInf10 ,                                                         /* 1A ユーザー10情報                                     */
             tskcmd.c        358      &TplDummy ,                                                         /* 1B ダミー                                             */
             tskcmd.c        359      &TplDummy ,                                                         /* 1C ダミー                                             */
             tskcmd.c        360      &TplDummy ,                                                         /* 1D ダミー                                             */
             tskcmd.c        361      &TplDummy ,                                                         /* 1E ダミー                                             */
             tskcmd.c        362      &TplDummy ,                                                         /* 1F ダミー                                             */
             tskcmd.c        363      &TplDummy ,                                                         /* 20 ダミー                                             */
             tskcmd.c        364      &TplRec01 ,                                                         /* 21 ユーザー1登録                                      */
             tskcmd.c        365      &TplRec02 ,                                                         /* 22 ユーザー2登録                                      */
             tskcmd.c        366      &TplRec03 ,                                                         /* 23 ユーザー3登録                                      */
             tskcmd.c        367      &TplRec04 ,                                                         /* 24 ユーザー4登録                                      */
             tskcmd.c        368      &TplRec05 ,                                                         /* 25 ユーザー5登録                                      */
             tskcmd.c        369      &TplRec06 ,                                                         /* 26 ユーザー6登録                                      */
             tskcmd.c        370      &TplRec07 ,                                                         /* 27 ユーザー7登録                                      */
             tskcmd.c        371      &TplRec08 ,                                                         /* 28 ユーザー8登録                                      */
             tskcmd.c        372      &TplRec09 ,                                                         /* 29 ユーザー9登録                                      */
             tskcmd.c        373      &TplRec10 ,                                                         /* 2A ユーザー10登録                                     */
             tskcmd.c        374      &TplDummy ,                                                         /* 2B ダミー                                             */
             tskcmd.c        375      &TplDummy ,                                                         /* 2C ダミー                                             */
             tskcmd.c        376      &TplDummy ,                                                         /* 2D ダミー                                             */
             tskcmd.c        377      &TplDummy ,                                                         /* 2E ダミー                                             */
             tskcmd.c        378      &TplDummy ,                                                         /* 2F ダミー                                             */
             tskcmd.c        379      &TplDummy ,                                                         /* 30 ダミー                                             */
             tskcmd.c        380      &TplChg01 ,                                                         /* 31 ユーザー1変更                                      */
             tskcmd.c        381      &TplChg02 ,                                                         /* 32 ユーザー2変更                                      */
             tskcmd.c        382      &TplChg03 ,                                                         /* 33 ユーザー3変更                                      */
             tskcmd.c        383      &TplChg04 ,                                                         /* 34 ユーザー4変更                                      */
             tskcmd.c        384      &TplChg05 ,                                                         /* 35 ユーザー5変更                                      */
             tskcmd.c        385      &TplChg06 ,                                                         /* 36 ユーザー6変更                                      */
             tskcmd.c        386      &TplChg07 ,                                                         /* 37 ユーザー7変更                                      */
             tskcmd.c        387      &TplChg08 ,                                                         /* 38 ユーザー8変更                                      */
             tskcmd.c        388      &TplChg09 ,                                                         /* 39 ユーザー9変更                                      */
             tskcmd.c        389      &TplChg10 ,                                                         /* 3A ユーザー10変更                                     */
             tskcmd.c        390      &TplDummy ,                                                         /* 3B ダミー                                             */
             tskcmd.c        391      &TplDummy ,                                                         /* 3C ダミー                                             */
             tskcmd.c        392      &TplDummy ,                                                         /* 3D ダミー                                             */
             tskcmd.c        393      &TplDummy ,                                                         /* 3E ダミー                                             */
             tskcmd.c        394      &TplDummy ,                                                         /* 3F ダミー                                             */
             tskcmd.c        395      &TplDummy ,                                                         /* 40 ダミー                                             */
             tskcmd.c        396      &TplDel01 ,                                                         /* 41 ユーザー1削除                                      */
             tskcmd.c        397      &TplDel02 ,                                                         /* 42 ユーザー2削除                                      */
             tskcmd.c        398      &TplDel03 ,                                                         /* 43 ユーザー3削除                                      */
             tskcmd.c        399      &TplDel04 ,                                                         /* 44 ユーザー4削除                                      */
             tskcmd.c        400      &TplDel05 ,                                                         /* 45 ユーザー5削除                                      */
             tskcmd.c        401      &TplDel06 ,                                                         /* 46 ユーザー6削除                                      */
             tskcmd.c        402      &TplDel07 ,                                                         /* 47 ユーザー7削除                                      */
             tskcmd.c        403      &TplDel08 ,                                                         /* 48 ユーザー8削除                                      */
             tskcmd.c        404      &TplDel09 ,                                                         /* 49 ユーザー9削除                                      */
             tskcmd.c        405      &TplDel10 ,                                                         /* 4A ユーザー10削除                                     */
             tskcmd.c        406      &TplDummy ,                                                         /* 4B ダミー                                             */
             tskcmd.c        407      &TplDummy ,                                                         /* 4C ダミー                                             */
             tskcmd.c        408      &TplDummy ,                                                         /* 4D ダミー                                             */
             tskcmd.c        409      &TplDummy ,                                                         /* 4E ダミー                                             */
             tskcmd.c        410      &TplDummy ,                                                         /* 4F ダミー                                             */
             tskcmd.c        411      &TplFwpol ,                                                         /* 50 FW状態（ポーリング）                               */
             tskcmd.c        412      &TplPrtcl ,                                                         /* 51 プロトコル実行                                     */
             tskcmd.c        413      &TplResta ,                                                         /* 52 リスタート実行                                     */
             tskcmd.c        414      &TplPause ,                                                         /* 53 一時停止                                           */
             tskcmd.c        415      &TplResum ,                                                         /* 54 再開                                               */
             tskcmd.c        416      &TplAbort ,                                                         /* 55 中断                                               */
             tskcmd.c        417      &TplDummy ,                                                         /* 56 ダミー                                             */
             tskcmd.c        418      &TplDummy ,                                                         /* 57 ダミー                                             */
             tskcmd.c        419      &TplOptcd ,                                                         /* 58 オプションバーコード実行                           */
             tskcmd.c        420      &TplSmbar ,                                                         /* 59 サンプルチューブQRコード                           */
             tskcmd.c        421      &TplSmsgl ,                                                         /* 5A サンプルチューブ有無確認（単）                     */
             tskcmd.c        422      &TplSmall ,                                                         /* 5B サンプルチューブ有無確認（全）                     */
             tskcmd.c        423      &TplCllne ,                                                         /* 5C 回収チューブレーンQRコード                         */
             tskcmd.c        424      &TplClqrc ,                                                         /* 5D 回収チューブQRコード                               */
             tskcmd.c        425      &TplClsgl ,                                                         /* 5E 回収チューブ有無（単）                             */
             tskcmd.c        426      &TplClall ,                                                         /* 5F 回収チューブ有無（全）                             */
             tskcmd.c        427      &TplLdlmp ,                                                         /* 60 LED                                                */
             tskcmd.c        428      &TplUvlmp ,                                                         /* 61 UV点灯                                             */
             tskcmd.c        429      &TplPtlmp ,                                                         /* 62 パトランプ                                         */
             tskcmd.c        430      &TplPowof ,                                                         /* 63 電源OFF                                            */
             tskcmd.c        431      &TplDummy ,                                                         /* 64 ダミー                                             */
             tskcmd.c        432      &TplDummy ,                                                         /* 65 ダミー                                             */
             tskcmd.c        433      &TplDummy ,                                                         /* 66 ダミー                                             */
             tskcmd.c        434      &TplDummy ,                                                         /* 67 ダミー                                             */
             tskcmd.c        435      &TplDummy ,                                                         /* 68 ダミー                                             */
             tskcmd.c        436      &TplDummy ,                                                         /* 69 ダミー                                             */
             tskcmd.c        437      &TplDummy ,                                                         /* 6A ダミー                                             */
             tskcmd.c        438      &TplExRun ,                                                         /* 6B 運転履歴                                           */
             tskcmd.c        439      &TplDummy ,                                                         /* 6C ダミー                                             */
             tskcmd.c        440      &TplDummy ,                                                         /* 6D ダミー                                             */
             tskcmd.c        441      &TplDummy ,                                                         /* 6E ダミー                                             */
             tskcmd.c        442      &TplDummy                                                           /* 6F ダミー                                             */
             tskcmd.c        443    };
             tskcmd.c        444    
             tskcmd.c        445    // データチェックテーブル
             tskcmd.c        446    // num:パラメータ数（CMD分を含む）
             tskcmd.c        447    const ST_DATACHK DATCHK_TBL[44] = {
             tskcmd.c        448    /*======================================================================================================================================================================================================================================================================*/
             tskcmd.c        449    /*  基本コマンド                                                               基本コマンド                                                                                                                                                                             */
             tskcmd.c        450    /*======================================================================================================================================================================================================================================================================*/
             tskcmd.c        451                  //num   max1   max2   max3   max4   max5   max6   max7   max8  
             tskcmd.c        452    /* 0  HELLO   */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        453    /* 1  LOG     */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        454    /* 2  VER     */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        455    /* 3  ALLIN   */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        456    /* 4  BIN     */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        457    /* 5  BOUT    */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        458    /* 6  CINIT   */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        459    /* 7  COUNT   */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        460    /* 8  INT     */  5  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        461    /* 9  ABSMV   */  4  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        462    /* 10 ABORT   */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        463    /* 11 ENCODER */  6  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        464    /* 12 LIMIT   */  5  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        465    /* 13 MAP     */  7  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        466    /* 14 PDELAY  */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        467    /* 15 POWER   */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        468    /* 16 PSET    */  5  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        469    /* 17 RELMV   */  4  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        470    /* 18 SET     */  8  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        471    /* 19 STATUS  */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        472    /* 20 STOP    */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        473    /* 21 BCNT    */  4  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        474    /* 22 EEPREAD */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        475    /* 23 EEPWRIT */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        476    /* 24 reserve */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        477    /* 25 reserve */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        478    /* 26 TEMPSET */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        479    /* 27 TEMPGET */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        480    /* 28 reserve */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        481    /* 29 VINI    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        482    /* 30 PINI    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        483    /* 31 PREN    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        484    /* 32 PTAN    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        485    /* 33 PCAN    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        486    /* 34 VOUT    */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        487    /* 35 PSNS    */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        488    /* 36 IMPPDAT */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        489    /* 37 IMPSPED */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        490    /* 38 IMPPOSI */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        491    /* 39 IMPOPTN */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        492    /* 40 EXPRUNL */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        493    /* 41 EXPCOML */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        494    /* 42 reserve */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        495    /* 43 reserve */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        496    /* 44 reserve */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0      /*  */
             tskcmd.c        497    };
             tskcmd.c        498    
             tskcmd.c        499    static    const TPN_REQ_DAT TP_RID_SEND_FORM   = { 13, STX, 'W', 'N', ' ', 'R', 'I', 'D', ' ', '&', 'H', '*', '*', ETX, 0x30, 0x30, 0x0d };
             tskcmd.c        500    static    const char TP_RP1_SEND_FORM01[13] = { STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '0', ETX,  0x30, 0x30, 0x0d };
             tskcmd.c        501    static    const char TP_RP1_SEND_FORM02[14] = { STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '0', '0', ETX,  0x30, 0x30, 0x0d};
             tskcmd.c        502    static    const char TP_RP1_SEND_FORM04[16] = { STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '0', '0',  '0',  '0',  ETX,  0x30, 0x30, 0x0d };
             tskcmd.c        503    static    const char TP_RP3_SEND_FORM[44]   = { STX,'W','N',' ','R','P','3',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*', ETX, 0x30, 0x30, 0x0d };
             tskcmd.c        504    
             tskcmd.c        505    
             tskcmd.c        506    
             tskcmd.c        507    //*************************************
             tskcmd.c        508    // データ定義
             tskcmd.c        509    //*************************************
             tskcmd.c        510    static    ST_CNTLDATA         stCtl;                                      // 実行タスク制御用ﾃﾞｰﾀ
             tskcmd.c        511    
             tskcmd.c        512    static    char                RecvData[CMD_BUFSIZ];                       // 
             tskcmd.c        513    static    const   char*       RecvArgs[MAX_ARGS];                         // 
             tskcmd.c        514    static    UB                  bufwk[CMD_BUFSIZ];                          // 
             tskcmd.c        515    static    ST_EEPBUF           eepb;
             tskcmd.c        516    static    ST_USERINFO         RcvUserInfo;
             tskcmd.c        517    static    INT                 DeviceStatus[2];                            // モータ動作中状態  BIT=1:動作中
             tskcmd.c        518    static    ER                  MnetStatus;
             tskcmd.c        519    static    ST_POWER            power[(DVMAX+1)];
             tskcmd.c        520    static    ST_PROTCOL          *pProcAdr;
             tskcmd.c        521    static    ST_PROTCOL_DATA     *pProcDat;
             tskcmd.c        522    static    ST_BZCNT            bzcnt;
             tskcmd.c        523    static    UB                  PauseStopFlg;
             tskcmd.c        524    static    unsigned int        RcvDataSize;
             tskcmd.c        525    static    unsigned char       ExpRunlSeqno;
             tskcmd.c        526    static    unsigned char       ExpRunlRetry;
             tskcmd.c        527    static    ST_CNTLDATA         tp;                                         // 実行タスク制御用ﾃﾞｰﾀ
             tskcmd.c        528    static    char                TpRecvData[CMD_BUFSIZ];                     // 
             tskcmd.c        529    static    const   char*       TpRecvArgs[MAX_ARGS];                       // 
             tskcmd.c        530    static    ST_EEPBUF           eepb;
             tskcmd.c        531    static    ST_BCCTRL           bcctrl[BCCTRL_MAX]; 
             tskcmd.c        532    static ST_PAGE1               BkP1;
             tskcmd.c        533    static ST_SPEED           Sp[DVMAX+1][5];
             tskcmd.c        534    static ST_SPEED_PTN           SpPtn;
             tskcmd.c        535    static ST_PAGE7               BkP7;
             tskcmd.c        536    static ST_PAGE8               BkP8;
             tskcmd.c        537    static ST_PAGE9               BkP9;
             tskcmd.c        538    static ST_PAGE10          BkP10;
             tskcmd.c        539    static ST_PROTCOL_DATA        BkPrData[20]; 
             tskcmd.c        540    static ST_PROTCOL         BkPr; 
             tskcmd.c        541    static ST_INCUV               incuv;
             tskcmd.c        542    static ST_VOUT                vout;
             tskcmd.c        543    static ST_PSNS                psns;
             tskcmd.c        544    static ST_PROTCOL_SEL     psel;
             tskcmd.c        545    static unsigned short     nzlsts;
             tskcmd.c        546    static    char                rspbuf2[128];
             tskcmd.c        547    static    char                psnsdat[128];
             tskcmd.c        548    static    char                rspbuf[CMD_BUFSIZ];
             tskcmd.c        549    static    char                ImpExpRcvData[3400];
             tskcmd.c        550    static    INT                 peekdat;
             tskcmd.c        551          UB                  MentePcSendbuf[3400];
             tskcmd.c        552    
             tskcmd.c        553    // debug用
             tskcmd.c        554    static unsigned debug1_flg;
             tskcmd.c        555    
             tskcmd.c        556    
             tskcmd.c        557    /***********************************************************************
             tskcmd.c        558    * 
             tskcmd.c        559    * [概要]コマンド管理タスク
             tskcmd.c        560    * 
             tskcmd.c        561    * 
             tskcmd.c        562    * 
             tskcmd.c        563    ***********************************************************************/
             tskcmd.c        564    TASK TskCmd( void )
P   00000000              _TskCmd:                         ; function: TskCmd
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
             tskcmd.c        565    {
             tskcmd.c        566        T_CMD_MSG*    msg;
             tskcmd.c        567      ER              err;
             tskcmd.c        568    
             tskcmd.c        569      // ※注意
             tskcmd.c        570      // スレーブよりメイン基板のモーションネットが、先に立ち上がった場合、スレーブ未接続と判断されるため
             tskcmd.c        571      // スレーブが立ち上がる時間分を待ってから起動
             tskcmd.c        572      dly_tsk(1000);
    00000002 040003E8               MOVI20      #1000,R4   ; H'000003E8
    00000006 D17F                   MOV.L       L1369+2,R1 ; _v4_dly_tsk
    00000008 414B                   JSR/N       @R1
             tskcmd.c        573    
             tskcmd.c        574      // コマンドタスク初期化
             tskcmd.c        575      CmdTskInit();
    0000000A B01A                   BSR         __$CmdTskInit
    0000000C 0009                   NOP
             tskcmd.c        576    
             tskcmd.c        577      // モーションネット初期化
             tskcmd.c        578      MnetStatus = MntInit();
    0000000E D57E                   MOV.L       L1369+6,R5 ; _MntInit
    00000010 454B                   JSR/N       @R5
    00000012 D67E                   MOV.L       L1369+10,R6; __$MnetStatus
             tskcmd.c        579    
             tskcmd.c        580      // コマンドタスク初期動作
             tskcmd.c        581      if( MnetStatus != E_SUCCESS )
    00000014 2008                   TST         R0,R0
    00000016 8D02                   BT/S        L12
    00000018 2602                   MOV.L       R0,@R6     ; MnetStatus
             tskcmd.c        582      {
             tskcmd.c        583          CmdTskInitAct();
    0000001A B053                   BSR         __$CmdTskInitAct
    0000001C 0009                   NOP
    0000001E              L12:
    0000001E DB7C                   MOV.L       L1369+14,R11; _v4_trcv_mbx
    00000020 DC7C                   MOV.L       L1369+18,R12; L1447
    00000022 DD7D                   MOV.L       L1369+22,R13; _api_rel_mpf
    00000024 0E000252               MOVI20      #594,R14   ; H'00000252
    00000028              L13:
             tskcmd.c        584      }
             tskcmd.c        585      
             tskcmd.c        586      for( ;; )
             tskcmd.c        587        {
             tskcmd.c        588            // コマンド待ち
             tskcmd.c        589            err = rcv_mbx( ID_MBX_CMD, (T_MSG**)&msg);
    00000028 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    0000002A E405                   MOV         #5,R4      ; H'00000005
    0000002C 4B0B                   JSR         @R11
    0000002E 65F3                   MOV         R15,R5
             tskcmd.c        590    
             tskcmd.c        591          // メッセージ処理
             tskcmd.c        592          CmdProc(msg);
    00000030 B07C                   BSR         __$CmdProc
    00000032 64F2                   MOV.L       @R15,R4    ; msg
    00000034 67F2                   MOV.L       @R15,R7    ; msg
             tskcmd.c        593    
             tskcmd.c        594          RelMpf( ID_MPF_CMD, (VP)msg );// メモリ解放
    00000036 E604                   MOV         #4,R6      ; H'00000004
    00000038 64C3                   MOV         R12,R4
    0000003A 4D0B                   JSR         @R13
    0000003C 65E3                   MOV         R14,R5
    0000003E AFF3                   BRA         L13
    00000040 0009                   NOP
             tskcmd.c        595        }
             tskcmd.c        596    }
             tskcmd.c        597    /***********************************************************************
             tskcmd.c        598    * 
             tskcmd.c        599    * [概要]  実行タスク初期化
             tskcmd.c        600    * [引数]  −
             tskcmd.c        601    * [戻値]  −
             tskcmd.c        602    * 
             tskcmd.c        603    ***********************************************************************/
             tskcmd.c        604    static void CmdTskInit()
    00000042              __$CmdTskInit:                   ; function: __$CmdTskInit
                                                           ; frame size=16
    00000042 4CF0                   MOVMU.L     R12,@-R15
    00000044 E647                   MOV         #71,R6     ; H'00000047
    00000046 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c        605    {
             tskcmd.c        606      INT Loop;
             tskcmd.c        607    
             tskcmd.c        608      // データクリア
             tskcmd.c        609      memset( &stCtl,       CLR,  sizeof( stCtl ) );
    00000048 D474                   MOV.L       L1369+26,R4; __$stCtl
    0000004A DC75                   MOV.L       L1369+30,R12; _memset
    0000004C 4C0B                   JSR         @R12
    0000004E 4608                   SHLL2       R6
    00000050 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c        610      memset( &RecvData,    CLR,  sizeof( RecvData ) );
    00000052 D474                   MOV.L       L1369+34,R4; __$RecvData
    00000054 4C0B                   JSR         @R12
    00000056 E500                   MOV         #0,R5      ; H'00000000
    00000058 E664                   MOV         #100,R6    ; H'00000064
    0000005A E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c        611      memset( &RecvArgs,    CLR,  sizeof( RecvArgs ) );
    0000005C D472                   MOV.L       L1369+38,R4; __$RecvArgs
    0000005E 4C0B                   JSR         @R12
    00000060 4608                   SHLL2       R6
    00000062 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c        612      memset( &TpRecvData,  CLR,  sizeof( TpRecvData ) );
    00000064 D471                   MOV.L       L1369+42,R4; __$TpRecvData
    00000066 4C0B                   JSR         @R12
    00000068 E500                   MOV         #0,R5      ; H'00000000
    0000006A E664                   MOV         #100,R6    ; H'00000064
    0000006C E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c        613      memset( &TpRecvArgs,  CLR,  sizeof( TpRecvArgs ) );
    0000006E D470                   MOV.L       L1369+46,R4; __$TpRecvArgs
    00000070 4C0B                   JSR         @R12
    00000072 4608                   SHLL2       R6
    00000074 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c        614      memset( &bufwk[0],    CLR,  CMD_BUFSIZ );
    00000076 D46F                   MOV.L       L1369+50,R4; __$bufwk
    00000078 4C0B                   JSR         @R12
    0000007A E500                   MOV         #0,R5      ; H'00000000
    0000007C E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c        615      memset( &psel,        CLR,  sizeof( psel ) );
    0000007E D46E                   MOV.L       L1369+54,R4; __$psel
    00000080 4C0B                   JSR         @R12
    00000082 E500                   MOV         #0,R5      ; H'00000000
    00000084 E610                   MOV         #16,R6     ; H'00000010
             tskcmd.c        616      memset( &incuv,       CLR,  sizeof( incuv ) );
    00000086 D46D                   MOV.L       L1369+58,R4; __$incuv
    00000088 4C0B                   JSR         @R12
    0000008A E500                   MOV         #0,R5      ; H'00000000
    0000008C E100                   MOV         #0,R1      ; H'00000000
    0000008E E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c        617    
             tskcmd.c        618      for( Loop = 0; Loop < BCCTRL_MAX; Loop++ )
    00000090 E513                   MOV         #19,R5     ; H'00000013
    00000092 D66B                   MOV.L       L1369+62,R6; __$bcctrl
    00000094              L16:
    00000094 4510                   DT          R5
             tskcmd.c        619      {
             tskcmd.c        620          bcctrl[Loop].actstp = 0;
    00000096 6013                   MOV         R1,R0
    00000098 8062                   MOV.B       R0,@(2,R6) ; bcctrl[].actstp
             tskcmd.c        621          bcctrl[Loop].msgid  = NO_DATA;
             tskcmd.c        622          bcctrl[Loop].devno  = NO_DATA;
    0000009A 6023                   MOV         R2,R0
    0000009C 2620                   MOV.B       R2,@R6     ; bcctrl[].msgid
    0000009E 8061                   MOV.B       R0,@(1,R6) ; bcctrl[].devno
             tskcmd.c        623          bcctrl[Loop].prid1 = NO_DATA;
    000000A0 8063                   MOV.B       R0,@(3,R6) ; bcctrl[].prid1
    000000A2 8FF7                   BF/S        L16
    000000A4 7608                   ADD         #8,R6
             tskcmd.c        624      }
             tskcmd.c        625    
             tskcmd.c        626      for( Loop = DVMIN; Loop <= DVMAX; Loop++ )
    000000A6 EE07                   MOV         #7,R14     ; H'00000007
    000000A8 ED02                   MOV         #2,R13     ; H'00000002
    000000AA              L18:
             tskcmd.c        627      {
             tskcmd.c        628          memset( &power[Loop], CLR, sizeof( ST_POWER ) );
    000000AA D466                   MOV.L       L1369+66,R4; __$power
    000000AC 34DC                   ADD         R13,R4
    000000AE E602                   MOV         #2,R6      ; H'00000002
    000000B0 E500                   MOV         #0,R5      ; H'00000000
    000000B2 4C0B                   JSR         @R12
    000000B4 7D02                   ADD         #2,R13
    000000B6 4E10                   DT          R14
    000000B8 8BF7                   BF          L18
             tskcmd.c        629      }
             tskcmd.c        630    
             tskcmd.c        631      // 7SEG待機表示
             tskcmd.c        632      *( (UB *)LED_ADDR ) = CLR;
    000000BA D263                   MOV.L       L1369+70,R2; H'0C00F020
    000000BC E100                   MOV         #0,R1      ; H'00000000
    000000BE 2210                   MOV.B       R1,@R2
    000000C0 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c        633    
             tskcmd.c        634    }
    000000C2 006B                   RTS/N
             tskcmd.c        635    /***********************************************************************
             tskcmd.c        636    * 
             tskcmd.c        637    * [概要]  コマンドタスク初期動作
             tskcmd.c        638    * [引数]  −
             tskcmd.c        639    * [戻値]  −
             tskcmd.c        640    * 
             tskcmd.c        641    ***********************************************************************/
             tskcmd.c        642    static void CmdTskInitAct()
    000000C4              __$CmdTskInitAct:                ; function: __$CmdTskInitAct
                                                           ; frame size=80
    000000C4 4CF0                   MOVMU.L     R12,@-R15
    000000C6 7FE0                   ADD         #-32,R15
             tskcmd.c        643    {
             tskcmd.c        644      INT Loop;
             tskcmd.c        645        ST_MOTOR_PARAM    mp;
             tskcmd.c        646    
             tskcmd.c        647      // 初期速度設定
             tskcmd.c        648      mp.accel_type = 1;                                              // 駆動タイプ(０：台形、１：Ｓ字)
    000000C8 E101                   MOV         #1,R1      ; H'00000001
    000000CA 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
             tskcmd.c        649      mp.factor     = GetFactor(3);                                   // モータ倍率
    000000CE D55F                   MOV.L       L1369+74,R5; _GetFactor
    000000D0 450B                   JSR         @R5
    000000D2 E403                   MOV         #3,R4      ; H'00000003
             tskcmd.c        650      mp.FL         = 300;                                            // 初速[pls](0〜100,000)
    000000D4 E64B                   MOV         #75,R6     ; H'0000004B
             tskcmd.c        651      mp.FH         = 1000;                                           // 最高速[pls](0〜100,000)
             tskcmd.c        652      mp.utime      = 500;                                            // 加速時間[ms](１〜65535)
    000000D6 E27D                   MOV         #125,R2    ; H'0000007D
    000000D8 4208                   SHLL2       R2
    000000DA 2F02                   MOV.L       R0,@R15    ; mp.factor
    000000DC 4608                   SHLL2       R6
    000000DE 1F24                   MOV.L       R2,@(16,R15); mp.utime
    000000E0 070003E8               MOVI20      #1000,R7   ; H'000003E8
    000000E4 1F62                   MOV.L       R6,@(8,R15); mp.FL
             tskcmd.c        653      mp.dtime      = 500;                                            // 減速時間[ms](１〜65535)
             tskcmd.c        654      mp.us         = 500;                                            // 加速時Ｓ字範囲
             tskcmd.c        655      mp.ds         = 500;                                            // 減速時Ｓ字範囲
             tskcmd.c        656      
             tskcmd.c        657      for( Loop = DVMIN; Loop <= DVMAX; Loop++ )
    000000E6 EE01                   MOV         #1,R14     ; H'00000001
    000000E8 1F73                   MOV.L       R7,@(12,R15); mp.FH
    000000EA EC07                   MOV         #7,R12     ; H'00000007
    000000EC 1F25                   MOV.L       R2,@(20,R15); mp.dtime
    000000EE 1F26                   MOV.L       R2,@(24,R15); mp.us
    000000F0 1F27                   MOV.L       R2,@(28,R15); mp.ds
    000000F2 DD57                   MOV.L       L1369+78,R13; _motor_SET
    000000F4              L21:
             tskcmd.c        658      {
             tskcmd.c        659          motor_SET( Loop, mp );
    000000F4 7FE0                   ADD         #-32,R15
    000000F6 65F3                   MOV         R15,R5
    000000F8 7520                   ADD         #32,R5
    000000FA 6252                   MOV.L       @R5,R2     ; (part of)mp
    000000FC 5151                   MOV.L       @(4,R5),R1 ; (part of)mp
    000000FE 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    00000100 2F22                   MOV.L       R2,@R15
    00000102 1F11                   MOV.L       R1,@(4,R15)
    00000104 5453                   MOV.L       @(12,R5),R4; (part of)mp
    00000106 1F72                   MOV.L       R7,@(8,R15)
    00000108 5754                   MOV.L       @(16,R5),R7; (part of)mp
    0000010A 5155                   MOV.L       @(20,R5),R1; (part of)mp
    0000010C 5256                   MOV.L       @(24,R5),R2; (part of)mp
    0000010E 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00000110 1F43                   MOV.L       R4,@(12,R15)
    00000112 64E3                   MOV         R14,R4
    00000114 1F74                   MOV.L       R7,@(16,R15)
    00000116 1F15                   MOV.L       R1,@(20,R15)
    00000118 1F26                   MOV.L       R2,@(24,R15)
    0000011A 4D0B                   JSR         @R13
    0000011C 1F67                   MOV.L       R6,@(28,R15)
    0000011E 7E01                   ADD         #1,R14
    00000120 3EC7                   CMP/GT      R12,R14
    00000122 8FE7                   BF/S        L21
    00000124 7F20                   ADD         #32,R15
    00000126 7F20                   ADD         #32,R15
    00000128 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c        660      }
             tskcmd.c        661    
             tskcmd.c        662    }
    0000012A 006B                   RTS/N
             tskcmd.c        663    /***********************************************************************
             tskcmd.c        664    * 
             tskcmd.c        665    * [概要]  タスク別解析処理
             tskcmd.c        666    * [引数]  メッセージデータ
             tskcmd.c        667    * [戻値]  −
             tskcmd.c        668    * 
             tskcmd.c        669    ***********************************************************************/
             tskcmd.c        670    static void CmdProc(T_CMD_MSG* mrcv)
    0000012C              __$CmdProc:                      ; function: __$CmdProc
                                                           ; frame size=0
             tskcmd.c        671    {
             tskcmd.c        672      switch( mrcv->msgdata.tskid )
    0000012C 5045                   MOV.L       @(20,R4),R0; (mrcv)->tskid
    0000012E 8801                   CMP/EQ      #1,R0
    00000130 8B01                   BF          L37
             tskcmd.c        673      {
             tskcmd.c        674      case ID_TSK_RX0:    // TSK_RX0->
             tskcmd.c        675          Rx0RcvMsg(mrcv);
    00000132 A025                   BRA         __$Rx0RcvMsg
    00000134 0009                   NOP
    00000136              L37:
    00000136 8802                   CMP/EQ      #2,R0
    00000138 8B01                   BF          L40
             tskcmd.c        676          break;
             tskcmd.c        677      case ID_TSK_TX0:    // TSK_TX0->
             tskcmd.c        678          Tx0RcvMsg(mrcv);
    0000013A A03B                   BRA         __$Tx0RcvMsg
    0000013C 0009                   NOP
    0000013E              L40:
    0000013E 8805                   CMP/EQ      #5,R0
    00000140 890F                   BT          L43
    00000142 8803                   CMP/EQ      #3,R0
    00000144 890D                   BT          L43
    00000146 8806                   CMP/EQ      #6,R0
    00000148 890D                   BT          L46
    0000014A 8808                   CMP/EQ      #8,R0
    0000014C 890D                   BT          L48
    0000014E 880A                   CMP/EQ      #10,R0
    00000150 890D                   BT          L50
    00000152 880B                   CMP/EQ      #11,R0
    00000154 890D                   BT          L52
    00000156 880D                   CMP/EQ      #13,R0
    00000158 890D                   BT          L54
    0000015A 880E                   CMP/EQ      #14,R0
    0000015C 890D                   BT          L55
    0000015E A00E                   BRA         L56
    00000160 0009                   NOP
    00000162              L43:
             tskcmd.c        679          break;
             tskcmd.c        680      case ID_TSK_CMD:
             tskcmd.c        681    //        AlmRcvMsg(mrcv);
             tskcmd.c        682    //        break;
             tskcmd.c        683      case ID_TSK_RXEX:   // TSK_RX2->
             tskcmd.c        684          RxExRcvMsg(mrcv);
    00000162 A1A6                   BRA         __$RxExRcvMsg
    00000164 0009                   NOP
    00000166              L46:
             tskcmd.c        685          break;
             tskcmd.c        686      case ID_TSK_TXEX:
             tskcmd.c        687          break;
             tskcmd.c        688      case ID_TSK_EEP:    // TSK_EEP->
             tskcmd.c        689          EepRcvMsg(mrcv);
    00000166 A026                   BRA         __$EepRcvMsg
    00000168 0009                   NOP
    0000016A              L48:
             tskcmd.c        690          break;
             tskcmd.c        691      case ID_TSK_MOTWAIT:
             tskcmd.c        692          MotWaitRcvMsg(mrcv);
    0000016A A110                   BRA         __$MotWaitRcvMsg
    0000016C 0009                   NOP
    0000016E              L50:
             tskcmd.c        693          break;
             tskcmd.c        694      case ID_TSK_MOTEND:
             tskcmd.c        695          MotEndRcvMsg(mrcv);
    0000016E A117                   BRA         __$MotEndRcvMsg
    00000170 0009                   NOP
    00000172              L52:
             tskcmd.c        696          break;
             tskcmd.c        697      case ID_TSK_INT:
             tskcmd.c        698          IntRcvMsg(mrcv);
    00000172 A0E1                   BRA         __$IntRcvMsg
    00000174 0009                   NOP
    00000176              L54:
             tskcmd.c        699          break;
             tskcmd.c        700      case ID_TSK_PUNIT:
             tskcmd.c        701          PunitRcvMsg(mrcv);
    00000176 A1D1                   BRA         __$PunitRcvMsg
    00000178 0009                   NOP
    0000017A              L55:
             tskcmd.c        702          break;
             tskcmd.c        703      case ID_TSK_TMPCNT:
             tskcmd.c        704          TmpCntRcvMsg(mrcv);
    0000017A A248                   BRA         __$TmpCntRcvMsg
    0000017C 0009                   NOP
    0000017E              L56:
    0000017E 006B                   RTS/N
             tskcmd.c        705          break;
             tskcmd.c        706          
             tskcmd.c        707      default:
             tskcmd.c        708          break;
             tskcmd.c        709      }
             tskcmd.c        710    }
             tskcmd.c        711    /***********************************************************************
             tskcmd.c        712    * 
             tskcmd.c        713    * [概要]  ＰＣ受信（ＲＸ０）タスクからのメッセージ受信処理
             tskcmd.c        714    * [引数]  メッセージデータ
             tskcmd.c        715    * [戻値]  −
             tskcmd.c        716    * 
             tskcmd.c        717    ***********************************************************************/
             tskcmd.c        718    static void Rx0RcvMsg( T_CMD_MSG* mrcv )
    00000180              __$Rx0RcvMsg:                    ; function: __$Rx0RcvMsg
                                                           ; frame size=0
             tskcmd.c        719    {
             tskcmd.c        720      UB          msgid;
             tskcmd.c        721    
             tskcmd.c        722      // メッセージＩＤ取得
             tskcmd.c        723      msgid = mrcv->msgdata.msgid;
             tskcmd.c        724    
             tskcmd.c        725      switch( msgid )
    00000180 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
    00000184 8865                   CMP/EQ      #101,R0
    00000186 8909                   BT          L63
    00000188 8866                   CMP/EQ      #102,R0
    0000018A 8B0D                   BF          L65
             tskcmd.c        726      {
             tskcmd.c        727      case ID_MSG_ACK:
             tskcmd.c        728          // 制御データ初期化
             tskcmd.c        729          memset( &stCtl,  CLR,  sizeof( stCtl ) );
             tskcmd.c        730          break;
             tskcmd.c        731    
             tskcmd.c        732      case ID_MSG_NAK:
             tskcmd.c        733          if( stCtl.rsp.rty > RTY_OVER ) 
    0000018C D531                   MOV.L       L1369+82,R5; H'00000098+__$stCtl
    0000018E 6652                   MOV.L       @R5,R6     ; stCtl.rsp.rty
    00000190 E203                   MOV         #3,R2      ; H'00000003
    00000192 3627                   CMP/GT      R2,R6
    00000194 8902                   BT          L63
             tskcmd.c        734          {
             tskcmd.c        735              // リトライオーバー
             tskcmd.c        736              // 制御データ初期化
             tskcmd.c        737              memset( &stCtl,  CLR,  sizeof( stCtl ) );
             tskcmd.c        738          }
             tskcmd.c        739          else
             tskcmd.c        740          {
             tskcmd.c        741              // 再送
             tskcmd.c        742              CmdSendResponse( &stCtl );
    00000196 D421                   MOV.L       L1369+26,R4; __$stCtl
    00000198 A2DE                   BRA         _CmdSendResponse
    0000019A 0009                   NOP
    0000019C              L63:
    0000019C E647                   MOV         #71,R6     ; H'00000047
    0000019E E500                   MOV         #0,R5      ; H'00000000
    000001A0 D41E                   MOV.L       L1369+26,R4; __$stCtl
    000001A2 D21F                   MOV.L       L1369+30,R2; _memset
    000001A4 422B                   JMP         @R2
    000001A6 4608                   SHLL2       R6
    000001A8              L65:
             tskcmd.c        743          }
             tskcmd.c        744          break;
             tskcmd.c        745    
             tskcmd.c        746      default:
             tskcmd.c        747          // 基本コマンド
             tskcmd.c        748          if( msgid < ID_MSG_BASE_CMD_MAX )
    000001A8 E22D                   MOV         #45,R2     ; H'0000002D
    000001AA 3023                   CMP/GE      R2,R0
    000001AC 8901                   BT          L69
             tskcmd.c        749          {
             tskcmd.c        750              CmdAnalyze( mrcv );
    000001AE A279                   BRA         __$CmdAnalyze
    000001B0 0009                   NOP
    000001B2              L69:
    000001B2 006B                   RTS/N
             tskcmd.c        751          }
             tskcmd.c        752          else
             tskcmd.c        753          {
             tskcmd.c        754              // ありえない
             tskcmd.c        755          }
             tskcmd.c        756          break;
             tskcmd.c        757      }
             tskcmd.c        758    }
             tskcmd.c        759    
             tskcmd.c        760    /***********************************************************************
             tskcmd.c        761    * 
             tskcmd.c        762    * [概要]  ＰＣ送信（ＴＸ０）タスクからのメッセージ受信処理
             tskcmd.c        763    * [引数]  メッセージデータ
             tskcmd.c        764    * [戻値]  −
             tskcmd.c        765    * 
             tskcmd.c        766    ***********************************************************************/
             tskcmd.c        767    static void Tx0RcvMsg( T_CMD_MSG* mrcv )
    000001B4              __$Tx0RcvMsg:                    ; function: __$Tx0RcvMsg
                                                           ; frame size=0
             tskcmd.c        768    {
             tskcmd.c        769    }
    000001B4 006B                   RTS/N
             tskcmd.c        770    
             tskcmd.c        771    /***********************************************************************
             tskcmd.c        772    * 
             tskcmd.c        773    * [概要]  
             tskcmd.c        774    * [引数]  メッセージデータ
             tskcmd.c        775    * [戻値]  −
             tskcmd.c        776    * 
             tskcmd.c        777    ***********************************************************************/
             tskcmd.c        778    static void AlmRcvMsg( T_CMD_MSG* mrcv )
             tskcmd.c        779    {
             tskcmd.c        780    }
             tskcmd.c        781    
             tskcmd.c        782    /***********************************************************************
             tskcmd.c        783    * 
             tskcmd.c        784    * [概要]  ＥＥＰＲＯＭ管理タスクからのメッセージ受信処理
             tskcmd.c        785    * [引数]  メッセージデータ
             tskcmd.c        786    * [戻値]  −
             tskcmd.c        787    * 
             tskcmd.c        788    ***********************************************************************/
             tskcmd.c        789    static void EepRcvMsg( T_CMD_MSG* mrcv )
    000001B6              __$EepRcvMsg:                    ; function: __$EepRcvMsg
                                                           ; frame size=68
    000001B6 4AF0                   MOVMU.L     R10,@-R15
    000001B8 7FFC                   ADD         #-4,R15
             tskcmd.c        790    {
             tskcmd.c        791      UB  msgid;
             tskcmd.c        792      UB  inf;
             tskcmd.c        793      UB  inf2;
             tskcmd.c        794      UB  prid1;
             tskcmd.c        795      UB  bcid;
             tskcmd.c        796      UB  result = SET;
             tskcmd.c        797      int i;
             tskcmd.c        798      UB  *sramadr;
             tskcmd.c        799      int index;
             tskcmd.c        800      
             tskcmd.c        801      prid1 = mrcv->msgdata.prid1;                                        // 
             tskcmd.c        802      bcid  = mrcv->msgdata.bcid;                                         // 
             tskcmd.c        803      msgid = mrcv->msgdata.msgid;
    000001BA 3A41801B               MOVU.B      @(27,R4),R10; (mrcv)->msgid
             tskcmd.c        804      inf   = mrcv->msgdata.inf;
             tskcmd.c        805      inf2  = mrcv->msgdata.inf2;
             tskcmd.c        806      
             tskcmd.c        807      if( msgid == ID_MSG_EEPREAD )
    000001BE 60A3                   MOV         R10,R0
    000001C0 8816                   CMP/EQ      #22,R0
    000001C2 36418018               MOVU.B      @(24,R4),R6; (mrcv)->prid1
    000001C6 3B41801A               MOVU.B      @(26,R4),R11; (mrcv)->bcid
    000001CA 3C41801C               MOVU.B      @(28,R4),R12; (mrcv)->inf
    000001CE 3D41801D               MOVU.B      @(29,R4),R13; (mrcv)->inf2
    000001D2 8D02                   BT/S        L1404
    000001D4 6E43                   MOV         R4,R14
    000001D6 A08C                   BRA         L80
    000001D8 0009                   NOP
    000001DA              L1404:
             tskcmd.c        808      {
             tskcmd.c        809          switch( prid1 )
    000001DA 6063                   MOV         R6,R0
    000001DC 8801                   CMP/EQ      #1,R0
    000001DE 8B49                   BF          L81
             tskcmd.c        810          {
             tskcmd.c        811          case ID_TPL_FWVER:
             tskcmd.c        812              if( (inf2 & EEPROM_SPED_PTRN) ) // 速度情報（Page2〜Page4）
    000001E0 87D9                   BLD         #1,R13
    000001E2 8B05                   BF          L84
             tskcmd.c        813              {
             tskcmd.c        814                  eep_GetSpeedData( &Sp[MT_Y0][0].ac );
    000001E4 D41C                   MOV.L       L1369+86,R4; H'0000003C+__$Sp
    000001E6 DE1D                   MOV.L       L1369+90,R14; _eep_GetSpeedData
    000001E8 4E4B                   JSR/N       @R14
             tskcmd.c        815                  eep_GetSpeedPattern( &SpPtn.Y0_SpdIniPtn );
    000001EA D41D                   MOV.L       L1369+94,R4; __$SpPtn
    000001EC D11D                   MOV.L       L1369+98,R1; _eep_GetSpeedPattern
    000001EE 414B                   JSR/N       @R1
    000001F0              L84:
             tskcmd.c        816              }
             tskcmd.c        817              if( (inf2 & EEPROM_POSI_INFO) ) // 位置情報（Page7〜Page9）
    000001F0 87DA                   BLD         #2,R13
    000001F2 8B02                   BF          L86
             tskcmd.c        818              {
             tskcmd.c        819                  eep_GetPositionInfo( &BkP7.Y0_Offset );
    000001F4 D41C                   MOV.L       L1369+102,R4; __$BkP7
    000001F6 D21D                   MOV.L       L1369+106,R2; _eep_GetPositionInfo
    000001F8 424B                   JSR/N       @R2
    000001FA              L86:
             tskcmd.c        820              }
             tskcmd.c        821              TpRspFWVER();
    000001FA D31D                   MOV.L       L1369+110,R3; __$TpRspFWVER
    000001FC 434B                   JSR/N       @R3
    000001FE A078                   BRA         L80
    00000200 0009                   NOP
    00000202              L1369:
    00000202 00000002               .RES.W      1
    00000204 <00000000>             .DATA.L     _v4_dly_tsk
    00000208 <00000000>             .DATA.L     _MntInit
    0000020C <00000000>             .DATA.L     __$MnetStatus
    00000210 <00000000>             .DATA.L     _v4_trcv_mbx
    00000214 <00000000>             .DATA.L     L1447
    00000218 <00000000>             .DATA.L     _api_rel_mpf
    0000021C <00000000>             .DATA.L     __$stCtl
    00000220 <00000000>             .DATA.L     _memset
    00000224 <00000000>             .DATA.L     __$RecvData
    00000228 <00000000>             .DATA.L     __$RecvArgs
    0000022C <00000000>             .DATA.L     __$TpRecvData
    00000230 <00000000>             .DATA.L     __$TpRecvArgs
    00000234 <00000000>             .DATA.L     __$bufwk
    00000238 <00000000>             .DATA.L     __$psel
    0000023C <00000000>             .DATA.L     __$incuv
    00000240 <00000000>             .DATA.L     __$bcctrl
    00000244 <00000000>             .DATA.L     __$power
    00000248 0C00F020               .DATA.L     H'0C00F020
    0000024C <00000000>             .DATA.L     _GetFactor
    00000250 <00000000>             .DATA.L     _motor_SET
    00000254 <00000098>             .DATA.L     H'00000098+__$stCtl
    00000258 <0000003C>             .DATA.L     H'0000003C+__$Sp
    0000025C <00000000>             .DATA.L     _eep_GetSpeedData
    00000260 <00000000>             .DATA.L     __$SpPtn
    00000264 <00000000>             .DATA.L     _eep_GetSpeedPattern
    00000268 <00000000>             .DATA.L     __$BkP7
    0000026C <00000000>             .DATA.L     _eep_GetPositionInfo
    00000270 <00000000>             .DATA.L     __$TpRspFWVER
    00000274              L81:
    00000274 8803                   CMP/EQ      #3,R0
    00000276 8907                   BT          L88
    00000278 8804                   CMP/EQ      #4,R0
    0000027A 8905                   BT          L88
    0000027C 8802                   CMP/EQ      #2,R0
    0000027E 8907                   BT          L91
    00000280 8851                   CMP/EQ      #81,R0
    00000282 890C                   BT          L92
    00000284 A035                   BRA         L80
    00000286 0009                   NOP
    00000288              L88:
             tskcmd.c        822              break;
             tskcmd.c        823          
             tskcmd.c        824          case ID_TPL_LGIN1:
             tskcmd.c        825          case ID_TPL_LGIN2:
             tskcmd.c        826              TpRspLGIN1();
    00000288 D38E                   MOV.L       L1370,R3   ; __$TpRspLGIN1
    0000028A 434B                   JSR/N       @R3
    0000028C A031                   BRA         L80
    0000028E 0009                   NOP
    00000290              L91:
             tskcmd.c        827              break;
             tskcmd.c        828    
             tskcmd.c        829          case ID_TPL_OPTIF:
             tskcmd.c        830              eep_GetOptionInfo  ( &BkP10.Login );
    00000290 D48D                   MOV.L       L1370+4,R4 ; __$BkP10
    00000292 D28E                   MOV.L       L1370+8,R2 ; _eep_GetOptionInfo
    00000294 424B                   JSR/N       @R2
             tskcmd.c        831              TpRspOPTIF();
    00000296 D38E                   MOV.L       L1370+12,R3; __$TpRspOPTIF
    00000298 434B                   JSR/N       @R3
    0000029A A02A                   BRA         L80
    0000029C 0009                   NOP
    0000029E              L92:
             tskcmd.c        832              break;
             tskcmd.c        833    
             tskcmd.c        834          case ID_TPL_PRTCL:
             tskcmd.c        835              if(( inf2 > 0 )&&( inf2 <= PROT_CT_MAX ))
    0000029E 2DD8                   TST         R13,R13
    000002A0 8927                   BT          L80
    000002A2 E614                   MOV         #20,R6     ; H'00000014
    000002A4 3D67                   CMP/GT      R6,R13
    000002A6 8924                   BT          L80
             tskcmd.c        836              {
             tskcmd.c        837                  index = inf2 - 1;
    000002A8 65D3                   MOV         R13,R5
    000002AA 75FF                   ADD         #-1,R5
             tskcmd.c        838                  
             tskcmd.c        839                  // BkPrData
             tskcmd.c        840                  // UB Cnt; トータルステップ数（ 1 〜 80 ）
             tskcmd.c        841                  // UB Prc; 工程有無
             tskcmd.c        842                  // UB Stp; 処理ステップ
             tskcmd.c        843                  pProcDat = (ST_PROTCOL_DATA *)&BkPrData[index].Cnt;
    000002AC D489                   MOV.L       L1370+16,R4; __$BkPrData
    000002AE 6153                   MOV         R5,R1
    000002B0 2F52                   MOV.L       R5,@R15    ; index
    000002B2 4108                   SHLL2       R1
    000002B4 341C                   ADD         R1,R4
    000002B6 D688                   MOV.L       L1370+20,R6; __$pProcDat
             tskcmd.c        844                  eep_GetProtocolData( pProcDat,  index );
    000002B8 D788                   MOV.L       L1370+24,R7; _eep_GetProtocolData
    000002BA 470B                   JSR         @R7
    000002BC 2642                   MOV.L       R4,@R6     ; pProcDat
             tskcmd.c        845                  
             tskcmd.c        846                  pProcAdr = (ST_PROTCOL *)( SRAM_START_ADDRESS + sizeof(ST_PROTCOL) * index);
    000002BE 64F2                   MOV.L       @R15,R4    ; index
    000002C0 00000640               MOVI20      #1600,R0   ; H'00000640
    000002C4 4480                   MULR        R0,R4
    000002C6 01000C00               MOVI20      #3072,R1   ; H'00000C00
    000002CA 4128                   SHLL16      R1
    000002CC D584                   MOV.L       L1370+28,R5; __$pProcAdr
    000002CE 341C                   ADD         R1,R4
             tskcmd.c        847                  eep_GetProtocol( pProcAdr );
    000002D0 D284                   MOV.L       L1370+32,R2; _eep_GetProtocol
    000002D2 420B                   JSR         @R2
    000002D4 2542                   MOV.L       R4,@R5     ; pProcAdr
             tskcmd.c        848    
             tskcmd.c        849                  StaQgProcList( bcid,          // bcid
             tskcmd.c        850                                 msgid,         // msgid
             tskcmd.c        851                                 NO_DATA,       // devno
             tskcmd.c        852                                 1,             // actstp
             tskcmd.c        853                                 ID_TPL_PRTCL,  // prid1
             tskcmd.c        854                                 inf,           // inf
             tskcmd.c        855                                 inf2           // inf2(プロトコル番号)
             tskcmd.c        856                  );
    000002D6 2FD6                   MOV.L       R13,@-R15
    000002D8 2FC6                   MOV.L       R12,@-R15
    000002DA EC51                   MOV         #81,R12    ; H'00000051
    000002DC 2FC6                   MOV.L       R12,@-R15
    000002DE E701                   MOV         #1,R7      ; H'00000001
    000002E0 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    000002E2 64B3                   MOV         R11,R4
    000002E4 D380                   MOV.L       L1370+36,R3; __$StaQgProcList
    000002E6 430B                   JSR         @R3
    000002E8 65A3                   MOV         R10,R5
    000002EA 7F0C                   ADD         #12,R15
             tskcmd.c        857                  
             tskcmd.c        858                  QgProcList( mrcv );
    000002EC D37F                   MOV.L       L1370+40,R3; __$QgProcList
    000002EE 430B                   JSR         @R3
    000002F0 64E3                   MOV         R14,R4
    000002F2              L80:
             tskcmd.c        859              }
             tskcmd.c        860              break;
             tskcmd.c        861          }
             tskcmd.c        862      }
             tskcmd.c        863    
             tskcmd.c        864      if(
    000002F2 60A3                   MOV         R10,R0
    000002F4 8824                   CMP/EQ      #36,R0
    000002F6 8903                   BT          L96
    000002F8 8825                   CMP/EQ      #37,R0
    000002FA 8901                   BT          L96
    000002FC 8826                   CMP/EQ      #38,R0
    000002FE 8B18                   BF          L98
    00000300              L96:
             tskcmd.c        865          ( msgid == ID_MSG_IMPPDAT )||
             tskcmd.c        866          ( msgid == ID_MSG_IMPSPED )||
             tskcmd.c        867          ( msgid == ID_MSG_IMPPOSI )
             tskcmd.c        868      )
             tskcmd.c        869      {
             tskcmd.c        870          // 応答メッセージ作成
             tskcmd.c        871          CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c        872                              PARAM2,                                         // パラメータ数
             tskcmd.c        873                              STRTBL_MSG[msgid],                              // コマンド文字列
             tskcmd.c        874                              E_SUCCESS,                                      // エラーコード
             tskcmd.c        875    
             tskcmd.c        876                              0,                                              // 
             tskcmd.c        877                              0,                                              // 
             tskcmd.c        878                              0,                                              // 
             tskcmd.c        879                              0,                                              // 
             tskcmd.c        880                              0,                                              // 
             tskcmd.c        881    
             tskcmd.c        882                              0,                                              // 
             tskcmd.c        883                              0,                                              // 
             tskcmd.c        884                              0,                                              // 
             tskcmd.c        885                              0,                                              // 
             tskcmd.c        886                              0                                               // 
             tskcmd.c        887                          );
    00000300 E200                   MOV         #0,R2      ; H'00000000
    00000302 2F26                   MOV.L       R2,@-R15
    00000304 2F26                   MOV.L       R2,@-R15
    00000306 2F26                   MOV.L       R2,@-R15
    00000308 2F26                   MOV.L       R2,@-R15
    0000030A 2F26                   MOV.L       R2,@-R15
    0000030C 2F26                   MOV.L       R2,@-R15
    0000030E 2F26                   MOV.L       R2,@-R15
    00000310 2F26                   MOV.L       R2,@-R15
    00000312 2F26                   MOV.L       R2,@-R15
    00000314 2F26                   MOV.L       R2,@-R15
    00000316 4A08                   SHLL2       R10
    00000318 D775                   MOV.L       L1370+44,R7; _STRTBL_MSG
    0000031A 60A3                   MOV         R10,R0
    0000031C 067E                   MOV.L       @(R0,R7),R6; STRTBL_MSG[]
    0000031E E502                   MOV         #2,R5      ; H'00000002
    00000320 D474                   MOV.L       L1370+48,R4; __$stCtl
    00000322 B353                   BSR         _CmdMakeResponse
    00000324 6723                   MOV         R2,R7
    00000326 7F28                   ADD         #40,R15
             tskcmd.c        888          CmdSendResponse( &stCtl );                                          // 応答送信
    00000328 D472                   MOV.L       L1370+48,R4; __$stCtl
    0000032A 7F04                   ADD         #4,R15
    0000032C 4AF4                   MOVMU.L     @R15+,R10
    0000032E A213                   BRA         _CmdSendResponse
    00000330 0009                   NOP
    00000332              L98:
    00000332 7F04                   ADD         #4,R15
    00000334 4AF4                   MOVMU.L     @R15+,R10
    00000336 006B                   RTS/N
             tskcmd.c        889      }
             tskcmd.c        890    
             tskcmd.c        891    }
             tskcmd.c        892    
             tskcmd.c        893    /***********************************************************************
             tskcmd.c        894    * 
             tskcmd.c        895    * [概要]  
             tskcmd.c        896    * [引数]  メッセージデータ
             tskcmd.c        897    * [戻値]  −
             tskcmd.c        898    * 
             tskcmd.c        899    ***********************************************************************/
             tskcmd.c        900    static void IntRcvMsg( T_CMD_MSG* mrcv )
    00000338              __$IntRcvMsg:                    ; function: __$IntRcvMsg
                                                           ; frame size=20
    00000338 4F22                   STS.L       PR,@-R15
    0000033A 7FF0                   ADD         #-16,R15
             tskcmd.c        901    {
             tskcmd.c        902      ER result = E_SUCCESS;
             tskcmd.c        903      UB Loopd;
             tskcmd.c        904      UB intbuf[8];
             tskcmd.c        905      INT TargetDevice[2];
             tskcmd.c        906      INT CompareDevice[2];
             tskcmd.c        907      
             tskcmd.c        908      // 今回停止させたデバイスが関連するBLKCMDがある場合にBLKCMD管理テーブルの登録から外す
             tskcmd.c        909      memcpy( &intbuf[0], &mrcv->msgdata.data[0], 8 );
    0000033C 7424                   ADD         #36,R4
    0000033E E608                   MOV         #8,R6      ; H'00000008
    00000340 6543                   MOV         R4,R5
    00000342 D16D                   MOV.L       L1370+52,R1; _memcpy
    00000344 410B                   JSR         @R1
    00000346 64F3                   MOV         R15,R4
             tskcmd.c        910      
             tskcmd.c        911      // 上位
             tskcmd.c        912      TargetDevice[1] =   intbuf[7] * 0x1000000 +
             tskcmd.c        913                          intbuf[6] * 0x10000 +
             tskcmd.c        914                          intbuf[5] * 0x100 +
             tskcmd.c        915                          intbuf[4];
    00000348 84F7                   MOV.B       @(7,R15),R0; intbuf[]
    0000034A 37F18000               MOVU.B      @(0,R15),R7; intbuf[]
    0000034E 4028                   SHLL16      R0
    00000350 4018                   SHLL8       R0
    00000352 6103                   MOV         R0,R1
    00000354 30F18006               MOVU.B      @(6,R15),R0; intbuf[]
    00000358 4028                   SHLL16      R0
    0000035A 310C                   ADD         R0,R1
    0000035C 30F18005               MOVU.B      @(5,R15),R0; intbuf[]
    00000360 4018                   SHLL8       R0
    00000362 310C                   ADD         R0,R1
    00000364 30F18004               MOVU.B      @(4,R15),R0; intbuf[]
    00000368 310C                   ADD         R0,R1
             tskcmd.c        916    
             tskcmd.c        917      // 
             tskcmd.c        918      TargetDevice[0] =   intbuf[3] * 0x1000000 +
             tskcmd.c        919                          intbuf[2] * 0x10000 +
             tskcmd.c        920                          intbuf[1] * 0x100 +
             tskcmd.c        921                          intbuf[0];
    0000036A 84F3                   MOV.B       @(3,R15),R0; intbuf[]
    0000036C 1F13                   MOV.L       R1,@(12,R15); TargetDevice[]
    0000036E 4028                   SHLL16      R0
    00000370 4018                   SHLL8       R0
    00000372 6203                   MOV         R0,R2
    00000374 30F18002               MOVU.B      @(2,R15),R0; intbuf[]
    00000378 4028                   SHLL16      R0
    0000037A 320C                   ADD         R0,R2
    0000037C 30F18001               MOVU.B      @(1,R15),R0; intbuf[]
    00000380 4018                   SHLL8       R0
    00000382 320C                   ADD         R0,R2
    00000384 327C                   ADD         R7,R2
    00000386 1F22                   MOV.L       R2,@(8,R15); TargetDevice[]
    00000388 7F10                   ADD         #16,R15
    0000038A 4F26                   LDS.L       @R15+,PR
             tskcmd.c        922    
             tskcmd.c        923    }
    0000038C 006B                   RTS/N
             tskcmd.c        924    /***********************************************************************
             tskcmd.c        925    * 
             tskcmd.c        926    * [概要]  タスクからのメッセージ受信処理
             tskcmd.c        927    * [引数]  メッセージデータ
             tskcmd.c        928    * [戻値]  −
             tskcmd.c        929    * 
             tskcmd.c        930    ***********************************************************************/
             tskcmd.c        931    static void MotWaitRcvMsg( T_CMD_MSG* mrcv )
    0000038E              __$MotWaitRcvMsg:                ; function: __$MotWaitRcvMsg
                                                           ; frame size=0
             tskcmd.c        932    {
             tskcmd.c        933      ER result = E_SUCCESS;
             tskcmd.c        934      
             tskcmd.c        935      if( mrcv->msgdata.bcid != NO_DATA )
             tskcmd.c        936      {
             tskcmd.c        937    //        result = BlkCmdProc( mrcv );
             tskcmd.c        938      }
             tskcmd.c        939      if( mrcv->msgdata.prid1 != NO_DATA )
    0000038E 36414018               MOV.B       @(24:12,R4),R6; (mrcv)->prid1
    00000392 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00000394 3620                   CMP/EQ      R2,R6
    00000396 8902                   BT          L102
             tskcmd.c        940      {
             tskcmd.c        941          result = QgProcList( mrcv );
    00000398 D354                   MOV.L       L1370+40,R3; __$QgProcList
    0000039A 432B                   JMP         @R3
    0000039C 0009                   NOP
    0000039E              L102:
    0000039E 006B                   RTS/N
             tskcmd.c        942      }
             tskcmd.c        943    }
             tskcmd.c        944      
             tskcmd.c        945    /***********************************************************************
             tskcmd.c        946    * 
             tskcmd.c        947    * [概要]  タスクからのメッセージ受信処理
             tskcmd.c        948    * [引数]  メッセージデータ
             tskcmd.c        949    * [戻値]  −
             tskcmd.c        950    * 
             tskcmd.c        951    ***********************************************************************/
             tskcmd.c        952    static void MotEndRcvMsg( T_CMD_MSG* mrcv )
    000003A0              __$MotEndRcvMsg:                 ; function: __$MotEndRcvMsg
                                                           ; frame size=136
    000003A0 49F0                   MOVMU.L     R9,@-R15
    000003A2 7FBC                   ADD         #-68,R15
             tskcmd.c        953    {
             tskcmd.c        954      ER result  = E_SUCCESS;
             tskcmd.c        955      ER result1 = E_SUCCESS;
             tskcmd.c        956      ER result2 = E_SUCCESS;
             tskcmd.c        957      ST_MOTOR_STATUS     sts;                                        // 
             tskcmd.c        958      ST_MOTOR_STATUS     sts2;                                       // 
             tskcmd.c        959      UB prid1;
             tskcmd.c        960      UB bcid;
             tskcmd.c        961      UB msg;
             tskcmd.c        962      UB mm1;
             tskcmd.c        963      UB mm2;
             tskcmd.c        964      UB Loopd;
             tskcmd.c        965      INT TargetDevice[2];
             tskcmd.c        966      INT CompareDevice[2];
             tskcmd.c        967    
             tskcmd.c        968      prid1 = mrcv->msgdata.prid1;
             tskcmd.c        969      bcid = mrcv->msgdata.bcid;
             tskcmd.c        970      msg  = mrcv->msgdata.msgid;
             tskcmd.c        971      mm1 = mrcv->msgdata.inf;
             tskcmd.c        972      mm2 = mrcv->msgdata.inf2;
             tskcmd.c        973      stCtl.rsp.siz = mrcv->msgdata.siz;
    000003A4 5248                   MOV.L       @(32,R4),R2; (mrcv)->siz
    000003A6 6D43                   MOV         R4,R13
    000003A8 3B41801C               MOVU.B      @(28,R4),R11; (mrcv)->inf
    000003AC D153                   MOV.L       L1370+56,R1; H'00000094+__$stCtl
    000003AE 3E41401A               MOV.B       @(26:12,R4),R14; (mrcv)->bcid
    000003B2 3941801B               MOVU.B      @(27,R4),R9; (mrcv)->msgid
    000003B6 3A41801D               MOVU.B      @(29,R4),R10; (mrcv)->inf2
    000003BA 2122                   MOV.L       R2,@R1     ; stCtl.rsp.siz
             tskcmd.c        974      
             tskcmd.c        975      ClrDevice( mm1 );   
    000003BC D350                   MOV.L       L1370+60,R3; __$ClrDevice
    000003BE 430B                   JSR         @R3
    000003C0 64B3                   MOV         R11,R4
             tskcmd.c        976    
             tskcmd.c        977      if( bcid == NO_DATA )
    000003C2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000003C4 3E50                   CMP/EQ      R5,R14
    000003C6 8F63                   BF/S        L110
    000003C8 EC00                   MOV         #0,R12     ; H'00000000
             tskcmd.c        978      {
             tskcmd.c        979          switch( msg )
    000003CA 6093                   MOV         R9,R0
    000003CC 880D                   CMP/EQ      #13,R0
    000003CE 8B44                   BF          L111
             tskcmd.c        980          {
             tskcmd.c        981          case ID_MSG_MAP:
             tskcmd.c        982              if( GetDeviceStatus( mm2 ) == TRUE )    return;
    000003D0 D34C                   MOV.L       L1370+64,R3; __$GetDeviceStatus
    000003D2 430B                   JSR         @R3
    000003D4 64A3                   MOV         R10,R4
    000003D6 8801                   CMP/EQ      #1,R0
    000003D8 8968                   BT          L114
    000003DA 65F3                   MOV         R15,R5
             tskcmd.c        983    
             tskcmd.c        984              result1 = motor_STATUS( mm1, &sts  );
    000003DC 1FBE                   MOV.L       R11,@(56,R15)
    000003DE DD4A                   MOV.L       L1370+68,R13; _motor_STATUS
    000003E0 4D0B                   JSR         @R13
    000003E2 64B3                   MOV         R11,R4
    000003E4 65F3                   MOV         R15,R5
    000003E6 7518                   ADD         #24,R5
    000003E8 1F0F                   MOV.L       R0,@(60,R15)
             tskcmd.c        985              result2 = motor_STATUS( mm2, &sts2 );
    000003EA DE47                   MOV.L       L1370+68,R14; _motor_STATUS
    000003EC 4E0B                   JSR         @R14
    000003EE 64A3                   MOV         R10,R4
             tskcmd.c        986    
             tskcmd.c        987              if( result2 != E_SUCCESS )      result = result2;
    000003F0 2008                   TST         R0,R0
    000003F2 3FA12010               MOV.L       R10,@(64:12,R15)
    000003F6 8D01                   BT/S        L116
    000003F8 6603                   MOV         R0,R6
    000003FA 6C63                   MOV         R6,R12
    000003FC              L116:
             tskcmd.c        988              if( result1 != E_SUCCESS )      result = result1;
    000003FC 51FF                   MOV.L       @(60,R15),R1
    000003FE 2118                   TST         R1,R1
    00000400 8900                   BT          L118
    00000402 6C13                   MOV         R1,R12
    00000404              L118:
             tskcmd.c        989              
             tskcmd.c        990              // 応答メッセージ作成
             tskcmd.c        991              CmdMakeResponse(    &stCtl,
             tskcmd.c        992                                  PARAM12,                                // パラメータ数
             tskcmd.c        993                                  STRTBL_MSG[msg],                        // コマンド文字列
             tskcmd.c        994                                  result,                                 // エラーコード
             tskcmd.c        995    
             tskcmd.c        996                                  mm1,                                    // モータ１番号
             tskcmd.c        997                                  sts.pos,                                // パルスカウント１
             tskcmd.c        998                                  sts.enc,                                // エンコーダ１
             tskcmd.c        999                                  sts.cw_limit,                           // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1000                                  sts.ccw_limit,                          // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1001    
             tskcmd.c       1002                                  mm2,                                    // モータ２番号
             tskcmd.c       1003                                  sts2.pos,                               // パルスカウント２
             tskcmd.c       1004                                  sts2.enc,                               // エンコーダ２
             tskcmd.c       1005                                  sts2.cw_limit,                          // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1006                                  sts2.ccw_limit                          // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1007                              );
    00000404 7FFC                   ADD         #-4,R15
    00000406 54FC                   MOV.L       @(48,R15),R4; sts2.ccw_limit
    00000408 2F42                   MOV.L       R4,@R15
    0000040A 7FFC                   ADD         #-4,R15
    0000040C 55FC                   MOV.L       @(48,R15),R5; sts2.cw_limit
    0000040E 2F52                   MOV.L       R5,@R15
    00000410 7FFC                   ADD         #-4,R15
    00000412 57FA                   MOV.L       @(40,R15),R7; sts2.enc
    00000414 2F72                   MOV.L       R7,@R15
    00000416 7FFC                   ADD         #-4,R15
    00000418 5AFA                   MOV.L       @(40,R15),R10; sts2.pos
    0000041A 2FA2                   MOV.L       R10,@R15
    0000041C 7FFC                   ADD         #-4,R15
    0000041E 31F16015               MOV.L       @(84:12,R15),R1
    00000422 2F12                   MOV.L       R1,@R15
    00000424 7FFC                   ADD         #-4,R15
    00000426 5BFB                   MOV.L       @(44,R15),R11; sts.ccw_limit
    00000428 2FB2                   MOV.L       R11,@R15
    0000042A 7FFC                   ADD         #-4,R15
    0000042C 5DFB                   MOV.L       @(44,R15),R13; sts.cw_limit
    0000042E 2FD2                   MOV.L       R13,@R15
    00000430 7FFC                   ADD         #-4,R15
    00000432 5EF9                   MOV.L       @(36,R15),R14; sts.enc
    00000434 2FE2                   MOV.L       R14,@R15
    00000436 7FFC                   ADD         #-4,R15
    00000438 51F9                   MOV.L       @(36,R15),R1; sts.pos
    0000043A 2F12                   MOV.L       R1,@R15
    0000043C 7FFC                   ADD         #-4,R15
    0000043E 32F16018               MOV.L       @(96:12,R15),R2
    00000442 4908                   SHLL2       R9
    00000444 E50C                   MOV         #12,R5     ; H'0000000C
    00000446 2F22                   MOV.L       R2,@R15
    00000448 6093                   MOV         R9,R0
    0000044A D229                   MOV.L       L1370+44,R2; _STRTBL_MSG
    0000044C 062E                   MOV.L       @(R0,R2),R6; STRTBL_MSG[]
    0000044E 67C3                   MOV         R12,R7
    00000450 D428                   MOV.L       L1370+48,R4; __$stCtl
    00000452 B2BB                   BSR         _CmdMakeResponse
    00000454 6E43                   MOV         R4,R14
    00000456 A017                   BRA         L119
    00000458 7F28                   ADD         #40,R15
    0000045A              L111:
    0000045A 880A                   CMP/EQ      #10,R0
    0000045C DE25                   MOV.L       L1370+48,R14; __$stCtl
    0000045E 8901                   BT          L121
    00000460 8814                   CMP/EQ      #20,R0
    00000462 8B0A                   BF          L122
    00000464              L121:
             tskcmd.c       1008              break;
             tskcmd.c       1009    
             tskcmd.c       1010    
             tskcmd.c       1011          case ID_MSG_ABORT:
             tskcmd.c       1012          case ID_MSG_STOP:
             tskcmd.c       1013              // 今回停止させたデバイスが関連するＢＣがある場合にＢＣ管理テーブルの登録から外す
             tskcmd.c       1014    
             tskcmd.c       1015              // 対象デバイス初期化
             tskcmd.c       1016              memset( &TargetDevice[0], CLR, sizeof( TargetDevice ) );
    00000464 64F3                   MOV         R15,R4
    00000466 7430                   ADD         #48,R4
    00000468 E608                   MOV         #8,R6      ; H'00000008
    0000046A D128                   MOV.L       L1370+72,R1; _memset
    0000046C 410B                   JSR         @R1
    0000046E E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1017    
             tskcmd.c       1018              // 対象デバイス取得
             tskcmd.c       1019              BitSet_INT( mm1, &TargetDevice[0] );
    00000470 65F3                   MOV         R15,R5
    00000472 7530                   ADD         #48,R5
    00000474 D726                   MOV.L       L1370+76,R7; _BitSet_INT
    00000476 470B                   JSR         @R7
    00000478 64B3                   MOV         R11,R4
    0000047A              L122:
    0000047A D120                   MOV.L       L1370+56,R1; H'00000094+__$stCtl
    0000047C 6612                   MOV.L       @R1,R6     ; stCtl.rsp.siz
             tskcmd.c       1020    
             tskcmd.c       1021              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       1022    
             tskcmd.c       1023          default:
             tskcmd.c       1024              // レスポンスデータ取得
             tskcmd.c       1025              memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], stCtl.rsp.siz );
    0000047E 7D24                   ADD         #36,R13
    00000480 D424                   MOV.L       L1370+80,R4; H'0000009C+__$stCtl
    00000482 D21D                   MOV.L       L1370+52,R2; _memcpy
    00000484 420B                   JSR         @R2
    00000486 65D3                   MOV         R13,R5
    00000488              L119:
             tskcmd.c       1026              break;
             tskcmd.c       1027          }
             tskcmd.c       1028          
             tskcmd.c       1029          // 応答送信
             tskcmd.c       1030          CmdSendResponse( &stCtl );
    00000488 B166                   BSR         _CmdSendResponse
    0000048A 64E3                   MOV         R14,R4
    0000048C A00E                   BRA         L114
    0000048E 0009                   NOP
    00000490              L110:
             tskcmd.c       1031      }
             tskcmd.c       1032      else
             tskcmd.c       1033      {
             tskcmd.c       1034          ClrDevice( mm1 );   
    00000490 D31B                   MOV.L       L1370+60,R3; __$ClrDevice
    00000492 430B                   JSR         @R3
    00000494 64B3                   MOV         R11,R4
             tskcmd.c       1035          if( msg == ID_MSG_MAP )
    00000496 6093                   MOV         R9,R0
    00000498 880D                   CMP/EQ      #13,R0
    0000049A 8B04                   BF          L124
             tskcmd.c       1036          {
             tskcmd.c       1037              if( GetDeviceStatus( mm2 ) == TRUE )    return;
    0000049C D319                   MOV.L       L1370+64,R3; __$GetDeviceStatus
    0000049E 430B                   JSR         @R3
    000004A0 64A3                   MOV         R10,R4
    000004A2 8801                   CMP/EQ      #1,R0
    000004A4 8902                   BT          L114
    000004A6              L124:
             tskcmd.c       1038          }
             tskcmd.c       1039          
             tskcmd.c       1040          QgProcList( mrcv );
    000004A6 D311                   MOV.L       L1370+40,R3; __$QgProcList
    000004A8 430B                   JSR         @R3
    000004AA 64D3                   MOV         R13,R4
    000004AC              L114:
    000004AC 7F44                   ADD         #68,R15
    000004AE 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1041      }
             tskcmd.c       1042    }
    000004B0 006B                   RTS/N
             tskcmd.c       1043    
             tskcmd.c       1044    /***********************************************************************
             tskcmd.c       1045    * 
             tskcmd.c       1046    * [概要]  拡張シリアル受信タスクからのメッセージ受信処理
             tskcmd.c       1047    * [引数]  メッセージデータ
             tskcmd.c       1048    * [戻値]  −
             tskcmd.c       1049    * 
             tskcmd.c       1050    ***********************************************************************/
             tskcmd.c       1051    static void RxExRcvMsg( T_CMD_MSG* mrcv )
    000004B2              __$RxExRcvMsg:                   ; function: __$RxExRcvMsg
                                                           ; frame size=0
             tskcmd.c       1052    {
             tskcmd.c       1053      if( mrcv->msgdata.prid1 < TP_ID_PROC_MAX )
    000004B2 36414018               MOV.B       @(24:12,R4),R6; (mrcv)->prid1
    000004B6 E270                   MOV         #112,R2    ; H'00000070
    000004B8 3622                   CMP/HS      R2,R6
    000004BA 8902                   BT          L127
             tskcmd.c       1054      {
             tskcmd.c       1055          TpAnalyze( mrcv );
    000004BC D316                   MOV.L       L1370+84,R3; _TpAnalyze
    000004BE 432B                   JMP         @R3
    000004C0 0009                   NOP
    000004C2              L127:
    000004C2 006B                   RTS/N
    000004C4              L1370:
    000004C4 <00000000>             .DATA.L     __$TpRspLGIN1
    000004C8 <00000000>             .DATA.L     __$BkP10
    000004CC <00000000>             .DATA.L     _eep_GetOptionInfo
    000004D0 <00000000>             .DATA.L     __$TpRspOPTIF
    000004D4 <00000000>             .DATA.L     __$BkPrData
    000004D8 <00000000>             .DATA.L     __$pProcDat
    000004DC <00000000>             .DATA.L     _eep_GetProtocolData
    000004E0 <00000000>             .DATA.L     __$pProcAdr
    000004E4 <00000000>             .DATA.L     _eep_GetProtocol
    000004E8 <00000000>             .DATA.L     __$StaQgProcList
    000004EC <00000000>             .DATA.L     __$QgProcList
    000004F0 <00000000>             .DATA.L     _STRTBL_MSG
    000004F4 <00000000>             .DATA.L     __$stCtl
    000004F8 <00000000>             .DATA.L     _memcpy
    000004FC <00000094>             .DATA.L     H'00000094+__$stCtl
    00000500 <00000000>             .DATA.L     __$ClrDevice
    00000504 <00000000>             .DATA.L     __$GetDeviceStatus
    00000508 <00000000>             .DATA.L     _motor_STATUS
    0000050C <00000000>             .DATA.L     _memset
    00000510 <00000000>             .DATA.L     _BitSet_INT
    00000514 <0000009C>             .DATA.L     H'0000009C+__$stCtl
    00000518 <00000000>             .DATA.L     _TpAnalyze
             tskcmd.c       1056      }
             tskcmd.c       1057      else
             tskcmd.c       1058      {
             tskcmd.c       1059          //Error
             tskcmd.c       1060      }
             tskcmd.c       1061    }
             tskcmd.c       1062    
             tskcmd.c       1063    /***********************************************************************
             tskcmd.c       1064    * 
             tskcmd.c       1065    * [概要]  
             tskcmd.c       1066    * [引数]  メッセージデータ
             tskcmd.c       1067    * [戻値]  −
             tskcmd.c       1068    * 
             tskcmd.c       1069    ***********************************************************************/
             tskcmd.c       1070    static void PunitRcvMsg( T_CMD_MSG* mrcv )
    0000051C              __$PunitRcvMsg:                  ; function: __$PunitRcvMsg
                                                           ; frame size=56
    0000051C 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1071    {
             tskcmd.c       1072      UB msg;
             tskcmd.c       1073      UB nzl;
             tskcmd.c       1074      UB smp;
             tskcmd.c       1075      unsigned char  result_h = CLR;
             tskcmd.c       1076      unsigned char  result_l = CLR;
             tskcmd.c       1077      ER result   = E_SUCCESS;
             tskcmd.c       1078      
             tskcmd.c       1079      msg  = mrcv->msgdata.msgid;
    0000051E 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
             tskcmd.c       1080      
             tskcmd.c       1081      switch( msg )
    00000522 8820                   CMP/EQ      #32,R0
    00000524 8D02                   BT/S        L142
    00000526 6E03                   MOV         R0,R14
    00000528 881F                   CMP/EQ      #31,R0
    0000052A 8B35                   BF          L143
    0000052C              L142:
             tskcmd.c       1082      {
             tskcmd.c       1083          case ID_MSG_PRESSTAN_HS :
             tskcmd.c       1084          case ID_MSG_PRESSREN_HS :
             tskcmd.c       1085              memcpy( &psns.now[0], &mrcv->msgdata.data[0], sizeof(ST_PSNS) );
    0000052C 7424                   ADD         #36,R4
    0000052E 6543                   MOV         R4,R5
    00000530 D49B                   MOV.L       L1371+2,R4 ; H'00000022+__$psns
    00000532 0600015A               MOVI20      #346,R6    ; H'0000015A
    00000536 D29B                   MOV.L       L1371+6,R2 ; _memcpy
    00000538 424B                   JSR/N       @R2
             tskcmd.c       1086    
             tskcmd.c       1087              // 応答メッセージ作成
             tskcmd.c       1088              CmdMakeResponsePsns( msg,                                           // message
             tskcmd.c       1089                                  STRTBL_MSG[msg],                                // コマンド文字列
             tskcmd.c       1090                                  result,                                         // 
             tskcmd.c       1091                                  psns.now[0],                                    // 
             tskcmd.c       1092                                  psns.now[1],                                    // 
             tskcmd.c       1093                                  psns.now[2],                                    // 
             tskcmd.c       1094                                  psns.now[3],                                    // 
             tskcmd.c       1095                                  psns.now[4],                                    // 
             tskcmd.c       1096                                  psns.now[5],                                    // 
             tskcmd.c       1097                                  psns.now[6],                                    // 
             tskcmd.c       1098                                  psns.now[7],                                    // 
             tskcmd.c       1099                                  psns.now[8],                                    // 
             tskcmd.c       1100                                  psns.now[9],                                    // 
             tskcmd.c       1101                                  psns.now[10],                                   // 
             tskcmd.c       1102                                  psns.now[11],                                   // 
             tskcmd.c       1103                                  psns.now[12]);                                  // 
    0000053A D599                   MOV.L       L1371+2,R5 ; H'00000022+__$psns
    0000053C 3051900C               MOVU.W      @(24,R5),R0; psns.now[]
    00000540 2F06                   MOV.L       R0,@-R15
    00000542 3051900B               MOVU.W      @(22,R5),R0; psns.now[]
    00000546 2F06                   MOV.L       R0,@-R15
    00000548 3051900A               MOVU.W      @(20,R5),R0; psns.now[]
    0000054C 2F06                   MOV.L       R0,@-R15
    0000054E 30519009               MOVU.W      @(18,R5),R0; psns.now[]
    00000552 2F06                   MOV.L       R0,@-R15
    00000554 30519008               MOVU.W      @(16,R5),R0; psns.now[]
    00000558 2F06                   MOV.L       R0,@-R15
    0000055A 30519007               MOVU.W      @(14,R5),R0; psns.now[]
    0000055E 2F06                   MOV.L       R0,@-R15
    00000560 30519006               MOVU.W      @(12,R5),R0; psns.now[]
    00000564 2F06                   MOV.L       R0,@-R15
    00000566 30519005               MOVU.W      @(10,R5),R0; psns.now[]
    0000056A 2F06                   MOV.L       R0,@-R15
    0000056C 30519004               MOVU.W      @(8,R5),R0 ; psns.now[]
    00000570 2F06                   MOV.L       R0,@-R15
    00000572 30519003               MOVU.W      @(6,R5),R0 ; psns.now[]
    00000576 2F06                   MOV.L       R0,@-R15
    00000578 30519002               MOVU.W      @(4,R5),R0 ; psns.now[]
    0000057C 2F06                   MOV.L       R0,@-R15
    0000057E 30519001               MOVU.W      @(2,R5),R0 ; psns.now[]
    00000582 2F06                   MOV.L       R0,@-R15
    00000584 60E3                   MOV         R14,R0
    00000586 D188                   MOV.L       L1371+10,R1; _STRTBL_MSG
    00000588 4008                   SHLL2       R0
    0000058A 6751                   MOV.W       @R5,R7     ; psns.now[]
    0000058C 051E                   MOV.L       @(R0,R1),R5; STRTBL_MSG[]
    0000058E E600                   MOV         #0,R6      ; H'00000000
    00000590 B168                   BSR         _CmdMakeResponsePsns
    00000592 64E3                   MOV         R14,R4
    00000594 A039                   BRA         L144
    00000596 7F30                   ADD         #48,R15
    00000598              L143:
    00000598 8822                   CMP/EQ      #34,R0
    0000059A 8905                   BT          L146
    0000059C 881D                   CMP/EQ      #29,R0
    0000059E 8903                   BT          L146
    000005A0 881E                   CMP/EQ      #30,R0
    000005A2 8901                   BT          L146
    000005A4 8821                   CMP/EQ      #33,R0
    000005A6 8B1C                   BF          L149
    000005A8              L146:
             tskcmd.c       1104              break;
             tskcmd.c       1105    //
             tskcmd.c       1106    // 本メッセージは、仕様上受信ないのでコメント
             tskcmd.c       1107    //        case ID_MSG_PRESSREN:
             tskcmd.c       1108    //        case ID_MSG_PRESSTAN:
             tskcmd.c       1109    // 
             tskcmd.c       1110    //            memcpy( &psns.now[0], &mrcv->msgdata.data[0], sizeof(ST_PSNS) );
             tskcmd.c       1111    // 
             tskcmd.c       1112    //            for( nzl = 0; nzl < NOZZLE_MAX ; nzl++ )
             tskcmd.c       1113    //            {
             tskcmd.c       1114    //                for( smp = 0; smp < (PRESSMP_MAX-1) ; smp++ )
             tskcmd.c       1115    //                {
             tskcmd.c       1116    //                    psns.dat[nzl][smp+1] = psns.dat[nzl][smp];
             tskcmd.c       1117    //                }
             tskcmd.c       1118    //                psns.dat[nzl][0] = psns.now[nzl];
             tskcmd.c       1119    //            }
             tskcmd.c       1120    //            QgProcList( mrcv );
             tskcmd.c       1121    // 
             tskcmd.c       1122    //            break;
             tskcmd.c       1123    //
             tskcmd.c       1124    
             tskcmd.c       1125    //        case ID_MSG_VALVEOUT_HS :
             tskcmd.c       1126    //            memcpy( &vout.target, &mrcv->msgdata.data[0],      sizeof(ST_VOUT) );
             tskcmd.c       1127    //            memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], sizeof(ST_VOUT) );
             tskcmd.c       1128    //            CmdSendResponse( &stCtl );
             tskcmd.c       1129    //            break;
             tskcmd.c       1130    
             tskcmd.c       1131    
             tskcmd.c       1132          case ID_MSG_VALVEOUT_HS :
             tskcmd.c       1133          case ID_MSG_VALVEINI_HS:
             tskcmd.c       1134          case ID_MSG_PRESSINI_HS:
             tskcmd.c       1135          case ID_MSG_PRESSCAN_HS:
             tskcmd.c       1136    //            memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], mrcv->msgdata.siz );
             tskcmd.c       1137              result_h = mrcv->msgdata.data[0];
             tskcmd.c       1138              result_l = mrcv->msgdata.data[1];
             tskcmd.c       1139              result = result_h * 0x0100 + result_l;
             tskcmd.c       1140          
             tskcmd.c       1141              // 応答メッセージ作成
             tskcmd.c       1142              CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c       1143                                  PARAM2,                                         // パラメータ数
             tskcmd.c       1144                                  STRTBL_MSG[msg],                                // コマンド文字列
             tskcmd.c       1145                                  result,                                         // エラーコード
             tskcmd.c       1146    
             tskcmd.c       1147                                  0,                                              // 
             tskcmd.c       1148                                  0,                                              // 
             tskcmd.c       1149                                  0,                                              // 
             tskcmd.c       1150                                  0,                                              // 
             tskcmd.c       1151                                  0,                                              // 
             tskcmd.c       1152    
             tskcmd.c       1153                                  0,                                              // 
             tskcmd.c       1154                                  0,                                              // 
             tskcmd.c       1155                                  0,                                              // 
             tskcmd.c       1156                                  0,                                              // 
             tskcmd.c       1157                                  0                                               // 
             tskcmd.c       1158                              );
    000005A8 E100                   MOV         #0,R1      ; H'00000000
    000005AA 2F16                   MOV.L       R1,@-R15
    000005AC 2F16                   MOV.L       R1,@-R15
    000005AE 2F16                   MOV.L       R1,@-R15
    000005B0 2F16                   MOV.L       R1,@-R15
    000005B2 2F16                   MOV.L       R1,@-R15
    000005B4 2F16                   MOV.L       R1,@-R15
    000005B6 2F16                   MOV.L       R1,@-R15
    000005B8 2F16                   MOV.L       R1,@-R15
    000005BA 2F16                   MOV.L       R1,@-R15
    000005BC 2F16                   MOV.L       R1,@-R15
    000005BE 4E08                   SHLL2       R14
    000005C0 37418024               MOVU.B      @(36,R4),R7; mrcv->data[]
    000005C4 32418025               MOVU.B      @(37,R4),R2; mrcv->data[]
    000005C8 4718                   SHLL8       R7
    000005CA E502                   MOV         #2,R5      ; H'00000002
    000005CC 372C                   ADD         R2,R7
    000005CE 60E3                   MOV         R14,R0
    000005D0 D275                   MOV.L       L1371+10,R2; _STRTBL_MSG
    000005D2 D476                   MOV.L       L1371+14,R4; __$stCtl
    000005D4 B1FA                   BSR         _CmdMakeResponse
    000005D6 062E                   MOV.L       @(R0,R2),R6; STRTBL_MSG[]
    000005D8 7F28                   ADD         #40,R15
             tskcmd.c       1159          // 応答メッセージ作成
             tskcmd.c       1160    //        CmdMakeResponse(    &msgdat,
             tskcmd.c       1161    //                            PARAM7,                                     // パラメータ数
             tskcmd.c       1162    //                            STRTBL_MSG[msg],                            // コマンド文字列
             tskcmd.c       1163    //                            result,                                     // エラーコード
             tskcmd.c       1164    //
             tskcmd.c       1165    //                            (INT)mm,                                    // モータ１番号
             tskcmd.c       1166    //                            sts.pos,                                    // パルスカウント１
             tskcmd.c       1167    //                            sts.enc,                                    // エンコーダ１
             tskcmd.c       1168    //                            sts.cw_limit,                               // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1169    //                            sts.ccw_limit,                              // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1170    //
             tskcmd.c       1171    //                            0,                                          // モータ２番号
             tskcmd.c       1172    //                            0,                                          // パルスカウント２
             tskcmd.c       1173    //                            0,                                          // エンコーダ２
             tskcmd.c       1174    //                            0,                                          // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1175    //                            0                                           // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1176    //                        );
             tskcmd.c       1177    
             tskcmd.c       1178          
             tskcmd.c       1179              CmdSendResponse( &stCtl );
    000005DA D474                   MOV.L       L1371+14,R4; __$stCtl
    000005DC 4EF4                   MOVMU.L     @R15+,R14
    000005DE A0BB                   BRA         _CmdSendResponse
    000005E0 0009                   NOP
    000005E2              L149:
    000005E2 E696                   MOV         #-106,R6   ; H'FFFFFF96
    000005E4 666C                   EXTU.B      R6,R6
    000005E6 3E60                   CMP/EQ      R6,R14
    000005E8 890B                   BT          L151
    000005EA E697                   MOV         #-105,R6   ; H'FFFFFF97
    000005EC 666C                   EXTU.B      R6,R6
    000005EE 3E60                   CMP/EQ      R6,R14
    000005F0 8907                   BT          L151
    000005F2 E69A                   MOV         #-102,R6   ; H'FFFFFF9A
    000005F4 666C                   EXTU.B      R6,R6
    000005F6 3E60                   CMP/EQ      R6,R14
    000005F8 8903                   BT          L151
    000005FA E69B                   MOV         #-101,R6   ; H'FFFFFF9B
    000005FC 666C                   EXTU.B      R6,R6
    000005FE 3E60                   CMP/EQ      R6,R14
    00000600 8B03                   BF          L144
    00000602              L151:
             tskcmd.c       1180              break;
             tskcmd.c       1181    
             tskcmd.c       1182    
             tskcmd.c       1183          case ID_MSG_VALVEINI:
             tskcmd.c       1184          case ID_MSG_PRESSINI:
             tskcmd.c       1185          case ID_MSG_PRESSCAN:
             tskcmd.c       1186          case ID_MSG_VALVEOUT:
             tskcmd.c       1187              QgProcList( mrcv );
    00000602 4EF4                   MOVMU.L     @R15+,R14
    00000604 D36A                   MOV.L       L1371+18,R3; __$QgProcList
    00000606 432B                   JMP         @R3
    00000608 0009                   NOP
    0000060A              L144:
    0000060A 4EF4                   MOVMU.L     @R15+,R14
    0000060C 006B                   RTS/N
             tskcmd.c       1188              break;
             tskcmd.c       1189    
             tskcmd.c       1190          default:
             tskcmd.c       1191              break;
             tskcmd.c       1192      }
             tskcmd.c       1193    }
             tskcmd.c       1194    /**********************************************************************
             tskcmd.c       1195    * 
             tskcmd.c       1196    * [概要]  
             tskcmd.c       1197    * [引数]  メッセージデータ
             tskcmd.c       1198    * [戻値]  −
             tskcmd.c       1199    * 
             tskcmd.c       1200    ***********************************************************************/
             tskcmd.c       1201    static void TmpCntRcvMsg( T_CMD_MSG* mrcv )
    0000060E              __$TmpCntRcvMsg:                 ; function: __$TmpCntRcvMsg
                                                           ; frame size=4
    0000060E 4F22                   STS.L       PR,@-R15
             tskcmd.c       1202    {
             tskcmd.c       1203      UB msg;
             tskcmd.c       1204    
             tskcmd.c       1205      msg  = mrcv->msgdata.msgid;
             tskcmd.c       1206      
             tskcmd.c       1207      switch( msg )
    00000610 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
    00000614 E59D                   MOV         #-99,R5    ; H'FFFFFF9D
    00000616 655C                   EXTU.B      R5,R5
    00000618 3050                   CMP/EQ      R5,R0
    0000061A 8907                   BT          L163
    0000061C E59E                   MOV         #-98,R5    ; H'FFFFFF9E
    0000061E 655C                   EXTU.B      R5,R5
    00000620 3050                   CMP/EQ      R5,R0
    00000622 8903                   BT          L163
    00000624 E59F                   MOV         #-97,R5    ; H'FFFFFF9F
    00000626 655C                   EXTU.B      R5,R5
    00000628 3050                   CMP/EQ      R5,R0
    0000062A 8B02                   BF          L165
    0000062C              L163:
             tskcmd.c       1208      {
             tskcmd.c       1209          case ID_MSG_TMPSET :
             tskcmd.c       1210          case ID_MSG_TMPGET :
             tskcmd.c       1211          case ID_MSG_TMPGETR :
             tskcmd.c       1212              QgProcList( mrcv );
    0000062C D360                   MOV.L       L1371+18,R3; __$QgProcList
    0000062E 432B                   JMP         @R3
    00000630 4F26                   LDS.L       @R15+,PR
    00000632              L165:
    00000632 881A                   CMP/EQ      #26,R0
    00000634 8901                   BT          L168
    00000636 881B                   CMP/EQ      #27,R0
    00000638 8B0A                   BF          L166
    0000063A              L168:
             tskcmd.c       1213              break;
             tskcmd.c       1214    
             tskcmd.c       1215          case ID_MSG_TMPSET_HS :
             tskcmd.c       1216          case ID_MSG_TMPGET_HS :
             tskcmd.c       1217    //            memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], stCtl.rsp.siz ); // レスポンスデータ取得
             tskcmd.c       1218              stCtl.rsp.siz = mrcv->msgdata.siz;
    0000063A 5648                   MOV.L       @(32,R4),R6; (mrcv)->siz
             tskcmd.c       1219              memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], mrcv->msgdata.siz ); // レスポンスデータ取得
    0000063C 7424                   ADD         #36,R4
    0000063E D15D                   MOV.L       L1371+22,R1; H'00000094+__$stCtl
    00000640 6543                   MOV         R4,R5
    00000642 D45D                   MOV.L       L1371+26,R4; H'0000009C+__$stCtl
    00000644 D257                   MOV.L       L1371+6,R2 ; _memcpy
    00000646 420B                   JSR         @R2
    00000648 2162                   MOV.L       R6,@R1     ; stCtl.rsp.siz
             tskcmd.c       1220              CmdSendResponse( &stCtl );                                          // 応答メッセージ送信
    0000064A D458                   MOV.L       L1371+14,R4; __$stCtl
    0000064C A084                   BRA         _CmdSendResponse
    0000064E 4F26                   LDS.L       @R15+,PR
    00000650              L166:
    00000650 4F26                   LDS.L       @R15+,PR
    00000652 006B                   RTS/N
             tskcmd.c       1221              break;
             tskcmd.c       1222    
             tskcmd.c       1223    
             tskcmd.c       1224          default:
             tskcmd.c       1225              break;
             tskcmd.c       1226      }
             tskcmd.c       1227    }
             tskcmd.c       1228    /***********************************************************************
             tskcmd.c       1229    * 
             tskcmd.c       1230    * [概要]  コマンドリクエスト受信監視用アラームハンドラ
             tskcmd.c       1231    * [引数]  
             tskcmd.c       1232    * [戻値]  −
             tskcmd.c       1233    * 
             tskcmd.c       1234    ***********************************************************************/
             tskcmd.c       1235    void AlmComR0Ack( VP_INT exinf )
    00000654              _AlmComR0Ack:                    ; function: AlmComR0Ack
                                                           ; frame size=8
    00000654 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1236    {
             tskcmd.c       1237       int save_i;
             tskcmd.c       1238      exinf = 0;
             tskcmd.c       1239    
             tskcmd.c       1240    #if 0// 2022.03.02
             tskcmd.c       1241      stp_alm( ID_ALM_R0ACK );                                                // 
             tskcmd.c       1242    #endif
             tskcmd.c       1243        // 割込み禁止処理
             tskcmd.c       1244        save_i = get_imask();
    00000656 0002                   STC         SR,R0
    00000658 4009                   SHLR2       R0
    0000065A 4009                   SHLR2       R0
    0000065C C90F                   AND         #15,R0
    0000065E 6E03                   MOV         R0,R14
             tskcmd.c       1245      set_imask(0x0f);
    00000660 0002                   STC         SR,R0
    00000662 07F0FF0F               MOVI20      #-241,R7   ; H'FFFFFF0F
    00000666 2079                   AND         R7,R0
    00000668 CBF0                   OR          #240,R0
    0000066A 400E                   LDC         R0,SR
             tskcmd.c       1246    
             tskcmd.c       1247      if( stCtl.rsp.rty > RTY_OVER ) 
    0000066C E203                   MOV         #3,R2      ; H'00000003
    0000066E D44F                   MOV.L       L1371+14,R4; __$stCtl
    00000670 36416026               MOV.L       @(152:12,R4),R6; stCtl.rsp.rty
    00000674 3627                   CMP/GT      R2,R6
    00000676 8B06                   BF          L171
    00000678 E647                   MOV         #71,R6     ; H'00000047
    0000067A E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1248      {
             tskcmd.c       1249          // リトライオーバー
             tskcmd.c       1250          
             tskcmd.c       1251          
             tskcmd.c       1252          // 制御データ初期化
             tskcmd.c       1253          memset( &stCtl,  CLR,  sizeof( stCtl ) );
    0000067C D24F                   MOV.L       L1371+30,R2; _memset
    0000067E 420B                   JSR         @R2
    00000680 4608                   SHLL2       R6
    00000682 A002                   BRA         L172
    00000684 0009                   NOP
    00000686              L171:
             tskcmd.c       1254      }
             tskcmd.c       1255      else
             tskcmd.c       1256      {
             tskcmd.c       1257          // 再送
             tskcmd.c       1258          CmdSendResponse( &stCtl );
    00000686 B067                   BSR         _CmdSendResponse
    00000688 0009                   NOP
    0000068A              L172:
             tskcmd.c       1259      }
             tskcmd.c       1260      set_imask(save_i);
    0000068A 60E3                   MOV         R14,R0
    0000068C C90F                   AND         #15,R0
    0000068E 4008                   SHLL2       R0
    00000690 4008                   SHLL2       R0
    00000692 0202                   STC         SR,R2
    00000694 07F0FF0F               MOVI20      #-241,R7   ; H'FFFFFF0F
    00000698 2279                   AND         R7,R2
    0000069A 220B                   OR          R0,R2
    0000069C 420E                   LDC         R2,SR
    0000069E 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1261    }
    000006A0 006B                   RTS/N
             tskcmd.c       1262    /***********************************************************************
             tskcmd.c       1263    * 
             tskcmd.c       1264    * [概要]  バーコードレスポンスタイムアウト
             tskcmd.c       1265    *           一定時間経過してもバーコードからレスポンスがない場合のタイム
             tskcmd.c       1266    *           アウト処理
             tskcmd.c       1267    * [引数]  
             tskcmd.c       1268    * [戻値]  −
             tskcmd.c       1269    * 
             tskcmd.c       1270    ***********************************************************************/
             tskcmd.c       1271    void AlmCom2RspTmo( VP_INT exinf )
    000006A2              _AlmCom2RspTmo:                  ; function: AlmCom2RspTmo
                                                           ; frame size=0
             tskcmd.c       1272    {
             tskcmd.c       1273    //    RelMpf( ID_MPF_CMD, (VP)msg );// メモリ解放
             tskcmd.c       1274    }
    000006A2 006B                   RTS/N
             tskcmd.c       1275    
             tskcmd.c       1276    /***********************************************************************
             tskcmd.c       1277    * 
             tskcmd.c       1278    * [概要]  コマンドの解析
             tskcmd.c       1279    * [引数]  data:コマンドリクエスト電文
             tskcmd.c       1280    * [戻値]  −
             tskcmd.c       1281    * 
             tskcmd.c       1282    ***********************************************************************/
             tskcmd.c       1283    static void CmdAnalyze( T_CMD_MSG* mrcv )
    000006A4              __$CmdAnalyze:                   ; function: __$CmdAnalyze
                                                           ; frame size=16
    000006A4 4CF0                   MOVMU.L     R12,@-R15
    000006A6 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       1284    {
             tskcmd.c       1285      UB          msgid;
             tskcmd.c       1286      UB          anum;
             tskcmd.c       1287    
             tskcmd.c       1288      // メッセージＩＤ取得
             tskcmd.c       1289      msgid = mrcv->msgdata.msgid;
    000006A8 6D43                   MOV         R4,R13
    000006AA 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
             tskcmd.c       1290      memset( &RecvData,    CLR,  sizeof( RecvData ) );
    000006AE D444                   MOV.L       L1371+34,R4; __$RecvData
    000006B0 D142                   MOV.L       L1371+30,R1; _memset
    000006B2 410B                   JSR         @R1
    000006B4 E500                   MOV         #0,R5      ; H'00000000
    000006B6 E664                   MOV         #100,R6    ; H'00000064
    000006B8 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1291      memset( &RecvArgs,    CLR,  sizeof( RecvArgs ) );
    000006BA DC42                   MOV.L       L1371+38,R12; __$RecvArgs
    000006BC 4608                   SHLL2       R6
    000006BE D73F                   MOV.L       L1371+30,R7; _memset
    000006C0 470B                   JSR         @R7
    000006C2 64C3                   MOV         R12,R4
             tskcmd.c       1292      
             tskcmd.c       1293      if(
    000006C4 60E3                   MOV         R14,R0
    000006C6 8824                   CMP/EQ      #36,R0
    000006C8 8918                   BT          L176
    000006CA 8825                   CMP/EQ      #37,R0
    000006CC 8916                   BT          L176
    000006CE 8826                   CMP/EQ      #38,R0
    000006D0 8914                   BT          L176
    000006D2 8827                   CMP/EQ      #39,R0
    000006D4 8912                   BT          L176
    000006D6 8828                   CMP/EQ      #40,R0
    000006D8 8910                   BT          L176
    000006DA 8829                   CMP/EQ      #41,R0
    000006DC 890E                   BT          L176
             tskcmd.c       1294          ( msgid == ID_MSG_IMPPDAT )||
             tskcmd.c       1295          ( msgid == ID_MSG_IMPSPED )||
             tskcmd.c       1296          ( msgid == ID_MSG_IMPPOSI )||
             tskcmd.c       1297          ( msgid == ID_MSG_IMPOPTN )||
             tskcmd.c       1298          ( msgid == ID_MSG_EXPRUNL )||
             tskcmd.c       1299          ( msgid == ID_MSG_EXPCOML )
             tskcmd.c       1300      )
             tskcmd.c       1301      {
             tskcmd.c       1302          // ImpExpRcvDataは、受信処理で既に大文字しているので不要。
             tskcmd.c       1303          anum = SplitOnly( &ImpExpRcvData[0], RecvArgs );
             tskcmd.c       1304      }
             tskcmd.c       1305      else
             tskcmd.c       1306      {
             tskcmd.c       1307          memcpy( &RecvData[0],     &mrcv->msgdata.data[0],CMD_BUFSIZ );      // コマンド電文コピー
    000006DE 65D3                   MOV         R13,R5
    000006E0 7524                   ADD         #36,R5
    000006E2 D437                   MOV.L       L1371+34,R4; __$RecvData
    000006E4 D12F                   MOV.L       L1371+6,R1 ; _memcpy
    000006E6 410B                   JSR         @R1
    000006E8 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       1308          ToUpper( (char*)&RecvData );                                        // 大文字
    000006EA D435                   MOV.L       L1371+34,R4; __$RecvData
    000006EC D636                   MOV.L       L1371+42,R6; _ToUpper
    000006EE 464B                   JSR/N       @R6
             tskcmd.c       1309          anum = Split( &RecvData[0], RecvArgs );                             // 分解 ＆ パラメータ数取得
    000006F0 D433                   MOV.L       L1371+34,R4; __$RecvData
    000006F2 D736                   MOV.L       L1371+46,R7; _Split
    000006F4 470B                   JSR         @R7
    000006F6 65C3                   MOV         R12,R5
    000006F8 A004                   BRA         L182
    000006FA 0009                   NOP
    000006FC              L176:
    000006FC D434                   MOV.L       L1371+50,R4; __$ImpExpRcvData
    000006FE D235                   MOV.L       L1371+54,R2; _SplitOnly
    00000700 420B                   JSR         @R2
    00000702 65C3                   MOV         R12,R5
    00000704              L182:
    00000704 D234                   MOV.L       L1371+58,R2; __$CmdFuncTbl
    00000706 4E08                   SHLL2       R14
             tskcmd.c       1310      }
             tskcmd.c       1311      
             tskcmd.c       1312      // コールファンクション
             tskcmd.c       1313      (*CmdFuncTbl[msgid])( mrcv, anum, RecvArgs  );
    00000708 6503                   MOV         R0,R5
    0000070A 60E3                   MOV         R14,R0
    0000070C 012E                   MOV.L       @(R0,R2),R1; CmdFuncTbl[]
    0000070E 66C3                   MOV         R12,R6
    00000710 64D3                   MOV         R13,R4
    00000712 4CF4                   MOVMU.L     @R15+,R12
    00000714 412B                   JMP         @R1
    00000716 0009                   NOP
             tskcmd.c       1314    }
             tskcmd.c       1315    
             tskcmd.c       1316    /***********************************************************************
             tskcmd.c       1317    * 
             tskcmd.c       1318    * [概要]  動作終了通知
             tskcmd.c       1319    * [引数]  −
             tskcmd.c       1320    * [戻値]  −
             tskcmd.c       1321    * 
             tskcmd.c       1322    ***********************************************************************/
             tskcmd.c       1323    void CmdEndResponse( ID txkid, UB prid1, UB bcid, UB msgid, UB inf1, UB inf2, ST_CNTLDATA* cntl )
    00000718              _CmdEndResponse:                 ; function: CmdEndResponse
                                                           ; frame size=36
    00000718 4DF0                   MOVMU.L     R13,@-R15
    0000071A 52F5                   MOV.L       @(20,R15),R2
             tskcmd.c       1324    {
             tskcmd.c       1325      mbx_send    (
             tskcmd.c       1326                      txkid,                                              // ﾀｽｸID
             tskcmd.c       1327                      ID_MPF_CMD,                                         // ﾌﾟｰﾙID
             tskcmd.c       1328                      ID_MBX_CMD,                                         // MBOXID
             tskcmd.c       1329                      prid1,                                              // PROCID
             tskcmd.c       1330                      bcid,                                               // BCID
             tskcmd.c       1331                      msgid,                                              // ﾒｯｾｰｼﾞID
             tskcmd.c       1332                      inf1,                                               // 情報1
             tskcmd.c       1333                      inf2,                                               // 情報2
             tskcmd.c       1334                      &cntl->rsp.buf[0],                                  // DATA
             tskcmd.c       1335                      cntl->rsp.siz                                       // DATAサイズ
             tskcmd.c       1336                  );
    0000071C 6E43                   MOV         R4,R14
    0000071E 6153                   MOV         R5,R1
    00000720 55F3                   MOV.L       @(12,R15),R5
    00000722 3D216025               MOV.L       @(148:12,R2),R13; (cntl)->siz
    00000726 6463                   MOV         R6,R4
    00000728 56F4                   MOV.L       @(16,R15),R6
    0000072A 2FD6                   MOV.L       R13,@-R15
    0000072C ED9C                   MOV         #-100,R13  ; H'FFFFFF9C
    0000072E 6DDC                   EXTU.B      R13,R13
    00000730 53F6                   MOV.L       @(24,R15),R3
    00000732 33DC                   ADD         R13,R3
    00000734 2F36                   MOV.L       R3,@-R15
    00000736 6D6C                   EXTU.B      R6,R13
    00000738 2FD6                   MOV.L       R13,@-R15
    0000073A 665C                   EXTU.B      R5,R6
    0000073C 2F66                   MOV.L       R6,@-R15
    0000073E 627C                   EXTU.B      R7,R2
    00000740 2F26                   MOV.L       R2,@-R15
    00000742 674C                   EXTU.B      R4,R7
    00000744 2F76                   MOV.L       R7,@-R15
    00000746 671C                   EXTU.B      R1,R7
    00000748 E605                   MOV         #5,R6      ; H'00000005
    0000074A E504                   MOV         #4,R5      ; H'00000004
    0000074C D123                   MOV.L       L1371+62,R1; _mbx_send
    0000074E 410B                   JSR         @R1
    00000750 64E3                   MOV         R14,R4
    00000752 7F18                   ADD         #24,R15
    00000754 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       1337    }
    00000756 006B                   RTS/N
             tskcmd.c       1338    /***********************************************************************
             tskcmd.c       1339    * 
             tskcmd.c       1340    * [概要]  コマンド応答の送信
             tskcmd.c       1341    * [引数]  −
             tskcmd.c       1342    * [戻値]  −
             tskcmd.c       1343    * 
             tskcmd.c       1344    ***********************************************************************/
             tskcmd.c       1345    void CmdSendResponse( ST_CNTLDATA* cntl )
    00000758              _CmdSendResponse:                ; function: CmdSendResponse
                                                           ; frame size=8
    00000758 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1346    {
             tskcmd.c       1347      // レスポンス送信
             tskcmd.c       1348      SendResponse( cntl );
    0000075A B007                   BSR         _SendResponse
    0000075C 6E43                   MOV         R4,R14
             tskcmd.c       1349      cntl->rsp.rty++;
    0000075E E098                   MOV         #-104,R0   ; H'FFFFFF98
    00000760 600C                   EXTU.B      R0,R0
    00000762 02EE                   MOV.L       @(R0,R14),R2; (cntl)->rty
    00000764 7201                   ADD         #1,R2
    00000766 0E26                   MOV.L       R2,@(R0,R14); (cntl)->rty
    00000768 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1350    }
    0000076A 006B                   RTS/N
             tskcmd.c       1351    /***********************************************************************
             tskcmd.c       1352    * 
             tskcmd.c       1353    * [概要]  レスポンス送信
             tskcmd.c       1354    * [引数]  −
             tskcmd.c       1355    * [戻値]  −
             tskcmd.c       1356    * 
             tskcmd.c       1357    ***********************************************************************/
             tskcmd.c       1358    void SendResponse( ST_CNTLDATA* cntl )
    0000076C              _SendResponse:                   ; function: SendResponse
                                                           ; frame size=28
    0000076C 4F22                   STS.L       PR,@-R15
             tskcmd.c       1359    {
             tskcmd.c       1360      //( ﾀｽｸID, ﾒﾓﾘﾌﾟｰﾙID, ﾒｯｾｰｼﾞBOXID,ﾒｯｾｰｼﾞID, 状態, DATA, DATAサイズ)
             tskcmd.c       1361      mbx_send    (
             tskcmd.c       1362                      ID_TSK_CMD,               // ID tskid,    ﾀｽｸID
             tskcmd.c       1363                      ID_MPF_TX0,               // ID mpfid,    ﾌﾟｰﾙID
             tskcmd.c       1364                      ID_MBX_TX0,               // ID mbxid,    MBOXID
             tskcmd.c       1365                      NO_DATA,                  // UB prid1,    PROCID
             tskcmd.c       1366                      NO_DATA,                  // UB bcid,     BCID
             tskcmd.c       1367                      ID_MSG_CMD,               // UB msgid,    ﾒｯｾｰｼﾞID
             tskcmd.c       1368                      0,                        // UB sts,      情報1
             tskcmd.c       1369                      0,                        // UB sts2,     情報2
             tskcmd.c       1370                      &cntl->rsp.buf[0],        // UB* data,    DATA
             tskcmd.c       1371                      cntl->rsp.siz             // INT siz      DATAサイズ
             tskcmd.c       1372                  );
    0000076E 31416025               MOV.L       @(148:12,R4),R1; (cntl)->siz
    00000772 2F16                   MOV.L       R1,@-R15
    00000774 E29C                   MOV         #-100,R2   ; H'FFFFFF9C
    00000776 622C                   EXTU.B      R2,R2
    00000778 342C                   ADD         R2,R4
    0000077A 2F46                   MOV.L       R4,@-R15
    0000077C E400                   MOV         #0,R4      ; H'00000000
    0000077E 2F46                   MOV.L       R4,@-R15
    00000780 2F46                   MOV.L       R4,@-R15
    00000782 E564                   MOV         #100,R5    ; H'00000064
    00000784 2F56                   MOV.L       R5,@-R15
    00000786 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00000788 611C                   EXTU.B      R1,R1
    0000078A 6713                   MOV         R1,R7
    0000078C 2F16                   MOV.L       R1,@-R15
    0000078E E602                   MOV         #2,R6      ; H'00000002
    00000790 E405                   MOV         #5,R4      ; H'00000005
    00000792 D212                   MOV.L       L1371+62,R2; _mbx_send
    00000794 420B                   JSR         @R2
    00000796 6563                   MOV         R6,R5
    00000798 7F18                   ADD         #24,R15
    0000079A 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1373    }
    0000079C 006B                   RTS/N
    0000079E              L1371:
    0000079E 00000002               .RES.W      1
    000007A0 <00000022>             .DATA.L     H'00000022+__$psns
    000007A4 <00000000>             .DATA.L     _memcpy
    000007A8 <00000000>             .DATA.L     _STRTBL_MSG
    000007AC <00000000>             .DATA.L     __$stCtl
    000007B0 <00000000>             .DATA.L     __$QgProcList
    000007B4 <00000094>             .DATA.L     H'00000094+__$stCtl
    000007B8 <0000009C>             .DATA.L     H'0000009C+__$stCtl
    000007BC <00000000>             .DATA.L     _memset
    000007C0 <00000000>             .DATA.L     __$RecvData
    000007C4 <00000000>             .DATA.L     __$RecvArgs
    000007C8 <00000000>             .DATA.L     _ToUpper
    000007CC <00000000>             .DATA.L     _Split
    000007D0 <00000000>             .DATA.L     __$ImpExpRcvData
    000007D4 <00000000>             .DATA.L     _SplitOnly
    000007D8 <00000000>             .DATA.L     __$CmdFuncTbl
    000007DC <00000000>             .DATA.L     _mbx_send
             tskcmd.c       1374    /***********************************************************************
             tskcmd.c       1375    * 
             tskcmd.c       1376    * [概要]  コマンド応答の送信
             tskcmd.c       1377    * [引数]  −
             tskcmd.c       1378    * [戻値]  −
             tskcmd.c       1379    * 
             tskcmd.c       1380    ***********************************************************************/
             tskcmd.c       1381    void CmdSendResponseEtc( ST_CNTLDATA* cntl, UB msgid )
    000007E0              _CmdSendResponseEtc:             ; function: CmdSendResponseEtc
                                                           ; frame size=32
    000007E0 4EF0                   MOVMU.L     R14,@-R15
    000007E2 31416025               MOV.L       @(148:12,R4),R1; (cntl)->siz
             tskcmd.c       1382    {
             tskcmd.c       1383      //( ﾀｽｸID, ﾒﾓﾘﾌﾟｰﾙID, ﾒｯｾｰｼﾞBOXID,ﾒｯｾｰｼﾞID, 状態, DATA, DATAサイズ)
             tskcmd.c       1384      mbx_send    (
             tskcmd.c       1385                      ID_TSK_CMD,               // ID tskid,    ﾀｽｸID
             tskcmd.c       1386                      ID_MPF_TX0,               // ID mpfid,    ﾌﾟｰﾙID
             tskcmd.c       1387                      ID_MBX_TX0,               // ID mbxid,    MBOXID
             tskcmd.c       1388                      NO_DATA,                  // UB prid1,    PROCID
             tskcmd.c       1389                      NO_DATA,                  // UB bcid,     BCID
             tskcmd.c       1390                      msgid,                    // UB msgid,    ﾒｯｾｰｼﾞID
             tskcmd.c       1391                      0,                        // UB sts,      情報1
             tskcmd.c       1392                      0,                        // UB sts2,     情報2
             tskcmd.c       1393                      &cntl->rsp.buf[0],        // UB* data,    DATA
             tskcmd.c       1394                      cntl->rsp.siz             // INT siz      DATAサイズ
             tskcmd.c       1395                  );
    000007E6 6E43                   MOV         R4,R14
    000007E8 2F16                   MOV.L       R1,@-R15
    000007EA E19C                   MOV         #-100,R1   ; H'FFFFFF9C
    000007EC 611C                   EXTU.B      R1,R1
    000007EE 341C                   ADD         R1,R4
    000007F0 2F46                   MOV.L       R4,@-R15
    000007F2 E400                   MOV         #0,R4      ; H'00000000
    000007F4 2F46                   MOV.L       R4,@-R15
    000007F6 2F46                   MOV.L       R4,@-R15
    000007F8 665C                   EXTU.B      R5,R6
    000007FA 2F66                   MOV.L       R6,@-R15
    000007FC E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    000007FE 611C                   EXTU.B      R1,R1
    00000800 6713                   MOV         R1,R7
    00000802 2F16                   MOV.L       R1,@-R15
    00000804 E602                   MOV         #2,R6      ; H'00000002
    00000806 E405                   MOV         #5,R4      ; H'00000005
    00000808 D266                   MOV.L       L1372,R2   ; _mbx_send
    0000080A 420B                   JSR         @R2
    0000080C 6563                   MOV         R6,R5
    0000080E 7F18                   ADD         #24,R15
             tskcmd.c       1396      
             tskcmd.c       1397      cntl->rsp.rty++;
    00000810 E098                   MOV         #-104,R0   ; H'FFFFFF98
    00000812 600C                   EXTU.B      R0,R0
    00000814 07EE                   MOV.L       @(R0,R14),R7; (cntl)->rty
    00000816 7701                   ADD         #1,R7
    00000818 0E76                   MOV.L       R7,@(R0,R14); (cntl)->rty
    0000081A 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1398    }
    0000081C 006B                   RTS/N
             tskcmd.c       1399    
             tskcmd.c       1400    /***********************************************************************
             tskcmd.c       1401    * 
             tskcmd.c       1402    * [概要]  コマンド応答の送信
             tskcmd.c       1403    * [引数]  −
             tskcmd.c       1404    * [戻値]  −
             tskcmd.c       1405    * 
             tskcmd.c       1406    ***********************************************************************/
             tskcmd.c       1407    void CmdSendResponse2( ST_CNTLDATA* cntl )
    0000081E              _CmdSendResponse2:               ; function: CmdSendResponse2
                                                           ; frame size=8
    0000081E 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1408    {
             tskcmd.c       1409      // レスポンス送信
             tskcmd.c       1410      SendResponse2( cntl );
    00000820 B007                   BSR         _SendResponse2
    00000822 6E43                   MOV         R4,R14
             tskcmd.c       1411      cntl->rsp.rty++;
    00000824 E098                   MOV         #-104,R0   ; H'FFFFFF98
    00000826 600C                   EXTU.B      R0,R0
    00000828 02EE                   MOV.L       @(R0,R14),R2; (cntl)->rty
    0000082A 7201                   ADD         #1,R2
    0000082C 0E26                   MOV.L       R2,@(R0,R14); (cntl)->rty
    0000082E 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1412    }
    00000830 006B                   RTS/N
             tskcmd.c       1413    /***********************************************************************
             tskcmd.c       1414    * 
             tskcmd.c       1415    * [概要]  レスポンス送信
             tskcmd.c       1416    * [引数]  −
             tskcmd.c       1417    * [戻値]  −
             tskcmd.c       1418    * 
             tskcmd.c       1419    ***********************************************************************/
             tskcmd.c       1420    void SendResponse2( ST_CNTLDATA* cntl )
    00000832              _SendResponse2:                  ; function: SendResponse2
                                                           ; frame size=28
    00000832 4F22                   STS.L       PR,@-R15
             tskcmd.c       1421    {
             tskcmd.c       1422      //( ﾀｽｸID, ﾒﾓﾘﾌﾟｰﾙID, ﾒｯｾｰｼﾞBOXID,ﾒｯｾｰｼﾞID, 状態, DATA, DATAサイズ)
             tskcmd.c       1423      mbx_send    (
             tskcmd.c       1424                      ID_TSK_CMD,
             tskcmd.c       1425                      ID_MPF_TXEX,
             tskcmd.c       1426                      ID_MBX_TXEX,
             tskcmd.c       1427                      NO_DATA,
             tskcmd.c       1428                      NO_DATA,
             tskcmd.c       1429                      ID_MSG_CMD,
             tskcmd.c       1430                      0,
             tskcmd.c       1431                      0,
             tskcmd.c       1432                      &cntl->rsp.buf[0],
             tskcmd.c       1433                      cntl->rsp.siz
             tskcmd.c       1434                  );
    00000834 31416025               MOV.L       @(148:12,R4),R1; (cntl)->siz
    00000838 2F16                   MOV.L       R1,@-R15
    0000083A E29C                   MOV         #-100,R2   ; H'FFFFFF9C
    0000083C 622C                   EXTU.B      R2,R2
    0000083E 342C                   ADD         R2,R4
    00000840 2F46                   MOV.L       R4,@-R15
    00000842 E400                   MOV         #0,R4      ; H'00000000
    00000844 2F46                   MOV.L       R4,@-R15
    00000846 2F46                   MOV.L       R4,@-R15
    00000848 E564                   MOV         #100,R5    ; H'00000064
    0000084A 2F56                   MOV.L       R5,@-R15
    0000084C E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    0000084E 611C                   EXTU.B      R1,R1
    00000850 6713                   MOV         R1,R7
    00000852 2F16                   MOV.L       R1,@-R15
    00000854 E604                   MOV         #4,R6      ; H'00000004
    00000856 E503                   MOV         #3,R5      ; H'00000003
    00000858 D252                   MOV.L       L1372,R2   ; _mbx_send
    0000085A 420B                   JSR         @R2
    0000085C E405                   MOV         #5,R4      ; H'00000005
    0000085E 7F18                   ADD         #24,R15
    00000860 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1435    }
    00000862 006B                   RTS/N
             tskcmd.c       1436    
             tskcmd.c       1437    /***********************************************************************
             tskcmd.c       1438    * 
             tskcmd.c       1439    * [概要]  応答データ作成
             tskcmd.c       1440    * [引数]  
             tskcmd.c       1441    * [戻値]  −
             tskcmd.c       1442    * 
             tskcmd.c       1443    ***********************************************************************/
             tskcmd.c       1444    void CmdMakeResponsePsns( UB msgid,
    00000864              _CmdMakeResponsePsns:            ; function: CmdMakeResponsePsns
                                                           ; frame size=124
    00000864 48F0                   MOVMU.L     R8,@-R15
    00000866 7FE4                   ADD         #-28,R15
    00000868 3EF16012               MOV.L       @(72:12,R15),R14
    0000086C 5BFF                   MOV.L       @(60,R15),R11
    0000086E 3CF16010               MOV.L       @(64:12,R15),R12
    00000872 3DF16011               MOV.L       @(68:12,R15),R13
    00000876 38F16013               MOV.L       @(76:12,R15),R8
             tskcmd.c       1445                          const char* cmdchr,
             tskcmd.c       1446                          INT result,
             tskcmd.c       1447                          unsigned short d1,
             tskcmd.c       1448                          unsigned short d2,
             tskcmd.c       1449                          unsigned short d3,
             tskcmd.c       1450                          unsigned short d4,
             tskcmd.c       1451                          unsigned short d5,
             tskcmd.c       1452                          unsigned short d6,
             tskcmd.c       1453                          unsigned short d7,
             tskcmd.c       1454                          unsigned short d8,
             tskcmd.c       1455                          unsigned short d9,
             tskcmd.c       1456                          unsigned short d10,
             tskcmd.c       1457                          unsigned short d11,
             tskcmd.c       1458                          unsigned short d12,
             tskcmd.c       1459                          unsigned short d13 )
             tskcmd.c       1460    {
             tskcmd.c       1461      INT  len;
             tskcmd.c       1462      UB bcc;
             tskcmd.c       1463      UB bcch;
             tskcmd.c       1464      UB bccl;
             tskcmd.c       1465      UB dmyadr ;
             tskcmd.c       1466    
             tskcmd.c       1467      memset( &rspbuf2,  CLR,  sizeof( rspbuf2 ) );
    0000087A 1F64                   MOV.L       R6,@(16,R15); result
    0000087C E680                   MOV         #-128,R6   ; H'FFFFFF80
    0000087E 3FE11025               MOV.W       R14,@(74:12,R15)
    00000882 666C                   EXTU.B      R6,R6
    00000884 3EF1601A               MOV.L       @(104:12,R15),R14
    00000888 1F53                   MOV.L       R5,@(12,R15); cmdchr
    0000088A 3FB1101F               MOV.W       R11,@(62:12,R15)
    0000088E 3FC11021               MOV.W       R12,@(66:12,R15)
    00000892 3FD11023               MOV.W       R13,@(70:12,R15)
    00000896 3F811027               MOV.W       R8,@(78:12,R15)
    0000089A 3DF16019               MOV.L       @(100:12,R15),R13
    0000089E 3F410017               MOV.B       R4,@(23:12,R15); msgid
    000008A2 3F71100D               MOV.W       R7,@(26:12,R15); d1
    000008A6 38F16014               MOV.L       @(80:12,R15),R8
    000008AA 39F16015               MOV.L       @(84:12,R15),R9
    000008AE 3AF16016               MOV.L       @(88:12,R15),R10
    000008B2 3BF16017               MOV.L       @(92:12,R15),R11
    000008B6 3CF16018               MOV.L       @(96:12,R15),R12
    000008BA D43B                   MOV.L       L1372+4,R4 ; __$rspbuf2
    000008BC D13B                   MOV.L       L1372+8,R1 ; _memset
    000008BE 410B                   JSR         @R1
    000008C0 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1468      
             tskcmd.c       1469                  //    1   2  D01 D02 D03 D04 D05 D06 D07 D08 D09 D10 D11 D12 D13
             tskcmd.c       1470      sprintf(rspbuf2, "%s,%04X,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d" ,cmdchr,result,d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13);
    000008C2 64ED                   EXTU.W      R14,R4
    000008C4 2F46                   MOV.L       R4,@-R15
    000008C6 65DD                   EXTU.W      R13,R5
    000008C8 2F56                   MOV.L       R5,@-R15
    000008CA 66CD                   EXTU.W      R12,R6
    000008CC 2F66                   MOV.L       R6,@-R15
    000008CE 67BD                   EXTU.W      R11,R7
    000008D0 2F76                   MOV.L       R7,@-R15
    000008D2 6BAD                   EXTU.W      R10,R11
    000008D4 2FB6                   MOV.L       R11,@-R15
    000008D6 6C9D                   EXTU.W      R9,R12
    000008D8 2FC6                   MOV.L       R12,@-R15
    000008DA 6D8D                   EXTU.W      R8,R13
    000008DC 2FD6                   MOV.L       R13,@-R15
    000008DE 39F15035               MOV.W       @(106:12,R15),R9
    000008E2 6E9D                   EXTU.W      R9,R14
    000008E4 2FE6                   MOV.L       R14,@-R15
    000008E6 32F15035               MOV.W       @(106:12,R15),R2
    000008EA 612D                   EXTU.W      R2,R1
    000008EC 2F16                   MOV.L       R1,@-R15
    000008EE 38F15035               MOV.W       @(106:12,R15),R8
    000008F2 648D                   EXTU.W      R8,R4
    000008F4 2F46                   MOV.L       R4,@-R15
    000008F6 39F15035               MOV.W       @(106:12,R15),R9
    000008FA 659D                   EXTU.W      R9,R5
    000008FC 2F56                   MOV.L       R5,@-R15
    000008FE 3AF15035               MOV.W       @(106:12,R15),R10
    00000902 66AD                   EXTU.W      R10,R6
    00000904 2F66                   MOV.L       R6,@-R15
    00000906 31F19025               MOVU.W      @(74,R15),R1; d1
    0000090A 2F16                   MOV.L       R1,@-R15
    0000090C 7FFC                   ADD         #-4,R15
    0000090E E048                   MOV         #72,R0     ; H'00000048
    00000910 03FE                   MOV.L       @(R0,R15),R3; result
    00000912 2F32                   MOV.L       R3,@R15
    00000914 7FFC                   ADD         #-4,R15
    00000916 03FE                   MOV.L       @(R0,R15),R3; cmdchr
    00000918 D725                   MOV.L       L1372+12,R7; L1489
    0000091A 2F32                   MOV.L       R3,@R15
    0000091C D422                   MOV.L       L1372+4,R4 ; __$rspbuf2
    0000091E D825                   MOV.L       L1372+16,R8; _sprintf
    00000920 480B                   JSR         @R8
    00000922 2F76                   MOV.L       R7,@-R15
    00000924 7F40                   ADD         #64,R15
             tskcmd.c       1471    
             tskcmd.c       1472      len = strlen(&rspbuf2);
             tskcmd.c       1473      psnsdat[0] = STX;                           // STX
    00000926 DC24                   MOV.L       L1372+20,R12; __$psnsdat
    00000928 D41F                   MOV.L       L1372+4,R4 ; __$rspbuf2
    0000092A D924                   MOV.L       L1372+24,R9; _strlen
    0000092C 490B                   JSR         @R9
    0000092E EA02                   MOV         #2,R10     ; H'00000002
    00000930 2CA0                   MOV.B       R10,@R12   ; psnsdat[]
             tskcmd.c       1474      memcpy( &psnsdat[1], &rspbuf2, len );       // コマンド〜データまでコピー
    00000932 64C3                   MOV         R12,R4
    00000934 7401                   ADD         #1,R4
    00000936 6D03                   MOV         R0,R13
    00000938 D51B                   MOV.L       L1372+4,R5 ; __$rspbuf2
    0000093A 66D3                   MOV         R13,R6
             tskcmd.c       1475      psnsdat[(len+1)] = ETX;                 // ETX
             tskcmd.c       1476    
             tskcmd.c       1477      // BCC計算
             tskcmd.c       1478      bcc = CalcBCC( (UB*)&psnsdat[1], (len+1));
             tskcmd.c       1479    
             tskcmd.c       1480      // 10進数→16進数→ASC変換
             tskcmd.c       1481      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1482    
             tskcmd.c       1483      psnsdat[(len+2)] = bcch;                    // BCC1
             tskcmd.c       1484      psnsdat[(len+3)] = bccl;                    // BCC2
             tskcmd.c       1485      
             tskcmd.c       1486      
             tskcmd.c       1487      mbx_send    (
             tskcmd.c       1488                  ID_TSK_CMD,               // ID tskid,    ﾀｽｸID
             tskcmd.c       1489                  ID_MPF_TX0,               // ID mpfid,    ﾌﾟｰﾙID
             tskcmd.c       1490                  ID_MBX_TX0,               // ID mbxid,    MBOXID
             tskcmd.c       1491                  NO_DATA,                  // UB prid1,    PROCID
             tskcmd.c       1492                  NO_DATA,                  // UB bcid,     BCID
             tskcmd.c       1493                  msgid,               // UB msgid,    ﾒｯｾｰｼﾞID
             tskcmd.c       1494                  0,                        // UB sts,      情報1
             tskcmd.c       1495                  0,                        // UB sts2,     情報2
             tskcmd.c       1496                  &dmyadr,                  // UB* data,    DATA
             tskcmd.c       1497                  1                         // INT siz      DATAサイズ
             tskcmd.c       1498              );
    0000093C DB20                   MOV.L       L1372+28,R11; _memcpy
    0000093E 4B0B                   JSR         @R11
    00000940 E901                   MOV         #1,R9      ; H'00000001
    00000942 6EC3                   MOV         R12,R14
    00000944 7E01                   ADD         #1,R14
    00000946 E203                   MOV         #3,R2      ; H'00000003
    00000948 60D3                   MOV         R13,R0
    0000094A 0E24                   MOV.B       R2,@(R0,R14); psnsdat[]
    0000094C 65D3                   MOV         R13,R5
    0000094E 7501                   ADD         #1,R5
    00000950 64C3                   MOV         R12,R4
    00000952 7401                   ADD         #1,R4
    00000954 D11B                   MOV.L       L1372+32,R1; _CalcBCC
    00000956 410B                   JSR         @R1
    00000958 68C3                   MOV         R12,R8
    0000095A 65F3                   MOV         R15,R5
    0000095C 7504                   ADD         #4,R5
    0000095E 6403                   MOV         R0,R4
    00000960 7802                   ADD         #2,R8
    00000962 66F3                   MOV         R15,R6
    00000964 D718                   MOV.L       L1372+36,R7; _DectoHexASC
    00000966 470B                   JSR         @R7
    00000968 7C03                   ADD         #3,R12
    0000096A 35F14004               MOV.B       @(4:12,R15),R5; bcch
    0000096E 37F14000               MOV.B       @(0:12,R15),R7; bccl
    00000972 60D3                   MOV         R13,R0
    00000974 0854                   MOV.B       R5,@(R0,R8); psnsdat[]
    00000976 0C74                   MOV.B       R7,@(R0,R12); psnsdat[]
    00000978 2F96                   MOV.L       R9,@-R15
    0000097A 6AF3                   MOV         R15,R10
    0000097C 7A0C                   ADD         #12,R10
    0000097E 2FA6                   MOV.L       R10,@-R15
    00000980 E200                   MOV         #0,R2      ; H'00000000
    00000982 2F26                   MOV.L       R2,@-R15
    00000984 2F26                   MOV.L       R2,@-R15
    00000986 33F18027               MOVU.B      @(39,R15),R3; msgid
    0000098A 2F36                   MOV.L       R3,@-R15
    0000098C E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    0000098E 622C                   EXTU.B      R2,R2
    00000990 6723                   MOV         R2,R7
    00000992 2F26                   MOV.L       R2,@-R15
    00000994 E602                   MOV         #2,R6      ; H'00000002
    00000996 E405                   MOV         #5,R4      ; H'00000005
    00000998 D202                   MOV.L       L1372,R2   ; _mbx_send
    0000099A 420B                   JSR         @R2
    0000099C 6563                   MOV         R6,R5
    0000099E 7F34                   ADD         #52,R15
    000009A0 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       1499    }
    000009A2 006B                   RTS/N
    000009A4              L1372:
    000009A4 <00000000>             .DATA.L     _mbx_send
    000009A8 <00000000>             .DATA.L     __$rspbuf2
    000009AC <00000000>             .DATA.L     _memset
    000009B0 <00000000>             .DATA.L     L1489
    000009B4 <00000000>             .DATA.L     _sprintf
    000009B8 <00000000>             .DATA.L     __$psnsdat
    000009BC <00000000>             .DATA.L     _strlen
    000009C0 <00000000>             .DATA.L     _memcpy
    000009C4 <00000000>             .DATA.L     _CalcBCC
    000009C8 <00000000>             .DATA.L     _DectoHexASC
             tskcmd.c       1500    /***********************************************************************
             tskcmd.c       1501    * 
             tskcmd.c       1502    * [概要]  応答データ作成
             tskcmd.c       1503    * [引数]  
             tskcmd.c       1504    * [戻値]  −
             tskcmd.c       1505    * 
             tskcmd.c       1506    ***********************************************************************/
             tskcmd.c       1507    void CmdMakeResponse( ST_CNTLDATA* cntl,
    000009CC              _CmdMakeResponse:                ; function: CmdMakeResponse
                                                           ; frame size=88
    000009CC 49F0                   MOVMU.L     R9,@-R15
    000009CE 7FF8                   ADD         #-8,R15
    000009D0 6B63                   MOV         R6,R11
    000009D2 E63C                   MOV         #60,R6     ; H'0000003C
    000009D4 6E53                   MOV         R5,R14
    000009D6 E500                   MOV         #0,R5      ; H'00000000
    000009D8 D9BE                   MOV.L       L1374+2,R9 ; __$rspbuf
             tskcmd.c       1508                          UB anum,
             tskcmd.c       1509                          const char* p1,
             tskcmd.c       1510                          INT p2,
             tskcmd.c       1511                          INT p3,
             tskcmd.c       1512                          INT p4,
             tskcmd.c       1513                          INT p5,
             tskcmd.c       1514                          INT p6,
             tskcmd.c       1515                          INT p7,
             tskcmd.c       1516                          INT p8,
             tskcmd.c       1517                          INT p9,
             tskcmd.c       1518                          INT p10,
             tskcmd.c       1519                          INT p11,
             tskcmd.c       1520                          INT p12 )
             tskcmd.c       1521    {
             tskcmd.c       1522      INT  len;
             tskcmd.c       1523      UB bcc;
             tskcmd.c       1524      UB bcch;
             tskcmd.c       1525      UB bccl;
             tskcmd.c       1526    
             tskcmd.c       1527      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    000009DA 6C73                   MOV         R7,R12
    000009DC 6A43                   MOV         R4,R10
    000009DE D1BE                   MOV.L       L1374+6,R1 ; _memset
    000009E0 410B                   JSR         @R1
    000009E2 6493                   MOV         R9,R4
             tskcmd.c       1528    
             tskcmd.c       1529      if(( anum < PARAM1 )||( anum > PARAM12 ))   return;
    000009E4 6DEC                   EXTU.B      R14,R13
    000009E6 E201                   MOV         #1,R2      ; H'00000001
    000009E8 3D23                   CMP/GE      R2,R13
    000009EA 8901                   BT          L1405
    000009EC A1A7                   BRA         L192
    000009EE 0009                   NOP
    000009F0              L1405:
    000009F0 E20C                   MOV         #12,R2     ; H'0000000C
    000009F2 3D27                   CMP/GT      R2,R13
    000009F4 8B01                   BF          L1406
    000009F6 A1A2                   BRA         L192
    000009F8 0009                   NOP
    000009FA              L1406:
             tskcmd.c       1530                                               //  1   2   3   4   5   6   7   8   9   10  11  12
             tskcmd.c       1531      if( anum == PARAM12)        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d" , p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    000009FA 60D3                   MOV         R13,R0
    000009FC 880C                   CMP/EQ      #12,R0
    000009FE 8B2F                   BF          L195
    00000A00 7FFC                   ADD         #-4,R15
    00000A02 34F16013               MOV.L       @(76:12,R15),R4
    00000A06 2F42                   MOV.L       R4,@R15
    00000A08 7FFC                   ADD         #-4,R15
    00000A0A 35F16013               MOV.L       @(76:12,R15),R5
    00000A0E 2F52                   MOV.L       R5,@R15
    00000A10 7FFC                   ADD         #-4,R15
    00000A12 36F16013               MOV.L       @(76:12,R15),R6
    00000A16 2F62                   MOV.L       R6,@R15
    00000A18 7FFC                   ADD         #-4,R15
    00000A1A 37F16013               MOV.L       @(76:12,R15),R7
    00000A1E 2F72                   MOV.L       R7,@R15
    00000A20 7FFC                   ADD         #-4,R15
    00000A22 3EF16013               MOV.L       @(76:12,R15),R14
    00000A26 2FE2                   MOV.L       R14,@R15
    00000A28 7FFC                   ADD         #-4,R15
    00000A2A 31F16013               MOV.L       @(76:12,R15),R1
    00000A2E 2F12                   MOV.L       R1,@R15
    00000A30 7FFC                   ADD         #-4,R15
    00000A32 34F16013               MOV.L       @(76:12,R15),R4
    00000A36 2F42                   MOV.L       R4,@R15
    00000A38 7FFC                   ADD         #-4,R15
    00000A3A 35F16013               MOV.L       @(76:12,R15),R5
    00000A3E 2F52                   MOV.L       R5,@R15
    00000A40 7FFC                   ADD         #-4,R15
    00000A42 36F16013               MOV.L       @(76:12,R15),R6
    00000A46 2F62                   MOV.L       R6,@R15
    00000A48 7FFC                   ADD         #-4,R15
    00000A4A 37F16013               MOV.L       @(76:12,R15),R7
    00000A4E 2F72                   MOV.L       R7,@R15
    00000A50 2FC6                   MOV.L       R12,@-R15
    00000A52 2FB6                   MOV.L       R11,@-R15
    00000A54 DEA1                   MOV.L       L1374+10,R14; L1492
    00000A56 2FE6                   MOV.L       R14,@-R15
    00000A58 D2A1                   MOV.L       L1374+14,R2; _sprintf
    00000A5A 420B                   JSR         @R2
    00000A5C 6493                   MOV         R9,R4
    00000A5E 7F34                   ADD         #52,R15
    00000A60              L195:
             tskcmd.c       1532      if( anum == PARAM11)        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"     , p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    00000A60 60D3                   MOV         R13,R0
    00000A62 880B                   CMP/EQ      #11,R0
    00000A64 8B2B                   BF          L197
    00000A66 7FFC                   ADD         #-4,R15
    00000A68 31F16012               MOV.L       @(72:12,R15),R1
    00000A6C 2F12                   MOV.L       R1,@R15
    00000A6E 7FFC                   ADD         #-4,R15
    00000A70 34F16012               MOV.L       @(72:12,R15),R4
    00000A74 2F42                   MOV.L       R4,@R15
    00000A76 7FFC                   ADD         #-4,R15
    00000A78 35F16012               MOV.L       @(72:12,R15),R5
    00000A7C 2F52                   MOV.L       R5,@R15
    00000A7E 7FFC                   ADD         #-4,R15
    00000A80 36F16012               MOV.L       @(72:12,R15),R6
    00000A84 2F62                   MOV.L       R6,@R15
    00000A86 7FFC                   ADD         #-4,R15
    00000A88 37F16012               MOV.L       @(72:12,R15),R7
    00000A8C 2F72                   MOV.L       R7,@R15
    00000A8E 7FFC                   ADD         #-4,R15
    00000A90 3EF16012               MOV.L       @(72:12,R15),R14
    00000A94 2FE2                   MOV.L       R14,@R15
    00000A96 7FFC                   ADD         #-4,R15
    00000A98 31F16012               MOV.L       @(72:12,R15),R1
    00000A9C 2F12                   MOV.L       R1,@R15
    00000A9E 7FFC                   ADD         #-4,R15
    00000AA0 34F16012               MOV.L       @(72:12,R15),R4
    00000AA4 2F42                   MOV.L       R4,@R15
    00000AA6 7FFC                   ADD         #-4,R15
    00000AA8 35F16012               MOV.L       @(72:12,R15),R5
    00000AAC 2F52                   MOV.L       R5,@R15
    00000AAE 2FC6                   MOV.L       R12,@-R15
    00000AB0 2FB6                   MOV.L       R11,@-R15
    00000AB2 D68C                   MOV.L       L1374+18,R6; L1493
    00000AB4 2F66                   MOV.L       R6,@-R15
    00000AB6 D28A                   MOV.L       L1374+14,R2; _sprintf
    00000AB8 420B                   JSR         @R2
    00000ABA 6493                   MOV         R9,R4
    00000ABC 7F30                   ADD         #48,R15
    00000ABE              L197:
             tskcmd.c       1533      if( anum == PARAM10)        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"         , p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    00000ABE 60D3                   MOV         R13,R0
    00000AC0 880A                   CMP/EQ      #10,R0
    00000AC2 8B27                   BF          L199
    00000AC4 7FFC                   ADD         #-4,R15
    00000AC6 37F16011               MOV.L       @(68:12,R15),R7
    00000ACA 2F72                   MOV.L       R7,@R15
    00000ACC 7FFC                   ADD         #-4,R15
    00000ACE 3EF16011               MOV.L       @(68:12,R15),R14
    00000AD2 2FE2                   MOV.L       R14,@R15
    00000AD4 7FFC                   ADD         #-4,R15
    00000AD6 31F16011               MOV.L       @(68:12,R15),R1
    00000ADA 2F12                   MOV.L       R1,@R15
    00000ADC 7FFC                   ADD         #-4,R15
    00000ADE 34F16011               MOV.L       @(68:12,R15),R4
    00000AE2 2F42                   MOV.L       R4,@R15
    00000AE4 7FFC                   ADD         #-4,R15
    00000AE6 35F16011               MOV.L       @(68:12,R15),R5
    00000AEA 2F52                   MOV.L       R5,@R15
    00000AEC 7FFC                   ADD         #-4,R15
    00000AEE 36F16011               MOV.L       @(68:12,R15),R6
    00000AF2 2F62                   MOV.L       R6,@R15
    00000AF4 7FFC                   ADD         #-4,R15
    00000AF6 37F16011               MOV.L       @(68:12,R15),R7
    00000AFA 2F72                   MOV.L       R7,@R15
    00000AFC 7FFC                   ADD         #-4,R15
    00000AFE 3EF16011               MOV.L       @(68:12,R15),R14
    00000B02 2FE2                   MOV.L       R14,@R15
    00000B04 2FC6                   MOV.L       R12,@-R15
    00000B06 2FB6                   MOV.L       R11,@-R15
    00000B08 D177                   MOV.L       L1374+22,R1; L1494
    00000B0A 2F16                   MOV.L       R1,@-R15
    00000B0C D274                   MOV.L       L1374+14,R2; _sprintf
    00000B0E 420B                   JSR         @R2
    00000B10 6493                   MOV         R9,R4
    00000B12 7F2C                   ADD         #44,R15
    00000B14              L199:
             tskcmd.c       1534      if( anum == PARAM9 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d"             , p1, p2, p3, p4, p5, p6, p7, p8, p9);
    00000B14 60D3                   MOV         R13,R0
    00000B16 8809                   CMP/EQ      #9,R0
    00000B18 8B23                   BF          L201
    00000B1A 7FFC                   ADD         #-4,R15
    00000B1C 34F16010               MOV.L       @(64:12,R15),R4
    00000B20 2F42                   MOV.L       R4,@R15
    00000B22 7FFC                   ADD         #-4,R15
    00000B24 35F16010               MOV.L       @(64:12,R15),R5
    00000B28 2F52                   MOV.L       R5,@R15
    00000B2A 7FFC                   ADD         #-4,R15
    00000B2C 36F16010               MOV.L       @(64:12,R15),R6
    00000B30 2F62                   MOV.L       R6,@R15
    00000B32 7FFC                   ADD         #-4,R15
    00000B34 37F16010               MOV.L       @(64:12,R15),R7
    00000B38 2F72                   MOV.L       R7,@R15
    00000B3A 7FFC                   ADD         #-4,R15
    00000B3C 3EF16010               MOV.L       @(64:12,R15),R14
    00000B40 2FE2                   MOV.L       R14,@R15
    00000B42 7FFC                   ADD         #-4,R15
    00000B44 31F16010               MOV.L       @(64:12,R15),R1
    00000B48 2F12                   MOV.L       R1,@R15
    00000B4A 7FFC                   ADD         #-4,R15
    00000B4C 34F16010               MOV.L       @(64:12,R15),R4
    00000B50 2F42                   MOV.L       R4,@R15
    00000B52 2FC6                   MOV.L       R12,@-R15
    00000B54 2FB6                   MOV.L       R11,@-R15
    00000B56 D565                   MOV.L       L1374+26,R5; L1495
    00000B58 2F56                   MOV.L       R5,@-R15
    00000B5A D261                   MOV.L       L1374+14,R2; _sprintf
    00000B5C 420B                   JSR         @R2
    00000B5E 6493                   MOV         R9,R4
    00000B60 7F28                   ADD         #40,R15
    00000B62              L201:
             tskcmd.c       1535      if( anum == PARAM8 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d"                 , p1, p2, p3, p4, p5, p6, p7, p8);
    00000B62 60D3                   MOV         R13,R0
    00000B64 8808                   CMP/EQ      #8,R0
    00000B66 8B19                   BF          L203
    00000B68 7FFC                   ADD         #-4,R15
    00000B6A 56FF                   MOV.L       @(60,R15),R6
    00000B6C 2F62                   MOV.L       R6,@R15
    00000B6E 7FFC                   ADD         #-4,R15
    00000B70 57FF                   MOV.L       @(60,R15),R7
    00000B72 2F72                   MOV.L       R7,@R15
    00000B74 7FFC                   ADD         #-4,R15
    00000B76 5EFF                   MOV.L       @(60,R15),R14
    00000B78 2FE2                   MOV.L       R14,@R15
    00000B7A 7FFC                   ADD         #-4,R15
    00000B7C 51FF                   MOV.L       @(60,R15),R1
    00000B7E 2F12                   MOV.L       R1,@R15
    00000B80 7FFC                   ADD         #-4,R15
    00000B82 54FF                   MOV.L       @(60,R15),R4
    00000B84 2F42                   MOV.L       R4,@R15
    00000B86 7FFC                   ADD         #-4,R15
    00000B88 55FF                   MOV.L       @(60,R15),R5
    00000B8A 2F52                   MOV.L       R5,@R15
    00000B8C 2FC6                   MOV.L       R12,@-R15
    00000B8E 2FB6                   MOV.L       R11,@-R15
    00000B90 D657                   MOV.L       L1374+30,R6; L1496
    00000B92 2F66                   MOV.L       R6,@-R15
    00000B94 D252                   MOV.L       L1374+14,R2; _sprintf
    00000B96 420B                   JSR         @R2
    00000B98 6493                   MOV         R9,R4
    00000B9A 7F24                   ADD         #36,R15
    00000B9C              L203:
             tskcmd.c       1536      if( anum == PARAM7 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d"                     , p1, p2, p3, p4, p5, p6, p7);
    00000B9C 60D3                   MOV         R13,R0
    00000B9E 8807                   CMP/EQ      #7,R0
    00000BA0 8B16                   BF          L205
    00000BA2 7FFC                   ADD         #-4,R15
    00000BA4 57FE                   MOV.L       @(56,R15),R7
    00000BA6 2F72                   MOV.L       R7,@R15
    00000BA8 7FFC                   ADD         #-4,R15
    00000BAA 5EFE                   MOV.L       @(56,R15),R14
    00000BAC 2FE2                   MOV.L       R14,@R15
    00000BAE 7FFC                   ADD         #-4,R15
    00000BB0 51FE                   MOV.L       @(56,R15),R1
    00000BB2 2F12                   MOV.L       R1,@R15
    00000BB4 7FFC                   ADD         #-4,R15
    00000BB6 54FE                   MOV.L       @(56,R15),R4
    00000BB8 2F42                   MOV.L       R4,@R15
    00000BBA 7FFC                   ADD         #-4,R15
    00000BBC 55FE                   MOV.L       @(56,R15),R5
    00000BBE 2F52                   MOV.L       R5,@R15
    00000BC0 2FC6                   MOV.L       R12,@-R15
    00000BC2 2FB6                   MOV.L       R11,@-R15
    00000BC4 D64B                   MOV.L       L1374+34,R6; L1497
    00000BC6 2F66                   MOV.L       R6,@-R15
    00000BC8 D245                   MOV.L       L1374+14,R2; _sprintf
    00000BCA 420B                   JSR         @R2
    00000BCC 6493                   MOV         R9,R4
    00000BCE 7F20                   ADD         #32,R15
    00000BD0              L205:
             tskcmd.c       1537      if( anum == PARAM6 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d"                         , p1, p2, p3, p4, p5, p6);
    00000BD0 60D3                   MOV         R13,R0
    00000BD2 8806                   CMP/EQ      #6,R0
    00000BD4 8B13                   BF          L207
    00000BD6 7FFC                   ADD         #-4,R15
    00000BD8 57FD                   MOV.L       @(52,R15),R7
    00000BDA 2F72                   MOV.L       R7,@R15
    00000BDC 7FFC                   ADD         #-4,R15
    00000BDE 5EFD                   MOV.L       @(52,R15),R14
    00000BE0 2FE2                   MOV.L       R14,@R15
    00000BE2 7FFC                   ADD         #-4,R15
    00000BE4 51FD                   MOV.L       @(52,R15),R1
    00000BE6 2F12                   MOV.L       R1,@R15
    00000BE8 7FFC                   ADD         #-4,R15
    00000BEA 54FD                   MOV.L       @(52,R15),R4
    00000BEC 2F42                   MOV.L       R4,@R15
    00000BEE 2FC6                   MOV.L       R12,@-R15
    00000BF0 2FB6                   MOV.L       R11,@-R15
    00000BF2 D541                   MOV.L       L1374+38,R5; L1498
    00000BF4 2F56                   MOV.L       R5,@-R15
    00000BF6 D63A                   MOV.L       L1374+14,R6; _sprintf
    00000BF8 460B                   JSR         @R6
    00000BFA 6493                   MOV         R9,R4
    00000BFC 7F1C                   ADD         #28,R15
    00000BFE              L207:
             tskcmd.c       1538      if( anum == PARAM5 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d"                             , p1, p2, p3, p4, p5);
    00000BFE 60D3                   MOV         R13,R0
    00000C00 8805                   CMP/EQ      #5,R0
    00000C02 8B10                   BF          L209
    00000C04 7FFC                   ADD         #-4,R15
    00000C06 57FC                   MOV.L       @(48,R15),R7
    00000C08 2F72                   MOV.L       R7,@R15
    00000C0A 7FFC                   ADD         #-4,R15
    00000C0C 5EFC                   MOV.L       @(48,R15),R14
    00000C0E 2FE2                   MOV.L       R14,@R15
    00000C10 7FFC                   ADD         #-4,R15
    00000C12 51FC                   MOV.L       @(48,R15),R1
    00000C14 2F12                   MOV.L       R1,@R15
    00000C16 2FC6                   MOV.L       R12,@-R15
    00000C18 2FB6                   MOV.L       R11,@-R15
    00000C1A D438                   MOV.L       L1374+42,R4; L1499
    00000C1C 2F46                   MOV.L       R4,@-R15
    00000C1E D530                   MOV.L       L1374+14,R5; _sprintf
    00000C20 450B                   JSR         @R5
    00000C22 6493                   MOV         R9,R4
    00000C24 7F18                   ADD         #24,R15
    00000C26              L209:
             tskcmd.c       1539      if( anum == PARAM4 )        sprintf(rspbuf, "%s,%04X,%0d,%0d"                                 , p1, p2, p3, p4);
    00000C26 60D3                   MOV         R13,R0
    00000C28 8804                   CMP/EQ      #4,R0
    00000C2A 8B0D                   BF          L211
    00000C2C 7FFC                   ADD         #-4,R15
    00000C2E 56FB                   MOV.L       @(44,R15),R6
    00000C30 2F62                   MOV.L       R6,@R15
    00000C32 7FFC                   ADD         #-4,R15
    00000C34 57FB                   MOV.L       @(44,R15),R7
    00000C36 2F72                   MOV.L       R7,@R15
    00000C38 2FC6                   MOV.L       R12,@-R15
    00000C3A 2FB6                   MOV.L       R11,@-R15
    00000C3C DE30                   MOV.L       L1374+46,R14; L1500
    00000C3E 2FE6                   MOV.L       R14,@-R15
    00000C40 D127                   MOV.L       L1374+14,R1; _sprintf
    00000C42 410B                   JSR         @R1
    00000C44 6493                   MOV         R9,R4
    00000C46 7F14                   ADD         #20,R15
    00000C48              L211:
             tskcmd.c       1540      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%04X,%0d"                                     , p1, p2, p3);
    00000C48 60D3                   MOV         R13,R0
    00000C4A 8803                   CMP/EQ      #3,R0
    00000C4C 8B0A                   BF          L213
    00000C4E 7FFC                   ADD         #-4,R15
    00000C50 54FA                   MOV.L       @(40,R15),R4
    00000C52 2F42                   MOV.L       R4,@R15
    00000C54 2FC6                   MOV.L       R12,@-R15
    00000C56 2FB6                   MOV.L       R11,@-R15
    00000C58 D52A                   MOV.L       L1374+50,R5; L1501
    00000C5A 2F56                   MOV.L       R5,@-R15
    00000C5C D620                   MOV.L       L1374+14,R6; _sprintf
    00000C5E 460B                   JSR         @R6
    00000C60 6493                   MOV         R9,R4
    00000C62 7F10                   ADD         #16,R15
    00000C64              L213:
             tskcmd.c       1541      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%04X"                                         , p1, p2);
    00000C64 60D3                   MOV         R13,R0
    00000C66 8802                   CMP/EQ      #2,R0
    00000C68 8B07                   BF          L215
    00000C6A 2FC6                   MOV.L       R12,@-R15
    00000C6C 2FB6                   MOV.L       R11,@-R15
    00000C6E D726                   MOV.L       L1374+54,R7; L1502
    00000C70 2F76                   MOV.L       R7,@-R15
    00000C72 DE1B                   MOV.L       L1374+14,R14; _sprintf
    00000C74 4E0B                   JSR         @R14
    00000C76 6493                   MOV         R9,R4
    00000C78 7F0C                   ADD         #12,R15
    00000C7A              L215:
             tskcmd.c       1542      if( anum == PARAM1 )        sprintf(rspbuf, "%s"                                              , p1);
    00000C7A 60D3                   MOV         R13,R0
    00000C7C 8801                   CMP/EQ      #1,R0
    00000C7E 8B06                   BF          L217
    00000C80 2FB6                   MOV.L       R11,@-R15
    00000C82 D122                   MOV.L       L1374+58,R1; L1503
    00000C84 2F16                   MOV.L       R1,@-R15
    00000C86 D516                   MOV.L       L1374+14,R5; _sprintf
    00000C88 450B                   JSR         @R5
    00000C8A 6493                   MOV         R9,R4
    00000C8C 7F08                   ADD         #8,R15
    00000C8E              L217:
             tskcmd.c       1543      
             tskcmd.c       1544      
             tskcmd.c       1545      len = strlen(&rspbuf);
    00000C8E 6493                   MOV         R9,R4
             tskcmd.c       1546      cntl->rsp.buf[0] = STX;                         // STX
             tskcmd.c       1547      memcpy( &cntl->rsp.buf[1], &rspbuf, len );          // コマンド〜データまでコピー
             tskcmd.c       1548      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    00000C90 D61F                   MOV.L       L1374+62,R6; _strlen
    00000C92 460B                   JSR         @R6
    00000C94 EC03                   MOV         #3,R12     ; H'00000003
    00000C96 6593                   MOV         R9,R5
    00000C98 E99D                   MOV         #-99,R9    ; H'FFFFFF9D
    00000C9A E702                   MOV         #2,R7      ; H'00000002
    00000C9C 699C                   EXTU.B      R9,R9
    00000C9E 3A71009C               MOV.B       R7,@(156:12,R10); cntl->buf[]
    00000CA2 6DA3                   MOV         R10,R13
    00000CA4 3D9C                   ADD         R9,R13
    00000CA6 6E03                   MOV         R0,R14
             tskcmd.c       1549    
             tskcmd.c       1550      // BCC計算
             tskcmd.c       1551      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
             tskcmd.c       1552    
             tskcmd.c       1553      // 10進数→16進数→ASC変換
             tskcmd.c       1554      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1555    
             tskcmd.c       1556      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
    00000CA8 E99E                   MOV         #-98,R9    ; H'FFFFFF9E
    00000CAA 64D3                   MOV         R13,R4
    00000CAC DB19                   MOV.L       L1374+66,R11; _memcpy
    00000CAE 4B0B                   JSR         @R11
    00000CB0 6603                   MOV         R0,R6
    00000CB2 60E3                   MOV         R14,R0
    00000CB4 0DC4                   MOV.B       R12,@(R0,R13); cntl->buf[]
    00000CB6 65E3                   MOV         R14,R5
    00000CB8 7501                   ADD         #1,R5
    00000CBA 64D3                   MOV         R13,R4
             tskcmd.c       1557      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
    00000CBC DD16                   MOV.L       L1374+70,R13; _CalcBCC
    00000CBE 4D0B                   JSR         @R13
    00000CC0 EC9F                   MOV         #-97,R12   ; H'FFFFFF9F
    00000CC2 65F3                   MOV         R15,R5
    00000CC4 7504                   ADD         #4,R5
    00000CC6 6403                   MOV         R0,R4
    00000CC8 D114                   MOV.L       L1374+74,R1; _DectoHexASC
    00000CCA 410B                   JSR         @R1
    00000CCC 66F3                   MOV         R15,R6
    00000CCE A027                   BRA         L1373
    00000CD0 699C                   EXTU.B      R9,R9
    00000CD2              L1374:
    00000CD2 00000002               .RES.W      1
    00000CD4 <00000000>             .DATA.L     __$rspbuf
    00000CD8 <00000000>             .DATA.L     _memset
    00000CDC <00000000>             .DATA.L     L1492
    00000CE0 <00000000>             .DATA.L     _sprintf
    00000CE4 <00000000>             .DATA.L     L1493
    00000CE8 <00000000>             .DATA.L     L1494
    00000CEC <00000000>             .DATA.L     L1495
    00000CF0 <00000000>             .DATA.L     L1496
    00000CF4 <00000000>             .DATA.L     L1497
    00000CF8 <00000000>             .DATA.L     L1498
    00000CFC <00000000>             .DATA.L     L1499
    00000D00 <00000000>             .DATA.L     L1500
    00000D04 <00000000>             .DATA.L     L1501
    00000D08 <00000000>             .DATA.L     L1502
    00000D0C <00000000>             .DATA.L     L1503
    00000D10 <00000000>             .DATA.L     _strlen
    00000D14 <00000000>             .DATA.L     _memcpy
    00000D18 <00000000>             .DATA.L     _CalcBCC
    00000D1C <00000000>             .DATA.L     _DectoHexASC
    00000D20              L1373:
    00000D20 3BF14004               MOV.B       @(4:12,R15),R11; bcch
    00000D24 67A3                   MOV         R10,R7
    00000D26 379C                   ADD         R9,R7
    00000D28 60E3                   MOV         R14,R0
    00000D2A 07B4                   MOV.B       R11,@(R0,R7); cntl->buf[]
    00000D2C 6CCC                   EXTU.B      R12,R12
             tskcmd.c       1558      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    00000D2E 7E04                   ADD         #4,R14
    00000D30 3DF14000               MOV.B       @(0:12,R15),R13; bccl
    00000D34 62A3                   MOV         R10,R2
    00000D36 32CC                   ADD         R12,R2
    00000D38 02D4                   MOV.B       R13,@(R0,R2); cntl->buf[]
    00000D3A 3AE12025               MOV.L       R14,@(148:12,R10); (cntl)->siz
    00000D3E              L192:
    00000D3E 7F08                   ADD         #8,R15
    00000D40 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1559    }
    00000D42 006B                   RTS/N
             tskcmd.c       1560    /***********************************************************************
             tskcmd.c       1561    * 
             tskcmd.c       1562    * [概要]  応答データ作成
             tskcmd.c       1563    * [引数]  
             tskcmd.c       1564    * [戻値]  −
             tskcmd.c       1565    * 
             tskcmd.c       1566    ***********************************************************************/
             tskcmd.c       1567    void CmdMakeResponseX( ST_CNTLDATA* cntl, UB anum, const char* cmd, INT err, INT p2,INT p3, INT p4, INT p5, INT p6, INT p7, INT p8 )
    00000D44              _CmdMakeResponseX:               ; function: CmdMakeResponseX
                                                           ; frame size=76
    00000D44 49F0                   MOVMU.L     R9,@-R15
    00000D46 7FF8                   ADD         #-8,R15
    00000D48 6B63                   MOV         R6,R11
    00000D4A E63C                   MOV         #60,R6     ; H'0000003C
    00000D4C 6E53                   MOV         R5,R14
    00000D4E E500                   MOV         #0,R5      ; H'00000000
    00000D50 D9B4                   MOV.L       L1375,R9   ; __$rspbuf
             tskcmd.c       1568    {
             tskcmd.c       1569      INT  len;
             tskcmd.c       1570      UB bcc;
             tskcmd.c       1571      UB bcch;
             tskcmd.c       1572      UB bccl;
             tskcmd.c       1573    //    char rspbuf[CMD_BUFSIZ];
             tskcmd.c       1574    
             tskcmd.c       1575      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00000D52 6C73                   MOV         R7,R12
    00000D54 6A43                   MOV         R4,R10
    00000D56 D1B4                   MOV.L       L1375+4,R1 ; _memset
    00000D58 410B                   JSR         @R1
    00000D5A 6493                   MOV         R9,R4
             tskcmd.c       1576      
             tskcmd.c       1577      if(( anum < PARAM1 )||( anum > PARAM9 ))    return;
    00000D5C 6DEC                   EXTU.B      R14,R13
    00000D5E E201                   MOV         #1,R2      ; H'00000001
    00000D60 3D23                   CMP/GE      R2,R13
    00000D62 8901                   BT          L1407
    00000D64 A0F2                   BRA         L220
    00000D66 0009                   NOP
    00000D68              L1407:
    00000D68 E209                   MOV         #9,R2      ; H'00000009
    00000D6A 3D27                   CMP/GT      R2,R13
    00000D6C 8B01                   BF          L1408
    00000D6E A0ED                   BRA         L220
    00000D70 0009                   NOP
    00000D72              L1408:
             tskcmd.c       1578    
             tskcmd.c       1579      if( anum == PARAM9 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5, p6, p7, p8);
    00000D72 60D3                   MOV         R13,R0
    00000D74 8809                   CMP/EQ      #9,R0
    00000D76 8B23                   BF          L223
    00000D78 7FFC                   ADD         #-4,R15
    00000D7A 34F16010               MOV.L       @(64:12,R15),R4
    00000D7E 2F42                   MOV.L       R4,@R15
    00000D80 7FFC                   ADD         #-4,R15
    00000D82 35F16010               MOV.L       @(64:12,R15),R5
    00000D86 2F52                   MOV.L       R5,@R15
    00000D88 7FFC                   ADD         #-4,R15
    00000D8A 36F16010               MOV.L       @(64:12,R15),R6
    00000D8E 2F62                   MOV.L       R6,@R15
    00000D90 7FFC                   ADD         #-4,R15
    00000D92 37F16010               MOV.L       @(64:12,R15),R7
    00000D96 2F72                   MOV.L       R7,@R15
    00000D98 7FFC                   ADD         #-4,R15
    00000D9A 3EF16010               MOV.L       @(64:12,R15),R14
    00000D9E 2FE2                   MOV.L       R14,@R15
    00000DA0 7FFC                   ADD         #-4,R15
    00000DA2 31F16010               MOV.L       @(64:12,R15),R1
    00000DA6 2F12                   MOV.L       R1,@R15
    00000DA8 7FFC                   ADD         #-4,R15
    00000DAA 34F16010               MOV.L       @(64:12,R15),R4
    00000DAE 2F42                   MOV.L       R4,@R15
    00000DB0 2FC6                   MOV.L       R12,@-R15
    00000DB2 2FB6                   MOV.L       R11,@-R15
    00000DB4 D59D                   MOV.L       L1375+8,R5 ; L1504
    00000DB6 2F56                   MOV.L       R5,@-R15
    00000DB8 D29D                   MOV.L       L1375+12,R2; _sprintf
    00000DBA 420B                   JSR         @R2
    00000DBC 6493                   MOV         R9,R4
    00000DBE 7F28                   ADD         #40,R15
    00000DC0              L223:
             tskcmd.c       1580      if( anum == PARAM8 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5, p6, p7);
    00000DC0 60D3                   MOV         R13,R0
    00000DC2 8808                   CMP/EQ      #8,R0
    00000DC4 8B19                   BF          L225
    00000DC6 7FFC                   ADD         #-4,R15
    00000DC8 56FF                   MOV.L       @(60,R15),R6
    00000DCA 2F62                   MOV.L       R6,@R15
    00000DCC 7FFC                   ADD         #-4,R15
    00000DCE 57FF                   MOV.L       @(60,R15),R7
    00000DD0 2F72                   MOV.L       R7,@R15
    00000DD2 7FFC                   ADD         #-4,R15
    00000DD4 5EFF                   MOV.L       @(60,R15),R14
    00000DD6 2FE2                   MOV.L       R14,@R15
    00000DD8 7FFC                   ADD         #-4,R15
    00000DDA 51FF                   MOV.L       @(60,R15),R1
    00000DDC 2F12                   MOV.L       R1,@R15
    00000DDE 7FFC                   ADD         #-4,R15
    00000DE0 54FF                   MOV.L       @(60,R15),R4
    00000DE2 2F42                   MOV.L       R4,@R15
    00000DE4 7FFC                   ADD         #-4,R15
    00000DE6 55FF                   MOV.L       @(60,R15),R5
    00000DE8 2F52                   MOV.L       R5,@R15
    00000DEA 2FC6                   MOV.L       R12,@-R15
    00000DEC 2FB6                   MOV.L       R11,@-R15
    00000DEE D691                   MOV.L       L1375+16,R6; L1505
    00000DF0 2F66                   MOV.L       R6,@-R15
    00000DF2 D28F                   MOV.L       L1375+12,R2; _sprintf
    00000DF4 420B                   JSR         @R2
    00000DF6 6493                   MOV         R9,R4
    00000DF8 7F24                   ADD         #36,R15
    00000DFA              L225:
             tskcmd.c       1581      if( anum == PARAM7 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5, p6);
    00000DFA 60D3                   MOV         R13,R0
    00000DFC 8807                   CMP/EQ      #7,R0
    00000DFE 8B16                   BF          L227
    00000E00 7FFC                   ADD         #-4,R15
    00000E02 57FE                   MOV.L       @(56,R15),R7
    00000E04 2F72                   MOV.L       R7,@R15
    00000E06 7FFC                   ADD         #-4,R15
    00000E08 5EFE                   MOV.L       @(56,R15),R14
    00000E0A 2FE2                   MOV.L       R14,@R15
    00000E0C 7FFC                   ADD         #-4,R15
    00000E0E 51FE                   MOV.L       @(56,R15),R1
    00000E10 2F12                   MOV.L       R1,@R15
    00000E12 7FFC                   ADD         #-4,R15
    00000E14 54FE                   MOV.L       @(56,R15),R4
    00000E16 2F42                   MOV.L       R4,@R15
    00000E18 7FFC                   ADD         #-4,R15
    00000E1A 55FE                   MOV.L       @(56,R15),R5
    00000E1C 2F52                   MOV.L       R5,@R15
    00000E1E 2FC6                   MOV.L       R12,@-R15
    00000E20 2FB6                   MOV.L       R11,@-R15
    00000E22 D685                   MOV.L       L1375+20,R6; L1506
    00000E24 2F66                   MOV.L       R6,@-R15
    00000E26 D282                   MOV.L       L1375+12,R2; _sprintf
    00000E28 420B                   JSR         @R2
    00000E2A 6493                   MOV         R9,R4
    00000E2C 7F20                   ADD         #32,R15
    00000E2E              L227:
             tskcmd.c       1582      if( anum == PARAM6 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5);
    00000E2E 60D3                   MOV         R13,R0
    00000E30 8806                   CMP/EQ      #6,R0
    00000E32 8B13                   BF          L229
    00000E34 7FFC                   ADD         #-4,R15
    00000E36 57FD                   MOV.L       @(52,R15),R7
    00000E38 2F72                   MOV.L       R7,@R15
    00000E3A 7FFC                   ADD         #-4,R15
    00000E3C 5EFD                   MOV.L       @(52,R15),R14
    00000E3E 2FE2                   MOV.L       R14,@R15
    00000E40 7FFC                   ADD         #-4,R15
    00000E42 51FD                   MOV.L       @(52,R15),R1
    00000E44 2F12                   MOV.L       R1,@R15
    00000E46 7FFC                   ADD         #-4,R15
    00000E48 54FD                   MOV.L       @(52,R15),R4
    00000E4A 2F42                   MOV.L       R4,@R15
    00000E4C 2FC6                   MOV.L       R12,@-R15
    00000E4E 2FB6                   MOV.L       R11,@-R15
    00000E50 D57A                   MOV.L       L1375+24,R5; L1507
    00000E52 2F56                   MOV.L       R5,@-R15
    00000E54 D676                   MOV.L       L1375+12,R6; _sprintf
    00000E56 460B                   JSR         @R6
    00000E58 6493                   MOV         R9,R4
    00000E5A 7F1C                   ADD         #28,R15
    00000E5C              L229:
             tskcmd.c       1583      if( anum == PARAM5 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4);
    00000E5C 60D3                   MOV         R13,R0
    00000E5E 8805                   CMP/EQ      #5,R0
    00000E60 8B10                   BF          L231
    00000E62 7FFC                   ADD         #-4,R15
    00000E64 57FC                   MOV.L       @(48,R15),R7
    00000E66 2F72                   MOV.L       R7,@R15
    00000E68 7FFC                   ADD         #-4,R15
    00000E6A 5EFC                   MOV.L       @(48,R15),R14
    00000E6C 2FE2                   MOV.L       R14,@R15
    00000E6E 7FFC                   ADD         #-4,R15
    00000E70 51FC                   MOV.L       @(48,R15),R1
    00000E72 2F12                   MOV.L       R1,@R15
    00000E74 2FC6                   MOV.L       R12,@-R15
    00000E76 2FB6                   MOV.L       R11,@-R15
    00000E78 D471                   MOV.L       L1375+28,R4; L1508
    00000E7A 2F46                   MOV.L       R4,@-R15
    00000E7C D56C                   MOV.L       L1375+12,R5; _sprintf
    00000E7E 450B                   JSR         @R5
    00000E80 6493                   MOV         R9,R4
    00000E82 7F18                   ADD         #24,R15
    00000E84              L231:
             tskcmd.c       1584      if( anum == PARAM4 )        sprintf(rspbuf, "%s,%04X,%04X,%04X", cmd, err, p2, p3);
    00000E84 60D3                   MOV         R13,R0
    00000E86 8804                   CMP/EQ      #4,R0
    00000E88 8B0D                   BF          L233
    00000E8A 7FFC                   ADD         #-4,R15
    00000E8C 56FB                   MOV.L       @(44,R15),R6
    00000E8E 2F62                   MOV.L       R6,@R15
    00000E90 7FFC                   ADD         #-4,R15
    00000E92 57FB                   MOV.L       @(44,R15),R7
    00000E94 2F72                   MOV.L       R7,@R15
    00000E96 2FC6                   MOV.L       R12,@-R15
    00000E98 2FB6                   MOV.L       R11,@-R15
    00000E9A DE6A                   MOV.L       L1375+32,R14; L1509
    00000E9C 2FE6                   MOV.L       R14,@-R15
    00000E9E D164                   MOV.L       L1375+12,R1; _sprintf
    00000EA0 410B                   JSR         @R1
    00000EA2 6493                   MOV         R9,R4
    00000EA4 7F14                   ADD         #20,R15
    00000EA6              L233:
             tskcmd.c       1585      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%04X,%04X", cmd, err, p2);
    00000EA6 60D3                   MOV         R13,R0
    00000EA8 8803                   CMP/EQ      #3,R0
    00000EAA 8B0A                   BF          L235
    00000EAC 7FFC                   ADD         #-4,R15
    00000EAE 54FA                   MOV.L       @(40,R15),R4
    00000EB0 2F42                   MOV.L       R4,@R15
    00000EB2 2FC6                   MOV.L       R12,@-R15
    00000EB4 2FB6                   MOV.L       R11,@-R15
    00000EB6 D564                   MOV.L       L1375+36,R5; L1510
    00000EB8 2F56                   MOV.L       R5,@-R15
    00000EBA D65D                   MOV.L       L1375+12,R6; _sprintf
    00000EBC 460B                   JSR         @R6
    00000EBE 6493                   MOV         R9,R4
    00000EC0 7F10                   ADD         #16,R15
    00000EC2              L235:
             tskcmd.c       1586      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%04X", cmd, err);
    00000EC2 60D3                   MOV         R13,R0
    00000EC4 8802                   CMP/EQ      #2,R0
    00000EC6 8B07                   BF          L237
    00000EC8 2FC6                   MOV.L       R12,@-R15
    00000ECA 2FB6                   MOV.L       R11,@-R15
    00000ECC D75F                   MOV.L       L1375+40,R7; L1502
    00000ECE 2F76                   MOV.L       R7,@-R15
    00000ED0 DE57                   MOV.L       L1375+12,R14; _sprintf
    00000ED2 4E0B                   JSR         @R14
    00000ED4 6493                   MOV         R9,R4
    00000ED6 7F0C                   ADD         #12,R15
    00000ED8              L237:
             tskcmd.c       1587      if( anum == PARAM1 )        sprintf(rspbuf, "%s", cmd);
    00000ED8 60D3                   MOV         R13,R0
    00000EDA 8801                   CMP/EQ      #1,R0
    00000EDC 8B06                   BF          L239
    00000EDE 2FB6                   MOV.L       R11,@-R15
    00000EE0 D15B                   MOV.L       L1375+44,R1; L1503
    00000EE2 2F16                   MOV.L       R1,@-R15
    00000EE4 D552                   MOV.L       L1375+12,R5; _sprintf
    00000EE6 450B                   JSR         @R5
    00000EE8 6493                   MOV         R9,R4
    00000EEA 7F08                   ADD         #8,R15
    00000EEC              L239:
             tskcmd.c       1588      
             tskcmd.c       1589      
             tskcmd.c       1590      len = strlen(&rspbuf);
    00000EEC 6493                   MOV         R9,R4
             tskcmd.c       1591      cntl->rsp.buf[0] = STX;                         // STX
             tskcmd.c       1592      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
             tskcmd.c       1593      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    00000EEE D659                   MOV.L       L1375+48,R6; _strlen
    00000EF0 460B                   JSR         @R6
    00000EF2 EC03                   MOV         #3,R12     ; H'00000003
    00000EF4 6593                   MOV         R9,R5
    00000EF6 E99D                   MOV         #-99,R9    ; H'FFFFFF9D
    00000EF8 E702                   MOV         #2,R7      ; H'00000002
    00000EFA 699C                   EXTU.B      R9,R9
    00000EFC 3A71009C               MOV.B       R7,@(156:12,R10); cntl->buf[]
    00000F00 6DA3                   MOV         R10,R13
    00000F02 3D9C                   ADD         R9,R13
    00000F04 6E03                   MOV         R0,R14
             tskcmd.c       1594    
             tskcmd.c       1595      // BCC計算
             tskcmd.c       1596      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
             tskcmd.c       1597    
             tskcmd.c       1598      // 10進数→16進数→ASC変換
             tskcmd.c       1599      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1600    
             tskcmd.c       1601      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
    00000F06 E99E                   MOV         #-98,R9    ; H'FFFFFF9E
    00000F08 64D3                   MOV         R13,R4
    00000F0A DB53                   MOV.L       L1375+52,R11; _memcpy
    00000F0C 4B0B                   JSR         @R11
    00000F0E 6603                   MOV         R0,R6
    00000F10 60E3                   MOV         R14,R0
    00000F12 0DC4                   MOV.B       R12,@(R0,R13); cntl->buf[]
    00000F14 65E3                   MOV         R14,R5
    00000F16 7501                   ADD         #1,R5
    00000F18 64D3                   MOV         R13,R4
             tskcmd.c       1602      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
    00000F1A DD50                   MOV.L       L1375+56,R13; _CalcBCC
    00000F1C 4D0B                   JSR         @R13
    00000F1E EC9F                   MOV         #-97,R12   ; H'FFFFFF9F
    00000F20 65F3                   MOV         R15,R5
    00000F22 7504                   ADD         #4,R5
    00000F24 6403                   MOV         R0,R4
    00000F26 D14E                   MOV.L       L1375+60,R1; _DectoHexASC
    00000F28 410B                   JSR         @R1
    00000F2A 66F3                   MOV         R15,R6
    00000F2C 699C                   EXTU.B      R9,R9
    00000F2E 3BF14004               MOV.B       @(4:12,R15),R11; bcch
    00000F32 67A3                   MOV         R10,R7
    00000F34 379C                   ADD         R9,R7
    00000F36 60E3                   MOV         R14,R0
    00000F38 07B4                   MOV.B       R11,@(R0,R7); cntl->buf[]
    00000F3A 6CCC                   EXTU.B      R12,R12
             tskcmd.c       1603      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    00000F3C 7E04                   ADD         #4,R14
    00000F3E 3DF14000               MOV.B       @(0:12,R15),R13; bccl
    00000F42 62A3                   MOV         R10,R2
    00000F44 32CC                   ADD         R12,R2
    00000F46 02D4                   MOV.B       R13,@(R0,R2); cntl->buf[]
    00000F48 3AE12025               MOV.L       R14,@(148:12,R10); (cntl)->siz
    00000F4C              L220:
    00000F4C 7F08                   ADD         #8,R15
    00000F4E 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1604    }
    00000F50 006B                   RTS/N
             tskcmd.c       1605    /***********************************************************************
             tskcmd.c       1606    * 
             tskcmd.c       1607    * [概要]  応答データ作成
             tskcmd.c       1608    * [引数]  
             tskcmd.c       1609    * [戻値]  −
             tskcmd.c       1610    * 
             tskcmd.c       1611    ***********************************************************************/
             tskcmd.c       1612    void CmdMakeResponseInt( ST_CNTLDATA* cntl, UB anum, const char* p1, INT p2, INT p3 )
    00000F52              _CmdMakeResponseInt:             ; function: CmdMakeResponseInt
                                                           ; frame size=52
    00000F52 49F0                   MOVMU.L     R9,@-R15
    00000F54 7FF8                   ADD         #-8,R15
    00000F56 6B63                   MOV         R6,R11
    00000F58 E63C                   MOV         #60,R6     ; H'0000003C
    00000F5A 6E53                   MOV         R5,R14
    00000F5C E500                   MOV         #0,R5      ; H'00000000
    00000F5E D931                   MOV.L       L1375,R9   ; __$rspbuf
             tskcmd.c       1613    {
             tskcmd.c       1614      INT  len;
             tskcmd.c       1615      UB bcc;
             tskcmd.c       1616      UB bcch;
             tskcmd.c       1617      UB bccl;
             tskcmd.c       1618    
             tskcmd.c       1619      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00000F60 6C73                   MOV         R7,R12
    00000F62 6A43                   MOV         R4,R10
    00000F64 D130                   MOV.L       L1375+4,R1 ; _memset
    00000F66 410B                   JSR         @R1
    00000F68 6493                   MOV         R9,R4
             tskcmd.c       1620    
             tskcmd.c       1621      if(( anum < PARAM1 )||( anum > PARAM3 ))    return;
    00000F6A 6DEC                   EXTU.B      R14,R13
    00000F6C E201                   MOV         #1,R2      ; H'00000001
    00000F6E 3D23                   CMP/GE      R2,R13
    00000F70 8B55                   BF          L242
    00000F72 E203                   MOV         #3,R2      ; H'00000003
    00000F74 3D27                   CMP/GT      R2,R13
    00000F76 8952                   BT          L242
             tskcmd.c       1622    
             tskcmd.c       1623      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%0d,%0d" , p1, p2, p3);
    00000F78 60D3                   MOV         R13,R0
    00000F7A 8803                   CMP/EQ      #3,R0
    00000F7C 8B0A                   BF          L245
    00000F7E 7FFC                   ADD         #-4,R15
    00000F80 54FA                   MOV.L       @(40,R15),R4
    00000F82 2F42                   MOV.L       R4,@R15
    00000F84 2FC6                   MOV.L       R12,@-R15
    00000F86 2FB6                   MOV.L       R11,@-R15
    00000F88 D536                   MOV.L       L1375+64,R5; L1511
    00000F8A 2F56                   MOV.L       R5,@-R15
    00000F8C D628                   MOV.L       L1375+12,R6; _sprintf
    00000F8E 460B                   JSR         @R6
    00000F90 6493                   MOV         R9,R4
    00000F92 7F10                   ADD         #16,R15
    00000F94              L245:
             tskcmd.c       1624      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%0d"     , p1, p2);
    00000F94 60D3                   MOV         R13,R0
    00000F96 8802                   CMP/EQ      #2,R0
    00000F98 8B07                   BF          L247
    00000F9A 2FC6                   MOV.L       R12,@-R15
    00000F9C 2FB6                   MOV.L       R11,@-R15
    00000F9E D732                   MOV.L       L1375+68,R7; L1512
    00000FA0 2F76                   MOV.L       R7,@-R15
    00000FA2 DE23                   MOV.L       L1375+12,R14; _sprintf
    00000FA4 4E0B                   JSR         @R14
    00000FA6 6493                   MOV         R9,R4
    00000FA8 7F0C                   ADD         #12,R15
    00000FAA              L247:
             tskcmd.c       1625      if( anum == PARAM1 )        sprintf(rspbuf, "%s"         , p1);
    00000FAA 60D3                   MOV         R13,R0
    00000FAC 8801                   CMP/EQ      #1,R0
    00000FAE 8B06                   BF          L249
    00000FB0 2FB6                   MOV.L       R11,@-R15
    00000FB2 D127                   MOV.L       L1375+44,R1; L1503
    00000FB4 2F16                   MOV.L       R1,@-R15
    00000FB6 D51E                   MOV.L       L1375+12,R5; _sprintf
    00000FB8 450B                   JSR         @R5
    00000FBA 6493                   MOV         R9,R4
    00000FBC 7F08                   ADD         #8,R15
    00000FBE              L249:
             tskcmd.c       1626      
             tskcmd.c       1627      len = strlen(&rspbuf);
    00000FBE 6493                   MOV         R9,R4
             tskcmd.c       1628      cntl->rsp.buf[0] = STX;                         // STX
             tskcmd.c       1629      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
             tskcmd.c       1630      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    00000FC0 D624                   MOV.L       L1375+48,R6; _strlen
    00000FC2 460B                   JSR         @R6
    00000FC4 EC03                   MOV         #3,R12     ; H'00000003
    00000FC6 6593                   MOV         R9,R5
    00000FC8 E99D                   MOV         #-99,R9    ; H'FFFFFF9D
    00000FCA E702                   MOV         #2,R7      ; H'00000002
    00000FCC 699C                   EXTU.B      R9,R9
    00000FCE 3A71009C               MOV.B       R7,@(156:12,R10); cntl->buf[]
    00000FD2 6DA3                   MOV         R10,R13
    00000FD4 3D9C                   ADD         R9,R13
    00000FD6 6E03                   MOV         R0,R14
             tskcmd.c       1631    
             tskcmd.c       1632      // BCC計算
             tskcmd.c       1633      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
             tskcmd.c       1634    
             tskcmd.c       1635      // 10進数→16進数→ASC変換
             tskcmd.c       1636      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1637    
             tskcmd.c       1638      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
    00000FD8 E99E                   MOV         #-98,R9    ; H'FFFFFF9E
    00000FDA 64D3                   MOV         R13,R4
    00000FDC DB1E                   MOV.L       L1375+52,R11; _memcpy
    00000FDE 4B0B                   JSR         @R11
    00000FE0 6603                   MOV         R0,R6
    00000FE2 60E3                   MOV         R14,R0
    00000FE4 0DC4                   MOV.B       R12,@(R0,R13); cntl->buf[]
    00000FE6 65E3                   MOV         R14,R5
    00000FE8 7501                   ADD         #1,R5
    00000FEA 64D3                   MOV         R13,R4
             tskcmd.c       1639      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
    00000FEC DD1B                   MOV.L       L1375+56,R13; _CalcBCC
    00000FEE 4D0B                   JSR         @R13
    00000FF0 EC9F                   MOV         #-97,R12   ; H'FFFFFF9F
    00000FF2 65F3                   MOV         R15,R5
    00000FF4 7504                   ADD         #4,R5
    00000FF6 6403                   MOV         R0,R4
    00000FF8 D119                   MOV.L       L1375+60,R1; _DectoHexASC
    00000FFA 410B                   JSR         @R1
    00000FFC 66F3                   MOV         R15,R6
    00000FFE 699C                   EXTU.B      R9,R9
    00001000 3BF14004               MOV.B       @(4:12,R15),R11; bcch
    00001004 67A3                   MOV         R10,R7
    00001006 379C                   ADD         R9,R7
    00001008 60E3                   MOV         R14,R0
    0000100A 07B4                   MOV.B       R11,@(R0,R7); cntl->buf[]
    0000100C 6CCC                   EXTU.B      R12,R12
             tskcmd.c       1640      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    0000100E 7E04                   ADD         #4,R14
    00001010 3DF14000               MOV.B       @(0:12,R15),R13; bccl
    00001014 62A3                   MOV         R10,R2
    00001016 32CC                   ADD         R12,R2
    00001018 02D4                   MOV.B       R13,@(R0,R2); cntl->buf[]
    0000101A 3AE12025               MOV.L       R14,@(148:12,R10); (cntl)->siz
    0000101E              L242:
    0000101E 7F08                   ADD         #8,R15
    00001020 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1641    }
    00001022 006B                   RTS/N
    00001024              L1375:
    00001024 <00000000>             .DATA.L     __$rspbuf
    00001028 <00000000>             .DATA.L     _memset
    0000102C <00000000>             .DATA.L     L1504
    00001030 <00000000>             .DATA.L     _sprintf
    00001034 <00000000>             .DATA.L     L1505
    00001038 <00000000>             .DATA.L     L1506
    0000103C <00000000>             .DATA.L     L1507
    00001040 <00000000>             .DATA.L     L1508
    00001044 <00000000>             .DATA.L     L1509
    00001048 <00000000>             .DATA.L     L1510
    0000104C <00000000>             .DATA.L     L1502
    00001050 <00000000>             .DATA.L     L1503
    00001054 <00000000>             .DATA.L     _strlen
    00001058 <00000000>             .DATA.L     _memcpy
    0000105C <00000000>             .DATA.L     _CalcBCC
    00001060 <00000000>             .DATA.L     _DectoHexASC
    00001064 <00000000>             .DATA.L     L1511
    00001068 <00000000>             .DATA.L     L1512
             tskcmd.c       1642    /***********************************************************************
             tskcmd.c       1643    * 
             tskcmd.c       1644    * [概要]  応答データ作成(入力カウンタ読み出し用)
             tskcmd.c       1645    * [引数]  
             tskcmd.c       1646    * [戻値]  −
             tskcmd.c       1647    * 
             tskcmd.c       1648    ***********************************************************************/
             tskcmd.c       1649    void CmdMakeResponseCount( ST_CNTLDATA* cntl, UB anum, const char* p1, INT p2, INT p3, UINT p4 )
    0000106C              _CmdMakeResponseCount:           ; function: CmdMakeResponseCount
                                                           ; frame size=48
    0000106C 4BF0                   MOVMU.L     R11,@-R15
    0000106E 7FF8                   ADD         #-8,R15
    00001070 6D63                   MOV         R6,R13
    00001072 E63C                   MOV         #60,R6     ; H'0000003C
    00001074 DBA8                   MOV.L       L1376+2,R11; __$rspbuf
    00001076 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1650    {
             tskcmd.c       1651      INT  len;
             tskcmd.c       1652      UB bcc;
             tskcmd.c       1653      UB bcch;
             tskcmd.c       1654      UB bccl;
             tskcmd.c       1655    
             tskcmd.c       1656      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00001078 6E73                   MOV         R7,R14
    0000107A 6C43                   MOV         R4,R12
    0000107C D1A7                   MOV.L       L1376+6,R1 ; _memset
    0000107E 410B                   JSR         @R1
    00001080 64B3                   MOV         R11,R4
             tskcmd.c       1657      sprintf(rspbuf, "%s,%04X,%0d,%0u" , p1, p2, p3, p4);
    00001082 7FFC                   ADD         #-4,R15
    00001084 54F9                   MOV.L       @(36,R15),R4
    00001086 2F42                   MOV.L       R4,@R15
    00001088 7FFC                   ADD         #-4,R15
    0000108A 55F9                   MOV.L       @(36,R15),R5
    0000108C 2F52                   MOV.L       R5,@R15
    0000108E 2FE6                   MOV.L       R14,@-R15
    00001090 2FD6                   MOV.L       R13,@-R15
    00001092 D6A3                   MOV.L       L1376+10,R6; L1513
    00001094 2F66                   MOV.L       R6,@-R15
    00001096 D7A3                   MOV.L       L1376+14,R7; _sprintf
    00001098 470B                   JSR         @R7
    0000109A 64B3                   MOV         R11,R4
    0000109C 7F14                   ADD         #20,R15
             tskcmd.c       1658      
             tskcmd.c       1659      len = strlen(&rspbuf);
    0000109E DDA2                   MOV.L       L1376+18,R13; _strlen
    000010A0 4D0B                   JSR         @R13
    000010A2 64B3                   MOV         R11,R4
    000010A4 E19D                   MOV         #-99,R1    ; H'FFFFFF9D
             tskcmd.c       1660      cntl->rsp.buf[0] = STX;                         // STX
    000010A6 EE02                   MOV         #2,R14     ; H'00000002
    000010A8 611C                   EXTU.B      R1,R1
    000010AA 3CE1009C               MOV.B       R14,@(156:12,R12); cntl->buf[]
             tskcmd.c       1661      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
    000010AE 65B3                   MOV         R11,R5
             tskcmd.c       1662      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    000010B0 EB03                   MOV         #3,R11     ; H'00000003
    000010B2 6EC3                   MOV         R12,R14
    000010B4 3E1C                   ADD         R1,R14
    000010B6 6D03                   MOV         R0,R13
    000010B8 64E3                   MOV         R14,R4
    000010BA D79C                   MOV.L       L1376+22,R7; _memcpy
    000010BC 470B                   JSR         @R7
    000010BE 66D3                   MOV         R13,R6
    000010C0 60D3                   MOV         R13,R0
    000010C2 0EB4                   MOV.B       R11,@(R0,R14); cntl->buf[]
             tskcmd.c       1663    
             tskcmd.c       1664      // BCC計算
             tskcmd.c       1665      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
    000010C4 65D3                   MOV         R13,R5
    000010C6 64E3                   MOV         R14,R4
    000010C8 DE99                   MOV.L       L1376+26,R14; _CalcBCC
    000010CA 4E0B                   JSR         @R14
    000010CC 7501                   ADD         #1,R5
    000010CE 65F3                   MOV         R15,R5
    000010D0 7504                   ADD         #4,R5
    000010D2 6403                   MOV         R0,R4
             tskcmd.c       1666    
             tskcmd.c       1667      // 10進数→16進数→ASC変換
             tskcmd.c       1668      DectoHexASC( bcc, &bcch, &bccl );
    000010D4 D197                   MOV.L       L1376+30,R1; _DectoHexASC
    000010D6 410B                   JSR         @R1
    000010D8 66F3                   MOV         R15,R6
             tskcmd.c       1669    
             tskcmd.c       1670      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
    000010DA E49E                   MOV         #-98,R4    ; H'FFFFFF9E
    000010DC 62C3                   MOV         R12,R2
    000010DE 644C                   EXTU.B      R4,R4
             tskcmd.c       1671      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
    000010E0 E79F                   MOV         #-97,R7    ; H'FFFFFF9F
    000010E2 35F14004               MOV.B       @(4:12,R15),R5; bcch
    000010E6 324C                   ADD         R4,R2
    000010E8 60D3                   MOV         R13,R0
    000010EA 0254                   MOV.B       R5,@(R0,R2); cntl->buf[]
    000010EC 677C                   EXTU.B      R7,R7
    000010EE 3BF14000               MOV.B       @(0:12,R15),R11; bccl
    000010F2 62C3                   MOV         R12,R2
    000010F4 327C                   ADD         R7,R2
             tskcmd.c       1672      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    000010F6 7D04                   ADD         #4,R13
    000010F8 02B4                   MOV.B       R11,@(R0,R2); cntl->buf[]
    000010FA 3CD12025               MOV.L       R13,@(148:12,R12); (cntl)->siz
    000010FE 7F08                   ADD         #8,R15
    00001100 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       1673    }
    00001102 006B                   RTS/N
             tskcmd.c       1674    /***********************************************************************
             tskcmd.c       1675    * 
             tskcmd.c       1676    * [概要]  応答データ作成
             tskcmd.c       1677    * [引数]  
             tskcmd.c       1678    * [戻値]  −
             tskcmd.c       1679    * 
             tskcmd.c       1680    ***********************************************************************/
             tskcmd.c       1681    void CmdMakeResponseStr( ST_CNTLDATA* cntl, UB anum, const char* cmd, INT err, char* str2, char* str3 )
    00001104              _CmdMakeResponseStr:             ; function: CmdMakeResponseStr
                                                           ; frame size=56
    00001104 49F0                   MOVMU.L     R9,@-R15
    00001106 7FF8                   ADD         #-8,R15
    00001108 6B63                   MOV         R6,R11
    0000110A E63C                   MOV         #60,R6     ; H'0000003C
    0000110C 6E53                   MOV         R5,R14
    0000110E E500                   MOV         #0,R5      ; H'00000000
    00001110 D981                   MOV.L       L1376+2,R9 ; __$rspbuf
             tskcmd.c       1682    {
             tskcmd.c       1683      INT  len;
             tskcmd.c       1684      UB bcc;
             tskcmd.c       1685      UB bcch;
             tskcmd.c       1686      UB bccl;
             tskcmd.c       1687    
             tskcmd.c       1688      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00001112 6C73                   MOV         R7,R12
    00001114 6A43                   MOV         R4,R10
    00001116 D181                   MOV.L       L1376+6,R1 ; _memset
    00001118 410B                   JSR         @R1
    0000111A 6493                   MOV         R9,R4
             tskcmd.c       1689    
             tskcmd.c       1690      if(( anum < PARAM1 )||( anum > PARAM4 ))    return;
    0000111C 6DEC                   EXTU.B      R14,R13
    0000111E E201                   MOV         #1,R2      ; H'00000001
    00001120 3D23                   CMP/GE      R2,R13
    00001122 8B66                   BF          L253
    00001124 E204                   MOV         #4,R2      ; H'00000004
    00001126 3D27                   CMP/GT      R2,R13
    00001128 8963                   BT          L253
             tskcmd.c       1691    
             tskcmd.c       1692      if( anum == PARAM4 )        sprintf(rspbuf, "%s,%04X,%s,%s", cmd, err, str2, str3);
    0000112A 60D3                   MOV         R13,R0
    0000112C 8804                   CMP/EQ      #4,R0
    0000112E 8B0D                   BF          L256
    00001130 7FFC                   ADD         #-4,R15
    00001132 54FB                   MOV.L       @(44,R15),R4
    00001134 2F42                   MOV.L       R4,@R15
    00001136 7FFC                   ADD         #-4,R15
    00001138 55FB                   MOV.L       @(44,R15),R5
    0000113A 2F52                   MOV.L       R5,@R15
    0000113C 2FC6                   MOV.L       R12,@-R15
    0000113E 2FB6                   MOV.L       R11,@-R15
    00001140 D67D                   MOV.L       L1376+34,R6; L1514
    00001142 2F66                   MOV.L       R6,@-R15
    00001144 D777                   MOV.L       L1376+14,R7; _sprintf
    00001146 470B                   JSR         @R7
    00001148 6493                   MOV         R9,R4
    0000114A 7F14                   ADD         #20,R15
    0000114C              L256:
             tskcmd.c       1693      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%04X,%s",    cmd, err, str2);
    0000114C 60D3                   MOV         R13,R0
    0000114E 8803                   CMP/EQ      #3,R0
    00001150 8B0A                   BF          L258
    00001152 7FFC                   ADD         #-4,R15
    00001154 5EFA                   MOV.L       @(40,R15),R14
    00001156 2FE2                   MOV.L       R14,@R15
    00001158 2FC6                   MOV.L       R12,@-R15
    0000115A 2FB6                   MOV.L       R11,@-R15
    0000115C D177                   MOV.L       L1376+38,R1; L1515
    0000115E 2F16                   MOV.L       R1,@-R15
    00001160 D570                   MOV.L       L1376+14,R5; _sprintf
    00001162 450B                   JSR         @R5
    00001164 6493                   MOV         R9,R4
    00001166 7F10                   ADD         #16,R15
    00001168              L258:
             tskcmd.c       1694      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%04X",       cmd, err);
    00001168 60D3                   MOV         R13,R0
    0000116A 8802                   CMP/EQ      #2,R0
    0000116C 8B07                   BF          L260
    0000116E 2FC6                   MOV.L       R12,@-R15
    00001170 2FB6                   MOV.L       R11,@-R15
    00001172 D673                   MOV.L       L1376+42,R6; L1502
    00001174 2F66                   MOV.L       R6,@-R15
    00001176 D76B                   MOV.L       L1376+14,R7; _sprintf
    00001178 470B                   JSR         @R7
    0000117A 6493                   MOV         R9,R4
    0000117C 7F0C                   ADD         #12,R15
    0000117E              L260:
             tskcmd.c       1695      if( anum == PARAM1 )        sprintf(rspbuf, "%s",            cmd);
    0000117E 60D3                   MOV         R13,R0
    00001180 8801                   CMP/EQ      #1,R0
    00001182 8B06                   BF          L262
    00001184 2FB6                   MOV.L       R11,@-R15
    00001186 DB6F                   MOV.L       L1376+46,R11; L1503
    00001188 2FB6                   MOV.L       R11,@-R15
    0000118A DC66                   MOV.L       L1376+14,R12; _sprintf
    0000118C 4C0B                   JSR         @R12
    0000118E 6493                   MOV         R9,R4
    00001190 7F08                   ADD         #8,R15
    00001192              L262:
             tskcmd.c       1696    
             tskcmd.c       1697      len = strlen(&rspbuf);
    00001192 DD65                   MOV.L       L1376+18,R13; _strlen
    00001194 4D0B                   JSR         @R13
    00001196 6493                   MOV         R9,R4
    00001198 E49D                   MOV         #-99,R4    ; H'FFFFFF9D
             tskcmd.c       1698      cntl->rsp.buf[0] = STX;                         // STX
    0000119A E102                   MOV         #2,R1      ; H'00000002
    0000119C 644C                   EXTU.B      R4,R4
    0000119E 3A11009C               MOV.B       R1,@(156:12,R10); cntl->buf[]
             tskcmd.c       1699      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
    000011A2 6593                   MOV         R9,R5
             tskcmd.c       1700      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    000011A4 E903                   MOV         #3,R9      ; H'00000003
    000011A6 6BA3                   MOV         R10,R11
    000011A8 3B4C                   ADD         R4,R11
    000011AA 6E03                   MOV         R0,R14
    000011AC 64B3                   MOV         R11,R4
    000011AE D75F                   MOV.L       L1376+22,R7; _memcpy
    000011B0 470B                   JSR         @R7
    000011B2 6603                   MOV         R0,R6
    000011B4 60E3                   MOV         R14,R0
    000011B6 0B94                   MOV.B       R9,@(R0,R11); cntl->buf[]
             tskcmd.c       1701    
             tskcmd.c       1702      // BCC計算
             tskcmd.c       1703      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
    000011B8 65E3                   MOV         R14,R5
    000011BA 64B3                   MOV         R11,R4
    000011BC DB5C                   MOV.L       L1376+26,R11; _CalcBCC
    000011BE 4B0B                   JSR         @R11
    000011C0 7501                   ADD         #1,R5
    000011C2 65F3                   MOV         R15,R5
    000011C4 7504                   ADD         #4,R5
    000011C6 6403                   MOV         R0,R4
             tskcmd.c       1704    
             tskcmd.c       1705      // 10進数→16進数→ASC変換
             tskcmd.c       1706      DectoHexASC( bcc, &bcch, &bccl );
    000011C8 DC5A                   MOV.L       L1376+30,R12; _DectoHexASC
    000011CA 4C0B                   JSR         @R12
    000011CC 66F3                   MOV         R15,R6
             tskcmd.c       1707    
             tskcmd.c       1708      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
    000011CE E29E                   MOV         #-98,R2    ; H'FFFFFF9E
    000011D0 61A3                   MOV         R10,R1
    000011D2 622C                   EXTU.B      R2,R2
             tskcmd.c       1709      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
    000011D4 E79F                   MOV         #-97,R7    ; H'FFFFFF9F
    000011D6 35F14004               MOV.B       @(4:12,R15),R5; bcch
    000011DA 312C                   ADD         R2,R1
    000011DC 60E3                   MOV         R14,R0
    000011DE 0154                   MOV.B       R5,@(R0,R1); cntl->buf[]
    000011E0 677C                   EXTU.B      R7,R7
    000011E2 39F14000               MOV.B       @(0:12,R15),R9; bccl
    000011E6 62A3                   MOV         R10,R2
    000011E8 327C                   ADD         R7,R2
             tskcmd.c       1710      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    000011EA 7E04                   ADD         #4,R14
    000011EC 0294                   MOV.B       R9,@(R0,R2); cntl->buf[]
    000011EE 3AE12025               MOV.L       R14,@(148:12,R10); (cntl)->siz
    000011F2              L253:
    000011F2 7F08                   ADD         #8,R15
    000011F4 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1711    }
    000011F6 006B                   RTS/N
             tskcmd.c       1712    /***********************************************************************
             tskcmd.c       1713    * 
             tskcmd.c       1714    * [概要]  受信パラメータチェック
             tskcmd.c       1715    * [引数]  msg:コマンドＩＤ、anum:パラメータ数、args:パラメータデータアドレス
             tskcmd.c       1716    * [戻値]  状態
             tskcmd.c       1717    * 
             tskcmd.c       1718    ***********************************************************************/
             tskcmd.c       1719    static ER ParamDataCheck( UB msg , UB anum ,  const char** args )
    000011F8              __$ParamDataCheck:               ; function: __$ParamDataCheck
                                                           ; frame size=20
    000011F8 4BF0                   MOVMU.L     R11,@-R15
             tskcmd.c       1720    {
             tskcmd.c       1721      INT ParDat;
             tskcmd.c       1722      INT Loop;
             tskcmd.c       1723      INT argnum;
             tskcmd.c       1724    
             tskcmd.c       1725      // パラメータ過不足チェック
             tskcmd.c       1726      if( anum < DATCHK_TBL[msg].argnum )     return( E_PAR_SHORTG );     // パラメータ数過不足
    000011FA 6163                   MOV         R6,R1
    000011FC 664C                   EXTU.B      R4,R6
    000011FE 00000324               MOVI20      #804,R0    ; H'00000324
    00001202 4680                   MULR        R0,R6
    00001204 D750                   MOV.L       L1376+50,R7; _DATCHK_TBL
    00001206 6063                   MOV         R6,R0
    00001208 027C                   MOV.B       @(R0,R7),R2; DATCHK_TBL[].argnum
    0000120A 6B2C                   EXTU.B      R2,R11
    0000120C 625C                   EXTU.B      R5,R2
    0000120E 32B3                   CMP/GE      R11,R2
    00001210 8902                   BT          L265
    00001212 E007                   MOV         #7,R0      ; H'00000007
    00001214 A028                   BRA         L266
    00001216 4018                   SHLL8       R0
    00001218              L265:
             tskcmd.c       1727    
             tskcmd.c       1728      // パラメータテーブル定義分の数値チェック
             tskcmd.c       1729      argnum = DATCHK_TBL[msg].argnum;
             tskcmd.c       1730    
             tskcmd.c       1731      // コマンド以外のパラメータチェック
             tskcmd.c       1732      if( argnum > 1 )
    00001218 E201                   MOV         #1,R2      ; H'00000001
    0000121A 3B27                   CMP/GT      R2,R11
    0000121C 8B23                   BF          L268
    0000121E 376C                   ADD         R6,R7
    00001220 7104                   ADD         #4,R1
    00001222 770C                   ADD         #12,R7
    00001224 6C13                   MOV         R1,R12
    00001226 6D73                   MOV         R7,R13
             tskcmd.c       1733      {
             tskcmd.c       1734          // anumは、コマンド分も含まれたパラメータ数なので、コマンド以外のパラメータの上下限についてチェック
             tskcmd.c       1735          for( Loop = PARAM1; Loop < argnum; Loop++ )
    00001228 EE01                   MOV         #1,R14     ; H'00000001
    0000122A              L269:
    0000122A 3EB3                   CMP/GE      R11,R14
    0000122C 891B                   BT          L268
             tskcmd.c       1736          {
             tskcmd.c       1737              if( 
    0000122E 62D2                   MOV.L       @R13,R2    ; DATCHK_TBL[].range[].min
    00001230 2228                   TST         R2,R2
    00001232 8B02                   BF          L272
    00001234 52D1                   MOV.L       @(4,R13),R2; DATCHK_TBL[].range[].max
    00001236 2228                   TST         R2,R2
    00001238 890C                   BT          L273
    0000123A              L272:
             tskcmd.c       1738                  ( DATCHK_TBL[msg].range[Loop].min != CLR )||
             tskcmd.c       1739                  ( DATCHK_TBL[msg].range[Loop].max != CLR )
             tskcmd.c       1740              )
             tskcmd.c       1741              {
             tskcmd.c       1742                  // パラメータ範囲チェック
             tskcmd.c       1743                  ParDat = Atoi( args[Loop], N_DEC, sizeof(INT), N_SIG );
    0000123A 64C2                   MOV.L       @R12,R4    ; args[]
    0000123C E701                   MOV         #1,R7      ; H'00000001
    0000123E E604                   MOV         #4,R6      ; H'00000004
    00001240 D142                   MOV.L       L1376+54,R1; _Atoi
    00001242 410B                   JSR         @R1
    00001244 E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       1744                  if( 
    00001246 62D2                   MOV.L       @R13,R2    ; DATCHK_TBL[].range[].min
    00001248 3023                   CMP/GE      R2,R0
    0000124A 8F07                   BF/S        L275
    0000124C 6603                   MOV         R0,R6
    0000124E 52D1                   MOV.L       @(4,R13),R2; DATCHK_TBL[].range[].max
    00001250 3627                   CMP/GT      R2,R6
    00001252 8903                   BT          L275
    00001254              L273:
    00001254 7E01                   ADD         #1,R14
    00001256 7D08                   ADD         #8,R13
    00001258 AFE7                   BRA         L269
    0000125A 7C04                   ADD         #4,R12
    0000125C              L275:
             tskcmd.c       1745                      ( ParDat < DATCHK_TBL[msg].range[Loop].min )||
             tskcmd.c       1746                      ( ParDat > DATCHK_TBL[msg].range[Loop].max )
             tskcmd.c       1747                  )
             tskcmd.c       1748                  {
             tskcmd.c       1749                      return( ( E_PAR_OUTRNG + Loop ));                   // パラメータ範囲異常
    0000125C E208                   MOV         #8,R2      ; H'00000008
    0000125E 4218                   SHLL8       R2
    00001260 3E2C                   ADD         R2,R14
    00001262 A001                   BRA         L266
    00001264 60E3                   MOV         R14,R0
    00001266              L268:
             tskcmd.c       1750                  }
             tskcmd.c       1751              }
             tskcmd.c       1752          }
             tskcmd.c       1753      }
             tskcmd.c       1754    
             tskcmd.c       1755      return( E_SUCCESS );
    00001266 E000                   MOV         #0,R0      ; H'00000000
    00001268              L266:
    00001268 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       1756    }
    0000126A 006B                   RTS/N
             tskcmd.c       1757    
             tskcmd.c       1758    
             tskcmd.c       1759    
             tskcmd.c       1760    //
             tskcmd.c       1761    //
             tskcmd.c       1762    //
             tskcmd.c       1763    //
             tskcmd.c       1764    //
             tskcmd.c       1765    //
             tskcmd.c       1766    //
             tskcmd.c       1767    //
             tskcmd.c       1768    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       1769    /*  基本コマンド   ここから                                                                                                                                                                                     基本コマンド   */
             tskcmd.c       1770    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       1771    
             tskcmd.c       1772    /***********************************************************************
             tskcmd.c       1773    * 
             tskcmd.c       1774    * [概要]  ダミールーチン
             tskcmd.c       1775    * [引数]  cmd:コマンドリクエスト電文
             tskcmd.c       1776    * [戻値]  −
             tskcmd.c       1777    * 
             tskcmd.c       1778    ***********************************************************************/
             tskcmd.c       1779    static void CmdDummy( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000126C              __$CmdDummy:                     ; function: __$CmdDummy
                                                           ; frame size=0
             tskcmd.c       1780    {
             tskcmd.c       1781      // 必要であればエラー出力
             tskcmd.c       1782    }
    0000126C 006B                   RTS/N
             tskcmd.c       1783    
             tskcmd.c       1784    
             tskcmd.c       1785    static    UB temp1;
             tskcmd.c       1786    static    UB temp2;
             tskcmd.c       1787    
             tskcmd.c       1788    /***********************************************************************
             tskcmd.c       1789    *
             tskcmd.c       1790    * [概要]  
             tskcmd.c       1791    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1792    * [戻値]  -
             tskcmd.c       1793    * 
             tskcmd.c       1794    ***********************************************************************/
             tskcmd.c       1795    static void CmdTmpSet  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000126E              __$CmdTmpSet:                    ; function: __$CmdTmpSet
                                                           ; frame size=28
    0000126E 4F22                   STS.L       PR,@-R15
             tskcmd.c       1796    {
             tskcmd.c       1797      temp1 = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001270 5461                   MOV.L       @(4,R6),R4 ; args[]
    00001272 E701                   MOV         #1,R7      ; H'00000001
    00001274 E50A                   MOV         #10,R5     ; H'0000000A
    00001276 D135                   MOV.L       L1376+54,R1; _Atoi
    00001278 410B                   JSR         @R1
    0000127A 6673                   MOV         R7,R6
    0000127C D234                   MOV.L       L1376+58,R2; __$temp1
             tskcmd.c       1798      
             tskcmd.c       1799      mbx_send    (
             tskcmd.c       1800                      ID_TSK_CMD,       // tskid
             tskcmd.c       1801                      ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       1802                      ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       1803                      NO_DATA,             // prid1
             tskcmd.c       1804                      NO_DATA,             // bcid
             tskcmd.c       1805                      ID_MSG_TMPSET_HS,    // msgid
             tskcmd.c       1806                      NO_DATA,             // sts
             tskcmd.c       1807                      NO_DATA,             // sts2/inf2
             tskcmd.c       1808                      (UB *)&temp1,        // data
             tskcmd.c       1809                      sizeof( temp1 )      // siz
             tskcmd.c       1810                  );
    0000127E E401                   MOV         #1,R4      ; H'00000001
    00001280 2200                   MOV.B       R0,@R2     ; temp1
    00001282 2F46                   MOV.L       R4,@-R15
    00001284 2F26                   MOV.L       R2,@-R15
    00001286 E4FF                   MOV         #-1,R4     ; H'FFFFFFFF
    00001288 644C                   EXTU.B      R4,R4
    0000128A 6743                   MOV         R4,R7
    0000128C 2F46                   MOV.L       R4,@-R15
    0000128E 2F46                   MOV.L       R4,@-R15
    00001290 E11A                   MOV         #26,R1     ; H'0000001A
    00001292 2F16                   MOV.L       R1,@-R15
    00001294 2F46                   MOV.L       R4,@-R15
    00001296 E60E                   MOV         #14,R6     ; H'0000000E
    00001298 E50D                   MOV         #13,R5     ; H'0000000D
    0000129A D22E                   MOV.L       L1376+62,R2; _mbx_send
    0000129C 420B                   JSR         @R2
    0000129E E405                   MOV         #5,R4      ; H'00000005
    000012A0 7F18                   ADD         #24,R15
    000012A2 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1811    }
    000012A4 006B                   RTS/N
             tskcmd.c       1812    
             tskcmd.c       1813    /***********************************************************************
             tskcmd.c       1814    *
             tskcmd.c       1815    * [概要]  
             tskcmd.c       1816    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1817    * [戻値]  -
             tskcmd.c       1818    * 
             tskcmd.c       1819    ***********************************************************************/
             tskcmd.c       1820    static void CmdTmpGet  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000012A6              __$CmdTmpGet:                    ; function: __$CmdTmpGet
                                                           ; frame size=32
    000012A6 4F22                   STS.L       PR,@-R15
    000012A8 7FFC                   ADD         #-4,R15
             tskcmd.c       1821    {
             tskcmd.c       1822      UB dummy = 0;
    000012AA E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1823      
             tskcmd.c       1824      mbx_send    (
             tskcmd.c       1825                      ID_TSK_CMD,       // tskid
             tskcmd.c       1826                      ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       1827                      ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       1828                      NO_DATA,             // prid1
             tskcmd.c       1829                      NO_DATA,             // bcid
             tskcmd.c       1830                      ID_MSG_TMPGET_HS,    // msgid
             tskcmd.c       1831                      NO_DATA,             // sts/inf
             tskcmd.c       1832                      NO_DATA,             // sts2/inf2
             tskcmd.c       1833                      (UB *)&dummy,        // data
             tskcmd.c       1834                      sizeof( dummy )      // siz
             tskcmd.c       1835                  );
    000012AC E101                   MOV         #1,R1      ; H'00000001
    000012AE 0F04                   MOV.B       R0,@(R0,R15); dummy
    000012B0 2F16                   MOV.L       R1,@-R15
    000012B2 64F3                   MOV         R15,R4
    000012B4 7404                   ADD         #4,R4
    000012B6 2F46                   MOV.L       R4,@-R15
    000012B8 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000012BA 655C                   EXTU.B      R5,R5
    000012BC 6753                   MOV         R5,R7
    000012BE 2F56                   MOV.L       R5,@-R15
    000012C0 2F56                   MOV.L       R5,@-R15
    000012C2 E61B                   MOV         #27,R6     ; H'0000001B
    000012C4 2F66                   MOV.L       R6,@-R15
    000012C6 2F56                   MOV.L       R5,@-R15
    000012C8 E60E                   MOV         #14,R6     ; H'0000000E
    000012CA E50D                   MOV         #13,R5     ; H'0000000D
    000012CC D221                   MOV.L       L1376+62,R2; _mbx_send
    000012CE 420B                   JSR         @R2
    000012D0 E405                   MOV         #5,R4      ; H'00000005
    000012D2 7F1C                   ADD         #28,R15
    000012D4 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1836    }
    000012D6 006B                   RTS/N
             tskcmd.c       1837    
             tskcmd.c       1838    /***********************************************************************
             tskcmd.c       1839    *
             tskcmd.c       1840    * [概要]  
             tskcmd.c       1841    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1842    * [戻値]  -
             tskcmd.c       1843    * 
             tskcmd.c       1844    ***********************************************************************/
             tskcmd.c       1845    static void CmdVini   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000012D8              __$CmdVini:                      ; function: __$CmdVini
                                                           ; frame size=32
    000012D8 4F22                   STS.L       PR,@-R15
    000012DA 7FFC                   ADD         #-4,R15
             tskcmd.c       1846    {
             tskcmd.c       1847      ER  result = E_SUCCESS;
             tskcmd.c       1848      UB dumy = CLR;
    000012DC E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1849      
             tskcmd.c       1850      //  データチェック
             tskcmd.c       1851      result = ParamDataCheck( ID_MSG_VALVEOUT_HS, anum, args );
    000012DE 655C                   EXTU.B      R5,R5
    000012E0 0F04                   MOV.B       R0,@(R0,R15); dumy
    000012E2 BF89                   BSR         __$ParamDataCheck
    000012E4 E422                   MOV         #34,R4     ; H'00000022
             tskcmd.c       1852    
             tskcmd.c       1853      //  データ正常か
             tskcmd.c       1854      if( result == E_SUCCESS )
    000012E6 2008                   TST         R0,R0
    000012E8 8B12                   BF          L281
             tskcmd.c       1855      {
             tskcmd.c       1856          mbx_send    (
             tskcmd.c       1857                          ID_TSK_CMD,        // tskid
             tskcmd.c       1858                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1859                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1860                          NO_DATA,             // prid1
             tskcmd.c       1861                          NO_DATA,             // bcid
             tskcmd.c       1862                          ID_MSG_VALVEINI_HS,  // msgid
             tskcmd.c       1863                          NO_DATA,             // sts
             tskcmd.c       1864                          NO_DATA,             // sts2
             tskcmd.c       1865                          (UB *)&dumy,         // data
             tskcmd.c       1866                          sizeof( dumy )       // siz
             tskcmd.c       1867                      );
    000012EA E101                   MOV         #1,R1      ; H'00000001
    000012EC 2F16                   MOV.L       R1,@-R15
    000012EE 64F3                   MOV         R15,R4
    000012F0 7404                   ADD         #4,R4
    000012F2 2F46                   MOV.L       R4,@-R15
    000012F4 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000012F6 655C                   EXTU.B      R5,R5
    000012F8 6753                   MOV         R5,R7
    000012FA 2F56                   MOV.L       R5,@-R15
    000012FC 2F56                   MOV.L       R5,@-R15
    000012FE E61D                   MOV         #29,R6     ; H'0000001D
    00001300 2F66                   MOV.L       R6,@-R15
    00001302 2F56                   MOV.L       R5,@-R15
    00001304 E60D                   MOV         #13,R6     ; H'0000000D
    00001306 E50C                   MOV         #12,R5     ; H'0000000C
    00001308 D212                   MOV.L       L1376+62,R2; _mbx_send
    0000130A 420B                   JSR         @R2
    0000130C E405                   MOV         #5,R4      ; H'00000005
    0000130E 7F18                   ADD         #24,R15
    00001310              L281:
    00001310 7F04                   ADD         #4,R15
    00001312 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1868      }
             tskcmd.c       1869    }
    00001314 006B                   RTS/N
    00001316              L1376:
    00001316 00000002               .RES.W      1
    00001318 <00000000>             .DATA.L     __$rspbuf
    0000131C <00000000>             .DATA.L     _memset
    00001320 <00000000>             .DATA.L     L1513
    00001324 <00000000>             .DATA.L     _sprintf
    00001328 <00000000>             .DATA.L     _strlen
    0000132C <00000000>             .DATA.L     _memcpy
    00001330 <00000000>             .DATA.L     _CalcBCC
    00001334 <00000000>             .DATA.L     _DectoHexASC
    00001338 <00000000>             .DATA.L     L1514
    0000133C <00000000>             .DATA.L     L1515
    00001340 <00000000>             .DATA.L     L1502
    00001344 <00000000>             .DATA.L     L1503
    00001348 <00000000>             .DATA.L     _DATCHK_TBL
    0000134C <00000000>             .DATA.L     _Atoi
    00001350 <00000000>             .DATA.L     __$temp1
    00001354 <00000000>             .DATA.L     _mbx_send
             tskcmd.c       1870    
             tskcmd.c       1871    /***********************************************************************
             tskcmd.c       1872    *
             tskcmd.c       1873    * [概要]  
             tskcmd.c       1874    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1875    * [戻値]  -
             tskcmd.c       1876    * 
             tskcmd.c       1877    ***********************************************************************/
             tskcmd.c       1878    static void CmdPini   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001358              __$CmdPini:                      ; function: __$CmdPini
                                                           ; frame size=32
    00001358 4F22                   STS.L       PR,@-R15
    0000135A 7FFC                   ADD         #-4,R15
             tskcmd.c       1879    {
             tskcmd.c       1880      ER  result = E_SUCCESS;
             tskcmd.c       1881      UB dumy = CLR;
    0000135C E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1882      
             tskcmd.c       1883      //  データチェック
             tskcmd.c       1884      result = ParamDataCheck( ID_MSG_VALVEOUT_HS, anum, args );
    0000135E 655C                   EXTU.B      R5,R5
    00001360 0F04                   MOV.B       R0,@(R0,R15); dumy
    00001362 BF49                   BSR         __$ParamDataCheck
    00001364 E422                   MOV         #34,R4     ; H'00000022
             tskcmd.c       1885    
             tskcmd.c       1886      //  データ正常か
             tskcmd.c       1887      if( result == E_SUCCESS )
    00001366 2008                   TST         R0,R0
    00001368 8B12                   BF          L284
             tskcmd.c       1888      {
             tskcmd.c       1889          mbx_send    (
             tskcmd.c       1890                          ID_TSK_CMD,        // tskid
             tskcmd.c       1891                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1892                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1893                          NO_DATA,             // prid1
             tskcmd.c       1894                          NO_DATA,             // bcid
             tskcmd.c       1895                          ID_MSG_PRESSINI_HS,  // msgid
             tskcmd.c       1896                          NO_DATA,             // sts
             tskcmd.c       1897                          NO_DATA,             // sts2
             tskcmd.c       1898                          (UB *)&dumy,         // data
             tskcmd.c       1899                          sizeof( dumy )       // siz
             tskcmd.c       1900                      );
    0000136A E101                   MOV         #1,R1      ; H'00000001
    0000136C 2F16                   MOV.L       R1,@-R15
    0000136E 64F3                   MOV         R15,R4
    00001370 7404                   ADD         #4,R4
    00001372 2F46                   MOV.L       R4,@-R15
    00001374 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001376 655C                   EXTU.B      R5,R5
    00001378 6753                   MOV         R5,R7
    0000137A 2F56                   MOV.L       R5,@-R15
    0000137C 2F56                   MOV.L       R5,@-R15
    0000137E E61E                   MOV         #30,R6     ; H'0000001E
    00001380 2F66                   MOV.L       R6,@-R15
    00001382 2F56                   MOV.L       R5,@-R15
    00001384 E60D                   MOV         #13,R6     ; H'0000000D
    00001386 E50C                   MOV         #12,R5     ; H'0000000C
    00001388 D2AC                   MOV.L       L1377,R2   ; _mbx_send
    0000138A 420B                   JSR         @R2
    0000138C E405                   MOV         #5,R4      ; H'00000005
    0000138E 7F18                   ADD         #24,R15
    00001390              L284:
    00001390 7F04                   ADD         #4,R15
    00001392 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1901      }
             tskcmd.c       1902    }
    00001394 006B                   RTS/N
             tskcmd.c       1903    
             tskcmd.c       1904    /***********************************************************************
             tskcmd.c       1905    *
             tskcmd.c       1906    * [概要]  
             tskcmd.c       1907    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1908    * [戻値]  -
             tskcmd.c       1909    * 
             tskcmd.c       1910    ***********************************************************************/
             tskcmd.c       1911    static void CmdPren   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001396              __$CmdPren:                      ; function: __$CmdPren
                                                           ; frame size=32
    00001396 4F22                   STS.L       PR,@-R15
    00001398 7FFC                   ADD         #-4,R15
             tskcmd.c       1912    {
             tskcmd.c       1913      ER  result = E_SUCCESS;
             tskcmd.c       1914      UB dumy = CLR;
    0000139A E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1915      
             tskcmd.c       1916      //  データチェック
             tskcmd.c       1917      result = ParamDataCheck( ID_MSG_PRESSREN_HS, anum, args );
    0000139C 655C                   EXTU.B      R5,R5
    0000139E 0F04                   MOV.B       R0,@(R0,R15); dumy
    000013A0 BF2A                   BSR         __$ParamDataCheck
    000013A2 E41F                   MOV         #31,R4     ; H'0000001F
             tskcmd.c       1918    
             tskcmd.c       1919      //  データ正常か
             tskcmd.c       1920      if( result == E_SUCCESS )
    000013A4 2008                   TST         R0,R0
    000013A6 8B12                   BF          L287
             tskcmd.c       1921      {
             tskcmd.c       1922          mbx_send    (
             tskcmd.c       1923                          ID_TSK_CMD,        // tskid
             tskcmd.c       1924                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1925                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1926                          NO_DATA,             // prid1
             tskcmd.c       1927                          NO_DATA,             // bcid
             tskcmd.c       1928                          ID_MSG_PRESSREN_HS,  // msgid
             tskcmd.c       1929                          NO_DATA,             // sts
             tskcmd.c       1930                          NO_DATA,             // sts2
             tskcmd.c       1931                          (UB *)&dumy,         // data
             tskcmd.c       1932                          sizeof( dumy )       // siz
             tskcmd.c       1933                      );
    000013A8 E101                   MOV         #1,R1      ; H'00000001
    000013AA 2F16                   MOV.L       R1,@-R15
    000013AC 64F3                   MOV         R15,R4
    000013AE 7404                   ADD         #4,R4
    000013B0 2F46                   MOV.L       R4,@-R15
    000013B2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000013B4 655C                   EXTU.B      R5,R5
    000013B6 6753                   MOV         R5,R7
    000013B8 2F56                   MOV.L       R5,@-R15
    000013BA 2F56                   MOV.L       R5,@-R15
    000013BC E61F                   MOV         #31,R6     ; H'0000001F
    000013BE 2F66                   MOV.L       R6,@-R15
    000013C0 2F56                   MOV.L       R5,@-R15
    000013C2 E60D                   MOV         #13,R6     ; H'0000000D
    000013C4 E50C                   MOV         #12,R5     ; H'0000000C
    000013C6 D29D                   MOV.L       L1377,R2   ; _mbx_send
    000013C8 420B                   JSR         @R2
    000013CA E405                   MOV         #5,R4      ; H'00000005
    000013CC 7F18                   ADD         #24,R15
    000013CE              L287:
    000013CE 7F04                   ADD         #4,R15
    000013D0 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1934      }
             tskcmd.c       1935    }
    000013D2 006B                   RTS/N
             tskcmd.c       1936    
             tskcmd.c       1937    /***********************************************************************
             tskcmd.c       1938    *
             tskcmd.c       1939    * [概要]  
             tskcmd.c       1940    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1941    * [戻値]  -
             tskcmd.c       1942    * 
             tskcmd.c       1943    ***********************************************************************/
             tskcmd.c       1944    static void CmdPtan   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000013D4              __$CmdPtan:                      ; function: __$CmdPtan
                                                           ; frame size=32
    000013D4 4F22                   STS.L       PR,@-R15
    000013D6 7FFC                   ADD         #-4,R15
             tskcmd.c       1945    {
             tskcmd.c       1946      ER  result = E_SUCCESS;
             tskcmd.c       1947      UB dumy = CLR;
    000013D8 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1948      
             tskcmd.c       1949      //  データチェック
             tskcmd.c       1950      result = ParamDataCheck( ID_MSG_PRESSTAN_HS, anum, args );
    000013DA 655C                   EXTU.B      R5,R5
    000013DC 0F04                   MOV.B       R0,@(R0,R15); dumy
    000013DE BF0B                   BSR         __$ParamDataCheck
    000013E0 E420                   MOV         #32,R4     ; H'00000020
             tskcmd.c       1951    
             tskcmd.c       1952      //  データ正常か
             tskcmd.c       1953      if( result == E_SUCCESS )
    000013E2 2008                   TST         R0,R0
    000013E4 8B12                   BF          L290
             tskcmd.c       1954      {
             tskcmd.c       1955          mbx_send    (
             tskcmd.c       1956                          ID_TSK_CMD,        // tskid
             tskcmd.c       1957                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1958                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1959                          NO_DATA,             // prid1
             tskcmd.c       1960                          NO_DATA,             // bcid
             tskcmd.c       1961                          ID_MSG_PRESSTAN_HS,  // msgid
             tskcmd.c       1962                          NO_DATA,             // sts
             tskcmd.c       1963                          NO_DATA,             // sts2
             tskcmd.c       1964                          (UB *)&dumy,         // data
             tskcmd.c       1965                          sizeof( dumy )       // siz
             tskcmd.c       1966                      );
    000013E6 E101                   MOV         #1,R1      ; H'00000001
    000013E8 2F16                   MOV.L       R1,@-R15
    000013EA 64F3                   MOV         R15,R4
    000013EC 7404                   ADD         #4,R4
    000013EE 2F46                   MOV.L       R4,@-R15
    000013F0 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000013F2 655C                   EXTU.B      R5,R5
    000013F4 6753                   MOV         R5,R7
    000013F6 2F56                   MOV.L       R5,@-R15
    000013F8 2F56                   MOV.L       R5,@-R15
    000013FA E620                   MOV         #32,R6     ; H'00000020
    000013FC 2F66                   MOV.L       R6,@-R15
    000013FE 2F56                   MOV.L       R5,@-R15
    00001400 E60D                   MOV         #13,R6     ; H'0000000D
    00001402 E50C                   MOV         #12,R5     ; H'0000000C
    00001404 D28D                   MOV.L       L1377,R2   ; _mbx_send
    00001406 420B                   JSR         @R2
    00001408 E405                   MOV         #5,R4      ; H'00000005
    0000140A 7F18                   ADD         #24,R15
    0000140C              L290:
    0000140C 7F04                   ADD         #4,R15
    0000140E 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1967      }
             tskcmd.c       1968    }
    00001410 006B                   RTS/N
             tskcmd.c       1969    
             tskcmd.c       1970    /***********************************************************************
             tskcmd.c       1971    *
             tskcmd.c       1972    * [概要]  
             tskcmd.c       1973    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1974    * [戻値]  -
             tskcmd.c       1975    * 
             tskcmd.c       1976    ***********************************************************************/
             tskcmd.c       1977    static void CmdPcan   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001412              __$CmdPcan:                      ; function: __$CmdPcan
                                                           ; frame size=32
    00001412 4F22                   STS.L       PR,@-R15
    00001414 7FFC                   ADD         #-4,R15
             tskcmd.c       1978    {
             tskcmd.c       1979      ER  result = E_SUCCESS;
             tskcmd.c       1980      UB dumy = CLR;
    00001416 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1981      
             tskcmd.c       1982      //  データチェック
             tskcmd.c       1983      result = ParamDataCheck( ID_MSG_PRESSCAN_HS, anum, args );
    00001418 655C                   EXTU.B      R5,R5
    0000141A 0F04                   MOV.B       R0,@(R0,R15); dumy
    0000141C BEEC                   BSR         __$ParamDataCheck
    0000141E E421                   MOV         #33,R4     ; H'00000021
             tskcmd.c       1984    
             tskcmd.c       1985      //  データ正常か
             tskcmd.c       1986      if( result == E_SUCCESS )
    00001420 2008                   TST         R0,R0
    00001422 8B12                   BF          L293
             tskcmd.c       1987      {
             tskcmd.c       1988          mbx_send    (
             tskcmd.c       1989                          ID_TSK_CMD,        // tskid
             tskcmd.c       1990                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1991                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1992                          NO_DATA,             // prid1
             tskcmd.c       1993                          NO_DATA,             // bcid
             tskcmd.c       1994                          ID_MSG_PRESSCAN_HS,  // msgid
             tskcmd.c       1995                          NO_DATA,             // sts
             tskcmd.c       1996                          NO_DATA,             // sts2
             tskcmd.c       1997                          (UB *)&dumy,         // data
             tskcmd.c       1998                          sizeof( dumy )       // siz
             tskcmd.c       1999                      );
    00001424 E101                   MOV         #1,R1      ; H'00000001
    00001426 2F16                   MOV.L       R1,@-R15
    00001428 64F3                   MOV         R15,R4
    0000142A 7404                   ADD         #4,R4
    0000142C 2F46                   MOV.L       R4,@-R15
    0000142E E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001430 655C                   EXTU.B      R5,R5
    00001432 6753                   MOV         R5,R7
    00001434 2F56                   MOV.L       R5,@-R15
    00001436 2F56                   MOV.L       R5,@-R15
    00001438 E621                   MOV         #33,R6     ; H'00000021
    0000143A 2F66                   MOV.L       R6,@-R15
    0000143C 2F56                   MOV.L       R5,@-R15
    0000143E E60D                   MOV         #13,R6     ; H'0000000D
    00001440 E50C                   MOV         #12,R5     ; H'0000000C
    00001442 D27E                   MOV.L       L1377,R2   ; _mbx_send
    00001444 420B                   JSR         @R2
    00001446 E405                   MOV         #5,R4      ; H'00000005
    00001448 7F18                   ADD         #24,R15
    0000144A              L293:
    0000144A 7F04                   ADD         #4,R15
    0000144C 4F26                   LDS.L       @R15+,PR
             tskcmd.c       2000      }
             tskcmd.c       2001    }
    0000144E 006B                   RTS/N
             tskcmd.c       2002    
             tskcmd.c       2003    /***********************************************************************
             tskcmd.c       2004    *
             tskcmd.c       2005    * [概要]  
             tskcmd.c       2006    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2007    * [戻値]  -
             tskcmd.c       2008    * 
             tskcmd.c       2009    ***********************************************************************/
             tskcmd.c       2010    static void CmdVout  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001450              __$CmdVout:                      ; function: __$CmdVout
                                                           ; frame size=36
    00001450 4DF0                   MOVMU.L     R13,@-R15
    00001452 655C                   EXTU.B      R5,R5
    00001454 E422                   MOV         #34,R4     ; H'00000022
             tskcmd.c       2011    {
             tskcmd.c       2012      ER  result = E_SUCCESS;
             tskcmd.c       2013    
             tskcmd.c       2014      //  データチェック
             tskcmd.c       2015      result = ParamDataCheck( ID_MSG_VALVEOUT_HS, anum, args );
    00001456 BECF                   BSR         __$ParamDataCheck
    00001458 6E63                   MOV         R6,R14
             tskcmd.c       2016    
             tskcmd.c       2017      //  データ正常か
             tskcmd.c       2018      if( result == E_SUCCESS )
    0000145A 2008                   TST         R0,R0
    0000145C 8B25                   BF          L296
    0000145E E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       2019      {
             tskcmd.c       2020          memset( &vout, CLR, sizeof( ST_VOUT ) );
    00001460 D477                   MOV.L       L1377+4,R4 ; __$vout
    00001462 D178                   MOV.L       L1377+8,R1 ; _memset
    00001464 410B                   JSR         @R1
    00001466 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2021          vout.target = Atoi( args[PARAM1], N_HEX, sizeof(unsigned short), N_UNSIG );
    00001468 54E1                   MOV.L       @(4,R14),R4; args[]
    0000146A E700                   MOV         #0,R7      ; H'00000000
    0000146C E602                   MOV         #2,R6      ; H'00000002
    0000146E DD76                   MOV.L       L1377+12,R13; _Atoi
    00001470 4D0B                   JSR         @R13
    00001472 E510                   MOV         #16,R5     ; H'00000010
    00001474 DD72                   MOV.L       L1377+4,R13; __$vout
    00001476 2D01                   MOV.W       R0,@R13    ; vout.target
    00001478 E700                   MOV         #0,R7      ; H'00000000
    0000147A E602                   MOV         #2,R6      ; H'00000002
    0000147C E510                   MOV         #16,R5     ; H'00000010
             tskcmd.c       2022          vout.valout = Atoi( args[PARAM2], N_HEX, sizeof(unsigned short), N_UNSIG );
    0000147E D172                   MOV.L       L1377+12,R1; _Atoi
    00001480 410B                   JSR         @R1
    00001482 54E2                   MOV.L       @(8,R14),R4; args[]
             tskcmd.c       2023          
             tskcmd.c       2024          mbx_send    (
             tskcmd.c       2025                          ID_TSK_CMD,        // tskid
             tskcmd.c       2026                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       2027                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       2028                          NO_DATA,             // prid1
             tskcmd.c       2029                          NO_DATA,             // bcid
             tskcmd.c       2030                          ID_MSG_VALVEOUT_HS,  // msgid
             tskcmd.c       2031                          NO_DATA,             // sts
             tskcmd.c       2032                          NO_DATA,             // sts2
             tskcmd.c       2033                          (UB *)&vout.target,  // data
             tskcmd.c       2034                          sizeof( ST_VOUT )    // siz
             tskcmd.c       2035                      );
    00001484 E704                   MOV         #4,R7      ; H'00000004
    00001486 81D1                   MOV.W       R0,@(2,R13); vout.valout
    00001488 2F76                   MOV.L       R7,@-R15
    0000148A DD6D                   MOV.L       L1377+4,R13; __$vout
    0000148C 2FD6                   MOV.L       R13,@-R15
    0000148E E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00001490 611C                   EXTU.B      R1,R1
    00001492 6713                   MOV         R1,R7
    00001494 2F16                   MOV.L       R1,@-R15
    00001496 2F16                   MOV.L       R1,@-R15
    00001498 EE22                   MOV         #34,R14    ; H'00000022
    0000149A 2FE6                   MOV.L       R14,@-R15
    0000149C 2F16                   MOV.L       R1,@-R15
    0000149E E60D                   MOV         #13,R6     ; H'0000000D
    000014A0 E50C                   MOV         #12,R5     ; H'0000000C
    000014A2 D266                   MOV.L       L1377,R2   ; _mbx_send
    000014A4 420B                   JSR         @R2
    000014A6 E405                   MOV         #5,R4      ; H'00000005
    000014A8 7F18                   ADD         #24,R15
    000014AA              L296:
    000014AA 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       2036      }
             tskcmd.c       2037    }
    000014AC 006B                   RTS/N
             tskcmd.c       2038    /***********************************************************************
             tskcmd.c       2039    *
             tskcmd.c       2040    * [概要]  
             tskcmd.c       2041    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2042    * [戻値]  -
             tskcmd.c       2043    * 
             tskcmd.c       2044    ***********************************************************************/
             tskcmd.c       2045    static void CmdPsns  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000014AE              __$CmdPsns:                      ; function: __$CmdPsns
                                                           ; frame size=32
    000014AE 4F22                   STS.L       PR,@-R15
    000014B0 7FFC                   ADD         #-4,R15
             tskcmd.c       2046    {
             tskcmd.c       2047      ER  result = E_SUCCESS;
             tskcmd.c       2048      UB  dummy  = CLR;
    000014B2 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       2049      
             tskcmd.c       2050      result = ParamDataCheck( ID_MSG_PRESSURE_HS, anum, args );
    000014B4 655C                   EXTU.B      R5,R5
    000014B6 0F04                   MOV.B       R0,@(R0,R15); dummy
    000014B8 BE9E                   BSR         __$ParamDataCheck
    000014BA E423                   MOV         #35,R4     ; H'00000023
             tskcmd.c       2051    
             tskcmd.c       2052      //  データ正常か
             tskcmd.c       2053      if( result == E_SUCCESS )
    000014BC 2008                   TST         R0,R0
    000014BE 8B12                   BF          L299
             tskcmd.c       2054      {
             tskcmd.c       2055          mbx_send    (
             tskcmd.c       2056                          ID_TSK_CMD,        // tskid
             tskcmd.c       2057                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       2058                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       2059                          NO_DATA,             // prid1
             tskcmd.c       2060                          NO_DATA,             // bcid
             tskcmd.c       2061                          ID_MSG_PRESSURE_HS,  // msgid
             tskcmd.c       2062                          NO_DATA,             // sts
             tskcmd.c       2063                          NO_DATA,             // sts2
             tskcmd.c       2064                          &dummy,              // data
             tskcmd.c       2065                          sizeof( dummy )      // siz
             tskcmd.c       2066                      );
    000014C0 E101                   MOV         #1,R1      ; H'00000001
    000014C2 2F16                   MOV.L       R1,@-R15
    000014C4 64F3                   MOV         R15,R4
    000014C6 7404                   ADD         #4,R4
    000014C8 2F46                   MOV.L       R4,@-R15
    000014CA E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000014CC 655C                   EXTU.B      R5,R5
    000014CE 6753                   MOV         R5,R7
    000014D0 2F56                   MOV.L       R5,@-R15
    000014D2 2F56                   MOV.L       R5,@-R15
    000014D4 E623                   MOV         #35,R6     ; H'00000023
    000014D6 2F66                   MOV.L       R6,@-R15
    000014D8 2F56                   MOV.L       R5,@-R15
    000014DA E60D                   MOV         #13,R6     ; H'0000000D
    000014DC E50C                   MOV         #12,R5     ; H'0000000C
    000014DE D257                   MOV.L       L1377,R2   ; _mbx_send
    000014E0 420B                   JSR         @R2
    000014E2 E405                   MOV         #5,R4      ; H'00000005
    000014E4 7F18                   ADD         #24,R15
    000014E6              L299:
    000014E6 7F04                   ADD         #4,R15
    000014E8 4F26                   LDS.L       @R15+,PR
             tskcmd.c       2067      }
             tskcmd.c       2068    }
    000014EA 006B                   RTS/N
             tskcmd.c       2069    
             tskcmd.c       2070    /***********************************************************************
             tskcmd.c       2071    *
             tskcmd.c       2072    * [概要]  HELLO   起動通知
             tskcmd.c       2073    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2074    * [戻値]  -
             tskcmd.c       2075    * 
             tskcmd.c       2076    ***********************************************************************/
             tskcmd.c       2077    static void CmdHELLO  ( T_CMD_MSG* mrcv, UB anum, const char** args )
             tskcmd.c       2078    {
             tskcmd.c       2079      // 応答メッセージ作成
             tskcmd.c       2080      CmdMakeResponseStr(     &stCtl,
             tskcmd.c       2081                              PARAM4,
             tskcmd.c       2082                              STRTBL_MSG[ID_MSG_HELLO],
             tskcmd.c       2083                              MnetStatus,
             tskcmd.c       2084                              (char*)&FIRMWARE,
             tskcmd.c       2085                              (char*)&VER_INFO
             tskcmd.c       2086                          );
             tskcmd.c       2087    
             tskcmd.c       2088      // レスポンスデータ送信
             tskcmd.c       2089      SendResponse( &stCtl );
             tskcmd.c       2090    }
             tskcmd.c       2091    
             tskcmd.c       2092    /***********************************************************************
             tskcmd.c       2093    *
             tskcmd.c       2094    * [概要]  VER     バージョン確認
             tskcmd.c       2095    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2096    * [戻値]  -
             tskcmd.c       2097    * 
             tskcmd.c       2098    ***********************************************************************/
             tskcmd.c       2099    static void CmdVER    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000014EC              __$CmdVER:                       ; function: __$CmdVER
                                                           ; frame size=12
    000014EC 4F22                   STS.L       PR,@-R15
             tskcmd.c       2100    {
             tskcmd.c       2101      // 応答メッセージ作成
             tskcmd.c       2102      CmdMakeResponseStr(     &stCtl,
             tskcmd.c       2103                              PARAM4, 
             tskcmd.c       2104                              args[0], 
             tskcmd.c       2105                              MnetStatus,
             tskcmd.c       2106                              (char*)&FIRMWARE, 
             tskcmd.c       2107                              (char*)&VER_INFO
             tskcmd.c       2108                          );
    000014EE D157                   MOV.L       L1377+16,R1; _VER_INFO
    000014F0 2F16                   MOV.L       R1,@-R15
    000014F2 D557                   MOV.L       L1377+20,R5; _FIRMWARE
    000014F4 2F56                   MOV.L       R5,@-R15
    000014F6 E504                   MOV         #4,R5      ; H'00000004
    000014F8 D256                   MOV.L       L1377+24,R2; __$MnetStatus
    000014FA 6662                   MOV.L       @R6,R6     ; args[]
    000014FC D456                   MOV.L       L1377+28,R4; __$stCtl
    000014FE BE01                   BSR         _CmdMakeResponseStr
    00001500 6722                   MOV.L       @R2,R7     ; MnetStatus
    00001502 7F08                   ADD         #8,R15
             tskcmd.c       2109    
             tskcmd.c       2110        // 応答メッセージ送信
             tskcmd.c       2111      CmdSendResponse( &stCtl );
    00001504 D454                   MOV.L       L1377+28,R4; __$stCtl
    00001506 A927                   BRA         _CmdSendResponse
    00001508 4F26                   LDS.L       @R15+,PR
             tskcmd.c       2112    }
             tskcmd.c       2113    
             tskcmd.c       2114    /***********************************************************************
             tskcmd.c       2115    *
             tskcmd.c       2116    * [概要]  ALLIN   全I/O入力
             tskcmd.c       2117    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2118    * [戻値]  -
             tskcmd.c       2119    * 
             tskcmd.c       2120    ***********************************************************************/
             tskcmd.c       2121    static void CmdALLIN  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000150A              __$CmdALLIN:                     ; function: __$CmdALLIN
                                                           ; frame size=48
    0000150A 4DF0                   MOVMU.L     R13,@-R15
    0000150C 7FF8                   ADD         #-8,R15
    0000150E 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
    00001512 655C                   EXTU.B      R5,R5
             tskcmd.c       2122    {
             tskcmd.c       2123      ER  result = E_SUCCESS;
             tskcmd.c       2124      UB  allsts[INDAT_CNTRL_MAX];
             tskcmd.c       2125      UB  msg;
             tskcmd.c       2126    
             tskcmd.c       2127      msg = mrcv->msgdata.msgid;
             tskcmd.c       2128    
             tskcmd.c       2129      //  データチェック
             tskcmd.c       2130      result = ParamDataCheck( msg, anum, args );
    00001514 BE70                   BSR         __$ParamDataCheck
    00001516 6D63                   MOV         R6,R13
    00001518 E608                   MOV         #8,R6      ; H'00000008
    0000151A E500                   MOV         #0,R5      ; H'00000000
    0000151C 6E03                   MOV         R0,R14
             tskcmd.c       2131    
             tskcmd.c       2132      //  初期化
             tskcmd.c       2133      memset( &allsts, CLR,  sizeof( allsts ) );
    0000151E D249                   MOV.L       L1377+8,R2 ; _memset
    00001520 420B                   JSR         @R2
    00001522 64F3                   MOV         R15,R4
             tskcmd.c       2134    
             tskcmd.c       2135      //  データ正常か
             tskcmd.c       2136      if( result == E_SUCCESS )
    00001524 2EE8                   TST         R14,R14
    00001526 8B02                   BF          L303
             tskcmd.c       2137      {
             tskcmd.c       2138          // 全入力ポート状態取得
             tskcmd.c       2139          pio_ALLIN( &allsts[0] );
    00001528 D24C                   MOV.L       L1377+32,R2; _pio_ALLIN
    0000152A 420B                   JSR         @R2
    0000152C 64F3                   MOV         R15,R4
    0000152E              L303:
             tskcmd.c       2140      }
             tskcmd.c       2141      // 応答メッセージ作成
             tskcmd.c       2142      CmdMakeResponseX(   &stCtl,
             tskcmd.c       2143                          PARAM6,
             tskcmd.c       2144                          args[0],
             tskcmd.c       2145                          result,
             tskcmd.c       2146    
             tskcmd.c       2147                          (allsts[7]*0x100 + allsts[6]),
             tskcmd.c       2148                          (allsts[5]*0x100 + allsts[4]),
             tskcmd.c       2149                          (allsts[3]*0x100 + allsts[2]),
             tskcmd.c       2150                          (allsts[1]*0x100 + allsts[0]),
             tskcmd.c       2151                          0,
             tskcmd.c       2152                          0,
             tskcmd.c       2153                          0
             tskcmd.c       2154                      );
    0000152E E100                   MOV         #0,R1      ; H'00000000
    00001530 2F16                   MOV.L       R1,@-R15
    00001532 2F16                   MOV.L       R1,@-R15
    00001534 2F16                   MOV.L       R1,@-R15
    00001536 31F1800D               MOVU.B      @(13,R15),R1; allsts[]
    0000153A 34F1800C               MOVU.B      @(12,R15),R4; allsts[]
    0000153E 4118                   SHLL8       R1
    00001540 314C                   ADD         R4,R1
    00001542 2F16                   MOV.L       R1,@-R15
    00001544 35F18013               MOVU.B      @(19,R15),R5; allsts[]
    00001548 32F18012               MOVU.B      @(18,R15),R2; allsts[]
    0000154C 4518                   SHLL8       R5
    0000154E 352C                   ADD         R2,R5
    00001550 2F56                   MOV.L       R5,@-R15
    00001552 35F18019               MOVU.B      @(25,R15),R5; allsts[]
    00001556 37F18018               MOVU.B      @(24,R15),R7; allsts[]
    0000155A 4518                   SHLL8       R5
    0000155C 357C                   ADD         R7,R5
    0000155E 2F56                   MOV.L       R5,@-R15
    00001560 36F1801F               MOVU.B      @(31,R15),R6; allsts[]
    00001564 32F1801E               MOVU.B      @(30,R15),R2; allsts[]
    00001568 4618                   SHLL8       R6
    0000156A 362C                   ADD         R2,R6
    0000156C 2F66                   MOV.L       R6,@-R15
    0000156E E506                   MOV         #6,R5      ; H'00000006
    00001570 66D2                   MOV.L       @R13,R6    ; args[]
    00001572 D439                   MOV.L       L1377+28,R4; __$stCtl
    00001574 BBE6                   BSR         _CmdMakeResponseX
    00001576 67E3                   MOV         R14,R7
             tskcmd.c       2155    
             tskcmd.c       2156      // 応答メッセージ送信
             tskcmd.c       2157      CmdSendResponse( &stCtl );
    00001578 D437                   MOV.L       L1377+28,R4; __$stCtl
    0000157A B8ED                   BSR         _CmdSendResponse
    0000157C 7F1C                   ADD         #28,R15
    0000157E 7F08                   ADD         #8,R15
    00001580 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       2158    }
    00001582 006B                   RTS/N
             tskcmd.c       2159    
             tskcmd.c       2160    /***********************************************************************
             tskcmd.c       2161    *
             tskcmd.c       2162    * [概要]  BIN     I/O入力
             tskcmd.c       2163    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2164    * [戻値]  -
             tskcmd.c       2165    * 
             tskcmd.c       2166    ***********************************************************************/
             tskcmd.c       2167    static void CmdBIN    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001584              __$CmdBIN:                       ; function: __$CmdBIN
                                                           ; frame size=60
    00001584 4BF0                   MOVMU.L     R11,@-R15
    00001586 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2168    {
             tskcmd.c       2169      ER  result = E_SUCCESS;
             tskcmd.c       2170      UB  sts  = CLR;
             tskcmd.c       2171      INT par  = CLR;
             tskcmd.c       2172      UB  msg;
             tskcmd.c       2173    
             tskcmd.c       2174      msg = mrcv->msgdata.msgid;
             tskcmd.c       2175    
             tskcmd.c       2176      //  データチェック
             tskcmd.c       2177      result = ParamDataCheck( msg, anum, args );
    0000158A 655C                   EXTU.B      R5,R5
    0000158C EE00                   MOV         #0,R14     ; H'00000000
    0000158E BE33                   BSR         __$ParamDataCheck
    00001590 6C63                   MOV         R6,R12
             tskcmd.c       2178    
             tskcmd.c       2179      //  データ正常か
             tskcmd.c       2180      if( result == E_SUCCESS )
    00001592 2008                   TST         R0,R0
    00001594 6DE3                   MOV         R14,R13
    00001596 8F0B                   BF/S        L306
    00001598 6B03                   MOV         R0,R11
             tskcmd.c       2181      {
             tskcmd.c       2182          // パラメータ取得
             tskcmd.c       2183          par = Atoi( args[PARAM1], N_DEC, sizeof(INT), N_SIG );
    0000159A 54C1                   MOV.L       @(4,R12),R4; args[]
    0000159C E701                   MOV         #1,R7      ; H'00000001
    0000159E E604                   MOV         #4,R6      ; H'00000004
    000015A0 D129                   MOV.L       L1377+12,R1; _Atoi
    000015A2 410B                   JSR         @R1
    000015A4 E50A                   MOV         #10,R5     ; H'0000000A
    000015A6 6D03                   MOV         R0,R13
             tskcmd.c       2184      
             tskcmd.c       2185          // 入力状態取得
             tskcmd.c       2186          sts = pio_BIN( par );   
    000015A8 D22D                   MOV.L       L1377+36,R2; _pio_BIN
    000015AA 420B                   JSR         @R2
    000015AC 6403                   MOV         R0,R4
    000015AE 6E03                   MOV         R0,R14
    000015B0              L306:
             tskcmd.c       2187      }
             tskcmd.c       2188    
             tskcmd.c       2189      // 応答メッセージ作成
             tskcmd.c       2190      CmdMakeResponse(    &stCtl,
             tskcmd.c       2191                          PARAM4,                                         //0  パラメータ数
             tskcmd.c       2192                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2193                          result,                                         //2  エラーコード
             tskcmd.c       2194    
             tskcmd.c       2195                          par,                                            //3  入力ｃｈ
             tskcmd.c       2196                          sts,                                            //4  入力状態取得
             tskcmd.c       2197                          0,                                              //5  
             tskcmd.c       2198                          0,                                              //6  
             tskcmd.c       2199                          0,                                              //7  
             tskcmd.c       2200    
             tskcmd.c       2201                          0,                                              //8  
             tskcmd.c       2202                          0,                                              //9  
             tskcmd.c       2203                          0,                                              //10 
             tskcmd.c       2204                          0,                                              //11 
             tskcmd.c       2205                          0                                               //12 
             tskcmd.c       2206                      );
    000015B0 E500                   MOV         #0,R5      ; H'00000000
    000015B2 2F56                   MOV.L       R5,@-R15
    000015B4 2F56                   MOV.L       R5,@-R15
    000015B6 2F56                   MOV.L       R5,@-R15
    000015B8 2F56                   MOV.L       R5,@-R15
    000015BA 2F56                   MOV.L       R5,@-R15
    000015BC 2F56                   MOV.L       R5,@-R15
    000015BE 2F56                   MOV.L       R5,@-R15
    000015C0 2F56                   MOV.L       R5,@-R15
    000015C2 61EC                   EXTU.B      R14,R1
    000015C4 2F16                   MOV.L       R1,@-R15
    000015C6 2FD6                   MOV.L       R13,@-R15
    000015C8 E504                   MOV         #4,R5      ; H'00000004
    000015CA 66C2                   MOV.L       @R12,R6    ; args[]
    000015CC D422                   MOV.L       L1377+28,R4; __$stCtl
    000015CE B9FD                   BSR         _CmdMakeResponse
    000015D0 67B3                   MOV         R11,R7
    000015D2 7F28                   ADD         #40,R15
             tskcmd.c       2207    
             tskcmd.c       2208    
             tskcmd.c       2209        // 応答メッセージ送信
             tskcmd.c       2210      CmdSendResponse( &stCtl );
    000015D4 D420                   MOV.L       L1377+28,R4; __$stCtl
    000015D6 4BF4                   MOVMU.L     @R15+,R11
    000015D8 A8BE                   BRA         _CmdSendResponse
    000015DA 0009                   NOP
             tskcmd.c       2211    }
             tskcmd.c       2212    
             tskcmd.c       2213    /***********************************************************************
             tskcmd.c       2214    *
             tskcmd.c       2215    * [概要]  BOUT    I/O出力
             tskcmd.c       2216    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2217    * [戻値]  -
             tskcmd.c       2218    * 
             tskcmd.c       2219    ***********************************************************************/
             tskcmd.c       2220    static void CmdBOUT   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000015DC              __$CmdBOUT:                      ; function: __$CmdBOUT
                                                           ; frame size=56
    000015DC 4CF0                   MOVMU.L     R12,@-R15
    000015DE 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2221    {
             tskcmd.c       2222      ER  result = E_SUCCESS;
             tskcmd.c       2223      INT ch  = CLR;
             tskcmd.c       2224      INT act = CLR;
             tskcmd.c       2225      UB  msg;
             tskcmd.c       2226    
             tskcmd.c       2227      msg = mrcv->msgdata.msgid;
             tskcmd.c       2228    
             tskcmd.c       2229      //  データチェック
             tskcmd.c       2230      result = ParamDataCheck( msg, anum, args );
    000015E2 655C                   EXTU.B      R5,R5
    000015E4 EE00                   MOV         #0,R14     ; H'00000000
    000015E6 BE07                   BSR         __$ParamDataCheck
    000015E8 6D63                   MOV         R6,R13
             tskcmd.c       2231    
             tskcmd.c       2232      //  データ正常か
             tskcmd.c       2233      if( result == E_SUCCESS )
    000015EA 2008                   TST         R0,R0
    000015EC 8F11                   BF/S        L309
    000015EE 6C03                   MOV         R0,R12
             tskcmd.c       2234      {
             tskcmd.c       2235          // パラメータ取得
             tskcmd.c       2236          ch  = Atoi( args[PARAM1], N_DEC, sizeof(INT), N_SIG );
    000015F0 54D1                   MOV.L       @(4,R13),R4; args[]
    000015F2 E701                   MOV         #1,R7      ; H'00000001
    000015F4 E604                   MOV         #4,R6      ; H'00000004
    000015F6 D214                   MOV.L       L1377+12,R2; _Atoi
    000015F8 420B                   JSR         @R2
    000015FA E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       2237          act = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    000015FC 54D2                   MOV.L       @(8,R13),R4; args[]
    000015FE E701                   MOV         #1,R7      ; H'00000001
    00001600 E604                   MOV         #4,R6      ; H'00000004
    00001602 E50A                   MOV         #10,R5     ; H'0000000A
    00001604 D110                   MOV.L       L1377+12,R1; _Atoi
    00001606 410B                   JSR         @R1
    00001608 6E03                   MOV         R0,R14
    0000160A 6503                   MOV         R0,R5
             tskcmd.c       2238    
             tskcmd.c       2239          // I/O出力
             tskcmd.c       2240          pio_BOUT( ch, act );
    0000160C D115                   MOV.L       L1377+40,R1; _pio_BOUT
    0000160E 410B                   JSR         @R1
    00001610 64E3                   MOV         R14,R4
    00001612              L309:
             tskcmd.c       2241      }
             tskcmd.c       2242      // 応答メッセージ作成
             tskcmd.c       2243      CmdMakeResponse(    &stCtl,
             tskcmd.c       2244                          PARAM6,                                         //0  パラメータ数
             tskcmd.c       2245                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2246                          result,                                         //2  エラーコード
             tskcmd.c       2247    
             tskcmd.c       2248                          ch,                                             //3  入力ｃｈ
             tskcmd.c       2249                          0,                                              //4  
             tskcmd.c       2250                          0,                                              //5  
             tskcmd.c       2251                          0,                                              //6  
             tskcmd.c       2252                          0,                                              //7  
             tskcmd.c       2253    
             tskcmd.c       2254                          0,                                              //8  
             tskcmd.c       2255                          0,                                              //9  
             tskcmd.c       2256                          0,                                              //10 
             tskcmd.c       2257                          0,                                              //11 
             tskcmd.c       2258                          0                                               //12 
             tskcmd.c       2259                      );
    00001612 E200                   MOV         #0,R2      ; H'00000000
    00001614 2F26                   MOV.L       R2,@-R15
    00001616 2F26                   MOV.L       R2,@-R15
    00001618 2F26                   MOV.L       R2,@-R15
    0000161A 2F26                   MOV.L       R2,@-R15
    0000161C 2F26                   MOV.L       R2,@-R15
    0000161E 2F26                   MOV.L       R2,@-R15
    00001620 2F26                   MOV.L       R2,@-R15
    00001622 2F26                   MOV.L       R2,@-R15
    00001624 2F26                   MOV.L       R2,@-R15
    00001626 2FE6                   MOV.L       R14,@-R15
    00001628 E506                   MOV         #6,R5      ; H'00000006
    0000162A 66D2                   MOV.L       @R13,R6    ; args[]
    0000162C D40A                   MOV.L       L1377+28,R4; __$stCtl
    0000162E B9CD                   BSR         _CmdMakeResponse
    00001630 67C3                   MOV         R12,R7
    00001632 7F28                   ADD         #40,R15
             tskcmd.c       2260    
             tskcmd.c       2261      
             tskcmd.c       2262        // 応答メッセージ送信
             tskcmd.c       2263      CmdSendResponse( &stCtl );
    00001634 D408                   MOV.L       L1377+28,R4; __$stCtl
    00001636 4CF4                   MOVMU.L     @R15+,R12
    00001638 A88E                   BRA         _CmdSendResponse
    0000163A 0009                   NOP
    0000163C              L1377:
    0000163C <00000000>             .DATA.L     _mbx_send
    00001640 <00000000>             .DATA.L     __$vout
    00001644 <00000000>             .DATA.L     _memset
    00001648 <00000000>             .DATA.L     _Atoi
    0000164C <00000000>             .DATA.L     _VER_INFO
    00001650 <00000000>             .DATA.L     _FIRMWARE
    00001654 <00000000>             .DATA.L     __$MnetStatus
    00001658 <00000000>             .DATA.L     __$stCtl
    0000165C <00000000>             .DATA.L     _pio_ALLIN
    00001660 <00000000>             .DATA.L     _pio_BIN
    00001664 <00000000>             .DATA.L     _pio_BOUT
             tskcmd.c       2264    }
             tskcmd.c       2265    
             tskcmd.c       2266    /***********************************************************************
             tskcmd.c       2267    *
             tskcmd.c       2268    * [概要]  CINIT   入力カウンタの設定
             tskcmd.c       2269    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2270    * [戻値]  -
             tskcmd.c       2271    * 
             tskcmd.c       2272    ***********************************************************************/
             tskcmd.c       2273    static void CmdCINIT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001668              __$CmdCINIT:                     ; function: __$CmdCINIT
                                                           ; frame size=56
    00001668 4CF0                   MOVMU.L     R12,@-R15
    0000166A 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2274    {
             tskcmd.c       2275      ER  result = E_SUCCESS;
             tskcmd.c       2276      UB  nn  = CLR;
             tskcmd.c       2277      UB  f   = CLR;
             tskcmd.c       2278      UB  msg;
             tskcmd.c       2279    
             tskcmd.c       2280      msg = mrcv->msgdata.msgid;
             tskcmd.c       2281    
             tskcmd.c       2282      //  データチェック
             tskcmd.c       2283      result = ParamDataCheck( msg, anum, args );
    0000166E 655C                   EXTU.B      R5,R5
    00001670 EE00                   MOV         #0,R14     ; H'00000000
    00001672 BDC1                   BSR         __$ParamDataCheck
    00001674 6D63                   MOV         R6,R13
             tskcmd.c       2284    
             tskcmd.c       2285      //  データ正常か
             tskcmd.c       2286      if( result == E_SUCCESS )
    00001676 2008                   TST         R0,R0
    00001678 8F38                   BF/S        L312
    0000167A 6C03                   MOV         R0,R12
             tskcmd.c       2287      {
             tskcmd.c       2288          // パラメータ取得
             tskcmd.c       2289          nn  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    0000167C 54D1                   MOV.L       @(4,R13),R4; args[]
    0000167E E701                   MOV         #1,R7      ; H'00000001
    00001680 E50A                   MOV         #10,R5     ; H'0000000A
    00001682 D2B6                   MOV.L       L1378+2,R2 ; _Atoi
    00001684 420B                   JSR         @R2
    00001686 6673                   MOV         R7,R6
             tskcmd.c       2290          f   = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    00001688 54D2                   MOV.L       @(8,R13),R4; args[]
    0000168A E701                   MOV         #1,R7      ; H'00000001
    0000168C E50A                   MOV         #10,R5     ; H'0000000A
    0000168E 6E03                   MOV         R0,R14
    00001690 D1B2                   MOV.L       L1378+2,R1 ; _Atoi
    00001692 410B                   JSR         @R1
    00001694 6673                   MOV         R7,R6
    00001696 610C                   EXTU.B      R0,R1
             tskcmd.c       2291    
             tskcmd.c       2292          // カウント開始
             tskcmd.c       2293          if( f )
    00001698 2118                   TST         R1,R1
    0000169A 8913                   BT          L314
             tskcmd.c       2294          {
             tskcmd.c       2295              mbx_send( ID_TSK_CMD, 
             tskcmd.c       2296                        ID_MPF_IO, 
             tskcmd.c       2297                        ID_MBX_IO, 
             tskcmd.c       2298                        NO_DATA, 
             tskcmd.c       2299                        NO_DATA, 
             tskcmd.c       2300                        ID_MSG_CNT_START, 
             tskcmd.c       2301                        (UB)nn, 
             tskcmd.c       2302                        0, 
             tskcmd.c       2303                        &bufwk[0], 
             tskcmd.c       2304                        0 );
    0000169C 0429                   MOVT        R4
    0000169E 2F46                   MOV.L       R4,@-R15
    000016A0 D5AF                   MOV.L       L1378+6,R5 ; __$bufwk
    000016A2 2F56                   MOV.L       R5,@-R15
    000016A4 E600                   MOV         #0,R6      ; H'00000000
    000016A6 2F66                   MOV.L       R6,@-R15
    000016A8 6EEC                   EXTU.B      R14,R14
    000016AA 2FE6                   MOV.L       R14,@-R15
    000016AC 2F66                   MOV.L       R6,@-R15
    000016AE E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    000016B0 611C                   EXTU.B      R1,R1
    000016B2 6713                   MOV         R1,R7
    000016B4 2F16                   MOV.L       R1,@-R15
    000016B6 E607                   MOV         #7,R6      ; H'00000007
    000016B8 E506                   MOV         #6,R5      ; H'00000006
    000016BA D2AA                   MOV.L       L1378+10,R2; _mbx_send
    000016BC 420B                   JSR         @R2
    000016BE E405                   MOV         #5,R4      ; H'00000005
    000016C0 A014                   BRA         L312
    000016C2 7F18                   ADD         #24,R15
    000016C4              L314:
             tskcmd.c       2305          }
             tskcmd.c       2306          // カウント停止
             tskcmd.c       2307          else
             tskcmd.c       2308          {
             tskcmd.c       2309              mbx_send( ID_TSK_CMD, 
             tskcmd.c       2310                        ID_MPF_IO, 
             tskcmd.c       2311                        ID_MBX_IO, 
             tskcmd.c       2312                        NO_DATA, 
             tskcmd.c       2313                        NO_DATA, 
             tskcmd.c       2314                        ID_MSG_CNT_STOP, 
             tskcmd.c       2315                        (UB)nn, 
             tskcmd.c       2316                        0, 
             tskcmd.c       2317                        &bufwk[0], 
             tskcmd.c       2318                        0 );
    000016C4 0439                   MOVRT       R4
    000016C6 2F46                   MOV.L       R4,@-R15
    000016C8 D5A5                   MOV.L       L1378+6,R5 ; __$bufwk
    000016CA 2F56                   MOV.L       R5,@-R15
    000016CC E600                   MOV         #0,R6      ; H'00000000
    000016CE 2F66                   MOV.L       R6,@-R15
    000016D0 6EEC                   EXTU.B      R14,R14
    000016D2 2FE6                   MOV.L       R14,@-R15
    000016D4 E701                   MOV         #1,R7      ; H'00000001
    000016D6 2F76                   MOV.L       R7,@-R15
    000016D8 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    000016DA 611C                   EXTU.B      R1,R1
    000016DC 6713                   MOV         R1,R7
    000016DE 2F16                   MOV.L       R1,@-R15
    000016E0 E607                   MOV         #7,R6      ; H'00000007
    000016E2 E506                   MOV         #6,R5      ; H'00000006
    000016E4 D29F                   MOV.L       L1378+10,R2; _mbx_send
    000016E6 420B                   JSR         @R2
    000016E8 E405                   MOV         #5,R4      ; H'00000005
    000016EA 7F18                   ADD         #24,R15
    000016EC              L312:
             tskcmd.c       2319          }
             tskcmd.c       2320      }
             tskcmd.c       2321      // 応答メッセージ作成
             tskcmd.c       2322      CmdMakeResponse(    &stCtl,
             tskcmd.c       2323                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2324                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2325                          result,                                         //2  エラーコード
             tskcmd.c       2326    
             tskcmd.c       2327                          nn,                                             //3  入力ｃｈ
             tskcmd.c       2328                          0,                                              //4  
             tskcmd.c       2329                          0,                                              //5  
             tskcmd.c       2330                          0,                                              //6  
             tskcmd.c       2331                          0,                                              //7  
             tskcmd.c       2332    
             tskcmd.c       2333                          0,                                              //8  
             tskcmd.c       2334                          0,                                              //9  
             tskcmd.c       2335                          0,                                              //10 
             tskcmd.c       2336                          0,                                              //11 
             tskcmd.c       2337                          0                                               //12 
             tskcmd.c       2338                      );
    000016EC E200                   MOV         #0,R2      ; H'00000000
    000016EE 2F26                   MOV.L       R2,@-R15
    000016F0 2F26                   MOV.L       R2,@-R15
    000016F2 2F26                   MOV.L       R2,@-R15
    000016F4 2F26                   MOV.L       R2,@-R15
    000016F6 2F26                   MOV.L       R2,@-R15
    000016F8 2F26                   MOV.L       R2,@-R15
    000016FA 2F26                   MOV.L       R2,@-R15
    000016FC 2F26                   MOV.L       R2,@-R15
    000016FE 2F26                   MOV.L       R2,@-R15
    00001700 2FE6                   MOV.L       R14,@-R15
    00001702 E503                   MOV         #3,R5      ; H'00000003
    00001704 66D2                   MOV.L       @R13,R6    ; args[]
    00001706 D498                   MOV.L       L1378+14,R4; __$stCtl
    00001708 B960                   BSR         _CmdMakeResponse
    0000170A 67C3                   MOV         R12,R7
    0000170C 7F28                   ADD         #40,R15
             tskcmd.c       2339    
             tskcmd.c       2340        // 応答メッセージ送信
             tskcmd.c       2341      CmdSendResponse( &stCtl );
    0000170E D496                   MOV.L       L1378+14,R4; __$stCtl
    00001710 4CF4                   MOVMU.L     @R15+,R12
    00001712 A821                   BRA         _CmdSendResponse
    00001714 0009                   NOP
             tskcmd.c       2342    }
             tskcmd.c       2343    /***********************************************************************
             tskcmd.c       2344    *
             tskcmd.c       2345    * [概要]  COUNT   入力カウンタの読み出し
             tskcmd.c       2346    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2347    * [戻値]  -
             tskcmd.c       2348    * 
             tskcmd.c       2349    ***********************************************************************/
             tskcmd.c       2350    static void CmdCOUNT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001716              __$CmdCOUNT:                     ; function: __$CmdCOUNT
                                                           ; frame size=28
    00001716 4BF0                   MOVMU.L     R11,@-R15
    00001718 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2351    {
             tskcmd.c       2352      ER  result = E_SUCCESS;
             tskcmd.c       2353      UB  nn  = CLR;
             tskcmd.c       2354      UINT    cccc = CLR;
             tskcmd.c       2355      UB  msg;
             tskcmd.c       2356    
             tskcmd.c       2357      msg = mrcv->msgdata.msgid;
             tskcmd.c       2358    
             tskcmd.c       2359      //  データチェック
             tskcmd.c       2360      result = ParamDataCheck( msg, anum, args );
    0000171C 655C                   EXTU.B      R5,R5
    0000171E ED00                   MOV         #0,R13     ; H'00000000
    00001720 BD6A                   BSR         __$ParamDataCheck
    00001722 6C63                   MOV         R6,R12
             tskcmd.c       2361    
             tskcmd.c       2362      //  データ正常か
             tskcmd.c       2363      if( result == E_SUCCESS )
    00001724 2008                   TST         R0,R0
    00001726 6ED3                   MOV         R13,R14
    00001728 8F0B                   BF/S        L317
    0000172A 6B03                   MOV         R0,R11
             tskcmd.c       2364      {
             tskcmd.c       2365          // パラメータ取得
             tskcmd.c       2366          nn  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    0000172C 54C1                   MOV.L       @(4,R12),R4; args[]
    0000172E E701                   MOV         #1,R7      ; H'00000001
    00001730 E50A                   MOV         #10,R5     ; H'0000000A
    00001732 D18A                   MOV.L       L1378+2,R1 ; _Atoi
    00001734 410B                   JSR         @R1
    00001736 6673                   MOV         R7,R6
             tskcmd.c       2367          
             tskcmd.c       2368          // カウント取得
             tskcmd.c       2369          cccc = GetCount(nn);
    00001738 640C                   EXTU.B      R0,R4
    0000173A D28C                   MOV.L       L1378+18,R2; _GetCount
    0000173C 420B                   JSR         @R2
    0000173E 6D03                   MOV         R0,R13
    00001740 6E03                   MOV         R0,R14
    00001742              L317:
             tskcmd.c       2370      }
             tskcmd.c       2371      // 応答メッセージ作成
             tskcmd.c       2372      CmdMakeResponseCount(   &stCtl,
             tskcmd.c       2373                              PARAM4,                                     //0  パラメータ数
             tskcmd.c       2374                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2375                              result,                                     //2  エラーコード
             tskcmd.c       2376    
             tskcmd.c       2377                              nn,                                         //3  入力ｃｈ
             tskcmd.c       2378                              cccc                                        //4  カウント値
             tskcmd.c       2379                          );
    00001742 2FE6                   MOV.L       R14,@-R15
    00001744 62DC                   EXTU.B      R13,R2
    00001746 2F26                   MOV.L       R2,@-R15
    00001748 E504                   MOV         #4,R5      ; H'00000004
    0000174A 66C2                   MOV.L       @R12,R6    ; args[]
    0000174C D486                   MOV.L       L1378+14,R4; __$stCtl
    0000174E BC8D                   BSR         _CmdMakeResponseCount
    00001750 67B3                   MOV         R11,R7
    00001752 7F08                   ADD         #8,R15
             tskcmd.c       2380    
             tskcmd.c       2381        // 応答メッセージ送信
             tskcmd.c       2382      CmdSendResponse( &stCtl );
    00001754 D484                   MOV.L       L1378+14,R4; __$stCtl
    00001756 4BF4                   MOVMU.L     @R15+,R11
    00001758 D385                   MOV.L       L1378+22,R3; _CmdSendResponse
    0000175A 432B                   JMP         @R3
    0000175C 0009                   NOP
             tskcmd.c       2383    }
             tskcmd.c       2384    
             tskcmd.c       2385    /***********************************************************************
             tskcmd.c       2386    *
             tskcmd.c       2387    * [概要]  INT     割り込み設定
             tskcmd.c       2388    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2389    * [戻値]  -
             tskcmd.c       2390    * 
             tskcmd.c       2391    ***********************************************************************/
             tskcmd.c       2392    static void CmdINT    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000175E              __$CmdINT:                       ; function: __$CmdINT
                                                           ; frame size=92
    0000175E 4BF0                   MOVMU.L     R11,@-R15
    00001760 7FE0                   ADD         #-32,R15
             tskcmd.c       2393    {
             tskcmd.c       2394      ER      result = E_SUCCESS;
             tskcmd.c       2395      ST_INTINF           Intinf;                         // 
             tskcmd.c       2396      UB  msg;
             tskcmd.c       2397    
             tskcmd.c       2398      msg = mrcv->msgdata.msgid;
    00001762 6D63                   MOV         R6,R13
    00001764 E63C                   MOV         #60,R6     ; H'0000003C
    00001766 6E53                   MOV         R5,R14
    00001768 3C41801B               MOVU.B      @(27,R4),R12; (mrcv)->msgid
             tskcmd.c       2399    
             tskcmd.c       2400      // 初期化
             tskcmd.c       2401      memset( &bufwk,  CLR, sizeof( bufwk ) );
    0000176C D47C                   MOV.L       L1378+6,R4 ; __$bufwk
    0000176E D181                   MOV.L       L1378+26,R1; _memset
    00001770 410B                   JSR         @R1
    00001772 E500                   MOV         #0,R5      ; H'00000000
    00001774 E620                   MOV         #32,R6     ; H'00000020
    00001776 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2402      memset( &Intinf, CLR, sizeof( ST_INTINF ) );
    00001778 DB7E                   MOV.L       L1378+26,R11; _memset
    0000177A 4B0B                   JSR         @R11
    0000177C 64F3                   MOV         R15,R4
             tskcmd.c       2403    
             tskcmd.c       2404      //  データチェック
             tskcmd.c       2405      result = ParamDataCheck( msg, anum, args );
    0000177E 65EC                   EXTU.B      R14,R5
    00001780 66D3                   MOV         R13,R6
    00001782 BD39                   BSR         __$ParamDataCheck
    00001784 64C3                   MOV         R12,R4
             tskcmd.c       2406      
             tskcmd.c       2407      //  データ正常か
             tskcmd.c       2408      if( result == E_SUCCESS )
    00001786 2008                   TST         R0,R0
    00001788 8F38                   BF/S        L320
    0000178A 6703                   MOV         R0,R7
             tskcmd.c       2409      {
             tskcmd.c       2410          // パラメータ取得
             tskcmd.c       2411          Intinf.nn   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    0000178C 54D1                   MOV.L       @(4,R13),R4; args[]
    0000178E E701                   MOV         #1,R7      ; H'00000001
    00001790 E50A                   MOV         #10,R5     ; H'0000000A
    00001792 DB72                   MOV.L       L1378+2,R11; _Atoi
    00001794 4B0B                   JSR         @R11
    00001796 6673                   MOV         R7,R6
    00001798 3F010000               MOV.B       R0,@(0:12,R15); Intinf.nn
             tskcmd.c       2412          Intinf.trg  = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    0000179C 54D2                   MOV.L       @(8,R13),R4; args[]
    0000179E E701                   MOV         #1,R7      ; H'00000001
    000017A0 E50A                   MOV         #10,R5     ; H'0000000A
    000017A2 4B0B                   JSR         @R11
    000017A4 6673                   MOV         R7,R6
    000017A6 3F010001               MOV.B       R0,@(1:12,R15); Intinf.trg
    000017AA 54D3                   MOV.L       @(12,R13),R4; args[]
             tskcmd.c       2413          
             tskcmd.c       2414          // 一時停止するモータ指定
             tskcmd.c       2415          SetByteArray( args[PARAM3],&Intinf.mmm[0]);
    000017AC 65F3                   MOV         R15,R5
    000017AE 7504                   ADD         #4,R5
             tskcmd.c       2416          
             tskcmd.c       2417          // 出力チャネルへ出力する値
             tskcmd.c       2418          SetByteArray( args[PARAM4],&Intinf.dat[0]);
             tskcmd.c       2419    
             tskcmd.c       2420          // 割り込み発生時に出力するチャネル指定
             tskcmd.c       2421          SetByteArray( args[PARAM5],&Intinf.msk[0]);
             tskcmd.c       2422    
             tskcmd.c       2423          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       2424          memcpy( &bufwk[0], (B*)&Intinf, sizeof( ST_INTINF ) );
             tskcmd.c       2425    
             tskcmd.c       2426          // 待ちタスクへ通知
             tskcmd.c       2427          result = mbx_send( ID_TSK_CMD,  
             tskcmd.c       2428                             ID_MPF_INT, 
             tskcmd.c       2429                             ID_MBX_INT, 
             tskcmd.c       2430                             NO_DATA, 
             tskcmd.c       2431                             NO_DATA, 
             tskcmd.c       2432                             msg, 
             tskcmd.c       2433                             Intinf.nn, 
             tskcmd.c       2434                             DEFDAT, 
             tskcmd.c       2435                             &bufwk[0], 
             tskcmd.c       2436                             CMD_BUFSIZ );
    000017B0 DE71                   MOV.L       L1378+30,R14; _SetByteArray
    000017B2 4E0B                   JSR         @R14
    000017B4 EB3C                   MOV         #60,R11    ; H'0000003C
    000017B6 54D4                   MOV.L       @(16,R13),R4; args[]
    000017B8 65F3                   MOV         R15,R5
    000017BA D16F                   MOV.L       L1378+30,R1; _SetByteArray
    000017BC 410B                   JSR         @R1
    000017BE 750C                   ADD         #12,R5
    000017C0 54D5                   MOV.L       @(20,R13),R4; args[]
    000017C2 65F3                   MOV         R15,R5
    000017C4 D66C                   MOV.L       L1378+30,R6; _SetByteArray
    000017C6 460B                   JSR         @R6
    000017C8 7514                   ADD         #20,R5
    000017CA E620                   MOV         #32,R6     ; H'00000020
    000017CC D464                   MOV.L       L1378+6,R4 ; __$bufwk
    000017CE D76B                   MOV.L       L1378+34,R7; _memcpy
    000017D0 470B                   JSR         @R7
    000017D2 65F3                   MOV         R15,R5
    000017D4 2FB6                   MOV.L       R11,@-R15
    000017D6 D162                   MOV.L       L1378+6,R1 ; __$bufwk
    000017D8 2F16                   MOV.L       R1,@-R15
    000017DA EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    000017DC 6EEC                   EXTU.B      R14,R14
    000017DE 67E3                   MOV         R14,R7
    000017E0 2FE6                   MOV.L       R14,@-R15
    000017E2 7FFC                   ADD         #-4,R15
    000017E4 32F18010               MOVU.B      @(16,R15),R2; Intinf.nn
    000017E8 2F22                   MOV.L       R2,@R15
    000017EA 2FC6                   MOV.L       R12,@-R15
    000017EC 2FE6                   MOV.L       R14,@-R15
    000017EE E60B                   MOV         #11,R6     ; H'0000000B
    000017F0 E50A                   MOV         #10,R5     ; H'0000000A
    000017F2 DC5C                   MOV.L       L1378+10,R12; _mbx_send
    000017F4 4C0B                   JSR         @R12
    000017F6 E405                   MOV         #5,R4      ; H'00000005
    000017F8 6703                   MOV         R0,R7
    000017FA 7F18                   ADD         #24,R15
    000017FC              L320:
             tskcmd.c       2437      }
             tskcmd.c       2438    
             tskcmd.c       2439      // 応答メッセージ作成
             tskcmd.c       2440      CmdMakeResponse(    &stCtl,
             tskcmd.c       2441                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2442                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2443                          result,                                         //2  エラーコード
             tskcmd.c       2444    
             tskcmd.c       2445                          Intinf.nn,                                      //3  入力ｃｈ
             tskcmd.c       2446                          0,                                              //4  
             tskcmd.c       2447                          0,                                              //5  
             tskcmd.c       2448                          0,                                              //6  
             tskcmd.c       2449                          0,                                              //7  
             tskcmd.c       2450    
             tskcmd.c       2451                          0,                                              //8  
             tskcmd.c       2452                          0,                                              //9  
             tskcmd.c       2453                          0,                                              //10 
             tskcmd.c       2454                          0,                                              //11 
             tskcmd.c       2455                          0                                               //12 
             tskcmd.c       2456                      );
    000017FC E200                   MOV         #0,R2      ; H'00000000
    000017FE 2F26                   MOV.L       R2,@-R15
    00001800 2F26                   MOV.L       R2,@-R15
    00001802 2F26                   MOV.L       R2,@-R15
    00001804 2F26                   MOV.L       R2,@-R15
    00001806 2F26                   MOV.L       R2,@-R15
    00001808 2F26                   MOV.L       R2,@-R15
    0000180A 2F26                   MOV.L       R2,@-R15
    0000180C 2F26                   MOV.L       R2,@-R15
    0000180E 2F26                   MOV.L       R2,@-R15
    00001810 3EF18024               MOVU.B      @(36,R15),R14; Intinf.nn
    00001814 2FE6                   MOV.L       R14,@-R15
    00001816 E503                   MOV         #3,R5      ; H'00000003
    00001818 D453                   MOV.L       L1378+14,R4; __$stCtl
    0000181A B8D7                   BSR         _CmdMakeResponse
    0000181C 66D2                   MOV.L       @R13,R6    ; args[]
             tskcmd.c       2457    
             tskcmd.c       2458        // 応答メッセージ送信
             tskcmd.c       2459      CmdSendResponse( &stCtl );
    0000181E D452                   MOV.L       L1378+14,R4; __$stCtl
    00001820 D353                   MOV.L       L1378+22,R3; _CmdSendResponse
    00001822 430B                   JSR         @R3
    00001824 7F28                   ADD         #40,R15
    00001826 7F20                   ADD         #32,R15
    00001828 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       2460    }
    0000182A 006B                   RTS/N
             tskcmd.c       2461    
             tskcmd.c       2462    /***********************************************************************
             tskcmd.c       2463    *
             tskcmd.c       2464    * [概要]  ABSMV   パルスモータ移動(絶対位置)
             tskcmd.c       2465    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2466    * [戻値]  -
             tskcmd.c       2467    * 
             tskcmd.c       2468    ***********************************************************************/
             tskcmd.c       2469    static void CmdABSMV  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000182C              __$CmdABSMV:                     ; function: __$CmdABSMV
                                                           ; frame size=64
    0000182C 4CF0                   MOVMU.L     R12,@-R15
    0000182E 7FF8                   ADD         #-8,R15
             tskcmd.c       2470    {
             tskcmd.c       2471      ER result = E_SUCCESS;
             tskcmd.c       2472      ST_ABSMV absmv;
             tskcmd.c       2473      UB  msg;
             tskcmd.c       2474    
             tskcmd.c       2475      msg = mrcv->msgdata.msgid;
    00001830 6C63                   MOV         R6,R12
    00001832 E63C                   MOV         #60,R6     ; H'0000003C
    00001834 6E53                   MOV         R5,R14
    00001836 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       2476      
             tskcmd.c       2477      // 初期化
             tskcmd.c       2478      memset( &bufwk, 0, sizeof( bufwk ) );
    0000183A D449                   MOV.L       L1378+6,R4 ; __$bufwk
    0000183C D14D                   MOV.L       L1378+26,R1; _memset
    0000183E 410B                   JSR         @R1
    00001840 E500                   MOV         #0,R5      ; H'00000000
    00001842 E608                   MOV         #8,R6      ; H'00000008
    00001844 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2479      memset( &absmv,  0,  sizeof( ST_ABSMV ) );
    00001846 D24B                   MOV.L       L1378+26,R2; _memset
    00001848 420B                   JSR         @R2
    0000184A 64F3                   MOV         R15,R4
             tskcmd.c       2480    
             tskcmd.c       2481      //  データチェック
             tskcmd.c       2482      result = ParamDataCheck( msg, anum, args );
    0000184C 65EC                   EXTU.B      R14,R5
    0000184E 66C3                   MOV         R12,R6
    00001850 BCD2                   BSR         __$ParamDataCheck
    00001852 64D3                   MOV         R13,R4
             tskcmd.c       2483    
             tskcmd.c       2484      //  データ正常か
             tskcmd.c       2485      if( result == E_SUCCESS )
    00001854 2008                   TST         R0,R0
    00001856 8F2E                   BF/S        L323
    00001858 6703                   MOV         R0,R7
             tskcmd.c       2486      {
             tskcmd.c       2487          // パラメータ取得
             tskcmd.c       2488          absmv.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    0000185A 54C1                   MOV.L       @(4,R12),R4; args[]
    0000185C E701                   MOV         #1,R7      ; H'00000001
    0000185E E50A                   MOV         #10,R5     ; H'0000000A
    00001860 D23E                   MOV.L       L1378+2,R2 ; _Atoi
    00001862 420B                   JSR         @R2
    00001864 6673                   MOV         R7,R6
    00001866 3F010000               MOV.B       R0,@(0:12,R15); absmv.mm
             tskcmd.c       2489          absmv.pppp = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    0000186A 54C2                   MOV.L       @(8,R12),R4; args[]
    0000186C E701                   MOV         #1,R7      ; H'00000001
    0000186E E604                   MOV         #4,R6      ; H'00000004
    00001870 DE3A                   MOV.L       L1378+2,R14; _Atoi
    00001872 4E0B                   JSR         @R14
    00001874 E50A                   MOV         #10,R5     ; H'0000000A
    00001876 1F01                   MOV.L       R0,@(4,R15); absmv.pppp
    00001878 E701                   MOV         #1,R7      ; H'00000001
    0000187A E50A                   MOV         #10,R5     ; H'0000000A
    0000187C 6673                   MOV         R7,R6
             tskcmd.c       2490          absmv.st   = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    0000187E D137                   MOV.L       L1378+2,R1 ; _Atoi
    00001880 410B                   JSR         @R1
    00001882 54C3                   MOV.L       @(12,R12),R4; args[]
             tskcmd.c       2491    
             tskcmd.c       2492          // デバイス動作状態確認
             tskcmd.c       2493          result = GetDeviceActionChk( msg, NO_DATA, absmv.mm );
    00001884 36F14000               MOV.B       @(0:12,R15),R6; absmv.mm
    00001888 3F010001               MOV.B       R0,@(1:12,R15); absmv.st
    0000188C E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    0000188E B692                   BSR         __$GetDeviceActionChk
    00001890 64D3                   MOV         R13,R4
             tskcmd.c       2494    
             tskcmd.c       2495          if( result == E_SUCCESS )
    00001892 2008                   TST         R0,R0
    00001894 8F0F                   BF/S        L323
    00001896 6703                   MOV         R0,R7
             tskcmd.c       2496          {
             tskcmd.c       2497              result = AbsmvAction( NO_DATA, NO_DATA, absmv.mm, absmv.st, absmv.pppp );
    00001898 7FFC                   ADD         #-4,R15
    0000189A E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    0000189C 52F2                   MOV.L       @(8,R15),R2; absmv.pppp
    0000189E 655C                   EXTU.B      R5,R5
    000018A0 36F14004               MOV.B       @(4:12,R15),R6; absmv.mm
    000018A4 37F14005               MOV.B       @(5:12,R15),R7; absmv.st
    000018A8 2F22                   MOV.L       R2,@R15
    000018AA B715                   BSR         __$AbsmvAction
    000018AC 6453                   MOV         R5,R4
    000018AE 7F04                   ADD         #4,R15
             tskcmd.c       2498          }
             tskcmd.c       2499      }
             tskcmd.c       2500    
             tskcmd.c       2501      if( result != E_SUCCESS )
    000018B0 2008                   TST         R0,R0
    000018B2 8D15                   BT/S        L325
    000018B4 6703                   MOV         R0,R7
    000018B6              L323:
             tskcmd.c       2502      {
             tskcmd.c       2503          // 応答メッセージ作成
             tskcmd.c       2504          CmdMakeResponse(    &stCtl,
             tskcmd.c       2505                              PARAM7,                                     //0  パラメータ数
             tskcmd.c       2506                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2507                              result,                                     //2  エラーコード
             tskcmd.c       2508    
             tskcmd.c       2509                              (INT)absmv.mm,                              //3  モータ１番号
             tskcmd.c       2510                              0,                                          //4  パルスカウント１
             tskcmd.c       2511                              0,                                          //5  エンコーダ１
             tskcmd.c       2512                              0,                                          //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2513                              0,                                          //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2514    
             tskcmd.c       2515                              0,                                          //8  
             tskcmd.c       2516                              0,                                          //9  
             tskcmd.c       2517                              0,                                          //10 
             tskcmd.c       2518                              0,                                          //11 
             tskcmd.c       2519                              0                                           //12 
             tskcmd.c       2520                          );
    000018B6 E200                   MOV         #0,R2      ; H'00000000
    000018B8 2F26                   MOV.L       R2,@-R15
    000018BA 2F26                   MOV.L       R2,@-R15
    000018BC 2F26                   MOV.L       R2,@-R15
    000018BE 2F26                   MOV.L       R2,@-R15
    000018C0 2F26                   MOV.L       R2,@-R15
    000018C2 2F26                   MOV.L       R2,@-R15
    000018C4 2F26                   MOV.L       R2,@-R15
    000018C6 2F26                   MOV.L       R2,@-R15
    000018C8 2F26                   MOV.L       R2,@-R15
    000018CA 31F18024               MOVU.B      @(36,R15),R1; absmv.mm
    000018CE 2F16                   MOV.L       R1,@-R15
    000018D0 E507                   MOV         #7,R5      ; H'00000007
    000018D2 D425                   MOV.L       L1378+14,R4; __$stCtl
    000018D4 B87A                   BSR         _CmdMakeResponse
    000018D6 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2521    
             tskcmd.c       2522          // 応答メッセージ送信
             tskcmd.c       2523          CmdSendResponse( &stCtl );
    000018D8 D423                   MOV.L       L1378+14,R4; __$stCtl
    000018DA D325                   MOV.L       L1378+22,R3; _CmdSendResponse
    000018DC 430B                   JSR         @R3
    000018DE 7F28                   ADD         #40,R15
    000018E0              L325:
    000018E0 7F08                   ADD         #8,R15
    000018E2 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       2524      }
             tskcmd.c       2525    }
    000018E4 006B                   RTS/N
             tskcmd.c       2526    
             tskcmd.c       2527    /***********************************************************************
             tskcmd.c       2528    *
             tskcmd.c       2529    * [概要]  ABORT   パルスモータ即停止
             tskcmd.c       2530    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2531    * [戻値]  -
             tskcmd.c       2532    * 
             tskcmd.c       2533    ***********************************************************************/
             tskcmd.c       2534    static void CmdABORT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000018E6              __$CmdABORT:                     ; function: __$CmdABORT
                                                           ; frame size=52
    000018E6 4EF0                   MOVMU.L     R14,@-R15
    000018E8 7FFC                   ADD         #-4,R15
    000018EA 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
    000018EE 655C                   EXTU.B      R5,R5
             tskcmd.c       2535    {
             tskcmd.c       2536      ER result = E_SUCCESS;
             tskcmd.c       2537      ST_STOP abort;
             tskcmd.c       2538      UB  msg;
             tskcmd.c       2539    
             tskcmd.c       2540      msg = mrcv->msgdata.msgid;
             tskcmd.c       2541    
             tskcmd.c       2542      //  データチェック
             tskcmd.c       2543      result = ParamDataCheck( msg, anum, args );
    000018F0 BC82                   BSR         __$ParamDataCheck
    000018F2 6E63                   MOV         R6,R14
             tskcmd.c       2544    
             tskcmd.c       2545      //  データ正常か
             tskcmd.c       2546      if( result == E_SUCCESS )
    000018F4 2008                   TST         R0,R0
    000018F6 8F45                   BF/S        L328
    000018F8 6703                   MOV         R0,R7
             tskcmd.c       2547      {
             tskcmd.c       2548          // パラメータ取得
             tskcmd.c       2549          abort.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000018FA 54E1                   MOV.L       @(4,R14),R4; args[]
    000018FC E701                   MOV         #1,R7      ; H'00000001
    000018FE E50A                   MOV         #10,R5     ; H'0000000A
    00001900 D116                   MOV.L       L1378+2,R1 ; _Atoi
    00001902 410B                   JSR         @R1
    00001904 6673                   MOV         R7,R6
    00001906 3F010000               MOV.B       R0,@(0:12,R15); abort.mm
    0000190A E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       2550    
             tskcmd.c       2551          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       2552          memcpy( &bufwk[0], (B*)&abort, sizeof( ST_STOP ) );
    0000190C D414                   MOV.L       L1378+6,R4 ; __$bufwk
    0000190E D71B                   MOV.L       L1378+34,R7; _memcpy
    00001910 470B                   JSR         @R7
    00001912 65F3                   MOV         R15,R5
    00001914 32F18000               MOVU.B      @(0,R15),R2; abort.mm
             tskcmd.c       2553    
             tskcmd.c       2554          // 既に励磁ONの場合は、実行タスクへ
             tskcmd.c       2555          if( power[abort.mm].sw == SET)
    00001918 D419                   MOV.L       L1378+38,R4; H'00000001+__$power
    0000191A 6023                   MOV         R2,R0
    0000191C EE3C                   MOV         #60,R14    ; H'0000003C
    0000191E 4000                   SHLL        R0
    00001920 004C                   MOV.B       @(R0,R4),R0; power[].sw
    00001922 8801                   CMP/EQ      #1,R0
    00001924 2FE6                   MOV.L       R14,@-R15
    00001926 D10E                   MOV.L       L1378+6,R1 ; __$bufwk
    00001928 2F16                   MOV.L       R1,@-R15
    0000192A E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    0000192C 611C                   EXTU.B      R1,R1
    0000192E 6713                   MOV         R1,R7
    00001930 2F16                   MOV.L       R1,@-R15
    00001932 2F26                   MOV.L       R2,@-R15
    00001934 E20A                   MOV         #10,R2     ; H'0000000A
    00001936 2F26                   MOV.L       R2,@-R15
    00001938 D20A                   MOV.L       L1378+10,R2; _mbx_send
    0000193A 8F03                   BF/S        L330
    0000193C 2F16                   MOV.L       R1,@-R15
             tskcmd.c       2556          {
             tskcmd.c       2557              result = mbx_send   (
             tskcmd.c       2558                                      ID_TSK_CMD,
             tskcmd.c       2559                                      ID_MPF_MOTACT,
             tskcmd.c       2560                                      ID_MBX_MOTACT,
             tskcmd.c       2561                                      NO_DATA,
             tskcmd.c       2562                                      NO_DATA,
             tskcmd.c       2563                                      ID_MSG_ABORT,
             tskcmd.c       2564                                      abort.mm,
             tskcmd.c       2565                                      DEFDAT,
             tskcmd.c       2566                                      &bufwk[0],
             tskcmd.c       2567                                      CMD_BUFSIZ
             tskcmd.c       2568                                  );
    0000193E E609                   MOV         #9,R6      ; H'00000009
    00001940 A002                   BRA         L331
    00001942 E508                   MOV         #8,R5      ; H'00000008
    00001944              L330:
             tskcmd.c       2569          }
             tskcmd.c       2570          else
             tskcmd.c       2571          {
             tskcmd.c       2572              result = mbx_send   (
             tskcmd.c       2573                                      ID_TSK_CMD,
             tskcmd.c       2574                                      ID_MPF_MOTWAIT,
             tskcmd.c       2575                                      ID_MBX_MOTWAIT,
             tskcmd.c       2576                                      NO_DATA,
             tskcmd.c       2577                                      NO_DATA,
             tskcmd.c       2578                                      ID_MSG_ABORT,
             tskcmd.c       2579                                      abort.mm,
             tskcmd.c       2580                                      DEFDAT,
             tskcmd.c       2581                                      &bufwk[0],
             tskcmd.c       2582                                      CMD_BUFSIZ
             tskcmd.c       2583                                  );
    00001944 E608                   MOV         #8,R6      ; H'00000008
    00001946 E507                   MOV         #7,R5      ; H'00000007
    00001948              L331:
             tskcmd.c       2584          }
             tskcmd.c       2585          ClrDevice( abort.mm );
    00001948 420B                   JSR         @R2
    0000194A E405                   MOV         #5,R4      ; H'00000005
    0000194C 7F18                   ADD         #24,R15
    0000194E 34F14000               MOV.B       @(0:12,R15),R4; abort.mm
    00001952 B623                   BSR         __$ClrDevice
    00001954 0009                   NOP
    00001956 A028                   BRA         L332
    00001958 0009                   NOP
    0000195A              L1378:
    0000195A 00000002               .RES.W      1
    0000195C <00000000>             .DATA.L     _Atoi
    00001960 <00000000>             .DATA.L     __$bufwk
    00001964 <00000000>             .DATA.L     _mbx_send
    00001968 <00000000>             .DATA.L     __$stCtl
    0000196C <00000000>             .DATA.L     _GetCount
    00001970 <00000000>             .DATA.L     _CmdSendResponse
    00001974 <00000000>             .DATA.L     _memset
    00001978 <00000000>             .DATA.L     _SetByteArray
    0000197C <00000000>             .DATA.L     _memcpy
    00001980 <00000001>             .DATA.L     H'00000001+__$power
    00001984              L328:
             tskcmd.c       2586      }
             tskcmd.c       2587      else
             tskcmd.c       2588      {
             tskcmd.c       2589          // 応答メッセージ作成
             tskcmd.c       2590          CmdMakeResponse(    &stCtl,
             tskcmd.c       2591                              PARAM2,                                         //0  パラメータ数
             tskcmd.c       2592                              args[0],                                        //1  コマンド文字列
             tskcmd.c       2593                              result,                                         //2  エラーコード
             tskcmd.c       2594    
             tskcmd.c       2595                              0,                                              //3  モータ１番号
             tskcmd.c       2596                              0,                                              //4  パルスカウント１
             tskcmd.c       2597                              0,                                              //5  エンコーダ１
             tskcmd.c       2598                              0,                                              //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2599                              0,                                              //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2600    
             tskcmd.c       2601                              0,                                              //8  
             tskcmd.c       2602                              0,                                              //9  
             tskcmd.c       2603                              0,                                              //10 
             tskcmd.c       2604                              0,                                              //11 
             tskcmd.c       2605                              0                                               //12 
             tskcmd.c       2606                          );
    00001984 0229                   MOVT        R2
    00001986 2F26                   MOV.L       R2,@-R15
    00001988 2F26                   MOV.L       R2,@-R15
    0000198A 2F26                   MOV.L       R2,@-R15
    0000198C 2F26                   MOV.L       R2,@-R15
    0000198E 2F26                   MOV.L       R2,@-R15
    00001990 2F26                   MOV.L       R2,@-R15
    00001992 2F26                   MOV.L       R2,@-R15
    00001994 2F26                   MOV.L       R2,@-R15
    00001996 2F26                   MOV.L       R2,@-R15
    00001998 2F26                   MOV.L       R2,@-R15
    0000199A E502                   MOV         #2,R5      ; H'00000002
    0000199C D4A5                   MOV.L       L1379+2,R4 ; __$stCtl
    0000199E B815                   BSR         _CmdMakeResponse
    000019A0 66E2                   MOV.L       @R14,R6    ; args[]
             tskcmd.c       2607    
             tskcmd.c       2608          // 応答メッセージ送信
             tskcmd.c       2609          CmdSendResponse( &stCtl );
    000019A2 D4A4                   MOV.L       L1379+2,R4 ; __$stCtl
    000019A4 D3A4                   MOV.L       L1379+6,R3 ; _CmdSendResponse
    000019A6 430B                   JSR         @R3
    000019A8 7F28                   ADD         #40,R15
    000019AA              L332:
    000019AA 7F04                   ADD         #4,R15
    000019AC 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       2610      }
             tskcmd.c       2611    }
    000019AE 006B                   RTS/N
             tskcmd.c       2612    
             tskcmd.c       2613    /***********************************************************************
             tskcmd.c       2614    *
             tskcmd.c       2615    * [概要]  ENCODER エンコーダの設定
             tskcmd.c       2616    * [引数]  メッセージ、引数の数、ｺﾏﾝﾄﾞ電文
             tskcmd.c       2617    * [戻値]  エラー
             tskcmd.c       2618    * 
             tskcmd.c       2619    ***********************************************************************/
             tskcmd.c       2620    static void CmdENCODER( T_CMD_MSG* mrcv, UB anum, const char** args )
    000019B0              __$CmdENCODER:                   ; function: __$CmdENCODER
                                                           ; frame size=68
    000019B0 49F0                   MOVMU.L     R9,@-R15
    000019B2 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2621    {
             tskcmd.c       2622      ER  result = E_SUCCESS;
             tskcmd.c       2623      UB  mm   = CLR;
             tskcmd.c       2624      UB  ec   = CLR;
             tskcmd.c       2625      UB  dtyp = CLR;
             tskcmd.c       2626      UB  dv   = CLR;
             tskcmd.c       2627      INT so   = CLR;
             tskcmd.c       2628      UB  msg;
             tskcmd.c       2629    
             tskcmd.c       2630      msg = mrcv->msgdata.msgid;
             tskcmd.c       2631    
             tskcmd.c       2632      //  データチェック
             tskcmd.c       2633      result = ParamDataCheck( msg, anum, args );
    000019B6 655C                   EXTU.B      R5,R5
    000019B8 ED00                   MOV         #0,R13     ; H'00000000
    000019BA BC1D                   BSR         __$ParamDataCheck
    000019BC 6E63                   MOV         R6,R14
             tskcmd.c       2634    
             tskcmd.c       2635      //  データ正常か
             tskcmd.c       2636      if( result == E_SUCCESS )
    000019BE 2008                   TST         R0,R0
    000019C0 8F27                   BF/S        L335
    000019C2 6703                   MOV         R0,R7
             tskcmd.c       2637      {
             tskcmd.c       2638          // パラメータ取得
             tskcmd.c       2639          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000019C4 54E1                   MOV.L       @(4,R14),R4; args[]
    000019C6 E701                   MOV         #1,R7      ; H'00000001
    000019C8 E50A                   MOV         #10,R5     ; H'0000000A
    000019CA DB9C                   MOV.L       L1379+10,R11; _Atoi
    000019CC 4B0B                   JSR         @R11
    000019CE 6673                   MOV         R7,R6
             tskcmd.c       2640          ec   = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    000019D0 54E2                   MOV.L       @(8,R14),R4; args[]
    000019D2 E701                   MOV         #1,R7      ; H'00000001
    000019D4 E50A                   MOV         #10,R5     ; H'0000000A
    000019D6 6D03                   MOV         R0,R13
    000019D8 4B0B                   JSR         @R11
    000019DA 6673                   MOV         R7,R6
             tskcmd.c       2641          dtyp = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    000019DC 54E3                   MOV.L       @(12,R14),R4; args[]
    000019DE E701                   MOV         #1,R7      ; H'00000001
    000019E0 E50A                   MOV         #10,R5     ; H'0000000A
    000019E2 6A03                   MOV         R0,R10
    000019E4 4B0B                   JSR         @R11
    000019E6 6673                   MOV         R7,R6
             tskcmd.c       2642          dv   = Atoi( args[PARAM4], N_DEC, sizeof(UB), N_SIG );
    000019E8 54E4                   MOV.L       @(16,R14),R4; args[]
    000019EA E701                   MOV         #1,R7      ; H'00000001
    000019EC E50A                   MOV         #10,R5     ; H'0000000A
    000019EE 6C03                   MOV         R0,R12
    000019F0 4B0B                   JSR         @R11
    000019F2 6673                   MOV         R7,R6
             tskcmd.c       2643          so   = Atoi( args[PARAM5], N_DEC, sizeof(INT), N_SIG );
    000019F4 54E5                   MOV.L       @(20,R14),R4; args[]
    000019F6 E701                   MOV         #1,R7      ; H'00000001
    000019F8 E604                   MOV         #4,R6      ; H'00000004
    000019FA E50A                   MOV         #10,R5     ; H'0000000A
    000019FC 4B0B                   JSR         @R11
    000019FE 6903                   MOV         R0,R9
             tskcmd.c       2644          
             tskcmd.c       2645          result = motor_ENCODER( mm, ec, dtyp, dv, so );
    00001A00 2F06                   MOV.L       R0,@-R15
    00001A02 679C                   EXTU.B      R9,R7
    00001A04 66CC                   EXTU.B      R12,R6
    00001A06 65AC                   EXTU.B      R10,R5
    00001A08 D28D                   MOV.L       L1379+14,R2; _motor_ENCODER
    00001A0A 420B                   JSR         @R2
    00001A0C 64DC                   EXTU.B      R13,R4
    00001A0E 6703                   MOV         R0,R7
    00001A10 7F04                   ADD         #4,R15
    00001A12              L335:
             tskcmd.c       2646      }
             tskcmd.c       2647    
             tskcmd.c       2648      // 応答メッセージ作成
             tskcmd.c       2649      CmdMakeResponse(    &stCtl,
             tskcmd.c       2650                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2651                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2652                          result,                                         //2  エラーコード
             tskcmd.c       2653    
             tskcmd.c       2654                          mm,                                             //3  モータ番号
             tskcmd.c       2655                          0,                                              //4  
             tskcmd.c       2656                          0,                                              //5  
             tskcmd.c       2657                          0,                                              //6  
             tskcmd.c       2658                          0,                                              //7  
             tskcmd.c       2659    
             tskcmd.c       2660                          0,                                              //8  
             tskcmd.c       2661                          0,                                              //9  
             tskcmd.c       2662                          0,                                              //10 
             tskcmd.c       2663                          0,                                              //11 
             tskcmd.c       2664                          0                                               //12 
             tskcmd.c       2665                      );
    00001A12 E100                   MOV         #0,R1      ; H'00000000
    00001A14 2F16                   MOV.L       R1,@-R15
    00001A16 2F16                   MOV.L       R1,@-R15
    00001A18 2F16                   MOV.L       R1,@-R15
    00001A1A 2F16                   MOV.L       R1,@-R15
    00001A1C 2F16                   MOV.L       R1,@-R15
    00001A1E 2F16                   MOV.L       R1,@-R15
    00001A20 2F16                   MOV.L       R1,@-R15
    00001A22 2F16                   MOV.L       R1,@-R15
    00001A24 2F16                   MOV.L       R1,@-R15
    00001A26 69DC                   EXTU.B      R13,R9
    00001A28 2F96                   MOV.L       R9,@-R15
    00001A2A E503                   MOV         #3,R5      ; H'00000003
    00001A2C D481                   MOV.L       L1379+2,R4 ; __$stCtl
    00001A2E D385                   MOV.L       L1379+18,R3; _CmdMakeResponse
    00001A30 430B                   JSR         @R3
    00001A32 66E2                   MOV.L       @R14,R6    ; args[]
    00001A34 7F28                   ADD         #40,R15
             tskcmd.c       2666    
             tskcmd.c       2667        // 応答メッセージ送信
             tskcmd.c       2668      CmdSendResponse( &stCtl );
    00001A36 D47F                   MOV.L       L1379+2,R4 ; __$stCtl
    00001A38 49F4                   MOVMU.L     @R15+,R9
    00001A3A D37F                   MOV.L       L1379+6,R3 ; _CmdSendResponse
    00001A3C 432B                   JMP         @R3
    00001A3E 0009                   NOP
             tskcmd.c       2669    }
             tskcmd.c       2670    
             tskcmd.c       2671    /***********************************************************************
             tskcmd.c       2672    *
             tskcmd.c       2673    * [概要]  LIMIT   パルスモータ原点復帰
             tskcmd.c       2674    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2675    * [戻値]  -
             tskcmd.c       2676    * 
             tskcmd.c       2677    ***********************************************************************/
             tskcmd.c       2678    static void CmdLIMIT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001A40              __$CmdLIMIT:                     ; function: __$CmdLIMIT
                                                           ; frame size=64
    00001A40 4CF0                   MOVMU.L     R12,@-R15
    00001A42 7FF8                   ADD         #-8,R15
             tskcmd.c       2679    {
             tskcmd.c       2680      ER       result = E_SUCCESS;
             tskcmd.c       2681      ST_LIMIT limit;
             tskcmd.c       2682      UB       msg;
             tskcmd.c       2683    
             tskcmd.c       2684      msg = mrcv->msgdata.msgid;
    00001A44 6C63                   MOV         R6,R12
    00001A46 E63C                   MOV         #60,R6     ; H'0000003C
    00001A48 6E53                   MOV         R5,R14
    00001A4A 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       2685    
             tskcmd.c       2686      // 初期化
             tskcmd.c       2687      memset( &bufwk, 0, sizeof( bufwk ) );
    00001A4E D47E                   MOV.L       L1379+22,R4; __$bufwk
    00001A50 D17E                   MOV.L       L1379+26,R1; _memset
    00001A52 410B                   JSR         @R1
    00001A54 E500                   MOV         #0,R5      ; H'00000000
    00001A56 E608                   MOV         #8,R6      ; H'00000008
    00001A58 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2688      memset( &limit,  0,  sizeof( ST_LIMIT ) );
    00001A5A D27C                   MOV.L       L1379+26,R2; _memset
    00001A5C 420B                   JSR         @R2
    00001A5E 64F3                   MOV         R15,R4
             tskcmd.c       2689    
             tskcmd.c       2690      //  データチェック
             tskcmd.c       2691      result = ParamDataCheck( msg, anum, args );
    00001A60 65EC                   EXTU.B      R14,R5
    00001A62 66C3                   MOV         R12,R6
    00001A64 BBC8                   BSR         __$ParamDataCheck
    00001A66 64D3                   MOV         R13,R4
             tskcmd.c       2692    
             tskcmd.c       2693      //  データ正常か
             tskcmd.c       2694      if( result == E_SUCCESS )
    00001A68 2008                   TST         R0,R0
    00001A6A 8F36                   BF/S        L338
    00001A6C 6703                   MOV         R0,R7
             tskcmd.c       2695      {
             tskcmd.c       2696          // パラメータ取得
             tskcmd.c       2697          limit.mm  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001A6E 54C1                   MOV.L       @(4,R12),R4; args[]
    00001A70 E701                   MOV         #1,R7      ; H'00000001
    00001A72 E50A                   MOV         #10,R5     ; H'0000000A
    00001A74 D271                   MOV.L       L1379+10,R2; _Atoi
    00001A76 420B                   JSR         @R2
    00001A78 6673                   MOV         R7,R6
    00001A7A 3F010000               MOV.B       R0,@(0:12,R15); limit.mm
             tskcmd.c       2698          limit.dr = GetCwInfo( args[PARAM2 ] );                      // 移動方向     CW : 正転方向, CCW : 逆転方向
    00001A7E D174                   MOV.L       L1379+30,R1; _GetCwInfo
    00001A80 410B                   JSR         @R1
    00001A82 54C2                   MOV.L       @(8,R12),R4; args[]
    00001A84 E701                   MOV         #1,R7      ; H'00000001
    00001A86 6E03                   MOV         R0,R14
    00001A88 6073                   MOV         R7,R0
    00001A8A 0FE4                   MOV.B       R14,@(R0,R15); limit.dr
    00001A8C E604                   MOV         #4,R6      ; H'00000004
    00001A8E E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       2699          limit.sp = Atoi( args[PARAM3], N_DEC, sizeof(INT), N_SIG );
    00001A90 DE6A                   MOV.L       L1379+10,R14; _Atoi
    00001A92 4E0B                   JSR         @R14
    00001A94 54C3                   MOV.L       @(12,R12),R4; args[]
    00001A96 1F01                   MOV.L       R0,@(4,R15); limit.sp
    00001A98 E701                   MOV         #1,R7      ; H'00000001
    00001A9A E50A                   MOV         #10,R5     ; H'0000000A
    00001A9C 6673                   MOV         R7,R6
             tskcmd.c       2700          limit.md = Atoi( args[PARAM4], N_DEC, sizeof(UB), N_SIG );
    00001A9E D167                   MOV.L       L1379+10,R1; _Atoi
    00001AA0 410B                   JSR         @R1
    00001AA2 54C4                   MOV.L       @(16,R12),R4; args[]
             tskcmd.c       2701    
             tskcmd.c       2702          // デバイス動作状態確認
             tskcmd.c       2703          result = GetDeviceActionChk( msg, NO_DATA, limit.mm );
    00001AA4 36F14000               MOV.B       @(0:12,R15),R6; limit.mm
    00001AA8 3F010002               MOV.B       R0,@(2:12,R15); limit.md
    00001AAC E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001AAE B582                   BSR         __$GetDeviceActionChk
    00001AB0 64D3                   MOV         R13,R4
             tskcmd.c       2704    
             tskcmd.c       2705          if( result == E_SUCCESS )
    00001AB2 2008                   TST         R0,R0
    00001AB4 8F11                   BF/S        L338
    00001AB6 6703                   MOV         R0,R7
             tskcmd.c       2706          {
             tskcmd.c       2707              // デバイス動作中にセット
             tskcmd.c       2708              result = LimitAction(   
             tskcmd.c       2709                              NO_DATA,
             tskcmd.c       2710                              NO_DATA,
             tskcmd.c       2711                              limit.mm,
             tskcmd.c       2712                              limit.dr, 
             tskcmd.c       2713                              GENTEN_POS,
             tskcmd.c       2714                              limit.sp
             tskcmd.c       2715                          );                                              // リミット位置動作
    00001AB8 7FFC                   ADD         #-4,R15
    00001ABA ED00                   MOV         #0,R13     ; H'00000000
    00001ABC 51F2                   MOV.L       @(8,R15),R1; limit.sp
    00001ABE 2F12                   MOV.L       R1,@R15
    00001AC0 2FD6                   MOV.L       R13,@-R15
    00001AC2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001AC4 36F14008               MOV.B       @(8:12,R15),R6; limit.mm
    00001AC8 37F14009               MOV.B       @(9:12,R15),R7; limit.dr
    00001ACC 655C                   EXTU.B      R5,R5
    00001ACE B584                   BSR         __$LimitAction
    00001AD0 6453                   MOV         R5,R4
    00001AD2 7F08                   ADD         #8,R15
             tskcmd.c       2716          }
             tskcmd.c       2717      }
             tskcmd.c       2718    
             tskcmd.c       2719      if( result != E_SUCCESS )
    00001AD4 2008                   TST         R0,R0
    00001AD6 8D16                   BT/S        L340
    00001AD8 6703                   MOV         R0,R7
    00001ADA              L338:
             tskcmd.c       2720      {
             tskcmd.c       2721          // 応答メッセージ作成
             tskcmd.c       2722          CmdMakeResponse(    &stCtl,
             tskcmd.c       2723                              PARAM3,                                     //0  パラメータ数
             tskcmd.c       2724                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2725                              result,                                     //2  エラーコード
             tskcmd.c       2726    
             tskcmd.c       2727                              (INT)limit.mm,                              //3  モータ１番号
             tskcmd.c       2728                              0,                                          //4  パルスカウント１
             tskcmd.c       2729                              0,                                          //5  エンコーダ１
             tskcmd.c       2730                              0,                                          //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2731                              0,                                          //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2732    
             tskcmd.c       2733                              0,                                          //8  
             tskcmd.c       2734                              0,                                          //9  
             tskcmd.c       2735                              0,                                          //10 
             tskcmd.c       2736                              0,                                          //11 
             tskcmd.c       2737                              0                                           //12 
             tskcmd.c       2738                          );
    00001ADA E200                   MOV         #0,R2      ; H'00000000
    00001ADC 2F26                   MOV.L       R2,@-R15
    00001ADE 2F26                   MOV.L       R2,@-R15
    00001AE0 2F26                   MOV.L       R2,@-R15
    00001AE2 2F26                   MOV.L       R2,@-R15
    00001AE4 2F26                   MOV.L       R2,@-R15
    00001AE6 2F26                   MOV.L       R2,@-R15
    00001AE8 2F26                   MOV.L       R2,@-R15
    00001AEA 2F26                   MOV.L       R2,@-R15
    00001AEC 2F26                   MOV.L       R2,@-R15
    00001AEE 3EF18024               MOVU.B      @(36,R15),R14; limit.mm
    00001AF2 2FE6                   MOV.L       R14,@-R15
    00001AF4 E503                   MOV         #3,R5      ; H'00000003
    00001AF6 D44F                   MOV.L       L1379+2,R4 ; __$stCtl
    00001AF8 D352                   MOV.L       L1379+18,R3; _CmdMakeResponse
    00001AFA 430B                   JSR         @R3
    00001AFC 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2739    
             tskcmd.c       2740          // 応答メッセージ送信
             tskcmd.c       2741          CmdSendResponse( &stCtl );
    00001AFE D44D                   MOV.L       L1379+2,R4 ; __$stCtl
    00001B00 D34D                   MOV.L       L1379+6,R3 ; _CmdSendResponse
    00001B02 430B                   JSR         @R3
    00001B04 7F28                   ADD         #40,R15
    00001B06              L340:
    00001B06 7F08                   ADD         #8,R15
    00001B08 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       2742      }
             tskcmd.c       2743    }
    00001B0A 006B                   RTS/N
             tskcmd.c       2744    /***********************************************************************
             tskcmd.c       2745    *
             tskcmd.c       2746    * [概要]  MAP     ２軸のパルスモータ移動
             tskcmd.c       2747    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2748    * [戻値]  -
             tskcmd.c       2749    * 
             tskcmd.c       2750    ***********************************************************************/
             tskcmd.c       2751    static void CmdMAP    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001B0C              __$CmdMAP:                       ; function: __$CmdMAP
                                                           ; frame size=124
    00001B0C 4BF0                   MOVMU.L     R11,@-R15
    00001B0E 7FC0                   ADD         #-64,R15
             tskcmd.c       2752    {
             tskcmd.c       2753      ER result  = E_SUCCESS;
             tskcmd.c       2754      UB  msg;
             tskcmd.c       2755      ST_ABSMV absmv;
             tskcmd.c       2756      ST_ABSMV absmv2;
             tskcmd.c       2757      ST_MOTOR_STATUS     sts1;                                       // 
             tskcmd.c       2758      ST_MOTOR_STATUS     sts2;                                       // 
             tskcmd.c       2759    
             tskcmd.c       2760      msg = mrcv->msgdata.msgid;
    00001B10 6C63                   MOV         R6,R12
    00001B12 E63C                   MOV         #60,R6     ; H'0000003C
    00001B14 6D53                   MOV         R5,R13
    00001B16 3B41801B               MOVU.B      @(27,R4),R11; (mrcv)->msgid
             tskcmd.c       2761      
             tskcmd.c       2762      // 初期化
             tskcmd.c       2763      memset( &bufwk,  CLR, sizeof( bufwk ) );
    00001B1A D44B                   MOV.L       L1379+22,R4; __$bufwk
    00001B1C DE4B                   MOV.L       L1379+26,R14; _memset
    00001B1E 4E0B                   JSR         @R14
    00001B20 E500                   MOV         #0,R5      ; H'00000000
    00001B22 E618                   MOV         #24,R6     ; H'00000018
    00001B24 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2764      memset( &sts1,   CLR, sizeof( ST_MOTOR_STATUS ) );
    00001B26 4E0B                   JSR         @R14
    00001B28 64F3                   MOV         R15,R4
             tskcmd.c       2765      memset( &sts2,   CLR, sizeof( ST_MOTOR_STATUS ) );
    00001B2A 64F3                   MOV         R15,R4
    00001B2C 7418                   ADD         #24,R4
    00001B2E E618                   MOV         #24,R6     ; H'00000018
    00001B30 4E0B                   JSR         @R14
    00001B32 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2766      memset( &absmv,  CLR, sizeof( ST_ABSMV ) );
    00001B34 64F3                   MOV         R15,R4
    00001B36 7430                   ADD         #48,R4
    00001B38 E608                   MOV         #8,R6      ; H'00000008
    00001B3A 4E0B                   JSR         @R14
    00001B3C E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2767      memset( &absmv2, CLR, sizeof( ST_ABSMV ) );
    00001B3E 64F3                   MOV         R15,R4
    00001B40 7438                   ADD         #56,R4
    00001B42 E608                   MOV         #8,R6      ; H'00000008
    00001B44 4E0B                   JSR         @R14
    00001B46 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2768      
             tskcmd.c       2769      //  データチェック
             tskcmd.c       2770      result = ParamDataCheck( msg, anum, args );
    00001B48 65DC                   EXTU.B      R13,R5
    00001B4A 66C3                   MOV         R12,R6
    00001B4C BB54                   BSR         __$ParamDataCheck
    00001B4E 64B3                   MOV         R11,R4
             tskcmd.c       2771    
             tskcmd.c       2772      //  データ正常か
             tskcmd.c       2773      if( result == E_SUCCESS )
    00001B50 2008                   TST         R0,R0
    00001B52 8F44                   BF/S        L343
    00001B54 6703                   MOV         R0,R7
             tskcmd.c       2774      {
             tskcmd.c       2775          // パラメータ取得
             tskcmd.c       2776          absmv.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001B56 54C1                   MOV.L       @(4,R12),R4; args[]
    00001B58 E701                   MOV         #1,R7      ; H'00000001
    00001B5A E50A                   MOV         #10,R5     ; H'0000000A
    00001B5C DE37                   MOV.L       L1379+10,R14; _Atoi
    00001B5E 4E0B                   JSR         @R14
    00001B60 6673                   MOV         R7,R6
    00001B62 3F010030               MOV.B       R0,@(48:12,R15); absmv.mm
             tskcmd.c       2777          absmv.pppp = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001B66 54C2                   MOV.L       @(8,R12),R4; args[]
    00001B68 E701                   MOV         #1,R7      ; H'00000001
    00001B6A E604                   MOV         #4,R6      ; H'00000004
    00001B6C 4E0B                   JSR         @R14
    00001B6E E50A                   MOV         #10,R5     ; H'0000000A
    00001B70 1F0D                   MOV.L       R0,@(52,R15); absmv.pppp
    00001B72 E701                   MOV         #1,R7      ; H'00000001
    00001B74 E50A                   MOV         #10,R5     ; H'0000000A
    00001B76 6673                   MOV         R7,R6
             tskcmd.c       2778          absmv.st   = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    00001B78 4E0B                   JSR         @R14
    00001B7A 54C3                   MOV.L       @(12,R12),R4; args[]
    00001B7C 3F010031               MOV.B       R0,@(49:12,R15); absmv.st
             tskcmd.c       2779    
             tskcmd.c       2780          // パラメータ取得
             tskcmd.c       2781          absmv2.mm   = Atoi( args[PARAM4], N_DEC, sizeof(UB), N_SIG );
    00001B80 54C4                   MOV.L       @(16,R12),R4; args[]
    00001B82 E701                   MOV         #1,R7      ; H'00000001
    00001B84 E50A                   MOV         #10,R5     ; H'0000000A
    00001B86 4E0B                   JSR         @R14
    00001B88 6673                   MOV         R7,R6
    00001B8A 3F010038               MOV.B       R0,@(56:12,R15); absmv2.mm
             tskcmd.c       2782          absmv2.pppp = Atoi( args[PARAM5], N_DEC, sizeof(INT), N_SIG );
    00001B8E 54C5                   MOV.L       @(20,R12),R4; args[]
    00001B90 E701                   MOV         #1,R7      ; H'00000001
    00001B92 E604                   MOV         #4,R6      ; H'00000004
    00001B94 4E0B                   JSR         @R14
    00001B96 E50A                   MOV         #10,R5     ; H'0000000A
    00001B98 1F0F                   MOV.L       R0,@(60,R15); absmv2.pppp
    00001B9A E701                   MOV         #1,R7      ; H'00000001
    00001B9C E50A                   MOV         #10,R5     ; H'0000000A
    00001B9E 6673                   MOV         R7,R6
             tskcmd.c       2783          absmv2.st   = Atoi( args[PARAM6], N_DEC, sizeof(UB), N_SIG );
    00001BA0 4E0B                   JSR         @R14
    00001BA2 54C6                   MOV.L       @(24,R12),R4; args[]
             tskcmd.c       2784    
             tskcmd.c       2785          // デバイス動作状態確認
             tskcmd.c       2786          result = GetDeviceActionChk( msg, NO_DATA, absmv.mm );
    00001BA4 36F14030               MOV.B       @(48:12,R15),R6; absmv.mm
    00001BA8 3F010039               MOV.B       R0,@(57:12,R15); absmv2.st
    00001BAC E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001BAE B502                   BSR         __$GetDeviceActionChk
    00001BB0 64B3                   MOV         R11,R4
             tskcmd.c       2787    
             tskcmd.c       2788          if( result == E_SUCCESS )
    00001BB2 2008                   TST         R0,R0
    00001BB4 8F13                   BF/S        L343
    00001BB6 6703                   MOV         R0,R7
             tskcmd.c       2789          {
             tskcmd.c       2790              result = MapAction( NO_DATA, NO_DATA, absmv.mm, absmv2.mm, absmv.pppp, absmv2.pppp );
    00001BB8 7FFC                   ADD         #-4,R15
    00001BBA 31F16010               MOV.L       @(64:12,R15),R1; absmv2.pppp
    00001BBE 2F12                   MOV.L       R1,@R15
    00001BC0 7FFC                   ADD         #-4,R15
    00001BC2 5BFF                   MOV.L       @(60,R15),R11; absmv.pppp
    00001BC4 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001BC6 36F14038               MOV.B       @(56:12,R15),R6; absmv.mm
    00001BCA 37F14040               MOV.B       @(64:12,R15),R7; absmv2.mm
    00001BCE 2FB2                   MOV.L       R11,@R15
    00001BD0 655C                   EXTU.B      R5,R5
    00001BD2 B5E3                   BSR         __$MapAction
    00001BD4 6453                   MOV         R5,R4
    00001BD6 7F08                   ADD         #8,R15
             tskcmd.c       2791          }
             tskcmd.c       2792      }
             tskcmd.c       2793    
             tskcmd.c       2794      if( result != E_SUCCESS )
    00001BD8 2008                   TST         R0,R0
    00001BDA 8D27                   BT/S        L345
    00001BDC 6703                   MOV         R0,R7
    00001BDE              L343:
             tskcmd.c       2795      {
             tskcmd.c       2796          // 応答メッセージ作成
             tskcmd.c       2797          CmdMakeResponse(    &stCtl,
             tskcmd.c       2798                              PARAM12,                                    //0  パラメータ数
             tskcmd.c       2799                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2800                              result,                                     //2  エラーコード
             tskcmd.c       2801    
             tskcmd.c       2802                              absmv.mm,                                   //3  モータ１番号
             tskcmd.c       2803                              sts1.pos,                                   //4  パルスカウント
             tskcmd.c       2804                              sts1.enc,                                   //5  エンコーダ
             tskcmd.c       2805                              sts1.cw_limit,                              //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2806                              sts1.ccw_limit,                             //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2807    
             tskcmd.c       2808                              absmv2.mm,                                  //8  モータ２番号
             tskcmd.c       2809                              sts2.pos,                                   //9  パルスカウント
             tskcmd.c       2810                              sts2.enc,                                   //10 エンコーダ
             tskcmd.c       2811                              sts2.cw_limit,                              //11 CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2812                              sts2.ccw_limit                              //12 CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2813                          );
    00001BDE 7FFC                   ADD         #-4,R15
    00001BE0 5DFC                   MOV.L       @(48,R15),R13; sts2.ccw_limit
    00001BE2 2FD2                   MOV.L       R13,@R15
    00001BE4 7FFC                   ADD         #-4,R15
    00001BE6 5EFC                   MOV.L       @(48,R15),R14; sts2.cw_limit
    00001BE8 2FE2                   MOV.L       R14,@R15
    00001BEA 7FFC                   ADD         #-4,R15
    00001BEC 51FA                   MOV.L       @(40,R15),R1; sts2.enc
    00001BEE 2F12                   MOV.L       R1,@R15
    00001BF0 7FFC                   ADD         #-4,R15
    00001BF2 54FA                   MOV.L       @(40,R15),R4; sts2.pos
    00001BF4 3EF18048               MOVU.B      @(72,R15),R14; absmv2.mm
    00001BF8 2F42                   MOV.L       R4,@R15
    00001BFA 2FE6                   MOV.L       R14,@-R15
    00001BFC 7FFC                   ADD         #-4,R15
    00001BFE 55FB                   MOV.L       @(44,R15),R5; sts1.ccw_limit
    00001C00 2F52                   MOV.L       R5,@R15
    00001C02 7FFC                   ADD         #-4,R15
    00001C04 5BFB                   MOV.L       @(44,R15),R11; sts1.cw_limit
    00001C06 2FB2                   MOV.L       R11,@R15
    00001C08 7FFC                   ADD         #-4,R15
    00001C0A 5DF9                   MOV.L       @(36,R15),R13; sts1.enc
    00001C0C 2FD2                   MOV.L       R13,@R15
    00001C0E 7FFC                   ADD         #-4,R15
    00001C10 52F9                   MOV.L       @(36,R15),R2; sts1.pos
    00001C12 31F18054               MOVU.B      @(84,R15),R1; absmv.mm
    00001C16 2F22                   MOV.L       R2,@R15
    00001C18 2F16                   MOV.L       R1,@-R15
    00001C1A E50C                   MOV         #12,R5     ; H'0000000C
    00001C1C D405                   MOV.L       L1379+2,R4 ; __$stCtl
    00001C1E D309                   MOV.L       L1379+18,R3; _CmdMakeResponse
    00001C20 430B                   JSR         @R3
    00001C22 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2814    
             tskcmd.c       2815          // 応答メッセージ送信
             tskcmd.c       2816          CmdSendResponse( &stCtl );
    00001C24 D403                   MOV.L       L1379+2,R4 ; __$stCtl
    00001C26 D304                   MOV.L       L1379+6,R3 ; _CmdSendResponse
    00001C28 430B                   JSR         @R3
    00001C2A 7F28                   ADD         #40,R15
    00001C2C              L345:
    00001C2C 7F40                   ADD         #64,R15
    00001C2E 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       2817      }
             tskcmd.c       2818    }
    00001C30 006B                   RTS/N
    00001C32              L1379:
    00001C32 00000002               .RES.W      1
    00001C34 <00000000>             .DATA.L     __$stCtl
    00001C38 <00000000>             .DATA.L     _CmdSendResponse
    00001C3C <00000000>             .DATA.L     _Atoi
    00001C40 <00000000>             .DATA.L     _motor_ENCODER
    00001C44 <00000000>             .DATA.L     _CmdMakeResponse
    00001C48 <00000000>             .DATA.L     __$bufwk
    00001C4C <00000000>             .DATA.L     _memset
    00001C50 <00000000>             .DATA.L     _GetCwInfo
             tskcmd.c       2819    
             tskcmd.c       2820    /***********************************************************************
             tskcmd.c       2821    *
             tskcmd.c       2822    * [概要]  PDELAY  パルスモータのパワー制御待ち時間設定
             tskcmd.c       2823    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2824    * [戻値]  -
             tskcmd.c       2825    * 
             tskcmd.c       2826    ***********************************************************************/
             tskcmd.c       2827    static void CmdPDELAY ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001C54              __$CmdPDELAY:                    ; function: __$CmdPDELAY
                                                           ; frame size=72
    00001C54 4BF0                   MOVMU.L     R11,@-R15
    00001C56 7FF4                   ADD         #-12,R15
             tskcmd.c       2828    {
             tskcmd.c       2829      ER result = E_SUCCESS;
             tskcmd.c       2830      ST_PDELAY   pdelay;
             tskcmd.c       2831      UB msg;
             tskcmd.c       2832    
             tskcmd.c       2833      msg = mrcv->msgdata.msgid;
    00001C58 6C63                   MOV         R6,R12
    00001C5A E63C                   MOV         #60,R6     ; H'0000003C
    00001C5C 6E53                   MOV         R5,R14
    00001C5E 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       2834    
             tskcmd.c       2835      // 初期化
             tskcmd.c       2836      memset( &bufwk, 0, sizeof( bufwk ) );
    00001C62 D4AB                   MOV.L       L1380+2,R4 ; __$bufwk
    00001C64 D2AB                   MOV.L       L1380+6,R2 ; _memset
    00001C66 420B                   JSR         @R2
    00001C68 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2837      
             tskcmd.c       2838      //  データチェック
             tskcmd.c       2839      result = ParamDataCheck( msg, anum, args );
    00001C6A 65EC                   EXTU.B      R14,R5
    00001C6C 66C3                   MOV         R12,R6
    00001C6E BAC3                   BSR         __$ParamDataCheck
    00001C70 64D3                   MOV         R13,R4
             tskcmd.c       2840    
             tskcmd.c       2841      //  データ正常か
             tskcmd.c       2842      if( result == E_SUCCESS )
    00001C72 2008                   TST         R0,R0
    00001C74 8F47                   BF/S        L348
    00001C76 6703                   MOV         R0,R7
             tskcmd.c       2843      {
             tskcmd.c       2844          // パラメータ取得
             tskcmd.c       2845          pdelay.mm    = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001C78 54C1                   MOV.L       @(4,R12),R4; args[]
    00001C7A E701                   MOV         #1,R7      ; H'00000001
    00001C7C E50A                   MOV         #10,R5     ; H'0000000A
    00001C7E D2A6                   MOV.L       L1380+10,R2; _Atoi
    00001C80 420B                   JSR         @R2
    00001C82 6673                   MOV         R7,R6
    00001C84 3F010000               MOV.B       R0,@(0:12,R15); pdelay.mm
             tskcmd.c       2846          pdelay.tttt  = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001C88 54C2                   MOV.L       @(8,R12),R4; args[]
    00001C8A E701                   MOV         #1,R7      ; H'00000001
    00001C8C E604                   MOV         #4,R6      ; H'00000004
    00001C8E DBA2                   MOV.L       L1380+10,R11; _Atoi
    00001C90 4B0B                   JSR         @R11
    00001C92 E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       2847    
             tskcmd.c       2848          // デバイス動作状態確認
             tskcmd.c       2849          result = GetDeviceActionChk( msg, NO_DATA, pdelay.mm );
    00001C94 36F14000               MOV.B       @(0:12,R15),R6; pdelay.mm
    00001C98 1F01                   MOV.L       R0,@(4,R15); pdelay.tttt
    00001C9A E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001C9C B48B                   BSR         __$GetDeviceActionChk
    00001C9E 64D3                   MOV         R13,R4
             tskcmd.c       2850    
             tskcmd.c       2851          if( result == E_SUCCESS )
    00001CA0 2008                   TST         R0,R0
    00001CA2 8F30                   BF/S        L348
    00001CA4 6703                   MOV         R0,R7
    00001CA6 E608                   MOV         #8,R6      ; H'00000008
             tskcmd.c       2852          {
             tskcmd.c       2853              // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       2854              memcpy( &bufwk[0], (B*)&pdelay, sizeof( ST_PDELAY ) );
             tskcmd.c       2855    
             tskcmd.c       2856              // 待ちタスクへ通知
             tskcmd.c       2857              result = mbx_send( ID_TSK_CMD,  
             tskcmd.c       2858                                 ID_MPF_MOTWAIT, 
             tskcmd.c       2859                                 ID_MBX_MOTWAIT, 
             tskcmd.c       2860                                 NO_DATA, 
             tskcmd.c       2861                                 NO_DATA, 
             tskcmd.c       2862                                 msg, 
             tskcmd.c       2863                                 pdelay.mm, 
             tskcmd.c       2864                                 DEFDAT, 
             tskcmd.c       2865                                 &bufwk[0], 
             tskcmd.c       2866                                 CMD_BUFSIZ);
    00001CA8 EE3C                   MOV         #60,R14    ; H'0000003C
    00001CAA D499                   MOV.L       L1380+2,R4 ; __$bufwk
    00001CAC D19B                   MOV.L       L1380+14,R1; _memcpy
    00001CAE 410B                   JSR         @R1
    00001CB0 65F3                   MOV         R15,R5
    00001CB2 2FE6                   MOV.L       R14,@-R15
    00001CB4 DE96                   MOV.L       L1380+2,R14; __$bufwk
    00001CB6 2FE6                   MOV.L       R14,@-R15
    00001CB8 EBFF                   MOV         #-1,R11    ; H'FFFFFFFF
    00001CBA 6BBC                   EXTU.B      R11,R11
    00001CBC E010                   MOV         #16,R0     ; H'00000010
    00001CBE 67B3                   MOV         R11,R7
    00001CC0 0FB4                   MOV.B       R11,@(R0,R15)
    00001CC2 2FB6                   MOV.L       R11,@-R15
    00001CC4 7FFC                   ADD         #-4,R15
    00001CC6 0EFC                   MOV.B       @(R0,R15),R14; pdelay.mm
    00001CC8 6EEC                   EXTU.B      R14,R14
    00001CCA 2FE2                   MOV.L       R14,@R15
    00001CCC 2FD6                   MOV.L       R13,@-R15
    00001CCE 2FB6                   MOV.L       R11,@-R15
    00001CD0 E608                   MOV         #8,R6      ; H'00000008
    00001CD2 E507                   MOV         #7,R5      ; H'00000007
    00001CD4 DE92                   MOV.L       L1380+18,R14; _mbx_send
    00001CD6 4E0B                   JSR         @R14
    00001CD8 E405                   MOV         #5,R4      ; H'00000005
    00001CDA 7F18                   ADD         #24,R15
             tskcmd.c       2867    
             tskcmd.c       2868              result = mbx_send( ID_TSK_CMD,  
             tskcmd.c       2869                                 ID_MPF_MOTEND,  
             tskcmd.c       2870                                 ID_MBX_MOTEND,  
             tskcmd.c       2871                                 NO_DATA, 
             tskcmd.c       2872                                 NO_DATA, 
             tskcmd.c       2873                                 msg, 
             tskcmd.c       2874                                 pdelay.mm, 
             tskcmd.c       2875                                 DEFDAT, 
             tskcmd.c       2876                                 &bufwk[0], 
             tskcmd.c       2877                                 CMD_BUFSIZ);
    00001CDC EB3C                   MOV         #60,R11    ; H'0000003C
    00001CDE 2FB6                   MOV.L       R11,@-R15
    00001CE0 D18B                   MOV.L       L1380+2,R1 ; __$bufwk
    00001CE2 2F16                   MOV.L       R1,@-R15
    00001CE4 7FFC                   ADD         #-4,R15
    00001CE6 37F18014               MOVU.B      @(20,R15),R7
    00001CEA 2F72                   MOV.L       R7,@R15
    00001CEC 7FFC                   ADD         #-4,R15
    00001CEE 32F18010               MOVU.B      @(16,R15),R2; pdelay.mm
    00001CF2 2F22                   MOV.L       R2,@R15
    00001CF4 2FD6                   MOV.L       R13,@-R15
    00001CF6 2F76                   MOV.L       R7,@-R15
    00001CF8 E60A                   MOV         #10,R6     ; H'0000000A
    00001CFA E509                   MOV         #9,R5      ; H'00000009
    00001CFC DD88                   MOV.L       L1380+18,R13; _mbx_send
    00001CFE 4D0B                   JSR         @R13
    00001D00 E405                   MOV         #5,R4      ; H'00000005
    00001D02 6703                   MOV         R0,R7
    00001D04 7F18                   ADD         #24,R15
    00001D06              L348:
             tskcmd.c       2878              
             tskcmd.c       2879          }
             tskcmd.c       2880      }
             tskcmd.c       2881    
             tskcmd.c       2882      // 応答メッセージ作成
             tskcmd.c       2883      CmdMakeResponse(    &stCtl,
             tskcmd.c       2884                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2885                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2886                          result,                                         //2  エラーコード
             tskcmd.c       2887    
             tskcmd.c       2888                          (INT)pdelay.mm,                                 //3  モータ１番号
             tskcmd.c       2889                          0,                                              //4  パルスカウント１
             tskcmd.c       2890                          0,                                              //5  エンコーダ１
             tskcmd.c       2891                          0,                                              //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2892                          0,                                              //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2893    
             tskcmd.c       2894                          0,                                              //8  
             tskcmd.c       2895                          0,                                              //9  
             tskcmd.c       2896                          0,                                              //10 
             tskcmd.c       2897                          0,                                              //11 
             tskcmd.c       2898                          0                                               //12 
             tskcmd.c       2899                      );
    00001D06 E200                   MOV         #0,R2      ; H'00000000
    00001D08 2F26                   MOV.L       R2,@-R15
    00001D0A 2F26                   MOV.L       R2,@-R15
    00001D0C 2F26                   MOV.L       R2,@-R15
    00001D0E 2F26                   MOV.L       R2,@-R15
    00001D10 2F26                   MOV.L       R2,@-R15
    00001D12 2F26                   MOV.L       R2,@-R15
    00001D14 2F26                   MOV.L       R2,@-R15
    00001D16 2F26                   MOV.L       R2,@-R15
    00001D18 2F26                   MOV.L       R2,@-R15
    00001D1A 3EF18024               MOVU.B      @(36,R15),R14; pdelay.mm
    00001D1E 2FE6                   MOV.L       R14,@-R15
    00001D20 E503                   MOV         #3,R5      ; H'00000003
    00001D22 D480                   MOV.L       L1380+22,R4; __$stCtl
    00001D24 D380                   MOV.L       L1380+26,R3; _CmdMakeResponse
    00001D26 430B                   JSR         @R3
    00001D28 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2900    
             tskcmd.c       2901        // 応答メッセージ送信
             tskcmd.c       2902      CmdSendResponse( &stCtl );
    00001D2A D47E                   MOV.L       L1380+22,R4; __$stCtl
    00001D2C D37F                   MOV.L       L1380+30,R3; _CmdSendResponse
    00001D2E 430B                   JSR         @R3
    00001D30 7F28                   ADD         #40,R15
    00001D32 7F0C                   ADD         #12,R15
    00001D34 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       2903    }
    00001D36 006B                   RTS/N
             tskcmd.c       2904    
             tskcmd.c       2905    /***********************************************************************
             tskcmd.c       2906    *
             tskcmd.c       2907    * [概要]  POWER   パルスモータの励磁制御
             tskcmd.c       2908    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2909    * [戻値]  -
             tskcmd.c       2910    * 
             tskcmd.c       2911    ***********************************************************************/
             tskcmd.c       2912    static void CmdPOWER  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001D38              __$CmdPOWER:                     ; function: __$CmdPOWER
                                                           ; frame size=60
    00001D38 4BF0                   MOVMU.L     R11,@-R15
             tskcmd.c       2913    {
             tskcmd.c       2914      ER result = E_SUCCESS;
             tskcmd.c       2915      UB mm     = CLR;
             tskcmd.c       2916      UB sw;
             tskcmd.c       2917      UB msg;
             tskcmd.c       2918    
             tskcmd.c       2919      msg = mrcv->msgdata.msgid;
    00001D3A 3441801B               MOVU.B      @(27,R4),R4; (mrcv)->msgid
             tskcmd.c       2920    
             tskcmd.c       2921      //  データチェック
             tskcmd.c       2922      result = ParamDataCheck( msg, anum, args );
    00001D3E 655C                   EXTU.B      R5,R5
    00001D40 ED00                   MOV         #0,R13     ; H'00000000
    00001D42 6C63                   MOV         R6,R12
    00001D44 BA58                   BSR         __$ParamDataCheck
    00001D46 6E43                   MOV         R4,R14
             tskcmd.c       2923    
             tskcmd.c       2924      //  データ正常か
             tskcmd.c       2925      if( result == E_SUCCESS )
    00001D48 2008                   TST         R0,R0
    00001D4A 8F21                   BF/S        L352
    00001D4C 6703                   MOV         R0,R7
             tskcmd.c       2926      {
             tskcmd.c       2927          // パラメータ取得
             tskcmd.c       2928          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001D4E 54C1                   MOV.L       @(4,R12),R4; args[]
    00001D50 E701                   MOV         #1,R7      ; H'00000001
    00001D52 E50A                   MOV         #10,R5     ; H'0000000A
    00001D54 D270                   MOV.L       L1380+10,R2; _Atoi
    00001D56 420B                   JSR         @R2
    00001D58 6673                   MOV         R7,R6
             tskcmd.c       2929          sw   = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    00001D5A 54C2                   MOV.L       @(8,R12),R4; args[]
    00001D5C E701                   MOV         #1,R7      ; H'00000001
    00001D5E E50A                   MOV         #10,R5     ; H'0000000A
    00001D60 6D03                   MOV         R0,R13
    00001D62 D16D                   MOV.L       L1380+10,R1; _Atoi
    00001D64 410B                   JSR         @R1
    00001D66 6673                   MOV         R7,R6
             tskcmd.c       2930    
             tskcmd.c       2931          // デバイス動作状態確認
             tskcmd.c       2932          result = GetDeviceActionChk( msg, NO_DATA, mm );
    00001D68 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001D6A 6B03                   MOV         R0,R11
    00001D6C 66D3                   MOV         R13,R6
    00001D6E B422                   BSR         __$GetDeviceActionChk
    00001D70 64E3                   MOV         R14,R4
             tskcmd.c       2933    
             tskcmd.c       2934          if( result == E_SUCCESS )
    00001D72 2008                   TST         R0,R0
    00001D74 8F0C                   BF/S        L352
    00001D76 6703                   MOV         R0,R7
             tskcmd.c       2935          {
             tskcmd.c       2936              // 励磁
             tskcmd.c       2937              result = motor_POWER( mm, sw );
    00001D78 65BC                   EXTU.B      R11,R5
    00001D7A D66D                   MOV.L       L1380+34,R6; _motor_POWER
    00001D7C 460B                   JSR         @R6
    00001D7E 64DC                   EXTU.B      R13,R4
             tskcmd.c       2938    
             tskcmd.c       2939              // POWER状態登録
             tskcmd.c       2940              power[mm].mm = mm;
    00001D80 6DDC                   EXTU.B      R13,R13
    00001D82 6703                   MOV         R0,R7
    00001D84 60D3                   MOV         R13,R0
    00001D86 4000                   SHLL        R0
    00001D88 DE6A                   MOV.L       L1380+38,R14; __$power
    00001D8A 0ED4                   MOV.B       R13,@(R0,R14); power[].mm
             tskcmd.c       2941              power[mm].sw = sw;
    00001D8C 7E01                   ADD         #1,R14
    00001D8E 0EB4                   MOV.B       R11,@(R0,R14); power[].sw
    00001D90              L352:
             tskcmd.c       2942          }
             tskcmd.c       2943      }
             tskcmd.c       2944    
             tskcmd.c       2945      // 応答メッセージ作成
             tskcmd.c       2946      CmdMakeResponse(    &stCtl,
             tskcmd.c       2947                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2948                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2949                          result,                                         //2  エラーコード
             tskcmd.c       2950    
             tskcmd.c       2951                          (INT)mm,                                        //3  モータ１番号
             tskcmd.c       2952                          0,                                              //4  
             tskcmd.c       2953                          0,                                              //5  
             tskcmd.c       2954                          0,                                              //6  
             tskcmd.c       2955                          0,                                              //7  
             tskcmd.c       2956    
             tskcmd.c       2957                          0,                                              //8  
             tskcmd.c       2958                          0,                                              //9  
             tskcmd.c       2959                          0,                                              //10 
             tskcmd.c       2960                          0,                                              //11 
             tskcmd.c       2961                          0                                               //12 
             tskcmd.c       2962                      );
    00001D90 E100                   MOV         #0,R1      ; H'00000000
    00001D92 2F16                   MOV.L       R1,@-R15
    00001D94 2F16                   MOV.L       R1,@-R15
    00001D96 2F16                   MOV.L       R1,@-R15
    00001D98 2F16                   MOV.L       R1,@-R15
    00001D9A 2F16                   MOV.L       R1,@-R15
    00001D9C 2F16                   MOV.L       R1,@-R15
    00001D9E 2F16                   MOV.L       R1,@-R15
    00001DA0 2F16                   MOV.L       R1,@-R15
    00001DA2 2F16                   MOV.L       R1,@-R15
    00001DA4 6BDC                   EXTU.B      R13,R11
    00001DA6 2FB6                   MOV.L       R11,@-R15
    00001DA8 E503                   MOV         #3,R5      ; H'00000003
    00001DAA D45E                   MOV.L       L1380+22,R4; __$stCtl
    00001DAC D35E                   MOV.L       L1380+26,R3; _CmdMakeResponse
    00001DAE 430B                   JSR         @R3
    00001DB0 66C2                   MOV.L       @R12,R6    ; args[]
    00001DB2 7F28                   ADD         #40,R15
             tskcmd.c       2963    
             tskcmd.c       2964        // 応答メッセージ送信
             tskcmd.c       2965      CmdSendResponse( &stCtl );
    00001DB4 D45B                   MOV.L       L1380+22,R4; __$stCtl
    00001DB6 4BF4                   MOVMU.L     @R15+,R11
    00001DB8 D35C                   MOV.L       L1380+30,R3; _CmdSendResponse
    00001DBA 432B                   JMP         @R3
    00001DBC 0009                   NOP
             tskcmd.c       2966    }
             tskcmd.c       2967    
             tskcmd.c       2968    /***********************************************************************
             tskcmd.c       2969    *
             tskcmd.c       2970    * [概要]  PSET    パルスモータのカウンタリセット
             tskcmd.c       2971    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2972    * [戻値]  -
             tskcmd.c       2973    * 
             tskcmd.c       2974    ***********************************************************************/
             tskcmd.c       2975    static void CmdPSET   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001DBE              __$CmdPSET:                      ; function: __$CmdPSET
                                                           ; frame size=72
    00001DBE 48F0                   MOVMU.L     R8,@-R15
             tskcmd.c       2976    {
             tskcmd.c       2977      ER      result = E_SUCCESS;
             tskcmd.c       2978      UB      mm     = CLR;       // 
             tskcmd.c       2979      INT     cnt;                // 
             tskcmd.c       2980      INT     enc    = CLR;       // 
             tskcmd.c       2981      INT     def    = CLR;       // 
             tskcmd.c       2982      UB  msg;
             tskcmd.c       2983    
             tskcmd.c       2984      msg = mrcv->msgdata.msgid;
    00001DC0 3441801B               MOVU.B      @(27,R4),R4; (mrcv)->msgid
             tskcmd.c       2985    
             tskcmd.c       2986      
             tskcmd.c       2987      //  データチェック
             tskcmd.c       2988      result = ParamDataCheck( msg, anum, args );
    00001DC4 655C                   EXTU.B      R5,R5
    00001DC6 EC00                   MOV         #0,R12     ; H'00000000
    00001DC8 6D63                   MOV         R6,R13
    00001DCA BA15                   BSR         __$ParamDataCheck
    00001DCC 6E43                   MOV         R4,R14
             tskcmd.c       2989    
             tskcmd.c       2990      //  データ正常か
             tskcmd.c       2991      if( result == E_SUCCESS )
    00001DCE 2008                   TST         R0,R0
    00001DD0 8F28                   BF/S        L356
    00001DD2 6703                   MOV         R0,R7
             tskcmd.c       2992      {
             tskcmd.c       2993          // パラメータ取得
             tskcmd.c       2994          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001DD4 54D1                   MOV.L       @(4,R13),R4; args[]
    00001DD6 E701                   MOV         #1,R7      ; H'00000001
    00001DD8 E50A                   MOV         #10,R5     ; H'0000000A
    00001DDA DB4F                   MOV.L       L1380+10,R11; _Atoi
    00001DDC 4B0B                   JSR         @R11
    00001DDE 6673                   MOV         R7,R6
             tskcmd.c       2995          cnt  = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001DE0 54D2                   MOV.L       @(8,R13),R4; args[]
    00001DE2 E701                   MOV         #1,R7      ; H'00000001
    00001DE4 E604                   MOV         #4,R6      ; H'00000004
    00001DE6 E50A                   MOV         #10,R5     ; H'0000000A
    00001DE8 6A03                   MOV         R0,R10
    00001DEA 4B0B                   JSR         @R11
    00001DEC 6C03                   MOV         R0,R12
             tskcmd.c       2996          enc  = Atoi( args[PARAM3], N_DEC, sizeof(INT), N_SIG );
    00001DEE 54D3                   MOV.L       @(12,R13),R4; args[]
    00001DF0 E701                   MOV         #1,R7      ; H'00000001
    00001DF2 E604                   MOV         #4,R6      ; H'00000004
    00001DF4 E50A                   MOV         #10,R5     ; H'0000000A
    00001DF6 4B0B                   JSR         @R11
    00001DF8 6803                   MOV         R0,R8
             tskcmd.c       2997          def  = Atoi( args[PARAM4], N_DEC, sizeof(INT), N_SIG );
    00001DFA 54D4                   MOV.L       @(16,R13),R4; args[]
    00001DFC E701                   MOV         #1,R7      ; H'00000001
    00001DFE E604                   MOV         #4,R6      ; H'00000004
    00001E00 E50A                   MOV         #10,R5     ; H'0000000A
    00001E02 4B0B                   JSR         @R11
    00001E04 6903                   MOV         R0,R9
             tskcmd.c       2998    
             tskcmd.c       2999          // デバイス動作状態確認
             tskcmd.c       3000          result = GetDeviceActionChk( msg, NO_DATA, mm );
    00001E06 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001E08 6B03                   MOV         R0,R11
    00001E0A 64E3                   MOV         R14,R4
    00001E0C B3D3                   BSR         __$GetDeviceActionChk
    00001E0E 66A3                   MOV         R10,R6
             tskcmd.c       3001    
             tskcmd.c       3002          if( result == E_SUCCESS )
    00001E10 2008                   TST         R0,R0
    00001E12 8F07                   BF/S        L356
    00001E14 6703                   MOV         R0,R7
             tskcmd.c       3003          {
             tskcmd.c       3004              // パルスモータのカウンタリセット
             tskcmd.c       3005              result = motor_PSET( mm, cnt, enc, def );
    00001E16 64CC                   EXTU.B      R12,R4
    00001E18 6583                   MOV         R8,R5
    00001E1A 6693                   MOV         R9,R6
    00001E1C D246                   MOV.L       L1380+42,R2; _motor_PSET
    00001E1E 420B                   JSR         @R2
    00001E20 67B3                   MOV         R11,R7
    00001E22 6703                   MOV         R0,R7
    00001E24              L356:
             tskcmd.c       3006          }
             tskcmd.c       3007      }
             tskcmd.c       3008    
             tskcmd.c       3009      // 応答メッセージ作成
             tskcmd.c       3010      CmdMakeResponse(    &stCtl,
             tskcmd.c       3011                          PARAM4,                                         //0  パラメータ数
             tskcmd.c       3012                          args[0],                                        //1  コマンド文字列
             tskcmd.c       3013                          result,                                         //2  エラーコード
             tskcmd.c       3014    
             tskcmd.c       3015                          (INT)mm,                                        //3  モータ１番号
             tskcmd.c       3016                          0,                                              //4  
             tskcmd.c       3017                          0,                                              //5  
             tskcmd.c       3018                          0,                                              //6  
             tskcmd.c       3019                          0,                                              //7  
             tskcmd.c       3020    
             tskcmd.c       3021                          0,                                              //8  
             tskcmd.c       3022                          0,                                              //9  
             tskcmd.c       3023                          0,                                              //10 
             tskcmd.c       3024                          0,                                              //11 
             tskcmd.c       3025                          0                                               //12 
             tskcmd.c       3026                      );
    00001E24 E100                   MOV         #0,R1      ; H'00000000
    00001E26 2F16                   MOV.L       R1,@-R15
    00001E28 2F16                   MOV.L       R1,@-R15
    00001E2A 2F16                   MOV.L       R1,@-R15
    00001E2C 2F16                   MOV.L       R1,@-R15
    00001E2E 2F16                   MOV.L       R1,@-R15
    00001E30 2F16                   MOV.L       R1,@-R15
    00001E32 2F16                   MOV.L       R1,@-R15
    00001E34 2F16                   MOV.L       R1,@-R15
    00001E36 2F16                   MOV.L       R1,@-R15
    00001E38 68CC                   EXTU.B      R12,R8
    00001E3A 2F86                   MOV.L       R8,@-R15
    00001E3C E504                   MOV         #4,R5      ; H'00000004
    00001E3E D439                   MOV.L       L1380+22,R4; __$stCtl
    00001E40 D339                   MOV.L       L1380+26,R3; _CmdMakeResponse
    00001E42 430B                   JSR         @R3
    00001E44 66D2                   MOV.L       @R13,R6    ; args[]
    00001E46 7F28                   ADD         #40,R15
             tskcmd.c       3027      
             tskcmd.c       3028        // 応答メッセージ送信
             tskcmd.c       3029      CmdSendResponse( &stCtl );
    00001E48 D436                   MOV.L       L1380+22,R4; __$stCtl
    00001E4A 48F4                   MOVMU.L     @R15+,R8
    00001E4C D337                   MOV.L       L1380+30,R3; _CmdSendResponse
    00001E4E 432B                   JMP         @R3
    00001E50 0009                   NOP
             tskcmd.c       3030    }
             tskcmd.c       3031    /***********************************************************************
             tskcmd.c       3032    *
             tskcmd.c       3033    * [概要]  RELMV   パルスモータ移動(相対位置)
             tskcmd.c       3034    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3035    * [戻値]  -
             tskcmd.c       3036    * 
             tskcmd.c       3037    ***********************************************************************/
             tskcmd.c       3038    static void CmdRELMV  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001E52              __$CmdRELMV:                     ; function: __$CmdRELMV
                                                           ; frame size=64
    00001E52 4CF0                   MOVMU.L     R12,@-R15
    00001E54 7FF8                   ADD         #-8,R15
             tskcmd.c       3039    {
             tskcmd.c       3040      ST_RELMV relmv;
             tskcmd.c       3041      ER result = E_SUCCESS;
             tskcmd.c       3042      UB msg;
             tskcmd.c       3043    
             tskcmd.c       3044      msg = mrcv->msgdata.msgid;
    00001E56 6C63                   MOV         R6,R12
    00001E58 E63C                   MOV         #60,R6     ; H'0000003C
    00001E5A 6E53                   MOV         R5,R14
    00001E5C 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       3045      
             tskcmd.c       3046      // 初期化
             tskcmd.c       3047      memset( &bufwk,CLR, sizeof( bufwk ) );
    00001E60 D42B                   MOV.L       L1380+2,R4 ; __$bufwk
    00001E62 D12C                   MOV.L       L1380+6,R1 ; _memset
    00001E64 410B                   JSR         @R1
    00001E66 E500                   MOV         #0,R5      ; H'00000000
    00001E68 E608                   MOV         #8,R6      ; H'00000008
    00001E6A E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       3048      memset( &relmv,CLR, sizeof( ST_RELMV ) );
    00001E6C D229                   MOV.L       L1380+6,R2 ; _memset
    00001E6E 420B                   JSR         @R2
    00001E70 64F3                   MOV         R15,R4
             tskcmd.c       3049    
             tskcmd.c       3050      //  データチェック
             tskcmd.c       3051      result = ParamDataCheck( msg, anum, args );
    00001E72 65EC                   EXTU.B      R14,R5
    00001E74 66C3                   MOV         R12,R6
    00001E76 B9BF                   BSR         __$ParamDataCheck
    00001E78 64D3                   MOV         R13,R4
             tskcmd.c       3052    
             tskcmd.c       3053      //  データ正常か
             tskcmd.c       3054      if( result == E_SUCCESS )
    00001E7A 2008                   TST         R0,R0
    00001E7C 8F2E                   BF/S        L360
    00001E7E 6703                   MOV         R0,R7
             tskcmd.c       3055      {
             tskcmd.c       3056          // パラメータ取得
             tskcmd.c       3057          relmv.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001E80 54C1                   MOV.L       @(4,R12),R4; args[]
    00001E82 E701                   MOV         #1,R7      ; H'00000001
    00001E84 E50A                   MOV         #10,R5     ; H'0000000A
    00001E86 D224                   MOV.L       L1380+10,R2; _Atoi
    00001E88 420B                   JSR         @R2
    00001E8A 6673                   MOV         R7,R6
    00001E8C 3F010000               MOV.B       R0,@(0:12,R15); relmv.mm
             tskcmd.c       3058          relmv.pppp = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001E90 54C2                   MOV.L       @(8,R12),R4; args[]
    00001E92 E701                   MOV         #1,R7      ; H'00000001
    00001E94 E604                   MOV         #4,R6      ; H'00000004
    00001E96 DE20                   MOV.L       L1380+10,R14; _Atoi
    00001E98 4E0B                   JSR         @R14
    00001E9A E50A                   MOV         #10,R5     ; H'0000000A
    00001E9C 1F01                   MOV.L       R0,@(4,R15); relmv.pppp
    00001E9E E701                   MOV         #1,R7      ; H'00000001
    00001EA0 E50A                   MOV         #10,R5     ; H'0000000A
    00001EA2 6673                   MOV         R7,R6
             tskcmd.c       3059          relmv.st   = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    00001EA4 D11C                   MOV.L       L1380+10,R1; _Atoi
    00001EA6 410B                   JSR         @R1
    00001EA8 54C3                   MOV.L       @(12,R12),R4; args[]
             tskcmd.c       3060    
             tskcmd.c       3061          // デバイス動作状態確認
             tskcmd.c       3062          result = GetDeviceActionChk( msg, NO_DATA, relmv.mm );
    00001EAA 36F14000               MOV.B       @(0:12,R15),R6; relmv.mm
    00001EAE 3F010001               MOV.B       R0,@(1:12,R15); relmv.st
    00001EB2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001EB4 B37F                   BSR         __$GetDeviceActionChk
    00001EB6 64D3                   MOV         R13,R4
             tskcmd.c       3063    
             tskcmd.c       3064          if( result == E_SUCCESS )
    00001EB8 2008                   TST         R0,R0
    00001EBA 8F0F                   BF/S        L360
    00001EBC 6703                   MOV         R0,R7
             tskcmd.c       3065          {
             tskcmd.c       3066              result = RelmvAction( NO_DATA, NO_DATA, relmv.mm, relmv.st, relmv.pppp );
    00001EBE 7FFC                   ADD         #-4,R15
    00001EC0 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001EC2 52F2                   MOV.L       @(8,R15),R2; relmv.pppp
    00001EC4 655C                   EXTU.B      R5,R5
    00001EC6 36F14004               MOV.B       @(4:12,R15),R6; relmv.mm
    00001ECA 37F14005               MOV.B       @(5:12,R15),R7; relmv.st
    00001ECE 2F22                   MOV.L       R2,@R15
    00001ED0 B3BE                   BSR         __$RelmvAction
    00001ED2 6453                   MOV         R5,R4
    00001ED4 7F04                   ADD         #4,R15
             tskcmd.c       3067          }
             tskcmd.c       3068      }
             tskcmd.c       3069    
             tskcmd.c       3070      if( result != E_SUCCESS )
    00001ED6 2008                   TST         R0,R0
    00001ED8 8D16                   BT/S        L362
    00001EDA 6703                   MOV         R0,R7
    00001EDC              L360:
             tskcmd.c       3071      {
             tskcmd.c       3072          // 応答メッセージ作成
             tskcmd.c       3073          CmdMakeResponse(    &stCtl,
             tskcmd.c       3074                              PARAM7,                                     //0  パラメータ数
             tskcmd.c       3075                              args[0],                                    //1  コマンド文字列
             tskcmd.c       3076                              result,                                     //2  エラーコード
             tskcmd.c       3077    
             tskcmd.c       3078                              (INT)relmv.mm,                              //3  モータ１番号
             tskcmd.c       3079                              0,                                          //4  パルスカウント
             tskcmd.c       3080                              0,                                          //5  エンコーダ
             tskcmd.c       3081                              0,                                          //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3082                              0,                                          //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3083    
             tskcmd.c       3084                              0,                                          //8  
             tskcmd.c       3085                              0,                                          //9  
             tskcmd.c       3086                              0,                                          //10 
             tskcmd.c       3087                              0,                                          //11 
             tskcmd.c       3088                              0                                           //12 
             tskcmd.c       3089                          );
    00001EDC E200                   MOV         #0,R2      ; H'00000000
    00001EDE 2F26                   MOV.L       R2,@-R15
    00001EE0 2F26                   MOV.L       R2,@-R15
    00001EE2 2F26                   MOV.L       R2,@-R15
    00001EE4 2F26                   MOV.L       R2,@-R15
    00001EE6 2F26                   MOV.L       R2,@-R15
    00001EE8 2F26                   MOV.L       R2,@-R15
    00001EEA 2F26                   MOV.L       R2,@-R15
    00001EEC 2F26                   MOV.L       R2,@-R15
    00001EEE 2F26                   MOV.L       R2,@-R15
    00001EF0 31F18024               MOVU.B      @(36,R15),R1; relmv.mm
    00001EF4 2F16                   MOV.L       R1,@-R15
    00001EF6 E507                   MOV         #7,R5      ; H'00000007
    00001EF8 D40A                   MOV.L       L1380+22,R4; __$stCtl
    00001EFA D30B                   MOV.L       L1380+26,R3; _CmdMakeResponse
    00001EFC 430B                   JSR         @R3
    00001EFE 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       3090    
             tskcmd.c       3091          // 応答メッセージ送信
             tskcmd.c       3092          CmdSendResponse( &stCtl );
    00001F00 D408                   MOV.L       L1380+22,R4; __$stCtl
    00001F02 D30A                   MOV.L       L1380+30,R3; _CmdSendResponse
    00001F04 430B                   JSR         @R3
    00001F06 7F28                   ADD         #40,R15
    00001F08              L362:
    00001F08 7F08                   ADD         #8,R15
    00001F0A 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       3093      }
             tskcmd.c       3094    }
    00001F0C 006B                   RTS/N
    00001F0E              L1380:
    00001F0E 00000002               .RES.W      1
    00001F10 <00000000>             .DATA.L     __$bufwk
    00001F14 <00000000>             .DATA.L     _memset
    00001F18 <00000000>             .DATA.L     _Atoi
    00001F1C <00000000>             .DATA.L     _memcpy
    00001F20 <00000000>             .DATA.L     _mbx_send
    00001F24 <00000000>             .DATA.L     __$stCtl
    00001F28 <00000000>             .DATA.L     _CmdMakeResponse
    00001F2C <00000000>             .DATA.L     _CmdSendResponse
    00001F30 <00000000>             .DATA.L     _motor_POWER
    00001F34 <00000000>             .DATA.L     __$power
    00001F38 <00000000>             .DATA.L     _motor_PSET
             tskcmd.c       3095    
             tskcmd.c       3096    /***********************************************************************
             tskcmd.c       3097    *
             tskcmd.c       3098    * [概要]  SET     パルスモータ速度設定
             tskcmd.c       3099    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3100    * [戻値]  -
             tskcmd.c       3101    * 
             tskcmd.c       3102    ***********************************************************************/
             tskcmd.c       3103    static void CmdSET    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001F3C              __$CmdSET:                       ; function: __$CmdSET
                                                           ; frame size=96
    00001F3C 4AF0                   MOVMU.L     R10,@-R15
    00001F3E 7FE0                   ADD         #-32,R15
             tskcmd.c       3104    {
             tskcmd.c       3105      ER      result = E_SUCCESS;
             tskcmd.c       3106      UB      mm     = CLR;       // モータ番号
             tskcmd.c       3107        ST_MOTOR_PARAM        mp;     // 
             tskcmd.c       3108      UB  msg;
             tskcmd.c       3109    
             tskcmd.c       3110      msg = mrcv->msgdata.msgid;
    00001F40 3441801B               MOVU.B      @(27,R4),R4; (mrcv)->msgid
             tskcmd.c       3111    
             tskcmd.c       3112      //  データチェック
             tskcmd.c       3113      result = ParamDataCheck( msg, anum, args );
    00001F44 655C                   EXTU.B      R5,R5
    00001F46 EB00                   MOV         #0,R11     ; H'00000000
    00001F48 6D63                   MOV         R6,R13
    00001F4A B955                   BSR         __$ParamDataCheck
    00001F4C 6C43                   MOV         R4,R12
             tskcmd.c       3114    
             tskcmd.c       3115      //  データ正常か
             tskcmd.c       3116      if( result == E_SUCCESS )
    00001F4E 2008                   TST         R0,R0
    00001F50 8F5E                   BF/S        L365
    00001F52 6E03                   MOV         R0,R14
             tskcmd.c       3117      {
             tskcmd.c       3118          // パラメータ取得   sample: SET,1,1,3,500,7500,500,500
             tskcmd.c       3119          mm            = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001F54 54D1                   MOV.L       @(4,R13),R4; args[]
    00001F56 E701                   MOV         #1,R7      ; H'00000001
    00001F58 E50A                   MOV         #10,R5     ; H'0000000A
    00001F5A DA95                   MOV.L       L1381+2,R10; _Atoi
    00001F5C 4A0B                   JSR         @R10
    00001F5E 6673                   MOV         R7,R6
             tskcmd.c       3120          mp.accel_type = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG ); // 駆動タイプ(０：台形、１：Ｓ字)
    00001F60 54D2                   MOV.L       @(8,R13),R4; args[]
    00001F62 E701                   MOV         #1,R7      ; H'00000001
    00001F64 E50A                   MOV         #10,R5     ; H'0000000A
    00001F66 6E03                   MOV         R0,R14
    00001F68 6B03                   MOV         R0,R11
    00001F6A 4A0B                   JSR         @R10
    00001F6C 6673                   MOV         R7,R6
    00001F6E 3F011002               MOV.W       R0,@(4:12,R15); mp.accel_type
    00001F72 D190                   MOV.L       L1381+6,R1 ; _MNET_DRV_TYPE
    00001F74 60EC                   EXTU.B      R14,R0
             tskcmd.c       3121          // デバイス:PCD4611
             tskcmd.c       3122          if( MNET_DRV_TYPE[mm] == PCD4611 )
    00001F76 001C                   MOV.B       @(R0,R1),R0; MNET_DRV_TYPE[]
    00001F78 8809                   CMP/EQ      #9,R0
    00001F7A 8F09                   BF/S        L367
    00001F7C 54D3                   MOV.L       @(12,R13),R4; args[]
             tskcmd.c       3123          {
             tskcmd.c       3124              mp.factor     = GetFactorPCD4611( Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG ) );    // モータ倍率
    00001F7E 0729                   MOVT        R7
    00001F80 E50A                   MOV         #10,R5     ; H'0000000A
    00001F82 4A0B                   JSR         @R10
    00001F84 6673                   MOV         R7,R6
    00001F86 D28C                   MOV.L       L1381+10,R2; _GetFactorPCD4611
    00001F88 420B                   JSR         @R2
    00001F8A 6403                   MOV         R0,R4
    00001F8C A007                   BRA         L368
    00001F8E 0009                   NOP
    00001F90              L367:
             tskcmd.c       3125          }
             tskcmd.c       3126          else
             tskcmd.c       3127          {
             tskcmd.c       3128              mp.factor     = GetFactor( Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG ) );    // モータ倍率
    00001F90 0739                   MOVRT       R7
    00001F92 E50A                   MOV         #10,R5     ; H'0000000A
    00001F94 4A0B                   JSR         @R10
    00001F96 6673                   MOV         R7,R6
    00001F98 D288                   MOV.L       L1381+14,R2; _GetFactor
    00001F9A 420B                   JSR         @R2
    00001F9C 6403                   MOV         R0,R4
    00001F9E              L368:
    00001F9E 54D4                   MOV.L       @(16,R13),R4; args[]
    00001FA0 E701                   MOV         #1,R7      ; H'00000001
    00001FA2 E604                   MOV         #4,R6      ; H'00000004
    00001FA4 E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       3129          }
             tskcmd.c       3130          mp.FL         = Atoi( args[PARAM4], N_DEC, sizeof(INT), N_SIG );// 初速[pls](0〜100,000)
    00001FA6 4A0B                   JSR         @R10
    00001FA8 2F02                   MOV.L       R0,@R15    ; mp.factor
             tskcmd.c       3131          mp.FH         = Atoi( args[PARAM5], N_DEC, sizeof(INT), N_SIG );// 最高速[pls](0〜100,000)
    00001FAA 54D5                   MOV.L       @(20,R13),R4; args[]
    00001FAC E701                   MOV         #1,R7      ; H'00000001
    00001FAE E604                   MOV         #4,R6      ; H'00000004
    00001FB0 E50A                   MOV         #10,R5     ; H'0000000A
    00001FB2 4A0B                   JSR         @R10
    00001FB4 1F02                   MOV.L       R0,@(8,R15); mp.FL
             tskcmd.c       3132          mp.utime      = Atoi( args[PARAM6], N_DEC, sizeof(INT), N_SIG );// 加速時間[ms](１〜65535)
    00001FB6 54D6                   MOV.L       @(24,R13),R4; args[]
    00001FB8 E701                   MOV         #1,R7      ; H'00000001
    00001FBA E604                   MOV         #4,R6      ; H'00000004
    00001FBC E50A                   MOV         #10,R5     ; H'0000000A
    00001FBE 4A0B                   JSR         @R10
    00001FC0 1F03                   MOV.L       R0,@(12,R15); mp.FH
             tskcmd.c       3133          mp.dtime      = mp.utime;                                       // 減速時間[ms](１〜65535)
             tskcmd.c       3134          mp.us         = Atoi( args[PARAM7], N_DEC, sizeof(INT), N_SIG );// 加速時Ｓ字範囲
    00001FC2 54D7                   MOV.L       @(28,R13),R4; args[]
    00001FC4 E701                   MOV         #1,R7      ; H'00000001
    00001FC6 E604                   MOV         #4,R6      ; H'00000004
    00001FC8 E50A                   MOV         #10,R5     ; H'0000000A
    00001FCA 1F04                   MOV.L       R0,@(16,R15); mp.utime
    00001FCC 4A0B                   JSR         @R10
    00001FCE 1F05                   MOV.L       R0,@(20,R15); mp.dtime
             tskcmd.c       3135          mp.ds         = mp.us;                                          // 減速時Ｓ字範囲
             tskcmd.c       3136    
             tskcmd.c       3137          // デバイス動作状態確認
             tskcmd.c       3138          result = GetDeviceActionChk( msg, NO_DATA, mm );
    00001FD0 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001FD2 1F06                   MOV.L       R0,@(24,R15); mp.us
    00001FD4 1F07                   MOV.L       R0,@(28,R15); mp.ds
    00001FD6 66B3                   MOV         R11,R6
    00001FD8 B2ED                   BSR         __$GetDeviceActionChk
    00001FDA 64C3                   MOV         R12,R4
             tskcmd.c       3139    
             tskcmd.c       3140          if( result == E_SUCCESS )
    00001FDC 2008                   TST         R0,R0
    00001FDE 8F17                   BF/S        L365
    00001FE0 6E03                   MOV         R0,R14
             tskcmd.c       3141          {
             tskcmd.c       3142              // 設定
             tskcmd.c       3143              motor_SET( mm, mp );
    00001FE2 7FE0                   ADD         #-32,R15
    00001FE4 65F3                   MOV         R15,R5
    00001FE6 7520                   ADD         #32,R5
    00001FE8 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    00001FEA 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    00001FEC 6252                   MOV.L       @R5,R2     ; (part of)mp
    00001FEE 1F41                   MOV.L       R4,@(4,R15)
    00001FF0 5453                   MOV.L       @(12,R5),R4; (part of)mp
    00001FF2 1F72                   MOV.L       R7,@(8,R15)
    00001FF4 5A54                   MOV.L       @(16,R5),R10; (part of)mp
    00001FF6 5755                   MOV.L       @(20,R5),R7; (part of)mp
    00001FF8 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00001FFA 5C57                   MOV.L       @(28,R5),R12; (part of)mp
    00001FFC 2F22                   MOV.L       R2,@R15
    00001FFE 1F43                   MOV.L       R4,@(12,R15)
    00002000 64BC                   EXTU.B      R11,R4
    00002002 1FA4                   MOV.L       R10,@(16,R15)
    00002004 1F75                   MOV.L       R7,@(20,R15)
    00002006 1F66                   MOV.L       R6,@(24,R15)
    00002008 D16D                   MOV.L       L1381+18,R1; _motor_SET
    0000200A 410B                   JSR         @R1
    0000200C 1FC7                   MOV.L       R12,@(28,R15)
    0000200E 7F20                   ADD         #32,R15
    00002010              L365:
             tskcmd.c       3144          }
             tskcmd.c       3145      }
             tskcmd.c       3146    
             tskcmd.c       3147      CmdMakeResponse(    &stCtl,
             tskcmd.c       3148                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       3149                          args[0],                                        //1  コマンド文字列
             tskcmd.c       3150                          result,                                         //2  エラーコード
             tskcmd.c       3151    
             tskcmd.c       3152                          mm,                                             //3  モータ１番号
             tskcmd.c       3153                          0,                                              //4  
             tskcmd.c       3154                          0,                                              //5  
             tskcmd.c       3155                          0,                                              //6  
             tskcmd.c       3156                          0,                                              //7  
             tskcmd.c       3157    
             tskcmd.c       3158                          0,                                              //8  
             tskcmd.c       3159                          0,                                              //9  
             tskcmd.c       3160                          0,                                              //10 
             tskcmd.c       3161                          0,                                              //11 
             tskcmd.c       3162                          0                                               //12 
             tskcmd.c       3163                      );
    00002010 EA00                   MOV         #0,R10     ; H'00000000
    00002012 2FA6                   MOV.L       R10,@-R15
    00002014 2FA6                   MOV.L       R10,@-R15
    00002016 2FA6                   MOV.L       R10,@-R15
    00002018 2FA6                   MOV.L       R10,@-R15
    0000201A 2FA6                   MOV.L       R10,@-R15
    0000201C 2FA6                   MOV.L       R10,@-R15
    0000201E 2FA6                   MOV.L       R10,@-R15
    00002020 2FA6                   MOV.L       R10,@-R15
    00002022 2FA6                   MOV.L       R10,@-R15
    00002024 6CBC                   EXTU.B      R11,R12
    00002026 2FC6                   MOV.L       R12,@-R15
    00002028 E503                   MOV         #3,R5      ; H'00000003
    0000202A 66D2                   MOV.L       @R13,R6    ; args[]
    0000202C D465                   MOV.L       L1381+22,R4; __$stCtl
    0000202E D366                   MOV.L       L1381+26,R3; _CmdMakeResponse
    00002030 430B                   JSR         @R3
    00002032 67E3                   MOV         R14,R7
    00002034 7F28                   ADD         #40,R15
             tskcmd.c       3164    
             tskcmd.c       3165        // 応答メッセージ送信
             tskcmd.c       3166      CmdSendResponse( &stCtl );
    00002036 D463                   MOV.L       L1381+22,R4; __$stCtl
    00002038 7F20                   ADD         #32,R15
    0000203A 4AF4                   MOVMU.L     @R15+,R10
    0000203C D363                   MOV.L       L1381+30,R3; _CmdSendResponse
    0000203E 432B                   JMP         @R3
    00002040 0009                   NOP
             tskcmd.c       3167    
             tskcmd.c       3168    }
             tskcmd.c       3169    
             tskcmd.c       3170    /***********************************************************************
             tskcmd.c       3171    *
             tskcmd.c       3172    * [概要]  STATUS  パルスモータ状態読み出し
             tskcmd.c       3173    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3174    * [戻値]  -
             tskcmd.c       3175    * 
             tskcmd.c       3176    ***********************************************************************/
             tskcmd.c       3177    static void CmdSTATUS ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002042              __$CmdSTATUS:                    ; function: __$CmdSTATUS
                                                           ; frame size=84
    00002042 4BF0                   MOVMU.L     R11,@-R15
    00002044 7FE8                   ADD         #-24,R15
             tskcmd.c       3178    {
             tskcmd.c       3179      ER      result = E_SUCCESS; // エラー情報
             tskcmd.c       3180      UB      mm     = CLR;       // モータ番号
    00002046 6B63                   MOV         R6,R11
    00002048 EC00                   MOV         #0,R12     ; H'00000000
             tskcmd.c       3181      ST_MOTOR_STATUS sts;        // モータ状態
             tskcmd.c       3182      UB  msg;
             tskcmd.c       3183    
             tskcmd.c       3184      msg = mrcv->msgdata.msgid;
    0000204A 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
    0000204E E618                   MOV         #24,R6     ; H'00000018
    00002050 6D53                   MOV         R5,R13
             tskcmd.c       3185    
             tskcmd.c       3186      // 初期化
             tskcmd.c       3187      memset( &sts,  CLR,  sizeof( ST_MOTOR_STATUS ) );
    00002052 64F3                   MOV         R15,R4
    00002054 D25E                   MOV.L       L1381+34,R2; _memset
    00002056 420B                   JSR         @R2
    00002058 65C3                   MOV         R12,R5
             tskcmd.c       3188    
             tskcmd.c       3189    
             tskcmd.c       3190      //  データチェック
             tskcmd.c       3191      result = ParamDataCheck( msg, anum, args );
    0000205A 65DC                   EXTU.B      R13,R5
    0000205C 66B3                   MOV         R11,R6
    0000205E B8CB                   BSR         __$ParamDataCheck
    00002060 64E3                   MOV         R14,R4
             tskcmd.c       3192    
             tskcmd.c       3193      //  データ正常か
             tskcmd.c       3194      if( result == E_SUCCESS )
    00002062 2008                   TST         R0,R0
    00002064 8F0C                   BF/S        L372
    00002066 6703                   MOV         R0,R7
             tskcmd.c       3195      {
             tskcmd.c       3196    
             tskcmd.c       3197          // パラメータ取得
             tskcmd.c       3198          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00002068 54B1                   MOV.L       @(4,R11),R4; args[]
    0000206A E701                   MOV         #1,R7      ; H'00000001
    0000206C E50A                   MOV         #10,R5     ; H'0000000A
    0000206E D150                   MOV.L       L1381+2,R1 ; _Atoi
    00002070 410B                   JSR         @R1
    00002072 6673                   MOV         R7,R6
    00002074 640C                   EXTU.B      R0,R4
    00002076 6C03                   MOV         R0,R12
             tskcmd.c       3199    
             tskcmd.c       3200          // 状態取得
             tskcmd.c       3201          result  = motor_STATUS( mm, &sts );
    00002078 DD56                   MOV.L       L1381+38,R13; _motor_STATUS
    0000207A 4D0B                   JSR         @R13
    0000207C 65F3                   MOV         R15,R5
    0000207E 6703                   MOV         R0,R7
    00002080              L372:
             tskcmd.c       3202      }
             tskcmd.c       3203    
             tskcmd.c       3204      // 応答メッセージ作成
             tskcmd.c       3205      CmdMakeResponse(    &stCtl,
             tskcmd.c       3206                          PARAM9,                                         //0  パラメータ数
             tskcmd.c       3207                          args[0],                                        //1  コマンド文字列
             tskcmd.c       3208                          result,                                         //2  エラーコード
             tskcmd.c       3209    
             tskcmd.c       3210                          mm,                                             //3  モータ１番号
             tskcmd.c       3211                          (INT)sts.busy,                                  //4  動作状態
             tskcmd.c       3212                          sts.pos,                                        //5  パルスカウンタ値
             tskcmd.c       3213                          sts.enc,                                        //6  エンコーダ値
             tskcmd.c       3214                          sts.dev,                                        //7  偏差カウンタ値
             tskcmd.c       3215    
             tskcmd.c       3216                          sts.cw_limit,                                   //8  CWリミットセンサ値(0:OFF,1:ON)
             tskcmd.c       3217                          sts.ccw_limit,                                  //9  CCWリミットセンサ値(0:OFF,1:ON)
             tskcmd.c       3218                          0,                                              //10 
             tskcmd.c       3219                          0,                                              //11 
             tskcmd.c       3220                          0                                               //12 
             tskcmd.c       3221                      );
    00002080 EE00                   MOV         #0,R14     ; H'00000000
    00002082 2FE6                   MOV.L       R14,@-R15
    00002084 2FE6                   MOV.L       R14,@-R15
    00002086 2FE6                   MOV.L       R14,@-R15
    00002088 7FFC                   ADD         #-4,R15
    0000208A 51F9                   MOV.L       @(36,R15),R1; sts.ccw_limit
    0000208C 2F12                   MOV.L       R1,@R15
    0000208E 7FFC                   ADD         #-4,R15
    00002090 54F9                   MOV.L       @(36,R15),R4; sts.cw_limit
    00002092 2F42                   MOV.L       R4,@R15
    00002094 7FFC                   ADD         #-4,R15
    00002096 55F8                   MOV.L       @(32,R15),R5; sts.dev
    00002098 2F52                   MOV.L       R5,@R15
    0000209A 7FFC                   ADD         #-4,R15
    0000209C 56F8                   MOV.L       @(32,R15),R6; sts.enc
    0000209E 2F62                   MOV.L       R6,@R15
    000020A0 7FFC                   ADD         #-4,R15
    000020A2 5DF8                   MOV.L       @(32,R15),R13; sts.pos
    000020A4 2FD2                   MOV.L       R13,@R15
    000020A6 7FFC                   ADD         #-4,R15
    000020A8 5EFC                   MOV.L       @(48,R15),R14; sts.busy
    000020AA 62CC                   EXTU.B      R12,R2
    000020AC 2FE2                   MOV.L       R14,@R15
    000020AE 2F26                   MOV.L       R2,@-R15
    000020B0 E509                   MOV         #9,R5      ; H'00000009
    000020B2 D444                   MOV.L       L1381+22,R4; __$stCtl
    000020B4 D344                   MOV.L       L1381+26,R3; _CmdMakeResponse
    000020B6 430B                   JSR         @R3
    000020B8 66B2                   MOV.L       @R11,R6    ; args[]
             tskcmd.c       3222    
             tskcmd.c       3223        // 応答メッセージ送信
             tskcmd.c       3224      CmdSendResponse( &stCtl );
    000020BA D442                   MOV.L       L1381+22,R4; __$stCtl
    000020BC D343                   MOV.L       L1381+30,R3; _CmdSendResponse
    000020BE 430B                   JSR         @R3
    000020C0 7F28                   ADD         #40,R15
    000020C2 7F18                   ADD         #24,R15
    000020C4 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       3225    }
    000020C6 006B                   RTS/N
             tskcmd.c       3226    
             tskcmd.c       3227    
             tskcmd.c       3228    /***********************************************************************
             tskcmd.c       3229    *
             tskcmd.c       3230    * [概要]  STOP    パルスモータ減速停止
             tskcmd.c       3231    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3232    * [戻値]  -
             tskcmd.c       3233    * 
             tskcmd.c       3234    ***********************************************************************/
             tskcmd.c       3235    static void CmdSTOP   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000020C8              __$CmdSTOP:                      ; function: __$CmdSTOP
                                                           ; frame size=88
    000020C8 4BF0                   MOVMU.L     R11,@-R15
    000020CA 7FE4                   ADD         #-28,R15
             tskcmd.c       3236    {
             tskcmd.c       3237      ER result = E_SUCCESS;
             tskcmd.c       3238      ST_MOTOR_STATUS sts;
             tskcmd.c       3239      ST_STOP stop;
             tskcmd.c       3240      UB msg;
             tskcmd.c       3241    
             tskcmd.c       3242      msg = mrcv->msgdata.msgid;
    000020CC 6B63                   MOV         R6,R11
    000020CE E618                   MOV         #24,R6     ; H'00000018
    000020D0 6C53                   MOV         R5,R12
    000020D2 E500                   MOV         #0,R5      ; H'00000000
    000020D4 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
             tskcmd.c       3243    
             tskcmd.c       3244      // 初期化
             tskcmd.c       3245      memset( &sts,   CLR, sizeof( ST_MOTOR_STATUS ) );
    000020D8 DD3D                   MOV.L       L1381+34,R13; _memset
    000020DA 4D0B                   JSR         @R13
    000020DC 64F3                   MOV         R15,R4
    000020DE E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       3246      memset( &bufwk, CLR, sizeof( bufwk ) );
    000020E0 D43D                   MOV.L       L1381+42,R4; __$bufwk
    000020E2 4D0B                   JSR         @R13
    000020E4 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       3247      memset( &stop,  CLR, sizeof( ST_STOP ) );
    000020E6 64F3                   MOV         R15,R4
    000020E8 7418                   ADD         #24,R4
    000020EA E604                   MOV         #4,R6      ; H'00000004
    000020EC 4D0B                   JSR         @R13
    000020EE E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       3248    
             tskcmd.c       3249      //  データチェック
             tskcmd.c       3250      result = ParamDataCheck( msg, anum, args );
    000020F0 65CC                   EXTU.B      R12,R5
    000020F2 66B3                   MOV         R11,R6
    000020F4 B880                   BSR         __$ParamDataCheck
    000020F6 64E3                   MOV         R14,R4
             tskcmd.c       3251    
             tskcmd.c       3252      //  データ正常か
             tskcmd.c       3253      if( result == E_SUCCESS )
    000020F8 2008                   TST         R0,R0
    000020FA 8F2E                   BF/S        L375
    000020FC 6E03                   MOV         R0,R14
             tskcmd.c       3254      {
             tskcmd.c       3255          // パラメータ取得
             tskcmd.c       3256          stop.mm  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000020FE 54B1                   MOV.L       @(4,R11),R4; args[]
    00002100 E701                   MOV         #1,R7      ; H'00000001
    00002102 E50A                   MOV         #10,R5     ; H'0000000A
    00002104 D12A                   MOV.L       L1381+2,R1 ; _Atoi
    00002106 410B                   JSR         @R1
    00002108 6673                   MOV         R7,R6
    0000210A 3F010018               MOV.B       R0,@(24:12,R15); stop.mm
             tskcmd.c       3257    
             tskcmd.c       3258          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       3259          memcpy( &bufwk[0], (B*)&stop, sizeof( ST_STOP ) );
    0000210E 65F3                   MOV         R15,R5
    00002110 7518                   ADD         #24,R5
    00002112 E604                   MOV         #4,R6      ; H'00000004
    00002114 D430                   MOV.L       L1381+42,R4; __$bufwk
    00002116 D731                   MOV.L       L1381+46,R7; _memcpy
    00002118 470B                   JSR         @R7
    0000211A EB3C                   MOV         #60,R11    ; H'0000003C
    0000211C 3EF18018               MOVU.B      @(24,R15),R14; stop.mm
             tskcmd.c       3260    
             tskcmd.c       3261          // 既に励磁ONの場合は、実行タスクへ
             tskcmd.c       3262          if( power[stop.mm].sw == SET)
    00002120 D12F                   MOV.L       L1381+50,R1; H'00000001+__$power
    00002122 60E3                   MOV         R14,R0
    00002124 4000                   SHLL        R0
    00002126 001C                   MOV.B       @(R0,R1),R0; power[].sw
    00002128 8801                   CMP/EQ      #1,R0
    0000212A 2FB6                   MOV.L       R11,@-R15
    0000212C D12A                   MOV.L       L1381+42,R1; __$bufwk
    0000212E 2F16                   MOV.L       R1,@-R15
    00002130 ECFF                   MOV         #-1,R12    ; H'FFFFFFFF
    00002132 6CCC                   EXTU.B      R12,R12
    00002134 67C3                   MOV         R12,R7
    00002136 2FC6                   MOV.L       R12,@-R15
    00002138 2FE6                   MOV.L       R14,@-R15
    0000213A ED14                   MOV         #20,R13    ; H'00000014
    0000213C 2FD6                   MOV.L       R13,@-R15
    0000213E D229                   MOV.L       L1381+54,R2; _mbx_send
    00002140 8D03                   BT/S        L377
    00002142 2FC6                   MOV.L       R12,@-R15
             tskcmd.c       3263          {
             tskcmd.c       3264              result = mbx_send   (
             tskcmd.c       3265                                      ID_TSK_CMD,
             tskcmd.c       3266                                      ID_MPF_MOTACT,
             tskcmd.c       3267                                      ID_MBX_MOTACT,
             tskcmd.c       3268                                      NO_DATA,
             tskcmd.c       3269                                      NO_DATA,
             tskcmd.c       3270                                      ID_MSG_STOP,
             tskcmd.c       3271                                      stop.mm,
             tskcmd.c       3272                                      DEFDAT,
             tskcmd.c       3273                                      &bufwk[0],
             tskcmd.c       3274                                      CMD_BUFSIZ
             tskcmd.c       3275                                  );
             tskcmd.c       3276          }
             tskcmd.c       3277          else
             tskcmd.c       3278          {
             tskcmd.c       3279              result = mbx_send   (
             tskcmd.c       3280                                      ID_TSK_CMD,
             tskcmd.c       3281                                      ID_MPF_MOTWAIT,
             tskcmd.c       3282                                      ID_MBX_MOTWAIT,
             tskcmd.c       3283                                      NO_DATA,
             tskcmd.c       3284                                      NO_DATA,
             tskcmd.c       3285                                      ID_MSG_STOP,
             tskcmd.c       3286                                      stop.mm,
             tskcmd.c       3287                                      DEFDAT,
             tskcmd.c       3288                                      &bufwk[0],
             tskcmd.c       3289                                      CMD_BUFSIZ
             tskcmd.c       3290                                  );
    00002144 E608                   MOV         #8,R6      ; H'00000008
    00002146 A002                   BRA         L378
    00002148 E507                   MOV         #7,R5      ; H'00000007
    0000214A              L377:
    0000214A E609                   MOV         #9,R6      ; H'00000009
    0000214C E508                   MOV         #8,R5      ; H'00000008
    0000214E              L378:
             tskcmd.c       3291          }
             tskcmd.c       3292      }
             tskcmd.c       3293    
             tskcmd.c       3294      if( result != E_SUCCESS )
    0000214E 420B                   JSR         @R2
    00002150 E405                   MOV         #5,R4      ; H'00000005
    00002152 7F18                   ADD         #24,R15
    00002154 2008                   TST         R0,R0
    00002156 8D27                   BT/S        L379
    00002158 6E03                   MOV         R0,R14
    0000215A              L375:
    0000215A 34F18018               MOVU.B      @(24,R15),R4; stop.mm
             tskcmd.c       3295      {
             tskcmd.c       3296          motor_STATUS( stop.mm, &sts );
    0000215E D61D                   MOV.L       L1381+38,R6; _motor_STATUS
    00002160 460B                   JSR         @R6
    00002162 65F3                   MOV         R15,R5
             tskcmd.c       3297    
             tskcmd.c       3298          // 応答メッセージ作成
             tskcmd.c       3299          CmdMakeResponse(    &stCtl,
             tskcmd.c       3300                              PARAM7,                                     //0  パラメータ数
             tskcmd.c       3301                              STRTBL_MSG[ID_MSG_STOP],                    //1  コマンド文字列
             tskcmd.c       3302                              result,                                     //2  エラーコード
             tskcmd.c       3303    
             tskcmd.c       3304                              (INT)stop.mm,                               //3  モータ１番号
             tskcmd.c       3305                              sts.pos,                                    //4  パルスカウント１
             tskcmd.c       3306                              sts.pos,                                    //5  エンコーダ１
             tskcmd.c       3307                              sts.cw_limit,                               //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3308                              sts.ccw_limit,                              //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3309    
             tskcmd.c       3310                              0,                                          //8  
             tskcmd.c       3311                              0,                                          //9  
             tskcmd.c       3312                              0,                                          //10 
             tskcmd.c       3313                              0,                                          //11 
             tskcmd.c       3314                              0                                           //12 
             tskcmd.c       3315                          );
    00002164 E700                   MOV         #0,R7      ; H'00000000
    00002166 2F76                   MOV.L       R7,@-R15
    00002168 2F76                   MOV.L       R7,@-R15
    0000216A 2F76                   MOV.L       R7,@-R15
    0000216C 2F76                   MOV.L       R7,@-R15
    0000216E 2F76                   MOV.L       R7,@-R15
    00002170 7FFC                   ADD         #-4,R15
    00002172 5BFB                   MOV.L       @(44,R15),R11; sts.ccw_limit
    00002174 2FB2                   MOV.L       R11,@R15
    00002176 7FFC                   ADD         #-4,R15
    00002178 5CFB                   MOV.L       @(44,R15),R12; sts.cw_limit
    0000217A 2FC2                   MOV.L       R12,@R15
    0000217C 7FFC                   ADD         #-4,R15
    0000217E 5DF8                   MOV.L       @(32,R15),R13; sts.pos
    00002180 2FD2                   MOV.L       R13,@R15
    00002182 2FD6                   MOV.L       R13,@-R15
    00002184 32F1803C               MOVU.B      @(60,R15),R2; stop.mm
    00002188 2F26                   MOV.L       R2,@-R15
    0000218A E507                   MOV         #7,R5      ; H'00000007
    0000218C D116                   MOV.L       L1381+58,R1; H'00000050+_STRTBL_MSG
    0000218E 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
    00002190 D40C                   MOV.L       L1381+22,R4; __$stCtl
    00002192 D30D                   MOV.L       L1381+26,R3; _CmdMakeResponse
    00002194 430B                   JSR         @R3
    00002196 67E3                   MOV         R14,R7
             tskcmd.c       3316    
             tskcmd.c       3317          // 応答メッセージ送信
             tskcmd.c       3318          CmdSendResponse( &stCtl );
    00002198 D40A                   MOV.L       L1381+22,R4; __$stCtl
    0000219A D30C                   MOV.L       L1381+30,R3; _CmdSendResponse
    0000219C 430B                   JSR         @R3
    0000219E 7F28                   ADD         #40,R15
             tskcmd.c       3319    
             tskcmd.c       3320          ClrDevice( stop.mm );
    000021A0 34F14018               MOV.B       @(24:12,R15),R4; stop.mm
    000021A4 B1FA                   BSR         __$ClrDevice
    000021A6 0009                   NOP
    000021A8              L379:
    000021A8 7F1C                   ADD         #28,R15
    000021AA 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       3321      }
             tskcmd.c       3322    }
    000021AC 006B                   RTS/N
    000021AE              L1381:
    000021AE 00000002               .RES.W      1
    000021B0 <00000000>             .DATA.L     _Atoi
    000021B4 <00000000>             .DATA.L     _MNET_DRV_TYPE
    000021B8 <00000000>             .DATA.L     _GetFactorPCD4611
    000021BC <00000000>             .DATA.L     _GetFactor
    000021C0 <00000000>             .DATA.L     _motor_SET
    000021C4 <00000000>             .DATA.L     __$stCtl
    000021C8 <00000000>             .DATA.L     _CmdMakeResponse
    000021CC <00000000>             .DATA.L     _CmdSendResponse
    000021D0 <00000000>             .DATA.L     _memset
    000021D4 <00000000>             .DATA.L     _motor_STATUS
    000021D8 <00000000>             .DATA.L     __$bufwk
    000021DC <00000000>             .DATA.L     _memcpy
    000021E0 <00000001>             .DATA.L     H'00000001+__$power
    000021E4 <00000000>             .DATA.L     _mbx_send
    000021E8 <00000050>             .DATA.L     H'00000050+_STRTBL_MSG
             tskcmd.c       3323    
             tskcmd.c       3324    /***********************************************************************
             tskcmd.c       3325    *
             tskcmd.c       3326    * [概要]  
             tskcmd.c       3327    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3328    * [戻値]  -
             tskcmd.c       3329    * 
             tskcmd.c       3330    ***********************************************************************/
             tskcmd.c       3331    static void CmdBZCNT( T_CMD_MSG* mrcv, UB anum, const char** args )
    000021EC              __$CmdBZCNT:                     ; function: __$CmdBZCNT
                                                           ; frame size=60
    000021EC 4CF0                   MOVMU.L     R12,@-R15
    000021EE 7FFC                   ADD         #-4,R15
    000021F0 6D43                   MOV         R4,R13
    000021F2 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
    000021F6 655C                   EXTU.B      R5,R5
             tskcmd.c       3332    {
             tskcmd.c       3333      ER  result = E_SUCCESS;
             tskcmd.c       3334    
             tskcmd.c       3335      ST_BZCNT bzcnt;
             tskcmd.c       3336      UB  msg;
             tskcmd.c       3337    
             tskcmd.c       3338      msg = mrcv->msgdata.msgid;
             tskcmd.c       3339    
             tskcmd.c       3340      //  データチェック
             tskcmd.c       3341      result = ParamDataCheck( msg, anum, args );
    000021F8 D3AC                   MOV.L       L1382,R3   ; __$ParamDataCheck
    000021FA 430B                   JSR         @R3
    000021FC 6E63                   MOV         R6,R14
             tskcmd.c       3342    
             tskcmd.c       3343      //  データ正常か
             tskcmd.c       3344      if( result == E_SUCCESS )
    000021FE 2008                   TST         R0,R0
    00002200 8F32                   BF/S        L382
    00002202 6C03                   MOV         R0,R12
             tskcmd.c       3345      {
             tskcmd.c       3346          // パラメータ取得
             tskcmd.c       3347          bzcnt.Act    = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00002204 54E1                   MOV.L       @(4,R14),R4; args[]
    00002206 E701                   MOV         #1,R7      ; H'00000001
    00002208 E50A                   MOV         #10,R5     ; H'0000000A
    0000220A D1A9                   MOV.L       L1382+4,R1 ; _Atoi
    0000220C 410B                   JSR         @R1
    0000220E 6673                   MOV         R7,R6
    00002210 3F010000               MOV.B       R0,@(0:12,R15); bzcnt.Act
             tskcmd.c       3348          bzcnt.Colptn = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    00002214 54E2                   MOV.L       @(8,R14),R4; args[]
    00002216 E701                   MOV         #1,R7      ; H'00000001
    00002218 E50A                   MOV         #10,R5     ; H'0000000A
    0000221A D1A5                   MOV.L       L1382+4,R1 ; _Atoi
    0000221C 410B                   JSR         @R1
    0000221E 6673                   MOV         R7,R6
    00002220 E701                   MOV         #1,R7      ; H'00000001
    00002222 6103                   MOV         R0,R1
    00002224 6073                   MOV         R7,R0
    00002226 0F14                   MOV.B       R1,@(R0,R15); bzcnt.Colptn
    00002228 E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       3349          bzcnt.Buzptn = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    0000222A 54E3                   MOV.L       @(12,R14),R4; args[]
    0000222C DEA0                   MOV.L       L1382+4,R14; _Atoi
    0000222E 4E0B                   JSR         @R14
    00002230 6673                   MOV         R7,R6
    00002232 3F010002               MOV.B       R0,@(2:12,R15); bzcnt.Buzptn
    00002236 E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       3350    
             tskcmd.c       3351          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       3352          memcpy( &bufwk[0], (B*)&bzcnt, sizeof( ST_BZCNT ) );
    00002238 D49E                   MOV.L       L1382+8,R4 ; __$bufwk
    0000223A DE9F                   MOV.L       L1382+12,R14; _memcpy
    0000223C 4E0B                   JSR         @R14
    0000223E 65F3                   MOV         R15,R5
             tskcmd.c       3353    
             tskcmd.c       3354          // タスク通知
             tskcmd.c       3355          mbx_send(
             tskcmd.c       3356                          ID_TSK_CMD,                                     // 送信元ﾀｽｸID
             tskcmd.c       3357                          ID_MPF_LED,                                     // ﾒﾓﾘﾌﾟｰﾙID
             tskcmd.c       3358                          ID_MBX_LED,                                     // ﾒｰﾙﾎﾞｯｸｽID
             tskcmd.c       3359                          ID_TPL_PTLMP,                                   // PROCID
             tskcmd.c       3360                          mrcv->msgdata.bcid,                             // BCID
             tskcmd.c       3361                          ID_MSG_CBZCNT,                                  // message
             tskcmd.c       3362                          NO_DATA,                                        // 情報1(汎用)
             tskcmd.c       3363                          NO_DATA,                                        // 情報2(汎用)
             tskcmd.c       3364                          &bufwk[0],                                      // ﾃﾞｰﾀ
             tskcmd.c       3365                          sizeof( bufwk )                                 // ﾃﾞｰﾀｻｲｽﾞ
             tskcmd.c       3366                      );
    00002240 EE3C                   MOV         #60,R14    ; H'0000003C
    00002242 2FE6                   MOV.L       R14,@-R15
    00002244 D79B                   MOV.L       L1382+8,R7 ; __$bufwk
    00002246 2F76                   MOV.L       R7,@-R15
    00002248 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    0000224A 6EEC                   EXTU.B      R14,R14
    0000224C 2FE6                   MOV.L       R14,@-R15
    0000224E 2FE6                   MOV.L       R14,@-R15
    00002250 E232                   MOV         #50,R2     ; H'00000032
    00002252 2F26                   MOV.L       R2,@-R15
    00002254 32D1801A               MOVU.B      @(26,R13),R2; (mrcv)->bcid
    00002258 2F26                   MOV.L       R2,@-R15
    0000225A E60C                   MOV         #12,R6     ; H'0000000C
    0000225C E50B                   MOV         #11,R5     ; H'0000000B
    0000225E E405                   MOV         #5,R4      ; H'00000005
    00002260 DD96                   MOV.L       L1382+16,R13; _mbx_send
    00002262 4D0B                   JSR         @R13
    00002264 E762                   MOV         #98,R7     ; H'00000062
    00002266 7F18                   ADD         #24,R15
    00002268              L382:
             tskcmd.c       3367          
             tskcmd.c       3368      }
             tskcmd.c       3369    
             tskcmd.c       3370      CmdMakeResponse(    &stCtl,
             tskcmd.c       3371                          PARAM2,                                         //0  パラメータ数
             tskcmd.c       3372                          STRTBL_MSG[ID_MSG_CBZCNT],                      //1  コマンド文字列
             tskcmd.c       3373                          result,                                         //2  エラーコード
             tskcmd.c       3374    
             tskcmd.c       3375                          0,                                              //3  
             tskcmd.c       3376                          0,                                              //4  
             tskcmd.c       3377                          0,                                              //5  
             tskcmd.c       3378                          0,                                              //6  
             tskcmd.c       3379                          0,                                              //7  
             tskcmd.c       3380    
             tskcmd.c       3381                          0,                                              //8  
             tskcmd.c       3382                          0,                                              //9  
             tskcmd.c       3383                          0,                                              //10 
             tskcmd.c       3384                          0,                                              //11 
             tskcmd.c       3385                          0                                               //12 
             tskcmd.c       3386                      );
    00002268 E100                   MOV         #0,R1      ; H'00000000
    0000226A 2F16                   MOV.L       R1,@-R15
    0000226C 2F16                   MOV.L       R1,@-R15
    0000226E 2F16                   MOV.L       R1,@-R15
    00002270 2F16                   MOV.L       R1,@-R15
    00002272 2F16                   MOV.L       R1,@-R15
    00002274 2F16                   MOV.L       R1,@-R15
    00002276 2F16                   MOV.L       R1,@-R15
    00002278 2F16                   MOV.L       R1,@-R15
    0000227A 2F16                   MOV.L       R1,@-R15
    0000227C 2F16                   MOV.L       R1,@-R15
    0000227E E502                   MOV         #2,R5      ; H'00000002
    00002280 DD8F                   MOV.L       L1382+20,R13; H'000000C8+_STRTBL_MSG
    00002282 66D2                   MOV.L       @R13,R6    ; STRTBL_MSG[]
    00002284 D48F                   MOV.L       L1382+24,R4; __$stCtl
    00002286 D390                   MOV.L       L1382+28,R3; _CmdMakeResponse
    00002288 430B                   JSR         @R3
    0000228A 67C3                   MOV         R12,R7
             tskcmd.c       3387    
             tskcmd.c       3388        // 応答メッセージ送信
             tskcmd.c       3389      CmdSendResponse( &stCtl );
    0000228C D48D                   MOV.L       L1382+24,R4; __$stCtl
    0000228E D38F                   MOV.L       L1382+32,R3; _CmdSendResponse
    00002290 430B                   JSR         @R3
    00002292 7F28                   ADD         #40,R15
    00002294 7F04                   ADD         #4,R15
    00002296 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       3390    
             tskcmd.c       3391    }
    00002298 006B                   RTS/N
             tskcmd.c       3392    
             tskcmd.c       3393    /***********************************************************************
             tskcmd.c       3394    *
             tskcmd.c       3395    * [概要]  EEPROM 指定ページの１ページ(128byte)データを読み込む
             tskcmd.c       3396    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3397    * [戻値]  -
             tskcmd.c       3398    * 
             tskcmd.c       3399    ***********************************************************************/
             tskcmd.c       3400    static void CmdEEPREAD( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000229A              __$CmdEEPREAD:                   ; function: __$CmdEEPREAD
                                                           ; frame size=56
    0000229A 4CF0                   MOVMU.L     R12,@-R15
             tskcmd.c       3401    {
             tskcmd.c       3402      ER      result = E_SUCCESS;
             tskcmd.c       3403      UB  msg;
             tskcmd.c       3404      msg = mrcv->msgdata.msgid;
    0000229C 6E63                   MOV         R6,R14
    0000229E E680                   MOV         #-128,R6   ; H'FFFFFF80
    000022A0 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000022A2 666C                   EXTU.B      R6,R6
    000022A4 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       3405    
             tskcmd.c       3406      // 初期化
             tskcmd.c       3407      memset( &eepb,  0xff, sizeof( ST_EEPBUF ) );
    000022A8 D489                   MOV.L       L1382+36,R4; __$eepb
    000022AA D18A                   MOV.L       L1382+40,R1; _memset
    000022AC 410B                   JSR         @R1
    000022AE 655C                   EXTU.B      R5,R5
             tskcmd.c       3408    
             tskcmd.c       3409      //  データチェック
             tskcmd.c       3410    //    result = ParamDataCheck( msg, anum, args );
             tskcmd.c       3411    
             tskcmd.c       3412      //  データ正常か
             tskcmd.c       3413    //    if( result == E_SUCCESS )
             tskcmd.c       3414      {
             tskcmd.c       3415          // パラメータ取得
             tskcmd.c       3416          eepb.no = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000022B0 54E1                   MOV.L       @(4,R14),R4; args[]
    000022B2 E701                   MOV         #1,R7      ; H'00000001
    000022B4 E50A                   MOV         #10,R5     ; H'0000000A
    000022B6 DC7E                   MOV.L       L1382+4,R12; _Atoi
    000022B8 4C0B                   JSR         @R12
    000022BA 6673                   MOV         R7,R6
    000022BC DE84                   MOV.L       L1382+36,R14; __$eepb
             tskcmd.c       3417          eepb.siz = EEP_RWSIZE;
    000022BE E178                   MOV         #120,R1    ; H'00000078
    000022C0 E680                   MOV         #-128,R6   ; H'FFFFFF80
    000022C2 2E02                   MOV.L       R0,@R14    ; eepb.no
    000022C4 666C                   EXTU.B      R6,R6
    000022C6 1E11                   MOV.L       R1,@(4,R14); eepb.siz
             tskcmd.c       3418          
             tskcmd.c       3419          // 書込みデータ配列化
             tskcmd.c       3420          memcpy( &bufwk[0], (B*)&eepb, sizeof( ST_EEPBUF ) );
    000022C8 D47A                   MOV.L       L1382+8,R4 ; __$bufwk
    000022CA D17B                   MOV.L       L1382+12,R1; _memcpy
    000022CC 410B                   JSR         @R1
    000022CE 65E3                   MOV         R14,R5
             tskcmd.c       3421    
             tskcmd.c       3422          result = mbx_send   (
             tskcmd.c       3423                                  ID_TSK_CMD,// tskid      ---->   msg->msgdata.tskid
             tskcmd.c       3424                                  ID_MPF_EEP,// memory     ---->   -
             tskcmd.c       3425                                  ID_MBX_EEP,// mailbox    ---->   -
             tskcmd.c       3426                                  NO_DATA,   // procid     ---->   msg->msgdata.procid
             tskcmd.c       3427                                  NO_DATA,   // bcid       ---->   msg->msgdata.bcid
             tskcmd.c       3428                                  msg,       // msg        ---->   msg->msgdata.msgid
             tskcmd.c       3429                                  eepb.no,   // sts        ---->   msg->msgdata.inf
             tskcmd.c       3430                                  DEFDAT,    // sts2       ---->   msg->msgdata.inf2
             tskcmd.c       3431                                  &bufwk[0], // data       ---->   msg->msgdata.data[]
             tskcmd.c       3432                                  CMD_BUFSIZ // data siz   ---->   msg->msgdata.siz
             tskcmd.c       3433                              );
    000022D0 E13C                   MOV         #60,R1     ; H'0000003C
    000022D2 2F16                   MOV.L       R1,@-R15
    000022D4 D277                   MOV.L       L1382+8,R2 ; __$bufwk
    000022D6 2F26                   MOV.L       R2,@-R15
    000022D8 ECFF                   MOV         #-1,R12    ; H'FFFFFFFF
    000022DA 6CCC                   EXTU.B      R12,R12
    000022DC 67C3                   MOV         R12,R7
    000022DE 2FC6                   MOV.L       R12,@-R15
    000022E0 32E18003               MOVU.B      @(3,R14),R2; eepb.no
    000022E4 2F26                   MOV.L       R2,@-R15
    000022E6 2FD6                   MOV.L       R13,@-R15
    000022E8 2FC6                   MOV.L       R12,@-R15
    000022EA E606                   MOV         #6,R6      ; H'00000006
    000022EC E505                   MOV         #5,R5      ; H'00000005
    000022EE DD73                   MOV.L       L1382+16,R13; _mbx_send
    000022F0 4D0B                   JSR         @R13
    000022F2 6453                   MOV         R5,R4
    000022F4 6703                   MOV         R0,R7
             tskcmd.c       3434      }
             tskcmd.c       3435    
             tskcmd.c       3436      if( result != E_SUCCESS )
    000022F6 2008                   TST         R0,R0
    000022F8 8D17                   BT/S        L385
    000022FA 7F18                   ADD         #24,R15
             tskcmd.c       3437      {
             tskcmd.c       3438          // 応答メッセージ作成
             tskcmd.c       3439          CmdMakeResponse(    &stCtl,
             tskcmd.c       3440                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3441                              STRTBL_MSG[ID_MSG_EEPREAD],                 //1  コマンド文字列
             tskcmd.c       3442                              result,                                     //2  エラーコード
             tskcmd.c       3443    
             tskcmd.c       3444                              0,                                          //3  
             tskcmd.c       3445                              0,                                          //4  
             tskcmd.c       3446                              0,                                          //5  
             tskcmd.c       3447                              0,                                          //6  
             tskcmd.c       3448                              0,                                          //7  
             tskcmd.c       3449    
             tskcmd.c       3450                              0,                                          //8  
             tskcmd.c       3451                              0,                                          //9  
             tskcmd.c       3452                              0,                                          //10 
             tskcmd.c       3453                              0,                                          //11 
             tskcmd.c       3454                              0                                           //12 
             tskcmd.c       3455                          );
    000022FC E500                   MOV         #0,R5      ; H'00000000
    000022FE 2F56                   MOV.L       R5,@-R15
    00002300 2F56                   MOV.L       R5,@-R15
    00002302 2F56                   MOV.L       R5,@-R15
    00002304 2F56                   MOV.L       R5,@-R15
    00002306 2F56                   MOV.L       R5,@-R15
    00002308 2F56                   MOV.L       R5,@-R15
    0000230A 2F56                   MOV.L       R5,@-R15
    0000230C 2F56                   MOV.L       R5,@-R15
    0000230E 2F56                   MOV.L       R5,@-R15
    00002310 2F56                   MOV.L       R5,@-R15
    00002312 E502                   MOV         #2,R5      ; H'00000002
    00002314 DC70                   MOV.L       L1382+44,R12; H'00000058+_STRTBL_MSG
    00002316 D46B                   MOV.L       L1382+24,R4; __$stCtl
    00002318 D36B                   MOV.L       L1382+28,R3; _CmdMakeResponse
    0000231A 430B                   JSR         @R3
    0000231C 66C2                   MOV.L       @R12,R6    ; STRTBL_MSG[]
    0000231E 7F28                   ADD         #40,R15
             tskcmd.c       3456    
             tskcmd.c       3457          // 応答メッセージ送信
             tskcmd.c       3458          CmdSendResponse( &stCtl );
    00002320 D468                   MOV.L       L1382+24,R4; __$stCtl
    00002322 4CF4                   MOVMU.L     @R15+,R12
    00002324 D369                   MOV.L       L1382+32,R3; _CmdSendResponse
    00002326 432B                   JMP         @R3
    00002328 0009                   NOP
    0000232A              L385:
    0000232A 4CF4                   MOVMU.L     @R15+,R12
    0000232C 006B                   RTS/N
             tskcmd.c       3459      }
             tskcmd.c       3460    }
             tskcmd.c       3461    
             tskcmd.c       3462    /***********************************************************************
             tskcmd.c       3463    *
             tskcmd.c       3464    * [概要]  EEPROM 指定ページに１ページ(128byte)データを書き込む
             tskcmd.c       3465    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3466    * [戻値]  -
             tskcmd.c       3467    * 
             tskcmd.c       3468    ***********************************************************************/
             tskcmd.c       3469    static void CmdEEPWRIT( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000232E              __$CmdEEPWRIT:                   ; function: __$CmdEEPWRIT
                                                           ; frame size=60
    0000232E 4BF0                   MOVMU.L     R11,@-R15
             tskcmd.c       3470    {
             tskcmd.c       3471      ER      result = E_SUCCESS;
             tskcmd.c       3472      UB  msg;
             tskcmd.c       3473      msg = mrcv->msgdata.msgid;
    00002330 6E63                   MOV         R6,R14
    00002332 E680                   MOV         #-128,R6   ; H'FFFFFF80
    00002334 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00002336 666C                   EXTU.B      R6,R6
    00002338 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       3474    
             tskcmd.c       3475      // 初期化
             tskcmd.c       3476      memset( &eepb,  0xff, sizeof( ST_EEPBUF ) );
    0000233C D464                   MOV.L       L1382+36,R4; __$eepb
    0000233E D165                   MOV.L       L1382+40,R1; _memset
    00002340 410B                   JSR         @R1
    00002342 655C                   EXTU.B      R5,R5
             tskcmd.c       3477    
             tskcmd.c       3478      //  データチェック
             tskcmd.c       3479    //    result = ParamDataCheck( msg, anum, args );
             tskcmd.c       3480    
             tskcmd.c       3481      //  データ正常か
             tskcmd.c       3482    //    if( result == E_SUCCESS )
             tskcmd.c       3483      {
             tskcmd.c       3484          // パラメータ取得
             tskcmd.c       3485          eepb.no = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00002344 54E1                   MOV.L       @(4,R14),R4; args[]
    00002346 E701                   MOV         #1,R7      ; H'00000001
    00002348 E50A                   MOV         #10,R5     ; H'0000000A
    0000234A DB59                   MOV.L       L1382+4,R11; _Atoi
    0000234C 4B0B                   JSR         @R11
    0000234E 6673                   MOV         R7,R6
    00002350 DC5F                   MOV.L       L1382+36,R12; __$eepb
             tskcmd.c       3486          eepb.siz = EEP_RWSIZE;
    00002352 E178                   MOV         #120,R1    ; H'00000078
    00002354 2C02                   MOV.L       R0,@R12    ; eepb.no
    00002356 1C11                   MOV.L       R1,@(4,R12); eepb.siz
             tskcmd.c       3487          
             tskcmd.c       3488          // 書込みデータ配列化
             tskcmd.c       3489          SetByteArray( args[PARAM2],&eepb.buf[0]);
    00002358 D560                   MOV.L       L1382+48,R5; H'00000008+__$eepb
    0000235A DB61                   MOV.L       L1382+52,R11; _SetByteArray
    0000235C 4B0B                   JSR         @R11
    0000235E 54E2                   MOV.L       @(8,R14),R4; args[]
    00002360 E680                   MOV         #-128,R6   ; H'FFFFFF80
             tskcmd.c       3490          memcpy( &bufwk[0], (B*)&eepb, sizeof( ST_EEPBUF ) );
    00002362 65C3                   MOV         R12,R5
    00002364 D453                   MOV.L       L1382+8,R4 ; __$bufwk
    00002366 D154                   MOV.L       L1382+12,R1; _memcpy
    00002368 410B                   JSR         @R1
    0000236A 666C                   EXTU.B      R6,R6
             tskcmd.c       3491    
             tskcmd.c       3492          result = mbx_send   (
             tskcmd.c       3493                                  ID_TSK_CMD,// tskid
             tskcmd.c       3494                                  ID_MPF_EEP,// memory
             tskcmd.c       3495                                  ID_MBX_EEP,// mailbox
             tskcmd.c       3496                                  NO_DATA,   // procid
             tskcmd.c       3497                                  NO_DATA,   // bcid
             tskcmd.c       3498                                  msg,       // msg
             tskcmd.c       3499                                  eepb.no,   // sts
             tskcmd.c       3500                                  DEFDAT,    // sts2
             tskcmd.c       3501                                  &bufwk[0], // data
             tskcmd.c       3502                                  CMD_BUFSIZ // data siz
             tskcmd.c       3503                              );
    0000236C E13C                   MOV         #60,R1     ; H'0000003C
    0000236E 2F16                   MOV.L       R1,@-R15
    00002370 DE50                   MOV.L       L1382+8,R14; __$bufwk
    00002372 2FE6                   MOV.L       R14,@-R15
    00002374 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    00002376 6EEC                   EXTU.B      R14,R14
    00002378 67E3                   MOV         R14,R7
    0000237A 2FE6                   MOV.L       R14,@-R15
    0000237C 32C18003               MOVU.B      @(3,R12),R2; eepb.no
    00002380 2F26                   MOV.L       R2,@-R15
    00002382 2FD6                   MOV.L       R13,@-R15
    00002384 2FE6                   MOV.L       R14,@-R15
    00002386 E606                   MOV         #6,R6      ; H'00000006
    00002388 E505                   MOV         #5,R5      ; H'00000005
    0000238A D24C                   MOV.L       L1382+16,R2; _mbx_send
    0000238C 420B                   JSR         @R2
    0000238E 6453                   MOV         R5,R4
    00002390 6703                   MOV         R0,R7
             tskcmd.c       3504      }
             tskcmd.c       3505    
             tskcmd.c       3506      if( result != E_SUCCESS )
    00002392 2008                   TST         R0,R0
    00002394 8D17                   BT/S        L388
    00002396 7F18                   ADD         #24,R15
             tskcmd.c       3507      {
             tskcmd.c       3508          // 応答メッセージ作成
             tskcmd.c       3509          CmdMakeResponse(    &stCtl,
             tskcmd.c       3510                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3511                              STRTBL_MSG[ID_MSG_EEPWRIT],                 //1  コマンド文字列
             tskcmd.c       3512                              result,                                     //2  エラーコード
             tskcmd.c       3513    
             tskcmd.c       3514                              0,                                          //3  
             tskcmd.c       3515                              0,                                          //4  
             tskcmd.c       3516                              0,                                          //5  
             tskcmd.c       3517                              0,                                          //6  
             tskcmd.c       3518                              0,                                          //7  
             tskcmd.c       3519    
             tskcmd.c       3520                              0,                                          //8  
             tskcmd.c       3521                              0,                                          //9  
             tskcmd.c       3522                              0,                                          //10 
             tskcmd.c       3523                              0,                                          //11 
             tskcmd.c       3524                              0                                           //12 
             tskcmd.c       3525                          );
    00002398 E100                   MOV         #0,R1      ; H'00000000
    0000239A 2F16                   MOV.L       R1,@-R15
    0000239C 2F16                   MOV.L       R1,@-R15
    0000239E 2F16                   MOV.L       R1,@-R15
    000023A0 2F16                   MOV.L       R1,@-R15
    000023A2 2F16                   MOV.L       R1,@-R15
    000023A4 2F16                   MOV.L       R1,@-R15
    000023A6 2F16                   MOV.L       R1,@-R15
    000023A8 2F16                   MOV.L       R1,@-R15
    000023AA 2F16                   MOV.L       R1,@-R15
    000023AC 2F16                   MOV.L       R1,@-R15
    000023AE E502                   MOV         #2,R5      ; H'00000002
    000023B0 DB4C                   MOV.L       L1382+56,R11; H'0000005C+_STRTBL_MSG
    000023B2 D444                   MOV.L       L1382+24,R4; __$stCtl
    000023B4 D344                   MOV.L       L1382+28,R3; _CmdMakeResponse
    000023B6 430B                   JSR         @R3
    000023B8 66B2                   MOV.L       @R11,R6    ; STRTBL_MSG[]
    000023BA 7F28                   ADD         #40,R15
             tskcmd.c       3526    
             tskcmd.c       3527          // 応答メッセージ送信
             tskcmd.c       3528          CmdSendResponse( &stCtl );
    000023BC D441                   MOV.L       L1382+24,R4; __$stCtl
    000023BE 4BF4                   MOVMU.L     @R15+,R11
    000023C0 D342                   MOV.L       L1382+32,R3; _CmdSendResponse
    000023C2 432B                   JMP         @R3
    000023C4 0009                   NOP
    000023C6              L388:
    000023C6 4BF4                   MOVMU.L     @R15+,R11
    000023C8 006B                   RTS/N
             tskcmd.c       3529      }
             tskcmd.c       3530    }
             tskcmd.c       3531    
             tskcmd.c       3532    /***********************************************************************
             tskcmd.c       3533    *
             tskcmd.c       3534    * [概要]  
             tskcmd.c       3535    * [引数]  
             tskcmd.c       3536    * [戻値]  -
             tskcmd.c       3537    * 
             tskcmd.c       3538    ***********************************************************************/
             tskcmd.c       3539    static void CmdImpPdat( T_CMD_MSG* mrcv, UB anum, const char** args )
    000023CA              __$CmdImpPdat:                   ; function: __$CmdImpPdat
                                                           ; frame size=48
    000023CA 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       3540    {
             tskcmd.c       3541      ER  result = E_SUCCESS;
             tskcmd.c       3542      UB  msg;
             tskcmd.c       3543      UB  pno;
             tskcmd.c       3544      UB bcc;
             tskcmd.c       3545      UB bcch;
             tskcmd.c       3546      UB bccl;
             tskcmd.c       3547      INT  len;
             tskcmd.c       3548      unsigned char *pnt;
             tskcmd.c       3549    
             tskcmd.c       3550      msg = mrcv->msgdata.msgid;
    000023CC 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
             tskcmd.c       3551    
             tskcmd.c       3552      // タッチパネルへそのままデータ通知
             tskcmd.c       3553      TplRpDataSend();
    000023D0 B71E                   BSR         _TplRpDataSend
    000023D2 0009                   NOP
             tskcmd.c       3554      TplRidDataSend ( &tp.rsp.buf[0] , ID_TPL_PRINF );
    000023D4 D444                   MOV.L       L1382+60,R4; H'0000009C+__$tp
    000023D6 B7EB                   BSR         __$TplRidDataSend
    000023D8 E56E                   MOV         #110,R5    ; H'0000006E
             tskcmd.c       3555    
             tskcmd.c       3556      // EEPへ書込み指示
             tskcmd.c       3557      pno = Get_pno();
    000023DA D144                   MOV.L       L1382+64,R1; _Get_pno
    000023DC 414B                   JSR/N       @R1
    000023DE 620C                   EXTU.B      R0,R2
             tskcmd.c       3558      
             tskcmd.c       3559      if(( pno > 0 )&&( pno <= PROTMAX ))
    000023E0 2228                   TST         R2,R2
    000023E2 8902                   BT          L390
    000023E4 E514                   MOV         #20,R5     ; H'00000014
    000023E6 3257                   CMP/GT      R5,R2
    000023E8 8B02                   BF          L392
    000023EA              L390:
             tskcmd.c       3560      {
             tskcmd.c       3561          result = mbx_send   (
             tskcmd.c       3562                                  ID_TSK_CMD,// tskid
             tskcmd.c       3563                                  ID_MPF_EEP,// memory
             tskcmd.c       3564                                  ID_MBX_EEP,// mailbox
             tskcmd.c       3565                                  NO_DATA,   // procid
             tskcmd.c       3566                                  NO_DATA,   // bcid
             tskcmd.c       3567                                  msg,       // msg
             tskcmd.c       3568                                  DEFDAT,    // sts
             tskcmd.c       3569                                  pno,       // sts2
             tskcmd.c       3570                                  &bufwk[0], // data
             tskcmd.c       3571                                  CMD_BUFSIZ // data siz
             tskcmd.c       3572                              );
             tskcmd.c       3573      }
             tskcmd.c       3574      else
             tskcmd.c       3575      {
             tskcmd.c       3576          result = E_PAR_OUTRNG;
    000023EA E708                   MOV         #8,R7      ; H'00000008
    000023EC A014                   BRA         L393
    000023EE 4718                   SHLL8       R7
    000023F0              L392:
    000023F0 E13C                   MOV         #60,R1     ; H'0000003C
    000023F2 2F16                   MOV.L       R1,@-R15
    000023F4 D52F                   MOV.L       L1382+8,R5 ; __$bufwk
    000023F6 2F56                   MOV.L       R5,@-R15
    000023F8 2F26                   MOV.L       R2,@-R15
    000023FA E4FF                   MOV         #-1,R4     ; H'FFFFFFFF
    000023FC 644C                   EXTU.B      R4,R4
    000023FE 6743                   MOV         R4,R7
    00002400 2F46                   MOV.L       R4,@-R15
    00002402 2FE6                   MOV.L       R14,@-R15
    00002404 2F46                   MOV.L       R4,@-R15
    00002406 E606                   MOV         #6,R6      ; H'00000006
    00002408 E505                   MOV         #5,R5      ; H'00000005
    0000240A DE2C                   MOV.L       L1382+16,R14; _mbx_send
    0000240C 4E0B                   JSR         @R14
    0000240E 6453                   MOV         R5,R4
    00002410 6703                   MOV         R0,R7
             tskcmd.c       3577      }
             tskcmd.c       3578      
             tskcmd.c       3579      if( result != E_SUCCESS )
    00002412 2008                   TST         R0,R0
    00002414 8D17                   BT/S        L394
    00002416 7F18                   ADD         #24,R15
    00002418              L393:
             tskcmd.c       3580      {
             tskcmd.c       3581          // 応答メッセージ作成
             tskcmd.c       3582          CmdMakeResponse(    &stCtl,
             tskcmd.c       3583                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3584                              STRTBL_MSG[ID_MSG_IMPPDAT],                 //1  コマンド文字列
             tskcmd.c       3585                              result,                                     //2  エラーコード
             tskcmd.c       3586    
             tskcmd.c       3587                              0,                                          //3  
             tskcmd.c       3588                              0,                                          //4  
             tskcmd.c       3589                              0,                                          //5  
             tskcmd.c       3590                              0,                                          //6  
             tskcmd.c       3591                              0,                                          //7  
             tskcmd.c       3592    
             tskcmd.c       3593                              0,                                          //8  
             tskcmd.c       3594                              0,                                          //9  
             tskcmd.c       3595                              0,                                          //10 
             tskcmd.c       3596                              0,                                          //11 
             tskcmd.c       3597                              0                                           //12 
             tskcmd.c       3598                          );
    00002418 E600                   MOV         #0,R6      ; H'00000000
    0000241A 2F66                   MOV.L       R6,@-R15
    0000241C 2F66                   MOV.L       R6,@-R15
    0000241E 2F66                   MOV.L       R6,@-R15
    00002420 2F66                   MOV.L       R6,@-R15
    00002422 2F66                   MOV.L       R6,@-R15
    00002424 2F66                   MOV.L       R6,@-R15
    00002426 2F66                   MOV.L       R6,@-R15
    00002428 2F66                   MOV.L       R6,@-R15
    0000242A 2F66                   MOV.L       R6,@-R15
    0000242C 2F66                   MOV.L       R6,@-R15
    0000242E E502                   MOV         #2,R5      ; H'00000002
    00002430 DE2F                   MOV.L       L1382+68,R14; H'00000090+_STRTBL_MSG
    00002432 D424                   MOV.L       L1382+24,R4; __$stCtl
    00002434 D324                   MOV.L       L1382+28,R3; _CmdMakeResponse
    00002436 430B                   JSR         @R3
    00002438 66E2                   MOV.L       @R14,R6    ; STRTBL_MSG[]
    0000243A 7F28                   ADD         #40,R15
             tskcmd.c       3599    
             tskcmd.c       3600          // 応答メッセージ送信
             tskcmd.c       3601          CmdSendResponse( &stCtl );
    0000243C D421                   MOV.L       L1382+24,R4; __$stCtl
    0000243E 4EF4                   MOVMU.L     @R15+,R14
    00002440 D322                   MOV.L       L1382+32,R3; _CmdSendResponse
    00002442 432B                   JMP         @R3
    00002444 0009                   NOP
    00002446              L394:
    00002446 4EF4                   MOVMU.L     @R15+,R14
    00002448 006B                   RTS/N
             tskcmd.c       3602      }
             tskcmd.c       3603    }
             tskcmd.c       3604    
             tskcmd.c       3605    /***********************************************************************
             tskcmd.c       3606    *
             tskcmd.c       3607    * [概要]  
             tskcmd.c       3608    * [引数]  
             tskcmd.c       3609    * [戻値]  -
             tskcmd.c       3610    * 
             tskcmd.c       3611    ***********************************************************************/
             tskcmd.c       3612    static void CmdImpSped( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000244A              __$CmdImpSped:                   ; function: __$CmdImpSped
                                                           ; frame size=48
    0000244A 4F22                   STS.L       PR,@-R15
    0000244C 7FFC                   ADD         #-4,R15
             tskcmd.c       3613    {
             tskcmd.c       3614      ER  result = E_SUCCESS;
             tskcmd.c       3615      UB  dummy;
             tskcmd.c       3616      UB  msg;
             tskcmd.c       3617      
             tskcmd.c       3618      msg = mrcv->msgdata.msgid;
             tskcmd.c       3619      
             tskcmd.c       3620      result = mbx_send   (
             tskcmd.c       3621                              ID_TSK_CMD,// tskid
             tskcmd.c       3622                              ID_MPF_EEP,// memory
             tskcmd.c       3623                              ID_MBX_EEP,// mailbox
             tskcmd.c       3624                              NO_DATA,   // procid
             tskcmd.c       3625                              NO_DATA,   // bcid
             tskcmd.c       3626                              msg,       // msg
             tskcmd.c       3627                              DEFDAT,    // sts
             tskcmd.c       3628                              DEFDAT,    // sts2
             tskcmd.c       3629                              &dummy,    // data
             tskcmd.c       3630                              sizeof(dummy) // data siz
             tskcmd.c       3631                          );
    0000244E E101                   MOV         #1,R1      ; H'00000001
    00002450 2F16                   MOV.L       R1,@-R15
    00002452 65F3                   MOV         R15,R5
    00002454 7504                   ADD         #4,R5
    00002456 2F56                   MOV.L       R5,@-R15
    00002458 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    0000245A 666C                   EXTU.B      R6,R6
    0000245C 6763                   MOV         R6,R7
    0000245E 2F66                   MOV.L       R6,@-R15
    00002460 2F66                   MOV.L       R6,@-R15
    00002462 3141801B               MOVU.B      @(27,R4),R1; (mrcv)->msgid
    00002466 2F16                   MOV.L       R1,@-R15
    00002468 2F66                   MOV.L       R6,@-R15
    0000246A E606                   MOV         #6,R6      ; H'00000006
    0000246C E505                   MOV         #5,R5      ; H'00000005
    0000246E D213                   MOV.L       L1382+16,R2; _mbx_send
    00002470 420B                   JSR         @R2
    00002472 6453                   MOV         R5,R4
    00002474 6703                   MOV         R0,R7
             tskcmd.c       3632    
             tskcmd.c       3633      if( result != E_SUCCESS )
    00002476 2008                   TST         R0,R0
    00002478 8D15                   BT/S        L397
    0000247A 7F18                   ADD         #24,R15
             tskcmd.c       3634      {
             tskcmd.c       3635          // 応答メッセージ作成
             tskcmd.c       3636          CmdMakeResponse(    &stCtl,
             tskcmd.c       3637                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3638                              STRTBL_MSG[ID_MSG_IMPSPED],                 //1  コマンド文字列
             tskcmd.c       3639                              result,                                     //2  エラーコード
             tskcmd.c       3640    
             tskcmd.c       3641                              0,                                          //3  
             tskcmd.c       3642                              0,                                          //4  
             tskcmd.c       3643                              0,                                          //5  
             tskcmd.c       3644                              0,                                          //6  
             tskcmd.c       3645                              0,                                          //7  
             tskcmd.c       3646    
             tskcmd.c       3647                              0,                                          //8  
             tskcmd.c       3648                              0,                                          //9  
             tskcmd.c       3649                              0,                                          //10 
             tskcmd.c       3650                              0,                                          //11 
             tskcmd.c       3651                              0                                           //12 
             tskcmd.c       3652                          );
    0000247C E500                   MOV         #0,R5      ; H'00000000
    0000247E 2F56                   MOV.L       R5,@-R15
    00002480 2F56                   MOV.L       R5,@-R15
    00002482 2F56                   MOV.L       R5,@-R15
    00002484 2F56                   MOV.L       R5,@-R15
    00002486 2F56                   MOV.L       R5,@-R15
    00002488 2F56                   MOV.L       R5,@-R15
    0000248A 2F56                   MOV.L       R5,@-R15
    0000248C 2F56                   MOV.L       R5,@-R15
    0000248E 2F56                   MOV.L       R5,@-R15
    00002490 2F56                   MOV.L       R5,@-R15
    00002492 E502                   MOV         #2,R5      ; H'00000002
    00002494 D117                   MOV.L       L1382+72,R1; H'00000094+_STRTBL_MSG
    00002496 D40B                   MOV.L       L1382+24,R4; __$stCtl
    00002498 D30B                   MOV.L       L1382+28,R3; _CmdMakeResponse
    0000249A 430B                   JSR         @R3
    0000249C 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
             tskcmd.c       3653    
             tskcmd.c       3654          // 応答メッセージ送信
             tskcmd.c       3655          CmdSendResponse( &stCtl );
    0000249E D409                   MOV.L       L1382+24,R4; __$stCtl
    000024A0 D30A                   MOV.L       L1382+32,R3; _CmdSendResponse
    000024A2 430B                   JSR         @R3
    000024A4 7F28                   ADD         #40,R15
    000024A6              L397:
    000024A6 7F04                   ADD         #4,R15
    000024A8 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3656      }
             tskcmd.c       3657    }
    000024AA 006B                   RTS/N
    000024AC              L1382:
    000024AC <00000000>             .DATA.L     __$ParamDataCheck
    000024B0 <00000000>             .DATA.L     _Atoi
    000024B4 <00000000>             .DATA.L     __$bufwk
    000024B8 <00000000>             .DATA.L     _memcpy
    000024BC <00000000>             .DATA.L     _mbx_send
    000024C0 <000000C8>             .DATA.L     H'000000C8+_STRTBL_MSG
    000024C4 <00000000>             .DATA.L     __$stCtl
    000024C8 <00000000>             .DATA.L     _CmdMakeResponse
    000024CC <00000000>             .DATA.L     _CmdSendResponse
    000024D0 <00000000>             .DATA.L     __$eepb
    000024D4 <00000000>             .DATA.L     _memset
    000024D8 <00000058>             .DATA.L     H'00000058+_STRTBL_MSG
    000024DC <00000008>             .DATA.L     H'00000008+__$eepb
    000024E0 <00000000>             .DATA.L     _SetByteArray
    000024E4 <0000005C>             .DATA.L     H'0000005C+_STRTBL_MSG
    000024E8 <0000009C>             .DATA.L     H'0000009C+__$tp
    000024EC <00000000>             .DATA.L     _Get_pno
    000024F0 <00000090>             .DATA.L     H'00000090+_STRTBL_MSG
    000024F4 <00000094>             .DATA.L     H'00000094+_STRTBL_MSG
             tskcmd.c       3658    
             tskcmd.c       3659    
             tskcmd.c       3660    /***********************************************************************
             tskcmd.c       3661    *
             tskcmd.c       3662    * [概要]  
             tskcmd.c       3663    * [引数]  
             tskcmd.c       3664    * [戻値]  -
             tskcmd.c       3665    * 
             tskcmd.c       3666    ***********************************************************************/
             tskcmd.c       3667    static void CmdImpPosi( T_CMD_MSG* mrcv, UB anum, const char** args )
    000024F8              __$CmdImpPosi:                   ; function: __$CmdImpPosi
                                                           ; frame size=48
    000024F8 4F22                   STS.L       PR,@-R15
    000024FA 7FFC                   ADD         #-4,R15
             tskcmd.c       3668    {
             tskcmd.c       3669      ER  result = E_SUCCESS;
             tskcmd.c       3670      UB  dummy;
             tskcmd.c       3671      UB  msg;
             tskcmd.c       3672      
             tskcmd.c       3673      msg = mrcv->msgdata.msgid;
             tskcmd.c       3674      
             tskcmd.c       3675      result = mbx_send   (
             tskcmd.c       3676                              ID_TSK_CMD,// tskid
             tskcmd.c       3677                              ID_MPF_EEP,// memory
             tskcmd.c       3678                              ID_MBX_EEP,// mailbox
             tskcmd.c       3679                              NO_DATA,   // procid
             tskcmd.c       3680                              NO_DATA,   // bcid
             tskcmd.c       3681                              msg,       // msg
             tskcmd.c       3682                              DEFDAT,    // sts
             tskcmd.c       3683                              DEFDAT,    // sts2
             tskcmd.c       3684                              &dummy,    // data
             tskcmd.c       3685                              sizeof(dummy) // data siz
             tskcmd.c       3686                          );
    000024FC E101                   MOV         #1,R1      ; H'00000001
    000024FE 2F16                   MOV.L       R1,@-R15
    00002500 65F3                   MOV         R15,R5
    00002502 7504                   ADD         #4,R5
    00002504 2F56                   MOV.L       R5,@-R15
    00002506 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00002508 666C                   EXTU.B      R6,R6
    0000250A 6763                   MOV         R6,R7
    0000250C 2F66                   MOV.L       R6,@-R15
    0000250E 2F66                   MOV.L       R6,@-R15
    00002510 3141801B               MOVU.B      @(27,R4),R1; (mrcv)->msgid
    00002514 2F16                   MOV.L       R1,@-R15
    00002516 2F66                   MOV.L       R6,@-R15
    00002518 E606                   MOV         #6,R6      ; H'00000006
    0000251A E505                   MOV         #5,R5      ; H'00000005
    0000251C D290                   MOV.L       L1383,R2   ; _mbx_send
    0000251E 420B                   JSR         @R2
    00002520 6453                   MOV         R5,R4
    00002522 6703                   MOV         R0,R7
             tskcmd.c       3687    
             tskcmd.c       3688      if( result != E_SUCCESS )
    00002524 2008                   TST         R0,R0
    00002526 8D15                   BT/S        L400
    00002528 7F18                   ADD         #24,R15
             tskcmd.c       3689      {
             tskcmd.c       3690          // 応答メッセージ作成
             tskcmd.c       3691          CmdMakeResponse(    &stCtl,
             tskcmd.c       3692                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3693                              STRTBL_MSG[ID_MSG_IMPPOSI],                 //1  コマンド文字列
             tskcmd.c       3694                              result,                                     //2  エラーコード
             tskcmd.c       3695    
             tskcmd.c       3696                              0,                                          //3  
             tskcmd.c       3697                              0,                                          //4  
             tskcmd.c       3698                              0,                                          //5  
             tskcmd.c       3699                              0,                                          //6  
             tskcmd.c       3700                              0,                                          //7  
             tskcmd.c       3701    
             tskcmd.c       3702                              0,                                          //8  
             tskcmd.c       3703                              0,                                          //9  
             tskcmd.c       3704                              0,                                          //10 
             tskcmd.c       3705                              0,                                          //11 
             tskcmd.c       3706                              0                                           //12 
             tskcmd.c       3707                          );
    0000252A E500                   MOV         #0,R5      ; H'00000000
    0000252C 2F56                   MOV.L       R5,@-R15
    0000252E 2F56                   MOV.L       R5,@-R15
    00002530 2F56                   MOV.L       R5,@-R15
    00002532 2F56                   MOV.L       R5,@-R15
    00002534 2F56                   MOV.L       R5,@-R15
    00002536 2F56                   MOV.L       R5,@-R15
    00002538 2F56                   MOV.L       R5,@-R15
    0000253A 2F56                   MOV.L       R5,@-R15
    0000253C 2F56                   MOV.L       R5,@-R15
    0000253E 2F56                   MOV.L       R5,@-R15
    00002540 E502                   MOV         #2,R5      ; H'00000002
    00002542 D188                   MOV.L       L1383+4,R1 ; H'00000098+_STRTBL_MSG
    00002544 D488                   MOV.L       L1383+8,R4 ; __$stCtl
    00002546 D389                   MOV.L       L1383+12,R3; _CmdMakeResponse
    00002548 430B                   JSR         @R3
    0000254A 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
             tskcmd.c       3708    
             tskcmd.c       3709          // 応答メッセージ送信
             tskcmd.c       3710          CmdSendResponse( &stCtl );
    0000254C D486                   MOV.L       L1383+8,R4 ; __$stCtl
    0000254E D388                   MOV.L       L1383+16,R3; _CmdSendResponse
    00002550 430B                   JSR         @R3
    00002552 7F28                   ADD         #40,R15
    00002554              L400:
    00002554 7F04                   ADD         #4,R15
    00002556 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3711      }
             tskcmd.c       3712    }
    00002558 006B                   RTS/N
             tskcmd.c       3713    
             tskcmd.c       3714    
             tskcmd.c       3715    /***********************************************************************
             tskcmd.c       3716    *
             tskcmd.c       3717    * [概要]  
             tskcmd.c       3718    * [引数]  
             tskcmd.c       3719    * [戻値]  -
             tskcmd.c       3720    * 
             tskcmd.c       3721    ***********************************************************************/
             tskcmd.c       3722    static void CmdImpOptn( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000255A              __$CmdImpOptn:                   ; function: __$CmdImpOptn
                                                           ; frame size=0
             tskcmd.c       3723    {
             tskcmd.c       3724    }
    0000255A 006B                   RTS/N
             tskcmd.c       3725    
             tskcmd.c       3726    
             tskcmd.c       3727    /***********************************************************************
             tskcmd.c       3728    *
             tskcmd.c       3729    * [概要]  
             tskcmd.c       3730    * [引数]  
             tskcmd.c       3731    * [戻値]  -
             tskcmd.c       3732    * 
             tskcmd.c       3733    ***********************************************************************/
             tskcmd.c       3734    static void CmdExpRunl( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000255C              __$CmdExpRunl:                   ; function: __$CmdExpRunl
                                                           ; frame size=4
    0000255C 4F22                   STS.L       PR,@-R15
             tskcmd.c       3735    {
             tskcmd.c       3736      ExpRunlSeqno = 1;
    0000255E E101                   MOV         #1,R1      ; H'00000001
             tskcmd.c       3737      ExpRunlRetry = 0;
    00002560 E700                   MOV         #0,R7      ; H'00000000
    00002562 D284                   MOV.L       L1383+20,R2; __$ExpRunlSeqno
    00002564 D684                   MOV.L       L1383+24,R6; __$ExpRunlRetry
    00002566 2210                   MOV.B       R1,@R2     ; ExpRunlSeqno
             tskcmd.c       3738      TplExRunSend();
    00002568 B617                   BSR         _TplExRunSend
    0000256A 2670                   MOV.B       R7,@R6     ; ExpRunlRetry
    0000256C E56B                   MOV         #107,R5    ; H'0000006B
             tskcmd.c       3739      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_EXRUN );
    0000256E D483                   MOV.L       L1383+28,R4; H'0000009C+__$tp
    00002570 A71E                   BRA         __$TplRidDataSend
    00002572 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3740    }
             tskcmd.c       3741    
             tskcmd.c       3742    
             tskcmd.c       3743    /***********************************************************************
             tskcmd.c       3744    *
             tskcmd.c       3745    * [概要]  
             tskcmd.c       3746    * [引数]  
             tskcmd.c       3747    * [戻値]  -
             tskcmd.c       3748    * 
             tskcmd.c       3749    ***********************************************************************/
             tskcmd.c       3750    static void CmdExpComl( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002574              __$CmdExpComl:                   ; function: __$CmdExpComl
                                                           ; frame size=0
             tskcmd.c       3751    {
             tskcmd.c       3752    }
    00002574 006B                   RTS/N
             tskcmd.c       3753    
             tskcmd.c       3754    
             tskcmd.c       3755    /***********************************************************************
             tskcmd.c       3756    *
             tskcmd.c       3757    * [概要]  
             tskcmd.c       3758    * [引数]  
             tskcmd.c       3759    * [戻値]  -
             tskcmd.c       3760    * 
             tskcmd.c       3761    ***********************************************************************/
             tskcmd.c       3762    static void CmdExpClog( T_CMD_MSG* mrcv, UB anum, const char** args )
             tskcmd.c       3763    {
             tskcmd.c       3764      // タッチパネルへそのままデータ通知
             tskcmd.c       3765      TplRpDataSend();
             tskcmd.c       3766      TplRidDataSend ( &tp.rsp.buf[0] , ID_TPL_PRINF );
             tskcmd.c       3767      
             tskcmd.c       3768      
             tskcmd.c       3769      
             tskcmd.c       3770      
             tskcmd.c       3771      
             tskcmd.c       3772    }
             tskcmd.c       3773    
             tskcmd.c       3774    
             tskcmd.c       3775    
             tskcmd.c       3776    
             tskcmd.c       3777    
             tskcmd.c       3778    
             tskcmd.c       3779    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       3780    /*  基本コマンド   ここまで                                                                                                                                                                                     基本コマンド   */
             tskcmd.c       3781    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       3782    //
             tskcmd.c       3783    //
             tskcmd.c       3784    //
             tskcmd.c       3785    //
             tskcmd.c       3786    //
             tskcmd.c       3787    //
             tskcmd.c       3788    //
             tskcmd.c       3789    //
             tskcmd.c       3790    //
             tskcmd.c       3791    //
             tskcmd.c       3792    //
             tskcmd.c       3793    //
             tskcmd.c       3794    //
             tskcmd.c       3795    //
             tskcmd.c       3796    //
             tskcmd.c       3797    //
             tskcmd.c       3798    /***********************************************************************
             tskcmd.c       3799    *
             tskcmd.c       3800    * [概要]  デバイス動作中セット
             tskcmd.c       3801    * [引数]  
             tskcmd.c       3802    * [戻値]  -
             tskcmd.c       3803    * 
             tskcmd.c       3804    ***********************************************************************/
             tskcmd.c       3805    static void SetDevice( UB DevNo )
    00002576              __$SetDevice:                    ; function: __$SetDevice
                                                           ; frame size=0
             tskcmd.c       3806    {
             tskcmd.c       3807      // 未登録・規定外
             tskcmd.c       3808      if( DevNo == NO_DATA )  return;
             tskcmd.c       3809      if( DevNo > DVMAX )     return;
             tskcmd.c       3810    
             tskcmd.c       3811      
             tskcmd.c       3812      return;//debug
             tskcmd.c       3813      
             tskcmd.c       3814      BitSet_INT( DevNo, &DeviceStatus[0] );
             tskcmd.c       3815    }
    00002576 006B                   RTS/N
             tskcmd.c       3816    
             tskcmd.c       3817    /***********************************************************************
             tskcmd.c       3818    *
             tskcmd.c       3819    * [概要]  デバイス動作状態取得
             tskcmd.c       3820    * [引数]  
             tskcmd.c       3821    * [戻値]  TRUE:動作中、FALSE:待機中
             tskcmd.c       3822    * 
             tskcmd.c       3823    ***********************************************************************/
             tskcmd.c       3824    static BOOL GetDeviceStatus( UB DevNo )
    00002578              __$GetDeviceStatus:              ; function: __$GetDeviceStatus
                                                           ; frame size=4
    00002578 4F22                   STS.L       PR,@-R15
    0000257A E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c       3825    {
             tskcmd.c       3826      // 未登録や規定外は動作中扱いとする
             tskcmd.c       3827      if( DevNo == NO_DATA )  return( TRUE );
    0000257C 644C                   EXTU.B      R4,R4
    0000257E 622C                   EXTU.B      R2,R2
    00002580 3420                   CMP/EQ      R2,R4
    00002582 8908                   BT          L407
             tskcmd.c       3828      if( DevNo > DVMAX )     return( TRUE );
    00002584 E207                   MOV         #7,R2      ; H'00000007
    00002586 3427                   CMP/GT      R2,R4
    00002588 8905                   BT          L407
             tskcmd.c       3829    
             tskcmd.c       3830      return(( BitGet_INT( DevNo, &DeviceStatus[0] ) > 0 ? TRUE : FALSE ));
    0000258A D57D                   MOV.L       L1383+32,R5; __$DeviceStatus
    0000258C D27D                   MOV.L       L1383+36,R2; _BitGet_INT
    0000258E 424B                   JSR/N       @R2
    00002590 4015                   CMP/PL      R0
    00002592 A001                   BRA         L409
    00002594 0029                   MOVT        R0
    00002596              L407:
    00002596 E001                   MOV         #1,R0      ; H'00000001
    00002598              L409:
    00002598 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3831    }
    0000259A 006B                   RTS/N
             tskcmd.c       3832    
             tskcmd.c       3833    /***********************************************************************
             tskcmd.c       3834    *
             tskcmd.c       3835    * [概要]  デバイス動作中クリア
             tskcmd.c       3836    * [引数]  
             tskcmd.c       3837    * [戻値]  -
             tskcmd.c       3838    * 
             tskcmd.c       3839    ***********************************************************************/
             tskcmd.c       3840    static void ClrDevice( UB DevNo )
    0000259C              __$ClrDevice:                    ; function: __$ClrDevice
                                                           ; frame size=0
    0000259C E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c       3841    {
             tskcmd.c       3842      if( DevNo == NO_DATA )  return;
    0000259E 644C                   EXTU.B      R4,R4
    000025A0 622C                   EXTU.B      R2,R2
    000025A2 3420                   CMP/EQ      R2,R4
    000025A4 8906                   BT          L412
             tskcmd.c       3843      if( DevNo > DVMAX )     return;
    000025A6 E207                   MOV         #7,R2      ; H'00000007
    000025A8 3427                   CMP/GT      R2,R4
    000025AA 8903                   BT          L412
             tskcmd.c       3844    
             tskcmd.c       3845      BitClr_INT( DevNo, &DeviceStatus[0] );
    000025AC D574                   MOV.L       L1383+32,R5; __$DeviceStatus
    000025AE D276                   MOV.L       L1383+40,R2; _BitClr_INT
    000025B0 422B                   JMP         @R2
    000025B2 0009                   NOP
    000025B4              L412:
    000025B4 006B                   RTS/N
             tskcmd.c       3846    }
             tskcmd.c       3847    
             tskcmd.c       3848    /******************************************************************************
             tskcmd.c       3849    * 
             tskcmd.c       3850    * [概要]  パルスモータを励磁
             tskcmd.c       3851    * [引数]  モーター番号、励磁動作指示
             tskcmd.c       3852    * [戻値]  TRUE:成功、FALSE:失敗
             tskcmd.c       3853    * 
             tskcmd.c       3854    * 
             tskcmd.c       3855    ***********************************************************************/
             tskcmd.c       3856    static ER GetDeviceActionChk ( UB msg, UB bcid, UB mm )
    000025B6              __$GetDeviceActionChk:           ; function: __$GetDeviceActionChk
                                                           ; frame size=0
             tskcmd.c       3857    {
             tskcmd.c       3858      ER result = E_SUCCESS;
             tskcmd.c       3859    #if 0 // ★
             tskcmd.c       3860      INT AsnDevice[2];
             tskcmd.c       3861      INT CmpDevice[2];
             tskcmd.c       3862      INT TargetDevice;
             tskcmd.c       3863      UB devnowk;
             tskcmd.c       3864    
             tskcmd.c       3865      // **************************************************************
             tskcmd.c       3866      // 現在、動作中のデバイスとかぶらないか確認
             tskcmd.c       3867      // ※基本コマンドはbcctrlに登録されていないので動作中フラグで確認
             tskcmd.c       3868      // **************************************************************
             tskcmd.c       3869      memset( &CmpDevice,  CLR,  sizeof( CmpDevice ) );
             tskcmd.c       3870      GetBCDevice( msg,    mm,     &CmpDevice[0] );
             tskcmd.c       3871      
             tskcmd.c       3872      TargetDevice = ( DeviceStatus[0] & CmpDevice[0] );
             tskcmd.c       3873      if( TargetDevice )
             tskcmd.c       3874      {
             tskcmd.c       3875          devnowk = GetFirstCh( &TargetDevice );
             tskcmd.c       3876          return( (E_BUSY + devnowk) );
             tskcmd.c       3877      }
             tskcmd.c       3878      
             tskcmd.c       3879      TargetDevice = ( DeviceStatus[1] & CmpDevice[1] );
             tskcmd.c       3880      if( TargetDevice )
             tskcmd.c       3881      {
             tskcmd.c       3882          devnowk = GetFirstCh( &TargetDevice );
             tskcmd.c       3883          return( (E_BUSY + devnowk + 32) );
             tskcmd.c       3884      }
             tskcmd.c       3885    #endif
             tskcmd.c       3886      return( result );
             tskcmd.c       3887    }
    000025B6 000B                   RTS
    000025B8 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       3888    
             tskcmd.c       3889    /******************************************************************************
             tskcmd.c       3890    * 
             tskcmd.c       3891    * [概要]  パルスモータを励磁
             tskcmd.c       3892    * [引数]  モーター番号、励磁動作指示
             tskcmd.c       3893    * [戻値]  TRUE:成功、FALSE:失敗
             tskcmd.c       3894    * 
             tskcmd.c       3895    ******************************************************************************/
             tskcmd.c       3896    BOOL GetPowerSts(UB pm)
    000025BA              _GetPowerSts:                    ; function: GetPowerSts
                                                           ; frame size=0
             tskcmd.c       3897    {
             tskcmd.c       3898      BOOL result;// port状態 H = TRUE、L = FALSE
             tskcmd.c       3899    
             tskcmd.c       3900      if( power[pm].mm == pm )
    000025BA 644C                   EXTU.B      R4,R4
    000025BC 6043                   MOV         R4,R0
    000025BE 4000                   SHLL        R0
    000025C0 D172                   MOV.L       L1383+44,R1; __$power
    000025C2 021C                   MOV.B       @(R0,R1),R2; power[].mm
    000025C4 662C                   EXTU.B      R2,R6
    000025C6 3640                   CMP/EQ      R4,R6
    000025C8 8B03                   BF          L417
             tskcmd.c       3901      {
             tskcmd.c       3902          if( power[pm].sw )
    000025CA 7101                   ADD         #1,R1
    000025CC 021C                   MOV.B       @(R0,R1),R2; power[].sw
    000025CE 2228                   TST         R2,R2
    000025D0 8B01                   BF          L418
    000025D2              L417:
    000025D2 E200                   MOV         #0,R2      ; H'00000000
    000025D4 027B                   RTV/N       R2
    000025D6              L418:
             tskcmd.c       3903          {
             tskcmd.c       3904              result = TRUE;
    000025D6 0239                   MOVRT       R2
    000025D8 027B                   RTV/N       R2
             tskcmd.c       3905          }
             tskcmd.c       3906          else
             tskcmd.c       3907          {
             tskcmd.c       3908              result = FALSE;
             tskcmd.c       3909          }
             tskcmd.c       3910    
             tskcmd.c       3911      }
             tskcmd.c       3912      else
             tskcmd.c       3913      {
             tskcmd.c       3914          result = FALSE;
             tskcmd.c       3915      }
             tskcmd.c       3916      
             tskcmd.c       3917      return( result );
             tskcmd.c       3918    }
             tskcmd.c       3919    /******************************************************************************
             tskcmd.c       3920    * 
             tskcmd.c       3921    * [概要]  リミット動作
             tskcmd.c       3922    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       3923    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       3924    *           dr   : 方向
             tskcmd.c       3925    *           md   : 動作ﾓｰﾄﾞ
             tskcmd.c       3926    *           sp   : 速度
             tskcmd.c       3927    * [戻値]  エラーコード
             tskcmd.c       3928    * 
             tskcmd.c       3929    ******************************************************************************/
             tskcmd.c       3930    static ER LimitAction( UB prid1, UB bcid, UB mm, UB dr, UB md, INT sp )
    000025DA              __$LimitAction:                  ; function: __$LimitAction
                                                           ; frame size=52
    000025DA 4BF0                   MOVMU.L     R11,@-R15
    000025DC 7FF8                   ADD         #-8,R15
             tskcmd.c       3931    {
             tskcmd.c       3932      ER result = E_SUCCESS;
             tskcmd.c       3933      ID mpfid;
             tskcmd.c       3934      ID mbxid;
             tskcmd.c       3935      ST_LIMIT lmt;
             tskcmd.c       3936    
             tskcmd.c       3937      // LIMITデータコピー
             tskcmd.c       3938      lmt.mm = mm;
    000025DE 6B43                   MOV         R4,R11
    000025E0 51F7                   MOV.L       @(28,R15),R1
             tskcmd.c       3939      lmt.dr = dr;
             tskcmd.c       3940      lmt.md = md;
             tskcmd.c       3941      lmt.sp = sp;
    000025E2 54F8                   MOV.L       @(32,R15),R4
    000025E4 6E63                   MOV         R6,R14
    000025E6 3F610000               MOV.B       R6,@(0:12,R15); lmt.mm
    000025EA 3F710001               MOV.B       R7,@(1:12,R15); lmt.dr
    000025EE 3F110002               MOV.B       R1,@(2:12,R15); lmt.md
    000025F2 1F41                   MOV.L       R4,@(4,R15); lmt.sp
    000025F4 E608                   MOV         #8,R6      ; H'00000008
    000025F6 6EEC                   EXTU.B      R14,R14
    000025F8 6C53                   MOV         R5,R12
             tskcmd.c       3942      
             tskcmd.c       3943      memcpy( &bufwk[0], &lmt, sizeof( ST_LIMIT )); 
    000025FA D465                   MOV.L       L1383+48,R4; __$bufwk
    000025FC D765                   MOV.L       L1383+52,R7; _memcpy
    000025FE 470B                   JSR         @R7
    00002600 65F3                   MOV         R15,R5
             tskcmd.c       3944      
             tskcmd.c       3945      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       3946      if(power[mm].sw == SET)
    00002602 DD65                   MOV.L       L1383+56,R13; H'00000001+__$power
    00002604 62E3                   MOV         R14,R2
    00002606 4200                   SHLL        R2
    00002608 6023                   MOV         R2,R0
    0000260A 00DC                   MOV.B       @(R0,R13),R0; power[].sw
    0000260C 8801                   CMP/EQ      #1,R0
    0000260E 8B02                   BF          L422
             tskcmd.c       3947      {
             tskcmd.c       3948          mpfid = ID_MPF_MOTACT;
    00002610 E508                   MOV         #8,R5      ; H'00000008
             tskcmd.c       3949          mbxid = ID_MBX_MOTACT;
    00002612 A002                   BRA         L423
    00002614 E609                   MOV         #9,R6      ; H'00000009
    00002616              L422:
             tskcmd.c       3950      }
             tskcmd.c       3951      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       3952      else
             tskcmd.c       3953      {
             tskcmd.c       3954          mpfid = ID_MPF_MOTWAIT;
    00002616 E507                   MOV         #7,R5      ; H'00000007
             tskcmd.c       3955          mbxid = ID_MBX_MOTWAIT;
    00002618 E608                   MOV         #8,R6      ; H'00000008
    0000261A              L423:
    0000261A E108                   MOV         #8,R1      ; H'00000008
             tskcmd.c       3956      }
             tskcmd.c       3957    
             tskcmd.c       3958      // メッセージ通知
             tskcmd.c       3959      result = mbx_send(
             tskcmd.c       3960                          ID_TSK_CMD,
             tskcmd.c       3961                          mpfid,
             tskcmd.c       3962                          mbxid,
             tskcmd.c       3963                          prid1,   
             tskcmd.c       3964                          bcid,
             tskcmd.c       3965                          ID_MSG_LIMIT,
             tskcmd.c       3966                          mm,
             tskcmd.c       3967                          NO_DATA,
             tskcmd.c       3968                          &bufwk[0],
             tskcmd.c       3969                          sizeof( ST_LIMIT )
             tskcmd.c       3970                      );
    0000261C 6DE3                   MOV         R14,R13
    0000261E 2F16                   MOV.L       R1,@-R15
    00002620 D15B                   MOV.L       L1383+48,R1; __$bufwk
    00002622 2F16                   MOV.L       R1,@-R15
    00002624 E4FF                   MOV         #-1,R4     ; H'FFFFFFFF
    00002626 644C                   EXTU.B      R4,R4
    00002628 2F46                   MOV.L       R4,@-R15
    0000262A 2FE6                   MOV.L       R14,@-R15
    0000262C E70C                   MOV         #12,R7     ; H'0000000C
    0000262E 2F76                   MOV.L       R7,@-R15
    00002630 62CC                   EXTU.B      R12,R2
    00002632 2F26                   MOV.L       R2,@-R15
    00002634 67BC                   EXTU.B      R11,R7
    00002636 DB4A                   MOV.L       L1383,R11  ; _mbx_send
    00002638 4B0B                   JSR         @R11
    0000263A E405                   MOV         #5,R4      ; H'00000005
    0000263C 6E03                   MOV         R0,R14
             tskcmd.c       3971    
             tskcmd.c       3972      if( result == E_SUCCESS )
    0000263E 2008                   TST         R0,R0
    00002640 8F02                   BF/S        L425
    00002642 7F18                   ADD         #24,R15
             tskcmd.c       3973      {
             tskcmd.c       3974          SetDevice( mm );
    00002644 BF97                   BSR         __$SetDevice
    00002646 64D3                   MOV         R13,R4
    00002648              L425:
             tskcmd.c       3975      }
             tskcmd.c       3976      return( result );
    00002648 60E3                   MOV         R14,R0
    0000264A 7F08                   ADD         #8,R15
    0000264C 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       3977    }
    0000264E 006B                   RTS/N
             tskcmd.c       3978    /******************************************************************************
             tskcmd.c       3979    * 
             tskcmd.c       3980    * [概要]  相対位置移動動作
             tskcmd.c       3981    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       3982    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       3983    *           pppp : mm移動量
             tskcmd.c       3984    * [戻値]  エラーコード
             tskcmd.c       3985    * 
             tskcmd.c       3986    ******************************************************************************/
             tskcmd.c       3987    static ER RelmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp )
    00002650              __$RelmvAction:                  ; function: __$RelmvAction
                                                           ; frame size=52
    00002650 4BF0                   MOVMU.L     R11,@-R15
    00002652 7FF8                   ADD         #-8,R15
    00002654 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00002656 6B5C                   EXTU.B      R5,R11
    00002658 622C                   EXTU.B      R2,R2
    0000265A 3B20                   CMP/EQ      R2,R11
             tskcmd.c       3988    {
             tskcmd.c       3989      ER result = E_SUCCESS;
             tskcmd.c       3990      ID mpfid;
             tskcmd.c       3991      ID mbxid;
             tskcmd.c       3992      ST_RELMV rel;
             tskcmd.c       3993    
             tskcmd.c       3994      // 基本コマンドはデバイス状態を確認
             tskcmd.c       3995      if( bcid == NO_DATA )
    0000265C 6D43                   MOV         R4,R13
    0000265E 6E63                   MOV         R6,R14
    00002660 8F09                   BF/S        L428
    00002662 6C6C                   EXTU.B      R6,R12
             tskcmd.c       3996      {
             tskcmd.c       3997          if( GetDeviceStatus(mm) ==TRUE )
    00002664 BF88                   BSR         __$GetDeviceStatus
    00002666 64C3                   MOV         R12,R4
    00002668 8801                   CMP/EQ      #1,R0
    0000266A 8B04                   BF          L428
             tskcmd.c       3998          {
             tskcmd.c       3999              return( (E_BUSY + mm) );
    0000266C E601                   MOV         #1,R6      ; H'00000001
    0000266E 60EC                   EXTU.B      R14,R0
    00002670 4618                   SHLL8       R6
    00002672 A02E                   BRA         L430
    00002674 306C                   ADD         R6,R0
    00002676              L428:
             tskcmd.c       4000          }
             tskcmd.c       4001      }
             tskcmd.c       4002    
             tskcmd.c       4003      // RELMVデータコピー
             tskcmd.c       4004      rel.mm = mm;
    00002676 E100                   MOV         #0,R1      ; H'00000000
    00002678 E608                   MOV         #8,R6      ; H'00000008
    0000267A 6013                   MOV         R1,R0
    0000267C 0FE4                   MOV.B       R14,@(R0,R15); rel.mm
             tskcmd.c       4005      rel.st = 0;
             tskcmd.c       4006      rel.pppp = pppp;
    0000267E 54F7                   MOV.L       @(28,R15),R4
    00002680 6EEC                   EXTU.B      R14,R14
    00002682 3F110001               MOV.B       R1,@(1:12,R15); rel.st
    00002686 1F41                   MOV.L       R4,@(4,R15); rel.pppp
             tskcmd.c       4007      
             tskcmd.c       4008      memcpy( &bufwk[0], &rel, sizeof( ST_RELMV )); 
    00002688 D441                   MOV.L       L1383+48,R4; __$bufwk
    0000268A D742                   MOV.L       L1383+52,R7; _memcpy
    0000268C 470B                   JSR         @R7
    0000268E 65F3                   MOV         R15,R5
             tskcmd.c       4009      
             tskcmd.c       4010      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       4011      if(power[mm].sw == SET)
    00002690 D141                   MOV.L       L1383+56,R1; H'00000001+__$power
    00002692 4E00                   SHLL        R14
    00002694 60E3                   MOV         R14,R0
    00002696 001C                   MOV.B       @(R0,R1),R0; power[].sw
    00002698 8801                   CMP/EQ      #1,R0
    0000269A 8B02                   BF          L432
             tskcmd.c       4012      {
             tskcmd.c       4013          mpfid = ID_MPF_MOTACT;
    0000269C E508                   MOV         #8,R5      ; H'00000008
             tskcmd.c       4014          mbxid = ID_MBX_MOTACT;
    0000269E A002                   BRA         L433
    000026A0 E609                   MOV         #9,R6      ; H'00000009
    000026A2              L432:
             tskcmd.c       4015      }
             tskcmd.c       4016      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       4017      else
             tskcmd.c       4018      {
             tskcmd.c       4019          mpfid = ID_MPF_MOTWAIT;
    000026A2 E507                   MOV         #7,R5      ; H'00000007
             tskcmd.c       4020          mbxid = ID_MBX_MOTWAIT;
    000026A4 E608                   MOV         #8,R6      ; H'00000008
    000026A6              L433:
             tskcmd.c       4021      }
             tskcmd.c       4022    
             tskcmd.c       4023      // メッセージ通知
             tskcmd.c       4024      result = mbx_send(
             tskcmd.c       4025                          ID_TSK_CMD,                                 // tskid
             tskcmd.c       4026                          mpfid,                                      // mpfid
             tskcmd.c       4027                          mbxid,                                      // mbxid
             tskcmd.c       4028                          prid1,                                      // prid1
             tskcmd.c       4029                          bcid,                                       // bcid
             tskcmd.c       4030                          ID_MSG_RELMV,                               // msgid
             tskcmd.c       4031                          mm,                                         // sts
             tskcmd.c       4032                          NO_DATA,                                    // sts2
             tskcmd.c       4033                          &bufwk[0],                                  // data
             tskcmd.c       4034                          sizeof( ST_RELMV )                          // siz
             tskcmd.c       4035                      );
    000026A6 E408                   MOV         #8,R4      ; H'00000008
    000026A8 2F46                   MOV.L       R4,@-R15
    000026AA D139                   MOV.L       L1383+48,R1; __$bufwk
    000026AC 2F16                   MOV.L       R1,@-R15
    000026AE E7FF                   MOV         #-1,R7     ; H'FFFFFFFF
    000026B0 677C                   EXTU.B      R7,R7
    000026B2 2F76                   MOV.L       R7,@-R15
    000026B4 2FC6                   MOV.L       R12,@-R15
    000026B6 EE11                   MOV         #17,R14    ; H'00000011
    000026B8 2FE6                   MOV.L       R14,@-R15
    000026BA 2FB6                   MOV.L       R11,@-R15
    000026BC 67DC                   EXTU.B      R13,R7
    000026BE D228                   MOV.L       L1383,R2   ; _mbx_send
    000026C0 420B                   JSR         @R2
    000026C2 E405                   MOV         #5,R4      ; H'00000005
    000026C4 6E03                   MOV         R0,R14
             tskcmd.c       4036    
             tskcmd.c       4037      if( result == E_SUCCESS )
    000026C6 2008                   TST         R0,R0
    000026C8 8F02                   BF/S        L435
    000026CA 7F18                   ADD         #24,R15
             tskcmd.c       4038      {
             tskcmd.c       4039          SetDevice( mm );
    000026CC BF53                   BSR         __$SetDevice
    000026CE 64C3                   MOV         R12,R4
    000026D0              L435:
             tskcmd.c       4040      }
             tskcmd.c       4041    
             tskcmd.c       4042      return( result );
    000026D0 60E3                   MOV         R14,R0
    000026D2              L430:
    000026D2 7F08                   ADD         #8,R15
    000026D4 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       4043    }
    000026D6 006B                   RTS/N
             tskcmd.c       4044    /******************************************************************************
             tskcmd.c       4045    * 
             tskcmd.c       4046    * [概要]  絶対位置移動動作
             tskcmd.c       4047    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       4048    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4049    *           pppp : mm移動量
             tskcmd.c       4050    * [戻値]  エラーコード
             tskcmd.c       4051    * 
             tskcmd.c       4052    ******************************************************************************/
             tskcmd.c       4053    static ER AbsmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp )
    000026D8              __$AbsmvAction:                  ; function: __$AbsmvAction
                                                           ; frame size=56
    000026D8 4AF0                   MOVMU.L     R10,@-R15
    000026DA 7FF8                   ADD         #-8,R15
    000026DC E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    000026DE 6A5C                   EXTU.B      R5,R10
    000026E0 622C                   EXTU.B      R2,R2
    000026E2 3A20                   CMP/EQ      R2,R10
             tskcmd.c       4054    {
             tskcmd.c       4055      ER result = E_SUCCESS;
             tskcmd.c       4056      ID mpfid;
             tskcmd.c       4057      ID mbxid;
             tskcmd.c       4058      ST_ABSMV abs;
             tskcmd.c       4059    
             tskcmd.c       4060      // 基本コマンドはデバイス状態を確認
             tskcmd.c       4061      if( bcid == NO_DATA )
    000026E4 6C43                   MOV         R4,R12
    000026E6 6E63                   MOV         R6,R14
    000026E8 6D73                   MOV         R7,R13
    000026EA 8F09                   BF/S        L438
    000026EC 6B6C                   EXTU.B      R6,R11
             tskcmd.c       4062      {
             tskcmd.c       4063          if( GetDeviceStatus(mm) ==TRUE )
    000026EE BF43                   BSR         __$GetDeviceStatus
    000026F0 64B3                   MOV         R11,R4
    000026F2 8801                   CMP/EQ      #1,R0
    000026F4 8B04                   BF          L438
             tskcmd.c       4064          {
             tskcmd.c       4065              return( (E_BUSY + mm) );
    000026F6 E601                   MOV         #1,R6      ; H'00000001
    000026F8 60EC                   EXTU.B      R14,R0
    000026FA 4618                   SHLL8       R6
    000026FC A02D                   BRA         L440
    000026FE 306C                   ADD         R6,R0
    00002700              L438:
             tskcmd.c       4066          }
             tskcmd.c       4067      }
             tskcmd.c       4068    
             tskcmd.c       4069      // ABSMVデータコピー
             tskcmd.c       4070      abs.mm = mm;
             tskcmd.c       4071      abs.st = st;
             tskcmd.c       4072      abs.pppp = pppp;
    00002700 51F8                   MOV.L       @(32,R15),R1
    00002702 E608                   MOV         #8,R6      ; H'00000008
    00002704 3FE10000               MOV.B       R14,@(0:12,R15); abs.mm
    00002708 3FD10001               MOV.B       R13,@(1:12,R15); abs.st
    0000270C 1F11                   MOV.L       R1,@(4,R15); abs.pppp
    0000270E 6EEC                   EXTU.B      R14,R14
             tskcmd.c       4073      
             tskcmd.c       4074      memcpy( &bufwk[0], &abs, sizeof( ST_ABSMV )); 
    00002710 D41F                   MOV.L       L1383+48,R4; __$bufwk
    00002712 D720                   MOV.L       L1383+52,R7; _memcpy
    00002714 470B                   JSR         @R7
    00002716 65F3                   MOV         R15,R5
             tskcmd.c       4075      
             tskcmd.c       4076      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       4077      if(power[mm].sw == SET)
    00002718 DD1F                   MOV.L       L1383+56,R13; H'00000001+__$power
    0000271A 4E00                   SHLL        R14
    0000271C 60E3                   MOV         R14,R0
    0000271E 00DC                   MOV.B       @(R0,R13),R0; power[].sw
    00002720 8801                   CMP/EQ      #1,R0
    00002722 8B02                   BF          L442
             tskcmd.c       4078      {
             tskcmd.c       4079          mpfid = ID_MPF_MOTACT;
    00002724 E508                   MOV         #8,R5      ; H'00000008
             tskcmd.c       4080          mbxid = ID_MBX_MOTACT;
    00002726 A002                   BRA         L443
    00002728 E609                   MOV         #9,R6      ; H'00000009
    0000272A              L442:
             tskcmd.c       4081      }
             tskcmd.c       4082      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       4083      else
             tskcmd.c       4084      {
             tskcmd.c       4085          mpfid = ID_MPF_MOTWAIT;
    0000272A E507                   MOV         #7,R5      ; H'00000007
             tskcmd.c       4086          mbxid = ID_MBX_MOTWAIT;
    0000272C E608                   MOV         #8,R6      ; H'00000008
    0000272E              L443:
             tskcmd.c       4087      }
             tskcmd.c       4088    
             tskcmd.c       4089      // メッセージ通知
             tskcmd.c       4090      result = mbx_send(                                              
             tskcmd.c       4091                          ID_TSK_CMD,                                 // tskid
             tskcmd.c       4092                          mpfid,                                      // mpfid
             tskcmd.c       4093                          mbxid,                                      // mbxid
             tskcmd.c       4094                          prid1,                                      // prid1
             tskcmd.c       4095                          bcid,                                       // bcid
             tskcmd.c       4096                          ID_MSG_ABSMV,                               // msgid
             tskcmd.c       4097                          mm,                                         // sts
             tskcmd.c       4098                          NO_DATA,                                    // sts2
             tskcmd.c       4099                          &bufwk[0],                                  // data
             tskcmd.c       4100                          sizeof( ST_ABSMV )                          // siz
             tskcmd.c       4101                      );
    0000272E EE08                   MOV         #8,R14     ; H'00000008
    00002730 2FE6                   MOV.L       R14,@-R15
    00002732 D117                   MOV.L       L1383+48,R1; __$bufwk
    00002734 2F16                   MOV.L       R1,@-R15
    00002736 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00002738 611C                   EXTU.B      R1,R1
    0000273A 2F16                   MOV.L       R1,@-R15
    0000273C 2FB6                   MOV.L       R11,@-R15
    0000273E E409                   MOV         #9,R4      ; H'00000009
    00002740 2F46                   MOV.L       R4,@-R15
    00002742 2FA6                   MOV.L       R10,@-R15
    00002744 67CC                   EXTU.B      R12,R7
    00002746 DD06                   MOV.L       L1383,R13  ; _mbx_send
    00002748 4D0B                   JSR         @R13
    0000274A E405                   MOV         #5,R4      ; H'00000005
    0000274C 6E03                   MOV         R0,R14
             tskcmd.c       4102    
             tskcmd.c       4103      if( result == E_SUCCESS )
    0000274E 2008                   TST         R0,R0
    00002750 8F02                   BF/S        L445
    00002752 7F18                   ADD         #24,R15
             tskcmd.c       4104      {
             tskcmd.c       4105          SetDevice( mm );
    00002754 BF0F                   BSR         __$SetDevice
    00002756 64B3                   MOV         R11,R4
    00002758              L445:
             tskcmd.c       4106      }
             tskcmd.c       4107      return( result );
    00002758 60E3                   MOV         R14,R0
    0000275A              L440:
    0000275A 7F08                   ADD         #8,R15
    0000275C 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       4108    }
    0000275E 006B                   RTS/N
    00002760              L1383:
    00002760 <00000000>             .DATA.L     _mbx_send
    00002764 <00000098>             .DATA.L     H'00000098+_STRTBL_MSG
    00002768 <00000000>             .DATA.L     __$stCtl
    0000276C <00000000>             .DATA.L     _CmdMakeResponse
    00002770 <00000000>             .DATA.L     _CmdSendResponse
    00002774 <00000000>             .DATA.L     __$ExpRunlSeqno
    00002778 <00000000>             .DATA.L     __$ExpRunlRetry
    0000277C <0000009C>             .DATA.L     H'0000009C+__$tp
    00002780 <00000000>             .DATA.L     __$DeviceStatus
    00002784 <00000000>             .DATA.L     _BitGet_INT
    00002788 <00000000>             .DATA.L     _BitClr_INT
    0000278C <00000000>             .DATA.L     __$power
    00002790 <00000000>             .DATA.L     __$bufwk
    00002794 <00000000>             .DATA.L     _memcpy
    00002798 <00000001>             .DATA.L     H'00000001+__$power
             tskcmd.c       4109    /******************************************************************************
             tskcmd.c       4110    * 
             tskcmd.c       4111    * [概要]  MAP移動動作
             tskcmd.c       4112    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       4113    *           mm1  : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4114    *           mm2  : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4115    *           pppp1: mm1移動量
             tskcmd.c       4116    *           pppp2: mm2移動量
             tskcmd.c       4117    * [戻値]  エラーコード
             tskcmd.c       4118    * 
             tskcmd.c       4119    ******************************************************************************/
             tskcmd.c       4120    static ER MapAction( UB prid1, UB bcid, UB mm1, UB mm2, INT pppp1, INT pppp2 )
    0000279C              __$MapAction:                    ; function: __$MapAction
                                                           ; frame size=80
    0000279C 48F0                   MOVMU.L     R8,@-R15
    0000279E 7FE8                   ADD         #-24,R15
    000027A0 E9FF                   MOV         #-1,R9     ; H'FFFFFFFF
             tskcmd.c       4121    {
             tskcmd.c       4122      ID mpfid;
             tskcmd.c       4123      ID mbxid;
             tskcmd.c       4124      ER result  = E_SUCCESS;
             tskcmd.c       4125      ER result1 = E_SUCCESS;
             tskcmd.c       4126      ER result2 = E_SUCCESS;
             tskcmd.c       4127      ST_ABSMV absmv;
             tskcmd.c       4128      ST_ABSMV absmv2;
             tskcmd.c       4129      
             tskcmd.c       4130      // 基本コマンドはデバイス状態を確認
             tskcmd.c       4131      if( bcid == NO_DATA )
    000027A2 685C                   EXTU.B      R5,R8
    000027A4 699C                   EXTU.B      R9,R9
    000027A6 EC00                   MOV         #0,R12     ; H'00000000
    000027A8 616C                   EXTU.B      R6,R1
    000027AA 3890                   CMP/EQ      R9,R8
    000027AC 6B43                   MOV         R4,R11
    000027AE 1F14                   MOV.L       R1,@(16,R15)
    000027B0 6E63                   MOV         R6,R14
    000027B2 8F12                   BF/S        L448
    000027B4 6D73                   MOV         R7,R13
             tskcmd.c       4132      {
             tskcmd.c       4133          if( GetDeviceStatus(mm1) ==TRUE )
    000027B6 BEDF                   BSR         __$GetDeviceStatus
    000027B8 54F4                   MOV.L       @(16,R15),R4
    000027BA 8801                   CMP/EQ      #1,R0
    000027BC 8B04                   BF          L450
             tskcmd.c       4134          {
             tskcmd.c       4135              return( (E_BUSY + mm1) );
    000027BE E601                   MOV         #1,R6      ; H'00000001
    000027C0 60EC                   EXTU.B      R14,R0
    000027C2 4618                   SHLL8       R6
    000027C4 A071                   BRA         L451
    000027C6 306C                   ADD         R6,R0
    000027C8              L450:
             tskcmd.c       4136          }
             tskcmd.c       4137          if( GetDeviceStatus(mm2) ==TRUE )
    000027C8 BED6                   BSR         __$GetDeviceStatus
    000027CA 64DC                   EXTU.B      R13,R4
    000027CC 8801                   CMP/EQ      #1,R0
    000027CE 8B04                   BF          L448
             tskcmd.c       4138          {
             tskcmd.c       4139              return( (E_BUSY + mm2) );
    000027D0 E601                   MOV         #1,R6      ; H'00000001
    000027D2 60DC                   EXTU.B      R13,R0
    000027D4 4618                   SHLL8       R6
    000027D6 A068                   BRA         L451
    000027D8 306C                   ADD         R6,R0
    000027DA              L448:
             tskcmd.c       4140          }
             tskcmd.c       4141      }
             tskcmd.c       4142    
             tskcmd.c       4143      // 初期化
             tskcmd.c       4144      memset( &bufwk,  CLR, sizeof( bufwk ) );
    000027DA D99D                   MOV.L       L1384,R9   ; __$bufwk
    000027DC E63C                   MOV         #60,R6     ; H'0000003C
    000027DE E500                   MOV         #0,R5      ; H'00000000
    000027E0 DA9C                   MOV.L       L1384+4,R10; _memset
    000027E2 4A0B                   JSR         @R10
    000027E4 6493                   MOV         R9,R4
             tskcmd.c       4145    
             tskcmd.c       4146        absmv.mm   = mm1; 
    000027E6 E100                   MOV         #0,R1      ; H'00000000
             tskcmd.c       4147        absmv.st   = 0;
             tskcmd.c       4148        absmv.pppp = pppp1;
             tskcmd.c       4149    
             tskcmd.c       4150      absmv2.mm   = mm2; 
             tskcmd.c       4151        absmv2.st   = 0;
    000027E8 E500                   MOV         #0,R5      ; H'00000000
    000027EA 6013                   MOV         R1,R0
    000027EC 0FE4                   MOV.B       R14,@(R0,R15); absmv.mm
    000027EE 54FE                   MOV.L       @(56,R15),R4
    000027F0 6EEC                   EXTU.B      R14,R14
    000027F2 4E00                   SHLL        R14
             tskcmd.c       4152        absmv2.pppp = pppp2;
    000027F4 56FF                   MOV.L       @(60,R15),R6
    000027F6 1F41                   MOV.L       R4,@(4,R15); absmv.pppp
    000027F8 60E3                   MOV         R14,R0
    000027FA D497                   MOV.L       L1384+8,R4 ; H'00000001+__$power
    000027FC 004C                   MOV.B       @(R0,R4),R0; power[].sw
             tskcmd.c       4153    
             tskcmd.c       4154      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       4155      if(
    000027FE 67DC                   EXTU.B      R13,R7
    00002800 3F110001               MOV.B       R1,@(1:12,R15); absmv.st
    00002804 8801                   CMP/EQ      #1,R0
    00002806 1F63                   MOV.L       R6,@(12,R15); absmv2.pppp
    00002808 3FD10008               MOV.B       R13,@(8:12,R15); absmv2.mm
    0000280C 3F510009               MOV.B       R5,@(9:12,R15); absmv2.st
    00002810 8F08                   BF/S        L454
    00002812 1F75                   MOV.L       R7,@(20,R15)
    00002814 60DC                   EXTU.B      R13,R0
    00002816 4000                   SHLL        R0
    00002818 004C                   MOV.B       @(R0,R4),R0; power[].sw
    0000281A 8801                   CMP/EQ      #1,R0
    0000281C 8B02                   BF          L454
             tskcmd.c       4156          (power[absmv.mm].sw == SET)&&
             tskcmd.c       4157          (power[absmv2.mm].sw == SET)
             tskcmd.c       4158      )
             tskcmd.c       4159      {
             tskcmd.c       4160          mpfid = ID_MPF_MOTACT;
    0000281E ED08                   MOV         #8,R13     ; H'00000008
             tskcmd.c       4161          mbxid = ID_MBX_MOTACT;
    00002820 A002                   BRA         L456
    00002822 EE09                   MOV         #9,R14     ; H'00000009
    00002824              L454:
             tskcmd.c       4162      }
             tskcmd.c       4163      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       4164      else
             tskcmd.c       4165      {
             tskcmd.c       4166          mpfid = ID_MPF_MOTWAIT;
    00002824 ED07                   MOV         #7,R13     ; H'00000007
             tskcmd.c       4167          mbxid = ID_MBX_MOTWAIT;
    00002826 EE08                   MOV         #8,R14     ; H'00000008
    00002828              L456:
    00002828 E608                   MOV         #8,R6      ; H'00000008
             tskcmd.c       4168      }
             tskcmd.c       4169    
             tskcmd.c       4170      // -------------------
             tskcmd.c       4171      // １つ目のデバイス
             tskcmd.c       4172      // -------------------
             tskcmd.c       4173      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       4174      memcpy( &bufwk[0], (B*)&absmv, sizeof( ST_ABSMV ) );
    0000282A 65F3                   MOV         R15,R5
    0000282C DA8B                   MOV.L       L1384+12,R10; _memcpy
    0000282E 4A0B                   JSR         @R10
    00002830 6493                   MOV         R9,R4
             tskcmd.c       4175      
             tskcmd.c       4176      // メッセージ通知
             tskcmd.c       4177      result1 = mbx_send(
             tskcmd.c       4178                          ID_TSK_CMD,                      // tskid
             tskcmd.c       4179                          mpfid,                           // mpfid
             tskcmd.c       4180                          mbxid,                           // mbxid
             tskcmd.c       4181                          prid1,                           // prid1
             tskcmd.c       4182                          bcid,                            // bcid
             tskcmd.c       4183                          ID_MSG_MAP,                      // msgid
             tskcmd.c       4184                          mm1,                             // sts
             tskcmd.c       4185                          mm2,                             // sts2
             tskcmd.c       4186                          &bufwk[0],                       // data
             tskcmd.c       4187                          sizeof( ST_ABSMV )               // siz
             tskcmd.c       4188                      );
    00002832 6ABC                   EXTU.B      R11,R10
    00002834 EB08                   MOV         #8,R11     ; H'00000008
    00002836 2FB6                   MOV.L       R11,@-R15
    00002838 2F96                   MOV.L       R9,@-R15
    0000283A 7FFC                   ADD         #-4,R15
    0000283C 51F8                   MOV.L       @(32,R15),R1
    0000283E 2F12                   MOV.L       R1,@R15
    00002840 7FFC                   ADD         #-4,R15
    00002842 52F8                   MOV.L       @(32,R15),R2
    00002844 E40D                   MOV         #13,R4     ; H'0000000D
    00002846 2F22                   MOV.L       R2,@R15
    00002848 2F46                   MOV.L       R4,@-R15
    0000284A 2F86                   MOV.L       R8,@-R15
    0000284C E405                   MOV         #5,R4      ; H'00000005
    0000284E 65D3                   MOV         R13,R5
    00002850 66E3                   MOV         R14,R6
    00002852 D283                   MOV.L       L1384+16,R2; _mbx_send
    00002854 420B                   JSR         @R2
    00002856 67A3                   MOV         R10,R7
    00002858 6B03                   MOV         R0,R11
    0000285A 7F18                   ADD         #24,R15
             tskcmd.c       4189      
             tskcmd.c       4190      
             tskcmd.c       4191      // -------------------
             tskcmd.c       4192      // ２つ目のデバイス
             tskcmd.c       4193      // -------------------
             tskcmd.c       4194      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       4195      memcpy( &bufwk[0], (B*)&absmv2, sizeof( ST_ABSMV ) );
    0000285C 65F3                   MOV         R15,R5
    0000285E 7508                   ADD         #8,R5
    00002860 E608                   MOV         #8,R6      ; H'00000008
    00002862 D17E                   MOV.L       L1384+12,R1; _memcpy
    00002864 410B                   JSR         @R1
    00002866 6493                   MOV         R9,R4
             tskcmd.c       4196    
             tskcmd.c       4197      // メッセージ通知
             tskcmd.c       4198      result2 = mbx_send(
             tskcmd.c       4199                          ID_TSK_CMD,                      // tskid
             tskcmd.c       4200                          mpfid,                           // mpfid
             tskcmd.c       4201                          mbxid,                           // mbxid
             tskcmd.c       4202                          prid1,                           // prid1
             tskcmd.c       4203                          bcid,                            // bcid
             tskcmd.c       4204                          ID_MSG_MAP,                      // msgid
             tskcmd.c       4205                          mm2,                             // sts
             tskcmd.c       4206                          mm1,                             // sts2
             tskcmd.c       4207                          &bufwk[0],                       // data
             tskcmd.c       4208                          sizeof( ST_ABSMV )               // siz
             tskcmd.c       4209                      );
    00002868 E208                   MOV         #8,R2      ; H'00000008
    0000286A 2F26                   MOV.L       R2,@-R15
    0000286C 2F96                   MOV.L       R9,@-R15
    0000286E 7FFC                   ADD         #-4,R15
    00002870 55F7                   MOV.L       @(28,R15),R5
    00002872 2F52                   MOV.L       R5,@R15
    00002874 7FFC                   ADD         #-4,R15
    00002876 59F9                   MOV.L       @(36,R15),R9
    00002878 2F92                   MOV.L       R9,@R15
    0000287A E90D                   MOV         #13,R9     ; H'0000000D
    0000287C 2F96                   MOV.L       R9,@-R15
    0000287E 2F86                   MOV.L       R8,@-R15
    00002880 E405                   MOV         #5,R4      ; H'00000005
    00002882 65D3                   MOV         R13,R5
    00002884 66E3                   MOV         R14,R6
    00002886 D176                   MOV.L       L1384+16,R1; _mbx_send
    00002888 410B                   JSR         @R1
    0000288A 67A3                   MOV         R10,R7
    0000288C 6203                   MOV         R0,R2
             tskcmd.c       4210      
             tskcmd.c       4211      // エラーチェック(エラー時は、「1」側優先でログに出力)
             tskcmd.c       4212      if( result2 != E_SUCCESS )      result = result2;
    0000288E 2008                   TST         R0,R0
    00002890 8D01                   BT/S        L458
    00002892 7F18                   ADD         #24,R15
    00002894 6C23                   MOV         R2,R12
    00002896              L458:
             tskcmd.c       4213      if( result1 != E_SUCCESS )      result = result1;
    00002896 2BB8                   TST         R11,R11
    00002898 8900                   BT          L460
    0000289A 6CB3                   MOV         R11,R12
    0000289C              L460:
             tskcmd.c       4214    
             tskcmd.c       4215      if( result == E_SUCCESS )
    0000289C 2CC8                   TST         R12,R12
    0000289E 8B03                   BF          L462
             tskcmd.c       4216      {
             tskcmd.c       4217          SetDevice( mm1 );
    000028A0 BE69                   BSR         __$SetDevice
    000028A2 54F4                   MOV.L       @(16,R15),R4
             tskcmd.c       4218          SetDevice( mm2 );
    000028A4 BE67                   BSR         __$SetDevice
    000028A6 54F5                   MOV.L       @(20,R15),R4
    000028A8              L462:
             tskcmd.c       4219      }
             tskcmd.c       4220      return( result );
    000028A8 60C3                   MOV         R12,R0
    000028AA              L451:
    000028AA 7F18                   ADD         #24,R15
    000028AC 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       4221    }
    000028AE 006B                   RTS/N
             tskcmd.c       4222    
             tskcmd.c       4223    /******************************************************************************
             tskcmd.c       4224    * 
             tskcmd.c       4225    * [概要]  ＷＡＩＴ動作
             tskcmd.c       4226    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       4227    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4228    *           pppp : mm移動量
             tskcmd.c       4229    * [戻値]  エラーコード
             tskcmd.c       4230    * 
             tskcmd.c       4231    ******************************************************************************/
             tskcmd.c       4232    static ER WaitAction( UB prid1, UB bcid, INT waittim )
    000028B0              __$WaitAction:                   ; function: __$WaitAction
                                                           ; frame size=40
    000028B0 4DF0                   MOVMU.L     R13,@-R15
    000028B2 7FFC                   ADD         #-4,R15
             tskcmd.c       4233    {
             tskcmd.c       4234      ER result = E_SUCCESS;
             tskcmd.c       4235    
             tskcmd.c       4236      memcpy( &bufwk[0], &waittim, sizeof( INT )); 
    000028B4 2F62                   MOV.L       R6,@R15
    000028B6 E604                   MOV         #4,R6      ; H'00000004
    000028B8 6D43                   MOV         R4,R13
    000028BA 6E53                   MOV         R5,R14
    000028BC D464                   MOV.L       L1384,R4   ; __$bufwk
    000028BE D167                   MOV.L       L1384+12,R1; _memcpy
    000028C0 410B                   JSR         @R1
    000028C2 65F3                   MOV         R15,R5
             tskcmd.c       4237    
             tskcmd.c       4238      // メッセージ通知
             tskcmd.c       4239      result = mbx_send(
             tskcmd.c       4240                          ID_TSK_CMD,             // tskid
             tskcmd.c       4241                          ID_MPF_MOTWAIT,         // mpfid
             tskcmd.c       4242                          ID_MBX_MOTWAIT,         // mbxid
             tskcmd.c       4243                          prid1,                  // prid1
             tskcmd.c       4244                          bcid,                   // bcid
             tskcmd.c       4245                          ID_MSG_TIMWAIT,         // msgid
             tskcmd.c       4246                          NO_DATA,                // sts
             tskcmd.c       4247                          NO_DATA,                // sts2
             tskcmd.c       4248                          &bufwk[0],              // data
             tskcmd.c       4249                          sizeof( INT )           // siz
             tskcmd.c       4250                      );
    000028C4 E104                   MOV         #4,R1      ; H'00000004
    000028C6 2F16                   MOV.L       R1,@-R15
    000028C8 D161                   MOV.L       L1384,R1   ; __$bufwk
    000028CA 2F16                   MOV.L       R1,@-R15
    000028CC E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    000028CE 622C                   EXTU.B      R2,R2
    000028D0 2F26                   MOV.L       R2,@-R15
    000028D2 2F26                   MOV.L       R2,@-R15
    000028D4 72C9                   ADD         #-55,R2
    000028D6 672C                   EXTU.B      R2,R7
    000028D8 2F76                   MOV.L       R7,@-R15
    000028DA 62EC                   EXTU.B      R14,R2
    000028DC 2F26                   MOV.L       R2,@-R15
    000028DE 67DC                   EXTU.B      R13,R7
    000028E0 E608                   MOV         #8,R6      ; H'00000008
    000028E2 E507                   MOV         #7,R5      ; H'00000007
    000028E4 DD5E                   MOV.L       L1384+16,R13; _mbx_send
    000028E6 4D0B                   JSR         @R13
    000028E8 E405                   MOV         #5,R4      ; H'00000005
    000028EA 7F1C                   ADD         #28,R15
    000028EC 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       4251    
             tskcmd.c       4252      return( result );
             tskcmd.c       4253    }
    000028EE 006B                   RTS/N
             tskcmd.c       4254    /***********************************************************************
             tskcmd.c       4255    *
             tskcmd.c       4256    * [概要]  ＢＣで利用されるデバイス情報の取得
             tskcmd.c       4257    * [引数]  msg:メッセージＩＤ，mm:デバイス番号，*data:格納先
             tskcmd.c       4258    * [戻値]  −
             tskcmd.c       4259    * 
             tskcmd.c       4260    ***********************************************************************/
             tskcmd.c       4261    static void GetBCDevice( UB msg, UB mm, INT *data )
             tskcmd.c       4262    {
             tskcmd.c       4263      if( mm != NO_DATA )
             tskcmd.c       4264      {
             tskcmd.c       4265          BitSet_INT( mm, &data[0] );
             tskcmd.c       4266      }
             tskcmd.c       4267    }
             tskcmd.c       4268    
             tskcmd.c       4269    
             tskcmd.c       4270    //-------------------------------------------------------------------------------------------------------------------------
             tskcmd.c       4271    //        タッチパネル通信
             tskcmd.c       4272    //-------------------------------------------------------------------------------------------------------------------------
             tskcmd.c       4273    
             tskcmd.c       4274    /***********************************************************************
             tskcmd.c       4275    * 
             tskcmd.c       4276    * [概要]  コマンドの解析
             tskcmd.c       4277    * [引数]  data:コマンドリクエスト電文
             tskcmd.c       4278    * [戻値]  −
             tskcmd.c       4279    * 
             tskcmd.c       4280    ***********************************************************************/
             tskcmd.c       4281    void TpAnalyze( T_CMD_MSG* mrcv )
    000028F0              _TpAnalyze:                      ; function: TpAnalyze
                                                           ; frame size=12
    000028F0 4DF0                   MOVMU.L     R13,@-R15
             tskcmd.c       4282    {
             tskcmd.c       4283      UB bcid;
             tskcmd.c       4284      UB anum;
             tskcmd.c       4285      UB wkbcid;
             tskcmd.c       4286      UB procid;
             tskcmd.c       4287    
             tskcmd.c       4288      wkbcid = 0;
             tskcmd.c       4289      procid = mrcv->msgdata.prid1;
    000028F2 6D43                   MOV         R4,R13
    000028F4 34418018               MOVU.B      @(24,R4),R4; (mrcv)->prid1
             tskcmd.c       4290      
             tskcmd.c       4291      if( IsQgProcList( procid ) == FALSE )               // 重複なし
    000028F8 D35A                   MOV.L       L1384+20,R3; __$IsQgProcList
    000028FA 430B                   JSR         @R3
    000028FC 6E43                   MOV         R4,R14
    000028FE 2008                   TST         R0,R0
    00002900 8B04                   BF          L466
             tskcmd.c       4292      {
             tskcmd.c       4293          mrcv->msgdata.bcid = GetQgProcList( procid ) ;  // コマンドリスト空きindex取得
    00002902 D359                   MOV.L       L1384+24,R3; __$GetQgProcList
    00002904 430B                   JSR         @R3
    00002906 64E3                   MOV         R14,R4
    00002908 A001                   BRA         L467
    0000290A 6203                   MOV         R0,R2
    0000290C              L466:
             tskcmd.c       4294      }
             tskcmd.c       4295      else
             tskcmd.c       4296      {
             tskcmd.c       4297          mrcv->msgdata.bcid = NO_DATA;                   // 重複あり
    0000290C E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    0000290E              L467:
    0000290E 60E3                   MOV         R14,R0
             tskcmd.c       4298      }
             tskcmd.c       4299      
             tskcmd.c       4300      if( procid == ID_TPL_EXRUN )                        // 運転履歴受信
    00002910 886B                   CMP/EQ      #107,R0
    00002912 3D21001A               MOV.B       R2,@(26:12,R13); (mrcv)->bcid
    00002916 8915                   BT          L468
    00002918 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4301      {
             tskcmd.c       4302          
             tskcmd.c       4303          
             tskcmd.c       4304          
             tskcmd.c       4305      }
             tskcmd.c       4306      else
             tskcmd.c       4307      {
             tskcmd.c       4308          memset( &TpRecvData,    CLR,  sizeof( TpRecvData ) );
    0000291A D454                   MOV.L       L1384+28,R4; __$TpRecvData
    0000291C D14D                   MOV.L       L1384+4,R1 ; _memset
    0000291E 410B                   JSR         @R1
    00002920 E500                   MOV         #0,R5      ; H'00000000
    00002922 E664                   MOV         #100,R6    ; H'00000064
    00002924 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4309          memset( &TpRecvArgs,    CLR,  sizeof( TpRecvArgs ) );
    00002926 D452                   MOV.L       L1384+32,R4; __$TpRecvArgs
    00002928 D74A                   MOV.L       L1384+4,R7 ; _memset
    0000292A 470B                   JSR         @R7
    0000292C 4608                   SHLL2       R6
             tskcmd.c       4310    
             tskcmd.c       4311          // コマンド電文コピー
             tskcmd.c       4312          memcpy( &TpRecvData[0],     &mrcv->msgdata.data[0],CMD_BUFSIZ );
    0000292E 65D3                   MOV         R13,R5
    00002930 7524                   ADD         #36,R5
    00002932 D44E                   MOV.L       L1384+28,R4; __$TpRecvData
    00002934 D149                   MOV.L       L1384+12,R1; _memcpy
    00002936 410B                   JSR         @R1
    00002938 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4313    
             tskcmd.c       4314          // 大文字
             tskcmd.c       4315    //    ToUpper( (char*)&TpRecvData );
             tskcmd.c       4316    
             tskcmd.c       4317          // 分解 ＆ パラメータ数取得
             tskcmd.c       4318          anum = SplitSpace( &TpRecvData[0], TpRecvArgs );
    0000293A D54D                   MOV.L       L1384+32,R5; __$TpRecvArgs
    0000293C D44B                   MOV.L       L1384+28,R4; __$TpRecvData
    0000293E D24D                   MOV.L       L1384+36,R2; _SplitSpace
    00002940 424B                   JSR/N       @R2
    00002942 6503                   MOV         R0,R5
    00002944              L468:
             tskcmd.c       4319      }
             tskcmd.c       4320    
             tskcmd.c       4321      // コールファンクション
             tskcmd.c       4322      (*TpFuncTbl[procid])( mrcv, anum, TpRecvArgs  );
    00002944 D24C                   MOV.L       L1384+40,R2; _TpFuncTbl
    00002946 4E08                   SHLL2       R14
    00002948 60E3                   MOV         R14,R0
    0000294A 012E                   MOV.L       @(R0,R2),R1; TpFuncTbl[]
    0000294C D648                   MOV.L       L1384+32,R6; __$TpRecvArgs
    0000294E 64D3                   MOV         R13,R4
    00002950 4DF4                   MOVMU.L     @R15+,R13
    00002952 412B                   JMP         @R1
    00002954 0009                   NOP
             tskcmd.c       4323    }
             tskcmd.c       4324    
             tskcmd.c       4325    
             tskcmd.c       4326    /***********************************************************************
             tskcmd.c       4327    *     
             tskcmd.c       4328    * [概要]  
             tskcmd.c       4329    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4330    * [戻値]  −
             tskcmd.c       4331    *     
             tskcmd.c       4332    ***********************************************************************/
             tskcmd.c       4333    static void TplDummy( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002956              __$TplDummy:                     ; function: __$TplDummy
                                                           ; frame size=0
             tskcmd.c       4334    { 
             tskcmd.c       4335      
             tskcmd.c       4336    
             tskcmd.c       4337    
             tskcmd.c       4338    
             tskcmd.c       4339    
             tskcmd.c       4340    
             tskcmd.c       4341    
             tskcmd.c       4342    
             tskcmd.c       4343    
             tskcmd.c       4344    }
    00002956 006B                   RTS/N
             tskcmd.c       4345    
             tskcmd.c       4346    /***********************************************************************
             tskcmd.c       4347    *     
             tskcmd.c       4348    * [概要]  01 FWバージョン情報
             tskcmd.c       4349    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4350    * [戻値]  −
             tskcmd.c       4351    *     
             tskcmd.c       4352    ***********************************************************************/
             tskcmd.c       4353    static void TplFwver( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002958              __$TplFwver:                     ; function: __$TplFwver
                                                           ; frame size=32
    00002958 4EF0                   MOVMU.L     R14,@-R15
    0000295A E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4354    { 
             tskcmd.c       4355      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    0000295C 6E43                   MOV         R4,R14
    0000295E D43C                   MOV.L       L1384,R4   ; __$bufwk
    00002960 D13C                   MOV.L       L1384+4,R1 ; _memset
    00002962 410B                   JSR         @R1
    00002964 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4356    
             tskcmd.c       4357      mrcv->msgdata.inf2 = (EEPROM_SPED_PTRN+EEPROM_POSI_INFO);
    00002966 E606                   MOV         #6,R6      ; H'00000006
             tskcmd.c       4358    
             tskcmd.c       4359      // EEPROM データ取得指示
             tskcmd.c       4360      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4361                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4362                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4363                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4364                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4365                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4366                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4367                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4368                   &bufwk[0],          // data
             tskcmd.c       4369                   CMD_BUFSIZ          // siz
             tskcmd.c       4370                 );
    00002968 E13C                   MOV         #60,R1     ; H'0000003C
    0000296A 3E61001D               MOV.B       R6,@(29:12,R14); (mrcv)->inf2
    0000296E 2F16                   MOV.L       R1,@-R15
    00002970 D137                   MOV.L       L1384,R1   ; __$bufwk
    00002972 2F16                   MOV.L       R1,@-R15
    00002974 2F66                   MOV.L       R6,@-R15
    00002976 34E1801C               MOVU.B      @(28,R14),R4; (mrcv)->inf
    0000297A 2F46                   MOV.L       R4,@-R15
    0000297C E716                   MOV         #22,R7     ; H'00000016
    0000297E 2F76                   MOV.L       R7,@-R15
    00002980 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    00002984 2F26                   MOV.L       R2,@-R15
    00002986 E505                   MOV         #5,R5      ; H'00000005
    00002988 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    0000298C DE34                   MOV.L       L1384+16,R14; _mbx_send
    0000298E 4E0B                   JSR         @R14
    00002990 6453                   MOV         R5,R4
    00002992 7F18                   ADD         #24,R15
    00002994 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4371    
             tskcmd.c       4372    }
    00002996 006B                   RTS/N
             tskcmd.c       4373    
             tskcmd.c       4374    /***********************************************************************
             tskcmd.c       4375    *     
             tskcmd.c       4376    * [概要]  02 オプション情報
             tskcmd.c       4377    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4378    * [戻値]  −
             tskcmd.c       4379    *     
             tskcmd.c       4380    
             tskcmd.c       4381      // 固定値
             tskcmd.c       4382      tp.rsp.buf[8] = '0';
             tskcmd.c       4383    ***********************************************************************/
             tskcmd.c       4384    static void TplOptif( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002998              __$TplOptif:                     ; function: __$TplOptif
                                                           ; frame size=32
    00002998 4EF0                   MOVMU.L     R14,@-R15
    0000299A E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4385    { 
             tskcmd.c       4386      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    0000299C 6E43                   MOV         R4,R14
    0000299E D42C                   MOV.L       L1384,R4   ; __$bufwk
    000029A0 D12C                   MOV.L       L1384+4,R1 ; _memset
    000029A2 410B                   JSR         @R1
    000029A4 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4387    
             tskcmd.c       4388      mrcv->msgdata.inf2 = CLR;
    000029A6 E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       4389    
             tskcmd.c       4390      // EEPROM データ取得指示
             tskcmd.c       4391      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4392                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4393                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4394                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4395                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4396                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4397                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4398                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4399                   &bufwk[0],          // data
             tskcmd.c       4400                   CMD_BUFSIZ          // siz
             tskcmd.c       4401                 );
    000029A8 E13C                   MOV         #60,R1     ; H'0000003C
    000029AA 3E21001D               MOV.B       R2,@(29:12,R14); (mrcv)->inf2
    000029AE 2F16                   MOV.L       R1,@-R15
    000029B0 D127                   MOV.L       L1384,R1   ; __$bufwk
    000029B2 2F16                   MOV.L       R1,@-R15
    000029B4 2F26                   MOV.L       R2,@-R15
    000029B6 34E1801C               MOVU.B      @(28,R14),R4; (mrcv)->inf
    000029BA 2F46                   MOV.L       R4,@-R15
    000029BC E716                   MOV         #22,R7     ; H'00000016
    000029BE 2F76                   MOV.L       R7,@-R15
    000029C0 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    000029C4 2F26                   MOV.L       R2,@-R15
    000029C6 E606                   MOV         #6,R6      ; H'00000006
    000029C8 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    000029CC E505                   MOV         #5,R5      ; H'00000005
    000029CE DE24                   MOV.L       L1384+16,R14; _mbx_send
    000029D0 4E0B                   JSR         @R14
    000029D2 6453                   MOV         R5,R4
    000029D4 7F18                   ADD         #24,R15
    000029D6 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4402    }
    000029D8 006B                   RTS/N
             tskcmd.c       4403    
             tskcmd.c       4404    /***********************************************************************
             tskcmd.c       4405    *     
             tskcmd.c       4406    * [概要]  03 ログイン認証1
             tskcmd.c       4407    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4408    * [戻値]  −
             tskcmd.c       4409    *     
             tskcmd.c       4410    ***********************************************************************/
             tskcmd.c       4411    static void TplLgin1( T_CMD_MSG* mrcv, UB anum, const char** args )   
    000029DA              __$TplLgin1:                     ; function: __$TplLgin1
                                                           ; frame size=44
    000029DA 4EF0                   MOVMU.L     R14,@-R15
    000029DC 7FF4                   ADD         #-12,R15
    000029DE E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4412    { 
             tskcmd.c       4413      ST_USERINFO Userwk;
             tskcmd.c       4414    
             tskcmd.c       4415      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    000029E0 6E43                   MOV         R4,R14
    000029E2 D41B                   MOV.L       L1384,R4   ; __$bufwk
    000029E4 D11B                   MOV.L       L1384+4,R1 ; _memset
    000029E6 410B                   JSR         @R1
    000029E8 E500                   MOV         #0,R5      ; H'00000000
    000029EA E60C                   MOV         #12,R6     ; H'0000000C
    000029EC E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4416      memset( &Userwk.Id[0], CLR,  sizeof(ST_USERINFO) );
    000029EE D719                   MOV.L       L1384+4,R7 ; _memset
    000029F0 470B                   JSR         @R7
    000029F2 64F3                   MOV         R15,R4
             tskcmd.c       4417    
             tskcmd.c       4418      Strcpy( (char*)&Userwk.Id[0] , TpRecvArgs[1]  );
    000029F4 D121                   MOV.L       L1384+44,R1; H'00000004+__$TpRecvArgs
    000029F6 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    000029F8 D121                   MOV.L       L1384+48,R1; _Strcpy
    000029FA 410B                   JSR         @R1
    000029FC 64F3                   MOV         R15,R4
             tskcmd.c       4419      Strcpy( (char*)&Userwk.Pw[0] , TpRecvArgs[2]  );
    000029FE D221                   MOV.L       L1384+52,R2; H'00000008+__$TpRecvArgs
    00002A00 6522                   MOV.L       @R2,R5     ; TpRecvArgs[]
    00002A02 64F3                   MOV         R15,R4
    00002A04 D61E                   MOV.L       L1384+48,R6; _Strcpy
    00002A06 460B                   JSR         @R6
    00002A08 7408                   ADD         #8,R4
    00002A0A E60C                   MOV         #12,R6     ; H'0000000C
             tskcmd.c       4420    
             tskcmd.c       4421      memcpy( &bufwk[0], &Userwk.Id[0], sizeof(ST_USERINFO) );
    00002A0C D410                   MOV.L       L1384,R4   ; __$bufwk
    00002A0E D713                   MOV.L       L1384+12,R7; _memcpy
    00002A10 470B                   JSR         @R7
    00002A12 65F3                   MOV         R15,R5
             tskcmd.c       4422      SetUserInfoSorce( (ST_USERINFO *) &Userwk.Id[0] );
    00002A14 D31C                   MOV.L       L1384+56,R3; __$SetUserInfoSorce
    00002A16 430B                   JSR         @R3
    00002A18 64F3                   MOV         R15,R4
             tskcmd.c       4423    
             tskcmd.c       4424      mrcv->msgdata.inf2 = CLR;
    00002A1A E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       4425    
             tskcmd.c       4426      // EEPROM データ取得指示
             tskcmd.c       4427      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4428                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4429                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4430                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4431                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4432                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4433                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4434                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4435                   &Userwk.Id[0],      // data
             tskcmd.c       4436                   sizeof(ST_USERINFO) // siz
             tskcmd.c       4437                 );
    00002A1C E10C                   MOV         #12,R1     ; H'0000000C
    00002A1E 3E21001D               MOV.B       R2,@(29:12,R14); (mrcv)->inf2
    00002A22 2F16                   MOV.L       R1,@-R15
    00002A24 67F3                   MOV         R15,R7
    00002A26 7704                   ADD         #4,R7
    00002A28 2F76                   MOV.L       R7,@-R15
    00002A2A 2F26                   MOV.L       R2,@-R15
    00002A2C 31E1801C               MOVU.B      @(28,R14),R1; (mrcv)->inf
    00002A30 2F16                   MOV.L       R1,@-R15
    00002A32 E216                   MOV         #22,R2     ; H'00000016
    00002A34 2F26                   MOV.L       R2,@-R15
    00002A36 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    00002A3A 2F26                   MOV.L       R2,@-R15
    00002A3C E606                   MOV         #6,R6      ; H'00000006
    00002A3E 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    00002A42 E505                   MOV         #5,R5      ; H'00000005
    00002A44 DE06                   MOV.L       L1384+16,R14; _mbx_send
    00002A46 4E0B                   JSR         @R14
    00002A48 6453                   MOV         R5,R4
    00002A4A 7F24                   ADD         #36,R15
    00002A4C 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4438    }
    00002A4E 006B                   RTS/N
    00002A50              L1384:
    00002A50 <00000000>             .DATA.L     __$bufwk
    00002A54 <00000000>             .DATA.L     _memset
    00002A58 <00000001>             .DATA.L     H'00000001+__$power
    00002A5C <00000000>             .DATA.L     _memcpy
    00002A60 <00000000>             .DATA.L     _mbx_send
    00002A64 <00000000>             .DATA.L     __$IsQgProcList
    00002A68 <00000000>             .DATA.L     __$GetQgProcList
    00002A6C <00000000>             .DATA.L     __$TpRecvData
    00002A70 <00000000>             .DATA.L     __$TpRecvArgs
    00002A74 <00000000>             .DATA.L     _SplitSpace
    00002A78 <00000000>             .DATA.L     _TpFuncTbl
    00002A7C <00000004>             .DATA.L     H'00000004+__$TpRecvArgs
    00002A80 <00000000>             .DATA.L     _Strcpy
    00002A84 <00000008>             .DATA.L     H'00000008+__$TpRecvArgs
    00002A88 <00000000>             .DATA.L     __$SetUserInfoSorce
             tskcmd.c       4439    
             tskcmd.c       4440    /***********************************************************************
             tskcmd.c       4441    *     
             tskcmd.c       4442    * [概要]  04 ログイン認証2
             tskcmd.c       4443    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4444    * [戻値]  −
             tskcmd.c       4445    *     
             tskcmd.c       4446    ***********************************************************************/
             tskcmd.c       4447    static void TplLgin2( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002A8C              __$TplLgin2:                     ; function: __$TplLgin2
                                                           ; frame size=48
    00002A8C 4DF0                   MOVMU.L     R13,@-R15
    00002A8E 7FF4                   ADD         #-12,R15
    00002A90 DD98                   MOV.L       L1385,R13  ; __$bufwk
    00002A92 E63C                   MOV         #60,R6     ; H'0000003C
    00002A94 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4448    { 
             tskcmd.c       4449      ST_USERINFO Userwk;
             tskcmd.c       4450    
             tskcmd.c       4451      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    00002A96 6E43                   MOV         R4,R14
    00002A98 D197                   MOV.L       L1385+4,R1 ; _memset
    00002A9A 410B                   JSR         @R1
    00002A9C 64D3                   MOV         R13,R4
    00002A9E E60C                   MOV         #12,R6     ; H'0000000C
    00002AA0 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4452      memset( &Userwk.Id[0], CLR,  sizeof(ST_USERINFO) );
    00002AA2 D795                   MOV.L       L1385+4,R7 ; _memset
    00002AA4 470B                   JSR         @R7
    00002AA6 64F3                   MOV         R15,R4
             tskcmd.c       4453    
             tskcmd.c       4454      Strcpy( (char*)&Userwk.Id[0] , TpRecvArgs[1]  );
    00002AA8 D194                   MOV.L       L1385+8,R1 ; H'00000004+__$TpRecvArgs
    00002AAA 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002AAC D194                   MOV.L       L1385+12,R1; _Strcpy
    00002AAE 410B                   JSR         @R1
    00002AB0 64F3                   MOV         R15,R4
             tskcmd.c       4455      Strcpy( (char*)&Userwk.Pw[0] , TpRecvArgs[2]  );
    00002AB2 D294                   MOV.L       L1385+16,R2; H'00000008+__$TpRecvArgs
    00002AB4 6522                   MOV.L       @R2,R5     ; TpRecvArgs[]
    00002AB6 64F3                   MOV         R15,R4
    00002AB8 D791                   MOV.L       L1385+12,R7; _Strcpy
    00002ABA 470B                   JSR         @R7
    00002ABC 7408                   ADD         #8,R4
    00002ABE E60C                   MOV         #12,R6     ; H'0000000C
             tskcmd.c       4456    
             tskcmd.c       4457      memcpy( &bufwk[0], &Userwk.Id[0], sizeof(ST_USERINFO) );
    00002AC0 65F3                   MOV         R15,R5
    00002AC2 D191                   MOV.L       L1385+20,R1; _memcpy
    00002AC4 410B                   JSR         @R1
    00002AC6 64D3                   MOV         R13,R4
             tskcmd.c       4458    
             tskcmd.c       4459      mrcv->msgdata.inf2 = CLR;
    00002AC8 E100                   MOV         #0,R1      ; H'00000000
             tskcmd.c       4460    
             tskcmd.c       4461      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4462                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4463                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4464                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4465                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4466                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4467                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4468                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4469                   &bufwk[0],          // data
             tskcmd.c       4470                   CMD_BUFSIZ          // siz
             tskcmd.c       4471                 );
    00002ACA E73C                   MOV         #60,R7     ; H'0000003C
    00002ACC 3E11001D               MOV.B       R1,@(29:12,R14); (mrcv)->inf2
    00002AD0 2F76                   MOV.L       R7,@-R15
    00002AD2 2FD6                   MOV.L       R13,@-R15
    00002AD4 2F16                   MOV.L       R1,@-R15
    00002AD6 3DE1801C               MOVU.B      @(28,R14),R13; (mrcv)->inf
    00002ADA 2FD6                   MOV.L       R13,@-R15
    00002ADC ED16                   MOV         #22,R13    ; H'00000016
    00002ADE 2FD6                   MOV.L       R13,@-R15
    00002AE0 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    00002AE4 2F26                   MOV.L       R2,@-R15
    00002AE6 E606                   MOV         #6,R6      ; H'00000006
    00002AE8 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    00002AEC E505                   MOV         #5,R5      ; H'00000005
    00002AEE DE87                   MOV.L       L1385+24,R14; _mbx_send
    00002AF0 4E0B                   JSR         @R14
    00002AF2 6453                   MOV         R5,R4
    00002AF4 7F24                   ADD         #36,R15
    00002AF6 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       4472    }
    00002AF8 006B                   RTS/N
             tskcmd.c       4473    
             tskcmd.c       4474    /***********************************************************************
             tskcmd.c       4475    *     
             tskcmd.c       4476    * [概要]  05 初期化指示
             tskcmd.c       4477    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4478    * [戻値]  −
             tskcmd.c       4479    *     
             tskcmd.c       4480    ***********************************************************************/
             tskcmd.c       4481    static void TplInita( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002AFA              __$TplInita:                     ; function: __$TplInita
                                                           ; frame size=24
    00002AFA 4EF0                   MOVMU.L     R14,@-R15
    00002AFC 7FFC                   ADD         #-4,R15
    00002AFE E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4482    { 
             tskcmd.c       4483      UB  bcid;
             tskcmd.c       4484      UB  inf;
             tskcmd.c       4485      UB  axsis;
             tskcmd.c       4486    
             tskcmd.c       4487      memset( &bufwk[0], CLR,  CMD_BUFSIZ );
    00002B00 6E43                   MOV         R4,R14
    00002B02 D47C                   MOV.L       L1385,R4   ; __$bufwk
    00002B04 D17C                   MOV.L       L1385+4,R1 ; _memset
    00002B06 410B                   JSR         @R1
    00002B08 E500                   MOV         #0,R5      ; H'00000000
    00002B0A E601                   MOV         #1,R6      ; H'00000001
    00002B0C E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4488      memset( &axsis   , CLR,  sizeof(axsis) );
    00002B0E D77A                   MOV.L       L1385+4,R7 ; _memset
    00002B10 470B                   JSR         @R7
    00002B12 64F3                   MOV         R15,R4
             tskcmd.c       4489    
             tskcmd.c       4490      Strcpy( (char*)&axsis , TpRecvArgs[1]  );
    00002B14 D179                   MOV.L       L1385+8,R1 ; H'00000004+__$TpRecvArgs
    00002B16 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002B18 D779                   MOV.L       L1385+12,R7; _Strcpy
    00002B1A 470B                   JSR         @R7
    00002B1C 64F3                   MOV         R15,R4
             tskcmd.c       4491      axsis = AsctoHex(axsis);
    00002B1E D27C                   MOV.L       L1385+28,R2; _AsctoHex
    00002B20 420B                   JSR         @R2
    00002B22 64F0                   MOV.B       @R15,R4    ; axsis
    00002B24 660C                   EXTU.B      R0,R6
    00002B26 604C                   EXTU.B      R4,R0
    00002B28 2F60                   MOV.B       R6,@R15    ; axsis
             tskcmd.c       4492      bcctrl[bcid].inf = axsis;
    00002B2A D17A                   MOV.L       L1385+32,R1; __$bcctrl
    00002B2C 4008                   SHLL2       R0
    00002B2E 4000                   SHLL        R0
    00002B30 6213                   MOV         R1,R2
    00002B32 7204                   ADD         #4,R2
    00002B34 0264                   MOV.B       R6,@(R0,R2); bcctrl[].inf
             tskcmd.c       4493      
             tskcmd.c       4494      bcid = mrcv->msgdata.bcid;
             tskcmd.c       4495      if( bcid == NO_DATA )
    00002B36 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00002B38 34E1801A               MOVU.B      @(26,R14),R4; (mrcv)->bcid
    00002B3C 622C                   EXTU.B      R2,R2
    00002B3E 3420                   CMP/EQ      R2,R4
    00002B40 8B02                   BF          L477
             tskcmd.c       4496      {
             tskcmd.c       4497          TpRspINITA( E_BUSY );
    00002B42 E401                   MOV         #1,R4      ; H'00000001
    00002B44 A004                   BRA         L478
    00002B46 4418                   SHLL8       R4
    00002B48              L477:
             tskcmd.c       4498          return;
             tskcmd.c       4499      }
             tskcmd.c       4500    
             tskcmd.c       4501      
             tskcmd.c       4502      if( axsis == 0 )
    00002B48 2668                   TST         R6,R6
    00002B4A 8B05                   BF          L480
             tskcmd.c       4503      {
             tskcmd.c       4504          TpRspINITA( E_PAR_OUTRNG );
    00002B4C E408                   MOV         #8,R4      ; H'00000008
    00002B4E 4418                   SHLL8       R4
    00002B50              L478:
    00002B50 B2B3                   BSR         __$TpRspINITA
    00002B52 0009                   NOP
    00002B54 A039                   BRA         L481
    00002B56 0009                   NOP
    00002B58              L480:
             tskcmd.c       4505          return;
             tskcmd.c       4506      }
             tskcmd.c       4507      
             tskcmd.c       4508    //axsis =0x1f;// ★デバック
             tskcmd.c       4509      
             tskcmd.c       4510      
             tskcmd.c       4511      if( (axsis & BIT1) )        bcctrl[bcid].devno = MT_Z0;
    00002B58 6543                   MOV         R4,R5
    00002B5A 4508                   SHLL2       R5
    00002B5C 4500                   SHLL        R5
    00002B5E 8769                   BLD         #1,R6
    00002B60 8B05                   BF          L483
    00002B62 6213                   MOV         R1,R2
    00002B64 7201                   ADD         #1,R2
    00002B66 E702                   MOV         #2,R7      ; H'00000002
    00002B68 6053                   MOV         R5,R0
    00002B6A A01F                   BRA         L484
    00002B6C 0274                   MOV.B       R7,@(R0,R2); bcctrl[].devno
    00002B6E              L483:
             tskcmd.c       4512      else if( (axsis & BIT2) )   bcctrl[bcid].devno = MT_P0;
    00002B6E 876A                   BLD         #2,R6
    00002B70 8B05                   BF          L486
    00002B72 6213                   MOV         R1,R2
    00002B74 7201                   ADD         #1,R2
    00002B76 E703                   MOV         #3,R7      ; H'00000003
    00002B78 6053                   MOV         R5,R0
    00002B7A A017                   BRA         L484
    00002B7C 0274                   MOV.B       R7,@(R0,R2); bcctrl[].devno
    00002B7E              L486:
             tskcmd.c       4513      else if( (axsis & BIT0) )   bcctrl[bcid].devno = MT_Y0;
    00002B7E 8768                   BLD         #0,R6
    00002B80 8B05                   BF          L488
    00002B82 6213                   MOV         R1,R2
    00002B84 7201                   ADD         #1,R2
    00002B86 E701                   MOV         #1,R7      ; H'00000001
    00002B88 6053                   MOV         R5,R0
    00002B8A A00F                   BRA         L484
    00002B8C 0274                   MOV.B       R7,@(R0,R2); bcctrl[].devno
    00002B8E              L488:
             tskcmd.c       4514      else if( (axsis & BIT4) )   bcctrl[bcid].devno = MT_Y1;
    00002B8E 876C                   BLD         #4,R6
    00002B90 8B05                   BF          L490
    00002B92 6213                   MOV         R1,R2
    00002B94 7201                   ADD         #1,R2
    00002B96 E705                   MOV         #5,R7      ; H'00000005
    00002B98 6053                   MOV         R5,R0
    00002B9A A007                   BRA         L484
    00002B9C 0274                   MOV.B       R7,@(R0,R2); bcctrl[].devno
    00002B9E              L490:
             tskcmd.c       4515      else if( (axsis & BIT3) )   bcctrl[bcid].devno = MT_F0;
    00002B9E 876B                   BLD         #3,R6
    00002BA0 8B04                   BF          L484
    00002BA2 6213                   MOV         R1,R2
    00002BA4 7201                   ADD         #1,R2
    00002BA6 E704                   MOV         #4,R7      ; H'00000004
    00002BA8 6053                   MOV         R5,R0
    00002BAA 0274                   MOV.B       R7,@(R0,R2); bcctrl[].devno
    00002BAC              L484:
             tskcmd.c       4516    
             tskcmd.c       4517      StaQgProcList( bcid,               // bcid
             tskcmd.c       4518                     ID_MSG_LIMIT,       // msgid
             tskcmd.c       4519                     bcctrl[bcid].devno, // devno
             tskcmd.c       4520                     1,                  // actstp
             tskcmd.c       4521                     ID_TPL_INITA,       // prid1
             tskcmd.c       4522                     axsis,              // inf
             tskcmd.c       4523                     mrcv->msgdata.inf2  // inf2
             tskcmd.c       4524      );
    00002BAC 32E1801D               MOVU.B      @(29,R14),R2; (mrcv)->inf2
    00002BB0 2F26                   MOV.L       R2,@-R15
    00002BB2 2F66                   MOV.L       R6,@-R15
    00002BB4 E205                   MOV         #5,R2      ; H'00000005
    00002BB6 2F26                   MOV.L       R2,@-R15
    00002BB8 7101                   ADD         #1,R1
    00002BBA 6053                   MOV         R5,R0
    00002BBC 061C                   MOV.B       @(R0,R1),R6; bcctrl[].devno
    00002BBE E701                   MOV         #1,R7      ; H'00000001
    00002BC0 B709                   BSR         __$StaQgProcList
    00002BC2 E50C                   MOV         #12,R5     ; H'0000000C
    00002BC4 7F0C                   ADD         #12,R15
             tskcmd.c       4525      
             tskcmd.c       4526      QgProcList_INITA( mrcv );
    00002BC6 B4E2                   BSR         __$QgProcList_INITA
    00002BC8 64E3                   MOV         R14,R4
    00002BCA              L481:
    00002BCA 7F04                   ADD         #4,R15
    00002BCC 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4527    }
    00002BCE 006B                   RTS/N
             tskcmd.c       4528    /***********************************************************************
             tskcmd.c       4529    *     
             tskcmd.c       4530    * [概要]  08 ユーザー情報全取得
             tskcmd.c       4531    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4532    * [戻値]  −
             tskcmd.c       4533    *     
             tskcmd.c       4534    ***********************************************************************/
             tskcmd.c       4535    static void TplUsral( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BD0              __$TplUsral:                     ; function: __$TplUsral
                                                           ; frame size=0
             tskcmd.c       4536    { 
             tskcmd.c       4537      
             tskcmd.c       4538    } 
    00002BD0 006B                   RTS/N
             tskcmd.c       4539    
             tskcmd.c       4540    /***********************************************************************
             tskcmd.c       4541    *     
             tskcmd.c       4542    * [概要]  11 ユーザー1情報
             tskcmd.c       4543    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4544    * [戻値]  −
             tskcmd.c       4545    *     
             tskcmd.c       4546    ***********************************************************************/
             tskcmd.c       4547    static void TplInf01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BD2              __$TplInf01:                     ; function: __$TplInf01
                                                           ; frame size=0
             tskcmd.c       4548    { 
             tskcmd.c       4549      
             tskcmd.c       4550    } 
    00002BD2 006B                   RTS/N
             tskcmd.c       4551      
             tskcmd.c       4552    /***********************************************************************
             tskcmd.c       4553    *     
             tskcmd.c       4554    * [概要]  12 ユーザー2情報
             tskcmd.c       4555    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4556    * [戻値]  −
             tskcmd.c       4557    *     
             tskcmd.c       4558    ***********************************************************************/
             tskcmd.c       4559    static void TplInf02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BD4              __$TplInf02:                     ; function: __$TplInf02
                                                           ; frame size=0
             tskcmd.c       4560    { 
             tskcmd.c       4561      
             tskcmd.c       4562    } 
    00002BD4 006B                   RTS/N
             tskcmd.c       4563      
             tskcmd.c       4564    /***********************************************************************
             tskcmd.c       4565    *     
             tskcmd.c       4566    * [概要]  13 ユーザー3情報
             tskcmd.c       4567    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4568    * [戻値]  −
             tskcmd.c       4569    *     
             tskcmd.c       4570    ***********************************************************************/
             tskcmd.c       4571    static void TplInf03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BD6              __$TplInf03:                     ; function: __$TplInf03
                                                           ; frame size=0
             tskcmd.c       4572    { 
             tskcmd.c       4573      
             tskcmd.c       4574    } 
    00002BD6 006B                   RTS/N
             tskcmd.c       4575      
             tskcmd.c       4576    /***********************************************************************
             tskcmd.c       4577    *     
             tskcmd.c       4578    * [概要]   14 ユーザー4情報
             tskcmd.c       4579    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4580    * [戻値]  −
             tskcmd.c       4581    *     
             tskcmd.c       4582    ***********************************************************************/
             tskcmd.c       4583    static void TplInf04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BD8              __$TplInf04:                     ; function: __$TplInf04
                                                           ; frame size=0
             tskcmd.c       4584    { 
             tskcmd.c       4585      
             tskcmd.c       4586    } 
    00002BD8 006B                   RTS/N
             tskcmd.c       4587      
             tskcmd.c       4588    /***********************************************************************
             tskcmd.c       4589    *     
             tskcmd.c       4590    * [概要]  15 ユーザー5情報
             tskcmd.c       4591    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4592    * [戻値]  −
             tskcmd.c       4593    *     
             tskcmd.c       4594    ***********************************************************************/
             tskcmd.c       4595    static void TplInf05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BDA              __$TplInf05:                     ; function: __$TplInf05
                                                           ; frame size=0
             tskcmd.c       4596    { 
             tskcmd.c       4597      
             tskcmd.c       4598    } 
    00002BDA 006B                   RTS/N
             tskcmd.c       4599      
             tskcmd.c       4600    /***********************************************************************
             tskcmd.c       4601    *     
             tskcmd.c       4602    * [概要]  16 ユーザー6情報
             tskcmd.c       4603    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4604    * [戻値]  −
             tskcmd.c       4605    *     
             tskcmd.c       4606    ***********************************************************************/
             tskcmd.c       4607    static void TplInf06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BDC              __$TplInf06:                     ; function: __$TplInf06
                                                           ; frame size=0
             tskcmd.c       4608    { 
             tskcmd.c       4609      
             tskcmd.c       4610    } 
    00002BDC 006B                   RTS/N
             tskcmd.c       4611      
             tskcmd.c       4612    /***********************************************************************
             tskcmd.c       4613    *     
             tskcmd.c       4614    * [概要]  17 ユーザー7情報
             tskcmd.c       4615    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4616    * [戻値]  −
             tskcmd.c       4617    *     
             tskcmd.c       4618    ***********************************************************************/
             tskcmd.c       4619    static void TplInf07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BDE              __$TplInf07:                     ; function: __$TplInf07
                                                           ; frame size=0
             tskcmd.c       4620    { 
             tskcmd.c       4621      
             tskcmd.c       4622    } 
    00002BDE 006B                   RTS/N
             tskcmd.c       4623      
             tskcmd.c       4624    /***********************************************************************
             tskcmd.c       4625    *     
             tskcmd.c       4626    * [概要]  18 ユーザー8情報
             tskcmd.c       4627    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4628    * [戻値]  −
             tskcmd.c       4629    *     
             tskcmd.c       4630    ***********************************************************************/
             tskcmd.c       4631    static void TplInf08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BE0              __$TplInf08:                     ; function: __$TplInf08
                                                           ; frame size=0
             tskcmd.c       4632    { 
             tskcmd.c       4633      
             tskcmd.c       4634    } 
    00002BE0 006B                   RTS/N
             tskcmd.c       4635      
             tskcmd.c       4636    /***********************************************************************
             tskcmd.c       4637    *     
             tskcmd.c       4638    * [概要]  19 ユーザー9情報
             tskcmd.c       4639    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4640    * [戻値]  −
             tskcmd.c       4641    *     
             tskcmd.c       4642    ***********************************************************************/
             tskcmd.c       4643    static void TplInf09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BE2              __$TplInf09:                     ; function: __$TplInf09
                                                           ; frame size=0
             tskcmd.c       4644    { 
             tskcmd.c       4645      
             tskcmd.c       4646    } 
    00002BE2 006B                   RTS/N
             tskcmd.c       4647      
             tskcmd.c       4648    /***********************************************************************
             tskcmd.c       4649    *     
             tskcmd.c       4650    * [概要]  1A ユーザー10情報
             tskcmd.c       4651    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4652    * [戻値]  −
             tskcmd.c       4653    *     
             tskcmd.c       4654    ***********************************************************************/
             tskcmd.c       4655    static void TplInf10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BE4              __$TplInf10:                     ; function: __$TplInf10
                                                           ; frame size=0
             tskcmd.c       4656    { 
             tskcmd.c       4657      
             tskcmd.c       4658    } 
    00002BE4 006B                   RTS/N
             tskcmd.c       4659      
             tskcmd.c       4660    /***********************************************************************
             tskcmd.c       4661    *     
             tskcmd.c       4662    * [概要]  21 ユーザー1登録
             tskcmd.c       4663    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4664    * [戻値]  −
             tskcmd.c       4665    *     
             tskcmd.c       4666    ***********************************************************************/
             tskcmd.c       4667    static void TplRec01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BE6              __$TplRec01:                     ; function: __$TplRec01
                                                           ; frame size=0
             tskcmd.c       4668    { 
             tskcmd.c       4669      
             tskcmd.c       4670    } 
    00002BE6 006B                   RTS/N
             tskcmd.c       4671      
             tskcmd.c       4672    /***********************************************************************
             tskcmd.c       4673    *     
             tskcmd.c       4674    * [概要]  22 ユーザー2登録
             tskcmd.c       4675    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4676    * [戻値]  −
             tskcmd.c       4677    *     
             tskcmd.c       4678    ***********************************************************************/
             tskcmd.c       4679    static void TplRec02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BE8              __$TplRec02:                     ; function: __$TplRec02
                                                           ; frame size=0
             tskcmd.c       4680    { 
             tskcmd.c       4681      
             tskcmd.c       4682    } 
    00002BE8 006B                   RTS/N
             tskcmd.c       4683      
             tskcmd.c       4684    /***********************************************************************
             tskcmd.c       4685    *     
             tskcmd.c       4686    * [概要]  23 ユーザー3登録
             tskcmd.c       4687    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4688    * [戻値]  −
             tskcmd.c       4689    *     
             tskcmd.c       4690    ***********************************************************************/
             tskcmd.c       4691    static void TplRec03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BEA              __$TplRec03:                     ; function: __$TplRec03
                                                           ; frame size=0
             tskcmd.c       4692    { 
             tskcmd.c       4693      
             tskcmd.c       4694    } 
    00002BEA 006B                   RTS/N
             tskcmd.c       4695      
             tskcmd.c       4696    /***********************************************************************
             tskcmd.c       4697    *     
             tskcmd.c       4698    * [概要]  24 ユーザー4登録
             tskcmd.c       4699    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4700    * [戻値]  −
             tskcmd.c       4701    *     
             tskcmd.c       4702    ***********************************************************************/
             tskcmd.c       4703    static void TplRec04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BEC              __$TplRec04:                     ; function: __$TplRec04
                                                           ; frame size=0
             tskcmd.c       4704    { 
             tskcmd.c       4705      
             tskcmd.c       4706    } 
    00002BEC 006B                   RTS/N
             tskcmd.c       4707      
             tskcmd.c       4708    /***********************************************************************
             tskcmd.c       4709    *     
             tskcmd.c       4710    * [概要]  25 ユーザー5登録
             tskcmd.c       4711    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4712    * [戻値]  −
             tskcmd.c       4713    *     
             tskcmd.c       4714    ***********************************************************************/
             tskcmd.c       4715    static void TplRec05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BEE              __$TplRec05:                     ; function: __$TplRec05
                                                           ; frame size=0
             tskcmd.c       4716    { 
             tskcmd.c       4717      
             tskcmd.c       4718    } 
    00002BEE 006B                   RTS/N
             tskcmd.c       4719      
             tskcmd.c       4720    /***********************************************************************
             tskcmd.c       4721    *     
             tskcmd.c       4722    * [概要]  26 ユーザー6登録
             tskcmd.c       4723    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4724    * [戻値]  −
             tskcmd.c       4725    *     
             tskcmd.c       4726    ***********************************************************************/
             tskcmd.c       4727    static void TplRec06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BF0              __$TplRec06:                     ; function: __$TplRec06
                                                           ; frame size=0
             tskcmd.c       4728    { 
             tskcmd.c       4729      
             tskcmd.c       4730    } 
    00002BF0 006B                   RTS/N
             tskcmd.c       4731      
             tskcmd.c       4732    /***********************************************************************
             tskcmd.c       4733    *     
             tskcmd.c       4734    * [概要]  27 ユーザー7登録
             tskcmd.c       4735    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4736    * [戻値]  −
             tskcmd.c       4737    *     
             tskcmd.c       4738    ***********************************************************************/
             tskcmd.c       4739    static void TplRec07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BF2              __$TplRec07:                     ; function: __$TplRec07
                                                           ; frame size=0
             tskcmd.c       4740    { 
             tskcmd.c       4741      
             tskcmd.c       4742    } 
    00002BF2 006B                   RTS/N
             tskcmd.c       4743      
             tskcmd.c       4744    /***********************************************************************
             tskcmd.c       4745    *     
             tskcmd.c       4746    * [概要]  28 ユーザー8登録
             tskcmd.c       4747    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4748    * [戻値]  −
             tskcmd.c       4749    *     
             tskcmd.c       4750    ***********************************************************************/
             tskcmd.c       4751    static void TplRec08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BF4              __$TplRec08:                     ; function: __$TplRec08
                                                           ; frame size=0
             tskcmd.c       4752    { 
             tskcmd.c       4753      
             tskcmd.c       4754    } 
    00002BF4 006B                   RTS/N
             tskcmd.c       4755      
             tskcmd.c       4756    /***********************************************************************
             tskcmd.c       4757    *     
             tskcmd.c       4758    * [概要]  29 ユーザー9登録
             tskcmd.c       4759    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4760    * [戻値]  −
             tskcmd.c       4761    *     
             tskcmd.c       4762    ***********************************************************************/
             tskcmd.c       4763    static void TplRec09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BF6              __$TplRec09:                     ; function: __$TplRec09
                                                           ; frame size=0
             tskcmd.c       4764    { 
             tskcmd.c       4765      
             tskcmd.c       4766    } 
    00002BF6 006B                   RTS/N
             tskcmd.c       4767      
             tskcmd.c       4768    /***********************************************************************
             tskcmd.c       4769    *     
             tskcmd.c       4770    * [概要]  2A ユーザー10登録
             tskcmd.c       4771    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4772    * [戻値]  −
             tskcmd.c       4773    *     
             tskcmd.c       4774    ***********************************************************************/
             tskcmd.c       4775    static void TplRec10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BF8              __$TplRec10:                     ; function: __$TplRec10
                                                           ; frame size=0
             tskcmd.c       4776    { 
             tskcmd.c       4777      
             tskcmd.c       4778    } 
    00002BF8 006B                   RTS/N
             tskcmd.c       4779      
             tskcmd.c       4780    /***********************************************************************
             tskcmd.c       4781    *     
             tskcmd.c       4782    * [概要]  31 ユーザー1変更
             tskcmd.c       4783    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4784    * [戻値]  −
             tskcmd.c       4785    *     
             tskcmd.c       4786    ***********************************************************************/
             tskcmd.c       4787    static void TplChg01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BFA              __$TplChg01:                     ; function: __$TplChg01
                                                           ; frame size=0
             tskcmd.c       4788    { 
             tskcmd.c       4789      
             tskcmd.c       4790    } 
    00002BFA 006B                   RTS/N
             tskcmd.c       4791      
             tskcmd.c       4792    /***********************************************************************
             tskcmd.c       4793    *     
             tskcmd.c       4794    * [概要]  32 ユーザー2変更
             tskcmd.c       4795    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4796    * [戻値]  −
             tskcmd.c       4797    *     
             tskcmd.c       4798    ***********************************************************************/
             tskcmd.c       4799    static void TplChg02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BFC              __$TplChg02:                     ; function: __$TplChg02
                                                           ; frame size=0
             tskcmd.c       4800    { 
             tskcmd.c       4801      
             tskcmd.c       4802    } 
    00002BFC 006B                   RTS/N
             tskcmd.c       4803      
             tskcmd.c       4804    /***********************************************************************
             tskcmd.c       4805    *     
             tskcmd.c       4806    * [概要]  33 ユーザー3変更
             tskcmd.c       4807    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4808    * [戻値]  −
             tskcmd.c       4809    *     
             tskcmd.c       4810    ***********************************************************************/
             tskcmd.c       4811    static void TplChg03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BFE              __$TplChg03:                     ; function: __$TplChg03
                                                           ; frame size=0
             tskcmd.c       4812    { 
             tskcmd.c       4813      
             tskcmd.c       4814    } 
    00002BFE 006B                   RTS/N
             tskcmd.c       4815      
             tskcmd.c       4816    /***********************************************************************
             tskcmd.c       4817    *     
             tskcmd.c       4818    * [概要]  34 ユーザー4変更
             tskcmd.c       4819    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4820    * [戻値]  −
             tskcmd.c       4821    *     
             tskcmd.c       4822    ***********************************************************************/
             tskcmd.c       4823    static void TplChg04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C00              __$TplChg04:                     ; function: __$TplChg04
                                                           ; frame size=0
             tskcmd.c       4824    { 
             tskcmd.c       4825      
             tskcmd.c       4826    } 
    00002C00 006B                   RTS/N
             tskcmd.c       4827      
             tskcmd.c       4828    /***********************************************************************
             tskcmd.c       4829    *     
             tskcmd.c       4830    * [概要]  35 ユーザー5変更
             tskcmd.c       4831    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4832    * [戻値]  −
             tskcmd.c       4833    *     
             tskcmd.c       4834    ***********************************************************************/
             tskcmd.c       4835    static void TplChg05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C02              __$TplChg05:                     ; function: __$TplChg05
                                                           ; frame size=0
             tskcmd.c       4836    { 
             tskcmd.c       4837      
             tskcmd.c       4838    } 
    00002C02 006B                   RTS/N
             tskcmd.c       4839      
             tskcmd.c       4840    /***********************************************************************
             tskcmd.c       4841    *     
             tskcmd.c       4842    * [概要]  36 ユーザー6変更
             tskcmd.c       4843    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4844    * [戻値]  −
             tskcmd.c       4845    *     
             tskcmd.c       4846    ***********************************************************************/
             tskcmd.c       4847    static void TplChg06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C04              __$TplChg06:                     ; function: __$TplChg06
                                                           ; frame size=0
             tskcmd.c       4848    { 
             tskcmd.c       4849      
             tskcmd.c       4850    } 
    00002C04 006B                   RTS/N
             tskcmd.c       4851      
             tskcmd.c       4852    /***********************************************************************
             tskcmd.c       4853    *     
             tskcmd.c       4854    * [概要]  37 ユーザー7変更
             tskcmd.c       4855    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4856    * [戻値]  −
             tskcmd.c       4857    *     
             tskcmd.c       4858    ***********************************************************************/
             tskcmd.c       4859    static void TplChg07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C06              __$TplChg07:                     ; function: __$TplChg07
                                                           ; frame size=0
             tskcmd.c       4860    { 
             tskcmd.c       4861      
             tskcmd.c       4862    } 
    00002C06 006B                   RTS/N
             tskcmd.c       4863      
             tskcmd.c       4864    /***********************************************************************
             tskcmd.c       4865    *     
             tskcmd.c       4866    * [概要]  38 ユーザー8変更
             tskcmd.c       4867    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4868    * [戻値]  −
             tskcmd.c       4869    *     
             tskcmd.c       4870    ***********************************************************************/
             tskcmd.c       4871    static void TplChg08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C08              __$TplChg08:                     ; function: __$TplChg08
                                                           ; frame size=0
             tskcmd.c       4872    { 
             tskcmd.c       4873      
             tskcmd.c       4874    } 
    00002C08 006B                   RTS/N
             tskcmd.c       4875      
             tskcmd.c       4876    /***********************************************************************
             tskcmd.c       4877    *     
             tskcmd.c       4878    * [概要]  39 ユーザー9変更
             tskcmd.c       4879    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4880    * [戻値]  −
             tskcmd.c       4881    *     
             tskcmd.c       4882    ***********************************************************************/
             tskcmd.c       4883    static void TplChg09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C0A              __$TplChg09:                     ; function: __$TplChg09
                                                           ; frame size=0
             tskcmd.c       4884    { 
             tskcmd.c       4885      
             tskcmd.c       4886    } 
    00002C0A 006B                   RTS/N
             tskcmd.c       4887      
             tskcmd.c       4888    /***********************************************************************
             tskcmd.c       4889    *     
             tskcmd.c       4890    * [概要]  3A ユーザー10変更
             tskcmd.c       4891    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4892    * [戻値]  −
             tskcmd.c       4893    *     
             tskcmd.c       4894    ***********************************************************************/
             tskcmd.c       4895    static void TplChg10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C0C              __$TplChg10:                     ; function: __$TplChg10
                                                           ; frame size=0
             tskcmd.c       4896    { 
             tskcmd.c       4897      
             tskcmd.c       4898    } 
    00002C0C 006B                   RTS/N
             tskcmd.c       4899      
             tskcmd.c       4900    /***********************************************************************
             tskcmd.c       4901    *     
             tskcmd.c       4902    * [概要]  41 ユーザー1削除
             tskcmd.c       4903    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4904    * [戻値]  −
             tskcmd.c       4905    *     
             tskcmd.c       4906    ***********************************************************************/
             tskcmd.c       4907    static void TplDel01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C0E              __$TplDel01:                     ; function: __$TplDel01
                                                           ; frame size=0
             tskcmd.c       4908    { 
             tskcmd.c       4909      
             tskcmd.c       4910    } 
    00002C0E 006B                   RTS/N
             tskcmd.c       4911      
             tskcmd.c       4912    /***********************************************************************
             tskcmd.c       4913    *     
             tskcmd.c       4914    * [概要]  42 ユーザー2削除
             tskcmd.c       4915    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4916    * [戻値]  −
             tskcmd.c       4917    *     
             tskcmd.c       4918    ***********************************************************************/
             tskcmd.c       4919    static void TplDel02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C10              __$TplDel02:                     ; function: __$TplDel02
                                                           ; frame size=0
             tskcmd.c       4920    { 
             tskcmd.c       4921      
             tskcmd.c       4922    } 
    00002C10 006B                   RTS/N
             tskcmd.c       4923      
             tskcmd.c       4924    /***********************************************************************
             tskcmd.c       4925    *     
             tskcmd.c       4926    * [概要]  43 ユーザー3削除
             tskcmd.c       4927    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4928    * [戻値]  −
             tskcmd.c       4929    *     
             tskcmd.c       4930    ***********************************************************************/
             tskcmd.c       4931    static void TplDel03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C12              __$TplDel03:                     ; function: __$TplDel03
                                                           ; frame size=0
             tskcmd.c       4932    { 
             tskcmd.c       4933      
             tskcmd.c       4934    } 
    00002C12 006B                   RTS/N
             tskcmd.c       4935      
             tskcmd.c       4936    /***********************************************************************
             tskcmd.c       4937    *     
             tskcmd.c       4938    * [概要]  44 ユーザー4削除
             tskcmd.c       4939    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4940    * [戻値]  −
             tskcmd.c       4941    *     
             tskcmd.c       4942    ***********************************************************************/
             tskcmd.c       4943    static void TplDel04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C14              __$TplDel04:                     ; function: __$TplDel04
                                                           ; frame size=0
             tskcmd.c       4944    { 
             tskcmd.c       4945      
             tskcmd.c       4946    } 
    00002C14 006B                   RTS/N
             tskcmd.c       4947      
             tskcmd.c       4948    /***********************************************************************
             tskcmd.c       4949    *     
             tskcmd.c       4950    * [概要]  45 ユーザー5削除
             tskcmd.c       4951    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4952    * [戻値]  −
             tskcmd.c       4953    *     
             tskcmd.c       4954    ***********************************************************************/
             tskcmd.c       4955    static void TplDel05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C16              __$TplDel05:                     ; function: __$TplDel05
                                                           ; frame size=0
             tskcmd.c       4956    { 
             tskcmd.c       4957      
             tskcmd.c       4958    } 
    00002C16 006B                   RTS/N
             tskcmd.c       4959      
             tskcmd.c       4960    /***********************************************************************
             tskcmd.c       4961    *     
             tskcmd.c       4962    * [概要]  46 ユーザー6削除
             tskcmd.c       4963    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4964    * [戻値]  −
             tskcmd.c       4965    *     
             tskcmd.c       4966    ***********************************************************************/
             tskcmd.c       4967    static void TplDel06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C18              __$TplDel06:                     ; function: __$TplDel06
                                                           ; frame size=0
             tskcmd.c       4968    { 
             tskcmd.c       4969      
             tskcmd.c       4970    } 
    00002C18 006B                   RTS/N
             tskcmd.c       4971      
             tskcmd.c       4972    /***********************************************************************
             tskcmd.c       4973    *     
             tskcmd.c       4974    * [概要]  47 ユーザー7削除
             tskcmd.c       4975    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4976    * [戻値]  −
             tskcmd.c       4977    *     
             tskcmd.c       4978    ***********************************************************************/
             tskcmd.c       4979    static void TplDel07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C1A              __$TplDel07:                     ; function: __$TplDel07
                                                           ; frame size=0
             tskcmd.c       4980    { 
             tskcmd.c       4981      
             tskcmd.c       4982    } 
    00002C1A 006B                   RTS/N
             tskcmd.c       4983      
             tskcmd.c       4984    /***********************************************************************
             tskcmd.c       4985    *     
             tskcmd.c       4986    * [概要]  48 ユーザー8削除
             tskcmd.c       4987    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4988    * [戻値]  −
             tskcmd.c       4989    *     
             tskcmd.c       4990    ***********************************************************************/
             tskcmd.c       4991    static void TplDel08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C1C              __$TplDel08:                     ; function: __$TplDel08
                                                           ; frame size=0
             tskcmd.c       4992    { 
             tskcmd.c       4993      
             tskcmd.c       4994    } 
    00002C1C 006B                   RTS/N
             tskcmd.c       4995      
             tskcmd.c       4996    /***********************************************************************
             tskcmd.c       4997    *     
             tskcmd.c       4998    * [概要]  49 ユーザー9削除
             tskcmd.c       4999    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5000    * [戻値]  −
             tskcmd.c       5001    *     
             tskcmd.c       5002    ***********************************************************************/
             tskcmd.c       5003    static void TplDel09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C1E              __$TplDel09:                     ; function: __$TplDel09
                                                           ; frame size=0
             tskcmd.c       5004    { 
             tskcmd.c       5005      
             tskcmd.c       5006    } 
    00002C1E 006B                   RTS/N
             tskcmd.c       5007      
             tskcmd.c       5008    /***********************************************************************
             tskcmd.c       5009    *     
             tskcmd.c       5010    * [概要]  4A ユーザー10削除
             tskcmd.c       5011    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5012    * [戻値]  −
             tskcmd.c       5013    *     
             tskcmd.c       5014    ***********************************************************************/
             tskcmd.c       5015    static void TplDel10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C20              __$TplDel10:                     ; function: __$TplDel10
                                                           ; frame size=0
             tskcmd.c       5016    { 
             tskcmd.c       5017      
             tskcmd.c       5018    } 
    00002C20 006B                   RTS/N
             tskcmd.c       5019      
             tskcmd.c       5020    /***********************************************************************
             tskcmd.c       5021    *     
             tskcmd.c       5022    * [概要]  50 FW状態（ポーリング）
             tskcmd.c       5023    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5024    * [戻値]  −
             tskcmd.c       5025    *     
             tskcmd.c       5026    ***********************************************************************/
             tskcmd.c       5027    static void TplFwpol( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C22              __$TplFwpol:                     ; function: __$TplFwpol
                                                           ; frame size=0
             tskcmd.c       5028    {
             tskcmd.c       5029      TpRspFWPOL();
    00002C22 A25C                   BRA         __$TpRspFWPOL
    00002C24 0009                   NOP
             tskcmd.c       5030    }
             tskcmd.c       5031    
             tskcmd.c       5032    /***********************************************************************
             tskcmd.c       5033    *     
             tskcmd.c       5034    * [概要]  51 プロトコル実行
             tskcmd.c       5035    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5036    * [戻値]  −
             tskcmd.c       5037    * [備考]
             tskcmd.c       5038    *         
             tskcmd.c       5039    *         tskid     ID_TSK_CMD
             tskcmd.c       5040    *         mpfid     ID_MPF_EEP
             tskcmd.c       5041    *         mbxid     ID_MBX_EEP
             tskcmd.c       5042    *         prid1
             tskcmd.c       5043    *         bcid
             tskcmd.c       5044    *         msgid     ID_MSG_EEPREAD
             tskcmd.c       5045    *         inf 
             tskcmd.c       5046    *         inf2
             tskcmd.c       5047    *         data
             tskcmd.c       5048    *         siz
             tskcmd.c       5049    * 
             tskcmd.c       5050    ***********************************************************************/
             tskcmd.c       5051    static void TplPrtcl( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C26              __$TplPrtcl:                     ; function: __$TplPrtcl
                                                           ; frame size=44
    00002C26 4BF0                   MOVMU.L     R11,@-R15
             tskcmd.c       5052    { 
             tskcmd.c       5053      UB  procno;
             tskcmd.c       5054    
             tskcmd.c       5055      memset( &bufwk[0], CLR,  CMD_BUFSIZ );
    00002C28 6E63                   MOV         R6,R14
    00002C2A E63C                   MOV         #60,R6     ; H'0000003C
    00002C2C 6C43                   MOV         R4,R12
    00002C2E D431                   MOV.L       L1385,R4   ; __$bufwk
    00002C30 D131                   MOV.L       L1385+4,R1 ; _memset
    00002C32 410B                   JSR         @R1
    00002C34 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       5056    
             tskcmd.c       5057      psel.pno = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00002C36 54E1                   MOV.L       @(4,R14),R4; args[]
    00002C38 E701                   MOV         #1,R7      ; H'00000001
    00002C3A E50A                   MOV         #10,R5     ; H'0000000A
    00002C3C DD36                   MOV.L       L1385+36,R13; _Atoi
    00002C3E 4D0B                   JSR         @R13
    00002C40 6673                   MOV         R7,R6
    00002C42 DB36                   MOV.L       L1385+40,R11; __$psel
    00002C44 2B00                   MOV.B       R0,@R11    ; psel.pno
    00002C46 E701                   MOV         #1,R7      ; H'00000001
    00002C48 E50A                   MOV         #10,R5     ; H'0000000A
    00002C4A 6673                   MOV         R7,R6
             tskcmd.c       5058      psel.smp = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    00002C4C 4D0B                   JSR         @R13
    00002C4E 54E2                   MOV.L       @(8,R14),R4; args[]
    00002C50 80B1                   MOV.B       R0,@(1,R11); psel.smp
    00002C52 E701                   MOV         #1,R7      ; H'00000001
    00002C54 E50A                   MOV         #10,R5     ; H'0000000A
    00002C56 6673                   MOV         R7,R6
             tskcmd.c       5059      psel.val = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    00002C58 4D0B                   JSR         @R13
    00002C5A 54E3                   MOV.L       @(12,R14),R4; args[]
             tskcmd.c       5060      
             tskcmd.c       5061      mrcv->msgdata.prid1 = ID_TPL_PRTCL;
    00002C5C ED51                   MOV         #81,R13    ; H'00000051
    00002C5E 80B2                   MOV.B       R0,@(2,R11); psel.val
    00002C60 3CD10018               MOV.B       R13,@(24:12,R12); (mrcv)->prid1
             tskcmd.c       5062      mrcv->msgdata.inf2   = psel.pno;
    00002C64 6EB0                   MOV.B       @R11,R14   ; psel.pno
    00002C66 3CE1001D               MOV.B       R14,@(29:12,R12); (mrcv)->inf2
    00002C6A D22D                   MOV.L       L1385+44,R2; _DeviceStatusGet
    00002C6C 424B                   JSR/N       @R2
    00002C6E 2008                   TST         R0,R0
    00002C70 8B1A                   BF          L536
             tskcmd.c       5063      
             tskcmd.c       5064      if( DeviceStatusGet() == E_IDLING )
             tskcmd.c       5065      {
             tskcmd.c       5066          // EEPROM データ取得指示
             tskcmd.c       5067          mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       5068                     ID_MPF_EEP,         // mpfid
             tskcmd.c       5069                     ID_MBX_EEP,         // mbxid
             tskcmd.c       5070                     mrcv->msgdata.prid1,// prid1  タッチパネル指示
             tskcmd.c       5071                     mrcv->msgdata.bcid, // bcid
             tskcmd.c       5072                     ID_MSG_EEPREAD,     // msgid
             tskcmd.c       5073                     mrcv->msgdata.inf,  // sts
             tskcmd.c       5074                     mrcv->msgdata.inf2, // sts2   プロトコル番号
             tskcmd.c       5075                     &bufwk[0],          // data   null
             tskcmd.c       5076                     CMD_BUFSIZ          // siz
             tskcmd.c       5077                   );
    00002C72 E13C                   MOV         #60,R1     ; H'0000003C
    00002C74 2F16                   MOV.L       R1,@-R15
    00002C76 D11F                   MOV.L       L1385,R1   ; __$bufwk
    00002C78 2F16                   MOV.L       R1,@-R15
    00002C7A 34C1801D               MOVU.B      @(29,R12),R4; (mrcv)->inf2
    00002C7E 2F46                   MOV.L       R4,@-R15
    00002C80 35C1801C               MOVU.B      @(28,R12),R5; (mrcv)->inf
    00002C84 2F56                   MOV.L       R5,@-R15
    00002C86 E616                   MOV         #22,R6     ; H'00000016
    00002C88 2F66                   MOV.L       R6,@-R15
    00002C8A 37C1801A               MOVU.B      @(26,R12),R7; (mrcv)->bcid
    00002C8E 2F76                   MOV.L       R7,@-R15
    00002C90 E606                   MOV         #6,R6      ; H'00000006
    00002C92 37C14018               MOV.B       @(24:12,R12),R7; (mrcv)->prid1
    00002C96 E505                   MOV         #5,R5      ; H'00000005
    00002C98 DB1C                   MOV.L       L1385+24,R11; _mbx_send
    00002C9A 4B0B                   JSR         @R11
    00002C9C 6453                   MOV         R5,R4
    00002C9E 7F18                   ADD         #24,R15
             tskcmd.c       5078    
             tskcmd.c       5079          // プロトコル応答
             tskcmd.c       5080          TpRspPRCTL( E_SUCCESS );
    00002CA0 E400                   MOV         #0,R4      ; H'00000000
    00002CA2 4BF4                   MOVMU.L     @R15+,R11
    00002CA4 A212                   BRA         __$TpRspPRCTL
    00002CA6 0009                   NOP
    00002CA8              L536:
    00002CA8 4BF4                   MOVMU.L     @R15+,R11
    00002CAA 006B                   RTS/N
             tskcmd.c       5081      }
             tskcmd.c       5082    }
             tskcmd.c       5083    
             tskcmd.c       5084    /***********************************************************************
             tskcmd.c       5085    *     
             tskcmd.c       5086    * [概要]  52 リスタート実行
             tskcmd.c       5087    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5088    * [戻値]  −
             tskcmd.c       5089    *     
             tskcmd.c       5090    ***********************************************************************/
             tskcmd.c       5091    static void TplResta( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002CAC              __$TplResta:                     ; function: __$TplResta
                                                           ; frame size=0
             tskcmd.c       5092    { 
             tskcmd.c       5093      
             tskcmd.c       5094    } 
    00002CAC 006B                   RTS/N
             tskcmd.c       5095      
             tskcmd.c       5096    /***********************************************************************
             tskcmd.c       5097    *     
             tskcmd.c       5098    * [概要]  53 一時停止
             tskcmd.c       5099    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5100    * [戻値]  −
             tskcmd.c       5101    *     
             tskcmd.c       5102    ***********************************************************************/
             tskcmd.c       5103    static void TplPause( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002CAE              __$TplPause:                     ; function: __$TplPause
                                                           ; frame size=4
    00002CAE 4F22                   STS.L       PR,@-R15
             tskcmd.c       5104    { 
             tskcmd.c       5105      SetPauseStop( PAUS_STS );
    00002CB0 D31C                   MOV.L       L1385+48,R3; __$SetPauseStop
    00002CB2 430B                   JSR         @R3
    00002CB4 E402                   MOV         #2,R4      ; H'00000002
             tskcmd.c       5106      TplRpMakeSend( PARAM1, OK );
    00002CB6 E500                   MOV         #0,R5      ; H'00000000
    00002CB8 B225                   BSR         _TplRpMakeSend
    00002CBA E401                   MOV         #1,R4      ; H'00000001
    00002CBC E553                   MOV         #83,R5     ; H'00000053
             tskcmd.c       5107      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_PAUSE );
    00002CBE D41A                   MOV.L       L1385+52,R4; H'0000009C+__$tp
    00002CC0 A376                   BRA         __$TplRidDataSend
    00002CC2 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5108    } 
             tskcmd.c       5109    /***********************************************************************
             tskcmd.c       5110    *     
             tskcmd.c       5111    * [概要]  54 再開
             tskcmd.c       5112    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5113    * [戻値]  −
             tskcmd.c       5114    *     
             tskcmd.c       5115    ***********************************************************************/
             tskcmd.c       5116    static void TplResum( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002CC4              __$TplResum:                     ; function: __$TplResum
                                                           ; frame size=4
    00002CC4 4F22                   STS.L       PR,@-R15
             tskcmd.c       5117    { 
             tskcmd.c       5118      SetPauseStop( IDLE_STS );
    00002CC6 D317                   MOV.L       L1385+48,R3; __$SetPauseStop
    00002CC8 430B                   JSR         @R3
    00002CCA E400                   MOV         #0,R4      ; H'00000000
             tskcmd.c       5119      TplRpMakeSend( PARAM1, OK );
    00002CCC E500                   MOV         #0,R5      ; H'00000000
    00002CCE B21A                   BSR         _TplRpMakeSend
    00002CD0 E401                   MOV         #1,R4      ; H'00000001
    00002CD2 E554                   MOV         #84,R5     ; H'00000054
             tskcmd.c       5120      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_RESUM );
    00002CD4 D414                   MOV.L       L1385+52,R4; H'0000009C+__$tp
    00002CD6 A36B                   BRA         __$TplRidDataSend
    00002CD8 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5121    } 
             tskcmd.c       5122    /***********************************************************************
             tskcmd.c       5123    *     
             tskcmd.c       5124    * [概要]  55 中断
             tskcmd.c       5125    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5126    * [戻値]  −
             tskcmd.c       5127    *     
             tskcmd.c       5128    ***********************************************************************/
             tskcmd.c       5129    static void TplAbort( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002CDA              __$TplAbort:                     ; function: __$TplAbort
                                                           ; frame size=4
    00002CDA 4F22                   STS.L       PR,@-R15
             tskcmd.c       5130    { 
             tskcmd.c       5131      SetPauseStop( STOP_STS );
    00002CDC D311                   MOV.L       L1385+48,R3; __$SetPauseStop
    00002CDE 430B                   JSR         @R3
    00002CE0 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5132      TplRpMakeSend( PARAM1, OK );
    00002CE2 E500                   MOV         #0,R5      ; H'00000000
    00002CE4 B20F                   BSR         _TplRpMakeSend
    00002CE6 E401                   MOV         #1,R4      ; H'00000001
    00002CE8 E555                   MOV         #85,R5     ; H'00000055
             tskcmd.c       5133      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_ABORT );
    00002CEA D40F                   MOV.L       L1385+52,R4; H'0000009C+__$tp
    00002CEC A360                   BRA         __$TplRidDataSend
    00002CEE 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5134    }
             tskcmd.c       5135    /***********************************************************************
             tskcmd.c       5136    *     
             tskcmd.c       5137    * [概要]   58 オプションバーコード実行
             tskcmd.c       5138    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5139    * [戻値]  −
             tskcmd.c       5140    *     
             tskcmd.c       5141    ***********************************************************************/
             tskcmd.c       5142    static void TplOptcd( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002CF0              __$TplOptcd:                     ; function: __$TplOptcd
                                                           ; frame size=0
             tskcmd.c       5143    { 
             tskcmd.c       5144      
             tskcmd.c       5145    } 
    00002CF0 006B                   RTS/N
             tskcmd.c       5146      
             tskcmd.c       5147    /***********************************************************************
             tskcmd.c       5148    *     
             tskcmd.c       5149    * [概要]  59 サンプルチューブQRコード
             tskcmd.c       5150    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5151    * [戻値]  −
             tskcmd.c       5152    *     
             tskcmd.c       5153    ***********************************************************************/
             tskcmd.c       5154    static void TplSmbar( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002CF2              __$TplSmbar:                     ; function: __$TplSmbar
                                                           ; frame size=0
             tskcmd.c       5155    { 
             tskcmd.c       5156      
             tskcmd.c       5157    } 
    00002CF2 006B                   RTS/N
    00002CF4              L1385:
    00002CF4 <00000000>             .DATA.L     __$bufwk
    00002CF8 <00000000>             .DATA.L     _memset
    00002CFC <00000004>             .DATA.L     H'00000004+__$TpRecvArgs
    00002D00 <00000000>             .DATA.L     _Strcpy
    00002D04 <00000008>             .DATA.L     H'00000008+__$TpRecvArgs
    00002D08 <00000000>             .DATA.L     _memcpy
    00002D0C <00000000>             .DATA.L     _mbx_send
    00002D10 <00000000>             .DATA.L     _AsctoHex
    00002D14 <00000000>             .DATA.L     __$bcctrl
    00002D18 <00000000>             .DATA.L     _Atoi
    00002D1C <00000000>             .DATA.L     __$psel
    00002D20 <00000000>             .DATA.L     _DeviceStatusGet
    00002D24 <00000000>             .DATA.L     __$SetPauseStop
    00002D28 <0000009C>             .DATA.L     H'0000009C+__$tp
             tskcmd.c       5158      
             tskcmd.c       5159    /***********************************************************************
             tskcmd.c       5160    *     
             tskcmd.c       5161    * [概要]  5A サンプルチューブ有無確認（単）
             tskcmd.c       5162    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5163    * [戻値]  −
             tskcmd.c       5164    *     
             tskcmd.c       5165    ***********************************************************************/
             tskcmd.c       5166    static void TplSmsgl( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D2C              __$TplSmsgl:                     ; function: __$TplSmsgl
                                                           ; frame size=12
    00002D2C 4EF0                   MOVMU.L     R14,@-R15
    00002D2E 7FFC                   ADD         #-4,R15
             tskcmd.c       5167    { 
             tskcmd.c       5168      UB  result = NG;
             tskcmd.c       5169      UB  param1;
             tskcmd.c       5170    
             tskcmd.c       5171      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      param1 = AsctoHex(param1);
    00002D30 D192                   MOV.L       L1386,R1   ; H'00000004+__$TpRecvArgs
    00002D32 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002D34 D692                   MOV.L       L1386+4,R6 ; _Strcpy
    00002D36 460B                   JSR         @R6
    00002D38 64F3                   MOV         R15,R4
    00002D3A 64F0                   MOV.B       @R15,R4    ; param1
    00002D3C D791                   MOV.L       L1386+8,R7 ; _AsctoHex
    00002D3E 470B                   JSR         @R7
    00002D40 EE01                   MOV         #1,R14     ; H'00000001
    00002D42 620C                   EXTU.B      R0,R2
             tskcmd.c       5172    
             tskcmd.c       5173      if(( param1 >= 1 )&&( param1 <= 12 ))
    00002D44 32E3                   CMP/GE      R14,R2
    00002D46 8F04                   BF/S        L545
    00002D48 2F20                   MOV.B       R2,@R15    ; param1
    00002D4A E60C                   MOV         #12,R6     ; H'0000000C
    00002D4C 3267                   CMP/GT      R6,R2
    00002D4E 8900                   BT          L545
             tskcmd.c       5174      {
             tskcmd.c       5175          result = OK;//あり
    00002D50 EE00                   MOV         #0,R14     ; H'00000000
    00002D52              L545:
    00002D52 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5176      }
             tskcmd.c       5177      
             tskcmd.c       5178      TplRpMakeSend( PARAM1, result );
    00002D54 B1D7                   BSR         _TplRpMakeSend
    00002D56 65E3                   MOV         R14,R5
             tskcmd.c       5179      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_SMSGL );
    00002D58 D48B                   MOV.L       L1386+12,R4; H'0000009C+__$tp
    00002D5A B329                   BSR         __$TplRidDataSend
    00002D5C E558                   MOV         #88,R5     ; H'00000058
    00002D5E 7F04                   ADD         #4,R15
    00002D60 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5180    }
    00002D62 006B                   RTS/N
             tskcmd.c       5181    
             tskcmd.c       5182    /***********************************************************************
             tskcmd.c       5183    *     
             tskcmd.c       5184    * [概要]  5B サンプルチューブ有無確認（全）
             tskcmd.c       5185    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5186    * [戻値]  −
             tskcmd.c       5187    *     
             tskcmd.c       5188    ***********************************************************************/
             tskcmd.c       5189    static void TplSmall( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D64              __$TplSmall:                     ; function: __$TplSmall
                                                           ; frame size=16
    00002D64 4EF0                   MOVMU.L     R14,@-R15
    00002D66 7FF8                   ADD         #-8,R15
             tskcmd.c       5190    { 
             tskcmd.c       5191      UB  result = NG;
             tskcmd.c       5192      UB  allsts[INDAT_CNTRL_MAX];
             tskcmd.c       5193    
             tskcmd.c       5194      // 全入力ポート状態取得
             tskcmd.c       5195      pio_ALLIN( &allsts[0] );
    00002D68 64F3                   MOV         R15,R4
    00002D6A D188                   MOV.L       L1386+16,R1; _pio_ALLIN
    00002D6C 410B                   JSR         @R1
    00002D6E EE01                   MOV         #1,R14     ; H'00000001
             tskcmd.c       5196    
             tskcmd.c       5197      if(( allsts[0] == 0xff )&&( allsts[1] == 0xc0 ))
    00002D70 65F0                   MOV.B       @R15,R5    ; allsts[]
    00002D72 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00002D74 3560                   CMP/EQ      R6,R5
    00002D76 8B04                   BF          L549
    00002D78 84F1                   MOV.B       @(1,R15),R0; allsts[]
    00002D7A E2C0                   MOV         #-64,R2    ; H'FFFFFFC0
    00002D7C 3020                   CMP/EQ      R2,R0
    00002D7E 8B00                   BF          L549
             tskcmd.c       5198      {
             tskcmd.c       5199          result = OK;//あり
    00002D80 EE00                   MOV         #0,R14     ; H'00000000
    00002D82              L549:
    00002D82 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5200      }
             tskcmd.c       5201      TplRpMakeSend( PARAM1, result );
    00002D84 B1BF                   BSR         _TplRpMakeSend
    00002D86 65E3                   MOV         R14,R5
             tskcmd.c       5202      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_SMALL );
    00002D88 D47F                   MOV.L       L1386+12,R4; H'0000009C+__$tp
    00002D8A B311                   BSR         __$TplRidDataSend
    00002D8C E559                   MOV         #89,R5     ; H'00000059
    00002D8E 7F08                   ADD         #8,R15
    00002D90 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5203    }
    00002D92 006B                   RTS/N
             tskcmd.c       5204    
             tskcmd.c       5205    /***********************************************************************
             tskcmd.c       5206    *     
             tskcmd.c       5207    * [概要]  5C 回収チューブレーンQRコード
             tskcmd.c       5208    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5209    * [戻値]  −
             tskcmd.c       5210    *     
             tskcmd.c       5211    ***********************************************************************/
             tskcmd.c       5212    static void TplCllne( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D94              __$TplCllne:                     ; function: __$TplCllne
                                                           ; frame size=0
             tskcmd.c       5213    { 
             tskcmd.c       5214      
             tskcmd.c       5215    } 
    00002D94 006B                   RTS/N
             tskcmd.c       5216      
             tskcmd.c       5217    /***********************************************************************
             tskcmd.c       5218    *     
             tskcmd.c       5219    * [概要]  5D 回収チューブQRコード
             tskcmd.c       5220    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5221    * [戻値]  −
             tskcmd.c       5222    *     
             tskcmd.c       5223    ***********************************************************************/
             tskcmd.c       5224    static void TplClqrc( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D96              __$TplClqrc:                     ; function: __$TplClqrc
                                                           ; frame size=0
             tskcmd.c       5225    { 
             tskcmd.c       5226      
             tskcmd.c       5227    } 
    00002D96 006B                   RTS/N
             tskcmd.c       5228      
             tskcmd.c       5229    /***********************************************************************
             tskcmd.c       5230    *     
             tskcmd.c       5231    * [概要]  5E 回収チューブ有無（単）
             tskcmd.c       5232    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5233    * [戻値]  −
             tskcmd.c       5234    *     
             tskcmd.c       5235    ***********************************************************************/
             tskcmd.c       5236    static void TplClsgl( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D98              __$TplClsgl:                     ; function: __$TplClsgl
                                                           ; frame size=0
             tskcmd.c       5237    { 
             tskcmd.c       5238      
             tskcmd.c       5239    } 
    00002D98 006B                   RTS/N
             tskcmd.c       5240      
             tskcmd.c       5241    /***********************************************************************
             tskcmd.c       5242    *     
             tskcmd.c       5243    * [概要]  5F 回収チューブ有無（全）
             tskcmd.c       5244    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5245    * [戻値]  −
             tskcmd.c       5246    *     
             tskcmd.c       5247    ***********************************************************************/
             tskcmd.c       5248    static void TplClall( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D9A              __$TplClall:                     ; function: __$TplClall
                                                           ; frame size=0
             tskcmd.c       5249    { 
             tskcmd.c       5250      
             tskcmd.c       5251    } 
    00002D9A 006B                   RTS/N
             tskcmd.c       5252      
             tskcmd.c       5253    /***********************************************************************
             tskcmd.c       5254    *     
             tskcmd.c       5255    * [概要]  60 LED
             tskcmd.c       5256    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5257    * [戻値]  −
             tskcmd.c       5258    *     
             tskcmd.c       5259    ***********************************************************************/
             tskcmd.c       5260    static void TplLdlmp( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D9C              __$TplLdlmp:                     ; function: __$TplLdlmp
                                                           ; frame size=12
    00002D9C 4EF0                   MOVMU.L     R14,@-R15
    00002D9E 7FFC                   ADD         #-4,R15
             tskcmd.c       5261    { 
             tskcmd.c       5262      UB  param1;
             tskcmd.c       5263      UB  result = NG;
             tskcmd.c       5264    
             tskcmd.c       5265      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      param1 = AsctoHex(param1);
    00002DA0 D176                   MOV.L       L1386,R1   ; H'00000004+__$TpRecvArgs
    00002DA2 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002DA4 D676                   MOV.L       L1386+4,R6 ; _Strcpy
    00002DA6 460B                   JSR         @R6
    00002DA8 64F3                   MOV         R15,R4
    00002DAA 64F0                   MOV.B       @R15,R4    ; param1
    00002DAC D775                   MOV.L       L1386+8,R7 ; _AsctoHex
    00002DAE 470B                   JSR         @R7
    00002DB0 EE01                   MOV         #1,R14     ; H'00000001
    00002DB2 650C                   EXTU.B      R0,R5
             tskcmd.c       5266    
             tskcmd.c       5267      if(( param1 >= LED_OFF )&&( param1 <= LED_ON ))
    00002DB4 4511                   CMP/PZ      R5
    00002DB6 8F07                   BF/S        L557
    00002DB8 2F50                   MOV.B       R5,@R15    ; param1
    00002DBA E201                   MOV         #1,R2      ; H'00000001
    00002DBC 3527                   CMP/GT      R2,R5
    00002DBE 8903                   BT          L557
    00002DC0 E402                   MOV         #2,R4      ; H'00000002
             tskcmd.c       5268      {
             tskcmd.c       5269          pio_BOUT( O_LIGHLED, param1 );
    00002DC2 D273                   MOV.L       L1386+20,R2; _pio_BOUT
    00002DC4 420B                   JSR         @R2
    00002DC6 EE00                   MOV         #0,R14     ; H'00000000
    00002DC8              L557:
    00002DC8 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5270          result = OK;
             tskcmd.c       5271      }
             tskcmd.c       5272      
             tskcmd.c       5273      TplRpMakeSend( PARAM1, result );
    00002DCA B19C                   BSR         _TplRpMakeSend
    00002DCC 65E3                   MOV         R14,R5
             tskcmd.c       5274      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_LDLMP );
    00002DCE D46E                   MOV.L       L1386+12,R4; H'0000009C+__$tp
    00002DD0 B2EE                   BSR         __$TplRidDataSend
    00002DD2 E560                   MOV         #96,R5     ; H'00000060
    00002DD4 7F04                   ADD         #4,R15
    00002DD6 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5275    }
    00002DD8 006B                   RTS/N
             tskcmd.c       5276    
             tskcmd.c       5277    /***********************************************************************
             tskcmd.c       5278    *     
             tskcmd.c       5279    * [概要]  61 UV点灯
             tskcmd.c       5280    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5281    * [戻値]  −
             tskcmd.c       5282    *     
             tskcmd.c       5283    ***********************************************************************/
             tskcmd.c       5284    static void TplUvlmp( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002DDA              __$TplUvlmp:                     ; function: __$TplUvlmp
                                                           ; frame size=12
    00002DDA 4EF0                   MOVMU.L     R14,@-R15
    00002DDC 7FFC                   ADD         #-4,R15
             tskcmd.c       5285    { 
             tskcmd.c       5286      UB  param1;
             tskcmd.c       5287      UB  result = NG;
             tskcmd.c       5288    
             tskcmd.c       5289      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      param1 = AsctoHex(param1);
    00002DDE D167                   MOV.L       L1386,R1   ; H'00000004+__$TpRecvArgs
    00002DE0 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002DE2 D667                   MOV.L       L1386+4,R6 ; _Strcpy
    00002DE4 460B                   JSR         @R6
    00002DE6 64F3                   MOV         R15,R4
    00002DE8 64F0                   MOV.B       @R15,R4    ; param1
    00002DEA D766                   MOV.L       L1386+8,R7 ; _AsctoHex
    00002DEC 470B                   JSR         @R7
    00002DEE EE01                   MOV         #1,R14     ; H'00000001
    00002DF0 650C                   EXTU.B      R0,R5
             tskcmd.c       5290    
             tskcmd.c       5291      if(( param1 >= LED_OFF )&&( param1 <= LED_ON ))
    00002DF2 4511                   CMP/PZ      R5
    00002DF4 8F07                   BF/S        L561
    00002DF6 2F50                   MOV.B       R5,@R15    ; param1
    00002DF8 E201                   MOV         #1,R2      ; H'00000001
    00002DFA 3527                   CMP/GT      R2,R5
    00002DFC 8903                   BT          L561
    00002DFE E403                   MOV         #3,R4      ; H'00000003
             tskcmd.c       5292      {
             tskcmd.c       5293          pio_BOUT( O_UVLAMP1, param1 );
    00002E00 D263                   MOV.L       L1386+20,R2; _pio_BOUT
    00002E02 420B                   JSR         @R2
    00002E04 EE00                   MOV         #0,R14     ; H'00000000
    00002E06              L561:
    00002E06 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5294          result = OK;
             tskcmd.c       5295      }
             tskcmd.c       5296      
             tskcmd.c       5297      TplRpMakeSend( PARAM1, result );
    00002E08 B17D                   BSR         _TplRpMakeSend
    00002E0A 65E3                   MOV         R14,R5
             tskcmd.c       5298      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_UVLMP );
    00002E0C D45E                   MOV.L       L1386+12,R4; H'0000009C+__$tp
    00002E0E B2CF                   BSR         __$TplRidDataSend
    00002E10 E561                   MOV         #97,R5     ; H'00000061
    00002E12 7F04                   ADD         #4,R15
    00002E14 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5299      
             tskcmd.c       5300    }
    00002E16 006B                   RTS/N
             tskcmd.c       5301    
             tskcmd.c       5302    /***********************************************************************
             tskcmd.c       5303    *     
             tskcmd.c       5304    * [概要]  62 パトランプ
             tskcmd.c       5305    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5306    * [戻値]  −
             tskcmd.c       5307    *     
             tskcmd.c       5308    ***********************************************************************/
             tskcmd.c       5309    static void TplPtlmp( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002E18              __$TplPtlmp:                     ; function: __$TplPtlmp
                                                           ; frame size=60
    00002E18 4AF0                   MOVMU.L     R10,@-R15
    00002E1A 7FF4                   ADD         #-12,R15
    00002E1C DC5D                   MOV.L       L1386+24,R12; __$TpRecvArgs
    00002E1E 55C1                   MOV.L       @(4,R12),R5; TpRecvArgs[]
             tskcmd.c       5310    {
             tskcmd.c       5311      UB param1;
             tskcmd.c       5312      UB param2;
             tskcmd.c       5313      UB param3;
             tskcmd.c       5314      UB result;
             tskcmd.c       5315    
             tskcmd.c       5316      // データ取得
             tskcmd.c       5317      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      bzcnt.Act    = AsctoHex(param1);
    00002E20 6B43                   MOV         R4,R11
    00002E22 DD57                   MOV.L       L1386+4,R13; _Strcpy
    00002E24 4D0B                   JSR         @R13
    00002E26 64F3                   MOV         R15,R4
    00002E28 34F14000               MOV.B       @(0:12,R15),R4; param1
    00002E2C DE55                   MOV.L       L1386+8,R14; _AsctoHex
    00002E2E 4E4B                   JSR/N       @R14
    00002E30 DA59                   MOV.L       L1386+28,R10; __$bzcnt
             tskcmd.c       5318      Strcpy( (char*)&param2 , TpRecvArgs[2]  );      bzcnt.Colptn = AsctoHex(param2);
    00002E32 55C2                   MOV.L       @(8,R12),R5; TpRecvArgs[]
    00002E34 64F3                   MOV         R15,R4
    00002E36 2A00                   MOV.B       R0,@R10    ; bzcnt.Act
    00002E38 4D0B                   JSR         @R13
    00002E3A 7404                   ADD         #4,R4
    00002E3C 34F14004               MOV.B       @(4:12,R15),R4; param2
    00002E40 4E4B                   JSR/N       @R14
             tskcmd.c       5319      Strcpy( (char*)&param3 , TpRecvArgs[3]  );      bzcnt.Buzptn = AsctoHex(param3);
    00002E42 55C3                   MOV.L       @(12,R12),R5; TpRecvArgs[]
    00002E44 64F3                   MOV         R15,R4
    00002E46 80A1                   MOV.B       R0,@(1,R10); bzcnt.Colptn
    00002E48 4D0B                   JSR         @R13
    00002E4A 7408                   ADD         #8,R4
    00002E4C 34F14008               MOV.B       @(8:12,R15),R4; param3
    00002E50 4E4B                   JSR/N       @R14
             tskcmd.c       5320    
             tskcmd.c       5321      // データチェック
             tskcmd.c       5322      if(
    00002E52 36A18000               MOVU.B      @(0,R10),R6; bzcnt.Act
    00002E56 620C                   EXTU.B      R0,R2
    00002E58 4611                   CMP/PZ      R6
    00002E5A 6023                   MOV         R2,R0
    00002E5C 8F0F                   BF/S        L565
    00002E5E 80A2                   MOV.B       R0,@(2,R10); bzcnt.Buzptn
    00002E60 E502                   MOV         #2,R5      ; H'00000002
    00002E62 3657                   CMP/GT      R5,R6
    00002E64 890B                   BT          L565
    00002E66 36A18001               MOVU.B      @(1,R10),R6; bzcnt.Colptn
    00002E6A 4611                   CMP/PZ      R6
    00002E6C 8B07                   BF          L565
    00002E6E 3657                   CMP/GT      R5,R6
    00002E70 8905                   BT          L565
    00002E72 4211                   CMP/PZ      R2
    00002E74 8B03                   BF          L565
    00002E76 3257                   CMP/GT      R5,R2
    00002E78 8901                   BT          L565
             tskcmd.c       5323          (( bzcnt.Act    >= PATOF   )&&( bzcnt.Act  <= PATBL1))&&
             tskcmd.c       5324          (( bzcnt.Colptn >= C_GRN )&&( bzcnt.Colptn <= C_RED ))&&
             tskcmd.c       5325          (( bzcnt.Buzptn >= LEDOF )&&( bzcnt.Buzptn <= LEDBL ))
             tskcmd.c       5326      )
             tskcmd.c       5327      {
             tskcmd.c       5328          result = OK;
    00002E7A A001                   BRA         L571
    00002E7C 0229                   MOVT        R2
    00002E7E              L565:
             tskcmd.c       5329      }
             tskcmd.c       5330      else
             tskcmd.c       5331      {
             tskcmd.c       5332          result = NG;
    00002E7E E201                   MOV         #1,R2      ; H'00000001
    00002E80              L571:
    00002E80 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5333      }
             tskcmd.c       5334    
             tskcmd.c       5335      // タッチパネルへ返信
             tskcmd.c       5336      TplRpMakeSend( PARAM1, result );
    00002E82 B140                   BSR         _TplRpMakeSend
    00002E84 6523                   MOV         R2,R5
    00002E86 E562                   MOV         #98,R5     ; H'00000062
             tskcmd.c       5337      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_PTLMP );
    00002E88 D43F                   MOV.L       L1386+12,R4; H'0000009C+__$tp
    00002E8A B291                   BSR         __$TplRidDataSend
    00002E8C EC3C                   MOV         #60,R12    ; H'0000003C
             tskcmd.c       5338    
             tskcmd.c       5339      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       5340      memcpy( &bufwk[0], (B*)&bzcnt, sizeof( ST_BZCNT ) );
    00002E8E D542                   MOV.L       L1386+28,R5; __$bzcnt
    00002E90 D442                   MOV.L       L1386+32,R4; __$bufwk
    00002E92 D143                   MOV.L       L1386+36,R1; _memcpy
    00002E94 410B                   JSR         @R1
    00002E96 E604                   MOV         #4,R6      ; H'00000004
    00002E98 2FC6                   MOV.L       R12,@-R15
    00002E9A D140                   MOV.L       L1386+32,R1; __$bufwk
    00002E9C 2F16                   MOV.L       R1,@-R15
    00002E9E EDFF                   MOV         #-1,R13    ; H'FFFFFFFF
    00002EA0 6DDC                   EXTU.B      R13,R13
    00002EA2 2FD6                   MOV.L       R13,@-R15
    00002EA4 2FD6                   MOV.L       R13,@-R15
    00002EA6 E733                   MOV         #51,R7     ; H'00000033
    00002EA8 2F76                   MOV.L       R7,@-R15
    00002EAA 3AB1801A               MOVU.B      @(26,R11),R10; (mrcv)->bcid
    00002EAE 2FA6                   MOV.L       R10,@-R15
    00002EB0 E60C                   MOV         #12,R6     ; H'0000000C
    00002EB2 E50B                   MOV         #11,R5     ; H'0000000B
    00002EB4 E405                   MOV         #5,R4      ; H'00000005
    00002EB6 DB3B                   MOV.L       L1386+40,R11; _mbx_send
    00002EB8 4B0B                   JSR         @R11
    00002EBA E762                   MOV         #98,R7     ; H'00000062
    00002EBC 7F24                   ADD         #36,R15
    00002EBE 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       5341    
             tskcmd.c       5342      // タスク通知
             tskcmd.c       5343      mbx_send(
             tskcmd.c       5344                      ID_TSK_CMD,                                     // 送信元ﾀｽｸID
             tskcmd.c       5345                      ID_MPF_LED,                                     // ﾒﾓﾘﾌﾟｰﾙID
             tskcmd.c       5346                      ID_MBX_LED,                                     // ﾒｰﾙﾎﾞｯｸｽID
             tskcmd.c       5347                      ID_TPL_PTLMP,                                   // PROCID
             tskcmd.c       5348                      mrcv->msgdata.bcid,                             // BCID
             tskcmd.c       5349                      ID_MSG_CLEDON,                                  // message
             tskcmd.c       5350                      NO_DATA,                                        // 情報1(汎用)
             tskcmd.c       5351                      NO_DATA,                                        // 情報2(汎用)
             tskcmd.c       5352                      &bufwk[0],                                      // ﾃﾞｰﾀ
             tskcmd.c       5353                      sizeof( bufwk )                                 // ﾃﾞｰﾀｻｲｽﾞ
             tskcmd.c       5354                  );
             tskcmd.c       5355    }
    00002EC0 006B                   RTS/N
             tskcmd.c       5356    /***********************************************************************
             tskcmd.c       5357    *     
             tskcmd.c       5358    * [概要]  63 電源OFF
             tskcmd.c       5359    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5360    * [戻値]  −
             tskcmd.c       5361    *     
             tskcmd.c       5362    ***********************************************************************/
             tskcmd.c       5363    static void TplPowof( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002EC2              __$TplPowof:                     ; function: __$TplPowof
                                                           ; frame size=4
    00002EC2 4F22                   STS.L       PR,@-R15
    00002EC4 E501                   MOV         #1,R5      ; H'00000001
             tskcmd.c       5364    {
             tskcmd.c       5365      UB result = OK;
             tskcmd.c       5366    
             tskcmd.c       5367      pio_BOUT( O_POWERDW, ON );
    00002EC6 D232                   MOV.L       L1386+20,R2; _pio_BOUT
    00002EC8 420B                   JSR         @R2
    00002ECA E405                   MOV         #5,R4      ; H'00000005
             tskcmd.c       5368    
             tskcmd.c       5369      // タッチパネルへ返信
             tskcmd.c       5370      TplRpMakeSend( PARAM1, result );
    00002ECC E500                   MOV         #0,R5      ; H'00000000
    00002ECE B11A                   BSR         _TplRpMakeSend
    00002ED0 E401                   MOV         #1,R4      ; H'00000001
    00002ED2 E563                   MOV         #99,R5     ; H'00000063
             tskcmd.c       5371      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_POWOF );
    00002ED4 D42C                   MOV.L       L1386+12,R4; H'0000009C+__$tp
    00002ED6 A26B                   BRA         __$TplRidDataSend
    00002ED8 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5372    
             tskcmd.c       5373    }
             tskcmd.c       5374    /***********************************************************************
             tskcmd.c       5375    *     
             tskcmd.c       5376    * [概要]  6B 運転履歴（タッチパネルより運転履歴受信）
             tskcmd.c       5377    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5378    * [戻値]  −
             tskcmd.c       5379    *     
             tskcmd.c       5380    ***********************************************************************/
             tskcmd.c       5381    static void TplExRun( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002EDA              __$TplExRun:                     ; function: __$TplExRun
                                                           ; frame size=48
    00002EDA 4F22                   STS.L       PR,@-R15
    00002EDC 7FFC                   ADD         #-4,R15
             tskcmd.c       5382    {
             tskcmd.c       5383      ER err;
             tskcmd.c       5384      INT siz;
             tskcmd.c       5385      
             tskcmd.c       5386      siz = sizeof( err );
             tskcmd.c       5387    
             tskcmd.c       5388      if( mrcv->msgdata.siz == siz )// error
    00002EDE 5048                   MOV.L       @(32,R4),R0; (mrcv)->siz
    00002EE0 8804                   CMP/EQ      #4,R0
    00002EE2 8B28                   BF          L575
             tskcmd.c       5389      {
             tskcmd.c       5390          ExpRunlRetry++;
    00002EE4 D130                   MOV.L       L1386+44,R1; __$ExpRunlRetry
    00002EE6 6710                   MOV.B       @R1,R7     ; ExpRunlRetry
    00002EE8 E203                   MOV         #3,R2      ; H'00000003
    00002EEA 7701                   ADD         #1,R7
             tskcmd.c       5391          if( ExpRunlRetry > 3 )
    00002EEC 657C                   EXTU.B      R7,R5
    00002EEE 3527                   CMP/GT      R2,R5
    00002EF0 8F19                   BF/S        L577
    00002EF2 2170                   MOV.B       R7,@R1     ; ExpRunlRetry
             tskcmd.c       5392          {
             tskcmd.c       5393              // エラー応答メッセージ作成
             tskcmd.c       5394              CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c       5395                                  PARAM2,                                         // パラメータ数
             tskcmd.c       5396                                  STRTBL_MSG[ID_MSG_EXPRUNL],                     // コマンド文字列
             tskcmd.c       5397                                  E_RECV_FAIL,                                    // エラーコード
             tskcmd.c       5398    
             tskcmd.c       5399                                  0,                                              // 
             tskcmd.c       5400                                  0,                                              // 
             tskcmd.c       5401                                  0,                                              // 
             tskcmd.c       5402                                  0,                                              // 
             tskcmd.c       5403                                  0,                                              // 
             tskcmd.c       5404    
             tskcmd.c       5405                                  0,                                              // 
             tskcmd.c       5406                                  0,                                              // 
             tskcmd.c       5407                                  0,                                              // 
             tskcmd.c       5408                                  0,                                              // 
             tskcmd.c       5409                                  0                                               // 
             tskcmd.c       5410                              );
    00002EF4 E600                   MOV         #0,R6      ; H'00000000
    00002EF6 2F66                   MOV.L       R6,@-R15
    00002EF8 2F66                   MOV.L       R6,@-R15
    00002EFA 2F66                   MOV.L       R6,@-R15
    00002EFC 2F66                   MOV.L       R6,@-R15
    00002EFE 2F66                   MOV.L       R6,@-R15
    00002F00 2F66                   MOV.L       R6,@-R15
    00002F02 2F66                   MOV.L       R6,@-R15
    00002F04 2F66                   MOV.L       R6,@-R15
    00002F06 2F66                   MOV.L       R6,@-R15
    00002F08 2F66                   MOV.L       R6,@-R15
    00002F0A E732                   MOV         #50,R7     ; H'00000032
    00002F0C D127                   MOV.L       L1386+48,R1; H'000000A0+_STRTBL_MSG
    00002F0E 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
    00002F10 D427                   MOV.L       L1386+52,R4; __$stCtl
    00002F12 D328                   MOV.L       L1386+56,R3; _CmdMakeResponse
    00002F14 430B                   JSR         @R3
    00002F16 E502                   MOV         #2,R5      ; H'00000002
    00002F18 7F28                   ADD         #40,R15
             tskcmd.c       5411              CmdSendResponseEtc( &stCtl, ID_MSG_RUNLOGERR );
    00002F1A D425                   MOV.L       L1386+52,R4; __$stCtl
    00002F1C D326                   MOV.L       L1386+60,R3; _CmdSendResponseEtc
    00002F1E 430B                   JSR         @R3
    00002F20 E568                   MOV         #104,R5    ; H'00000068
    00002F22 A028                   BRA         L578
    00002F24 0009                   NOP
    00002F26              L577:
             tskcmd.c       5412          }
             tskcmd.c       5413          else
             tskcmd.c       5414          {
             tskcmd.c       5415              // タッチパネルへリトライ
             tskcmd.c       5416              memcpy( &err, &mrcv->msgdata.data[0], siz );
    00002F26 7424                   ADD         #36,R4
    00002F28 E604                   MOV         #4,R6      ; H'00000004
    00002F2A 6543                   MOV         R4,R5
    00002F2C D21C                   MOV.L       L1386+36,R2; _memcpy
    00002F2E 420B                   JSR         @R2
    00002F30 64F3                   MOV         R15,R4
    00002F32 A01B                   BRA         L579
    00002F34 0009                   NOP
    00002F36              L575:
             tskcmd.c       5417    
             tskcmd.c       5418              TplExRunSend();
             tskcmd.c       5419              TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_EXRUN );
             tskcmd.c       5420          }
             tskcmd.c       5421      }
             tskcmd.c       5422      else
             tskcmd.c       5423      {
             tskcmd.c       5424          // 応答メッセージ作成
             tskcmd.c       5425          CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c       5426                              PARAM2,                                         // パラメータ数
             tskcmd.c       5427                              STRTBL_MSG[ID_MSG_EXPRUNL],                     // コマンド文字列
             tskcmd.c       5428                              E_SUCCESS,                                      // エラーコード
             tskcmd.c       5429    
             tskcmd.c       5430                              0,                                              // 
             tskcmd.c       5431                              0,                                              // 
             tskcmd.c       5432                              0,                                              // 
             tskcmd.c       5433                              0,                                              // 
             tskcmd.c       5434                              0,                                              // 
             tskcmd.c       5435    
             tskcmd.c       5436                              0,                                              // 
             tskcmd.c       5437                              0,                                              // 
             tskcmd.c       5438                              0,                                              // 
             tskcmd.c       5439                              0,                                              // 
             tskcmd.c       5440                              0                                               // 
             tskcmd.c       5441                          );
    00002F36 E400                   MOV         #0,R4      ; H'00000000
    00002F38 2F46                   MOV.L       R4,@-R15
    00002F3A 2F46                   MOV.L       R4,@-R15
    00002F3C 2F46                   MOV.L       R4,@-R15
    00002F3E 2F46                   MOV.L       R4,@-R15
    00002F40 2F46                   MOV.L       R4,@-R15
    00002F42 2F46                   MOV.L       R4,@-R15
    00002F44 2F46                   MOV.L       R4,@-R15
    00002F46 2F46                   MOV.L       R4,@-R15
    00002F48 2F46                   MOV.L       R4,@-R15
    00002F4A 2F46                   MOV.L       R4,@-R15
    00002F4C E502                   MOV         #2,R5      ; H'00000002
    00002F4E D717                   MOV.L       L1386+48,R7; H'000000A0+_STRTBL_MSG
    00002F50 6672                   MOV.L       @R7,R6     ; STRTBL_MSG[]
    00002F52 D417                   MOV.L       L1386+52,R4; __$stCtl
    00002F54 D317                   MOV.L       L1386+56,R3; _CmdMakeResponse
    00002F56 430B                   JSR         @R3
    00002F58 E700                   MOV         #0,R7      ; H'00000000
    00002F5A 7F28                   ADD         #40,R15
             tskcmd.c       5442          // 応答メッセージ送信
             tskcmd.c       5443          CmdSendResponseEtc( &stCtl, ID_MSG_EXPRUNL );
    00002F5C D414                   MOV.L       L1386+52,R4; __$stCtl
    00002F5E D316                   MOV.L       L1386+60,R3; _CmdSendResponseEtc
    00002F60 430B                   JSR         @R3
    00002F62 E528                   MOV         #40,R5     ; H'00000028
             tskcmd.c       5444          
             tskcmd.c       5445          
             tskcmd.c       5446          // タッチパネルへ次レコードを依頼
             tskcmd.c       5447          ExpRunlSeqno++;
    00002F64 D215                   MOV.L       L1386+64,R2; __$ExpRunlSeqno
    00002F66 6120                   MOV.B       @R2,R1     ; ExpRunlSeqno
    00002F68 7101                   ADD         #1,R1
    00002F6A 2210                   MOV.B       R1,@R2     ; ExpRunlSeqno
    00002F6C              L579:
    00002F6C B115                   BSR         _TplExRunSend
    00002F6E 0009                   NOP
    00002F70 D405                   MOV.L       L1386+12,R4; H'0000009C+__$tp
    00002F72 B21D                   BSR         __$TplRidDataSend
    00002F74 E56B                   MOV         #107,R5    ; H'0000006B
    00002F76              L578:
    00002F76 7F04                   ADD         #4,R15
    00002F78 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5448          TplExRunSend();
             tskcmd.c       5449          TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_EXRUN );
             tskcmd.c       5450      }
             tskcmd.c       5451    }
    00002F7A 006B                   RTS/N
    00002F7C              L1386:
    00002F7C <00000004>             .DATA.L     H'00000004+__$TpRecvArgs
    00002F80 <00000000>             .DATA.L     _Strcpy
    00002F84 <00000000>             .DATA.L     _AsctoHex
    00002F88 <0000009C>             .DATA.L     H'0000009C+__$tp
    00002F8C <00000000>             .DATA.L     _pio_ALLIN
    00002F90 <00000000>             .DATA.L     _pio_BOUT
    00002F94 <00000000>             .DATA.L     __$TpRecvArgs
    00002F98 <00000000>             .DATA.L     __$bzcnt
    00002F9C <00000000>             .DATA.L     __$bufwk
    00002FA0 <00000000>             .DATA.L     _memcpy
    00002FA4 <00000000>             .DATA.L     _mbx_send
    00002FA8 <00000000>             .DATA.L     __$ExpRunlRetry
    00002FAC <000000A0>             .DATA.L     H'000000A0+_STRTBL_MSG
    00002FB0 <00000000>             .DATA.L     __$stCtl
    00002FB4 <00000000>             .DATA.L     _CmdMakeResponse
    00002FB8 <00000000>             .DATA.L     _CmdSendResponseEtc
    00002FBC <00000000>             .DATA.L     __$ExpRunlSeqno
             tskcmd.c       5452    
             tskcmd.c       5453    /***********************************************************************
             tskcmd.c       5454    * 
             tskcmd.c       5455    * [概要]  
             tskcmd.c       5456    * [引数]  メッセージデータ
             tskcmd.c       5457    * [戻値]  −
             tskcmd.c       5458    * 
             tskcmd.c       5459    ***********************************************************************/
             tskcmd.c       5460    static void TpRspFWVER()
    00002FC0              __$TpRspFWVER:                   ; function: __$TpRspFWVER
                                                           ; frame size=12
    00002FC0 4DF0                   MOVMU.L     R13,@-R15
    00002FC2 DDBC                   MOV.L       L1387+2,R13; H'0000009C+__$tp
    00002FC4 E610                   MOV         #16,R6     ; H'00000010
             tskcmd.c       5461    {
             tskcmd.c       5462      UB  bcccal;
             tskcmd.c       5463      UB  datsiz;
             tskcmd.c       5464      UB  calsiz;
             tskcmd.c       5465      UB  comsiz;
             tskcmd.c       5466      char *pnter;
             tskcmd.c       5467    
             tskcmd.c       5468      pnter = &TP_RP1_SEND_FORM04[0];
             tskcmd.c       5469      
             tskcmd.c       5470      // パラメータフォーム
             tskcmd.c       5471      datsiz = sizeof(TP_RP1_SEND_FORM04) - 3;
             tskcmd.c       5472      calsiz = sizeof(TP_RP1_SEND_FORM04) - 5;
             tskcmd.c       5473      comsiz = sizeof(TP_RP1_SEND_FORM04);
             tskcmd.c       5474    
             tskcmd.c       5475      memcpy( &tp.rsp.buf[0],&TP_RP1_SEND_FORM04[0],comsiz );
    00002FC6 D5BC                   MOV.L       L1387+6,R5 ; __$TP_RP1_SEND_FORM04
    00002FC8 D1BC                   MOV.L       L1387+10,R1; _memcpy
    00002FCA 410B                   JSR         @R1
    00002FCC 64D3                   MOV         R13,R4
    00002FCE 64D3                   MOV         R13,R4
    00002FD0 7408                   ADD         #8,R4
             tskcmd.c       5476      memcpy( &tp.rsp.buf[8],&VER_INFO_TO_TP[0]  , 4 );
    00002FD2 D5BB                   MOV.L       L1387+14,R5; _VER_INFO_TO_TP
    00002FD4 D7B9                   MOV.L       L1387+10,R7; _memcpy
    00002FD6 470B                   JSR         @R7
    00002FD8 E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       5477    
             tskcmd.c       5478      bcccal = CalcBCC( &tp.rsp.buf[1], calsiz );
    00002FDA 64D3                   MOV         R13,R4
    00002FDC 7401                   ADD         #1,R4
    00002FDE DEB9                   MOV.L       L1387+18,R14; _CalcBCC
    00002FE0 4E0B                   JSR         @R14
    00002FE2 E50B                   MOV         #11,R5     ; H'0000000B
    00002FE4 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5479      tp.rsp.buf[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    00002FE6 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00002FE8 60E3                   MOV         R14,R0
    00002FEA 402C                   SHAD        R2,R0
    00002FEC C90F                   AND         #15,R0
    00002FEE D1B6                   MOV.L       L1387+22,R1; _HextoAsc
    00002FF0 410B                   JSR         @R1
    00002FF2 6403                   MOV         R0,R4
    00002FF4 80DD                   MOV.B       R0,@(13,R13); tp.rsp.buf[]
             tskcmd.c       5480      tp.rsp.buf[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    00002FF6 60E3                   MOV         R14,R0
    00002FF8 C90F                   AND         #15,R0
    00002FFA D2B3                   MOV.L       L1387+22,R2; _HextoAsc
    00002FFC 420B                   JSR         @R2
    00002FFE 6403                   MOV         R0,R4
    00003000 80DE                   MOV.B       R0,@(14,R13); tp.rsp.buf[]
    00003002 E510                   MOV         #16,R5     ; H'00000010
             tskcmd.c       5481    
             tskcmd.c       5482      TplCommDataSend( &tp.rsp.buf[0] , comsiz );
    00003004 B21C                   BSR         __$TplCommDataSend
    00003006 64D3                   MOV         R13,R4
    00003008 E501                   MOV         #1,R5      ; H'00000001
             tskcmd.c       5483      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_FWVER );
    0000300A 64D3                   MOV         R13,R4
    0000300C 4DF4                   MOVMU.L     @R15+,R13
    0000300E A1CF                   BRA         __$TplRidDataSend
    00003010 0009                   NOP
             tskcmd.c       5484    }
             tskcmd.c       5485    
             tskcmd.c       5486    /***********************************************************************
             tskcmd.c       5487    * 
             tskcmd.c       5488    * [概要]  
             tskcmd.c       5489    * [引数]  メッセージデータ
             tskcmd.c       5490    * [戻値]  −
             tskcmd.c       5491    * 
             tskcmd.c       5492    ***********************************************************************/
             tskcmd.c       5493    static void TpRspLGIN1()
    00003012              __$TpRspLGIN1:                   ; function: __$TpRspLGIN1
                                                           ; frame size=12
    00003012 4DF0                   MOVMU.L     R13,@-R15
    00003014 DDA7                   MOV.L       L1387+2,R13; H'0000009C+__$tp
    00003016 E60E                   MOV         #14,R6     ; H'0000000E
             tskcmd.c       5494    {
             tskcmd.c       5495      UB  result;
             tskcmd.c       5496      UB  bcccal;
             tskcmd.c       5497      UB  datsiz;
             tskcmd.c       5498      UB  calsiz;
             tskcmd.c       5499      UB  comsiz;
             tskcmd.c       5500      char *pnter;
             tskcmd.c       5501    
             tskcmd.c       5502      pnter = &TP_RP1_SEND_FORM02[0];
             tskcmd.c       5503      
             tskcmd.c       5504      datsiz = sizeof(TP_RP1_SEND_FORM02) - 3;
             tskcmd.c       5505      calsiz = sizeof(TP_RP1_SEND_FORM02) - 5;
             tskcmd.c       5506      comsiz = sizeof(TP_RP1_SEND_FORM02);
             tskcmd.c       5507    
             tskcmd.c       5508      memcpy( &tp.rsp.buf[0],pnter,comsiz );
    00003018 D5AC                   MOV.L       L1387+26,R5; __$TP_RP1_SEND_FORM02
    0000301A D1A8                   MOV.L       L1387+10,R1; _memcpy
    0000301C 410B                   JSR         @R1
    0000301E 64D3                   MOV         R13,R4
             tskcmd.c       5509      result = ChkUserInfo();
    00003020 B535                   BSR         __$ChkUserInfo
    00003022 0009                   NOP
    00003024 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5510    
             tskcmd.c       5511      tp.rsp.buf[8] = DectoAscH(result);
    00003026 D6AA                   MOV.L       L1387+30,R6; _DectoAscH
    00003028 460B                   JSR         @R6
    0000302A 64E3                   MOV         R14,R4
    0000302C 80D8                   MOV.B       R0,@(8,R13); tp.rsp.buf[]
             tskcmd.c       5512      tp.rsp.buf[9] = DectoAscL(result);
    0000302E D7A9                   MOV.L       L1387+34,R7; _DectoAscL
    00003030 470B                   JSR         @R7
    00003032 64E3                   MOV         R14,R4
    00003034 80D9                   MOV.B       R0,@(9,R13); tp.rsp.buf[]
             tskcmd.c       5513      
             tskcmd.c       5514      bcccal = CalcBCC( &tp.rsp.buf[1], calsiz );
    00003036 64D3                   MOV         R13,R4
    00003038 7401                   ADD         #1,R4
    0000303A D1A2                   MOV.L       L1387+18,R1; _CalcBCC
    0000303C 410B                   JSR         @R1
    0000303E E509                   MOV         #9,R5      ; H'00000009
    00003040 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5515      tp.rsp.buf[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    00003042 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00003044 60E3                   MOV         R14,R0
    00003046 402C                   SHAD        R2,R0
    00003048 C90F                   AND         #15,R0
    0000304A D29F                   MOV.L       L1387+22,R2; _HextoAsc
    0000304C 420B                   JSR         @R2
    0000304E 6403                   MOV         R0,R4
    00003050 80DB                   MOV.B       R0,@(11,R13); tp.rsp.buf[]
             tskcmd.c       5516      tp.rsp.buf[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    00003052 60E3                   MOV         R14,R0
    00003054 C90F                   AND         #15,R0
    00003056 D79C                   MOV.L       L1387+22,R7; _HextoAsc
    00003058 470B                   JSR         @R7
    0000305A 6403                   MOV         R0,R4
    0000305C 80DC                   MOV.B       R0,@(12,R13); tp.rsp.buf[]
    0000305E E50E                   MOV         #14,R5     ; H'0000000E
             tskcmd.c       5517    
             tskcmd.c       5518      TplCommDataSend( &tp.rsp.buf[0] , comsiz );
    00003060 B1EE                   BSR         __$TplCommDataSend
    00003062 64D3                   MOV         R13,R4
    00003064 E503                   MOV         #3,R5      ; H'00000003
             tskcmd.c       5519      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_LGIN1 );
    00003066 64D3                   MOV         R13,R4
    00003068 4DF4                   MOVMU.L     @R15+,R13
    0000306A A1A1                   BRA         __$TplRidDataSend
    0000306C 0009                   NOP
             tskcmd.c       5520    }
             tskcmd.c       5521    
             tskcmd.c       5522    /***********************************************************************
             tskcmd.c       5523    * 
             tskcmd.c       5524    * [概要]  
             tskcmd.c       5525    * [引数]  メッセージデータ
             tskcmd.c       5526    * [戻値]  −
             tskcmd.c       5527    * 
             tskcmd.c       5528    ***********************************************************************/
             tskcmd.c       5529    static void TpRspLGIN2()
             tskcmd.c       5530    {
             tskcmd.c       5531    }
             tskcmd.c       5532    
             tskcmd.c       5533    /***********************************************************************
             tskcmd.c       5534    * 
             tskcmd.c       5535    * [概要]  
             tskcmd.c       5536    * [引数]  メッセージデータ
             tskcmd.c       5537    * [戻値]  −
             tskcmd.c       5538    * 
             tskcmd.c       5539    ***********************************************************************/
             tskcmd.c       5540    static void TpRspOPTIF()
    0000306E              __$TpRspOPTIF:                   ; function: __$TpRspOPTIF
                                                           ; frame size=16
    0000306E 4CF0                   MOVMU.L     R12,@-R15
    00003070 DD90                   MOV.L       L1387+2,R13; H'0000009C+__$tp
    00003072 E60D                   MOV         #13,R6     ; H'0000000D
             tskcmd.c       5541    {
             tskcmd.c       5542      UB  bcccal;
             tskcmd.c       5543      UB  datsiz;
             tskcmd.c       5544      UB  calsiz;
             tskcmd.c       5545      UB  comsiz;
             tskcmd.c       5546      char *pnter;
             tskcmd.c       5547    
             tskcmd.c       5548      pnter = &TP_RP1_SEND_FORM01[0];
             tskcmd.c       5549      
             tskcmd.c       5550      datsiz = sizeof(TP_RP1_SEND_FORM01) - 3;
             tskcmd.c       5551      calsiz = sizeof(TP_RP1_SEND_FORM01) - 5;
             tskcmd.c       5552      comsiz = sizeof(TP_RP1_SEND_FORM01);
             tskcmd.c       5553    
             tskcmd.c       5554      memcpy( &tp.rsp.buf[0],pnter,comsiz );
    00003074 D598                   MOV.L       L1387+38,R5; __$TP_RP1_SEND_FORM01
    00003076 D191                   MOV.L       L1387+10,R1; _memcpy
    00003078 410B                   JSR         @R1
    0000307A 64D3                   MOV         R13,R4
    0000307C D697                   MOV.L       L1387+42,R6; __$BkP10
             tskcmd.c       5555      tp.rsp.buf[8] = HextoAsc( BkP10.Login );
    0000307E DC92                   MOV.L       L1387+22,R12; _HextoAsc
    00003080 4C0B                   JSR         @R12
    00003082 6460                   MOV.B       @R6,R4     ; BkP10.Login
    00003084 80D8                   MOV.B       R0,@(8,R13); tp.rsp.buf[]
             tskcmd.c       5556      
             tskcmd.c       5557      bcccal = CalcBCC( &tp.rsp.buf[1], calsiz );
    00003086 64D3                   MOV         R13,R4
    00003088 7401                   ADD         #1,R4
    0000308A D78E                   MOV.L       L1387+18,R7; _CalcBCC
    0000308C 470B                   JSR         @R7
    0000308E E508                   MOV         #8,R5      ; H'00000008
    00003090 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5558      tp.rsp.buf[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    00003092 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00003094 60E3                   MOV         R14,R0
    00003096 402C                   SHAD        R2,R0
    00003098 C90F                   AND         #15,R0
    0000309A 4C0B                   JSR         @R12
    0000309C 6403                   MOV         R0,R4
    0000309E 80DA                   MOV.B       R0,@(10,R13); tp.rsp.buf[]
             tskcmd.c       5559      tp.rsp.buf[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    000030A0 60E3                   MOV         R14,R0
    000030A2 C90F                   AND         #15,R0
    000030A4 4C0B                   JSR         @R12
    000030A6 6403                   MOV         R0,R4
    000030A8 80DB                   MOV.B       R0,@(11,R13); tp.rsp.buf[]
    000030AA E50D                   MOV         #13,R5     ; H'0000000D
             tskcmd.c       5560    
             tskcmd.c       5561      TplCommDataSend( &tp.rsp.buf[0] , comsiz );
    000030AC B1C8                   BSR         __$TplCommDataSend
    000030AE 64D3                   MOV         R13,R4
    000030B0 E502                   MOV         #2,R5      ; H'00000002
             tskcmd.c       5562      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_OPTIF );
    000030B2 64D3                   MOV         R13,R4
    000030B4 4CF4                   MOVMU.L     @R15+,R12
    000030B6 A17B                   BRA         __$TplRidDataSend
    000030B8 0009                   NOP
             tskcmd.c       5563    }
             tskcmd.c       5564    
             tskcmd.c       5565    /***********************************************************************
             tskcmd.c       5566    * 
             tskcmd.c       5567    * [概要]  
             tskcmd.c       5568    * [引数]  メッセージデータ
             tskcmd.c       5569    * [戻値]  −
             tskcmd.c       5570    * [備考]
             tskcmd.c       5571    *                        0   1    2    3    4    5    6    7    8     9    10     11    12
             tskcmd.c       5572    *  TP_RP_SEND_FORM[1]:  STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '*',  ETX,  0x30, 0x30, 0x0d
             tskcmd.c       5573    * 
             tskcmd.c       5574    ***********************************************************************/
             tskcmd.c       5575    static void TpRspINITA( ER result )
    000030BA              __$TpRspINITA:                   ; function: __$TpRspINITA
                                                           ; frame size=4
    000030BA 4F22                   STS.L       PR,@-R15
             tskcmd.c       5576    {
             tskcmd.c       5577      INT data;
             tskcmd.c       5578    
             tskcmd.c       5579      if( result == E_SUCCESS )       data = 0;   // 成功
    000030BC 2448                   TST         R4,R4
    000030BE 0539                   MOVRT       R5
             tskcmd.c       5580      else                            data = 1;   // 失敗
             tskcmd.c       5581      
             tskcmd.c       5582      TplRpMakeSend( 1, data );
    000030C0 B021                   BSR         _TplRpMakeSend
    000030C2 E401                   MOV         #1,R4      ; H'00000001
    000030C4 E505                   MOV         #5,R5      ; H'00000005
             tskcmd.c       5583      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_INITA );
    000030C6 D47B                   MOV.L       L1387+2,R4 ; H'0000009C+__$tp
    000030C8 A172                   BRA         __$TplRidDataSend
    000030CA 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5584    }
             tskcmd.c       5585    /***********************************************************************
             tskcmd.c       5586    * 
             tskcmd.c       5587    * [概要]  
             tskcmd.c       5588    * [引数]  メッセージデータ
             tskcmd.c       5589    * [戻値]  −
             tskcmd.c       5590    * [備考]
             tskcmd.c       5591    *                        0   1    2    3    4    5    6    7    8     9    10     11    12
             tskcmd.c       5592    *  TP_RP_SEND_FORM[1]:  STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '*',  ETX,  0x30, 0x30, 0x0d
             tskcmd.c       5593    * 
             tskcmd.c       5594    ***********************************************************************/
             tskcmd.c       5595    static void TpRspPRCTL( ER result )
    000030CC              __$TpRspPRCTL:                   ; function: __$TpRspPRCTL
                                                           ; frame size=4
    000030CC 4F22                   STS.L       PR,@-R15
             tskcmd.c       5596    {
             tskcmd.c       5597      INT data;
             tskcmd.c       5598    
             tskcmd.c       5599      if( result == E_SUCCESS )       data = 0;   // 成功
    000030CE 2448                   TST         R4,R4
    000030D0 0539                   MOVRT       R5
             tskcmd.c       5600      else                            data = 1;   // 失敗
             tskcmd.c       5601    
             tskcmd.c       5602      TplRpMakeSend( 1, data );
    000030D2 B018                   BSR         _TplRpMakeSend
    000030D4 E401                   MOV         #1,R4      ; H'00000001
    000030D6 E551                   MOV         #81,R5     ; H'00000051
             tskcmd.c       5603      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_PRTCL );
    000030D8 D476                   MOV.L       L1387+2,R4 ; H'0000009C+__$tp
    000030DA A169                   BRA         __$TplRidDataSend
    000030DC 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5604    }
             tskcmd.c       5605    /***********************************************************************
             tskcmd.c       5606    * 
             tskcmd.c       5607    * [概要]  ポーリング
             tskcmd.c       5608    * [引数]  メッセージデータ
             tskcmd.c       5609    * [戻値]  −
             tskcmd.c       5610    * [備考]
             tskcmd.c       5611    *                        0   1    2    3    4    5    6    7    8     9    10     11    12
             tskcmd.c       5612    *  TP_RP_SEND_FORM[1]:  STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '*',  ETX,  0x30, 0x30, 0x0d
             tskcmd.c       5613    * 
             tskcmd.c       5614    ***********************************************************************/
             tskcmd.c       5615    static void TpRspFWPOL()
    000030DE              __$TpRspFWPOL:                   ; function: __$TpRspFWPOL
                                                           ; frame size=4
    000030DE 4F22                   STS.L       PR,@-R15
             tskcmd.c       5616    {
             tskcmd.c       5617      TplRpMakeSend( 1, DeviceProtcolNoGet() );       // パラメータ１電文作成
    000030E0 D17F                   MOV.L       L1387+46,R1; _DeviceProtcolNoGet
    000030E2 414B                   JSR/N       @R1
    000030E4 650C                   EXTU.B      R0,R5
    000030E6 B00E                   BSR         _TplRpMakeSend
    000030E8 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5618      TplRpMakeSend( 2, DeviceStatusGet() );          // パラメータ２電文作成
    000030EA D67E                   MOV.L       L1387+50,R6; _DeviceStatusGet
    000030EC 464B                   JSR/N       @R6
    000030EE E402                   MOV         #2,R4      ; H'00000002
    000030F0 B009                   BSR         _TplRpMakeSend
    000030F2 6503                   MOV         R0,R5
             tskcmd.c       5619      TplRpMakeSend( 3, (INT)DeviceStepGet() );       // パラメータ３電文作成
    000030F4 D77C                   MOV.L       L1387+54,R7; _DeviceStepGet
    000030F6 474B                   JSR/N       @R7
    000030F8 650C                   EXTU.B      R0,R5
    000030FA B004                   BSR         _TplRpMakeSend
    000030FC E403                   MOV         #3,R4      ; H'00000003
    000030FE E550                   MOV         #80,R5     ; H'00000050
             tskcmd.c       5620      
             tskcmd.c       5621      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_FWPOL );
    00003100 D46C                   MOV.L       L1387+2,R4 ; H'0000009C+__$tp
    00003102 A155                   BRA         __$TplRidDataSend
    00003104 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5622    }
             tskcmd.c       5623    /***********************************************************************
             tskcmd.c       5624    * 
             tskcmd.c       5625    * [概要]  LED点灯／消灯指示
             tskcmd.c       5626    * [引数]  メッセージデータ
             tskcmd.c       5627    * [戻値]  −
             tskcmd.c       5628    * 
             tskcmd.c       5629    ***********************************************************************/
             tskcmd.c       5630    static void TpRspLDLMP()
             tskcmd.c       5631    {
             tskcmd.c       5632    }
             tskcmd.c       5633    
             tskcmd.c       5634    /***********************************************************************
             tskcmd.c       5635    *     
             tskcmd.c       5636    * [概要]  タッチパネルパラメータ電文作成＆送信
             tskcmd.c       5637    * [引数]  パラメータ番号、パラメータデータ
             tskcmd.c       5638    * [戻値]  −
             tskcmd.c       5639    *     
             tskcmd.c       5640    ***********************************************************************/
             tskcmd.c       5641    void TplRpMakeSend( UB parno, INT pardat )
    00003106              _TplRpMakeSend:                  ; function: TplRpMakeSend
                                                           ; frame size=36
    00003106 4CF0                   MOVMU.L     R12,@-R15
    00003108 7FF8                   ADD         #-8,R15
             tskcmd.c       5642    {
             tskcmd.c       5643      UB bcc;
             tskcmd.c       5644      UB bcch;
             tskcmd.c       5645      UB bccl;
             tskcmd.c       5646      INT  len;
             tskcmd.c       5647    
             tskcmd.c       5648      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    0000310A 6D53                   MOV         R5,R13
    0000310C E63C                   MOV         #60,R6     ; H'0000003C
    0000310E DC77                   MOV.L       L1387+58,R12; __$rspbuf
    00003110 E500                   MOV         #0,R5      ; H'00000000
    00003112 6E43                   MOV         R4,R14
    00003114 D176                   MOV.L       L1387+62,R1; _memset
    00003116 410B                   JSR         @R1
    00003118 64C3                   MOV         R12,R4
             tskcmd.c       5649      
             tskcmd.c       5650      sprintf(rspbuf, "WN RP%0d &H%08X", parno, pardat );
    0000311A 2FD6                   MOV.L       R13,@-R15
    0000311C 64EC                   EXTU.B      R14,R4
    0000311E 2F46                   MOV.L       R4,@-R15
    00003120 D574                   MOV.L       L1387+66,R5; L1646
    00003122 2F56                   MOV.L       R5,@-R15
    00003124 D674                   MOV.L       L1387+70,R6; _sprintf
    00003126 460B                   JSR         @R6
    00003128 64C3                   MOV         R12,R4
    0000312A 7F0C                   ADD         #12,R15
             tskcmd.c       5651      bcc = bcch = bccl = CLR;
    0000312C E700                   MOV         #0,R7      ; H'00000000
    0000312E 2F70                   MOV.B       R7,@R15    ; bccl
             tskcmd.c       5652      
             tskcmd.c       5653      len = strlen(&rspbuf);
    00003130 3F710004               MOV.B       R7,@(4:12,R15); bcch
    00003134 DD71                   MOV.L       L1387+74,R13; _strlen
    00003136 4D0B                   JSR         @R13
    00003138 64C3                   MOV         R12,R4
    0000313A DD5E                   MOV.L       L1387+2,R13; H'0000009C+__$tp
    0000313C 6E03                   MOV         R0,R14
             tskcmd.c       5654      memcpy( &tp.rsp.buf[1], &rspbuf, (len+1) );
    0000313E 7001                   ADD         #1,R0
    00003140 64D3                   MOV         R13,R4
    00003142 7401                   ADD         #1,R4
    00003144 6603                   MOV         R0,R6
    00003146 D15D                   MOV.L       L1387+10,R1; _memcpy
    00003148 410B                   JSR         @R1
    0000314A 65C3                   MOV         R12,R5
             tskcmd.c       5655      tp.rsp.buf[0] = STX;
    0000314C E702                   MOV         #2,R7      ; H'00000002
             tskcmd.c       5656      tp.rsp.buf[(len+1)] = ETX;
    0000314E 6CD3                   MOV         R13,R12
    00003150 7C01                   ADD         #1,R12
    00003152 E103                   MOV         #3,R1      ; H'00000003
    00003154 2D70                   MOV.B       R7,@R13    ; tp.rsp.buf[]
    00003156 60E3                   MOV         R14,R0
    00003158 0C14                   MOV.B       R1,@(R0,R12); tp.rsp.buf[]
             tskcmd.c       5657    
             tskcmd.c       5658      bcc = CalcBCC( &tp.rsp.buf[1], len );
    0000315A 64D3                   MOV         R13,R4
    0000315C 7401                   ADD         #1,R4
    0000315E D159                   MOV.L       L1387+18,R1; _CalcBCC
    00003160 410B                   JSR         @R1
    00003162 65E3                   MOV         R14,R5
    00003164 65F3                   MOV         R15,R5
    00003166 7504                   ADD         #4,R5
    00003168 6403                   MOV         R0,R4
             tskcmd.c       5659      DectoHexASC( bcc, &bcch, &bccl );
    0000316A D765                   MOV.L       L1387+78,R7; _DectoHexASC
    0000316C 470B                   JSR         @R7
    0000316E 66F3                   MOV         R15,R6
    00003170 32F14004               MOV.B       @(4:12,R15),R2; bcch
             tskcmd.c       5660    
             tskcmd.c       5661      tp.rsp.buf[(len+2)] = bcch;
    00003174 6CD3                   MOV         R13,R12
    00003176 7C02                   ADD         #2,R12
    00003178 67F0                   MOV.B       @R15,R7    ; bccl
    0000317A 60E3                   MOV         R14,R0
    0000317C 0C24                   MOV.B       R2,@(R0,R12); tp.rsp.buf[]
             tskcmd.c       5662      tp.rsp.buf[(len+3)] = bccl;
    0000317E 62D3                   MOV         R13,R2
    00003180 7203                   ADD         #3,R2
    00003182 EC0D                   MOV         #13,R12    ; H'0000000D
    00003184 0274                   MOV.B       R7,@(R0,R2); tp.rsp.buf[]
             tskcmd.c       5663      tp.rsp.buf[(len+4)] = CRCHR;
    00003186 62D3                   MOV         R13,R2
    00003188 7204                   ADD         #4,R2
             tskcmd.c       5664      
             tskcmd.c       5665      TplCommDataSend( &tp.rsp.buf[0] , (len+5) );
    0000318A 7E05                   ADD         #5,R14
    0000318C 02C4                   MOV.B       R12,@(R0,R2); tp.rsp.buf[]
    0000318E 65E3                   MOV         R14,R5
    00003190 B156                   BSR         __$TplCommDataSend
    00003192 64D3                   MOV         R13,R4
    00003194 7F08                   ADD         #8,R15
    00003196 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       5666    }
    00003198 006B                   RTS/N
             tskcmd.c       5667    /***********************************************************************
             tskcmd.c       5668    *     
             tskcmd.c       5669    * [概要]  タッチパネルへ運転履歴要求電文作成＆送信
             tskcmd.c       5670    * [引数]  
             tskcmd.c       5671    * [戻値]  −
             tskcmd.c       5672    * [備考]  2WN RP1 XX3XXD
             tskcmd.c       5673    *             12345678901234
             tskcmd.c       5674    ***********************************************************************/
             tskcmd.c       5675    void TplExRunSend()
    0000319A              _TplExRunSend:                   ; function: TplExRunSend
                                                           ; frame size=40
    0000319A 4EF0                   MOVMU.L     R14,@-R15
    0000319C 7FF8                   ADD         #-8,R15
             tskcmd.c       5676    {
             tskcmd.c       5677      UB bcc  = CLR;
             tskcmd.c       5678      UB bcch = CLR;
    0000319E E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       5679      UB bccl = CLR;
             tskcmd.c       5680      INT len = 9;
             tskcmd.c       5681      
             tskcmd.c       5682      sprintf( ( char * )&MentePcSendbuf[1], "WN RP1 %02d", &ExpRunlSeqno );
    000031A0 D158                   MOV.L       L1387+82,R1; __$ExpRunlSeqno
    000031A2 3F010004               MOV.B       R0,@(4:12,R15); bcch
    000031A6 0F04                   MOV.B       R0,@(R0,R15); bccl
    000031A8 2F16                   MOV.L       R1,@-R15
    000031AA D457                   MOV.L       L1387+86,R4; L1647
    000031AC 2F46                   MOV.L       R4,@-R15
    000031AE DE57                   MOV.L       L1387+90,R14; _MentePcSendbuf
    000031B0 64E3                   MOV         R14,R4
    000031B2 D551                   MOV.L       L1387+70,R5; _sprintf
    000031B4 450B                   JSR         @R5
    000031B6 7401                   ADD         #1,R4
    000031B8 7F08                   ADD         #8,R15
             tskcmd.c       5683    
             tskcmd.c       5684      MentePcSendbuf[0] = STX;
    000031BA E602                   MOV         #2,R6      ; H'00000002
             tskcmd.c       5685      MentePcSendbuf[(len+1)] = ETX;
    000031BC E003                   MOV         #3,R0      ; H'00000003
    000031BE 2E60                   MOV.B       R6,@R14    ; MentePcSendbuf[]
    000031C0 80EA                   MOV.B       R0,@(10,R14); MentePcSendbuf[]
             tskcmd.c       5686    
             tskcmd.c       5687      bcc = CalcBCC( &MentePcSendbuf[1], len );
    000031C2 64E3                   MOV         R14,R4
    000031C4 7401                   ADD         #1,R4
    000031C6 D73F                   MOV.L       L1387+18,R7; _CalcBCC
    000031C8 470B                   JSR         @R7
    000031CA E509                   MOV         #9,R5      ; H'00000009
    000031CC 65F3                   MOV         R15,R5
    000031CE 7504                   ADD         #4,R5
    000031D0 6403                   MOV         R0,R4
             tskcmd.c       5688      DectoHexASC( bcc, &bcch, &bccl );
    000031D2 D14B                   MOV.L       L1387+78,R1; _DectoHexASC
    000031D4 410B                   JSR         @R1
    000031D6 66F3                   MOV         R15,R6
             tskcmd.c       5689    
             tskcmd.c       5690      MentePcSendbuf[(len+2)] = bcch;
    000031D8 30F14004               MOV.B       @(4:12,R15),R0; bcch
             tskcmd.c       5691      MentePcSendbuf[(len+3)] = bccl;
             tskcmd.c       5692      MentePcSendbuf[(len+4)] = CRCHR;
             tskcmd.c       5693    
             tskcmd.c       5694      mbx_send    (
             tskcmd.c       5695                  ID_TSK_CMD,
             tskcmd.c       5696                  ID_MPF_TXEX,
             tskcmd.c       5697                  ID_MBX_TXEX,
             tskcmd.c       5698                    NO_DATA,
             tskcmd.c       5699                  NO_DATA,
             tskcmd.c       5700                  ID_MSG_EXPRUNL,
             tskcmd.c       5701                  0,
             tskcmd.c       5702                  0,
             tskcmd.c       5703                  &MentePcSendbuf[0],
             tskcmd.c       5704                  (len+5)
             tskcmd.c       5705              );
    000031DC E50E                   MOV         #14,R5     ; H'0000000E
    000031DE 80EB                   MOV.B       R0,@(11,R14); MentePcSendbuf[]
    000031E0 30F14000               MOV.B       @(0:12,R15),R0; bccl
    000031E4 80EC                   MOV.B       R0,@(12,R14); MentePcSendbuf[]
    000031E6 E00D                   MOV         #13,R0     ; H'0000000D
    000031E8 80ED                   MOV.B       R0,@(13,R14); MentePcSendbuf[]
    000031EA 2F56                   MOV.L       R5,@-R15
    000031EC 2FE6                   MOV.L       R14,@-R15
    000031EE E600                   MOV         #0,R6      ; H'00000000
    000031F0 2F66                   MOV.L       R6,@-R15
    000031F2 2F66                   MOV.L       R6,@-R15
    000031F4 E728                   MOV         #40,R7     ; H'00000028
    000031F6 2F76                   MOV.L       R7,@-R15
    000031F8 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    000031FA 6EEC                   EXTU.B      R14,R14
    000031FC 67E3                   MOV         R14,R7
    000031FE 2FE6                   MOV.L       R14,@-R15
    00003200 E604                   MOV         #4,R6      ; H'00000004
    00003202 E503                   MOV         #3,R5      ; H'00000003
    00003204 D242                   MOV.L       L1387+94,R2; _mbx_send
    00003206 420B                   JSR         @R2
    00003208 E405                   MOV         #5,R4      ; H'00000005
    0000320A 7F20                   ADD         #32,R15
    0000320C 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5706    }
    0000320E 006B                   RTS/N
             tskcmd.c       5707    static    INT  lendbg;
             tskcmd.c       5708    /***********************************************************************
             tskcmd.c       5709    *     
             tskcmd.c       5710    * [概要]  タッチパネルパラメータ電文作成＆送信
             tskcmd.c       5711    * [引数]  パラメータ番号、パラメータデータ
             tskcmd.c       5712    * [戻値]  −
             tskcmd.c       5713    *     
             tskcmd.c       5714    ***********************************************************************/
             tskcmd.c       5715    void TplRpDataSend()
    00003210              _TplRpDataSend:                  ; function: TplRpDataSend
                                                           ; frame size=44
    00003210 4DF0                   MOVMU.L     R13,@-R15
    00003212 7FF8                   ADD         #-8,R15
             tskcmd.c       5716    {
             tskcmd.c       5717      UB bcc;
             tskcmd.c       5718      UB bcch;
             tskcmd.c       5719      UB bccl;
             tskcmd.c       5720      INT  len;
             tskcmd.c       5721    
             tskcmd.c       5722      memset( &MentePcSendbuf[0], CLR, sizeof( MentePcSendbuf ) );
    00003214 DD3D                   MOV.L       L1387+90,R13; _MentePcSendbuf
    00003216 E500                   MOV         #0,R5      ; H'00000000
    00003218 06000D48               MOVI20      #3400,R6   ; H'00000D48
    0000321C D134                   MOV.L       L1387+62,R1; _memset
    0000321E 410B                   JSR         @R1
    00003220 64D3                   MOV         R13,R4
             tskcmd.c       5723      sprintf( ( char * )&MentePcSendbuf[1], "WN RP100 %s", &ImpExpRcvData[0]);
    00003222 D43C                   MOV.L       L1387+98,R4; __$ImpExpRcvData
    00003224 2F46                   MOV.L       R4,@-R15
    00003226 D53C                   MOV.L       L1387+102,R5; L1648
    00003228 2F56                   MOV.L       R5,@-R15
    0000322A 64D3                   MOV         R13,R4
    0000322C D632                   MOV.L       L1387+70,R6; _sprintf
    0000322E 460B                   JSR         @R6
    00003230 7401                   ADD         #1,R4
    00003232 7F08                   ADD         #8,R15
             tskcmd.c       5724      
             tskcmd.c       5725      bcc = bcch = bccl = CLR;
    00003234 E000                   MOV         #0,R0      ; H'00000000
    00003236 0F04                   MOV.B       R0,@(R0,R15); bccl
             tskcmd.c       5726    
             tskcmd.c       5727      len = strlen(&MentePcSendbuf[1]);
    00003238 64D3                   MOV         R13,R4
    0000323A 3F010004               MOV.B       R0,@(4:12,R15); bcch
    0000323E D72F                   MOV.L       L1387+74,R7; _strlen
    00003240 470B                   JSR         @R7
    00003242 7401                   ADD         #1,R4
             tskcmd.c       5728      lendbg = len;
    00003244 D135                   MOV.L       L1387+106,R1; __$lendbg
    00003246 2102                   MOV.L       R0,@R1     ; lendbg
             tskcmd.c       5729      
             tskcmd.c       5730      MentePcSendbuf[0] = STX;
    00003248 E102                   MOV         #2,R1      ; H'00000002
             tskcmd.c       5731      MentePcSendbuf[(len+1)] = ETX;
    0000324A 64D3                   MOV         R13,R4
    0000324C 7401                   ADD         #1,R4
    0000324E E203                   MOV         #3,R2      ; H'00000003
    00003250 2D10                   MOV.B       R1,@R13    ; MentePcSendbuf[]
    00003252 0424                   MOV.B       R2,@(R0,R4); MentePcSendbuf[]
             tskcmd.c       5732    
             tskcmd.c       5733      bcc = CalcBCC( &MentePcSendbuf[1], len );
    00003254 64D3                   MOV         R13,R4
    00003256 7401                   ADD         #1,R4
    00003258 6E03                   MOV         R0,R14
    0000325A D71A                   MOV.L       L1387+18,R7; _CalcBCC
    0000325C 470B                   JSR         @R7
    0000325E 6503                   MOV         R0,R5
    00003260 65F3                   MOV         R15,R5
    00003262 7504                   ADD         #4,R5
    00003264 6403                   MOV         R0,R4
             tskcmd.c       5734      DectoHexASC( bcc, &bcch, &bccl );
    00003266 D126                   MOV.L       L1387+78,R1; _DectoHexASC
    00003268 410B                   JSR         @R1
    0000326A 66F3                   MOV         R15,R6
    0000326C 37F14004               MOV.B       @(4:12,R15),R7; bcch
             tskcmd.c       5735    
             tskcmd.c       5736      MentePcSendbuf[(len+2)] = bcch;
    00003270 65D3                   MOV         R13,R5
    00003272 7502                   ADD         #2,R5
    00003274 31F14000               MOV.B       @(0:12,R15),R1; bccl
    00003278 60E3                   MOV         R14,R0
    0000327A 0574                   MOV.B       R7,@(R0,R5); MentePcSendbuf[]
             tskcmd.c       5737      MentePcSendbuf[(len+3)] = bccl;
    0000327C 67D3                   MOV         R13,R7
    0000327E 7703                   ADD         #3,R7
    00003280 0714                   MOV.B       R1,@(R0,R7); MentePcSendbuf[]
             tskcmd.c       5738      MentePcSendbuf[(len+4)] = CRCHR;
    00003282 61D3                   MOV         R13,R1
    00003284 7104                   ADD         #4,R1
    00003286 E20D                   MOV         #13,R2     ; H'0000000D
             tskcmd.c       5739    
             tskcmd.c       5740      mbx_send    (
             tskcmd.c       5741                  ID_TSK_CMD,
             tskcmd.c       5742                  ID_MPF_TXEX,
             tskcmd.c       5743                  ID_MBX_TXEX,
             tskcmd.c       5744                    NO_DATA,            // procid
             tskcmd.c       5745                  NO_DATA,
             tskcmd.c       5746                  ID_MSG_IMPPDAT,
             tskcmd.c       5747                  0,
             tskcmd.c       5748                  0,
             tskcmd.c       5749                  &MentePcSendbuf[0],
             tskcmd.c       5750                  (len+5)
             tskcmd.c       5751              );
    00003288 7E05                   ADD         #5,R14
    0000328A 0124                   MOV.B       R2,@(R0,R1); MentePcSendbuf[]
    0000328C 2FE6                   MOV.L       R14,@-R15
    0000328E 2FD6                   MOV.L       R13,@-R15
    00003290 ED00                   MOV         #0,R13     ; H'00000000
    00003292 2FD6                   MOV.L       R13,@-R15
    00003294 2FD6                   MOV.L       R13,@-R15
    00003296 EE24                   MOV         #36,R14    ; H'00000024
    00003298 2FE6                   MOV.L       R14,@-R15
    0000329A EDFF                   MOV         #-1,R13    ; H'FFFFFFFF
    0000329C 6DDC                   EXTU.B      R13,R13
    0000329E 67D3                   MOV         R13,R7
    000032A0 2FD6                   MOV.L       R13,@-R15
    000032A2 E604                   MOV         #4,R6      ; H'00000004
    000032A4 E503                   MOV         #3,R5      ; H'00000003
    000032A6 D21A                   MOV.L       L1387+94,R2; _mbx_send
    000032A8 420B                   JSR         @R2
    000032AA E405                   MOV         #5,R4      ; H'00000005
    000032AC 7F20                   ADD         #32,R15
    000032AE 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       5752    }
    000032B0 006B                   RTS/N
    000032B2              L1387:
    000032B2 00000002               .RES.W      1
    000032B4 <0000009C>             .DATA.L     H'0000009C+__$tp
    000032B8 <00000000>             .DATA.L     __$TP_RP1_SEND_FORM04
    000032BC <00000000>             .DATA.L     _memcpy
    000032C0 <00000000>             .DATA.L     _VER_INFO_TO_TP
    000032C4 <00000000>             .DATA.L     _CalcBCC
    000032C8 <00000000>             .DATA.L     _HextoAsc
    000032CC <00000000>             .DATA.L     __$TP_RP1_SEND_FORM02
    000032D0 <00000000>             .DATA.L     _DectoAscH
    000032D4 <00000000>             .DATA.L     _DectoAscL
    000032D8 <00000000>             .DATA.L     __$TP_RP1_SEND_FORM01
    000032DC <00000000>             .DATA.L     __$BkP10
    000032E0 <00000000>             .DATA.L     _DeviceProtcolNoGet
    000032E4 <00000000>             .DATA.L     _DeviceStatusGet
    000032E8 <00000000>             .DATA.L     _DeviceStepGet
    000032EC <00000000>             .DATA.L     __$rspbuf
    000032F0 <00000000>             .DATA.L     _memset
    000032F4 <00000000>             .DATA.L     L1646
    000032F8 <00000000>             .DATA.L     _sprintf
    000032FC <00000000>             .DATA.L     _strlen
    00003300 <00000000>             .DATA.L     _DectoHexASC
    00003304 <00000000>             .DATA.L     __$ExpRunlSeqno
    00003308 <00000000>             .DATA.L     L1647
    0000330C <00000000>             .DATA.L     _MentePcSendbuf
    00003310 <00000000>             .DATA.L     _mbx_send
    00003314 <00000000>             .DATA.L     __$ImpExpRcvData
    00003318 <00000000>             .DATA.L     L1648
    0000331C <00000000>             .DATA.L     __$lendbg
             tskcmd.c       5753    /***********************************************************************
             tskcmd.c       5754    *     
             tskcmd.c       5755    * [概要]  タッチパネルへエクスポート要求作成＆送信
             tskcmd.c       5756    * [引数]  
             tskcmd.c       5757    * [戻値]  −
             tskcmd.c       5758    *     
             tskcmd.c       5759    ***********************************************************************/
             tskcmd.c       5760    void TplRpExpReqSend()
    00003320              _TplRpExpReqSend:                ; function: TplRpExpReqSend
                                                           ; frame size=44
    00003320 4DF0                   MOVMU.L     R13,@-R15
    00003322 7FF8                   ADD         #-8,R15
             tskcmd.c       5761    {
             tskcmd.c       5762      UB bcc;
             tskcmd.c       5763      UB bcch;
             tskcmd.c       5764      UB bccl;
             tskcmd.c       5765      INT  len;
             tskcmd.c       5766    
             tskcmd.c       5767      sprintf( ( char * )&MentePcSendbuf[1], "WN RP1 %s", &ImpExpRcvData[0] );
    00003324 D158                   MOV.L       L664+2,R1  ; __$ImpExpRcvData
    00003326 2F16                   MOV.L       R1,@-R15
    00003328 D158                   MOV.L       L664+6,R1  ; L1650
    0000332A 2F16                   MOV.L       R1,@-R15
    0000332C DD58                   MOV.L       L664+10,R13; _MentePcSendbuf
    0000332E 64D3                   MOV         R13,R4
    00003330 D258                   MOV.L       L664+14,R2 ; _sprintf
    00003332 420B                   JSR         @R2
    00003334 7401                   ADD         #1,R4
    00003336 7F08                   ADD         #8,R15
             tskcmd.c       5768      bcc = bcch = bccl = CLR;
    00003338 E000                   MOV         #0,R0      ; H'00000000
    0000333A 0F04                   MOV.B       R0,@(R0,R15); bccl
    0000333C 3F010004               MOV.B       R0,@(4:12,R15); bcch
             tskcmd.c       5769    
             tskcmd.c       5770      len = strlen(&ImpExpRcvData);
    00003340 D451                   MOV.L       L664+2,R4  ; __$ImpExpRcvData
    00003342 D555                   MOV.L       L664+18,R5 ; _strlen
    00003344 454B                   JSR/N       @R5
             tskcmd.c       5771      MentePcSendbuf[0] = STX;
    00003346 E602                   MOV         #2,R6      ; H'00000002
             tskcmd.c       5772      MentePcSendbuf[(len+1)] = ETX;
    00003348 67D3                   MOV         R13,R7
    0000334A 7701                   ADD         #1,R7
    0000334C E403                   MOV         #3,R4      ; H'00000003
    0000334E 2D60                   MOV.B       R6,@R13    ; MentePcSendbuf[]
    00003350 6E03                   MOV         R0,R14
    00003352 0744                   MOV.B       R4,@(R0,R7); MentePcSendbuf[]
             tskcmd.c       5773    
             tskcmd.c       5774      bcc = CalcBCC( &MentePcSendbuf[1], len );
    00003354 64D3                   MOV         R13,R4
    00003356 7401                   ADD         #1,R4
    00003358 D150                   MOV.L       L664+22,R1 ; _CalcBCC
    0000335A 410B                   JSR         @R1
    0000335C 6503                   MOV         R0,R5
    0000335E 65F3                   MOV         R15,R5
    00003360 7504                   ADD         #4,R5
    00003362 6403                   MOV         R0,R4
             tskcmd.c       5775      DectoHexASC( bcc, &bcch, &bccl );
    00003364 D74E                   MOV.L       L664+26,R7 ; _DectoHexASC
    00003366 470B                   JSR         @R7
    00003368 66F3                   MOV         R15,R6
    0000336A 35F14004               MOV.B       @(4:12,R15),R5; bcch
             tskcmd.c       5776    
             tskcmd.c       5777      MentePcSendbuf[(len+2)] = bcch;
    0000336E 61D3                   MOV         R13,R1
    00003370 7102                   ADD         #2,R1
    00003372 37F14000               MOV.B       @(0:12,R15),R7; bccl
    00003376 60E3                   MOV         R14,R0
    00003378 0154                   MOV.B       R5,@(R0,R1); MentePcSendbuf[]
             tskcmd.c       5778      MentePcSendbuf[(len+3)] = bccl;
    0000337A 64D3                   MOV         R13,R4
    0000337C 7403                   ADD         #3,R4
             tskcmd.c       5779      MentePcSendbuf[(len+4)] = CRCHR;
    0000337E 65D3                   MOV         R13,R5
    00003380 7504                   ADD         #4,R5
    00003382 E20D                   MOV         #13,R2     ; H'0000000D
             tskcmd.c       5780    
             tskcmd.c       5781      mbx_send    (
             tskcmd.c       5782                  ID_TSK_CMD,
             tskcmd.c       5783                  ID_MPF_TXEX,
             tskcmd.c       5784                  ID_MBX_TXEX,
             tskcmd.c       5785                    NO_DATA,            // procid
             tskcmd.c       5786                  NO_DATA,
             tskcmd.c       5787                  ID_MSG_IMPPDAT,
             tskcmd.c       5788                  0,
             tskcmd.c       5789                  0,
             tskcmd.c       5790                  &MentePcSendbuf[0],
             tskcmd.c       5791                  (len+5)
             tskcmd.c       5792              );
    00003384 7E05                   ADD         #5,R14
    00003386 0474                   MOV.B       R7,@(R0,R4); MentePcSendbuf[]
    00003388 0524                   MOV.B       R2,@(R0,R5); MentePcSendbuf[]
    0000338A 2FE6                   MOV.L       R14,@-R15
    0000338C 2FD6                   MOV.L       R13,@-R15
    0000338E E700                   MOV         #0,R7      ; H'00000000
    00003390 2F76                   MOV.L       R7,@-R15
    00003392 2F76                   MOV.L       R7,@-R15
    00003394 ED24                   MOV         #36,R13    ; H'00000024
    00003396 2FD6                   MOV.L       R13,@-R15
    00003398 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    0000339A 6EEC                   EXTU.B      R14,R14
    0000339C 67E3                   MOV         R14,R7
    0000339E 2FE6                   MOV.L       R14,@-R15
    000033A0 E604                   MOV         #4,R6      ; H'00000004
    000033A2 E503                   MOV         #3,R5      ; H'00000003
    000033A4 D23F                   MOV.L       L664+30,R2 ; _mbx_send
    000033A6 420B                   JSR         @R2
    000033A8 E405                   MOV         #5,R4      ; H'00000005
    000033AA 7F20                   ADD         #32,R15
    000033AC 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       5793    }
    000033AE 006B                   RTS/N
             tskcmd.c       5794    
             tskcmd.c       5795    /***********************************************************************
             tskcmd.c       5796    *     
             tskcmd.c       5797    * [概要]  タッチパネル識別ID電文作成
             tskcmd.c       5798    * [引数]  電文、識別ID
             tskcmd.c       5799    * [戻値]  −
             tskcmd.c       5800    *     
             tskcmd.c       5801    ***********************************************************************/
             tskcmd.c       5802    static void TplRidDataSend( UB *txdat, UB id )
    000033B0              __$TplRidDataSend:               ; function: __$TplRidDataSend
                                                           ; frame size=52
    000033B0 49F0                   MOVMU.L     R9,@-R15
    000033B2 D13D                   MOV.L       L664+34,R1 ; __$TP_RID_SEND_FORM
             tskcmd.c       5803    {
             tskcmd.c       5804    // 識別01 コマンド                                        0    1    2    3    4    5    6    7    8    9   10
             tskcmd.c       5805    // static const TPN_REQ_DAT TP_RID_SEND_FORM   = { 11, STX, 'W', 'N', ' ', 'R', 'I', 'D', ' ', '*', '*', ETX, 0x30, 0x30, 0x0d };
             tskcmd.c       5806      UB  bcccal;
             tskcmd.c       5807      UB  bcccal_h;
             tskcmd.c       5808      UB  bcccal_l;
             tskcmd.c       5809      UB  datsiz;
             tskcmd.c       5810      UB  calsiz;
             tskcmd.c       5811      UB  comsiz;
             tskcmd.c       5812    
             tskcmd.c       5813      datsiz = TP_RID_SEND_FORM.siz;
    000033B4 6A12                   MOV.L       @R1,R10    ; TP_RID_SEND_FORM.siz
    000033B6 6C43                   MOV         R4,R12
    000033B8 6D53                   MOV         R5,R13
             tskcmd.c       5814      calsiz = TP_RID_SEND_FORM.siz - 2;
             tskcmd.c       5815      comsiz = TP_RID_SEND_FORM.siz + 3;
             tskcmd.c       5816      memcpy( &txdat[0],&TP_RID_SEND_FORM.req[0], comsiz);
    000033BA 6EA3                   MOV         R10,R14
    000033BC 7E03                   ADD         #3,R14
    000033BE 69EC                   EXTU.B      R14,R9
    000033C0 D53A                   MOV.L       L664+38,R5 ; H'00000004+__$TP_RID_SEND_FORM
    000033C2 D73B                   MOV.L       L664+42,R7 ; _memcpy
    000033C4 470B                   JSR         @R7
    000033C6 6693                   MOV         R9,R6
             tskcmd.c       5817      txdat[10] = HextoAsc(  ((id >> 4) & 0x0f)  );
    000033C8 6EDC                   EXTU.B      R13,R14
    000033CA E1FC                   MOV         #-4,R1     ; H'FFFFFFFC
    000033CC 60E3                   MOV         R14,R0
    000033CE 401C                   SHAD        R1,R0
    000033D0 C90F                   AND         #15,R0
    000033D2 6BA3                   MOV         R10,R11
    000033D4 6403                   MOV         R0,R4
    000033D6 DD37                   MOV.L       L664+46,R13; _HextoAsc
    000033D8 4D0B                   JSR         @R13
    000033DA 7BFE                   ADD         #-2,R11
    000033DC 80CA                   MOV.B       R0,@(10,R12); txdat[]
             tskcmd.c       5818      txdat[11] = HextoAsc(  ( id       & 0x0f)  );
    000033DE 60E3                   MOV         R14,R0
    000033E0 C90F                   AND         #15,R0
    000033E2 6AAC                   EXTU.B      R10,R10
    000033E4 4D0B                   JSR         @R13
    000033E6 6403                   MOV         R0,R4
    000033E8 80CB                   MOV.B       R0,@(11,R12); txdat[]
             tskcmd.c       5819      
             tskcmd.c       5820      
             tskcmd.c       5821      bcccal = CalcBCC( &txdat[1], calsiz );
    000033EA 65BC                   EXTU.B      R11,R5
    000033EC 64C3                   MOV         R12,R4
    000033EE DB2B                   MOV.L       L664+22,R11; _CalcBCC
    000033F0 4B0B                   JSR         @R11
    000033F2 7401                   ADD         #1,R4
    000033F4 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5822      txdat[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    000033F6 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    000033F8 60E3                   MOV         R14,R0
    000033FA 402C                   SHAD        R2,R0
    000033FC C90F                   AND         #15,R0
    000033FE 6BC3                   MOV         R12,R11
    00003400 6403                   MOV         R0,R4
    00003402 4D0B                   JSR         @R13
    00003404 7B01                   ADD         #1,R11
    00003406 6103                   MOV         R0,R1
    00003408 60A3                   MOV         R10,R0
    0000340A 0C14                   MOV.B       R1,@(R0,R12); txdat[]
             tskcmd.c       5823      txdat[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    0000340C 60E3                   MOV         R14,R0
    0000340E C90F                   AND         #15,R0
    00003410 4D0B                   JSR         @R13
    00003412 6403                   MOV         R0,R4
    00003414 6703                   MOV         R0,R7
    00003416 60A3                   MOV         R10,R0
    00003418 0B74                   MOV.B       R7,@(R0,R11); txdat[]
             tskcmd.c       5824    
             tskcmd.c       5825      mbx_send    (
             tskcmd.c       5826                  ID_TSK_CMD,
             tskcmd.c       5827                  ID_MPF_TXEX,
             tskcmd.c       5828                  ID_MBX_TXEX,
             tskcmd.c       5829                    NO_DATA,            // procid
             tskcmd.c       5830                  NO_DATA,
             tskcmd.c       5831                  ID_MSG_CMD,
             tskcmd.c       5832                  0,
             tskcmd.c       5833                  0,
             tskcmd.c       5834                  txdat,
             tskcmd.c       5835                  comsiz
             tskcmd.c       5836              );
    0000341A 2F96                   MOV.L       R9,@-R15
    0000341C 2FC6                   MOV.L       R12,@-R15
    0000341E E900                   MOV         #0,R9      ; H'00000000
    00003420 2F96                   MOV.L       R9,@-R15
    00003422 2F96                   MOV.L       R9,@-R15
    00003424 EA64                   MOV         #100,R10   ; H'00000064
    00003426 2FA6                   MOV.L       R10,@-R15
    00003428 ECFF                   MOV         #-1,R12    ; H'FFFFFFFF
    0000342A 6CCC                   EXTU.B      R12,R12
    0000342C 67C3                   MOV         R12,R7
    0000342E 2FC6                   MOV.L       R12,@-R15
    00003430 E604                   MOV         #4,R6      ; H'00000004
    00003432 E503                   MOV         #3,R5      ; H'00000003
    00003434 D21B                   MOV.L       L664+30,R2 ; _mbx_send
    00003436 420B                   JSR         @R2
    00003438 E405                   MOV         #5,R4      ; H'00000005
    0000343A 7F18                   ADD         #24,R15
    0000343C 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       5837    }
    0000343E 006B                   RTS/N
             tskcmd.c       5838    /***********************************************************************
             tskcmd.c       5839    *     
             tskcmd.c       5840    * [概要]  タッチパネル送信データを送信タスクへ通知
             tskcmd.c       5841    * [引数]  電文、識別ID
             tskcmd.c       5842    * [戻値]  −
             tskcmd.c       5843    *     
             tskcmd.c       5844    ***********************************************************************/
             tskcmd.c       5845    static void TplCommDataSend( UB *tpdat, INT tpsiz )
    00003440              __$TplCommDataSend:              ; function: __$TplCommDataSend
                                                           ; frame size=28
    00003440 4F22                   STS.L       PR,@-R15
             tskcmd.c       5846    {
             tskcmd.c       5847      mbx_send    (
             tskcmd.c       5848                  ID_TSK_CMD,
             tskcmd.c       5849                  ID_MPF_TXEX,
             tskcmd.c       5850                  ID_MBX_TXEX,
             tskcmd.c       5851                    NO_DATA,            // procid
             tskcmd.c       5852                  NO_DATA,
             tskcmd.c       5853                  ID_MSG_CMD,
             tskcmd.c       5854                  0,
             tskcmd.c       5855                  0,
             tskcmd.c       5856                  tpdat,
             tskcmd.c       5857                  tpsiz
             tskcmd.c       5858              );
    00003442 2F56                   MOV.L       R5,@-R15
    00003444 2F46                   MOV.L       R4,@-R15
    00003446 E100                   MOV         #0,R1      ; H'00000000
    00003448 2F16                   MOV.L       R1,@-R15
    0000344A 2F16                   MOV.L       R1,@-R15
    0000344C E464                   MOV         #100,R4    ; H'00000064
    0000344E 2F46                   MOV.L       R4,@-R15
    00003450 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00003452 666C                   EXTU.B      R6,R6
    00003454 6763                   MOV         R6,R7
    00003456 2F66                   MOV.L       R6,@-R15
    00003458 E604                   MOV         #4,R6      ; H'00000004
    0000345A E503                   MOV         #3,R5      ; H'00000003
    0000345C D211                   MOV.L       L664+30,R2 ; _mbx_send
    0000345E 420B                   JSR         @R2
    00003460 E405                   MOV         #5,R4      ; H'00000005
    00003462 7F18                   ADD         #24,R15
    00003464 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5859    }
    00003466 006B                   RTS/N
             tskcmd.c       5860    /***********************************************************************
             tskcmd.c       5861    *     
             tskcmd.c       5862    * [概要]  タッチパネル送信データを送信タスクへ通知
             tskcmd.c       5863    * [引数]  電文、識別ID
             tskcmd.c       5864    * [戻値]  −
             tskcmd.c       5865    *     
             tskcmd.c       5866    ***********************************************************************/
             tskcmd.c       5867    static void TplCommDataSendImp( UB *tpdat, INT tpsiz, UB msg )
             tskcmd.c       5868    {
             tskcmd.c       5869      mbx_send    (
             tskcmd.c       5870                  ID_TSK_CMD,
             tskcmd.c       5871                  ID_MPF_TXEX,
             tskcmd.c       5872                  ID_MBX_TXEX,
             tskcmd.c       5873                    NO_DATA,            // procid
             tskcmd.c       5874                  NO_DATA,
             tskcmd.c       5875                  msg,
             tskcmd.c       5876                  0,
             tskcmd.c       5877                  0,
             tskcmd.c       5878                  tpdat,
             tskcmd.c       5879                  tpsiz
             tskcmd.c       5880              );
             tskcmd.c       5881    }
             tskcmd.c       5882    
             tskcmd.c       5883    /***********************************************************************
             tskcmd.c       5884    * 
             tskcmd.c       5885    * [概要]  
             tskcmd.c       5886    * [引数]  
             tskcmd.c       5887    * [戻値]  0xff:電文異常
             tskcmd.c       5888    * 
             tskcmd.c       5889    ***********************************************************************/
             tskcmd.c       5890    static ER TpCmdCheck( T_CMD_MSG* mrcv )
             tskcmd.c       5891    {
             tskcmd.c       5892      ER  err = E_COM_CMDDEF;
             tskcmd.c       5893      UB  id;
             tskcmd.c       5894      UB  cmd1wk = 'A';
             tskcmd.c       5895      UB  cmd2wk = '$';
             tskcmd.c       5896    
             tskcmd.c       5897      
             tskcmd.c       5898      // TPコマンドチェック
             tskcmd.c       5899      if( 
             tskcmd.c       5900          ( mrcv->msgdata.data[0]  == cmd1wk  )&&
             tskcmd.c       5901          ( mrcv->msgdata.data[1]  == cmd2wk  ) 
             tskcmd.c       5902      )
             tskcmd.c       5903      {
             tskcmd.c       5904          id    = ((AsctoHex( mrcv->msgdata.data[2] ) << 4) & 0xf0);
             tskcmd.c       5905          id   |= ((AsctoHex( mrcv->msgdata.data[3] )     ) & 0x0f);
             tskcmd.c       5906    
             tskcmd.c       5907          // 識別IDチェック
             tskcmd.c       5908          if(
             tskcmd.c       5909              (( id >= ID_TPL_FWVER  )&&( id <= ID_TPL_INITA  ))||
             tskcmd.c       5910              (( id >= ID_TPL_INF01  )&&( id <= ID_TPL_INF10  ))||
             tskcmd.c       5911              (( id >= ID_TPL_REC01  )&&( id <= ID_TPL_REC10  ))||
             tskcmd.c       5912              (( id >= ID_TPL_CHG01  )&&( id <= ID_TPL_CHG10  ))||
             tskcmd.c       5913              (( id >= ID_TPL_DEL01  )&&( id <= ID_TPL_DEL10  ))||
             tskcmd.c       5914              (( id >= ID_TPL_FWPOL  )&&( id <= ID_TPL_ABORT  ))||
             tskcmd.c       5915              (( id >= ID_TPL_OPTCD  )&&( id <= ID_TPL_CLALL  ))||
             tskcmd.c       5916              (( id >= ID_TPL_LDLMP  )&&( id <= ID_TPL_PTLMP  ))
             tskcmd.c       5917          )
             tskcmd.c       5918          {
             tskcmd.c       5919              // 正常
             tskcmd.c       5920              err = E_SUCCESS;
             tskcmd.c       5921          }
             tskcmd.c       5922      }
             tskcmd.c       5923    
             tskcmd.c       5924      return( err );
             tskcmd.c       5925    }
             tskcmd.c       5926    /***********************************************************************
             tskcmd.c       5927    * 
             tskcmd.c       5928    * [概要]  QG12S処理リスト
             tskcmd.c       5929    * [引数]  
             tskcmd.c       5930    * [戻値]  NO_DATA：空き無し
             tskcmd.c       5931    * 
             tskcmd.c       5932    ***********************************************************************/
             tskcmd.c       5933    static ER QgProcList( T_CMD_MSG* mrcv )
    00003468              __$QgProcList:                   ; function: __$QgProcList
                                                           ; frame size=4
    00003468 4F22                   STS.L       PR,@-R15
             tskcmd.c       5934    {
             tskcmd.c       5935      ER  result = E_SUCCESS;
             tskcmd.c       5936      UB  prid1;
             tskcmd.c       5937      
             tskcmd.c       5938      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       5939    
             tskcmd.c       5940      switch( prid1 )
    0000346A 36418018               MOVU.B      @(24,R4),R6; (mrcv)->prid1
    0000346E E161                   MOV         #97,R1     ; H'00000061
    00003470 76FF                   ADD         #-1,R6
    00003472 3616                   CMP/HI      R1,R6
    00003474 8F02                   BF/S        L1409
    00003476 E500                   MOV         #0,R5      ; H'00000000
    00003478 A087                   BRA         L663
    0000347A 0009                   NOP
    0000347C              L1409:
    0000347C 4600                   SHLL        R6
    0000347E C70E                   MOVA        L665,R0
    00003480 006D                   MOV.W       @(R0,R6),R0
    00003482 0023                   BRAF        R0
    00003484 0009                   NOP
    00003486              L664:
    00003486 00000002               .RES.W      1
    00003488 <00000000>             .DATA.L     __$ImpExpRcvData
    0000348C <00000000>             .DATA.L     L1650
    00003490 <00000000>             .DATA.L     _MentePcSendbuf
    00003494 <00000000>             .DATA.L     _sprintf
    00003498 <00000000>             .DATA.L     _strlen
    0000349C <00000000>             .DATA.L     _CalcBCC
    000034A0 <00000000>             .DATA.L     _DectoHexASC
    000034A4 <00000000>             .DATA.L     _mbx_send
    000034A8 <00000000>             .DATA.L     __$TP_RID_SEND_FORM
    000034AC <00000004>             .DATA.L     H'00000004+__$TP_RID_SEND_FORM
    000034B0 <00000000>             .DATA.L     _memcpy
    000034B4 <00000000>             .DATA.L     _HextoAsc
    000034B8              L665:
    000034B8 0104                   .DATA.W     L598-L664
    000034BA 0104                   .DATA.W     L599-L664
    000034BC 0104                   .DATA.W     L600-L664
    000034BE 0104                   .DATA.W     L601-L664
    000034C0 00F6                   .DATA.W     L602-L664
    000034C2 0104                   .DATA.W     L597-L664
    000034C4 0104                   .DATA.W     L597-L664
    000034C6 0104                   .DATA.W     L603-L664
    000034C8 0104                   .DATA.W     L597-L664
    000034CA 0104                   .DATA.W     L597-L664
    000034CC 0104                   .DATA.W     L597-L664
    000034CE 0104                   .DATA.W     L597-L664
    000034D0 0104                   .DATA.W     L597-L664
    000034D2 0104                   .DATA.W     L597-L664
    000034D4 0104                   .DATA.W     L597-L664
    000034D6 0104                   .DATA.W     L597-L664
    000034D8 0104                   .DATA.W     L604-L664
    000034DA 0104                   .DATA.W     L605-L664
    000034DC 0104                   .DATA.W     L606-L664
    000034DE 0104                   .DATA.W     L607-L664
    000034E0 0104                   .DATA.W     L608-L664
    000034E2 0104                   .DATA.W     L609-L664
    000034E4 0104                   .DATA.W     L610-L664
    000034E6 0104                   .DATA.W     L611-L664
    000034E8 0104                   .DATA.W     L612-L664
    000034EA 0104                   .DATA.W     L613-L664
    000034EC 0104                   .DATA.W     L597-L664
    000034EE 0104                   .DATA.W     L597-L664
    000034F0 0104                   .DATA.W     L597-L664
    000034F2 0104                   .DATA.W     L597-L664
    000034F4 0104                   .DATA.W     L597-L664
    000034F6 0104                   .DATA.W     L597-L664
    000034F8 0104                   .DATA.W     L614-L664
    000034FA 0104                   .DATA.W     L615-L664
    000034FC 0104                   .DATA.W     L616-L664
    000034FE 0104                   .DATA.W     L617-L664
    00003500 0104                   .DATA.W     L618-L664
    00003502 0104                   .DATA.W     L619-L664
    00003504 0104                   .DATA.W     L620-L664
    00003506 0104                   .DATA.W     L621-L664
    00003508 0104                   .DATA.W     L622-L664
    0000350A 0104                   .DATA.W     L623-L664
    0000350C 0104                   .DATA.W     L597-L664
    0000350E 0104                   .DATA.W     L597-L664
    00003510 0104                   .DATA.W     L597-L664
    00003512 0104                   .DATA.W     L597-L664
    00003514 0104                   .DATA.W     L597-L664
    00003516 0104                   .DATA.W     L597-L664
    00003518 0104                   .DATA.W     L624-L664
    0000351A 0104                   .DATA.W     L625-L664
    0000351C 0104                   .DATA.W     L626-L664
    0000351E 0104                   .DATA.W     L627-L664
    00003520 0104                   .DATA.W     L628-L664
    00003522 0104                   .DATA.W     L629-L664
    00003524 0104                   .DATA.W     L630-L664
    00003526 0104                   .DATA.W     L631-L664
    00003528 0104                   .DATA.W     L632-L664
    0000352A 0104                   .DATA.W     L633-L664
    0000352C 0104                   .DATA.W     L597-L664
    0000352E 0104                   .DATA.W     L597-L664
    00003530 0104                   .DATA.W     L597-L664
    00003532 0104                   .DATA.W     L597-L664
    00003534 0104                   .DATA.W     L597-L664
    00003536 0104                   .DATA.W     L597-L664
    00003538 0104                   .DATA.W     L634-L664
    0000353A 0104                   .DATA.W     L635-L664
    0000353C 0104                   .DATA.W     L636-L664
    0000353E 0104                   .DATA.W     L637-L664
    00003540 0104                   .DATA.W     L638-L664
    00003542 0104                   .DATA.W     L639-L664
    00003544 0104                   .DATA.W     L640-L664
    00003546 0104                   .DATA.W     L641-L664
    00003548 0104                   .DATA.W     L642-L664
    0000354A 0104                   .DATA.W     L643-L664
    0000354C 0104                   .DATA.W     L597-L664
    0000354E 0104                   .DATA.W     L597-L664
    00003550 0104                   .DATA.W     L597-L664
    00003552 0104                   .DATA.W     L597-L664
    00003554 0104                   .DATA.W     L597-L664
    00003556 0104                   .DATA.W     L644-L664
    00003558 00FE                   .DATA.W     L645-L664
    0000355A 0104                   .DATA.W     L646-L664
    0000355C 0104                   .DATA.W     L647-L664
    0000355E 0104                   .DATA.W     L648-L664
    00003560 0104                   .DATA.W     L649-L664
    00003562 0104                   .DATA.W     L650-L664
    00003564 0104                   .DATA.W     L651-L664
    00003566 0104                   .DATA.W     L652-L664
    00003568 0104                   .DATA.W     L653-L664
    0000356A 0104                   .DATA.W     L655-L664
    0000356C 0104                   .DATA.W     L656-L664
    0000356E 0104                   .DATA.W     L657-L664
    00003570 0104                   .DATA.W     L654-L664
    00003572 0104                   .DATA.W     L597-L664
    00003574 0104                   .DATA.W     L597-L664
    00003576 0104                   .DATA.W     L658-L664
    00003578 0104                   .DATA.W     L659-L664
    0000357A 0104                   .DATA.W     L660-L664
    0000357C              L602:
             tskcmd.c       5941      {
             tskcmd.c       5942          case ID_TPL_FWVER:        /* FWバージョン情報                */
             tskcmd.c       5943              break;
             tskcmd.c       5944          case ID_TPL_OPTIF:        /* オプション情報                  */
             tskcmd.c       5945              break;
             tskcmd.c       5946          case ID_TPL_LGIN1:        /* ログイン認証1                   */
             tskcmd.c       5947          case ID_TPL_LGIN2:        /* ログイン認証2                   */
             tskcmd.c       5948              break;
             tskcmd.c       5949          case ID_TPL_INITA:        /* 初期化指示                      */
             tskcmd.c       5950              result = QgProcList_INITA( mrcv );
    0000357C B007                   BSR         __$QgProcList_INITA
    0000357E 0009                   NOP
    00003580 A003                   BRA         L663
    00003582 6503                   MOV         R0,R5
    00003584              L645:
             tskcmd.c       5951              break;
             tskcmd.c       5952          case ID_TPL_USRAL:        /* ユーザー情報全取得              */
             tskcmd.c       5953              break;
             tskcmd.c       5954          case ID_TPL_INF01:        /* ユーザー1情報                   */
             tskcmd.c       5955          case ID_TPL_INF02:        /* ユーザー2情報                   */
             tskcmd.c       5956          case ID_TPL_INF03:        /* ユーザー3情報                   */
             tskcmd.c       5957          case ID_TPL_INF04:        /* ユーザー4情報                   */
             tskcmd.c       5958          case ID_TPL_INF05:        /* ユーザー5情報                   */
             tskcmd.c       5959          case ID_TPL_INF06:        /* ユーザー6情報                   */
             tskcmd.c       5960          case ID_TPL_INF07:        /* ユーザー7情報                   */
             tskcmd.c       5961          case ID_TPL_INF08:        /* ユーザー8情報                   */
             tskcmd.c       5962          case ID_TPL_INF09:        /* ユーザー9情報                   */
             tskcmd.c       5963          case ID_TPL_INF10:        /* ユーザー10情報                  */
             tskcmd.c       5964              break;
             tskcmd.c       5965          case ID_TPL_REC01:        /* ユーザー1登録                   */
             tskcmd.c       5966          case ID_TPL_REC02:        /* ユーザー2登録                   */
             tskcmd.c       5967          case ID_TPL_REC03:        /* ユーザー3登録                   */
             tskcmd.c       5968          case ID_TPL_REC04:        /* ユーザー4登録                   */
             tskcmd.c       5969          case ID_TPL_REC05:        /* ユーザー5登録                   */
             tskcmd.c       5970          case ID_TPL_REC06:        /* ユーザー6登録                   */
             tskcmd.c       5971          case ID_TPL_REC07:        /* ユーザー7登録                   */
             tskcmd.c       5972          case ID_TPL_REC08:        /* ユーザー8登録                   */
             tskcmd.c       5973          case ID_TPL_REC09:        /* ユーザー9登録                   */
             tskcmd.c       5974          case ID_TPL_REC10:        /* ユーザー10登録                  */
             tskcmd.c       5975              break;
             tskcmd.c       5976          case ID_TPL_CHG01:        /* ユーザー1変更                   */
             tskcmd.c       5977          case ID_TPL_CHG02:        /* ユーザー2変更                   */
             tskcmd.c       5978          case ID_TPL_CHG03:        /* ユーザー3変更                   */
             tskcmd.c       5979          case ID_TPL_CHG04:        /* ユーザー4変更                   */
             tskcmd.c       5980          case ID_TPL_CHG05:        /* ユーザー5変更                   */
             tskcmd.c       5981          case ID_TPL_CHG06:        /* ユーザー6変更                   */
             tskcmd.c       5982          case ID_TPL_CHG07:        /* ユーザー7変更                   */
             tskcmd.c       5983          case ID_TPL_CHG08:        /* ユーザー8変更                   */
             tskcmd.c       5984          case ID_TPL_CHG09:        /* ユーザー9変更                   */
             tskcmd.c       5985          case ID_TPL_CHG10:        /* ユーザー10変更                  */
             tskcmd.c       5986              break;
             tskcmd.c       5987          case ID_TPL_DEL01:        /* ユーザー1削除                   */
             tskcmd.c       5988          case ID_TPL_DEL02:        /* ユーザー2削除                   */
             tskcmd.c       5989          case ID_TPL_DEL03:        /* ユーザー3削除                   */
             tskcmd.c       5990          case ID_TPL_DEL04:        /* ユーザー4削除                   */
             tskcmd.c       5991          case ID_TPL_DEL05:        /* ユーザー5削除                   */
             tskcmd.c       5992          case ID_TPL_DEL06:        /* ユーザー6削除                   */
             tskcmd.c       5993          case ID_TPL_DEL07:        /* ユーザー7削除                   */
             tskcmd.c       5994          case ID_TPL_DEL08:        /* ユーザー8削除                   */
             tskcmd.c       5995          case ID_TPL_DEL09:        /* ユーザー9削除                   */
             tskcmd.c       5996          case ID_TPL_DEL10:        /* ユーザー10削除                  */
             tskcmd.c       5997              break;
             tskcmd.c       5998          case ID_TPL_FWPOL:        /* FW状態（ポーリング）            */
             tskcmd.c       5999              break;
             tskcmd.c       6000          case ID_TPL_PRTCL:        /* プロトコル実行                  */
             tskcmd.c       6001              result = QgProcList_PRTCL( mrcv );
    00003584 B126                   BSR         __$QgProcList_PRTCL
    00003586 0009                   NOP
    00003588 6503                   MOV         R0,R5
    0000358A              L660:
    0000358A              L659:
    0000358A              L658:
    0000358A              L657:
    0000358A              L656:
    0000358A              L655:
    0000358A              L654:
    0000358A              L653:
    0000358A              L652:
    0000358A              L651:
    0000358A              L650:
    0000358A              L649:
    0000358A              L648:
    0000358A              L647:
    0000358A              L646:
    0000358A              L644:
    0000358A              L643:
    0000358A              L642:
    0000358A              L641:
    0000358A              L640:
    0000358A              L639:
    0000358A              L638:
    0000358A              L637:
    0000358A              L636:
    0000358A              L635:
    0000358A              L634:
    0000358A              L633:
    0000358A              L632:
    0000358A              L631:
    0000358A              L630:
    0000358A              L629:
    0000358A              L628:
    0000358A              L627:
    0000358A              L626:
    0000358A              L625:
    0000358A              L624:
    0000358A              L623:
    0000358A              L622:
    0000358A              L621:
    0000358A              L620:
    0000358A              L619:
    0000358A              L618:
    0000358A              L617:
    0000358A              L616:
    0000358A              L615:
    0000358A              L614:
    0000358A              L613:
    0000358A              L612:
    0000358A              L611:
    0000358A              L610:
    0000358A              L609:
    0000358A              L608:
    0000358A              L607:
    0000358A              L606:
    0000358A              L605:
    0000358A              L604:
    0000358A              L603:
    0000358A              L601:
    0000358A              L600:
    0000358A              L599:
    0000358A              L598:
    0000358A              L597:
    0000358A              L663:
    0000358A 4F26                   LDS.L       @R15+,PR
             tskcmd.c       6002              break;
             tskcmd.c       6003          case ID_TPL_RESTA:        /* リスタート実行                  */
             tskcmd.c       6004              break;
             tskcmd.c       6005          case ID_TPL_PAUSE:        /* 一時停止                        */
             tskcmd.c       6006              break;
             tskcmd.c       6007          case ID_TPL_RESUM:        /* 再開                            */
             tskcmd.c       6008              break;
             tskcmd.c       6009          case ID_TPL_ABORT:        /* 中断                            */
             tskcmd.c       6010              break;
             tskcmd.c       6011          case ID_TPL_OPTCD:        /* オプションバーコード実行        */
             tskcmd.c       6012              break;
             tskcmd.c       6013          case ID_TPL_SMBAR:        /* サンプルチューブQRコード        */
             tskcmd.c       6014              break;
             tskcmd.c       6015          case ID_TPL_SMSGL:        /* サンプルチューブ有無確認（単）  */
             tskcmd.c       6016          case ID_TPL_SMALL:        /* サンプルチューブ有無確認（全）  */
             tskcmd.c       6017              break;
             tskcmd.c       6018          case ID_TPL_CLLNE:        /* 回収チューブレーンQRコード      */
             tskcmd.c       6019              break;
             tskcmd.c       6020          case ID_TPL_CLQRC:        /* 回収チューブQRコード            */
             tskcmd.c       6021              break;
             tskcmd.c       6022          case ID_TPL_CLSGL:        /* 回収チューブ有無（単）          */
             tskcmd.c       6023          case ID_TPL_CLALL:        /* 回収チューブ有無（全）          */
             tskcmd.c       6024              break;
             tskcmd.c       6025          case ID_TPL_LDLMP:        /* LED                             */
             tskcmd.c       6026              break;
             tskcmd.c       6027          case ID_TPL_UVLMP:        /* UV点灯                          */
             tskcmd.c       6028              break;
             tskcmd.c       6029          case ID_TPL_PTLMP:        /* パトランプ                      */
             tskcmd.c       6030    //            result = QgProcList_PTLMP( mrcv );
             tskcmd.c       6031              break;
             tskcmd.c       6032      }
             tskcmd.c       6033      return( result );
             tskcmd.c       6034    }
    0000358C 057B                   RTV/N       R5
             tskcmd.c       6035    
             tskcmd.c       6036    /***********************************************************************
             tskcmd.c       6037    * 
             tskcmd.c       6038    * [概要]  初期化指示
             tskcmd.c       6039    * [引数]  
             tskcmd.c       6040    * [戻値]  NO_DATA：空き無し
             tskcmd.c       6041    * [備考]
             tskcmd.c       6042    *
             tskcmd.c       6043    * typedef struct {
             tskcmd.c       6044    *     UB  msgid;      ID_MSG_LIMIT
             tskcmd.c       6045    *     UB  devno;      軸
             tskcmd.c       6046    *     UB  actstp;     動作ステップ
             tskcmd.c       6047    *     UB  prid1;      プロセス番号（ID_TPL_INITA）
             tskcmd.c       6048    *     UB  inf;        次初期化軸
             tskcmd.c       6049    *     UB  inf2;       未使用
             tskcmd.c       6050    *     UB  inf3;       未使用
             tskcmd.c       6051    *     UB  inf4;       未使用
             tskcmd.c       6052    * }ST_BCCTRL;
             tskcmd.c       6053    *
             tskcmd.c       6054    ***********************************************************************/
             tskcmd.c       6055    static ER QgProcList_INITA( T_CMD_MSG* mrcv )
    0000358E              __$QgProcList_INITA:             ; function: __$QgProcList_INITA
                                                           ; frame size=116
    0000358E 49F0                   MOVMU.L     R9,@-R15
    00003590 7FC8                   ADD         #-56,R15
             tskcmd.c       6056    {
             tskcmd.c       6057      ER result = E_CONTINUE;
             tskcmd.c       6058      UB  prid1;
             tskcmd.c       6059      UB  bcid;
             tskcmd.c       6060      UB  inf;
             tskcmd.c       6061      UB  spdptn;
             tskcmd.c       6062      UB  bcidwk;
             tskcmd.c       6063      UB  mm;
             tskcmd.c       6064      UB  *spdadr;
             tskcmd.c       6065      INT  offs;
             tskcmd.c       6066      INT  *posadr;
             tskcmd.c       6067    
             tskcmd.c       6068      prid1  = mrcv->msgdata.prid1;
             tskcmd.c       6069      bcid  = mrcv->msgdata.bcid;
    00003592 3041801A               MOVU.B      @(26,R4),R0; (mrcv)->bcid
    00003596 DB34                   MOV.L       L688+2,R11 ; __$bcctrl
    00003598 3F010028               MOV.B       R0,@(40:12,R15); bcid
             tskcmd.c       6070      bcidwk  = mrcv->msgdata.bcid;
             tskcmd.c       6071      mm   = bcctrl[bcid].devno;
    0000359C 4008                   SHLL2       R0
    0000359E E9F1                   MOV         #-15,R9    ; H'FFFFFFF1
    000035A0 4000                   SHLL        R0
    000035A2 6CB3                   MOV         R11,R12
    000035A4 7C01                   ADD         #1,R12
    000035A6 31414018               MOV.B       @(24:12,R4),R1; (mrcv)->prid1
    000035AA 04CC                   MOV.B       @(R0,R12),R4; bcctrl[].devno
    000035AC 699C                   EXTU.B      R9,R9
    000035AE 1F0B                   MOV.L       R0,@(44,R15)
    000035B0 6C4C                   EXTU.B      R4,R12
             tskcmd.c       6072      
             tskcmd.c       6073      
             tskcmd.c       6074      spdadr = &SpPtn.Y0_SpdIniPtn;
             tskcmd.c       6075      spdadr += (mm - 1);
             tskcmd.c       6076      spdptn = *spdadr;
    000035B2 6AC3                   MOV         R12,R10
    000035B4 7AFF                   ADD         #-1,R10
    000035B6 D02D                   MOV.L       L688+6,R0  ; __$SpPtn
    000035B8 06AC                   MOV.B       @(R0,R10),R6; *(spdadr)
             tskcmd.c       6077      
             tskcmd.c       6078      MAC_SPEED_SET( mm, 
    000035BA E03C                   MOV         #60,R0     ; H'0000003C
    000035BC 6DC3                   MOV         R12,R13
    000035BE 1F98                   MOV.L       R9,@(32,R15)
    000035C0 6E6C                   EXTU.B      R6,R14
    000035C2 4D80                   MULR        R0,R13
    000035C4 E00C                   MOV         #12,R0     ; H'0000000C
    000035C6 3F110024               MOV.B       R1,@(36:12,R15); prid1
    000035CA 61E3                   MOV         R14,R1
    000035CC 4180                   MULR        R0,R1
    000035CE D228                   MOV.L       L688+10,R2 ; __$Sp
    000035D0 3D1C                   ADD         R1,R13
    000035D2 60D3                   MOV         R13,R0
    000035D4 072D                   MOV.W       @(R0,R2),R7; Sp[].ac
    000035D6 3F711002               MOV.W       R7,@(4:12,R15); mp.accel_type
    000035DA DA26                   MOV.L       L688+14,R10; _GetFactor
    000035DC 4A0B                   JSR         @R10
    000035DE E403                   MOV         #3,R4      ; H'00000003
    000035E0 D723                   MOV.L       L688+10,R7 ; __$Sp
    000035E2 6473                   MOV         R7,R4
    000035E4 7408                   ADD         #8,R4
    000035E6 2F02                   MOV.L       R0,@R15    ; mp.factor
    000035E8 60D3                   MOV         R13,R0
    000035EA 054E                   MOV.L       @(R0,R4),R5; Sp[].fh
    000035EC 6A73                   MOV         R7,R10
    000035EE 7702                   ADD         #2,R7
    000035F0 7A04                   ADD         #4,R10
    000035F2 1F53                   MOV.L       R5,@(12,R15); mp.FH
    000035F4 057D                   MOV.W       @(R0,R7),R5; Sp[].gl
    000035F6 E700                   MOV         #0,R7      ; H'00000000
    000035F8 01AE                   MOV.L       @(R0,R10),R1; Sp[].fl
    000035FA 655D                   EXTU.W      R5,R5
    000035FC 1F76                   MOV.L       R7,@(24,R15); mp.us
    000035FE 1F12                   MOV.L       R1,@(8,R15); mp.FL
    00003600 1F54                   MOV.L       R5,@(16,R15); mp.utime
    00003602 1F55                   MOV.L       R5,@(20,R15); mp.dtime
    00003604 1F77                   MOV.L       R7,@(28,R15); mp.ds
    00003606 7FE0                   ADD         #-32,R15
    00003608 65F3                   MOV         R15,R5
    0000360A 7520                   ADD         #32,R5
    0000360C 6252                   MOV.L       @R5,R2     ; (part of)mp
    0000360E 64C3                   MOV         R12,R4
    00003610 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    00003612 2F22                   MOV.L       R2,@R15
    00003614 1F62                   MOV.L       R6,@(8,R15)
    00003616 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00003618 5655                   MOV.L       @(20,R5),R6; (part of)mp
    0000361A 5151                   MOV.L       @(4,R5),R1 ; (part of)mp
    0000361C 5753                   MOV.L       @(12,R5),R7; (part of)mp
    0000361E 1F24                   MOV.L       R2,@(16,R15)
    00003620 1F65                   MOV.L       R6,@(20,R15)
    00003622 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00003624 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00003626 1F11                   MOV.L       R1,@(4,R15)
    00003628 1F73                   MOV.L       R7,@(12,R15)
    0000362A 1F26                   MOV.L       R2,@(24,R15)
    0000362C D212                   MOV.L       L688+18,R2 ; _motor_SET
    0000362E 420B                   JSR         @R2
    00003630 1F67                   MOV.L       R6,@(28,R15)
             tskcmd.c       6079                     Sp[mm][spdptn].ac, 
             tskcmd.c       6080                     Sp[mm][spdptn].fl, 
             tskcmd.c       6081                     Sp[mm][spdptn].fh, 
             tskcmd.c       6082                     Sp[mm][spdptn].gl );
             tskcmd.c       6083      
             tskcmd.c       6084      if(( spdptn < 0 )||( spdptn > 6 ))
    00003632 4E11                   CMP/PZ      R14
    00003634 8D02                   BT/S        L1410
    00003636 7F20                   ADD         #32,R15
    00003638 A0B9                   BRA         L684
    0000363A 0009                   NOP
    0000363C              L1410:
    0000363C E606                   MOV         #6,R6      ; H'00000006
    0000363E 3E67                   CMP/GT      R6,R14
    00003640 8B01                   BF          L1411
    00003642 A0B4                   BRA         L684
    00003644 0009                   NOP
    00003646              L1411:
    00003646 50FB                   MOV.L       @(44,R15),R0
             tskcmd.c       6085      {
             tskcmd.c       6086          TpRspINITA( E_CON_ERR);
             tskcmd.c       6087          memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );              // データ初期化
             tskcmd.c       6088          InitQgProcList(bcid);
             tskcmd.c       6089          return( E_CON_ERR );
             tskcmd.c       6090      }
             tskcmd.c       6091      
             tskcmd.c       6092      switch( bcctrl[bcid].actstp )
    00003648 6EB3                   MOV         R11,R14
    0000364A 7E02                   ADD         #2,R14
    0000364C E509                   MOV         #9,R5      ; H'00000009
    0000364E 02EC                   MOV.B       @(R0,R14),R2; bcctrl[].actstp
    00003650 622C                   EXTU.B      R2,R2
    00003652 3256                   CMP/HI      R5,R2
    00003654 8F02                   BF/S        L1412
    00003656 6623                   MOV         R2,R6
    00003658 A099                   BRA         L687
    0000365A 0009                   NOP
    0000365C              L1412:
    0000365C 4600                   SHLL        R6
    0000365E C707                   MOVA        L689,R0
    00003660 006D                   MOV.W       @(R0,R6),R0
    00003662 0023                   BRAF        R0
    00003664 0009                   NOP
    00003666              L688:
    00003666 00000002               .RES.W      1
    00003668 <00000000>             .DATA.L     __$bcctrl
    0000366C <00000000>             .DATA.L     __$SpPtn
    00003670 <00000000>             .DATA.L     __$Sp
    00003674 <00000000>             .DATA.L     _GetFactor
    00003678 <00000000>             .DATA.L     _motor_SET
    0000367C              L689:
    0000367C 012A                   .DATA.W     L670-L688
    0000367E 0032                   .DATA.W     L681-L688
    00003680 002A                   .DATA.W     L672-L688
    00003682 00E2                   .DATA.W     L673-L688
    00003684 00F6                   .DATA.W     L680-L688
    00003686 0032                   .DATA.W     L675-L688
    00003688 00E2                   .DATA.W     L676-L688
    0000368A 00F6                   .DATA.W     L677-L688
    0000368C 0050                   .DATA.W     L678-L688
    0000368E 0064                   .DATA.W     L679-L688
    00003690              L672:
    00003690 50FB                   MOV.L       @(44,R15),R0
             tskcmd.c       6093      {
             tskcmd.c       6094      case 0:// アイドリング
             tskcmd.c       6095          // −−−
             tskcmd.c       6096          // −−−  アイドリング中（動作指示なし）  −−−
             tskcmd.c       6097          // −−−
             tskcmd.c       6098          break;
             tskcmd.c       6099      
             tskcmd.c       6100      case 1:// 原点センサを踏むまで移動(早く)
             tskcmd.c       6101           result = LimitAction(
             tskcmd.c       6102                              prid1, 
             tskcmd.c       6103                              bcid, 
             tskcmd.c       6104                              mm,   
             tskcmd.c       6105                              CCW,  
             tskcmd.c       6106                              GENTEN_POS,
             tskcmd.c       6107    //                            NUKEDA_POS,
             tskcmd.c       6108                              Sp[mm][spdptn].fl );
             tskcmd.c       6109          
             tskcmd.c       6110          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6111          bcctrl[bcid].actstp++;
             tskcmd.c       6112          break;
             tskcmd.c       6113      
             tskcmd.c       6114      case 2:// 原点センサを抜けるまで移動
             tskcmd.c       6115    //        motor_PSET( mm, 0, 0, 0 );
             tskcmd.c       6116    //        result = LimitAction(   
             tskcmd.c       6117    //                            prid1, 
             tskcmd.c       6118    //                            bcid, 
             tskcmd.c       6119    //                            mm,
             tskcmd.c       6120    //                            CW, 
             tskcmd.c       6121    //                            NUKEDA_POS,
             tskcmd.c       6122    //                            Sp[mm][spdptn].fl );
             tskcmd.c       6123    //        
             tskcmd.c       6124    //        if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6125          bcctrl[bcid].actstp++;
    00003692 7201                   ADD         #1,R2
    00003694 A058                   BRA         L691
    00003696 0E24                   MOV.B       R2,@(R0,R14); bcctrl[].actstp
    00003698              L675:
    00003698              L681:
             tskcmd.c       6126    //        WaitAction( prid1, bcid, 10 );
             tskcmd.c       6127    //        break;
             tskcmd.c       6128    
             tskcmd.c       6129      case 3:// 内部カウンターリセット
             tskcmd.c       6130          motor_PSET( mm, 0, 0, 0 );
             tskcmd.c       6131          bcctrl[bcid].actstp++;
             tskcmd.c       6132          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6133    
             tskcmd.c       6134      case 4:// 仮想原点位置まで移動
             tskcmd.c       6135          posadr = &BkP7.Y0_Offset + mm - 1;
             tskcmd.c       6136          offs = *posadr;
             tskcmd.c       6137          
             tskcmd.c       6138          result = RelmvAction( prid1, bcid, mm, REQ_STAUD, offs );
             tskcmd.c       6139          
             tskcmd.c       6140          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6141          bcctrl[bcid].actstp++;
             tskcmd.c       6142          break;
             tskcmd.c       6143    
             tskcmd.c       6144      case 5:// 原点センサを踏むまで移動(ゆっくり)
             tskcmd.c       6145           result = LimitAction(  
             tskcmd.c       6146                              prid1, 
             tskcmd.c       6147                              bcid, 
             tskcmd.c       6148                              mm,
             tskcmd.c       6149                              CCW, 
             tskcmd.c       6150                              GENTEN_POS,
             tskcmd.c       6151                              Sp[mm][spdptn].fl );
    00003698 60D3                   MOV         R13,R0
    0000369A 02AE                   MOV.L       @(R0,R10),R2; Sp[].fl
    0000369C 2F26                   MOV.L       R2,@-R15
    0000369E E400                   MOV         #0,R4      ; H'00000000
    000036A0 2F46                   MOV.L       R4,@-R15
    000036A2 E702                   MOV         #2,R7      ; H'00000002
    000036A4 34F1402C               MOV.B       @(44:12,R15),R4; prid1
    000036A8 35F14030               MOV.B       @(48:12,R15),R5; bcid
    000036AC D369                   MOV.L       L739,R3    ; __$LimitAction
    000036AE 430B                   JSR         @R3
    000036B0 66C3                   MOV         R12,R6
    000036B2 A063                   BRA         L693
    000036B4 7F08                   ADD         #8,R15
    000036B6              L678:
    000036B6 E700                   MOV         #0,R7      ; H'00000000
    000036B8 64C3                   MOV         R12,R4
             tskcmd.c       6152          
             tskcmd.c       6153          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6154          bcctrl[bcid].actstp++;
             tskcmd.c       6155          break;
             tskcmd.c       6156      
             tskcmd.c       6157      case 6:// 内部カウンターリセット
             tskcmd.c       6158          motor_PSET( mm, 0, 0, 0 );
             tskcmd.c       6159          bcctrl[bcid].actstp++;
             tskcmd.c       6160          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6161      
             tskcmd.c       6162      case 7:// 仮想原点位置まで移動
             tskcmd.c       6163          posadr = &BkP7.Y0_Offset + mm - 1;
             tskcmd.c       6164          offs = *posadr;
             tskcmd.c       6165          
             tskcmd.c       6166          result = RelmvAction( prid1, bcid, mm, REQ_STAUD, offs );
             tskcmd.c       6167          
             tskcmd.c       6168          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6169          bcctrl[bcid].actstp++;
             tskcmd.c       6170          break;
             tskcmd.c       6171      
             tskcmd.c       6172      case 8:// 内部カウンターリセット
             tskcmd.c       6173          motor_PSET( mm, 0, 0, 0 );
    000036BA 6673                   MOV         R7,R6
    000036BC DA66                   MOV.L       L739+4,R10 ; _motor_PSET
    000036BE 4A0B                   JSR         @R10
    000036C0 6573                   MOV         R7,R5
             tskcmd.c       6174          bcctrl[bcid].actstp++;
    000036C2 50FB                   MOV.L       @(44,R15),R0
    000036C4 0DEC                   MOV.B       @(R0,R14),R13; bcctrl[].actstp
    000036C6 7D01                   ADD         #1,R13
    000036C8 0ED4                   MOV.B       R13,@(R0,R14); bcctrl[].actstp
    000036CA              L679:
    000036CA 5DFB                   MOV.L       @(44,R15),R13
             tskcmd.c       6175          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6176      
             tskcmd.c       6177      case 9:// 終了判定
             tskcmd.c       6178    //        bcctrl[bcid].inf &= 0xC0;
             tskcmd.c       6179          BitClr( bcctrl[bcid].devno, &bcctrl[bcid].inf );
    000036CC 65B3                   MOV         R11,R5
    000036CE 7504                   ADD         #4,R5
    000036D0 61B3                   MOV         R11,R1
    000036D2 7101                   ADD         #1,R1
    000036D4 1F5C                   MOV.L       R5,@(48,R15)
    000036D6 60D3                   MOV         R13,R0
    000036D8 061C                   MOV.B       @(R0,R1),R6; bcctrl[].devno
    000036DA 35DC                   ADD         R13,R5
             tskcmd.c       6180    
             tskcmd.c       6181          if( bcctrl[bcid].inf == CLR )
    000036DC 5AFC                   MOV.L       @(48,R15),R10
    000036DE 646C                   EXTU.B      R6,R4
    000036E0 D75E                   MOV.L       L739+8,R7  ; _BitClr
    000036E2 470B                   JSR         @R7
    000036E4 1F1D                   MOV.L       R1,@(52,R15)
    000036E6 60D3                   MOV         R13,R0
    000036E8 02AC                   MOV.B       @(R0,R10),R2; bcctrl[].inf
    000036EA 2228                   TST         R2,R2
    000036EC 894F                   BT          L687
             tskcmd.c       6182          {
             tskcmd.c       6183              result = E_SUCCESS;
             tskcmd.c       6184          }
             tskcmd.c       6185          else
             tskcmd.c       6186          {
             tskcmd.c       6187              if( (bcctrl[bcid].inf & BIT1) )         bcctrl[bcid].devno = MT_Z0;
    000036EE 8729                   BLD         #1,R2
    000036F0 8B04                   BF          L698
    000036F2 50FB                   MOV.L       @(44,R15),R0
    000036F4 E702                   MOV         #2,R7      ; H'00000002
    000036F6 51FD                   MOV.L       @(52,R15),R1
    000036F8 A01B                   BRA         L699
    000036FA 0174                   MOV.B       R7,@(R0,R1); bcctrl[].devno
    000036FC              L698:
             tskcmd.c       6188              else if( (bcctrl[bcid].inf & BIT2) )    bcctrl[bcid].devno = MT_P0;
    000036FC 872A                   BLD         #2,R2
    000036FE 8B04                   BF          L701
    00003700 50FB                   MOV.L       @(44,R15),R0
    00003702 E203                   MOV         #3,R2      ; H'00000003
    00003704 51FD                   MOV.L       @(52,R15),R1
    00003706 A014                   BRA         L699
    00003708 0124                   MOV.B       R2,@(R0,R1); bcctrl[].devno
    0000370A              L701:
             tskcmd.c       6189              else if( (bcctrl[bcid].inf & BIT0) )    bcctrl[bcid].devno = MT_Y0;
    0000370A 8728                   BLD         #0,R2
    0000370C 8B04                   BF          L703
    0000370E 50FB                   MOV.L       @(44,R15),R0
    00003710 E201                   MOV         #1,R2      ; H'00000001
    00003712 51FD                   MOV.L       @(52,R15),R1
    00003714 A00D                   BRA         L699
    00003716 0124                   MOV.B       R2,@(R0,R1); bcctrl[].devno
    00003718              L703:
             tskcmd.c       6190              else if( (bcctrl[bcid].inf & BIT4) )    bcctrl[bcid].devno = MT_Y1;
    00003718 872C                   BLD         #4,R2
    0000371A 8B04                   BF          L705
    0000371C 50FB                   MOV.L       @(44,R15),R0
    0000371E E205                   MOV         #5,R2      ; H'00000005
    00003720 51FD                   MOV.L       @(52,R15),R1
    00003722 A006                   BRA         L699
    00003724 0124                   MOV.B       R2,@(R0,R1); bcctrl[].devno
    00003726              L705:
             tskcmd.c       6191              else if( (bcctrl[bcid].inf & BIT3) )    bcctrl[bcid].devno = MT_F0;
    00003726 872B                   BLD         #3,R2
    00003728 8B03                   BF          L699
    0000372A 50FB                   MOV.L       @(44,R15),R0
    0000372C E204                   MOV         #4,R2      ; H'00000004
    0000372E 51FD                   MOV.L       @(52,R15),R1
    00003730 0124                   MOV.B       R2,@(R0,R1); bcctrl[].devno
    00003732              L699:
             tskcmd.c       6192    
             tskcmd.c       6193              bcctrl[bcid].actstp = 1 ;
    00003732 50FB                   MOV.L       @(44,R15),R0
    00003734 E201                   MOV         #1,R2      ; H'00000001
    00003736 34F14024               MOV.B       @(36:12,R15),R4; prid1
    0000373A 35F14028               MOV.B       @(40:12,R15),R5; bcid
    0000373E 0E24                   MOV.B       R2,@(R0,R14); bcctrl[].actstp
             tskcmd.c       6194              WaitAction( prid1, bcid, 25 );
    00003740 B8B6                   BSR         __$WaitAction
    00003742 E619                   MOV         #25,R6     ; H'00000019
    00003744 A024                   BRA         L707
    00003746 0009                   NOP
    00003748              L673:
    00003748              L676:
    00003748              L691:
    00003748 E700                   MOV         #0,R7      ; H'00000000
    0000374A 64C3                   MOV         R12,R4
    0000374C 6673                   MOV         R7,R6
    0000374E DD42                   MOV.L       L739+4,R13 ; _motor_PSET
    00003750 4D0B                   JSR         @R13
    00003752 6573                   MOV         R7,R5
    00003754 50FB                   MOV.L       @(44,R15),R0
    00003756 01EC                   MOV.B       @(R0,R14),R1; bcctrl[].actstp
    00003758 7101                   ADD         #1,R1
    0000375A 0E14                   MOV.B       R1,@(R0,R14); bcctrl[].actstp
    0000375C              L677:
    0000375C              L680:
    0000375C 62C3                   MOV         R12,R2
    0000375E E0FC                   MOV         #-4,R0     ; H'FFFFFFFC
    00003760 4208                   SHLL2       R2
    00003762 D43F                   MOV.L       L739+12,R4 ; __$BkP7
    00003764 324C                   ADD         R4,R2
    00003766 052E                   MOV.L       @(R0,R2),R5; *(posadr)
    00003768 2F56                   MOV.L       R5,@-R15
    0000376A E700                   MOV         #0,R7      ; H'00000000
    0000376C 34F14028               MOV.B       @(40:12,R15),R4; prid1
    00003770 35F1402C               MOV.B       @(44:12,R15),R5; bcid
    00003774 D33B                   MOV.L       L739+16,R3 ; __$RelmvAction
    00003776 430B                   JSR         @R3
    00003778 66C3                   MOV         R12,R6
    0000377A 7F04                   ADD         #4,R15
    0000377C              L693:
    0000377C 2008                   TST         R0,R0
    0000377E 8F01                   BF/S        L710
    00003780 6903                   MOV         R0,R9
    00003782 59F8                   MOV.L       @(32,R15),R9
    00003784              L710:
    00003784 50FB                   MOV.L       @(44,R15),R0
    00003786 02EC                   MOV.B       @(R0,R14),R2; bcctrl[].actstp
    00003788 7201                   ADD         #1,R2
    0000378A A001                   BRA         L707
    0000378C 0E24                   MOV.B       R2,@(R0,R14); bcctrl[].actstp
    0000378E              L687:
    0000378E E900                   MOV         #0,R9      ; H'00000000
    00003790              L670:
    00003790              L707:
             tskcmd.c       6195          }
             tskcmd.c       6196          break;
             tskcmd.c       6197      
             tskcmd.c       6198      default:// 終了処理
             tskcmd.c       6199          result = E_SUCCESS;
             tskcmd.c       6200          break;
             tskcmd.c       6201      }
             tskcmd.c       6202    
             tskcmd.c       6203      if( result != E_CONTINUE )
    00003790 E7F1                   MOV         #-15,R7    ; H'FFFFFFF1
    00003792 677C                   EXTU.B      R7,R7
    00003794 3970                   CMP/EQ      R7,R9
    00003796 8908                   BT          L712
             tskcmd.c       6204      {
             tskcmd.c       6205          TpRspINITA( result );
    00003798 BC8F                   BSR         __$TpRspINITA
    0000379A 6493                   MOV         R9,R4
             tskcmd.c       6206          memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );              // データ初期化
    0000379C 57FB                   MOV.L       @(44,R15),R7
    0000379E E608                   MOV         #8,R6      ; H'00000008
    000037A0 E500                   MOV         #0,R5      ; H'00000000
    000037A2 3B7C                   ADD         R7,R11
    000037A4 D230                   MOV.L       L739+20,R2 ; _memset
    000037A6 420B                   JSR         @R2
    000037A8 64B3                   MOV         R11,R4
    000037AA              L712:
             tskcmd.c       6207      }
             tskcmd.c       6208    
             tskcmd.c       6209      return( result );   
    000037AA A010                   BRA         L713
    000037AC 6093                   MOV         R9,R0
    000037AE              L684:
    000037AE E404                   MOV         #4,R4      ; H'00000004
    000037B0 59FB                   MOV.L       @(44,R15),R9
    000037B2 BC82                   BSR         __$TpRspINITA
    000037B4 4418                   SHLL8       R4
    000037B6 3B9C                   ADD         R9,R11
    000037B8 E608                   MOV         #8,R6      ; H'00000008
    000037BA E500                   MOV         #0,R5      ; H'00000000
    000037BC D22A                   MOV.L       L739+20,R2 ; _memset
    000037BE 420B                   JSR         @R2
    000037C0 64B3                   MOV         R11,R4
    000037C2 34F14028               MOV.B       @(40:12,R15),R4; bcid
    000037C6 B0E8                   BSR         __$InitQgProcList
    000037C8 0009                   NOP
    000037CA E004                   MOV         #4,R0      ; H'00000004
    000037CC 4018                   SHLL8       R0
    000037CE              L713:
    000037CE 7F38                   ADD         #56,R15
    000037D0 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       6210    }
    000037D2 006B                   RTS/N
             tskcmd.c       6211    /***********************************************************************
             tskcmd.c       6212    * 
             tskcmd.c       6213    * [概要]  プロトコル動作
             tskcmd.c       6214    * [引数]  
             tskcmd.c       6215    * [戻値]  NO_DATA：空き無し
             tskcmd.c       6216    * [備考]
             tskcmd.c       6217    *
             tskcmd.c       6218    * typedef struct {
             tskcmd.c       6219    *     UB  msgid;      ID_MSG_LIMIT
             tskcmd.c       6220    *     UB  devno;      軸
             tskcmd.c       6221    *     UB  actstp;     動作ステップ
             tskcmd.c       6222    *     UB  prid1;      プロセス番号（ID_TPL_INITA）
             tskcmd.c       6223    *     UB  inf;        未使用
             tskcmd.c       6224    *     UB  inf2;       未使用
             tskcmd.c       6225    *     UB  inf3;       未使用
             tskcmd.c       6226    *     UB  inf4;       未使用
             tskcmd.c       6227    * }ST_BCCTRL;
             tskcmd.c       6228    *
             tskcmd.c       6229    ***********************************************************************/
             tskcmd.c       6230    static ER QgProcList_PRTCL( T_CMD_MSG* mrcv )
    000037D4              __$QgProcList_PRTCL:             ; function: __$QgProcList_PRTCL
                                                           ; frame size=40
    000037D4 48F0                   MOVMU.L     R8,@-R15
    000037D6 7FF8                   ADD         #-8,R15
             tskcmd.c       6231    {
             tskcmd.c       6232      ER result = E_CONTINUE;
             tskcmd.c       6233      UB  prid1;
             tskcmd.c       6234      UB  bcid;
             tskcmd.c       6235      UB  pno;
             tskcmd.c       6236      UB  Cmd;
             tskcmd.c       6237      UB  Sts;
             tskcmd.c       6238      
             tskcmd.c       6239      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       6240      bcid  = mrcv->msgdata.bcid;
    000037D8 3941801A               MOVU.B      @(26,R4),R9; (mrcv)->bcid
    000037DC D823                   MOV.L       L739+24,R8 ; __$bcctrl
    000037DE 6D93                   MOV         R9,R13
    000037E0 ECF1                   MOV         #-15,R12   ; H'FFFFFFF1
             tskcmd.c       6241      pno   = mrcv->msgdata.inf2;// proc no
             tskcmd.c       6242      
             tskcmd.c       6243      if( bcctrl[bcid].actstp == CLR )
    000037E2 4908                   SHLL2       R9
    000037E4 4900                   SHLL        R9
    000037E6 6683                   MOV         R8,R6
    000037E8 7602                   ADD         #2,R6
    000037EA 6093                   MOV         R9,R0
    000037EC 026C                   MOV.B       @(R0,R6),R2; bcctrl[].actstp
    000037EE 6CCC                   EXTU.B      R12,R12
    000037F0 2228                   TST         R2,R2
    000037F2 6E43                   MOV         R4,R14
    000037F4 6BC3                   MOV         R12,R11
    000037F6 3A418018               MOVU.B      @(24,R4),R10; (mrcv)->prid1
    000037FA 8F02                   BF/S        L1413
    000037FC 60C3                   MOV         R12,R0
    000037FE A0C9                   BRA         L734
    00003800 0009                   NOP
    00003802              L1413:
             tskcmd.c       6244      {
             tskcmd.c       6245          // −−−
             tskcmd.c       6246          // −−−  アイドリング中（動作指示なし）  −−−
             tskcmd.c       6247          // −−−
             tskcmd.c       6248          return( result );   
             tskcmd.c       6249      }
             tskcmd.c       6250    
             tskcmd.c       6251      // 中断確認
             tskcmd.c       6252      if( GetPauseStop() == STOP_STS )            return( E_PROTCOLSTOP );
    00003802 D31B                   MOV.L       L739+28,R3 ; __$GetPauseStop
    00003804 434B                   JSR/N       @R3
    00003806 600C                   EXTU.B      R0,R0
    00003808 8801                   CMP/EQ      #1,R0
    0000380A 8F02                   BF/S        L1414
    0000380C E003                   MOV         #3,R0      ; H'00000003
    0000380E A0C1                   BRA         L734
    00003810 0009                   NOP
    00003812              L1414:
             tskcmd.c       6253    
             tskcmd.c       6254      // 一時停止確認
             tskcmd.c       6255      if( GetPauseStop() == PAUS_STS )            return( E_PROTCOLPAUSE );
    00003812 D317                   MOV.L       L739+28,R3 ; __$GetPauseStop
    00003814 434B                   JSR/N       @R3
    00003816 600C                   EXTU.B      R0,R0
    00003818 8802                   CMP/EQ      #2,R0
    0000381A 8F02                   BF/S        L1415
    0000381C E004                   MOV         #4,R0      ; H'00000004
    0000381E A0B9                   BRA         L734
    00003820 0009                   NOP
    00003822              L1415:
             tskcmd.c       6256    
             tskcmd.c       6257    //
             tskcmd.c       6258    #if 0
             tskcmd.c       6259      //  ★★★ デバック ★★★ 加圧
             tskcmd.c       6260      pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd = P_PRS;  // 状態
             tskcmd.c       6261      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par02 = 1;      // 加速パターン  ポンプ速度
             tskcmd.c       6262      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par03 = 1;      // ポジション
             tskcmd.c       6263      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par04 = 123;    // PEEK加圧             kPa
             tskcmd.c       6264      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par05 = 4;      // PEEK加圧タイムアウト sec
             tskcmd.c       6265      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par06 = 56;     // 減圧（00H〜FFH）     kPa
             tskcmd.c       6266      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par07 = 7;      // 減圧タイムアウト     sec
             tskcmd.c       6267      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par08 = 89;     // 減圧変化             kPa
             tskcmd.c       6268    
             tskcmd.c       6269    
             tskcmd.c       6270      // ★★★ デバック ★★★ 攪拌
             tskcmd.c       6271      pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd = P_MIX;
             tskcmd.c       6272      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par02 = 0x01;
             tskcmd.c       6273      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par03 = 0x13;
             tskcmd.c       6274      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par04 = 0x11;
             tskcmd.c       6275      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par05 = 0x11;
             tskcmd.c       6276      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par06 = 53;
             tskcmd.c       6277      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par07 = 54;
             tskcmd.c       6278      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par13 = 0x1f4;
             tskcmd.c       6279      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par13 = 0x1f4;
             tskcmd.c       6280      pProcAdr->step[(bcctrl[bcid].actstp )].StCmd = P_NON;
             tskcmd.c       6281    #endif
             tskcmd.c       6282    //★★★ デバック ★★★
             tskcmd.c       6283      
             tskcmd.c       6284      // --- ここから動作開始 ----------------------------------------------------------------
             tskcmd.c       6285      Cmd = ( pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd & P_MSK );
             tskcmd.c       6286      Sts =   pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd;
    00003822 6583                   MOV         R8,R5
    00003824 7502                   ADD         #2,R5
    00003826 6093                   MOV         R9,R0
    00003828 025C                   MOV.B       @(R0,R5),R2; bcctrl[].actstp
    0000382A E014                   MOV         #20,R0     ; H'00000014
    0000382C E40C                   MOV         #12,R4     ; H'0000000C
    0000382E 622C                   EXTU.B      R2,R2
    00003830 2F52                   MOV.L       R5,@R15
    00003832 72FF                   ADD         #-1,R2
    00003834 4280                   MULR        R0,R2
    00003836 D10F                   MOV.L       L739+32,R1 ; __$pProcAdr
    00003838 6712                   MOV.L       @R1,R7     ; pProcAdr
    0000383A 6023                   MOV         R2,R0
    0000383C 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].StCmd
    0000383E 80F4                   MOV.B       R0,@(4,R15)
             tskcmd.c       6287      
             tskcmd.c       6288      switch( Cmd )
    00003840 C90F                   AND         #15,R0
    00003842 70FF                   ADD         #-1,R0
    00003844 3046                   CMP/HI      R4,R0
    00003846 8D5B                   BT/S        L738
    00003848 6603                   MOV         R0,R6
    0000384A 4600                   SHLL        R6
    0000384C C70A                   MOVA        L740,R0
    0000384E 006D                   MOV.W       @(R0,R6),R0
    00003850 0023                   BRAF        R0
    00003852 0009                   NOP
    00003854              L739:
    00003854 <00000000>             .DATA.L     __$LimitAction
    00003858 <00000000>             .DATA.L     _motor_PSET
    0000385C <00000000>             .DATA.L     _BitClr
    00003860 <00000000>             .DATA.L     __$BkP7
    00003864 <00000000>             .DATA.L     __$RelmvAction
    00003868 <00000000>             .DATA.L     _memset
    0000386C <00000000>             .DATA.L     __$bcctrl
    00003870 <00000000>             .DATA.L     __$GetPauseStop
    00003874 <00000000>             .DATA.L     __$pProcAdr
    00003878              L740:
    00003878 003E                   .DATA.W     L716-L739
    0000387A 0046                   .DATA.W     L717-L739
    0000387C 004E                   .DATA.W     L718-L739
    0000387E 0056                   .DATA.W     L719-L739
    00003880 005E                   .DATA.W     L720-L739
    00003882 0068                   .DATA.W     L721-L739
    00003884 0072                   .DATA.W     L722-L739
    00003886 007C                   .DATA.W     L723-L739
    00003888 00AC                   .DATA.W     L715-L739
    0000388A 0086                   .DATA.W     L724-L739
    0000388C 0090                   .DATA.W     L725-L739
    0000388E 009A                   .DATA.W     L726-L739
    00003890 00A4                   .DATA.W     L727-L739
    00003892              L716:
             tskcmd.c       6289      {
             tskcmd.c       6290          case P_TGT://チップ取得
             tskcmd.c       6291              result = CmdActionTipGet( mrcv );
    00003892 B149                   BSR         __$CmdActionTipGet
    00003894 64E3                   MOV         R14,R4
    00003896 A033                   BRA         L738
    00003898 6C03                   MOV         R0,R12
    0000389A              L717:
             tskcmd.c       6292              break;
             tskcmd.c       6293          case P_TDS://チップ廃棄
             tskcmd.c       6294              result = CmdActionTipDsp( mrcv );
    0000389A B319                   BSR         __$CmdActionTipDsp
    0000389C 64E3                   MOV         R14,R4
    0000389E A02F                   BRA         L738
    000038A0 6C03                   MOV         R0,R12
    000038A2              L718:
             tskcmd.c       6295              break;
             tskcmd.c       6296          case P_OPN://穴あけ
             tskcmd.c       6297              result = CmdActionStrOpn( mrcv );
    000038A2 B547                   BSR         __$CmdActionStrOpn
    000038A4 64E3                   MOV         R14,R4
    000038A6 A02B                   BRA         L738
    000038A8 6C03                   MOV         R0,R12
    000038AA              L719:
             tskcmd.c       6298              break;
             tskcmd.c       6299          case P_PRS://加圧
             tskcmd.c       6300              result = CmdActionPress( mrcv );
    000038AA B716                   BSR         __$CmdActionPress
    000038AC 64E3                   MOV         R14,R4
    000038AE A027                   BRA         L738
    000038B0 6C03                   MOV         R0,R12
    000038B2              L720:
             tskcmd.c       6301              break;
             tskcmd.c       6302          case P_WAI://ウェイト
             tskcmd.c       6303              result = CmdActionWait( mrcv );
    000038B2 D387                   MOV.L       L1388,R3   ; __$CmdActionWait
    000038B4 430B                   JSR         @R3
    000038B6 64E3                   MOV         R14,R4
    000038B8 A022                   BRA         L738
    000038BA 6C03                   MOV         R0,R12
    000038BC              L721:
             tskcmd.c       6304              break;
             tskcmd.c       6305          case P_MIX://攪拌
             tskcmd.c       6306              result = CmdActionMix( mrcv );
    000038BC D385                   MOV.L       L1388+4,R3 ; __$CmdActionMix
    000038BE 430B                   JSR         @R3
    000038C0 64E3                   MOV         R14,R4
    000038C2 A01D                   BRA         L738
    000038C4 6C03                   MOV         R0,R12
    000038C6              L722:
             tskcmd.c       6307              break;
             tskcmd.c       6308          case P_SUC://吸引
             tskcmd.c       6309              result = CmdActionSuc( mrcv );
    000038C6 D384                   MOV.L       L1388+8,R3 ; __$CmdActionSuc
    000038C8 430B                   JSR         @R3
    000038CA 64E3                   MOV         R14,R4
    000038CC A018                   BRA         L738
    000038CE 6C03                   MOV         R0,R12
    000038D0              L723:
             tskcmd.c       6310              break;
             tskcmd.c       6311          case P_PUT://吐出
             tskcmd.c       6312              result = CmdActionPut( mrcv );
    000038D0 D382                   MOV.L       L1388+12,R3; __$CmdActionPut
    000038D2 430B                   JSR         @R3
    000038D4 64E3                   MOV         R14,R4
    000038D6 A013                   BRA         L738
    000038D8 6C03                   MOV         R0,R12
    000038DA              L724:
             tskcmd.c       6313              break;
             tskcmd.c       6314          case P_PR1://分注１
             tskcmd.c       6315              result = CmdActionPrep1( mrcv );
    000038DA D381                   MOV.L       L1388+16,R3; __$CmdActionPrep1
    000038DC 430B                   JSR         @R3
    000038DE 64E3                   MOV         R14,R4
    000038E0 A00E                   BRA         L738
    000038E2 6C03                   MOV         R0,R12
    000038E4              L725:
             tskcmd.c       6316              break;
             tskcmd.c       6317          case P_PR2://分注２
             tskcmd.c       6318              result = CmdActionPrep2( mrcv );
    000038E4 D37F                   MOV.L       L1388+20,R3; __$CmdActionPrep2
    000038E6 430B                   JSR         @R3
    000038E8 64E3                   MOV         R14,R4
    000038EA A009                   BRA         L738
    000038EC 6C03                   MOV         R0,R12
    000038EE              L726:
             tskcmd.c       6319              break;
             tskcmd.c       6320          case P_INC://インキュベーション
             tskcmd.c       6321              result = CmdActionIncub( mrcv );
    000038EE D37E                   MOV.L       L1388+24,R3; __$CmdActionIncub
    000038F0 430B                   JSR         @R3
    000038F2 64E3                   MOV         R14,R4
    000038F4 A004                   BRA         L738
    000038F6 6C03                   MOV         R0,R12
    000038F8              L727:
             tskcmd.c       6322              break;
             tskcmd.c       6323          case P_MOV://移動
             tskcmd.c       6324              result = CmdActionMove( mrcv );
    000038F8 D37C                   MOV.L       L1388+28,R3; __$CmdActionMove
    000038FA 430B                   JSR         @R3
    000038FC 64E3                   MOV         R14,R4
    000038FE 6C03                   MOV         R0,R12
    00003900              L715:
    00003900              L738:
             tskcmd.c       6325              break;
             tskcmd.c       6326      }
             tskcmd.c       6327          
             tskcmd.c       6328      switch( result )
    00003900 2CC8                   TST         R12,R12
    00003902 8904                   BT          L754
    00003904 60C3                   MOV         R12,R0
    00003906 8820                   CMP/EQ      #32,R0
    00003908 8921                   BT          L755
    0000390A A02C                   BRA         L756
    0000390C 0009                   NOP
    0000390E              L754:
             tskcmd.c       6329      {
             tskcmd.c       6330          case E_CONTINUE:
             tskcmd.c       6331              break;
             tskcmd.c       6332    
             tskcmd.c       6333          case E_SUCCESS:
             tskcmd.c       6334              pProcDat->Stp = CLR;
    0000390E D178                   MOV.L       L1388+32,R1; __$pProcDat
    00003910 6E12                   MOV.L       @R1,R14    ; pProcDat
    00003912 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       6335              bcctrl[bcid].actstp++;
    00003914 64F2                   MOV.L       @R15,R4
    00003916 80E2                   MOV.B       R0,@(2,R14); (pProcDat)->Stp
    00003918 6093                   MOV         R9,R0
    0000391A 064C                   MOV.B       @(R0,R4),R6; bcctrl[].actstp
    0000391C 6512                   MOV.L       @R1,R5     ; pProcDat
    0000391E 7601                   ADD         #1,R6
    00003920 0464                   MOV.B       R6,@(R0,R4); bcctrl[].actstp
             tskcmd.c       6336    
             tskcmd.c       6337              if( bcctrl[bcid].actstp > pProcDat->Cnt )       // 全行程終了
    00003922 6E6C                   EXTU.B      R6,R14
    00003924 37518000               MOVU.B      @(0,R5),R7 ; (pProcDat)->Cnt
    00003928 3E77                   CMP/GT      R7,R14
    0000392A 8916                   BT          L758
             tskcmd.c       6338              {
             tskcmd.c       6339                  memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
             tskcmd.c       6340              }
             tskcmd.c       6341              else
             tskcmd.c       6342              {
             tskcmd.c       6343                  Cmd = ( pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd & P_MSK );
             tskcmd.c       6344                  if( Cmd == P_NON )
    0000392C 666C                   EXTU.B      R6,R6
    0000392E E014                   MOV         #20,R0     ; H'00000014
    00003930 76FF                   ADD         #-1,R6
    00003932 4680                   MULR        R0,R6
    00003934 D26F                   MOV.L       L1388+36,R2; __$pProcAdr
    00003936 6522                   MOV.L       @R2,R5     ; pProcAdr
    00003938 6063                   MOV         R6,R0
    0000393A 005C                   MOV.B       @(R0,R5),R0; pProcAdr->step[].StCmd
    0000393C C80F                   TST         #15,R0
    0000393E 890C                   BT          L758
             tskcmd.c       6345                  {
             tskcmd.c       6346                      memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
             tskcmd.c       6347                  }
             tskcmd.c       6348                  else
             tskcmd.c       6349                  {
             tskcmd.c       6350                      WaitAction( prid1, bcid, 10 );
    00003940 E60A                   MOV         #10,R6     ; H'0000000A
    00003942 64A3                   MOV         R10,R4
    00003944 D36C                   MOV.L       L1388+40,R3; __$WaitAction
    00003946 430B                   JSR         @R3
    00003948 65D3                   MOV         R13,R5
             tskcmd.c       6351                      result = E_CONTINUE;
    0000394A A00C                   BRA         L756
    0000394C 6CB3                   MOV         R11,R12
    0000394E              L755:
             tskcmd.c       6352                  }
             tskcmd.c       6353              }
             tskcmd.c       6354              break;
             tskcmd.c       6355    
             tskcmd.c       6356          case E_PRES_FAIL:
             tskcmd.c       6357              memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
    0000394E 6483                   MOV         R8,R4
    00003950 349C                   ADD         R9,R4
    00003952 E608                   MOV         #8,R6      ; H'00000008
    00003954 D269                   MOV.L       L1388+44,R2; _memset
    00003956 420B                   JSR         @R2
    00003958 E500                   MOV         #0,R5      ; H'00000000
    0000395A              L758:
    0000395A 6483                   MOV         R8,R4
    0000395C 349C                   ADD         R9,R4
    0000395E E608                   MOV         #8,R6      ; H'00000008
    00003960 D266                   MOV.L       L1388+44,R2; _memset
    00003962 420B                   JSR         @R2
    00003964 E500                   MOV         #0,R5      ; H'00000000
    00003966              L756:
             tskcmd.c       6358              memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
             tskcmd.c       6359              break;
             tskcmd.c       6360      }
             tskcmd.c       6361      
             tskcmd.c       6362      if( result != E_CONTINUE )
    00003966 3CB0                   CMP/EQ      R11,R12
    00003968 8909                   BT          L761
             tskcmd.c       6363      {
             tskcmd.c       6364          DeviceInfoClr();
    0000396A D165                   MOV.L       L1388+48,R1; _DeviceInfoClr
    0000396C 414B                   JSR/N       @R1
             tskcmd.c       6365          memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );              // データ初期化
    0000396E 389C                   ADD         R9,R8
    00003970 E608                   MOV         #8,R6      ; H'00000008
    00003972 E500                   MOV         #0,R5      ; H'00000000
    00003974 D761                   MOV.L       L1388+44,R7; _memset
    00003976 470B                   JSR         @R7
    00003978 6483                   MOV         R8,R4
    0000397A A00A                   BRA         L762
    0000397C 0009                   NOP
    0000397E              L761:
             tskcmd.c       6366      }
             tskcmd.c       6367      else
             tskcmd.c       6368      {
             tskcmd.c       6369          DeviceInfoSet( result, bcctrl[bcid].inf2, bcctrl[bcid].actstp, Sts );
    0000397E 6AF2                   MOV.L       @R15,R10
    00003980 7805                   ADD         #5,R8
    00003982 6093                   MOV         R9,R0
    00003984 058C                   MOV.B       @(R0,R8),R5; bcctrl[].inf2
    00003986 06AC                   MOV.B       @(R0,R10),R6; bcctrl[].actstp
    00003988 64C3                   MOV         R12,R4
    0000398A 84F4                   MOV.B       @(4,R15),R0
    0000398C DB5D                   MOV.L       L1388+52,R11; _DeviceInfoSet
    0000398E 4B0B                   JSR         @R11
    00003990 6703                   MOV         R0,R7
    00003992              L762:
             tskcmd.c       6370      }
             tskcmd.c       6371      
             tskcmd.c       6372      return( result );
    00003992 60C3                   MOV         R12,R0
    00003994              L734:
    00003994 7F08                   ADD         #8,R15
    00003996 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       6373    }
    00003998 006B                   RTS/N
             tskcmd.c       6374    
             tskcmd.c       6375    /***********************************************************************
             tskcmd.c       6376    * 
             tskcmd.c       6377    * [概要]  
             tskcmd.c       6378    * [引数]  
             tskcmd.c       6379    * [戻値]  
             tskcmd.c       6380    * [備考]  
             tskcmd.c       6381    * 
             tskcmd.c       6382    ***********************************************************************/
             tskcmd.c       6383    static void InitQgProcList( UB bcid )
    0000399A              __$InitQgProcList:               ; function: __$InitQgProcList
                                                           ; frame size=0
    0000399A E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
             tskcmd.c       6384    {
             tskcmd.c       6385      if( ( bcid != NO_DATA )&&( bcid < BCCTRL_MAX ))
    0000399C 664C                   EXTU.B      R4,R6
    0000399E 655C                   EXTU.B      R5,R5
    000039A0 3650                   CMP/EQ      R5,R6
    000039A2 8917                   BT          L765
    000039A4 E513                   MOV         #19,R5     ; H'00000013
    000039A6 3653                   CMP/GE      R5,R6
    000039A8 8914                   BT          L765
             tskcmd.c       6386      {
             tskcmd.c       6387          //  UB  msgid;
             tskcmd.c       6388          //  UB  devno;
             tskcmd.c       6389          //  UB  actstp;
             tskcmd.c       6390          //  UB  prid1;
             tskcmd.c       6391          //  UB  inf;
             tskcmd.c       6392          //  UB  inf2;
             tskcmd.c       6393          //  UB  inf3;
             tskcmd.c       6394          //  UB  inf4;
             tskcmd.c       6395          bcctrl[bcid].actstp = 0;
    000039AA 604C                   EXTU.B      R4,R0
    000039AC E200                   MOV         #0,R2      ; H'00000000
    000039AE D656                   MOV.L       L1388+56,R6; __$bcctrl
    000039B0 4008                   SHLL2       R0
             tskcmd.c       6396          bcctrl[bcid].msgid  = NO_DATA;
    000039B2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000039B4 4000                   SHLL        R0
    000039B6 6163                   MOV         R6,R1
    000039B8 7102                   ADD         #2,R1
    000039BA 0124                   MOV.B       R2,@(R0,R1); bcctrl[].actstp
             tskcmd.c       6397          bcctrl[bcid].devno  = NO_DATA;
    000039BC 6463                   MOV         R6,R4
    000039BE 0654                   MOV.B       R5,@(R0,R6); bcctrl[].msgid
             tskcmd.c       6398          bcctrl[bcid].prid1  = NO_DATA;
    000039C0 6763                   MOV         R6,R7
             tskcmd.c       6399          bcctrl[bcid].inf    = NO_DATA;
    000039C2 6263                   MOV         R6,R2
             tskcmd.c       6400          bcctrl[bcid].inf2   = NO_DATA;
    000039C4 7605                   ADD         #5,R6
    000039C6 7401                   ADD         #1,R4
    000039C8 7703                   ADD         #3,R7
    000039CA 7204                   ADD         #4,R2
    000039CC 0454                   MOV.B       R5,@(R0,R4); bcctrl[].devno
    000039CE 0754                   MOV.B       R5,@(R0,R7); bcctrl[].prid1
    000039D0 0254                   MOV.B       R5,@(R0,R2); bcctrl[].inf
    000039D2 0654                   MOV.B       R5,@(R0,R6); bcctrl[].inf2
    000039D4              L765:
             tskcmd.c       6401      }
             tskcmd.c       6402    }
    000039D4 006B                   RTS/N
             tskcmd.c       6403    /***********************************************************************
             tskcmd.c       6404    * 
             tskcmd.c       6405    * [概要]  
             tskcmd.c       6406    * [引数]  
             tskcmd.c       6407    * [戻値]  
             tskcmd.c       6408    * [備考]  
             tskcmd.c       6409    * 
             tskcmd.c       6410    ***********************************************************************/
             tskcmd.c       6411    static void StaQgProcList( UB bcid, UB msgid, UB devno, UB actstp, UB prid1, UB inf, UB inf2)
    000039D6              __$StaQgProcList:                ; function: __$StaQgProcList
                                                           ; frame size=12
    000039D6 2FC6                   MOV.L       R12,@-R15
    000039D8 2FD6                   MOV.L       R13,@-R15
    000039DA 2FE6                   MOV.L       R14,@-R15
    000039DC ECFF                   MOV         #-1,R12    ; H'FFFFFFFF
             tskcmd.c       6412    {
             tskcmd.c       6413      if( ( bcid != NO_DATA )&&( bcid < BCCTRL_MAX ))
    000039DE 6243                   MOV         R4,R2
    000039E0 6463                   MOV         R6,R4
    000039E2 51F3                   MOV.L       @(12,R15),R1
    000039E4 662C                   EXTU.B      R2,R6
    000039E6 5EF4                   MOV.L       @(16,R15),R14
    000039E8 6CCC                   EXTU.B      R12,R12
    000039EA 36C0                   CMP/EQ      R12,R6
    000039EC 8D16                   BT/S        L769
    000039EE 5DF5                   MOV.L       @(20,R15),R13
    000039F0 EC13                   MOV         #19,R12    ; H'00000013
    000039F2 36C3                   CMP/GE      R12,R6
    000039F4 8912                   BT          L769
             tskcmd.c       6414      {
             tskcmd.c       6415          bcctrl[bcid].msgid  = msgid;
    000039F6 602C                   EXTU.B      R2,R0
    000039F8 4008                   SHLL2       R0
    000039FA 4000                   SHLL        R0
    000039FC D642                   MOV.L       L1388+56,R6; __$bcctrl
    000039FE 0654                   MOV.B       R5,@(R0,R6); bcctrl[].msgid
             tskcmd.c       6416          bcctrl[bcid].devno  = devno;
    00003A00 6563                   MOV         R6,R5
    00003A02 7501                   ADD         #1,R5
             tskcmd.c       6417          bcctrl[bcid].prid1  = prid1;
    00003A04 6C63                   MOV         R6,R12
    00003A06 7C03                   ADD         #3,R12
    00003A08 0544                   MOV.B       R4,@(R0,R5); bcctrl[].devno
    00003A0A 0C14                   MOV.B       R1,@(R0,R12); bcctrl[].prid1
             tskcmd.c       6418          bcctrl[bcid].actstp = actstp;
    00003A0C 6163                   MOV         R6,R1
             tskcmd.c       6419          bcctrl[bcid].inf    = inf;
    00003A0E 6463                   MOV         R6,R4
             tskcmd.c       6420          bcctrl[bcid].inf2   = inf2;// プロトコル実行時は、プロトコル番号
    00003A10 7605                   ADD         #5,R6
    00003A12 7102                   ADD         #2,R1
    00003A14 7404                   ADD         #4,R4
    00003A16 0174                   MOV.B       R7,@(R0,R1); bcctrl[].actstp
    00003A18 04E4                   MOV.B       R14,@(R0,R4); bcctrl[].inf
    00003A1A 06D4                   MOV.B       R13,@(R0,R6); bcctrl[].inf2
    00003A1C              L769:
    00003A1C 6EF6                   MOV.L       @R15+,R14
    00003A1E 6DF6                   MOV.L       @R15+,R13
             tskcmd.c       6421      }
             tskcmd.c       6422    }
    00003A20 000B                   RTS
    00003A22 6CF6                   MOV.L       @R15+,R12
             tskcmd.c       6423    
             tskcmd.c       6424    /***********************************************************************
             tskcmd.c       6425    * 
             tskcmd.c       6426    * [概要]  QG12S処理リスト空き確認
             tskcmd.c       6427    * [引数]  
             tskcmd.c       6428    * [戻値]  NO_DATA：空き無し
             tskcmd.c       6429    * 
             tskcmd.c       6430    ***********************************************************************/
             tskcmd.c       6431    static UB GetQgProcList( UB procid )
    00003A24              __$GetQgProcList:                ; function: __$GetQgProcList
                                                           ; frame size=0
    00003A24 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
             tskcmd.c       6432    {
             tskcmd.c       6433      UB   result = NO_DATA;
             tskcmd.c       6434      UB index;
             tskcmd.c       6435    
             tskcmd.c       6436      if(( procid != NO_DATA )&&( procid != CLR ))
    00003A26 624C                   EXTU.B      R4,R2
    00003A28 611C                   EXTU.B      R1,R1
    00003A2A 3210                   CMP/EQ      R1,R2
    00003A2C 890D                   BT          L773
    00003A2E 2228                   TST         R2,R2
    00003A30 890B                   BT          L773
             tskcmd.c       6437      {
             tskcmd.c       6438          for( index = 0; index < BCCTRL_MAX; index++ )
    00003A32 E400                   MOV         #0,R4      ; H'00000000
    00003A34 E713                   MOV         #19,R7     ; H'00000013
    00003A36 D535                   MOV.L       L1388+60,R5; H'00000003+__$bcctrl
    00003A38              L775:
             tskcmd.c       6439          {
             tskcmd.c       6440              if(( bcctrl[index].prid1 == NO_DATA )&&( result == NO_DATA ))
    00003A38 36518000               MOVU.B      @(0,R5),R6 ; bcctrl[].prid1
    00003A3C 3610                   CMP/EQ      R1,R6
    00003A3E 8906                   BT          L776
    00003A40 7401                   ADD         #1,R4
    00003A42 624C                   EXTU.B      R4,R2
    00003A44 3273                   CMP/GE      R7,R2
    00003A46 8FF7                   BF/S        L775
    00003A48 7508                   ADD         #8,R5
    00003A4A              L773:
             tskcmd.c       6441              {
             tskcmd.c       6442                  return( index );//最初にみつけた空き位置
             tskcmd.c       6443              }
             tskcmd.c       6444          }
             tskcmd.c       6445      }
             tskcmd.c       6446      else
             tskcmd.c       6447      {
             tskcmd.c       6448          result = NO_DATA;
             tskcmd.c       6449      }
             tskcmd.c       6450      
             tskcmd.c       6451      return( result );
    00003A4A 000B                   RTS
    00003A4C E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
    00003A4E              L776:
    00003A4E 000B                   RTS
    00003A50 6043                   MOV         R4,R0
             tskcmd.c       6452    }
             tskcmd.c       6453    
             tskcmd.c       6454    /***********************************************************************
             tskcmd.c       6455    * 
             tskcmd.c       6456    * [概要]  QG12S処理リスト重複確認
             tskcmd.c       6457    * [引数]  
             tskcmd.c       6458    * [戻値]  TRUE：重複もしくはID規定外
             tskcmd.c       6459    * 
             tskcmd.c       6460    ***********************************************************************/
             tskcmd.c       6461    static BOOL IsQgProcList( UB procid )
    00003A52              __$IsQgProcList:                 ; function: __$IsQgProcList
                                                           ; frame size=0
    00003A52 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c       6462    {
             tskcmd.c       6463      BOOL  result = FALSE;
             tskcmd.c       6464      UB    index;
             tskcmd.c       6465    
             tskcmd.c       6466    //    if(( procid != NO_DATA )&&( procid != CLR )&&( procid < BCCTRL_MAX ))
             tskcmd.c       6467      if(( procid != NO_DATA )&&( procid != CLR ))
    00003A54 674C                   EXTU.B      R4,R7
    00003A56 622C                   EXTU.B      R2,R2
    00003A58 3720                   CMP/EQ      R2,R7
    00003A5A 8D10                   BT/S        L781
    00003A5C E100                   MOV         #0,R1      ; H'00000000
    00003A5E 2778                   TST         R7,R7
    00003A60 890D                   BT          L781
             tskcmd.c       6468      {
             tskcmd.c       6469          for( index = 0; index < BCCTRL_MAX; index++ )
    00003A62 E400                   MOV         #0,R4      ; H'00000000
    00003A64 D529                   MOV.L       L1388+60,R5; H'00000003+__$bcctrl
    00003A66              L783:
             tskcmd.c       6470          {
             tskcmd.c       6471              if( bcctrl[index].prid1 == procid )
    00003A66 36518000               MOVU.B      @(0,R5),R6 ; bcctrl[].prid1
    00003A6A 3670                   CMP/EQ      R7,R6
    00003A6C 8907                   BT          L781
    00003A6E 7401                   ADD         #1,R4
    00003A70 E613                   MOV         #19,R6     ; H'00000013
    00003A72 624C                   EXTU.B      R4,R2
    00003A74 3263                   CMP/GE      R6,R2
    00003A76 8FF6                   BF/S        L783
    00003A78 7508                   ADD         #8,R5
    00003A7A A002                   BRA         L785
    00003A7C 0009                   NOP
    00003A7E              L781:
    00003A7E E101                   MOV         #1,R1      ; H'00000001
    00003A80 017B                   RTV/N       R1
    00003A82              L785:
    00003A82 017B                   RTV/N       R1
             tskcmd.c       6472              {
             tskcmd.c       6473                  result =  TRUE;
             tskcmd.c       6474                  break;
             tskcmd.c       6475              }
             tskcmd.c       6476          }
             tskcmd.c       6477      }
             tskcmd.c       6478      else
             tskcmd.c       6479      {
             tskcmd.c       6480          result =  TRUE;
             tskcmd.c       6481      }
             tskcmd.c       6482      
             tskcmd.c       6483      return( result );
             tskcmd.c       6484    }
             tskcmd.c       6485    /***********************************************************************
             tskcmd.c       6486    * 
             tskcmd.c       6487    * [概要]  
             tskcmd.c       6488    * [引数]  
             tskcmd.c       6489    * [戻値]  
             tskcmd.c       6490    * 
             tskcmd.c       6491    ***********************************************************************/
             tskcmd.c       6492    static void SetUserInfoSorce( ST_USERINFO *user )
    00003A84              __$SetUserInfoSorce:             ; function: __$SetUserInfoSorce
                                                           ; frame size=0
             tskcmd.c       6493    {
             tskcmd.c       6494      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       6495      memcpy( &RcvUserInfo.Id[0], user, sizeof(ST_USERINFO) );
    00003A84 6543                   MOV         R4,R5
    00003A86 D422                   MOV.L       L1388+64,R4; __$RcvUserInfo
    00003A88 D222                   MOV.L       L1388+68,R2; _memcpy
    00003A8A 422B                   JMP         @R2
    00003A8C E60C                   MOV         #12,R6     ; H'0000000C
             tskcmd.c       6496    }
             tskcmd.c       6497    /***********************************************************************
             tskcmd.c       6498    * 
             tskcmd.c       6499    * [概要]  
             tskcmd.c       6500    * [引数]  
             tskcmd.c       6501    * [戻値]  
             tskcmd.c       6502    * 
             tskcmd.c       6503    ***********************************************************************/
             tskcmd.c       6504    static void ClrUserInfoSorce()
             tskcmd.c       6505    {
             tskcmd.c       6506      memset( &RcvUserInfo.Id[0], CLR, sizeof( ST_USERINFO ) );
             tskcmd.c       6507    }
             tskcmd.c       6508    /***********************************************************************
             tskcmd.c       6509    * 
             tskcmd.c       6510    * [概要]  
             tskcmd.c       6511    * [引数]  
             tskcmd.c       6512    * [戻値]  
             tskcmd.c       6513    * 
             tskcmd.c       6514    ***********************************************************************/
             tskcmd.c       6515    static UB ChkUserInfo()
    00003A8E              __$ChkUserInfo:                  ; function: __$ChkUserInfo
                                                           ; frame size=28
    00003A8E 49F0                   MOVMU.L     R9,@-R15
    00003A90 DE21                   MOV.L       L1388+72,R14; __$BkP1
    00003A92 64E3                   MOV         R14,R4
             tskcmd.c       6516    {
             tskcmd.c       6517      UB i = 0;
             tskcmd.c       6518      
             tskcmd.c       6519      eep_GetUserInfo  ( &BkP1.User[0].Id[0] );
             tskcmd.c       6520    
             tskcmd.c       6521      for( i = 0; i < USER_CT_MAX; i++ )
    00003A94 D221                   MOV.L       L1388+76,R2; _eep_GetUserInfo
    00003A96 420B                   JSR         @R2
    00003A98 ED00                   MOV         #0,R13     ; H'00000000
    00003A9A DA21                   MOV.L       L1388+80,R10; _Strncmp
    00003A9C DC1C                   MOV.L       L1388+64,R12; __$RcvUserInfo
    00003A9E DB21                   MOV.L       L1388+84,R11; H'00000008+__$RcvUserInfo
    00003AA0 E90A                   MOV         #10,R9     ; H'0000000A
    00003AA2              L789:
    00003AA2 E608                   MOV         #8,R6      ; H'00000008
             tskcmd.c       6522      {
             tskcmd.c       6523          if(
    00003AA4 65E3                   MOV         R14,R5
    00003AA6 4A0B                   JSR         @R10
    00003AA8 64C3                   MOV         R12,R4
    00003AAA 2008                   TST         R0,R0
    00003AAC 8B08                   BF          L791
    00003AAE 65E3                   MOV         R14,R5
    00003AB0 7508                   ADD         #8,R5
    00003AB2 E604                   MOV         #4,R6      ; H'00000004
    00003AB4 4A0B                   JSR         @R10
    00003AB6 64B3                   MOV         R11,R4
    00003AB8 2008                   TST         R0,R0
    00003ABA 8B01                   BF          L791
             tskcmd.c       6524              ( Strncmp( &RcvUserInfo.Id[0], &BkP1.User[i].Id[0], USER_ID_MAX ) == 0 )&&
             tskcmd.c       6525              ( Strncmp( &RcvUserInfo.Pw[0], &BkP1.User[i].Pw[0], USER_PW_MAX ) == 0 )
             tskcmd.c       6526          )
             tskcmd.c       6527          {
             tskcmd.c       6528              i++;
    00003ABC A005                   BRA         L793
    00003ABE 7D01                   ADD         #1,R13
    00003AC0              L791:
    00003AC0 7D01                   ADD         #1,R13
    00003AC2 62DC                   EXTU.B      R13,R2
    00003AC4 3293                   CMP/GE      R9,R2
    00003AC6 8FEC                   BF/S        L789
    00003AC8 7E0C                   ADD         #12,R14
    00003ACA              L793:
    00003ACA 60D3                   MOV         R13,R0
    00003ACC 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       6529              break;
             tskcmd.c       6530          }
             tskcmd.c       6531      }
             tskcmd.c       6532      
             tskcmd.c       6533      return(i);
             tskcmd.c       6534    }
    00003ACE 006B                   RTS/N
    00003AD0              L1388:
    00003AD0 <00000000>             .DATA.L     __$CmdActionWait
    00003AD4 <00000000>             .DATA.L     __$CmdActionMix
    00003AD8 <00000000>             .DATA.L     __$CmdActionSuc
    00003ADC <00000000>             .DATA.L     __$CmdActionPut
    00003AE0 <00000000>             .DATA.L     __$CmdActionPrep1
    00003AE4 <00000000>             .DATA.L     __$CmdActionPrep2
    00003AE8 <00000000>             .DATA.L     __$CmdActionIncub
    00003AEC <00000000>             .DATA.L     __$CmdActionMove
    00003AF0 <00000000>             .DATA.L     __$pProcDat
    00003AF4 <00000000>             .DATA.L     __$pProcAdr
    00003AF8 <00000000>             .DATA.L     __$WaitAction
    00003AFC <00000000>             .DATA.L     _memset
    00003B00 <00000000>             .DATA.L     _DeviceInfoClr
    00003B04 <00000000>             .DATA.L     _DeviceInfoSet
    00003B08 <00000000>             .DATA.L     __$bcctrl
    00003B0C <00000003>             .DATA.L     H'00000003+__$bcctrl
    00003B10 <00000000>             .DATA.L     __$RcvUserInfo
    00003B14 <00000000>             .DATA.L     _memcpy
    00003B18 <00000000>             .DATA.L     __$BkP1
    00003B1C <00000000>             .DATA.L     _eep_GetUserInfo
    00003B20 <00000000>             .DATA.L     _Strncmp
    00003B24 <00000008>             .DATA.L     H'00000008+__$RcvUserInfo
             tskcmd.c       6535    
             tskcmd.c       6536    /***********************************************************************
             tskcmd.c       6537    * 
             tskcmd.c       6538    * [概要]  
             tskcmd.c       6539    * [引数]  
             tskcmd.c       6540    * [戻値]  
             tskcmd.c       6541    * 
             tskcmd.c       6542    ***********************************************************************/
             tskcmd.c       6543    static UB GetProtocolStatus( UB dev, UB ptn )
             tskcmd.c       6544    {
             tskcmd.c       6545      UB result = E_OK;
             tskcmd.c       6546      
             tskcmd.c       6547      // ステップから状態読込み
             tskcmd.c       6548      
             tskcmd.c       6549      
             tskcmd.c       6550      
             tskcmd.c       6551      
             tskcmd.c       6552      return( result );
             tskcmd.c       6553    }
             tskcmd.c       6554    /***********************************************************************
             tskcmd.c       6555    * 
             tskcmd.c       6556    * [概要]  状態取得
             tskcmd.c       6557    * [引数]  
             tskcmd.c       6558    * [戻値]  
             tskcmd.c       6559    * 
             tskcmd.c       6560    ***********************************************************************/
             tskcmd.c       6561    static ER  CmdActionStatus( T_CMD_MSG* mrcv )
             tskcmd.c       6562    {
             tskcmd.c       6563      ER result = E_CONTINUE;
             tskcmd.c       6564      return( result );
             tskcmd.c       6565    }
             tskcmd.c       6566    
             tskcmd.c       6567    /***********************************************************************
             tskcmd.c       6568    * 
             tskcmd.c       6569    * [概要]  チップ取得
             tskcmd.c       6570    * [引数]  
             tskcmd.c       6571    * [戻値]  
             tskcmd.c       6572    * 
             tskcmd.c       6573    ***********************************************************************/
             tskcmd.c       6574    static ER  CmdActionTipGet( T_CMD_MSG* mrcv )
    00003B28              __$CmdActionTipGet:              ; function: __$CmdActionTipGet
                                                           ; frame size=228
    00003B28 4AF0                   MOVMU.L     R10,@-R15
    00003B2A 03F0FF54               MOVI20      #-172,R3   ; H'FFFFFF54
    00003B2E 3F3C                   ADD         R3,R15
             tskcmd.c       6575    {
             tskcmd.c       6576      ER result = E_CONTINUE;
    00003B30 6143                   MOV         R4,R1
    00003B32 E4F1                   MOV         #-15,R4    ; H'FFFFFFF1
             tskcmd.c       6577      UB bcid;
             tskcmd.c       6578      UB prid1;
             tskcmd.c       6579      UB actstep;
             tskcmd.c       6580      UB spdptn;
             tskcmd.c       6581      UB movptn;
             tskcmd.c       6582      UB devno;
             tskcmd.c       6583      INT movval;
             tskcmd.c       6584    
             tskcmd.c       6585      UB spdptnwk;
             tskcmd.c       6586      bcid  = mrcv->msgdata.bcid;
    00003B34 3011801A               MOVU.B      @(26,R1),R0; (mrcv)->bcid
             tskcmd.c       6587      actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       6588      
             tskcmd.c       6589      switch( pProcDat->Stp )
    00003B38 DAA9                   MOV.L       L1389+2,R10; __$pProcDat
    00003B3A 6C03                   MOV         R0,R12
    00003B3C 61A2                   MOV.L       @R10,R1    ; pProcDat
    00003B3E 4008                   SHLL2       R0
    00003B40 D5A8                   MOV.L       L1389+6,R5 ; H'00000002+__$bcctrl
    00003B42 4000                   SHLL        R0
    00003B44 025C                   MOV.B       @(R0,R5),R2; bcctrl[].actstp
    00003B46 644C                   EXTU.B      R4,R4
    00003B48 30118002               MOVU.B      @(2,R1),R0 ; (pProcDat)->Stp
    00003B4C 72FF                   ADD         #-1,R2
    00003B4E 6B43                   MOV         R4,R11
    00003B50 2008                   TST         R0,R0
    00003B52 8D16                   BT/S        L805
    00003B54 6E2C                   EXTU.B      R2,R14
    00003B56 8801                   CMP/EQ      #1,R0
    00003B58 8916                   BT          L807
    00003B5A 8802                   CMP/EQ      #2,R0
    00003B5C 8952                   BT          L809
    00003B5E 8803                   CMP/EQ      #3,R0
    00003B60 8B01                   BF          L1416
    00003B62 A09E                   BRA         L811
    00003B64 0009                   NOP
    00003B66              L1416:
    00003B66 8804                   CMP/EQ      #4,R0
    00003B68 8B01                   BF          L1417
    00003B6A A0EC                   BRA         L813
    00003B6C 0009                   NOP
    00003B6E              L1417:
    00003B6E 8805                   CMP/EQ      #5,R0
    00003B70 8B01                   BF          L1418
    00003B72 A151                   BRA         L815
    00003B74 0009                   NOP
    00003B76              L1418:
    00003B76 8806                   CMP/EQ      #6,R0
    00003B78 8B01                   BF          L1419
    00003B7A A19F                   BRA         L816
    00003B7C 0009                   NOP
    00003B7E              L1419:
    00003B7E A1A2                   BRA         L817
    00003B80 0009                   NOP
    00003B82              L805:
             tskcmd.c       6590      {
             tskcmd.c       6591      case 0: // チップ未装着確認（チップ装着済みの場合、チップ装着エラー通知し終了）
             tskcmd.c       6592          // ★チップ有無確認したいが、センサ無しのため、スルー
             tskcmd.c       6593          
             tskcmd.c       6594          
             tskcmd.c       6595          
             tskcmd.c       6596          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6597          pProcDat->Stp++;
    00003B82 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00003B84 7001                   ADD         #1,R0
    00003B86 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00003B88              L807:
             tskcmd.c       6598          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6599    
             tskcmd.c       6600    
             tskcmd.c       6601      case 1: // Z軸速度設定・退避位置移動
             tskcmd.c       6602          devno  = MT_Z0;
             tskcmd.c       6603          spdptn = SpPtn.Z0_SpdIniPtn;
    00003B88 D797                   MOV.L       L1389+10,R7; H'00000001+__$SpPtn
    00003B8A 6E70                   MOV.B       @R7,R14    ; SpPtn.Z0_SpdIniPtn
             tskcmd.c       6604          movval = GetPositionValue(POS_Z0_TAIHI);
    00003B8C D397                   MOV.L       L1389+14,R3; __$GetPositionValue
    00003B8E 430B                   JSR         @R3
    00003B90 E407                   MOV         #7,R4      ; H'00000007
    00003B92 6D03                   MOV         R0,R13
             tskcmd.c       6605    
             tskcmd.c       6606          MAC_SPEED_SET( devno, 
    00003B94 E00C                   MOV         #12,R0     ; H'0000000C
    00003B96 6EEC                   EXTU.B      R14,R14
    00003B98 4E80                   MULR        R0,R14
    00003B9A D595                   MOV.L       L1389+18,R5; H'00000078+__$Sp
    00003B9C 60E3                   MOV         R14,R0
    00003B9E 015D                   MOV.W       @(R0,R5),R1; Sp[].ac
    00003BA0 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
    00003BA4 D193                   MOV.L       L1389+22,R1; _GetFactor
    00003BA6 410B                   JSR         @R1
    00003BA8 E403                   MOV         #3,R4      ; H'00000003
    00003BAA D593                   MOV.L       L1389+26,R5; __$Sp
    00003BAC 6453                   MOV         R5,R4
    00003BAE 747C                   ADD         #124,R4
    00003BB0 2F02                   MOV.L       R0,@R15    ; mp.factor
    00003BB2 60E3                   MOV         R14,R0
    00003BB4 024E                   MOV.L       @(R0,R4),R2; Sp[].fl
    00003BB6 6753                   MOV         R5,R7
    00003BB8 757A                   ADD         #122,R5
    00003BBA E100                   MOV         #0,R1      ; H'00000000
    00003BBC 1F22                   MOV.L       R2,@(8,R15); mp.FL
    00003BBE E280                   MOV         #-128,R2   ; H'FFFFFF80
    00003BC0 622C                   EXTU.B      R2,R2
    00003BC2 0E5D                   MOV.W       @(R0,R5),R14; Sp[].gl
    00003BC4 372C                   ADD         R2,R7
    00003BC6 1F16                   MOV.L       R1,@(24,R15); mp.us
    00003BC8 047E                   MOV.L       @(R0,R7),R4; Sp[].fh
    00003BCA 6EED                   EXTU.W      R14,R14
    00003BCC 1FE4                   MOV.L       R14,@(16,R15); mp.utime
    00003BCE 1F43                   MOV.L       R4,@(12,R15); mp.FH
    00003BD0 1FE5                   MOV.L       R14,@(20,R15); mp.dtime
    00003BD2 1F17                   MOV.L       R1,@(28,R15); mp.ds
    00003BD4 7FE0                   ADD         #-32,R15
    00003BD6 65F3                   MOV         R15,R5
    00003BD8 7520                   ADD         #32,R5
    00003BDA 5653                   MOV.L       @(12,R5),R6; (part of)mp
    00003BDC E402                   MOV         #2,R4      ; H'00000002
    00003BDE 6E52                   MOV.L       @R5,R14    ; (part of)mp
    00003BE0 1F63                   MOV.L       R6,@(12,R15)
    00003BE2 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00003BE4 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    00003BE6 2FE2                   MOV.L       R14,@R15
    00003BE8 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    00003BEA 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00003BEC 1F65                   MOV.L       R6,@(20,R15)
    00003BEE 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00003BF0 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00003BF2 1F71                   MOV.L       R7,@(4,R15)
    00003BF4 1FE2                   MOV.L       R14,@(8,R15)
    00003BF6 1F14                   MOV.L       R1,@(16,R15)
    00003BF8 1F26                   MOV.L       R2,@(24,R15)
    00003BFA D280                   MOV.L       L1389+30,R2; _motor_SET
    00003BFC 420B                   JSR         @R2
    00003BFE 1F67                   MOV.L       R6,@(28,R15)
    00003C00 A14F                   BRA         L818
    00003C02 7F20                   ADD         #32,R15
    00003C04              L809:
             tskcmd.c       6607                         Sp[devno][spdptn].ac, 
             tskcmd.c       6608                         Sp[devno][spdptn].fl, 
             tskcmd.c       6609                         Sp[devno][spdptn].fh, 
             tskcmd.c       6610                         Sp[devno][spdptn].gl );
             tskcmd.c       6611    
             tskcmd.c       6612          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6613          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6614          pProcDat->Stp++;
             tskcmd.c       6615          break;
             tskcmd.c       6616    
             tskcmd.c       6617      case 2: // Y0軸速度設定・チップ装着位置移動
             tskcmd.c       6618          devno  = MT_Y0;
             tskcmd.c       6619          spdptn = SpPtn.Y0_SpdNmlPtn;
    00003C04 DD7E                   MOV.L       L1389+34,R13; H'00000005+__$SpPtn
    00003C06 61D0                   MOV.B       @R13,R1    ; SpPtn.Y0_SpdNmlPtn
    00003C08 E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6620          MAC_SPEED_SET( devno, 
    00003C0A D57E                   MOV.L       L1389+38,R5; H'0000003C+__$Sp
    00003C0C 3F1100A8               MOV.B       R1,@(168:12,R15); spdptn
    00003C10 611C                   EXTU.B      R1,R1
    00003C12 4180                   MULR        R0,R1
    00003C14 6013                   MOV         R1,R0
    00003C16 045D                   MOV.W       @(R0,R5),R4; Sp[].ac
    00003C18 3F411012               MOV.W       R4,@(36:12,R15); mp.accel_type
    00003C1C D575                   MOV.L       L1389+22,R5; _GetFactor
    00003C1E 450B                   JSR         @R5
    00003C20 E403                   MOV         #3,R4      ; H'00000003
    00003C22 31F180A8               MOVU.B      @(168,R15),R1; spdptn
    00003C26 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00003C28 E00C                   MOV         #12,R0     ; H'0000000C
    00003C2A 4180                   MULR        R0,R1
    00003C2C D572                   MOV.L       L1389+26,R5; __$Sp
    00003C2E 6753                   MOV         R5,R7
    00003C30 7740                   ADD         #64,R7
    00003C32 6D53                   MOV         R5,R13
    00003C34 753E                   ADD         #62,R5
    00003C36 6013                   MOV         R1,R0
    00003C38 017E                   MOV.L       @(R0,R7),R1; Sp[].fl
    00003C3A 7D44                   ADD         #68,R13
    00003C3C 1F1A                   MOV.L       R1,@(40,R15); mp.FL
    00003C3E 015D                   MOV.W       @(R0,R5),R1; Sp[].gl
    00003C40 E500                   MOV         #0,R5      ; H'00000000
    00003C42 02DE                   MOV.L       @(R0,R13),R2; Sp[].fh
    00003C44 611D                   EXTU.W      R1,R1
    00003C46 1F5E                   MOV.L       R5,@(56,R15); mp.us
    00003C48 1F2B                   MOV.L       R2,@(44,R15); mp.FH
    00003C4A 1F1C                   MOV.L       R1,@(48,R15); mp.utime
    00003C4C 1F1D                   MOV.L       R1,@(52,R15); mp.dtime
    00003C4E 1F5F                   MOV.L       R5,@(60,R15); mp.ds
    00003C50 7FE0                   ADD         #-32,R15
    00003C52 61F3                   MOV         R15,R1
    00003C54 7140                   ADD         #64,R1
    00003C56 5D11                   MOV.L       @(4,R1),R13; (part of)mp
    00003C58 E401                   MOV         #1,R4      ; H'00000001
    00003C5A 5612                   MOV.L       @(8,R1),R6 ; (part of)mp
    00003C5C 1FD1                   MOV.L       R13,@(4,R15)
    00003C5E 5D13                   MOV.L       @(12,R1),R13; (part of)mp
    00003C60 1F62                   MOV.L       R6,@(8,R15)
    00003C62 5615                   MOV.L       @(20,R1),R6; (part of)mp
    00003C64 6712                   MOV.L       @R1,R7     ; (part of)mp
    00003C66 1FD3                   MOV.L       R13,@(12,R15)
    00003C68 5D14                   MOV.L       @(16,R1),R13; (part of)mp
    00003C6A 1F65                   MOV.L       R6,@(20,R15)
    00003C6C 5216                   MOV.L       @(24,R1),R2; (part of)mp
    00003C6E 5617                   MOV.L       @(28,R1),R6; (part of)mp
    00003C70 2F72                   MOV.L       R7,@R15
    00003C72 1FD4                   MOV.L       R13,@(16,R15)
    00003C74 1F26                   MOV.L       R2,@(24,R15)
    00003C76 D261                   MOV.L       L1389+30,R2; _motor_SET
    00003C78 420B                   JSR         @R2
    00003C7A 1F67                   MOV.L       R6,@(28,R15)
    00003C7C 7F20                   ADD         #32,R15
             tskcmd.c       6621                         Sp[devno][spdptn].ac, 
             tskcmd.c       6622                         Sp[devno][spdptn].fl, 
             tskcmd.c       6623                         Sp[devno][spdptn].fh, 
             tskcmd.c       6624                         Sp[devno][spdptn].gl );
             tskcmd.c       6625    
             tskcmd.c       6626          movptn = GetTipPatern( pProcAdr->step[actstep].par03 );
    00003C7E E014                   MOV         #20,R0     ; H'00000014
    00003C80 4E80                   MULR        R0,R14
    00003C82 D761                   MOV.L       L1389+42,R7; __$pProcAdr
    00003C84 6272                   MOV.L       @R7,R2     ; pProcAdr
    00003C86 7202                   ADD         #2,R2
    00003C88 60E3                   MOV         R14,R0
    00003C8A D360                   MOV.L       L1389+46,R3; __$GetTipPatern
    00003C8C 430B                   JSR         @R3
    00003C8E 042C                   MOV.B       @(R0,R2),R4; pProcAdr->step[].par03
             tskcmd.c       6627          movval = GetPositionValue(movptn);
    00003C90 D356                   MOV.L       L1389+14,R3; __$GetPositionValue
    00003C92 430B                   JSR         @R3
    00003C94 6403                   MOV         R0,R4
             tskcmd.c       6628          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00003C96 2F06                   MOV.L       R0,@-R15
    00003C98 65C3                   MOV         R12,R5
    00003C9A E601                   MOV         #1,R6      ; H'00000001
    00003C9C E700                   MOV         #0,R7      ; H'00000000
    00003C9E A105                   BRA         L819
    00003CA0 E451                   MOV         #81,R4     ; H'00000051
    00003CA2              L811:
             tskcmd.c       6629          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6630          pProcDat->Stp++;
             tskcmd.c       6631          break;
             tskcmd.c       6632          
             tskcmd.c       6633      case 3: // Z軸チップ取得速度（1段目）設定・1段目位置移動
             tskcmd.c       6634          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
    00003CA2 E014                   MOV         #20,R0     ; H'00000014
    00003CA4 65E3                   MOV         R14,R5
    00003CA6 4580                   MULR        R0,R5
    00003CA8 D457                   MOV.L       L1389+42,R4; __$pProcAdr
    00003CAA 6742                   MOV.L       @R4,R7     ; pProcAdr
    00003CAC EDFC                   MOV         #-4,R13    ; H'FFFFFFFC
    00003CAE 7703                   ADD         #3,R7
    00003CB0 6053                   MOV         R5,R0
    00003CB2 077C                   MOV.B       @(R0,R7),R7; pProcAdr->step[].par04
    00003CB4 607C                   EXTU.B      R7,R0
    00003CB6 40DC                   SHAD        R13,R0
    00003CB8 C90F                   AND         #15,R0
             tskcmd.c       6635          
             tskcmd.c       6636          if( spdptn > 0 )
    00003CBA 2008                   TST         R0,R0
    00003CBC 8D40                   BT/S        L821
    00003CBE 6203                   MOV         R0,R2
             tskcmd.c       6637          {
             tskcmd.c       6638              devno  = MT_Z0;
             tskcmd.c       6639              MAC_SPEED_SET( devno, 
    00003CC0 E00C                   MOV         #12,R0     ; H'0000000C
    00003CC2 4280                   MULR        R0,R2
    00003CC4 DE4A                   MOV.L       L1389+18,R14; H'00000078+__$Sp
    00003CC6 6023                   MOV         R2,R0
    00003CC8 04ED                   MOV.W       @(R0,R14),R4; Sp[].ac
    00003CCA 3F212028               MOV.L       R2,@(160:12,R15)
    00003CCE 3F411022               MOV.W       R4,@(68:12,R15); mp.accel_type
    00003CD2 DD48                   MOV.L       L1389+22,R13; _GetFactor
    00003CD4 4D0B                   JSR         @R13
    00003CD6 E403                   MOV         #3,R4      ; H'00000003
    00003CD8 E340                   MOV         #64,R3     ; H'00000040
    00003CDA E280                   MOV         #-128,R2   ; H'FFFFFF80
    00003CDC 33FC                   ADD         R15,R3
    00003CDE 622C                   EXTU.B      R2,R2
    00003CE0 2302                   MOV.L       R0,@R3     ; mp.factor
    00003CE2 D745                   MOV.L       L1389+26,R7; __$Sp
    00003CE4 30F16028               MOV.L       @(160:12,R15),R0
    00003CE8 6E73                   MOV         R7,R14
    00003CEA 7E7C                   ADD         #124,R14
    00003CEC 6173                   MOV         R7,R1
    00003CEE 777A                   ADD         #122,R7
    00003CF0 05EE                   MOV.L       @(R0,R14),R5; Sp[].fl
    00003CF2 312C                   ADD         R2,R1
    00003CF4 047D                   MOV.W       @(R0,R7),R4; Sp[].gl
    00003CF6 0D1E                   MOV.L       @(R0,R1),R13; Sp[].fh
    00003CF8 1352                   MOV.L       R5,@(8,R3) ; mp.FL
    00003CFA 644D                   EXTU.W      R4,R4
    00003CFC E500                   MOV         #0,R5      ; H'00000000
    00003CFE 13D3                   MOV.L       R13,@(12,R3); mp.FH
    00003D00 1344                   MOV.L       R4,@(16,R3); mp.utime
    00003D02 1345                   MOV.L       R4,@(20,R3); mp.dtime
    00003D04 1356                   MOV.L       R5,@(24,R3); mp.us
    00003D06 1357                   MOV.L       R5,@(28,R3); mp.ds
    00003D08 7FE0                   ADD         #-32,R15
    00003D0A 65F3                   MOV         R15,R5
    00003D0C 7560                   ADD         #96,R5
    00003D0E 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    00003D10 E402                   MOV         #2,R4      ; H'00000002
    00003D12 5153                   MOV.L       @(12,R5),R1; (part of)mp
    00003D14 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00003D16 6752                   MOV.L       @R5,R7     ; (part of)mp
    00003D18 1FE1                   MOV.L       R14,@(4,R15)
    00003D1A 5D52                   MOV.L       @(8,R5),R13; (part of)mp
    00003D1C 1F13                   MOV.L       R1,@(12,R15)
    00003D1E 5E54                   MOV.L       @(16,R5),R14; (part of)mp
    00003D20 1F65                   MOV.L       R6,@(20,R15)
    00003D22 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00003D24 5157                   MOV.L       @(28,R5),R1; (part of)mp
    00003D26 2F72                   MOV.L       R7,@R15
    00003D28 1FD2                   MOV.L       R13,@(8,R15)
    00003D2A 1FE4                   MOV.L       R14,@(16,R15)
    00003D2C 1F66                   MOV.L       R6,@(24,R15)
    00003D2E D233                   MOV.L       L1389+30,R2; _motor_SET
    00003D30 420B                   JSR         @R2
    00003D32 1F17                   MOV.L       R1,@(28,R15)
    00003D34 7F20                   ADD         #32,R15
             tskcmd.c       6640                             Sp[devno][spdptn].ac, 
             tskcmd.c       6641                             Sp[devno][spdptn].fl, 
             tskcmd.c       6642                             Sp[devno][spdptn].fh, 
             tskcmd.c       6643                             Sp[devno][spdptn].gl );
             tskcmd.c       6644              movval = GetPositionValue(POS_Z0_TPGT1);
    00003D36 D32D                   MOV.L       L1389+14,R3; __$GetPositionValue
    00003D38 430B                   JSR         @R3
    00003D3A E41B                   MOV         #27,R4     ; H'0000001B
    00003D3C A0B1                   BRA         L818
    00003D3E 6D03                   MOV         R0,R13
    00003D40              L821:
             tskcmd.c       6645              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6646              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6647              pProcDat->Stp++;
             tskcmd.c       6648              break;
             tskcmd.c       6649          }
             tskcmd.c       6650          else
             tskcmd.c       6651          {
             tskcmd.c       6652              pProcDat->Stp++;
    00003D40 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00003D42 7001                   ADD         #1,R0
    00003D44 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00003D46              L813:
             tskcmd.c       6653              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6654          }
             tskcmd.c       6655    
             tskcmd.c       6656    
             tskcmd.c       6657      case 4: // Z軸チップ取得速度（最終）設定・最終位置移動
             tskcmd.c       6658          spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
    00003D46 E014                   MOV         #20,R0     ; H'00000014
    00003D48 4E80                   MULR        R0,R14
    00003D4A D42F                   MOV.L       L1389+42,R4; __$pProcAdr
    00003D4C 6542                   MOV.L       @R4,R5     ; pProcAdr
    00003D4E 7503                   ADD         #3,R5
    00003D50 60E3                   MOV         R14,R0
    00003D52 005C                   MOV.B       @(R0,R5),R0; pProcAdr->step[].par04
    00003D54 C90F                   AND         #15,R0
             tskcmd.c       6659    
             tskcmd.c       6660          if( spdptn > 0 )
    00003D56 2008                   TST         R0,R0
    00003D58 8D5A                   BT/S        L823
    00003D5A 6203                   MOV         R0,R2
             tskcmd.c       6661          {
             tskcmd.c       6662              devno  = MT_Z0;
             tskcmd.c       6663              MAC_SPEED_SET( devno, 
    00003D5C E00C                   MOV         #12,R0     ; H'0000000C
    00003D5E EE60                   MOV         #96,R14    ; H'00000060
    00003D60 4280                   MULR        R0,R2
    00003D62 D723                   MOV.L       L1389+18,R7; H'00000078+__$Sp
    00003D64 3EFC                   ADD         R15,R14
    00003D66 E403                   MOV         #3,R4      ; H'00000003
    00003D68 6023                   MOV         R2,R0
    00003D6A 007D                   MOV.W       @(R0,R7),R0; Sp[].ac
    00003D6C 3F212029               MOV.L       R2,@(164:12,R15)
    00003D70 DD20                   MOV.L       L1389+22,R13; _GetFactor
    00003D72 4D0B                   JSR         @R13
    00003D74 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    00003D76 2E02                   MOV.L       R0,@R14    ; mp.factor
    00003D78 E280                   MOV         #-128,R2   ; H'FFFFFF80
    00003D7A D11F                   MOV.L       L1389+26,R1; __$Sp
    00003D7C 30F16029               MOV.L       @(164:12,R15),R0
    00003D80 6413                   MOV         R1,R4
    00003D82 747C                   ADD         #124,R4
    00003D84 054E                   MOV.L       @(R0,R4),R5; Sp[].fl
    00003D86 622C                   EXTU.B      R2,R2
    00003D88 1E52                   MOV.L       R5,@(8,R14); mp.FL
    00003D8A 6513                   MOV         R1,R5
    00003D8C 352C                   ADD         R2,R5
    00003D8E 717A                   ADD         #122,R1
    00003D90 075E                   MOV.L       @(R0,R5),R7; Sp[].fh
    00003D92 061D                   MOV.W       @(R0,R1),R6; Sp[].gl
    00003D94 1E73                   MOV.L       R7,@(12,R14); mp.FH
    00003D96 E700                   MOV         #0,R7      ; H'00000000
    00003D98 666D                   EXTU.W      R6,R6
    00003D9A 1E76                   MOV.L       R7,@(24,R14); mp.us
    00003D9C 1E64                   MOV.L       R6,@(16,R14); mp.utime
    00003D9E 1E65                   MOV.L       R6,@(20,R14); mp.dtime
    00003DA0 1E77                   MOV.L       R7,@(28,R14); mp.ds
    00003DA2 7FE0                   ADD         #-32,R15
    00003DA4 ED80                   MOV         #-128,R13  ; H'FFFFFF80
    00003DA6 65F3                   MOV         R15,R5
    00003DA8 6DDC                   EXTU.B      R13,R13
    00003DAA E402                   MOV         #2,R4      ; H'00000002
    00003DAC 35DC                   ADD         R13,R5
    00003DAE 6E52                   MOV.L       @R5,R14    ; (part of)mp
    00003DB0 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    00003DB2 2FE2                   MOV.L       R14,@R15
    00003DB4 5E53                   MOV.L       @(12,R5),R14; (part of)mp
    00003DB6 5D51                   MOV.L       @(4,R5),R13; (part of)mp
    00003DB8 1F12                   MOV.L       R1,@(8,R15)
    00003DBA 1FE3                   MOV.L       R14,@(12,R15)
    00003DBC 5754                   MOV.L       @(16,R5),R7; (part of)mp
    00003DBE 5155                   MOV.L       @(20,R5),R1; (part of)mp
    00003DC0 5E56                   MOV.L       @(24,R5),R14; (part of)mp
    00003DC2 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00003DC4 1FD1                   MOV.L       R13,@(4,R15)
    00003DC6 1F74                   MOV.L       R7,@(16,R15)
    00003DC8 1F15                   MOV.L       R1,@(20,R15)
    00003DCA 1FE6                   MOV.L       R14,@(24,R15)
    00003DCC D20B                   MOV.L       L1389+30,R2; _motor_SET
    00003DCE 420B                   JSR         @R2
    00003DD0 1F67                   MOV.L       R6,@(28,R15)
    00003DD2 7F20                   ADD         #32,R15
             tskcmd.c       6664                             Sp[devno][spdptn].ac, 
             tskcmd.c       6665                             Sp[devno][spdptn].fl, 
             tskcmd.c       6666                             Sp[devno][spdptn].fh, 
             tskcmd.c       6667                             Sp[devno][spdptn].gl );
             tskcmd.c       6668              movval = GetPositionValue(POS_Z0_TPGTE);
    00003DD4 D305                   MOV.L       L1389+14,R3; __$GetPositionValue
    00003DD6 430B                   JSR         @R3
    00003DD8 E41A                   MOV         #26,R4     ; H'0000001A
    00003DDA A062                   BRA         L818
    00003DDC 6D03                   MOV         R0,R13
    00003DDE              L1389:
    00003DDE 00000002               .RES.W      1
    00003DE0 <00000000>             .DATA.L     __$pProcDat
    00003DE4 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00003DE8 <00000001>             .DATA.L     H'00000001+__$SpPtn
    00003DEC <00000000>             .DATA.L     __$GetPositionValue
    00003DF0 <00000078>             .DATA.L     H'00000078+__$Sp
    00003DF4 <00000000>             .DATA.L     _GetFactor
    00003DF8 <00000000>             .DATA.L     __$Sp
    00003DFC <00000000>             .DATA.L     _motor_SET
    00003E00 <00000005>             .DATA.L     H'00000005+__$SpPtn
    00003E04 <0000003C>             .DATA.L     H'0000003C+__$Sp
    00003E08 <00000000>             .DATA.L     __$pProcAdr
    00003E0C <00000000>             .DATA.L     __$GetTipPatern
    00003E10              L823:
             tskcmd.c       6669    
             tskcmd.c       6670              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6671              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6672              pProcDat->Stp++;
             tskcmd.c       6673              break;
             tskcmd.c       6674          }
             tskcmd.c       6675          else
             tskcmd.c       6676          {
             tskcmd.c       6677              pProcDat->Stp++;
    00003E10 66A2                   MOV.L       @R10,R6    ; pProcDat
    00003E12 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00003E14 7001                   ADD         #1,R0
    00003E16 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00003E18              L815:
             tskcmd.c       6678              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6679          }
             tskcmd.c       6680    
             tskcmd.c       6681      case 5: // Z軸速度設定・退避位置移動
             tskcmd.c       6682          devno  = MT_Z0;
             tskcmd.c       6683          spdptn = SpPtn.Z0_SpdNmlPtn;
    00003E18 D43D                   MOV.L       L840+2,R4  ; H'00000006+__$SpPtn
    00003E1A 6040                   MOV.B       @R4,R0     ; SpPtn.Z0_SpdNmlPtn
             tskcmd.c       6684          movval = GetPositionValue(POS_Z0_TAIHI);
    00003E1C E407                   MOV         #7,R4      ; H'00000007
    00003E1E 3F0100A8               MOV.B       R0,@(168:12,R15); spdptn
    00003E22 D33C                   MOV.L       L840+6,R3  ; __$GetPositionValue
    00003E24 430B                   JSR         @R3
    00003E26 EE80                   MOV         #-128,R14  ; H'FFFFFF80
             tskcmd.c       6685    
             tskcmd.c       6686          MAC_SPEED_SET( devno, 
    00003E28 34F180A8               MOVU.B      @(168,R15),R4; spdptn
    00003E2C 6D03                   MOV         R0,R13
    00003E2E E00C                   MOV         #12,R0     ; H'0000000C
    00003E30 4480                   MULR        R0,R4
    00003E32 6EEC                   EXTU.B      R14,R14
    00003E34 D538                   MOV.L       L840+10,R5 ; H'00000078+__$Sp
    00003E36 3EFC                   ADD         R15,R14
    00003E38 6043                   MOV         R4,R0
    00003E3A 005D                   MOV.W       @(R0,R5),R0; Sp[].ac
    00003E3C 1E49                   MOV.L       R4,@(36,R14)
    00003E3E E403                   MOV         #3,R4      ; H'00000003
    00003E40 D536                   MOV.L       L840+14,R5 ; _GetFactor
    00003E42 450B                   JSR         @R5
    00003E44 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    00003E46 2E02                   MOV.L       R0,@R14    ; mp.factor
    00003E48 E280                   MOV         #-128,R2   ; H'FFFFFF80
    00003E4A D535                   MOV.L       L840+18,R5 ; __$Sp
    00003E4C 50E9                   MOV.L       @(36,R14),R0
    00003E4E 6753                   MOV         R5,R7
    00003E50 777C                   ADD         #124,R7
    00003E52 622C                   EXTU.B      R2,R2
    00003E54 017E                   MOV.L       @(R0,R7),R1; Sp[].fl
    00003E56 1E12                   MOV.L       R1,@(8,R14); mp.FL
    00003E58 6153                   MOV         R5,R1
    00003E5A 757A                   ADD         #122,R5
    00003E5C 312C                   ADD         R2,R1
    00003E5E 045D                   MOV.W       @(R0,R5),R4; Sp[].gl
    00003E60 E500                   MOV         #0,R5      ; H'00000000
    00003E62 021E                   MOV.L       @(R0,R1),R2; Sp[].fh
    00003E64 644D                   EXTU.W      R4,R4
    00003E66 1E56                   MOV.L       R5,@(24,R14); mp.us
    00003E68 1E23                   MOV.L       R2,@(12,R14); mp.FH
    00003E6A 1E44                   MOV.L       R4,@(16,R14); mp.utime
    00003E6C 1E45                   MOV.L       R4,@(20,R14); mp.dtime
    00003E6E 1E57                   MOV.L       R5,@(28,R14); mp.ds
    00003E70 7FE0                   ADD         #-32,R15
    00003E72 E7A0                   MOV         #-96,R7    ; H'FFFFFFA0
    00003E74 65F3                   MOV         R15,R5
    00003E76 677C                   EXTU.B      R7,R7
    00003E78 E402                   MOV         #2,R4      ; H'00000002
    00003E7A 357C                   ADD         R7,R5
    00003E7C 5653                   MOV.L       @(12,R5),R6; (part of)mp
    00003E7E 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    00003E80 1F63                   MOV.L       R6,@(12,R15)
    00003E82 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00003E84 6752                   MOV.L       @R5,R7     ; (part of)mp
    00003E86 1FE1                   MOV.L       R14,@(4,R15)
    00003E88 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    00003E8A 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00003E8C 1F65                   MOV.L       R6,@(20,R15)
    00003E8E 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00003E90 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00003E92 2F72                   MOV.L       R7,@R15
    00003E94 1FE2                   MOV.L       R14,@(8,R15)
    00003E96 1F14                   MOV.L       R1,@(16,R15)
    00003E98 1F26                   MOV.L       R2,@(24,R15)
    00003E9A D222                   MOV.L       L840+22,R2 ; _motor_SET
    00003E9C 420B                   JSR         @R2
    00003E9E 1F67                   MOV.L       R6,@(28,R15)
    00003EA0 7F20                   ADD         #32,R15
    00003EA2              L818:
    00003EA2 2FD6                   MOV.L       R13,@-R15
    00003EA4 65C3                   MOV         R12,R5
    00003EA6 E700                   MOV         #0,R7      ; H'00000000
    00003EA8 E451                   MOV         #81,R4     ; H'00000051
    00003EAA E602                   MOV         #2,R6      ; H'00000002
    00003EAC              L819:
    00003EAC D31E                   MOV.L       L840+26,R3 ; __$AbsmvAction
    00003EAE 434B                   JSR/N       @R3
    00003EB0 6403                   MOV         R0,R4
    00003EB2 2008                   TST         R0,R0
    00003EB4 8F03                   BF/S        L825
    00003EB6 7F04                   ADD         #4,R15
    00003EB8 A001                   BRA         L825
    00003EBA 64B3                   MOV         R11,R4
    00003EBC              L816:
             tskcmd.c       6687                         Sp[devno][spdptn].ac, 
             tskcmd.c       6688                         Sp[devno][spdptn].fl, 
             tskcmd.c       6689                         Sp[devno][spdptn].fh, 
             tskcmd.c       6690                         Sp[devno][spdptn].gl );
             tskcmd.c       6691    
             tskcmd.c       6692          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6693          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6694          pProcDat->Stp++;
             tskcmd.c       6695          break;
             tskcmd.c       6696    
             tskcmd.c       6697      case 6: // チップ装着確認（装着失敗時、チップ未装着エラー通知し終了）
             tskcmd.c       6698          // ★チップ有無確認
             tskcmd.c       6699    
             tskcmd.c       6700          result = E_SUCCESS;
    00003EBC E400                   MOV         #0,R4      ; H'00000000
    00003EBE              L825:
    00003EBE 66A2                   MOV.L       @R10,R6    ; pProcDat
    00003EC0 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00003EC2 7001                   ADD         #1,R0
    00003EC4 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00003EC6              L817:
    00003EC6 030000AC               MOVI20      #172,R3    ; H'000000AC
    00003ECA 3F3C                   ADD         R3,R15
    00003ECC 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       6701          pProcDat->Stp++;
             tskcmd.c       6702          break;
             tskcmd.c       6703      }
             tskcmd.c       6704      return( result );
             tskcmd.c       6705    }
    00003ECE 047B                   RTV/N       R4
             tskcmd.c       6706    /***********************************************************************
             tskcmd.c       6707    * 
             tskcmd.c       6708    * [概要]  チップ廃棄
             tskcmd.c       6709    * [引数]  
             tskcmd.c       6710    * [戻値]  
             tskcmd.c       6711    * [備考]  inf3：プランジャリトライカウンタに使用
             tskcmd.c       6712    * 
             tskcmd.c       6713    ***********************************************************************/
             tskcmd.c       6714    static ER  CmdActionTipDsp( T_CMD_MSG* mrcv )
    00003ED0              __$CmdActionTipDsp:              ; function: __$CmdActionTipDsp
                                                           ; frame size=232
    00003ED0 4AF0                   MOVMU.L     R10,@-R15
    00003ED2 03F0FF50               MOVI20      #-176,R3   ; H'FFFFFF50
    00003ED6 3F3C                   ADD         R3,R15
             tskcmd.c       6715    {
             tskcmd.c       6716      ER result = E_CONTINUE;
             tskcmd.c       6717      UB bcid;
             tskcmd.c       6718      UB prid1;
             tskcmd.c       6719      UB actstep;
             tskcmd.c       6720      UB spdptn;
             tskcmd.c       6721      UB movptn;
             tskcmd.c       6722      UB devno;
             tskcmd.c       6723      INT movval;
             tskcmd.c       6724      UB rtycnt;
             tskcmd.c       6725    
             tskcmd.c       6726      bcid  = mrcv->msgdata.bcid;
    00003ED8 3D41801A               MOVU.B      @(26,R4),R13; (mrcv)->bcid
             tskcmd.c       6727      actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       6728      
             tskcmd.c       6729      switch( pProcDat->Stp )
    00003EDC DA13                   MOV.L       L840+30,R10; __$pProcDat
    00003EDE 6CD3                   MOV         R13,R12
    00003EE0 64A2                   MOV.L       @R10,R4    ; pProcDat
    00003EE2 4D08                   SHLL2       R13
    00003EE4 E5F1                   MOV         #-15,R5    ; H'FFFFFFF1
    00003EE6 4D00                   SHLL        R13
    00003EE8 E708                   MOV         #8,R7      ; H'00000008
    00003EEA D111                   MOV.L       L840+34,R1 ; H'00000002+__$bcctrl
    00003EEC 60D3                   MOV         R13,R0
    00003EEE 011C                   MOV.B       @(R0,R1),R1; bcctrl[].actstp
    00003EF0 36418002               MOVU.B      @(2,R4),R6 ; (pProcDat)->Stp
    00003EF4 655C                   EXTU.B      R5,R5
    00003EF6 71FF                   ADD         #-1,R1
    00003EF8 3676                   CMP/HI      R7,R6
    00003EFA 6B53                   MOV         R5,R11
    00003EFC 8F02                   BF/S        L1420
    00003EFE 6E1C                   EXTU.B      R1,R14
    00003F00 A213                   BRA         L839
    00003F02 0009                   NOP
    00003F04              L1420:
    00003F04 4600                   SHLL        R6
    00003F06 C70B                   MOVA        L841,R0
    00003F08 006D                   MOV.W       @(R0,R6),R0
    00003F0A 0023                   BRAF        R0
    00003F0C 0009                   NOP
    00003F0E              L840:
    00003F0E 00000002               .RES.W      1
    00003F10 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00003F14 <00000000>             .DATA.L     __$GetPositionValue
    00003F18 <00000078>             .DATA.L     H'00000078+__$Sp
    00003F1C <00000000>             .DATA.L     _GetFactor
    00003F20 <00000000>             .DATA.L     __$Sp
    00003F24 <00000000>             .DATA.L     _motor_SET
    00003F28 <00000000>             .DATA.L     __$AbsmvAction
    00003F2C <00000000>             .DATA.L     __$pProcDat
    00003F30 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00003F34              L841:
    00003F34 0038                   .DATA.W     L828-L840
    00003F36 003E                   .DATA.W     L829-L840
    00003F38 00C6                   .DATA.W     L830-L840
    00003F3A 0164                   .DATA.W     L831-L840
    00003F3C 016A                   .DATA.W     L832-L840
    00003F3E 020A                   .DATA.W     L833-L840
    00003F40 02C2                   .DATA.W     L834-L840
    00003F42 036E                   .DATA.W     L835-L840
    00003F44 0412                   .DATA.W     L836-L840
    00003F46              L828:
             tskcmd.c       6730      {
             tskcmd.c       6731      case 0: // チップ未装着確認（チップ装着済みの場合、チップ装着エラー通知し終了）
             tskcmd.c       6732          // ★チップ有無確認したいが、センサ無しのため、スルー
             tskcmd.c       6733          
             tskcmd.c       6734          
             tskcmd.c       6735          
             tskcmd.c       6736          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6737          pProcDat->Stp++;
    00003F46 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    00003F48 7001                   ADD         #1,R0
    00003F4A 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00003F4C              L829:
             tskcmd.c       6738          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6739    
             tskcmd.c       6740    
             tskcmd.c       6741      case 1: // Z軸速度設定・退避位置移動
             tskcmd.c       6742          devno  = MT_Z0;
             tskcmd.c       6743          spdptn = SpPtn.Z0_SpdIniPtn;
    00003F4C DEBC                   MOV.L       L1390+2,R14; H'00000001+__$SpPtn
    00003F4E 60E0                   MOV.B       @R14,R0    ; SpPtn.Z0_SpdIniPtn
             tskcmd.c       6744          movval = GetPositionValue(POS_Z0_TAIHI);
    00003F50 DDBC                   MOV.L       L1390+6,R13; H'00000078+__$Sp
    00003F52 3F0100A0               MOV.B       R0,@(160:12,R15); spdptn
    00003F56 D3BC                   MOV.L       L1390+10,R3; __$GetPositionValue
    00003F58 430B                   JSR         @R3
    00003F5A E407                   MOV         #7,R4      ; H'00000007
             tskcmd.c       6745    
             tskcmd.c       6746          MAC_SPEED_SET( devno, 
    00003F5C 34F180A0               MOVU.B      @(160,R15),R4; spdptn
    00003F60 6E03                   MOV         R0,R14
    00003F62 E00C                   MOV         #12,R0     ; H'0000000C
    00003F64 4480                   MULR        R0,R4
    00003F66 6043                   MOV         R4,R0
    00003F68 05DD                   MOV.W       @(R0,R13),R5; Sp[].ac
    00003F6A 3F412029               MOV.L       R4,@(164:12,R15)
    00003F6E 3F511002               MOV.W       R5,@(4:12,R15); mp.accel_type
    00003F72 D7B6                   MOV.L       L1390+14,R7; _GetFactor
    00003F74 470B                   JSR         @R7
    00003F76 E403                   MOV         #3,R4      ; H'00000003
    00003F78 2F02                   MOV.L       R0,@R15    ; mp.factor
    00003F7A E400                   MOV         #0,R4      ; H'00000000
    00003F7C D1B4                   MOV.L       L1390+18,R1; __$Sp
    00003F7E 30F16029               MOV.L       @(164:12,R15),R0
    00003F82 6D13                   MOV         R1,R13
    00003F84 7D7C                   ADD         #124,R13
    00003F86 02DE                   MOV.L       @(R0,R13),R2; Sp[].fl
    00003F88 ED80                   MOV         #-128,R13  ; H'FFFFFF80
    00003F8A 6DDC                   EXTU.B      R13,R13
    00003F8C 1F46                   MOV.L       R4,@(24,R15); mp.us
    00003F8E 1F22                   MOV.L       R2,@(8,R15); mp.FL
    00003F90 6213                   MOV         R1,R2
    00003F92 32DC                   ADD         R13,R2
    00003F94 717A                   ADD         #122,R1
    00003F96 052E                   MOV.L       @(R0,R2),R5; Sp[].fh
    00003F98 1F47                   MOV.L       R4,@(28,R15); mp.ds
    00003F9A 1F53                   MOV.L       R5,@(12,R15); mp.FH
    00003F9C 051D                   MOV.W       @(R0,R1),R5; Sp[].gl
    00003F9E 655D                   EXTU.W      R5,R5
    00003FA0 1F54                   MOV.L       R5,@(16,R15); mp.utime
    00003FA2 1F55                   MOV.L       R5,@(20,R15); mp.dtime
    00003FA4 7FE0                   ADD         #-32,R15
    00003FA6 65F3                   MOV         R15,R5
    00003FA8 7520                   ADD         #32,R5
    00003FAA 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    00003FAC E402                   MOV         #2,R4      ; H'00000002
    00003FAE 6152                   MOV.L       @R5,R1     ; (part of)mp
    00003FB0 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    00003FB2 1F62                   MOV.L       R6,@(8,R15)
    00003FB4 5654                   MOV.L       @(16,R5),R6; (part of)mp
    00003FB6 2F12                   MOV.L       R1,@R15
    00003FB8 1F71                   MOV.L       R7,@(4,R15)
    00003FBA 5D53                   MOV.L       @(12,R5),R13; (part of)mp
    00003FBC 5155                   MOV.L       @(20,R5),R1; (part of)mp
    00003FBE 1F64                   MOV.L       R6,@(16,R15)
    00003FC0 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00003FC2 5757                   MOV.L       @(28,R5),R7; (part of)mp
    00003FC4 1FD3                   MOV.L       R13,@(12,R15)
    00003FC6 1F15                   MOV.L       R1,@(20,R15)
    00003FC8 1F66                   MOV.L       R6,@(24,R15)
    00003FCA D2A2                   MOV.L       L1390+22,R2; _motor_SET
    00003FCC 420B                   JSR         @R2
    00003FCE 1F77                   MOV.L       R7,@(28,R15)
    00003FD0 A199                   BRA         L844
    00003FD2 7F20                   ADD         #32,R15
    00003FD4              L830:
             tskcmd.c       6747                         Sp[devno][spdptn].ac, 
             tskcmd.c       6748                         Sp[devno][spdptn].fl, 
             tskcmd.c       6749                         Sp[devno][spdptn].fh, 
             tskcmd.c       6750                         Sp[devno][spdptn].gl );
             tskcmd.c       6751    
             tskcmd.c       6752          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6753          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6754          pProcDat->Stp++;
             tskcmd.c       6755          break;
             tskcmd.c       6756    
             tskcmd.c       6757      case 2: // Y0軸速度設定・チップ廃棄位置移動
             tskcmd.c       6758          devno  = MT_Y0;
             tskcmd.c       6759          spdptn = SpPtn.Y0_SpdNmlPtn;
    00003FD4 D7A0                   MOV.L       L1390+26,R7; H'00000005+__$SpPtn
    00003FD6 6470                   MOV.B       @R7,R4     ; SpPtn.Y0_SpdNmlPtn
    00003FD8 E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6760          MAC_SPEED_SET( devno, 
    00003FDA DDA0                   MOV.L       L1390+30,R13; H'0000003C+__$Sp
    00003FDC 3F4100A0               MOV.B       R4,@(160:12,R15); spdptn
    00003FE0 644C                   EXTU.B      R4,R4
    00003FE2 4480                   MULR        R0,R4
    00003FE4 6043                   MOV         R4,R0
    00003FE6 06DD                   MOV.W       @(R0,R13),R6; Sp[].ac
    00003FE8 3F611012               MOV.W       R6,@(36:12,R15); mp.accel_type
    00003FEC D797                   MOV.L       L1390+14,R7; _GetFactor
    00003FEE 470B                   JSR         @R7
    00003FF0 E403                   MOV         #3,R4      ; H'00000003
    00003FF2 31F180A0               MOVU.B      @(160,R15),R1; spdptn
    00003FF6 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00003FF8 E00C                   MOV         #12,R0     ; H'0000000C
    00003FFA 4180                   MULR        R0,R1
    00003FFC D594                   MOV.L       L1390+18,R5; __$Sp
    00003FFE 6D53                   MOV         R5,R13
    00004000 7D40                   ADD         #64,R13
    00004002 E700                   MOV         #0,R7      ; H'00000000
    00004004 6013                   MOV         R1,R0
    00004006 01DE                   MOV.L       @(R0,R13),R1; Sp[].fl
    00004008 1F7E                   MOV.L       R7,@(56,R15); mp.us
    0000400A 1F1A                   MOV.L       R1,@(40,R15); mp.FL
    0000400C 6153                   MOV         R5,R1
    0000400E 753E                   ADD         #62,R5
    00004010 7144                   ADD         #68,R1
    00004012 065D                   MOV.W       @(R0,R5),R6; Sp[].gl
    00004014 021E                   MOV.L       @(R0,R1),R2; Sp[].fh
    00004016 666D                   EXTU.W      R6,R6
    00004018 1F7F                   MOV.L       R7,@(60,R15); mp.ds
    0000401A 1F2B                   MOV.L       R2,@(44,R15); mp.FH
    0000401C 1F6C                   MOV.L       R6,@(48,R15); mp.utime
    0000401E 1F6D                   MOV.L       R6,@(52,R15); mp.dtime
    00004020 7FE0                   ADD         #-32,R15
    00004022 62F3                   MOV         R15,R2
    00004024 7240                   ADD         #64,R2
    00004026 5D21                   MOV.L       @(4,R2),R13; (part of)mp
    00004028 6422                   MOV.L       @R2,R4     ; (part of)mp
    0000402A 1FD1                   MOV.L       R13,@(4,R15)
    0000402C 5D25                   MOV.L       @(20,R2),R13; (part of)mp
    0000402E 5122                   MOV.L       @(8,R2),R1 ; (part of)mp
    00004030 5523                   MOV.L       @(12,R2),R5; (part of)mp
    00004032 5724                   MOV.L       @(16,R2),R7; (part of)mp
    00004034 1FD5                   MOV.L       R13,@(20,R15)
    00004036 5D26                   MOV.L       @(24,R2),R13; (part of)mp
    00004038 5627                   MOV.L       @(28,R2),R6; (part of)mp
    0000403A 2F42                   MOV.L       R4,@R15
    0000403C E401                   MOV         #1,R4      ; H'00000001
    0000403E 1F12                   MOV.L       R1,@(8,R15)
    00004040 1F53                   MOV.L       R5,@(12,R15)
    00004042 1F74                   MOV.L       R7,@(16,R15)
    00004044 1FD6                   MOV.L       R13,@(24,R15)
    00004046 D283                   MOV.L       L1390+22,R2; _motor_SET
    00004048 420B                   JSR         @R2
    0000404A 1F67                   MOV.L       R6,@(28,R15)
    0000404C 7F20                   ADD         #32,R15
             tskcmd.c       6761                         Sp[devno][spdptn].ac, 
             tskcmd.c       6762                         Sp[devno][spdptn].fl, 
             tskcmd.c       6763                         Sp[devno][spdptn].fh, 
             tskcmd.c       6764                         Sp[devno][spdptn].gl );
             tskcmd.c       6765    
             tskcmd.c       6766          movptn = GetTipPatern( pProcAdr->step[actstep].par03 );
    0000404E E014                   MOV         #20,R0     ; H'00000014
    00004050 4E80                   MULR        R0,R14
    00004052 D283                   MOV.L       L1390+34,R2; __$pProcAdr
    00004054 6522                   MOV.L       @R2,R5     ; pProcAdr
    00004056 7502                   ADD         #2,R5
    00004058 60E3                   MOV         R14,R0
    0000405A D382                   MOV.L       L1390+38,R3; __$GetTipPatern
    0000405C 430B                   JSR         @R3
    0000405E 045C                   MOV.B       @(R0,R5),R4; pProcAdr->step[].par03
             tskcmd.c       6767          movval = GetPositionValue(movptn);
    00004060 D379                   MOV.L       L1390+10,R3; __$GetPositionValue
    00004062 430B                   JSR         @R3
    00004064 6403                   MOV         R0,R4
             tskcmd.c       6768          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00004066 2F06                   MOV.L       R0,@-R15
    00004068 E700                   MOV         #0,R7      ; H'00000000
    0000406A E601                   MOV         #1,R6      ; H'00000001
    0000406C 65C3                   MOV         R12,R5
    0000406E A14F                   BRA         L846
    00004070 E451                   MOV         #81,R4     ; H'00000051
    00004072              L831:
             tskcmd.c       6769          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6770          pProcDat->Stp++;
             tskcmd.c       6771          break;
             tskcmd.c       6772    
             tskcmd.c       6773      case 3: // Z軸チップ廃棄速度（1段目）設定・1段目位置移動
             tskcmd.c       6774    //        spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
             tskcmd.c       6775    //        
             tskcmd.c       6776    //        if( spdptn >= 0 )
             tskcmd.c       6777    //        {
             tskcmd.c       6778    //            devno  = MT_Z0;
             tskcmd.c       6779    //            MAC_SPEED_SET( devno, 
             tskcmd.c       6780    //                           Sp[devno][spdptn].ac, 
             tskcmd.c       6781    //                           Sp[devno][spdptn].fl, 
             tskcmd.c       6782    //                           Sp[devno][spdptn].fh, 
             tskcmd.c       6783    //                           Sp[devno][spdptn].gl );
             tskcmd.c       6784    //            movval = GetPositionValue(POS_Z0_TPDL1);
             tskcmd.c       6785    //            result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6786    //            if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6787    //            pProcDat->Stp++;
             tskcmd.c       6788    //            break;
             tskcmd.c       6789    //        }
             tskcmd.c       6790    //        else
             tskcmd.c       6791    //        {
             tskcmd.c       6792              pProcDat->Stp++;
    00004072 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    00004074 7001                   ADD         #1,R0
    00004076 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00004078              L832:
             tskcmd.c       6793              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6794    //        }
             tskcmd.c       6795    
             tskcmd.c       6796    
             tskcmd.c       6797      case 4: // Z軸チップ廃棄速度（最終）設定・最終位置移動
             tskcmd.c       6798          spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
    00004078 E014                   MOV         #20,R0     ; H'00000014
    0000407A 65E3                   MOV         R14,R5
    0000407C 4580                   MULR        R0,R5
    0000407E D178                   MOV.L       L1390+34,R1; __$pProcAdr
    00004080 6612                   MOV.L       @R1,R6     ; pProcAdr
    00004082 7603                   ADD         #3,R6
    00004084 6053                   MOV         R5,R0
    00004086 006C                   MOV.B       @(R0,R6),R0; pProcAdr->step[].par04
    00004088 C90F                   AND         #15,R0
             tskcmd.c       6799    
             tskcmd.c       6800          if( spdptn >= 0 )
    0000408A 4011                   CMP/PZ      R0
    0000408C 8F40                   BF/S        L850
    0000408E 6203                   MOV         R0,R2
             tskcmd.c       6801          {
             tskcmd.c       6802              devno  = MT_Z0;
             tskcmd.c       6803              MAC_SPEED_SET( devno, 
    00004090 E00C                   MOV         #12,R0     ; H'0000000C
    00004092 4280                   MULR        R0,R2
    00004094 D76B                   MOV.L       L1390+6,R7 ; H'00000078+__$Sp
    00004096 6023                   MOV         R2,R0
    00004098 047D                   MOV.W       @(R0,R7),R4; Sp[].ac
    0000409A 3F212029               MOV.L       R2,@(164:12,R15)
    0000409E 3F411022               MOV.W       R4,@(68:12,R15); mp.accel_type
    000040A2 D56A                   MOV.L       L1390+14,R5; _GetFactor
    000040A4 450B                   JSR         @R5
    000040A6 E403                   MOV         #3,R4      ; H'00000003
    000040A8 E340                   MOV         #64,R3     ; H'00000040
    000040AA E580                   MOV         #-128,R5   ; H'FFFFFF80
    000040AC 33FC                   ADD         R15,R3
    000040AE 655C                   EXTU.B      R5,R5
    000040B0 2302                   MOV.L       R0,@R3     ; mp.factor
    000040B2 D167                   MOV.L       L1390+18,R1; __$Sp
    000040B4 30F16029               MOV.L       @(164:12,R15),R0
    000040B8 6713                   MOV         R1,R7
    000040BA 777C                   ADD         #124,R7
    000040BC 6D13                   MOV         R1,R13
    000040BE 717A                   ADD         #122,R1
    000040C0 3D5C                   ADD         R5,R13
    000040C2 0E1D                   MOV.W       @(R0,R1),R14; Sp[].gl
    000040C4 047E                   MOV.L       @(R0,R7),R4; Sp[].fl
    000040C6 E100                   MOV         #0,R1      ; H'00000000
    000040C8 07DE                   MOV.L       @(R0,R13),R7; Sp[].fh
    000040CA 6EED                   EXTU.W      R14,R14
    000040CC 1342                   MOV.L       R4,@(8,R3) ; mp.FL
    000040CE 1373                   MOV.L       R7,@(12,R3); mp.FH
    000040D0 13E4                   MOV.L       R14,@(16,R3); mp.utime
    000040D2 13E5                   MOV.L       R14,@(20,R3); mp.dtime
    000040D4 1316                   MOV.L       R1,@(24,R3); mp.us
    000040D6 1317                   MOV.L       R1,@(28,R3); mp.ds
    000040D8 7FE0                   ADD         #-32,R15
    000040DA 62F3                   MOV         R15,R2
    000040DC 7260                   ADD         #96,R2
    000040DE 6D22                   MOV.L       @R2,R13    ; (part of)mp
    000040E0 5625                   MOV.L       @(20,R2),R6; (part of)mp
    000040E2 5421                   MOV.L       @(4,R2),R4 ; (part of)mp
    000040E4 2FD2                   MOV.L       R13,@R15
    000040E6 5722                   MOV.L       @(8,R2),R7 ; (part of)mp
    000040E8 5523                   MOV.L       @(12,R2),R5; (part of)mp
    000040EA 5D24                   MOV.L       @(16,R2),R13; (part of)mp
    000040EC 1F65                   MOV.L       R6,@(20,R15)
    000040EE 5E26                   MOV.L       @(24,R2),R14; (part of)mp
    000040F0 5627                   MOV.L       @(28,R2),R6; (part of)mp
    000040F2 1F41                   MOV.L       R4,@(4,R15)
    000040F4 E402                   MOV         #2,R4      ; H'00000002
    000040F6 1F72                   MOV.L       R7,@(8,R15)
    000040F8 1F53                   MOV.L       R5,@(12,R15)
    000040FA 1FD4                   MOV.L       R13,@(16,R15)
    000040FC 1FE6                   MOV.L       R14,@(24,R15)
    000040FE D155                   MOV.L       L1390+22,R1; _motor_SET
    00004100 410B                   JSR         @R1
    00004102 1F67                   MOV.L       R6,@(28,R15)
    00004104 7F20                   ADD         #32,R15
             tskcmd.c       6804                             Sp[devno][spdptn].ac, 
             tskcmd.c       6805                             Sp[devno][spdptn].fl, 
             tskcmd.c       6806                             Sp[devno][spdptn].fh, 
             tskcmd.c       6807                             Sp[devno][spdptn].gl );
             tskcmd.c       6808              movval = GetPositionValue(POS_Z0_TPDLE);
    00004106 D350                   MOV.L       L1390+10,R3; __$GetPositionValue
    00004108 430B                   JSR         @R3
    0000410A E41C                   MOV         #28,R4     ; H'0000001C
    0000410C A0FB                   BRA         L844
    0000410E 6E03                   MOV         R0,R14
    00004110              L850:
             tskcmd.c       6809    
             tskcmd.c       6810              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6811              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6812              pProcDat->Stp++;
             tskcmd.c       6813              break;
             tskcmd.c       6814          }
             tskcmd.c       6815          else
             tskcmd.c       6816          {
             tskcmd.c       6817              pProcDat->Stp++;
    00004110 66A2                   MOV.L       @R10,R6    ; pProcDat
    00004112 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004114 7001                   ADD         #1,R0
    00004116 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004118              L833:
             tskcmd.c       6818              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6819          }
             tskcmd.c       6820          
             tskcmd.c       6821          
             tskcmd.c       6822      case 5: // 廃棄動作 プランジャを下へ動作
             tskcmd.c       6823          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
    00004118 E014                   MOV         #20,R0     ; H'00000014
    0000411A 65E3                   MOV         R14,R5
    0000411C 4580                   MULR        R0,R5
    0000411E D750                   MOV.L       L1390+34,R7; __$pProcAdr
    00004120 6172                   MOV.L       @R7,R1     ; pProcAdr
    00004122 E4FC                   MOV         #-4,R4     ; H'FFFFFFFC
    00004124 7103                   ADD         #3,R1
    00004126 6053                   MOV         R5,R0
    00004128 011C                   MOV.B       @(R0,R1),R1; pProcAdr->step[].par04
    0000412A 601C                   EXTU.B      R1,R0
    0000412C 404C                   SHAD        R4,R0
    0000412E C90F                   AND         #15,R0
             tskcmd.c       6824    
             tskcmd.c       6825          if( spdptn > 0 )
    00004130 2008                   TST         R0,R0
    00004132 8D49                   BT/S        L853
    00004134 6203                   MOV         R0,R2
             tskcmd.c       6826          {
             tskcmd.c       6827              devno  = MT_P0;
             tskcmd.c       6828              MAC_SPEED_SET( devno, 
    00004136 E00C                   MOV         #12,R0     ; H'0000000C
    00004138 ED60                   MOV         #96,R13    ; H'00000060
    0000413A 4280                   MULR        R0,R2
    0000413C D74A                   MOV.L       L1390+42,R7; H'000000B4+__$Sp
    0000413E 3DFC                   ADD         R15,R13
    00004140 E403                   MOV         #3,R4      ; H'00000003
    00004142 6023                   MOV         R2,R0
    00004144 007D                   MOV.W       @(R0,R7),R0; Sp[].ac
    00004146 3F21202A               MOV.L       R2,@(168:12,R15)
    0000414A D140                   MOV.L       L1390+14,R1; _GetFactor
    0000414C 410B                   JSR         @R1
    0000414E 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    00004150 E1B8                   MOV         #-72,R1    ; H'FFFFFFB8
    00004152 2D02                   MOV.L       R0,@R13    ; mp.factor
    00004154 DE3E                   MOV.L       L1390+18,R14; __$Sp
    00004156 611C                   EXTU.B      R1,R1
    00004158 30F1602A               MOV.L       @(168:12,R15),R0
    0000415C 64E3                   MOV         R14,R4
    0000415E 341C                   ADD         R1,R4
    00004160 024E                   MOV.L       @(R0,R4),R2; Sp[].fl
    00004162 E4BC                   MOV         #-68,R4    ; H'FFFFFFBC
    00004164 E1B6                   MOV         #-74,R1    ; H'FFFFFFB6
    00004166 644C                   EXTU.B      R4,R4
    00004168 611C                   EXTU.B      R1,R1
    0000416A 1D22                   MOV.L       R2,@(8,R13); mp.FL
    0000416C 66E3                   MOV         R14,R6
    0000416E 364C                   ADD         R4,R6
    00004170 3E1C                   ADD         R1,R14
    00004172 076E                   MOV.L       @(R0,R6),R7; Sp[].fh
    00004174 05ED                   MOV.W       @(R0,R14),R5; Sp[].gl
    00004176 1D73                   MOV.L       R7,@(12,R13); mp.FH
    00004178 E700                   MOV         #0,R7      ; H'00000000
    0000417A 655D                   EXTU.W      R5,R5
    0000417C 1D76                   MOV.L       R7,@(24,R13); mp.us
    0000417E 1D54                   MOV.L       R5,@(16,R13); mp.utime
    00004180 1D55                   MOV.L       R5,@(20,R13); mp.dtime
    00004182 1D77                   MOV.L       R7,@(28,R13); mp.ds
    00004184 7FE0                   ADD         #-32,R15
    00004186 ED80                   MOV         #-128,R13  ; H'FFFFFF80
    00004188 65F3                   MOV         R15,R5
    0000418A 6DDC                   EXTU.B      R13,R13
    0000418C E403                   MOV         #3,R4      ; H'00000003
    0000418E 35DC                   ADD         R13,R5
    00004190 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    00004192 5D53                   MOV.L       @(12,R5),R13; (part of)mp
    00004194 6252                   MOV.L       @R5,R2     ; (part of)mp
    00004196 1FE1                   MOV.L       R14,@(4,R15)
    00004198 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    0000419A 1FD3                   MOV.L       R13,@(12,R15)
    0000419C 5754                   MOV.L       @(16,R5),R7; (part of)mp
    0000419E 5E55                   MOV.L       @(20,R5),R14; (part of)mp
    000041A0 5D56                   MOV.L       @(24,R5),R13; (part of)mp
    000041A2 5657                   MOV.L       @(28,R5),R6; (part of)mp
    000041A4 2F22                   MOV.L       R2,@R15
    000041A6 1F12                   MOV.L       R1,@(8,R15)
    000041A8 1F74                   MOV.L       R7,@(16,R15)
    000041AA 1FE5                   MOV.L       R14,@(20,R15)
    000041AC 1FD6                   MOV.L       R13,@(24,R15)
    000041AE D229                   MOV.L       L1390+22,R2; _motor_SET
    000041B0 420B                   JSR         @R2
    000041B2 1F67                   MOV.L       R6,@(28,R15)
    000041B4 7F20                   ADD         #32,R15
             tskcmd.c       6829                             Sp[devno][spdptn].ac, 
             tskcmd.c       6830                             Sp[devno][spdptn].fl, 
             tskcmd.c       6831                             Sp[devno][spdptn].fh, 
             tskcmd.c       6832                             Sp[devno][spdptn].gl );
             tskcmd.c       6833              movval = GetPositionValue(POS_P0_TIPDL);
    000041B6 D324                   MOV.L       L1390+10,R3; __$GetPositionValue
    000041B8 430B                   JSR         @R3
    000041BA E437                   MOV         #55,R4     ; H'00000037
             tskcmd.c       6834              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    000041BC 2F06                   MOV.L       R0,@-R15
    000041BE 65C3                   MOV         R12,R5
    000041C0 E700                   MOV         #0,R7      ; H'00000000
    000041C2 E603                   MOV         #3,R6      ; H'00000003
    000041C4 A0A4                   BRA         L846
    000041C6 E451                   MOV         #81,R4     ; H'00000051
    000041C8              L853:
             tskcmd.c       6835              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6836              pProcDat->Stp++;
             tskcmd.c       6837              break;
             tskcmd.c       6838          }
             tskcmd.c       6839          else
             tskcmd.c       6840          {
             tskcmd.c       6841              pProcDat->Stp++;
    000041C8 66A2                   MOV.L       @R10,R6    ; pProcDat
    000041CA 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000041CC 7001                   ADD         #1,R0
    000041CE 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000041D0              L834:
             tskcmd.c       6842              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6843          }
             tskcmd.c       6844    
             tskcmd.c       6845    
             tskcmd.c       6846      case 6: // 廃棄動作 プランジャを上へ動作
             tskcmd.c       6847          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
             tskcmd.c       6848    
             tskcmd.c       6849          if( spdptn > 0 )
    000041D0 E014                   MOV         #20,R0     ; H'00000014
    000041D2 E4FC                   MOV         #-4,R4     ; H'FFFFFFFC
    000041D4 4E80                   MULR        R0,R14
    000041D6 D222                   MOV.L       L1390+34,R2; __$pProcAdr
    000041D8 6122                   MOV.L       @R2,R1     ; pProcAdr
    000041DA 7103                   ADD         #3,R1
    000041DC 60E3                   MOV         R14,R0
    000041DE 011C                   MOV.B       @(R0,R1),R1; pProcAdr->step[].par04
    000041E0 3FE1202B               MOV.L       R14,@(172:12,R15)
    000041E4 601C                   EXTU.B      R1,R0
    000041E6 404C                   SHAD        R4,R0
    000041E8 C90F                   AND         #15,R0
    000041EA 2008                   TST         R0,R0
    000041EC 8942                   BT          L856
             tskcmd.c       6850          {
             tskcmd.c       6851              devno  = MT_P0;
             tskcmd.c       6852              movval = GetPositionValue(POS_P0_TIPDL)*(-1);
    000041EE D316                   MOV.L       L1390+10,R3; __$GetPositionValue
    000041F0 430B                   JSR         @R3
    000041F2 E437                   MOV         #55,R4     ; H'00000037
    000041F4 620B                   NEG         R0,R2
             tskcmd.c       6853    
             tskcmd.c       6854              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    000041F6 2F26                   MOV.L       R2,@-R15
    000041F8 E700                   MOV         #0,R7      ; H'00000000
    000041FA E451                   MOV         #81,R4     ; H'00000051
    000041FC E603                   MOV         #3,R6      ; H'00000003
    000041FE D31B                   MOV.L       L1390+46,R3; __$AbsmvAction
    00004200 430B                   JSR         @R3
    00004202 65C3                   MOV         R12,R5
    00004204 6503                   MOV         R0,R5
             tskcmd.c       6855              if( result == E_SUCCESS ) result = E_CONTINUE;
    00004206 2008                   TST         R0,R0
    00004208 8F01                   BF/S        L858
    0000420A 7F04                   ADD         #4,R15
    0000420C 65B3                   MOV         R11,R5
    0000420E              L858:
    0000420E DC14                   MOV.L       L1390+34,R12; __$pProcAdr
             tskcmd.c       6856    
             tskcmd.c       6857              rtycnt = ( ( pProcAdr->step[actstep].par03 >> 4 ) & 0x03 );
             tskcmd.c       6858    
             tskcmd.c       6859              if( bcctrl[bcid].inf3 >= rtycnt )
    00004210 D717                   MOV.L       L1390+50,R7; H'00000006+__$bcctrl
    00004212 6EC2                   MOV.L       @R12,R14   ; pProcAdr
    00004214 60D3                   MOV         R13,R0
    00004216 0B7C                   MOV.B       @(R0,R7),R11; bcctrl[].inf3
    00004218 E1FC                   MOV         #-4,R1     ; H'FFFFFFFC
    0000421A 30F1602B               MOV.L       @(172:12,R15),R0
    0000421E 7E02                   ADD         #2,R14
    00004220 64BC                   EXTU.B      R11,R4
    00004222 0EEC                   MOV.B       @(R0,R14),R14; pProcAdr->step[].par03
    00004224 60EC                   EXTU.B      R14,R0
    00004226 401C                   SHAD        R1,R0
    00004228 C903                   AND         #3,R0
    0000422A 3403                   CMP/GE      R0,R4
    0000422C 8979                   BT          L860
             tskcmd.c       6860              {
             tskcmd.c       6861                  pProcDat->Stp++;
             tskcmd.c       6862              }
             tskcmd.c       6863              else
             tskcmd.c       6864              {
             tskcmd.c       6865                  pProcDat->Stp = 5;
    0000422E 64A2                   MOV.L       @R10,R4    ; pProcDat
    00004230 E005                   MOV         #5,R0      ; H'00000005
    00004232 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
             tskcmd.c       6866                  bcctrl[bcid].inf3++;
    00004234 60D3                   MOV         R13,R0
    00004236 067C                   MOV.B       @(R0,R7),R6; bcctrl[].inf3
    00004238 7601                   ADD         #1,R6
    0000423A A076                   BRA         L839
    0000423C 0764                   MOV.B       R6,@(R0,R7); bcctrl[].inf3
    0000423E              L1390:
    0000423E 00000002               .RES.W      1
    00004240 <00000001>             .DATA.L     H'00000001+__$SpPtn
    00004244 <00000078>             .DATA.L     H'00000078+__$Sp
    00004248 <00000000>             .DATA.L     __$GetPositionValue
    0000424C <00000000>             .DATA.L     _GetFactor
    00004250 <00000000>             .DATA.L     __$Sp
    00004254 <00000000>             .DATA.L     _motor_SET
    00004258 <00000005>             .DATA.L     H'00000005+__$SpPtn
    0000425C <0000003C>             .DATA.L     H'0000003C+__$Sp
    00004260 <00000000>             .DATA.L     __$pProcAdr
    00004264 <00000000>             .DATA.L     __$GetTipPatern
    00004268 <000000B4>             .DATA.L     H'000000B4+__$Sp
    0000426C <00000000>             .DATA.L     __$AbsmvAction
    00004270 <00000006>             .DATA.L     H'00000006+__$bcctrl
    00004274              L856:
             tskcmd.c       6867              }
             tskcmd.c       6868              break;
             tskcmd.c       6869          }
             tskcmd.c       6870          else
             tskcmd.c       6871          {
             tskcmd.c       6872              pProcDat->Stp++;
    00004274 66A2                   MOV.L       @R10,R6    ; pProcDat
    00004276 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004278 7001                   ADD         #1,R0
    0000427A 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000427C              L835:
             tskcmd.c       6873              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6874          }
             tskcmd.c       6875    
             tskcmd.c       6876    
             tskcmd.c       6877      case 7: // Z軸速度設定・退避位置移動
             tskcmd.c       6878          devno  = MT_Z0;
             tskcmd.c       6879          spdptn = SpPtn.Z0_SpdNmlPtn;
    0000427C DEB0                   MOV.L       L1391,R14  ; H'00000006+__$SpPtn
    0000427E 60E0                   MOV.B       @R14,R0    ; SpPtn.Z0_SpdNmlPtn
             tskcmd.c       6880          movval = GetPositionValue(POS_Z0_TAIHI);
    00004280 E407                   MOV         #7,R4      ; H'00000007
    00004282 3F0100A0               MOV.B       R0,@(160:12,R15); spdptn
    00004286 D3AF                   MOV.L       L1391+4,R3 ; __$GetPositionValue
    00004288 430B                   JSR         @R3
    0000428A ED80                   MOV         #-128,R13  ; H'FFFFFF80
             tskcmd.c       6881    
             tskcmd.c       6882          MAC_SPEED_SET( devno, 
    0000428C 32F180A0               MOVU.B      @(160,R15),R2; spdptn
    00004290 6E03                   MOV         R0,R14
    00004292 E00C                   MOV         #12,R0     ; H'0000000C
    00004294 4280                   MULR        R0,R2
    00004296 6DDC                   EXTU.B      R13,R13
    00004298 E403                   MOV         #3,R4      ; H'00000003
    0000429A D1AB                   MOV.L       L1391+8,R1 ; H'00000078+__$Sp
    0000429C 3DFC                   ADD         R15,R13
    0000429E 6023                   MOV         R2,R0
    000042A0 001D                   MOV.W       @(R0,R1),R0; Sp[].ac
    000042A2 1D29                   MOV.L       R2,@(36,R13)
    000042A4 D7A9                   MOV.L       L1391+12,R7; _GetFactor
    000042A6 470B                   JSR         @R7
    000042A8 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    000042AA 2D02                   MOV.L       R0,@R13    ; mp.factor
    000042AC E780                   MOV         #-128,R7   ; H'FFFFFF80
    000042AE D5A8                   MOV.L       L1391+16,R5; __$Sp
    000042B0 50D9                   MOV.L       @(36,R13),R0
    000042B2 6153                   MOV         R5,R1
    000042B4 717C                   ADD         #124,R1
    000042B6 677C                   EXTU.B      R7,R7
    000042B8 041E                   MOV.L       @(R0,R1),R4; Sp[].fl
    000042BA 1D42                   MOV.L       R4,@(8,R13); mp.FL
    000042BC 6453                   MOV         R5,R4
    000042BE 347C                   ADD         R7,R4
    000042C0 757A                   ADD         #122,R5
    000042C2 014E                   MOV.L       @(R0,R4),R1; Sp[].fh
    000042C4 075D                   MOV.W       @(R0,R5),R7; Sp[].gl
    000042C6 1D13                   MOV.L       R1,@(12,R13); mp.FH
    000042C8 E100                   MOV         #0,R1      ; H'00000000
    000042CA 677D                   EXTU.W      R7,R7
    000042CC 1D16                   MOV.L       R1,@(24,R13); mp.us
    000042CE 1D74                   MOV.L       R7,@(16,R13); mp.utime
    000042D0 1D75                   MOV.L       R7,@(20,R13); mp.dtime
    000042D2 1D17                   MOV.L       R1,@(28,R13); mp.ds
    000042D4 7FE0                   ADD         #-32,R15
    000042D6 E2A0                   MOV         #-96,R2    ; H'FFFFFFA0
    000042D8 65F3                   MOV         R15,R5
    000042DA 622C                   EXTU.B      R2,R2
    000042DC 352C                   ADD         R2,R5
    000042DE 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    000042E0 6D52                   MOV.L       @R5,R13    ; (part of)mp
    000042E2 1F62                   MOV.L       R6,@(8,R15)
    000042E4 5654                   MOV.L       @(16,R5),R6; (part of)mp
    000042E6 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    000042E8 2FD2                   MOV.L       R13,@R15
    000042EA 5753                   MOV.L       @(12,R5),R7; (part of)mp
    000042EC 5D55                   MOV.L       @(20,R5),R13; (part of)mp
    000042EE 1F64                   MOV.L       R6,@(16,R15)
    000042F0 5656                   MOV.L       @(24,R5),R6; (part of)mp
    000042F2 5257                   MOV.L       @(28,R5),R2; (part of)mp
    000042F4 1F41                   MOV.L       R4,@(4,R15)
    000042F6 1F73                   MOV.L       R7,@(12,R15)
    000042F8 1FD5                   MOV.L       R13,@(20,R15)
    000042FA 1F66                   MOV.L       R6,@(24,R15)
    000042FC 1F27                   MOV.L       R2,@(28,R15)
    000042FE D295                   MOV.L       L1391+20,R2; _motor_SET
    00004300 420B                   JSR         @R2
    00004302 E402                   MOV         #2,R4      ; H'00000002
    00004304 7F20                   ADD         #32,R15
    00004306              L844:
    00004306 2FE6                   MOV.L       R14,@-R15
    00004308 65C3                   MOV         R12,R5
    0000430A E700                   MOV         #0,R7      ; H'00000000
    0000430C E451                   MOV         #81,R4     ; H'00000051
    0000430E E602                   MOV         #2,R6      ; H'00000002
    00004310              L846:
    00004310 D391                   MOV.L       L1391+24,R3; __$AbsmvAction
    00004312 434B                   JSR/N       @R3
    00004314 6503                   MOV         R0,R5
    00004316 2008                   TST         R0,R0
    00004318 8F03                   BF/S        L860
    0000431A 7F04                   ADD         #4,R15
    0000431C A001                   BRA         L860
    0000431E 65B3                   MOV         R11,R5
    00004320              L836:
             tskcmd.c       6883                         Sp[devno][spdptn].ac, 
             tskcmd.c       6884                         Sp[devno][spdptn].fl, 
             tskcmd.c       6885                         Sp[devno][spdptn].fh, 
             tskcmd.c       6886                         Sp[devno][spdptn].gl );
             tskcmd.c       6887    
             tskcmd.c       6888          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6889          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6890          pProcDat->Stp++;
             tskcmd.c       6891          break;
             tskcmd.c       6892    
             tskcmd.c       6893      case 8: // チップ装着確認（装着失敗時、チップ未装着エラー通知し終了）
             tskcmd.c       6894          // ★チップ有無確認
             tskcmd.c       6895    
             tskcmd.c       6896          result = E_SUCCESS;
    00004320 E500                   MOV         #0,R5      ; H'00000000
    00004322              L860:
    00004322 66A2                   MOV.L       @R10,R6    ; pProcDat
    00004324 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004326 7001                   ADD         #1,R0
    00004328 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000432A              L839:
    0000432A 030000B0               MOVI20      #176,R3    ; H'000000B0
    0000432E 3F3C                   ADD         R3,R15
    00004330 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       6897          pProcDat->Stp++;
             tskcmd.c       6898          break;
             tskcmd.c       6899      }
             tskcmd.c       6900      return( result );
             tskcmd.c       6901    }
    00004332 057B                   RTV/N       R5
             tskcmd.c       6902    /***********************************************************************
             tskcmd.c       6903    * 
             tskcmd.c       6904    * [概要]  穴あけ
             tskcmd.c       6905    * [引数]  
             tskcmd.c       6906    * [戻値]  
             tskcmd.c       6907    * [備考]  
             tskcmd.c       6908    *         pProcAdr->step[actstep].par03 == STRIP_S1 ) // ショート１
             tskcmd.c       6909    *
             tskcmd.c       6910    ***********************************************************************/
             tskcmd.c       6911    static ER  CmdActionStrOpn( T_CMD_MSG* mrcv )
    00004334              __$CmdActionStrOpn:              ; function: __$CmdActionStrOpn
                                                           ; frame size=228
    00004334 4BF0                   MOVMU.L     R11,@-R15
    00004336 03F0FF50               MOVI20      #-176,R3   ; H'FFFFFF50
    0000433A 3F3C                   ADD         R3,R15
             tskcmd.c       6912    {
             tskcmd.c       6913      ER result = E_CONTINUE;
    0000433C 6143                   MOV         R4,R1
    0000433E E4F1                   MOV         #-15,R4    ; H'FFFFFFF1
             tskcmd.c       6914      UB bcid;
             tskcmd.c       6915      UB prid1;
             tskcmd.c       6916      UB actstep;
             tskcmd.c       6917      UB spdptn;
             tskcmd.c       6918      UB movptn;
             tskcmd.c       6919      UB devno;
             tskcmd.c       6920      INT movval;
             tskcmd.c       6921    
             tskcmd.c       6922      bcid  = mrcv->msgdata.bcid;
    00004340 3011801A               MOVU.B      @(26,R1),R0; (mrcv)->bcid
             tskcmd.c       6923      actstep = bcctrl[bcid].actstp - 1 ;
             tskcmd.c       6924    
             tskcmd.c       6925      switch( pProcDat->Stp )
    00004344 DB85                   MOV.L       L1391+28,R11; __$pProcDat
    00004346 6D03                   MOV         R0,R13
    00004348 61B2                   MOV.L       @R11,R1    ; pProcDat
    0000434A 4008                   SHLL2       R0
    0000434C D584                   MOV.L       L1391+32,R5; H'00000002+__$bcctrl
    0000434E 4000                   SHLL        R0
    00004350 025C                   MOV.B       @(R0,R5),R2; bcctrl[].actstp
    00004352 644C                   EXTU.B      R4,R4
    00004354 30118002               MOVU.B      @(2,R1),R0 ; (pProcDat)->Stp
    00004358 72FF                   ADD         #-1,R2
    0000435A 6C43                   MOV         R4,R12
    0000435C 2008                   TST         R0,R0
    0000435E 8D16                   BT/S        L875
    00004360 6E2C                   EXTU.B      R2,R14
    00004362 8801                   CMP/EQ      #1,R0
    00004364 8916                   BT          L877
    00004366 8802                   CMP/EQ      #2,R0
    00004368 8952                   BT          L879
    0000436A 8803                   CMP/EQ      #3,R0
    0000436C 8B01                   BF          L1421
    0000436E A09B                   BRA         L881
    00004370 0009                   NOP
    00004372              L1421:
    00004372 8804                   CMP/EQ      #4,R0
    00004374 8B01                   BF          L1422
    00004376 A0FE                   BRA         L883
    00004378 0009                   NOP
    0000437A              L1422:
    0000437A 8805                   CMP/EQ      #5,R0
    0000437C 8B01                   BF          L1423
    0000437E A14E                   BRA         L885
    00004380 0009                   NOP
    00004382              L1423:
    00004382 8806                   CMP/EQ      #6,R0
    00004384 8B01                   BF          L1424
    00004386 A19E                   BRA         L886
    00004388 0009                   NOP
    0000438A              L1424:
    0000438A A1A1                   BRA         L887
    0000438C 0009                   NOP
    0000438E              L875:
             tskcmd.c       6926      {
             tskcmd.c       6927      case 0: // 試薬ストリッバ有無確認
             tskcmd.c       6928          
             tskcmd.c       6929          // ★試薬ストリッバ有無確認
             tskcmd.c       6930          
             tskcmd.c       6931          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6932          pProcDat->Stp++;
    0000438E 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00004390 7001                   ADD         #1,R0
    00004392 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00004394              L877:
             tskcmd.c       6933          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6934    
             tskcmd.c       6935    
             tskcmd.c       6936      case 1: // Z軸速度設定・退避位置移動
             tskcmd.c       6937          devno  = MT_Z0;
             tskcmd.c       6938          spdptn = SpPtn.Z0_SpdNmlPtn;
    00004394 D76A                   MOV.L       L1391,R7   ; H'00000006+__$SpPtn
    00004396 6E70                   MOV.B       @R7,R14    ; SpPtn.Z0_SpdNmlPtn
    00004398 E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6939          MAC_SPEED_SET( devno, 
    0000439A D26B                   MOV.L       L1391+8,R2 ; H'00000078+__$Sp
    0000439C 65EC                   EXTU.B      R14,R5
    0000439E E403                   MOV         #3,R4      ; H'00000003
    000043A0 4580                   MULR        R0,R5
    000043A2 6053                   MOV         R5,R0
    000043A4 012D                   MOV.W       @(R0,R2),R1; Sp[].ac
    000043A6 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
    000043AA D668                   MOV.L       L1391+12,R6; _GetFactor
    000043AC 460B                   JSR         @R6
    000043AE 6EEC                   EXTU.B      R14,R14
    000043B0 2F02                   MOV.L       R0,@R15    ; mp.factor
    000043B2 E00C                   MOV         #12,R0     ; H'0000000C
    000043B4 4E80                   MULR        R0,R14
    000043B6 D466                   MOV.L       L1391+16,R4; __$Sp
    000043B8 E580                   MOV         #-128,R5   ; H'FFFFFF80
    000043BA 6743                   MOV         R4,R7
    000043BC 655C                   EXTU.B      R5,R5
    000043BE 777C                   ADD         #124,R7
    000043C0 60E3                   MOV         R14,R0
    000043C2 027E                   MOV.L       @(R0,R7),R2; Sp[].fl
    000043C4 6E43                   MOV         R4,R14
    000043C6 747A                   ADD         #122,R4
    000043C8 3E5C                   ADD         R5,R14
    000043CA 014D                   MOV.W       @(R0,R4),R1; Sp[].gl
    000043CC 05EE                   MOV.L       @(R0,R14),R5; Sp[].fh
    000043CE E400                   MOV         #0,R4      ; H'00000000
    000043D0 611D                   EXTU.W      R1,R1
    000043D2 1F22                   MOV.L       R2,@(8,R15); mp.FL
    000043D4 1F53                   MOV.L       R5,@(12,R15); mp.FH
    000043D6 1F14                   MOV.L       R1,@(16,R15); mp.utime
    000043D8 1F15                   MOV.L       R1,@(20,R15); mp.dtime
    000043DA 1F46                   MOV.L       R4,@(24,R15); mp.us
    000043DC 1F47                   MOV.L       R4,@(28,R15); mp.ds
    000043DE 7FE0                   ADD         #-32,R15
    000043E0 65F3                   MOV         R15,R5
    000043E2 7520                   ADD         #32,R5
    000043E4 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    000043E6 5153                   MOV.L       @(12,R5),R1; (part of)mp
    000043E8 5654                   MOV.L       @(16,R5),R6; (part of)mp
    000043EA 6752                   MOV.L       @R5,R7     ; (part of)mp
    000043EC 1FE1                   MOV.L       R14,@(4,R15)
    000043EE 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    000043F0 1F13                   MOV.L       R1,@(12,R15)
    000043F2 5155                   MOV.L       @(20,R5),R1; (part of)mp
    000043F4 1F64                   MOV.L       R6,@(16,R15)
    000043F6 5656                   MOV.L       @(24,R5),R6; (part of)mp
    000043F8 5257                   MOV.L       @(28,R5),R2; (part of)mp
    000043FA 2F72                   MOV.L       R7,@R15
    000043FC 1FE2                   MOV.L       R14,@(8,R15)
    000043FE 1F15                   MOV.L       R1,@(20,R15)
    00004400 1F66                   MOV.L       R6,@(24,R15)
    00004402 1F27                   MOV.L       R2,@(28,R15)
    00004404 D253                   MOV.L       L1391+20,R2; _motor_SET
    00004406 420B                   JSR         @R2
    00004408 E402                   MOV         #2,R4      ; H'00000002
    0000440A 7F20                   ADD         #32,R15
             tskcmd.c       6940                         Sp[devno][spdptn].ac, 
             tskcmd.c       6941                         Sp[devno][spdptn].fl, 
             tskcmd.c       6942                         Sp[devno][spdptn].fh, 
             tskcmd.c       6943                         Sp[devno][spdptn].gl );
             tskcmd.c       6944          movval = GetPositionValue(POS_Z0_TAIHI);
    0000440C A0FB                   BRA         L888
    0000440E E407                   MOV         #7,R4      ; H'00000007
    00004410              L879:
             tskcmd.c       6945          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6946          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6947          pProcDat->Stp++;
             tskcmd.c       6948          break;
             tskcmd.c       6949    
             tskcmd.c       6950      case 2: // Y0軸速度設定後、試薬ストリッパブレーク位置に移動
             tskcmd.c       6951          devno  = MT_Y0;
             tskcmd.c       6952          spdptn = SpPtn.Y0_SpdNmlPtn;
    00004410 D754                   MOV.L       L1391+36,R7; H'00000005+__$SpPtn
    00004412 6470                   MOV.B       @R7,R4     ; SpPtn.Y0_SpdNmlPtn
    00004414 E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6953          MAC_SPEED_SET( devno, 
    00004416 D554                   MOV.L       L1391+40,R5; H'0000003C+__$Sp
    00004418 3F4100A8               MOV.B       R4,@(168:12,R15); spdptn
    0000441C 644C                   EXTU.B      R4,R4
    0000441E 4480                   MULR        R0,R4
    00004420 6043                   MOV         R4,R0
    00004422 065D                   MOV.W       @(R0,R5),R6; Sp[].ac
    00004424 3F611012               MOV.W       R6,@(36:12,R15); mp.accel_type
    00004428 D748                   MOV.L       L1391+12,R7; _GetFactor
    0000442A 470B                   JSR         @R7
    0000442C E403                   MOV         #3,R4      ; H'00000003
    0000442E 31F180A8               MOVU.B      @(168,R15),R1; spdptn
    00004432 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00004434 E00C                   MOV         #12,R0     ; H'0000000C
    00004436 4180                   MULR        R0,R1
    00004438 D545                   MOV.L       L1391+16,R5; __$Sp
    0000443A 6753                   MOV         R5,R7
    0000443C 7744                   ADD         #68,R7
    0000443E 6653                   MOV         R5,R6
    00004440 753E                   ADD         #62,R5
    00004442 6013                   MOV         R1,R0
    00004444 017E                   MOV.L       @(R0,R7),R1; Sp[].fh
    00004446 7640                   ADD         #64,R6
    00004448 E700                   MOV         #0,R7      ; H'00000000
    0000444A 1F1B                   MOV.L       R1,@(44,R15); mp.FH
    0000444C 015D                   MOV.W       @(R0,R5),R1; Sp[].gl
    0000444E 026E                   MOV.L       @(R0,R6),R2; Sp[].fl
    00004450 611D                   EXTU.W      R1,R1
    00004452 1F7E                   MOV.L       R7,@(56,R15); mp.us
    00004454 1F2A                   MOV.L       R2,@(40,R15); mp.FL
    00004456 1F1C                   MOV.L       R1,@(48,R15); mp.utime
    00004458 1F1D                   MOV.L       R1,@(52,R15); mp.dtime
    0000445A 1F7F                   MOV.L       R7,@(60,R15); mp.ds
    0000445C 7FE0                   ADD         #-32,R15
    0000445E 65F3                   MOV         R15,R5
    00004460 7540                   ADD         #64,R5
    00004462 5251                   MOV.L       @(4,R5),R2 ; (part of)mp
    00004464 6152                   MOV.L       @R5,R1     ; (part of)mp
    00004466 1F21                   MOV.L       R2,@(4,R15)
    00004468 5254                   MOV.L       @(16,R5),R2; (part of)mp
    0000446A 5655                   MOV.L       @(20,R5),R6; (part of)mp
    0000446C 2F12                   MOV.L       R1,@R15
    0000446E 5452                   MOV.L       @(8,R5),R4 ; (part of)mp
    00004470 5153                   MOV.L       @(12,R5),R1; (part of)mp
    00004472 1F24                   MOV.L       R2,@(16,R15)
    00004474 1F65                   MOV.L       R6,@(20,R15)
    00004476 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00004478 5657                   MOV.L       @(28,R5),R6; (part of)mp
    0000447A 1F42                   MOV.L       R4,@(8,R15)
    0000447C E401                   MOV         #1,R4      ; H'00000001
    0000447E 1F13                   MOV.L       R1,@(12,R15)
    00004480 1F26                   MOV.L       R2,@(24,R15)
    00004482 D234                   MOV.L       L1391+20,R2; _motor_SET
    00004484 420B                   JSR         @R2
    00004486 1F67                   MOV.L       R6,@(28,R15)
    00004488 7F20                   ADD         #32,R15
             tskcmd.c       6954                         Sp[devno][spdptn].ac, 
             tskcmd.c       6955                         Sp[devno][spdptn].fl, 
             tskcmd.c       6956                         Sp[devno][spdptn].fh, 
             tskcmd.c       6957                         Sp[devno][spdptn].gl );
             tskcmd.c       6958          movptn = pProcAdr->step[actstep].par05;
             tskcmd.c       6959          movval = GetPositionValue(movptn);
    0000448A E014                   MOV         #20,R0     ; H'00000014
    0000448C 4E80                   MULR        R0,R14
    0000448E D237                   MOV.L       L1391+44,R2; __$pProcAdr
    00004490 6522                   MOV.L       @R2,R5     ; pProcAdr
    00004492 7504                   ADD         #4,R5
    00004494 60E3                   MOV         R14,R0
    00004496 D32B                   MOV.L       L1391+4,R3 ; __$GetPositionValue
    00004498 430B                   JSR         @R3
    0000449A 045C                   MOV.B       @(R0,R5),R4; pProcAdr->step[].par05
             tskcmd.c       6960          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    0000449C 2F06                   MOV.L       R0,@-R15
    0000449E E700                   MOV         #0,R7      ; H'00000000
    000044A0 E601                   MOV         #1,R6      ; H'00000001
    000044A2 65D3                   MOV         R13,R5
    000044A4 A107                   BRA         L889
    000044A6 E451                   MOV         #81,R4     ; H'00000051
    000044A8              L881:
             tskcmd.c       6961          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6962          pProcDat->Stp++;
             tskcmd.c       6963          break;
             tskcmd.c       6964    
             tskcmd.c       6965      case 3: // Z軸シールブレーク1段位置（現在位置から1段目まで）
             tskcmd.c       6966          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
    000044A8 E014                   MOV         #20,R0     ; H'00000014
    000044AA 65E3                   MOV         R14,R5
    000044AC 4580                   MULR        R0,R5
    000044AE D42F                   MOV.L       L1391+44,R4; __$pProcAdr
    000044B0 6742                   MOV.L       @R4,R7     ; pProcAdr
    000044B2 E6FC                   MOV         #-4,R6     ; H'FFFFFFFC
    000044B4 7703                   ADD         #3,R7
    000044B6 6053                   MOV         R5,R0
    000044B8 077C                   MOV.B       @(R0,R7),R7; pProcAdr->step[].par04
    000044BA 607C                   EXTU.B      R7,R0
    000044BC 406C                   SHAD        R6,R0
    000044BE C90F                   AND         #15,R0
             tskcmd.c       6967          
             tskcmd.c       6968          if( spdptn > 0 )
    000044C0 2008                   TST         R0,R0
    000044C2 8D55                   BT/S        L891
    000044C4 6203                   MOV         R0,R2
             tskcmd.c       6969          {
             tskcmd.c       6970              devno  = MT_Z0;
             tskcmd.c       6971              MAC_SPEED_SET( devno, 
    000044C6 E00C                   MOV         #12,R0     ; H'0000000C
    000044C8 4280                   MULR        R0,R2
    000044CA DE1F                   MOV.L       L1391+8,R14; H'00000078+__$Sp
    000044CC 3F212028               MOV.L       R2,@(160:12,R15)
    000044D0 6023                   MOV         R2,R0
    000044D2 02ED                   MOV.W       @(R0,R14),R2; Sp[].ac
    000044D4 3F211022               MOV.W       R2,@(68:12,R15); mp.accel_type
    000044D8 DE1C                   MOV.L       L1391+12,R14; _GetFactor
    000044DA 4E0B                   JSR         @R14
    000044DC E403                   MOV         #3,R4      ; H'00000003
    000044DE E340                   MOV         #64,R3     ; H'00000040
    000044E0 E680                   MOV         #-128,R6   ; H'FFFFFF80
    000044E2 33FC                   ADD         R15,R3
    000044E4 666C                   EXTU.B      R6,R6
    000044E6 2302                   MOV.L       R0,@R3     ; mp.factor
    000044E8 EE00                   MOV         #0,R14     ; H'00000000
    000044EA D219                   MOV.L       L1391+16,R2; __$Sp
    000044EC 30F16028               MOV.L       @(160:12,R15),R0
    000044F0 6123                   MOV         R2,R1
    000044F2 717C                   ADD         #124,R1
    000044F4 051E                   MOV.L       @(R0,R1),R5; Sp[].fl
    000044F6 13E6                   MOV.L       R14,@(24,R3); mp.us
    000044F8 1352                   MOV.L       R5,@(8,R3) ; mp.FL
    000044FA 6523                   MOV         R2,R5
    000044FC 356C                   ADD         R6,R5
    000044FE 727A                   ADD         #122,R2
    00004500 075E                   MOV.L       @(R0,R5),R7; Sp[].fh
    00004502 13E7                   MOV.L       R14,@(28,R3); mp.ds
    00004504 1373                   MOV.L       R7,@(12,R3); mp.FH
    00004506 072D                   MOV.W       @(R0,R2),R7; Sp[].gl
    00004508 677D                   EXTU.W      R7,R7
    0000450A 1374                   MOV.L       R7,@(16,R3); mp.utime
    0000450C 1375                   MOV.L       R7,@(20,R3); mp.dtime
    0000450E 7FE0                   ADD         #-32,R15
    00004510 65F3                   MOV         R15,R5
    00004512 7560                   ADD         #96,R5
    00004514 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    00004516 6152                   MOV.L       @R5,R1     ; (part of)mp
    00004518 1F62                   MOV.L       R6,@(8,R15)
    0000451A 5654                   MOV.L       @(16,R5),R6; (part of)mp
    0000451C 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    0000451E 2F12                   MOV.L       R1,@R15
    00004520 5753                   MOV.L       @(12,R5),R7; (part of)mp
    00004522 5E55                   MOV.L       @(20,R5),R14; (part of)mp
    00004524 1F64                   MOV.L       R6,@(16,R15)
    00004526 5156                   MOV.L       @(24,R5),R1; (part of)mp
    00004528 5657                   MOV.L       @(28,R5),R6; (part of)mp
    0000452A 1F41                   MOV.L       R4,@(4,R15)
    0000452C E402                   MOV         #2,R4      ; H'00000002
    0000452E 1F73                   MOV.L       R7,@(12,R15)
    00004530 1FE5                   MOV.L       R14,@(20,R15)
    00004532 1F16                   MOV.L       R1,@(24,R15)
    00004534 D207                   MOV.L       L1391+20,R2; _motor_SET
    00004536 420B                   JSR         @R2
    00004538 1F67                   MOV.L       R6,@(28,R15)
    0000453A 7F20                   ADD         #32,R15
             tskcmd.c       6972                             Sp[devno][spdptn].ac, 
             tskcmd.c       6973                             Sp[devno][spdptn].fl, 
             tskcmd.c       6974                             Sp[devno][spdptn].fh, 
             tskcmd.c       6975                             Sp[devno][spdptn].gl );
             tskcmd.c       6976              movval = GetPositionValue(POS_Z0_TPGT1);
    0000453C A063                   BRA         L888
    0000453E E41B                   MOV         #27,R4     ; H'0000001B
    00004540              L1391:
    00004540 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00004544 <00000000>             .DATA.L     __$GetPositionValue
    00004548 <00000078>             .DATA.L     H'00000078+__$Sp
    0000454C <00000000>             .DATA.L     _GetFactor
    00004550 <00000000>             .DATA.L     __$Sp
    00004554 <00000000>             .DATA.L     _motor_SET
    00004558 <00000000>             .DATA.L     __$AbsmvAction
    0000455C <00000000>             .DATA.L     __$pProcDat
    00004560 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00004564 <00000005>             .DATA.L     H'00000005+__$SpPtn
    00004568 <0000003C>             .DATA.L     H'0000003C+__$Sp
    0000456C <00000000>             .DATA.L     __$pProcAdr
    00004570              L891:
             tskcmd.c       6977              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6978              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6979              pProcDat->Stp++;
             tskcmd.c       6980              break;
             tskcmd.c       6981          }
             tskcmd.c       6982          else
             tskcmd.c       6983          {
             tskcmd.c       6984              pProcDat->Stp++;
    00004570 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00004572 7001                   ADD         #1,R0
    00004574 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00004576              L883:
             tskcmd.c       6985              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6986          }
             tskcmd.c       6987          
             tskcmd.c       6988          
             tskcmd.c       6989      case 4: // Z軸シールブレーク最終位置（1段目から最終位置まで）
             tskcmd.c       6990          spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
    00004576 E014                   MOV         #20,R0     ; H'00000014
    00004578 4E80                   MULR        R0,R14
    0000457A D4A5                   MOV.L       L1392+2,R4 ; __$pProcAdr
    0000457C 6742                   MOV.L       @R4,R7     ; pProcAdr
    0000457E 7703                   ADD         #3,R7
    00004580 60E3                   MOV         R14,R0
    00004582 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].par04
    00004584 C90F                   AND         #15,R0
             tskcmd.c       6991          
             tskcmd.c       6992          if( spdptn )
    00004586 2008                   TST         R0,R0
    00004588 8D45                   BT/S        L893
    0000458A 6203                   MOV         R0,R2
             tskcmd.c       6993          {
             tskcmd.c       6994              devno  = MT_Z0;
             tskcmd.c       6995              MAC_SPEED_SET( MT_Z0, 
    0000458C E00C                   MOV         #12,R0     ; H'0000000C
    0000458E E403                   MOV         #3,R4      ; H'00000003
    00004590 4280                   MULR        R0,R2
    00004592 DEA0                   MOV.L       L1392+6,R14; H'00000078+__$Sp
    00004594 6023                   MOV         R2,R0
    00004596 00ED                   MOV.W       @(R0,R14),R0; Sp[].ac
    00004598 EE60                   MOV         #96,R14    ; H'00000060
    0000459A 3EFC                   ADD         R15,R14
    0000459C 3F212029               MOV.L       R2,@(164:12,R15)
    000045A0 D19D                   MOV.L       L1392+10,R1; _GetFactor
    000045A2 410B                   JSR         @R1
    000045A4 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    000045A6 2E02                   MOV.L       R0,@R14    ; mp.factor
    000045A8 E400                   MOV         #0,R4      ; H'00000000
    000045AA D19C                   MOV.L       L1392+14,R1; __$Sp
    000045AC 30F16029               MOV.L       @(164:12,R15),R0
    000045B0 6513                   MOV         R1,R5
    000045B2 757C                   ADD         #124,R5
    000045B4 025E                   MOV.L       @(R0,R5),R2; Sp[].fl
    000045B6 E580                   MOV         #-128,R5   ; H'FFFFFF80
    000045B8 655C                   EXTU.B      R5,R5
    000045BA 1E46                   MOV.L       R4,@(24,R14); mp.us
    000045BC 1E22                   MOV.L       R2,@(8,R14); mp.FL
    000045BE 6213                   MOV         R1,R2
    000045C0 717A                   ADD         #122,R1
    000045C2 325C                   ADD         R5,R2
    000045C4 051D                   MOV.W       @(R0,R1),R5; Sp[].gl
    000045C6 072E                   MOV.L       @(R0,R2),R7; Sp[].fh
    000045C8 655D                   EXTU.W      R5,R5
    000045CA 1E47                   MOV.L       R4,@(28,R14); mp.ds
    000045CC 1E73                   MOV.L       R7,@(12,R14); mp.FH
    000045CE 1E54                   MOV.L       R5,@(16,R14); mp.utime
    000045D0 1E55                   MOV.L       R5,@(20,R14); mp.dtime
    000045D2 7FE0                   ADD         #-32,R15
    000045D4 E680                   MOV         #-128,R6   ; H'FFFFFF80
    000045D6 65F3                   MOV         R15,R5
    000045D8 666C                   EXTU.B      R6,R6
    000045DA 356C                   ADD         R6,R5
    000045DC 6752                   MOV.L       @R5,R7     ; (part of)mp
    000045DE 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    000045E0 5655                   MOV.L       @(20,R5),R6; (part of)mp
    000045E2 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    000045E4 2F72                   MOV.L       R7,@R15
    000045E6 5E53                   MOV.L       @(12,R5),R14; (part of)mp
    000045E8 1F12                   MOV.L       R1,@(8,R15)
    000045EA 5154                   MOV.L       @(16,R5),R1; (part of)mp
    000045EC 1F65                   MOV.L       R6,@(20,R15)
    000045EE 5756                   MOV.L       @(24,R5),R7; (part of)mp
    000045F0 5657                   MOV.L       @(28,R5),R6; (part of)mp
    000045F2 1F41                   MOV.L       R4,@(4,R15)
    000045F4 E402                   MOV         #2,R4      ; H'00000002
    000045F6 1FE3                   MOV.L       R14,@(12,R15)
    000045F8 1F14                   MOV.L       R1,@(16,R15)
    000045FA 1F76                   MOV.L       R7,@(24,R15)
    000045FC D288                   MOV.L       L1392+18,R2; _motor_SET
    000045FE 420B                   JSR         @R2
    00004600 1F67                   MOV.L       R6,@(28,R15)
    00004602 7F20                   ADD         #32,R15
             tskcmd.c       6996                             Sp[MT_Z0][spdptn].ac, 
             tskcmd.c       6997                             Sp[MT_Z0][spdptn].fl, 
             tskcmd.c       6998                             Sp[MT_Z0][spdptn].fh, 
             tskcmd.c       6999                             Sp[MT_Z0][spdptn].gl );
             tskcmd.c       7000              movval = GetPositionValue(POS_Z0_STOPE);
    00004604 E417                   MOV         #23,R4     ; H'00000017
    00004606              L888:
    00004606 D387                   MOV.L       L1392+22,R3; __$GetPositionValue
    00004608 434B                   JSR/N       @R3
    0000460A 2F06                   MOV.L       R0,@-R15
    0000460C 65D3                   MOV         R13,R5
    0000460E E700                   MOV         #0,R7      ; H'00000000
    00004610 E602                   MOV         #2,R6      ; H'00000002
    00004612 A050                   BRA         L889
    00004614 E451                   MOV         #81,R4     ; H'00000051
    00004616              L893:
             tskcmd.c       7001              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD,  movval );
             tskcmd.c       7002              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7003              pProcDat->Stp++;
             tskcmd.c       7004              break;
             tskcmd.c       7005          }
             tskcmd.c       7006          else
             tskcmd.c       7007          {
             tskcmd.c       7008              pProcDat->Stp++;
    00004616 66B2                   MOV.L       @R11,R6    ; pProcDat
    00004618 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000461A 7001                   ADD         #1,R0
    0000461C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000461E              L885:
             tskcmd.c       7009              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7010          }
             tskcmd.c       7011    
             tskcmd.c       7012    
             tskcmd.c       7013      case 5: // Z軸速度設定・退避位置移動
             tskcmd.c       7014          devno  = MT_Z0;
             tskcmd.c       7015          spdptn = SpPtn.Z0_SpdNmlPtn;
    0000461E D182                   MOV.L       L1392+26,R1; H'00000006+__$SpPtn
    00004620 6010                   MOV.B       @R1,R0     ; SpPtn.Z0_SpdNmlPtn
    00004622 EE80                   MOV         #-128,R14  ; H'FFFFFF80
             tskcmd.c       7016          movval = GetPositionValue(POS_Z0_TAIHI);
    00004624 E407                   MOV         #7,R4      ; H'00000007
    00004626 3F0100A8               MOV.B       R0,@(168:12,R15); spdptn
    0000462A D37E                   MOV.L       L1392+22,R3; __$GetPositionValue
    0000462C 430B                   JSR         @R3
    0000462E 6EEC                   EXTU.B      R14,R14
    00004630 3EFC                   ADD         R15,R14
             tskcmd.c       7017    
             tskcmd.c       7018          MAC_SPEED_SET( devno, 
    00004632 34F180A8               MOVU.B      @(168,R15),R4; spdptn
    00004636 1E0B                   MOV.L       R0,@(44,R14); movval
    00004638 E00C                   MOV         #12,R0     ; H'0000000C
    0000463A 4480                   MULR        R0,R4
    0000463C D575                   MOV.L       L1392+6,R5 ; H'00000078+__$Sp
    0000463E 6043                   MOV         R4,R0
    00004640 005D                   MOV.W       @(R0,R5),R0; Sp[].ac
    00004642 1E49                   MOV.L       R4,@(36,R14)
    00004644 E403                   MOV         #3,R4      ; H'00000003
    00004646 D674                   MOV.L       L1392+10,R6; _GetFactor
    00004648 460B                   JSR         @R6
    0000464A 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    0000464C 2E02                   MOV.L       R0,@R14    ; mp.factor
    0000464E D573                   MOV.L       L1392+14,R5; __$Sp
    00004650 50E9                   MOV.L       @(36,R14),R0
    00004652 6753                   MOV         R5,R7
    00004654 777C                   ADD         #124,R7
    00004656 6153                   MOV         R5,R1
    00004658 027E                   MOV.L       @(R0,R7),R2; Sp[].fl
    0000465A 757A                   ADD         #122,R5
    0000465C 045D                   MOV.W       @(R0,R5),R4; Sp[].gl
    0000465E E500                   MOV         #0,R5      ; H'00000000
    00004660 1E22                   MOV.L       R2,@(8,R14); mp.FL
    00004662 E280                   MOV         #-128,R2   ; H'FFFFFF80
    00004664 622C                   EXTU.B      R2,R2
    00004666 1E56                   MOV.L       R5,@(24,R14); mp.us
    00004668 312C                   ADD         R2,R1
    0000466A 644D                   EXTU.W      R4,R4
    0000466C 021E                   MOV.L       @(R0,R1),R2; Sp[].fh
    0000466E 1E44                   MOV.L       R4,@(16,R14); mp.utime
    00004670 1E23                   MOV.L       R2,@(12,R14); mp.FH
    00004672 1E45                   MOV.L       R4,@(20,R14); mp.dtime
    00004674 1E57                   MOV.L       R5,@(28,R14); mp.ds
    00004676 7FE0                   ADD         #-32,R15
    00004678 E7A0                   MOV         #-96,R7    ; H'FFFFFFA0
    0000467A 65F3                   MOV         R15,R5
    0000467C 677C                   EXTU.B      R7,R7
    0000467E E402                   MOV         #2,R4      ; H'00000002
    00004680 357C                   ADD         R7,R5
    00004682 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    00004684 5153                   MOV.L       @(12,R5),R1; (part of)mp
    00004686 1FE1                   MOV.L       R14,@(4,R15)
    00004688 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    0000468A 5655                   MOV.L       @(20,R5),R6; (part of)mp
    0000468C 6752                   MOV.L       @R5,R7     ; (part of)mp
    0000468E 1FE2                   MOV.L       R14,@(8,R15)
    00004690 1F13                   MOV.L       R1,@(12,R15)
    00004692 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00004694 1F65                   MOV.L       R6,@(20,R15)
    00004696 5E56                   MOV.L       @(24,R5),R14; (part of)mp
    00004698 5657                   MOV.L       @(28,R5),R6; (part of)mp
    0000469A 2F72                   MOV.L       R7,@R15
    0000469C 1F14                   MOV.L       R1,@(16,R15)
    0000469E 1FE6                   MOV.L       R14,@(24,R15)
    000046A0 D25F                   MOV.L       L1392+18,R2; _motor_SET
    000046A2 420B                   JSR         @R2
    000046A4 1F67                   MOV.L       R6,@(28,R15)
    000046A6 7F1C                   ADD         #28,R15
    000046A8 65D3                   MOV         R13,R5
             tskcmd.c       7019                         Sp[devno][spdptn].ac, 
             tskcmd.c       7020                         Sp[devno][spdptn].fl, 
             tskcmd.c       7021                         Sp[devno][spdptn].fh, 
             tskcmd.c       7022                         Sp[devno][spdptn].gl );
             tskcmd.c       7023    
             tskcmd.c       7024          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, movval );
    000046AA 32F1602C               MOV.L       @(176:12,R15),R2; movval
    000046AE E700                   MOV         #0,R7      ; H'00000000
    000046B0 E602                   MOV         #2,R6      ; H'00000002
    000046B2 2F22                   MOV.L       R2,@R15
    000046B4 E451                   MOV         #81,R4     ; H'00000051
    000046B6              L889:
    000046B6 D35D                   MOV.L       L1392+30,R3; __$AbsmvAction
    000046B8 434B                   JSR/N       @R3
    000046BA 6403                   MOV         R0,R4
    000046BC 2008                   TST         R0,R0
    000046BE 8F03                   BF/S        L895
    000046C0 7F04                   ADD         #4,R15
    000046C2 A001                   BRA         L895
    000046C4 64C3                   MOV         R12,R4
    000046C6              L886:
             tskcmd.c       7025          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7026          pProcDat->Stp++;
             tskcmd.c       7027          break;
             tskcmd.c       7028    
             tskcmd.c       7029      case 6: // 
             tskcmd.c       7030          result = E_SUCCESS;
    000046C6 E400                   MOV         #0,R4      ; H'00000000
    000046C8              L895:
    000046C8 66B2                   MOV.L       @R11,R6    ; pProcDat
    000046CA 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000046CC 7001                   ADD         #1,R0
    000046CE 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000046D0              L887:
    000046D0 030000B0               MOVI20      #176,R3    ; H'000000B0
    000046D4 3F3C                   ADD         R3,R15
    000046D6 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       7031          pProcDat->Stp++;
             tskcmd.c       7032          break;
             tskcmd.c       7033      }
             tskcmd.c       7034      return( result );
             tskcmd.c       7035    }
    000046D8 047B                   RTV/N       R4
             tskcmd.c       7036    /***********************************************************************
             tskcmd.c       7037    * 
             tskcmd.c       7038    * [概要]  加圧
             tskcmd.c       7039    * [引数]  
             tskcmd.c       7040    * [戻値]  
             tskcmd.c       7041    * 
             tskcmd.c       7042    ***********************************************************************/
             tskcmd.c       7043    static ER  CmdActionPress( T_CMD_MSG* mrcv )
    000046DA              __$CmdActionPress:               ; function: __$CmdActionPress
                                                           ; frame size=60
    000046DA 48F0                   MOVMU.L     R8,@-R15
    000046DC 7FFC                   ADD         #-4,R15
             tskcmd.c       7044    {
             tskcmd.c       7045      ER result = E_CONTINUE;
             tskcmd.c       7046      UB nzl;
             tskcmd.c       7047      UB prid1;
             tskcmd.c       7048      UB bcid;
             tskcmd.c       7049      UB inf1;
             tskcmd.c       7050      UB inf2;
             tskcmd.c       7051      UB actstep;
             tskcmd.c       7052      UB dummy;
             tskcmd.c       7053      
             tskcmd.c       7054      unsigned short sftbit = 0x0001;
             tskcmd.c       7055      unsigned short wkA = 0x0000;
             tskcmd.c       7056      unsigned short wkB = 0x0000;
             tskcmd.c       7057      unsigned short wkC = 0x0000;
             tskcmd.c       7058      
             tskcmd.c       7059      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       7060      bcid  = mrcv->msgdata.bcid;
    000046DE 3C41801A               MOVU.B      @(26,R4),R12; (mrcv)->bcid
             tskcmd.c       7061      inf1  = mrcv->msgdata.inf;
             tskcmd.c       7062      inf2  = mrcv->msgdata.inf2;
             tskcmd.c       7063      actstep = bcctrl[bcid].actstp - 1 ;
             tskcmd.c       7064      
             tskcmd.c       7065      switch( pProcDat->Stp )
    000046E2 D853                   MOV.L       L1392+34,R8; __$pProcDat
    000046E4 60C3                   MOV         R12,R0
    000046E6 6582                   MOV.L       @R8,R5     ; pProcDat
    000046E8 4008                   SHLL2       R0
    000046EA E9F1                   MOV         #-15,R9    ; H'FFFFFFF1
    000046EC D651                   MOV.L       L1392+38,R6; H'00000002+__$bcctrl
    000046EE 4000                   SHLL        R0
    000046F0 026C                   MOV.B       @(R0,R6),R2; bcctrl[].actstp
    000046F2 699C                   EXTU.B      R9,R9
    000046F4 30518002               MOVU.B      @(2,R5),R0 ; (pProcDat)->Stp
    000046F8 6B93                   MOV         R9,R11
    000046FA 2008                   TST         R0,R0
    000046FC 3A418018               MOVU.B      @(24,R4),R10; (mrcv)->prid1
    00004700 3D41801C               MOVU.B      @(28,R4),R13; (mrcv)->inf
    00004704 3E41801D               MOVU.B      @(29,R4),R14; (mrcv)->inf2
    00004708 8D16                   BT/S        L908
    0000470A 72FF                   ADD         #-1,R2
    0000470C 8801                   CMP/EQ      #1,R0
    0000470E 8931                   BT          L910
    00004710 8802                   CMP/EQ      #2,R0
    00004712 893F                   BT          L912
    00004714 8803                   CMP/EQ      #3,R0
    00004716 8948                   BT          L914
    00004718 8804                   CMP/EQ      #4,R0
    0000471A 8966                   BT          L916
    0000471C 8805                   CMP/EQ      #5,R0
    0000471E 8B01                   BF          L1425
    00004720 A0A4                   BRA         L918
    00004722 0009                   NOP
    00004724              L1425:
    00004724 8806                   CMP/EQ      #6,R0
    00004726 8B01                   BF          L1426
    00004728 A0BC                   BRA         L920
    0000472A 0009                   NOP
    0000472C              L1426:
    0000472C 8807                   CMP/EQ      #7,R0
    0000472E 8B01                   BF          L1427
    00004730 A0DF                   BRA         L921
    00004732 0009                   NOP
    00004734              L1427:
    00004734 A0F4                   BRA         L922
    00004736 0009                   NOP
    00004738              L908:
    00004738 DB3F                   MOV.L       L1392+42,R11; H'00000001+__$psel
             tskcmd.c       7066      {
             tskcmd.c       7067      case 0: // ポンプ速度設定、加圧前圧力取得指示
             tskcmd.c       7068          psns.suc  = 0;
    0000473A E000                   MOV         #0,R0      ; H'00000000
    0000473C 64B0                   MOV.B       @R11,R4    ; psel.smp
    0000473E D53F                   MOV.L       L1392+46,R5; H'00000002+__$psns
             tskcmd.c       7069          psns.idl  = IdleBitSet(psel.smp);
    00004740 D13F                   MOV.L       L1392+50,R1; _IdleBitSet
    00004742 410B                   JSR         @R1
    00004744 2501                   MOV.W       R0,@R5     ; psns.suc
    00004746 DB3F                   MOV.L       L1392+54,R11; __$psns
    00004748 2B01                   MOV.W       R0,@R11    ; psns.idl
             tskcmd.c       7070          psns.tcnt = 0;
    0000474A E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       7071    
             tskcmd.c       7072          mbx_send    (
             tskcmd.c       7073                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7074                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7075                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7076                          prid1,               // prid1
             tskcmd.c       7077                          bcid,                // bcid
             tskcmd.c       7078                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7079                          inf1,                // sts
             tskcmd.c       7080                          inf2,                // sts2
             tskcmd.c       7081                          &dummy,              // data
             tskcmd.c       7082                          sizeof( dummy )      // siz
             tskcmd.c       7083                      );
    0000474C E401                   MOV         #1,R4      ; H'00000001
    0000474E 81B3                   MOV.W       R0,@(6,R11); psns.tcnt
    00004750 2F46                   MOV.L       R4,@-R15
    00004752 67F3                   MOV         R15,R7
    00004754 7704                   ADD         #4,R7
    00004756 2F76                   MOV.L       R7,@-R15
    00004758 2FE6                   MOV.L       R14,@-R15
    0000475A 2FD6                   MOV.L       R13,@-R15
    0000475C ED99                   MOV         #-103,R13  ; H'FFFFFF99
    0000475E 6DDC                   EXTU.B      R13,R13
    00004760 2FD6                   MOV.L       R13,@-R15
    00004762 2FC6                   MOV.L       R12,@-R15
    00004764 E60D                   MOV         #13,R6     ; H'0000000D
    00004766 E50C                   MOV         #12,R5     ; H'0000000C
    00004768 6463                   MOV         R6,R4
    0000476A D237                   MOV.L       L1392+58,R2; _mbx_send
    0000476C 420B                   JSR         @R2
    0000476E 67A3                   MOV         R10,R7
    00004770 A014                   BRA         L923
    00004772 7F18                   ADD         #24,R15
    00004774              L910:
             tskcmd.c       7084          WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7085          pProcDat->Stp++;
             tskcmd.c       7086          break;
             tskcmd.c       7087    
             tskcmd.c       7088      case 1: // 正常ノズルのみ電磁弁を流路側に指示
             tskcmd.c       7089          // typedef struct {
             tskcmd.c       7090          //  unsigned short  idl;
             tskcmd.c       7091          //  unsigned short  suc;
             tskcmd.c       7092          //  unsigned short  err;
             tskcmd.c       7093          //  unsigned short  tcnt;
             tskcmd.c       7094          //  unsigned short  pre[NOZZLE_MAX+1];//加圧前
             tskcmd.c       7095          //  unsigned short  now[NOZZLE_MAX+1];//現在
             tskcmd.c       7096          //  unsigned short  pek[NOZZLE_MAX+1];//Peek
             tskcmd.c       7097          //  unsigned short  dat[NOZZLE_MAX+1][PRESSMP_MAX];//履歴
             tskcmd.c       7098          // } ST_PSNS;
             tskcmd.c       7099    
             tskcmd.c       7100          PressDataGet( &psns.pre[0] );
    00004774 D435                   MOV.L       L1392+62,R4; H'00000008+__$psns
    00004776 D136                   MOV.L       L1392+66,R1; _PressDataGet
    00004778 414B                   JSR/N       @R1
             tskcmd.c       7101    
             tskcmd.c       7102          vout.target = psns.idl | 0x01fff;
    0000477A D132                   MOV.L       L1392+54,R1; __$psns
    0000477C 6511                   MOV.W       @R1,R5     ; psns.idl
             tskcmd.c       7103          vout.valout = ( ( psns.err ^ 0x1fff ) & psns.idl ) | 0x01fff;
    0000477E 8512                   MOV.W       @(4,R1),R0 ; psns.err
    00004780 06001FFF               MOVI20      #8191,R6   ; H'00001FFF
    00004784 6753                   MOV         R5,R7
    00004786 276B                   OR          R6,R7
    00004788 D432                   MOV.L       L1392+70,R4; __$vout
    0000478A 206A                   XOR         R6,R0
    0000478C 2471                   MOV.W       R7,@R4     ; vout.target
    0000478E 2059                   AND         R5,R0
    00004790 A071                   BRA         L924
    00004792 206B                   OR          R6,R0
    00004794              L912:
    00004794 E505                   MOV         #5,R5      ; H'00000005
             tskcmd.c       7104          
             tskcmd.c       7105          mbx_send    (
             tskcmd.c       7106                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7107                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7108                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7109                          prid1,               // prid1
             tskcmd.c       7110                          bcid,                // bcid
             tskcmd.c       7111                          ID_MSG_VALVEOUT,     // msgid
             tskcmd.c       7112                          inf1,                // sts
             tskcmd.c       7113                          inf2,                // sts2
             tskcmd.c       7114                          (UB *)&vout.target,        // data
             tskcmd.c       7115                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7116                      );
             tskcmd.c       7117          pProcDat->Stp++;
             tskcmd.c       7118          break;
             tskcmd.c       7119    
             tskcmd.c       7120      case 2: // ポンプ駆動（加圧開始）
             tskcmd.c       7121          pio_BOUT( O_DAIAPMP, 5 );// ★速度パターンいれる
    00004796 D230                   MOV.L       L1392+74,R2; _pio_BOUT
    00004798 420B                   JSR         @R2
    0000479A E401                   MOV         #1,R4      ; H'00000001
    0000479C              L923:
    0000479C E614                   MOV         #20,R6     ; H'00000014
    0000479E 64A3                   MOV         R10,R4
    000047A0 D32E                   MOV.L       L1392+78,R3; __$WaitAction
    000047A2 430B                   JSR         @R3
    000047A4 65C3                   MOV         R12,R5
    000047A6 A078                   BRA         L925
    000047A8 0009                   NOP
    000047AA              L914:
             tskcmd.c       7122          WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7123          pProcDat->Stp++;
             tskcmd.c       7124          break;
             tskcmd.c       7125    
             tskcmd.c       7126      case 3: // 圧力値取得
             tskcmd.c       7127          mbx_send    (
             tskcmd.c       7128                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7129                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7130                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7131                          prid1,               // prid1
             tskcmd.c       7132                          bcid,                // bcid
             tskcmd.c       7133                          ID_MSG_PRESSREN, // msgid
             tskcmd.c       7134                          inf1,                // sts
             tskcmd.c       7135                          inf2,                // sts2
             tskcmd.c       7136                          &dummy,              // data
             tskcmd.c       7137                          sizeof( dummy )      // siz
             tskcmd.c       7138                      );
    000047AA E401                   MOV         #1,R4      ; H'00000001
    000047AC 2F46                   MOV.L       R4,@-R15
    000047AE 67F3                   MOV         R15,R7
    000047B0 7704                   ADD         #4,R7
    000047B2 2F76                   MOV.L       R7,@-R15
    000047B4 2FE6                   MOV.L       R14,@-R15
    000047B6 2FD6                   MOV.L       R13,@-R15
    000047B8 ED98                   MOV         #-104,R13  ; H'FFFFFF98
    000047BA 6DDC                   EXTU.B      R13,R13
    000047BC 2FD6                   MOV.L       R13,@-R15
    000047BE 2FC6                   MOV.L       R12,@-R15
    000047C0 E60D                   MOV         #13,R6     ; H'0000000D
    000047C2 E50C                   MOV         #12,R5     ; H'0000000C
    000047C4 6463                   MOV         R6,R4
    000047C6 DB20                   MOV.L       L1392+58,R11; _mbx_send
    000047C8 4B0B                   JSR         @R11
    000047CA 67A3                   MOV         R10,R7
    000047CC 7F18                   ADD         #24,R15
             tskcmd.c       7139          WaitAction( prid1, bcid, PRESSMP_WAIT );
    000047CE E614                   MOV         #20,R6     ; H'00000014
    000047D0 64A3                   MOV         R10,R4
    000047D2 D322                   MOV.L       L1392+78,R3; __$WaitAction
    000047D4 430B                   JSR         @R3
    000047D6 65C3                   MOV         R12,R5
             tskcmd.c       7140          
             tskcmd.c       7141          pProcDat->Stp++;
    000047D8 6E82                   MOV.L       @R8,R14    ; pProcDat
             tskcmd.c       7142          psns.tcnt++;
    000047DA D11A                   MOV.L       L1392+54,R1; __$psns
    000047DC 84E2                   MOV.B       @(2,R14),R0; (pProcDat)->Stp
    000047DE 7001                   ADD         #1,R0
    000047E0 80E2                   MOV.B       R0,@(2,R14); (pProcDat)->Stp
    000047E2 8513                   MOV.W       @(6,R1),R0 ; psns.tcnt
    000047E4 7001                   ADD         #1,R0
    000047E6 A09B                   BRA         L922
    000047E8 8113                   MOV.W       R0,@(6,R1) ; psns.tcnt
    000047EA              L916:
             tskcmd.c       7143          break;
             tskcmd.c       7144    
             tskcmd.c       7145      case 4: // 加圧判定
             tskcmd.c       7146          result = PressureChk();
    000047EA B09D                   BSR         __$PressureChk
    000047EC 0009                   NOP
             tskcmd.c       7147    
             tskcmd.c       7148          if( result == E_CONTINUE )
    000047EE 30B0                   CMP/EQ      R11,R0
    000047F0 8F02                   BF/S        L927
    000047F2 6903                   MOV         R0,R9
             tskcmd.c       7149          {
             tskcmd.c       7150              pProcDat->Stp = 3;
    000047F4 A060                   BRA         L928
    000047F6 E003                   MOV         #3,R0      ; H'00000003
    000047F8              L927:
             tskcmd.c       7151              WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7152          }
             tskcmd.c       7153          else if( result == E_SUCCESS )
    000047F8 2998                   TST         R9,R9
    000047FA 8901                   BT          L1428
    000047FC A090                   BRA         L922
    000047FE 0009                   NOP
    00004800              L1428:
             tskcmd.c       7154          {
             tskcmd.c       7155              memcpy( &psns.pek[0], &psns.now[0], (NOZZLE_MAX*2) );
    00004800 D517                   MOV.L       L1392+82,R5; H'00000022+__$psns
    00004802 D418                   MOV.L       L1392+86,R4; H'0000003C+__$psns
    00004804 D218                   MOV.L       L1392+90,R2; _memcpy
    00004806 420B                   JSR         @R2
    00004808 E618                   MOV         #24,R6     ; H'00000018
    0000480A A060                   BRA         L930
    0000480C 0009                   NOP
    0000480E              L1392:
    0000480E 00000002               .RES.W      1
    00004810 <00000000>             .DATA.L     __$pProcAdr
    00004814 <00000078>             .DATA.L     H'00000078+__$Sp
    00004818 <00000000>             .DATA.L     _GetFactor
    0000481C <00000000>             .DATA.L     __$Sp
    00004820 <00000000>             .DATA.L     _motor_SET
    00004824 <00000000>             .DATA.L     __$GetPositionValue
    00004828 <00000006>             .DATA.L     H'00000006+__$SpPtn
    0000482C <00000000>             .DATA.L     __$AbsmvAction
    00004830 <00000000>             .DATA.L     __$pProcDat
    00004834 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00004838 <00000001>             .DATA.L     H'00000001+__$psel
    0000483C <00000002>             .DATA.L     H'00000002+__$psns
    00004840 <00000000>             .DATA.L     _IdleBitSet
    00004844 <00000000>             .DATA.L     __$psns
    00004848 <00000000>             .DATA.L     _mbx_send
    0000484C <00000008>             .DATA.L     H'00000008+__$psns
    00004850 <00000000>             .DATA.L     _PressDataGet
    00004854 <00000000>             .DATA.L     __$vout
    00004858 <00000000>             .DATA.L     _pio_BOUT
    0000485C <00000000>             .DATA.L     __$WaitAction
    00004860 <00000022>             .DATA.L     H'00000022+__$psns
    00004864 <0000003C>             .DATA.L     H'0000003C+__$psns
    00004868 <00000000>             .DATA.L     _memcpy
    0000486C              L918:
             tskcmd.c       7156              pio_BOUT( O_DAIAPMP, 0 );
             tskcmd.c       7157              WaitAction( prid1, bcid, POMPAFT_WAIT );
             tskcmd.c       7158              pProcDat->Stp++;
             tskcmd.c       7159              psns.tcnt = 0;
             tskcmd.c       7160              result = E_CONTINUE;
             tskcmd.c       7161          }
             tskcmd.c       7162          break;
             tskcmd.c       7163    
             tskcmd.c       7164      case 5: // 圧力値取得 減圧
             tskcmd.c       7165    //        vout.target = ( 0x0fff ^ vout.valout);
             tskcmd.c       7166    //        vout.valout = vout.target;
             tskcmd.c       7167          vout.target = 0x1fff;
    0000486C 02001FFF               MOVI20      #8191,R2   ; H'00001FFF
    00004870 D4A8                   MOV.L       L1393+2,R4 ; __$vout
    00004872 2421                   MOV.W       R2,@R4     ; vout.target
             tskcmd.c       7168          vout.valout = 0x0000;
    00004874 E000                   MOV         #0,R0      ; H'00000000
    00004876              L924:
    00004876 EB04                   MOV         #4,R11     ; H'00000004
    00004878 8141                   MOV.W       R0,@(2,R4) ; vout.valout
    0000487A 2FB6                   MOV.L       R11,@-R15
    0000487C D1A5                   MOV.L       L1393+2,R1 ; __$vout
    0000487E 2F16                   MOV.L       R1,@-R15
    00004880 2FE6                   MOV.L       R14,@-R15
    00004882 2FD6                   MOV.L       R13,@-R15
    00004884 E29B                   MOV         #-101,R2   ; H'FFFFFF9B
    00004886 622C                   EXTU.B      R2,R2
    00004888 2F26                   MOV.L       R2,@-R15
    0000488A 2FC6                   MOV.L       R12,@-R15
    0000488C E60D                   MOV         #13,R6     ; H'0000000D
    0000488E E50C                   MOV         #12,R5     ; H'0000000C
    00004890 6463                   MOV         R6,R4
    00004892 D2A1                   MOV.L       L1393+6,R2 ; _mbx_send
    00004894 420B                   JSR         @R2
    00004896 67A3                   MOV         R10,R7
    00004898 7F18                   ADD         #24,R15
    0000489A              L925:
    0000489A 6682                   MOV.L       @R8,R6     ; pProcDat
    0000489C 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000489E 7001                   ADD         #1,R0
    000048A0 A03E                   BRA         L922
    000048A2 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000048A4              L920:
             tskcmd.c       7169    
             tskcmd.c       7170          mbx_send    (
             tskcmd.c       7171                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7172                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7173                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7174                          prid1,               // prid1
             tskcmd.c       7175                          bcid,                // bcid
             tskcmd.c       7176                          ID_MSG_VALVEOUT,     // msgid
             tskcmd.c       7177                          inf1,                // sts
             tskcmd.c       7178                          inf2,                // sts2
             tskcmd.c       7179                          (UB *)&vout.target,        // data
             tskcmd.c       7180                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7181                      );
             tskcmd.c       7182    
             tskcmd.c       7183          pProcDat->Stp++;
             tskcmd.c       7184          break;
             tskcmd.c       7185    
             tskcmd.c       7186      case 6: // 減圧判定
             tskcmd.c       7187          result = RePressureChk();
    000048A4 B0AB                   BSR         __$RePressureChk
    000048A6 0009                   NOP
             tskcmd.c       7188    
             tskcmd.c       7189          psns.tcnt++;
    000048A8 D19C                   MOV.L       L1393+10,R1; __$psns
             tskcmd.c       7190          if( result == E_CONTINUE )
    000048AA 30B0                   CMP/EQ      R11,R0
    000048AC 6903                   MOV         R0,R9
    000048AE 8513                   MOV.W       @(6,R1),R0 ; psns.tcnt
    000048B0 7001                   ADD         #1,R0
    000048B2 8F0A                   BF/S        L932
    000048B4 8113                   MOV.W       R0,@(6,R1) ; psns.tcnt
             tskcmd.c       7191          {
             tskcmd.c       7192              pProcDat->Stp = 5;
    000048B6 E005                   MOV         #5,R0      ; H'00000005
    000048B8              L928:
    000048B8 6282                   MOV.L       @R8,R2     ; pProcDat
    000048BA E614                   MOV         #20,R6     ; H'00000014
    000048BC 64A3                   MOV         R10,R4
    000048BE 8022                   MOV.B       R0,@(2,R2) ; (pProcDat)->Stp
    000048C0 D397                   MOV.L       L1393+14,R3; __$WaitAction
    000048C2 430B                   JSR         @R3
    000048C4 65C3                   MOV         R12,R5
    000048C6 A02B                   BRA         L922
    000048C8 0009                   NOP
    000048CA              L932:
             tskcmd.c       7193              WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7194          }
             tskcmd.c       7195          else if( result == E_SUCCESS )
    000048CA 2998                   TST         R9,R9
    000048CC 8B28                   BF          L922
    000048CE              L930:
    000048CE E500                   MOV         #0,R5      ; H'00000000
    000048D0 D294                   MOV.L       L1393+18,R2; _pio_BOUT
    000048D2 420B                   JSR         @R2
    000048D4 E401                   MOV         #1,R4      ; H'00000001
    000048D6 E605                   MOV         #5,R6      ; H'00000005
    000048D8 64A3                   MOV         R10,R4
    000048DA D391                   MOV.L       L1393+14,R3; __$WaitAction
    000048DC 430B                   JSR         @R3
    000048DE 65C3                   MOV         R12,R5
    000048E0 6182                   MOV.L       @R8,R1     ; pProcDat
    000048E2 69B3                   MOV         R11,R9
    000048E4 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    000048E6 7001                   ADD         #1,R0
    000048E8 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    000048EA E000                   MOV         #0,R0      ; H'00000000
    000048EC D18E                   MOV.L       L1393+22,R1; H'00000006+__$psns
    000048EE A017                   BRA         L922
    000048F0 2101                   MOV.W       R0,@R1     ; psns.tcnt
    000048F2              L921:
             tskcmd.c       7196          {
             tskcmd.c       7197              pio_BOUT( O_DAIAPMP, 0 );
             tskcmd.c       7198              WaitAction( prid1, bcid, POMPAFT_WAIT );
             tskcmd.c       7199              pProcDat->Stp++;
             tskcmd.c       7200              psns.tcnt = 0;
             tskcmd.c       7201              result = E_CONTINUE;
             tskcmd.c       7202          }
             tskcmd.c       7203          else
             tskcmd.c       7204          {
             tskcmd.c       7205          }
             tskcmd.c       7206          break;
             tskcmd.c       7207          
             tskcmd.c       7208          
             tskcmd.c       7209      case 7: // 
             tskcmd.c       7210          if( PressStatus(&pProcAdr->step[actstep].par03) != E_SUCCESS )//★
    000048F2 662C                   EXTU.B      R2,R6
    000048F4 E014                   MOV         #20,R0     ; H'00000014
    000048F6 4680                   MULR        R0,R6
    000048F8 D58C                   MOV.L       L1393+26,R5; __$pProcAdr
    000048FA 6452                   MOV.L       @R5,R4     ; pProcAdr
    000048FC 7402                   ADD         #2,R4
    000048FE D38C                   MOV.L       L1393+30,R3; __$PressStatus
    00004900 430B                   JSR         @R3
    00004902 346C                   ADD         R6,R4
    00004904 2008                   TST         R0,R0
    00004906 8906                   BT          L934
             tskcmd.c       7211          {
             tskcmd.c       7212              result = E_CONTINUE;
             tskcmd.c       7213              WaitAction( prid1, bcid, 25 );
    00004908 E619                   MOV         #25,R6     ; H'00000019
    0000490A 64A3                   MOV         R10,R4
    0000490C D384                   MOV.L       L1393+14,R3; __$WaitAction
    0000490E 430B                   JSR         @R3
    00004910 65C3                   MOV         R12,R5
    00004912 A005                   BRA         L922
    00004914 69B3                   MOV         R11,R9
    00004916              L934:
             tskcmd.c       7214              break;
             tskcmd.c       7215          }
             tskcmd.c       7216          else
             tskcmd.c       7217          {
             tskcmd.c       7218              pProcDat->Stp++;
    00004916 6682                   MOV.L       @R8,R6     ; pProcDat
             tskcmd.c       7219              result = E_SUCCESS;
    00004918 E900                   MOV         #0,R9      ; H'00000000
    0000491A 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000491C 7001                   ADD         #1,R0
    0000491E 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004920              L922:
             tskcmd.c       7220          }
             tskcmd.c       7221          break;
             tskcmd.c       7222      }
             tskcmd.c       7223      return( result );
    00004920 6093                   MOV         R9,R0
    00004922 7F04                   ADD         #4,R15
    00004924 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       7224    }
    00004926 006B                   RTS/N
             tskcmd.c       7225    
             tskcmd.c       7226    /***********************************************************************
             tskcmd.c       7227    * 
             tskcmd.c       7228    * [概要]  
             tskcmd.c       7229    * [引数]  
             tskcmd.c       7230    * [戻値]  
             tskcmd.c       7231    * 
             tskcmd.c       7232    ***********************************************************************/
             tskcmd.c       7233    static ER  PressureChk()
    00004928              __$PressureChk:                  ; function: __$PressureChk
                                                           ; frame size=36
    00004928 48F0                   MOVMU.L     R8,@-R15
    0000492A 7FFC                   ADD         #-4,R15
             tskcmd.c       7234    {
             tskcmd.c       7235      ER result = E_CONTINUE;
             tskcmd.c       7236      UB nzl;
             tskcmd.c       7237      UB actstep;
             tskcmd.c       7238      UB spdptn;
             tskcmd.c       7239      unsigned short sftbit = 0x0001;
             tskcmd.c       7240      unsigned short wkA = 0x0000;
             tskcmd.c       7241      unsigned short wkB = 0x0000;
             tskcmd.c       7242      unsigned short wkC = 0x0000;
             tskcmd.c       7243    
             tskcmd.c       7244      if( psns.tcnt >= ( 5 * pProcAdr->step[actstep].par05 ))//  Timeout時間(msec) : Tsec * 1000、Interval:200msec、タイムアウトカウント：1000T/200 = 5T
    0000492C E014                   MOV         #20,R0     ; H'00000014
    0000492E EBF1                   MOV         #-15,R11   ; H'FFFFFFF1
    00004930 4680                   MULR        R0,R6
    00004932 DC7E                   MOV.L       L1393+26,R12; __$pProcAdr
    00004934 62C2                   MOV.L       @R12,R2    ; pProcAdr
    00004936 6BBC                   EXTU.B      R11,R11
    00004938 D17B                   MOV.L       L1393+22,R1; H'00000006+__$psns
    0000493A 7204                   ADD         #4,R2
    0000493C 6863                   MOV         R6,R8
    0000493E 6063                   MOV         R6,R0
    00004940 022C                   MOV.B       @(R0,R2),R2; pProcAdr->step[].par05
    00004942 E005                   MOV         #5,R0      ; H'00000005
    00004944 642C                   EXTU.B      R2,R4
    00004946 4480                   MULR        R0,R4
    00004948 35119000               MOVU.W      @(0,R1),R5 ; psns.tcnt
    0000494C 3543                   CMP/GE      R4,R5
    0000494E 8F14                   BF/S        L937
    00004950 EE01                   MOV         #1,R14     ; H'00000001
             tskcmd.c       7245      {
             tskcmd.c       7246          // タイムアウトした場合は、非対象ch・成功ch以外エラー
             tskcmd.c       7247          wkA = ( psns.idl | psns.suc );
             tskcmd.c       7248          wkB = ( wkA      ^ 0x0fff   );
             tskcmd.c       7249          wkC = ( wkB      ^ psns.err );
    00004952 D472                   MOV.L       L1393+10,R4; __$psns
    00004954 6241                   MOV.W       @R4,R2     ; psns.idl
    00004956 8541                   MOV.W       @(2,R4),R0 ; psns.suc
    00004958 06000FFF               MOVI20      #4095,R6   ; H'00000FFF
    0000495C 220B                   OR          R0,R2
    0000495E 8542                   MOV.W       @(4,R4),R0 ; psns.err
    00004960 226A                   XOR         R6,R2
    00004962 220A                   XOR         R0,R2
             tskcmd.c       7250          psns.err = wkC;
    00004964 6023                   MOV         R2,R0
             tskcmd.c       7251          
             tskcmd.c       7252          if( ( wkC & 0x0fff ) == 0x0fff )    // 全てエラーは終了
    00004966 2269                   AND         R6,R2
    00004968 622D                   EXTU.W      R2,R2
    0000496A 3260                   CMP/EQ      R6,R2
    0000496C 8F3F                   BF/S        L939
    0000496E 8142                   MOV.W       R0,@(4,R4) ; psns.err
             tskcmd.c       7253          {
             tskcmd.c       7254              result = E_PRES_FAIL;
             tskcmd.c       7255    debug1_flg=0;
    00004970 E200                   MOV         #0,R2      ; H'00000000
    00004972 EB20                   MOV         #32,R11    ; H'00000020
    00004974 D66F                   MOV.L       L1393+34,R6; __$debug1_flg
    00004976 A03E                   BRA         L940
    00004978 2622                   MOV.L       R2,@R6     ; debug1_flg
    0000497A              L937:
             tskcmd.c       7256          }
             tskcmd.c       7257          else
             tskcmd.c       7258          {
             tskcmd.c       7259              result = E_SUCCESS;
             tskcmd.c       7260    
             tskcmd.c       7261    debug1_flg=1;
             tskcmd.c       7262          }
             tskcmd.c       7263      }
             tskcmd.c       7264      else
             tskcmd.c       7265      {
             tskcmd.c       7266          PressDataGet( &psns.now[0] );
    0000497A D46F                   MOV.L       L1393+38,R4; H'00000022+__$psns
    0000497C D26F                   MOV.L       L1393+42,R2; _PressDataGet
    0000497E 424B                   JSR/N       @R2
    00004980 D666                   MOV.L       L1393+10,R6; __$psns
    00004982 8561                   MOV.W       @(2,R6),R0 ; psns.suc
             tskcmd.c       7267    
             tskcmd.c       7268          for( nzl = 0; nzl < NOZZLE_MAX ; nzl++ )
    00004984 E100                   MOV         #0,R1      ; H'00000000
    00004986 2FB2                   MOV.L       R11,@R15
    00004988 6D13                   MOV         R1,R13
    0000498A 6BC2                   MOV.L       @R12,R11   ; pProcAdr
    0000498C 6C03                   MOV         R0,R12
    0000498E 8562                   MOV.W       @(4,R6),R0 ; psns.err
    00004990 6961                   MOV.W       @R6,R9     ; psns.idl
    00004992 D76B                   MOV.L       L1393+46,R7; H'0000003C+__$psns
    00004994 6A03                   MOV         R0,R10
    00004996              L941:
             tskcmd.c       7269          {
             tskcmd.c       7270              if( (psns.idl & sftbit) )
    00004996 62ED                   EXTU.W      R14,R2
    00004998 2928                   TST         R2,R9
    0000499A 8914                   BT          L943
             tskcmd.c       7271              {
             tskcmd.c       7272                  wkA = (psns.suc | psns.err);
             tskcmd.c       7273    
             tskcmd.c       7274                  if(( wkA & sftbit))
    0000499C 66C3                   MOV         R12,R6
    0000499E 26AB                   OR          R10,R6
    000049A0 2628                   TST         R2,R6
    000049A2 8B10                   BF          L943
             tskcmd.c       7275                  {
             tskcmd.c       7276                      // エラーもしくは成功済みの場合は、判定不要
             tskcmd.c       7277                  }
             tskcmd.c       7278                  else
             tskcmd.c       7279                  {
             tskcmd.c       7280                      peekdat = psns.now[nzl];
    000049A4 D464                   MOV.L       L1393+38,R4; H'00000022+__$psns
    000049A6 60D3                   MOV         R13,R0
    000049A8 064D                   MOV.W       @(R0,R4),R6; psns.now[]
    000049AA D566                   MOV.L       L1393+50,R5; __$peekdat
    000049AC 646D                   EXTU.W      R6,R4
    000049AE 2542                   MOV.L       R4,@R5     ; peekdat
             tskcmd.c       7281                      if( peekdat >= pProcAdr->step[actstep].par04 )  // 加圧ピーク越え
    000049B0 66B3                   MOV         R11,R6
    000049B2 7603                   ADD         #3,R6
    000049B4 6083                   MOV         R8,R0
    000049B6 056C                   MOV.B       @(R0,R6),R5; pProcAdr->step[].par04
    000049B8 655C                   EXTU.B      R5,R5
    000049BA 3453                   CMP/GE      R5,R4
    000049BC 8B03                   BF          L943
             tskcmd.c       7282                      {
             tskcmd.c       7283                          psns.suc |= sftbit;
    000049BE 2CEB                   OR          R14,R12
             tskcmd.c       7284                          psns.pek[nzl] = peekdat;// 加圧ピーク登録
    000049C0 2741                   MOV.W       R4,@R7     ; psns.pek[]
    000049C2 D561                   MOV.L       L1393+54,R5; H'00000002+__$psns
    000049C4 25C1                   MOV.W       R12,@R5    ; psns.suc
    000049C6              L943:
    000049C6 7101                   ADD         #1,R1
    000049C8 E60C                   MOV         #12,R6     ; H'0000000C
    000049CA 651C                   EXTU.B      R1,R5
    000049CC 7D02                   ADD         #2,R13
             tskcmd.c       7285                      }
             tskcmd.c       7286                  }
             tskcmd.c       7287              }
             tskcmd.c       7288              sftbit = ( sftbit << 1 );
    000049CE 4220                   SHAL        R2
    000049D0 3563                   CMP/GE      R6,R5
    000049D2 6E23                   MOV         R2,R14
    000049D4 8FDF                   BF/S        L941
    000049D6 7702                   ADD         #2,R7
             tskcmd.c       7289          }
             tskcmd.c       7290          
             tskcmd.c       7291          wkA = (psns.idl | psns.suc | psns.err);
             tskcmd.c       7292          
             tskcmd.c       7293          if( ( wkA & 0x0fff ) == 0x0fff )    // 全て終了
    000049D8 D750                   MOV.L       L1393+10,R7; __$psns
    000049DA 6671                   MOV.W       @R7,R6     ; psns.idl
    000049DC 08000FFF               MOVI20      #4095,R8   ; H'00000FFF
    000049E0 26CB                   OR          R12,R6
    000049E2 26AB                   OR          R10,R6
    000049E4 2689                   AND         R8,R6
    000049E6 626D                   EXTU.W      R6,R2
    000049E8 3280                   CMP/EQ      R8,R2
    000049EA 8F04                   BF/S        L940
    000049EC 6BF2                   MOV.L       @R15,R11
    000049EE              L939:
    000049EE E201                   MOV         #1,R2      ; H'00000001
    000049F0 EB00                   MOV         #0,R11     ; H'00000000
    000049F2 D650                   MOV.L       L1393+34,R6; __$debug1_flg
    000049F4 2622                   MOV.L       R2,@R6     ; debug1_flg
    000049F6              L940:
             tskcmd.c       7294          {
             tskcmd.c       7295              result = E_SUCCESS;
             tskcmd.c       7296    debug1_flg=1;
             tskcmd.c       7297          }
             tskcmd.c       7298      }
             tskcmd.c       7299      return( result );
    000049F6 60B3                   MOV         R11,R0
    000049F8 7F04                   ADD         #4,R15
    000049FA 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       7300    }
    000049FC 006B                   RTS/N
             tskcmd.c       7301    /***********************************************************************
             tskcmd.c       7302    * 
             tskcmd.c       7303    * [概要]  
             tskcmd.c       7304    * [引数]  
             tskcmd.c       7305    * [戻値]  
             tskcmd.c       7306    * 
             tskcmd.c       7307    ***********************************************************************/
             tskcmd.c       7308    static ER RePressureChk()
    000049FE              __$RePressureChk:                ; function: __$RePressureChk
                                                           ; frame size=44
    000049FE 48F0                   MOVMU.L     R8,@-R15
    00004A00 7FF4                   ADD         #-12,R15
             tskcmd.c       7309    {
             tskcmd.c       7310      ER result = E_CONTINUE;
             tskcmd.c       7311      UB nzl;
             tskcmd.c       7312      UB actstep;
             tskcmd.c       7313      UB spdptn;
             tskcmd.c       7314      unsigned short sftbit = 0x0001;
             tskcmd.c       7315      unsigned short wkA = 0x0000;
             tskcmd.c       7316      unsigned short wkB = 0x0000;
             tskcmd.c       7317      unsigned short wkC = 0x0000;
             tskcmd.c       7318    
             tskcmd.c       7319      if( psns.tcnt >= ( 5 * pProcAdr->step[actstep].par07 ))//  Timeout時間(msec) : Tsec * 1000、Interval:200msec、タイムアウトカウント：1000T/200 = 5T
    00004A02 E014                   MOV         #20,R0     ; H'00000014
    00004A04 EBF1                   MOV         #-15,R11   ; H'FFFFFFF1
    00004A06 D148                   MOV.L       L1393+22,R1; H'00000006+__$psns
    00004A08 4680                   MULR        R0,R6
    00004A0A 35119000               MOVU.W      @(0,R1),R5 ; psns.tcnt
    00004A0E D147                   MOV.L       L1393+26,R1; __$pProcAdr
    00004A10 6212                   MOV.L       @R1,R2     ; pProcAdr
    00004A12 6BBC                   EXTU.B      R11,R11
    00004A14 6063                   MOV         R6,R0
    00004A16 7206                   ADD         #6,R2
    00004A18 1F61                   MOV.L       R6,@(4,R15)
    00004A1A 022C                   MOV.B       @(R0,R2),R2; pProcAdr->step[].par07
    00004A1C E005                   MOV         #5,R0      ; H'00000005
    00004A1E 622C                   EXTU.B      R2,R2
    00004A20 4280                   MULR        R0,R2
    00004A22 3523                   CMP/GE      R2,R5
    00004A24 8F11                   BF/S        L949
    00004A26 EC01                   MOV         #1,R12     ; H'00000001
             tskcmd.c       7320      {
             tskcmd.c       7321          // タイムアウトした場合は、非対象ch・成功ch以外エラー
             tskcmd.c       7322          wkA = ( psns.idl | psns.suc );
             tskcmd.c       7323          wkB = ( wkA      ^ 0x0fff   );
             tskcmd.c       7324          wkC = ( wkB      ^ psns.err );
    00004A28 D43C                   MOV.L       L1393+10,R4; __$psns
    00004A2A 6241                   MOV.W       @R4,R2     ; psns.idl
    00004A2C 8541                   MOV.W       @(2,R4),R0 ; psns.suc
    00004A2E 06000FFF               MOVI20      #4095,R6   ; H'00000FFF
    00004A32 220B                   OR          R0,R2
    00004A34 8542                   MOV.W       @(4,R4),R0 ; psns.err
    00004A36 226A                   XOR         R6,R2
    00004A38 220A                   XOR         R0,R2
             tskcmd.c       7325          psns.err = wkC;
    00004A3A 6023                   MOV         R2,R0
             tskcmd.c       7326          
             tskcmd.c       7327          if( ( wkC & 0x0fff ) == 0x0fff )    // 全てエラーは終了
    00004A3C 2269                   AND         R6,R2
    00004A3E 622D                   EXTU.W      R2,R2
    00004A40 3260                   CMP/EQ      R6,R2
    00004A42 8F54                   BF/S        L951
    00004A44 8142                   MOV.W       R0,@(4,R4) ; psns.err
             tskcmd.c       7328          {
             tskcmd.c       7329              result = E_PRES_FAIL;
    00004A46 A053                   BRA         L952
    00004A48 EB20                   MOV         #32,R11    ; H'00000020
    00004A4A              L949:
             tskcmd.c       7330          }
             tskcmd.c       7331          else
             tskcmd.c       7332          {
             tskcmd.c       7333              result = E_SUCCESS;
             tskcmd.c       7334          }
             tskcmd.c       7335      }
             tskcmd.c       7336      else
             tskcmd.c       7337      {
             tskcmd.c       7338          PressDataGet( &psns.now[0] );
    00004A4A D43B                   MOV.L       L1393+38,R4; H'00000022+__$psns
    00004A4C D73B                   MOV.L       L1393+42,R7; _PressDataGet
    00004A4E 474B                   JSR/N       @R7
    00004A50 D532                   MOV.L       L1393+10,R5; __$psns
    00004A52 8551                   MOV.W       @(2,R5),R0 ; psns.suc
             tskcmd.c       7339    
             tskcmd.c       7340          for( nzl = 0; nzl < NOZZLE_MAX ; nzl++ )
    00004A54 E700                   MOV         #0,R7      ; H'00000000
    00004A56 D831                   MOV.L       L1393+10,R8; __$psns
    00004A58 D134                   MOV.L       L1393+26,R1; __$pProcAdr
    00004A5A 3D819000               MOVU.W      @(0,R8),R13; psns.idl
    00004A5E 6212                   MOV.L       @R1,R2     ; pProcAdr
    00004A60 6803                   MOV         R0,R8
    00004A62 5AF1                   MOV.L       @(4,R15),R10
    00004A64 E601                   MOV         #1,R6      ; H'00000001
    00004A66 8552                   MOV.W       @(4,R5),R0 ; psns.err
    00004A68 6923                   MOV         R2,R9
    00004A6A 39AC                   ADD         R10,R9
    00004A6C 1FD2                   MOV.L       R13,@(8,R15)
    00004A6E 6A03                   MOV         R0,R10
    00004A70 2FB2                   MOV.L       R11,@R15
    00004A72 DD31                   MOV.L       L1393+38,R13; H'00000022+__$psns
    00004A74 6B23                   MOV         R2,R11
    00004A76 7905                   ADD         #5,R9
    00004A78 DE31                   MOV.L       L1393+46,R14; H'0000003C+__$psns
    00004A7A              L953:
             tskcmd.c       7341          {
             tskcmd.c       7342              if( (psns.idl & sftbit) )
    00004A7A 52F2                   MOV.L       @(8,R15),R2
    00004A7C 2268                   TST         R6,R2
    00004A7E 891E                   BT          L955
             tskcmd.c       7343              {
             tskcmd.c       7344                  wkA = (psns.suc | psns.err);
             tskcmd.c       7345    
             tskcmd.c       7346                  if(!( wkA & sftbit))
    00004A80 64CD                   EXTU.W      R12,R4
    00004A82 6283                   MOV         R8,R2
    00004A84 22AB                   OR          R10,R2
    00004A86 2248                   TST         R4,R2
    00004A88 8B16                   BF          L957
             tskcmd.c       7347                  {
             tskcmd.c       7348                      if( psns.now[nzl] <= pProcAdr->step[actstep].par06 )    // 減圧したか
    00004A8A 65D1                   MOV.W       @R13,R5    ; psns.now[]
    00004A8C 32918000               MOVU.B      @(0,R9),R2 ; pProcAdr->step[].par06
    00004A90 3526                   CMP/HI      R2,R5
    00004A92 8903                   BT          L959
             tskcmd.c       7349                      {
             tskcmd.c       7350                          psns.suc |= sftbit;
    00004A94 28CB                   OR          R12,R8
    00004A96 D22C                   MOV.L       L1393+54,R2; H'00000002+__$psns
    00004A98 A00E                   BRA         L957
    00004A9A 2281                   MOV.W       R8,@R2     ; psns.suc
    00004A9C              L959:
    00004A9C 50F1                   MOV.L       @(4,R15),R0
    00004A9E 66B3                   MOV         R11,R6
    00004AA0 7607                   ADD         #7,R6
    00004AA2 655D                   EXTU.W      R5,R5
             tskcmd.c       7351                      }
             tskcmd.c       7352                      else if( (psns.pek[nzl]-psns.now[nzl]) >= pProcAdr->step[actstep].par08 )   // 急激に減圧したか
    00004AA4 31E19000               MOVU.W      @(0,R14),R1; psns.pek[]
    00004AA8 026C                   MOV.B       @(R0,R6),R2; pProcAdr->step[].par08
    00004AAA 3158                   SUB         R5,R1
    00004AAC 622C                   EXTU.B      R2,R2
    00004AAE 3123                   CMP/GE      R2,R1
    00004AB0 8B02                   BF          L957
             tskcmd.c       7353                      {
             tskcmd.c       7354                          psns.err |= sftbit;
    00004AB2 2ACB                   OR          R12,R10
    00004AB4 D225                   MOV.L       L1393+58,R2; H'00000004+__$psns
    00004AB6 22A1                   MOV.W       R10,@R2    ; psns.err
    00004AB8              L957:
             tskcmd.c       7355                      }
             tskcmd.c       7356                  }
             tskcmd.c       7357                  sftbit = ( sftbit << 1 );
    00004AB8 4420                   SHAL        R4
    00004ABA 6C43                   MOV         R4,R12
    00004ABC 664D                   EXTU.W      R4,R6
    00004ABE              L955:
    00004ABE 7701                   ADD         #1,R7
    00004AC0 E50C                   MOV         #12,R5     ; H'0000000C
    00004AC2 627C                   EXTU.B      R7,R2
    00004AC4 7E02                   ADD         #2,R14
    00004AC6 3253                   CMP/GE      R5,R2
    00004AC8 8FD7                   BF/S        L953
    00004ACA 7D02                   ADD         #2,R13
    00004ACC 06000FFF               MOVI20      #4095,R6   ; H'00000FFF
             tskcmd.c       7358              }
             tskcmd.c       7359          }
             tskcmd.c       7360    
             tskcmd.c       7361          if( ( psns.err & 0x0fff ) == 0x0fff )   // 全てエラーは終了
    00004AD0 62A3                   MOV         R10,R2
    00004AD2 2269                   AND         R6,R2
    00004AD4 622D                   EXTU.W      R2,R2
    00004AD6 3260                   CMP/EQ      R6,R2
    00004AD8 8F01                   BF/S        L963
    00004ADA 6BF2                   MOV.L       @R15,R11
             tskcmd.c       7362          {
             tskcmd.c       7363              result = E_SUCCESS;
    00004ADC EB00                   MOV         #0,R11     ; H'00000000
    00004ADE              L963:
             tskcmd.c       7364          }
             tskcmd.c       7365          
             tskcmd.c       7366          wkA = (psns.idl | psns.suc | psns.err);
             tskcmd.c       7367          if( ( wkA & 0x0fff ) == 0x0fff )        // 全て終了
    00004ADE DE0F                   MOV.L       L1393+10,R14; __$psns
    00004AE0 65E1                   MOV.W       @R14,R5    ; psns.idl
    00004AE2 258B                   OR          R8,R5
    00004AE4 25AB                   OR          R10,R5
    00004AE6 2569                   AND         R6,R5
    00004AE8 615D                   EXTU.W      R5,R1
    00004AEA 3160                   CMP/EQ      R6,R1
    00004AEC 8B00                   BF          L952
    00004AEE              L951:
    00004AEE EB00                   MOV         #0,R11     ; H'00000000
    00004AF0              L952:
             tskcmd.c       7368          {
             tskcmd.c       7369              result = E_SUCCESS;
             tskcmd.c       7370          }
             tskcmd.c       7371      }
             tskcmd.c       7372      return( result );
    00004AF0 60B3                   MOV         R11,R0
    00004AF2 7F0C                   ADD         #12,R15
    00004AF4 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       7373    }
    00004AF6 006B                   RTS/N
             tskcmd.c       7374    
             tskcmd.c       7375    /***********************************************************************
             tskcmd.c       7376    * 
             tskcmd.c       7377    * [概要]  ウェイト
             tskcmd.c       7378    * [引数]  
             tskcmd.c       7379    * [戻値]  
             tskcmd.c       7380    * 
             tskcmd.c       7381    ***********************************************************************/
             tskcmd.c       7382    static ER  CmdActionWait( T_CMD_MSG* mrcv )
    00004AF8              __$CmdActionWait:                ; function: __$CmdActionWait
                                                           ; frame size=8
    00004AF8 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       7383    {
             tskcmd.c       7384      ER result = E_CONTINUE;
             tskcmd.c       7385      UB bcid;
             tskcmd.c       7386      UB prid1;
             tskcmd.c       7387      UB actstep;
             tskcmd.c       7388      INT waittim;
             tskcmd.c       7389    
             tskcmd.c       7390      switch( pProcDat->Stp )
    00004AFA D715                   MOV.L       L1393+62,R7; __$pProcDat
    00004AFC 6672                   MOV.L       @R7,R6     ; pProcDat
    00004AFE EEF1                   MOV         #-15,R14   ; H'FFFFFFF1
    00004B00 30618002               MOVU.B      @(2,R6),R0 ; (pProcDat)->Stp
    00004B04 2008                   TST         R0,R0
    00004B06 8D25                   BT/S        L970
    00004B08 6EEC                   EXTU.B      R14,R14
    00004B0A 8801                   CMP/EQ      #1,R0
    00004B0C 8940                   BT          L971
    00004B0E A040                   BRA         L972
    00004B10 0009                   NOP
    00004B12              L1393:
    00004B12 00000002               .RES.W      1
    00004B14 <00000000>             .DATA.L     __$vout
    00004B18 <00000000>             .DATA.L     _mbx_send
    00004B1C <00000000>             .DATA.L     __$psns
    00004B20 <00000000>             .DATA.L     __$WaitAction
    00004B24 <00000000>             .DATA.L     _pio_BOUT
    00004B28 <00000006>             .DATA.L     H'00000006+__$psns
    00004B2C <00000000>             .DATA.L     __$pProcAdr
    00004B30 <00000000>             .DATA.L     __$PressStatus
    00004B34 <00000000>             .DATA.L     __$debug1_flg
    00004B38 <00000022>             .DATA.L     H'00000022+__$psns
    00004B3C <00000000>             .DATA.L     _PressDataGet
    00004B40 <0000003C>             .DATA.L     H'0000003C+__$psns
    00004B44 <00000000>             .DATA.L     __$peekdat
    00004B48 <00000002>             .DATA.L     H'00000002+__$psns
    00004B4C <00000004>             .DATA.L     H'00000004+__$psns
    00004B50 <00000000>             .DATA.L     __$pProcDat
    00004B54              L970:
             tskcmd.c       7391      {
             tskcmd.c       7392      case 0: // 1. ウェイト時間設定後、タイマスタート
             tskcmd.c       7393          bcid    = mrcv->msgdata.bcid;
    00004B54 3541801A               MOVU.B      @(26,R4),R5; (mrcv)->bcid
             tskcmd.c       7394          prid1   = mrcv->msgdata.prid1;
             tskcmd.c       7395          actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       7396          waittim = ( pProcAdr->step[actstep].par03 * 60 * 1000 ) / DLY_10M ;// 10msec周期
             tskcmd.c       7397    
             tskcmd.c       7398          WaitAction( prid1, bcid, waittim );
    00004B58 D224                   MOV.L       L1001+2,R2 ; H'00000002+__$bcctrl
    00004B5A 6053                   MOV         R5,R0
    00004B5C 4008                   SHLL2       R0
    00004B5E 4000                   SHLL        R0
    00004B60 012C                   MOV.B       @(R0,R2),R1; bcctrl[].actstp
    00004B62 E014                   MOV         #20,R0     ; H'00000014
    00004B64 D722                   MOV.L       L1001+6,R7 ; __$pProcAdr
    00004B66 71FF                   ADD         #-1,R1
    00004B68 6272                   MOV.L       @R7,R2     ; pProcAdr
    00004B6A 611C                   EXTU.B      R1,R1
    00004B6C 4180                   MULR        R0,R1
    00004B6E 7202                   ADD         #2,R2
    00004B70 34414018               MOV.B       @(24:12,R4),R4; (mrcv)->prid1
    00004B74 6013                   MOV         R1,R0
    00004B76 022C                   MOV.B       @(R0,R2),R2; pProcAdr->step[].par03
    00004B78 00001770               MOVI20      #6000,R0   ; H'00001770
    00004B7C 662C                   EXTU.B      R2,R6
    00004B7E D31D                   MOV.L       L1001+10,R3; __$WaitAction
    00004B80 430B                   JSR         @R3
    00004B82 4680                   MULR        R0,R6
             tskcmd.c       7399          pProcDat->Stp++;
    00004B84 D41C                   MOV.L       L1001+14,R4; __$pProcDat
    00004B86 6142                   MOV.L       @R4,R1     ; pProcDat
    00004B88 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00004B8A 7001                   ADD         #1,R0
    00004B8C A001                   BRA         L972
    00004B8E 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00004B90              L971:
             tskcmd.c       7400          break;
             tskcmd.c       7401    
             tskcmd.c       7402      case 1: // 2. ウェイト終了待ち
             tskcmd.c       7403          result = E_SUCCESS;
    00004B90 EE00                   MOV         #0,R14     ; H'00000000
    00004B92              L972:
             tskcmd.c       7404          break;
             tskcmd.c       7405      }
             tskcmd.c       7406      return( result );
    00004B92 60E3                   MOV         R14,R0
    00004B94 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       7407    }
    00004B96 006B                   RTS/N
             tskcmd.c       7408    /***********************************************************************
             tskcmd.c       7409    * 
             tskcmd.c       7410    * [概要]  攪拌
             tskcmd.c       7411    * [引数]  
             tskcmd.c       7412    * [戻値]  
             tskcmd.c       7413    * 
             tskcmd.c       7414    
             tskcmd.c       7415    
             tskcmd.c       7416    // 3．分注Z軸｢撹拌吸引高さ｣位置移動
             tskcmd.c       7417    // 4．撹拌容量＋余剰量分（初回のみ）を吸引と同時に分注Z軸を下降させる。
             tskcmd.c       7418    // 5．吸引後ウェイト
             tskcmd.c       7419    // 6．現在の分注Z軸位置から撹拌容量を吐出と同時に分注Z軸上昇させる。
             tskcmd.c       7420    // 7．撹拌容量を吐出　※攪拌最終回の吐出時のみ余剰量分も含め吐出
             tskcmd.c       7421    // 8．吐出後ウェイト
             tskcmd.c       7422    // 9．｢4〜8｣を設定回数繰り返す
             tskcmd.c       7423    // 10．分注Z軸ブローアウト高さ位置移動
             tskcmd.c       7424    // 11．ポンプリセット
             tskcmd.c       7425    // 12．分注Z軸チップタッチ位置移動  (チップタッチ有り)
             tskcmd.c       7426    // 13．分注Z軸ホームポジション移動
             tskcmd.c       7427    //***********************************************************************/
             tskcmd.c       7428    
             tskcmd.c       7429    static ER  CmdActionMix( T_CMD_MSG* mrcv )
    00004B98              __$CmdActionMix:                 ; function: __$CmdActionMix
                                                           ; frame size=400
    00004B98 49F0                   MOVMU.L     R9,@-R15
    00004B9A 03F0FEAC               MOVI20      #-340,R3   ; H'FFFFFEAC
    00004B9E 3F3C                   ADD         R3,R15
             tskcmd.c       7430    {
             tskcmd.c       7431      ST_HOSEI_PTN *adr;
             tskcmd.c       7432      ER result = E_CONTINUE;
    00004BA0 E149                   MOV         #73,R1     ; H'00000049
    00004BA2 EDF1                   MOV         #-15,R13   ; H'FFFFFFF1
    00004BA4 4108                   SHLL2       R1
             tskcmd.c       7433      INT tskid;
             tskcmd.c       7434      UB prid1;
             tskcmd.c       7435      UB bcid;
             tskcmd.c       7436      UB msgid;
             tskcmd.c       7437      UB inf1;
             tskcmd.c       7438      UB inf2;
             tskcmd.c       7439      UB actstep;
             tskcmd.c       7440      UB spdptn;
             tskcmd.c       7441      UB devno;
             tskcmd.c       7442      UB movptn;
             tskcmd.c       7443      UB dummy;
             tskcmd.c       7444      unsigned short cntwk;
             tskcmd.c       7445      INT movval;
             tskcmd.c       7446      INT value;
             tskcmd.c       7447    
             tskcmd.c       7448      UB  z_sucdn;// par4  bit7〜bit4：[Z]吸引下降速度パターン
             tskcmd.c       7449      UB  p_sucsp;// par4  bit3〜bit0：[P]吸引速度パターン
             tskcmd.c       7450      UB  z_sucup;// par5  bit7〜bit4：[Z]吐出上昇速度パターン
             tskcmd.c       7451      UB  p_putsp;// par5  bit3〜bit0：[P]吐出速度パターン
             tskcmd.c       7452      UB  staposi;// par6  [Z]攪拌開始位置ポジション番号
             tskcmd.c       7453      UB  endposi;// par7  [Z]攪拌終了位置ポジション番号
             tskcmd.c       7454      INT mixcnt; // par1  bit5〜bit0：攪拌回数
             tskcmd.c       7455      INT zancnt;
             tskcmd.c       7456      INT stahei;// par6   [Z]攪拌開始位置
             tskcmd.c       7457      INT endhei;// par7   [Z]攪拌終了位置
             tskcmd.c       7458      INT sucval;// par13  [P}吸引量
             tskcmd.c       7459      INT putval;// par14  [P}吐出量
             tskcmd.c       7460      
             tskcmd.c       7461      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       7462      bcid  = mrcv->msgdata.bcid;
    00004BA6 3541801A               MOVU.B      @(26,R4),R5; (mrcv)->bcid
    00004BAA 31FC                   ADD         R15,R1
    00004BAC 6DDC                   EXTU.B      R13,R13
             tskcmd.c       7463      inf1  = mrcv->msgdata.inf;
             tskcmd.c       7464      inf2  = mrcv->msgdata.inf2;
             tskcmd.c       7465      actstep = bcctrl[bcid].actstp - 1 ;
             tskcmd.c       7466      
             tskcmd.c       7467      switch( pProcDat->Stp )
    00004BAE D912                   MOV.L       L1001+14,R9; __$pProcDat
    00004BB0 6053                   MOV         R5,R0
    00004BB2 8018                   MOV.B       R0,@(8,R1) ; bcid
    00004BB4 4008                   SHLL2       R0
    00004BB6 6792                   MOV.L       @R9,R7     ; pProcDat
    00004BB8 D20C                   MOV.L       L1001+2,R2 ; H'00000002+__$bcctrl
    00004BBA 4000                   SHLL        R0
    00004BBC 2142                   MOV.L       R4,@R1     ; mrcv
    00004BBE 11D1                   MOV.L       R13,@(4,R1); result
    00004BC0 012C                   MOV.B       @(R0,R2),R1; bcctrl[].actstp
    00004BC2 E20F                   MOV         #15,R2     ; H'0000000F
    00004BC4 36718002               MOVU.B      @(2,R7),R6 ; (pProcDat)->Stp
    00004BC8 71FF                   ADD         #-1,R1
    00004BCA 3626                   CMP/HI      R2,R6
    00004BCC 3A418018               MOVU.B      @(24,R4),R10; (mrcv)->prid1
    00004BD0 3B41801C               MOVU.B      @(28,R4),R11; (mrcv)->inf
    00004BD4 3C41801D               MOVU.B      @(29,R4),R12; (mrcv)->inf2
    00004BD8 8F02                   BF/S        L1429
    00004BDA 6E1C                   EXTU.B      R1,R14
    00004BDC A4CD                   BRA         L1000
    00004BDE 0009                   NOP
    00004BE0              L1429:
    00004BE0 4600                   SHLL        R6
    00004BE2 C706                   MOVA        L1002,R0
    00004BE4 006D                   MOV.W       @(R0,R6),R0
    00004BE6 0023                   BRAF        R0
    00004BE8 0009                   NOP
    00004BEA              L1001:
    00004BEA 00000002               .RES.W      1
    00004BEC <00000002>             .DATA.L     H'00000002+__$bcctrl
    00004BF0 <00000000>             .DATA.L     __$pProcAdr
    00004BF4 <00000000>             .DATA.L     __$WaitAction
    00004BF8 <00000000>             .DATA.L     __$pProcDat
    00004BFC              L1002:
    00004BFC 0032                   .DATA.W     L975-L1001
    00004BFE 005E                   .DATA.W     L976-L1001
    00004C00 010A                   .DATA.W     L977-L1001
    00004C02 016E                   .DATA.W     L978-L1001
    00004C04 0258                   .DATA.W     L979-L1001
    00004C06 03A6                   .DATA.W     L980-L1001
    00004C08 055A                   .DATA.W     L981-L1001
    00004C0A 05C2                   .DATA.W     L982-L1001
    00004C0C 0778                   .DATA.W     L983-L1001
    00004C0E 0794                   .DATA.W     L984-L1001
    00004C10 08D2                   .DATA.W     L991-L1001
    00004C12 07F0                   .DATA.W     L992-L1001
    00004C14 07DA                   .DATA.W     L993-L1001
    00004C16 07E4                   .DATA.W     L994-L1001
    00004C18 0960                   .DATA.W     L995-L1001
    00004C1A 07D0                   .DATA.W     L996-L1001
    00004C1C              L975:
             tskcmd.c       7468      {
             tskcmd.c       7469      case 0: // [攪拌処理] 
             tskcmd.c       7470          z_sucdn = ((pProcAdr->step[actstep].par05 >> 4) & 0x0f);
             tskcmd.c       7471          p_sucsp = ((pProcAdr->step[actstep].par05 >> 0) & 0x0f);
             tskcmd.c       7472          z_sucup = ((pProcAdr->step[actstep].par05 >> 4) & 0x0f);
             tskcmd.c       7473          p_putsp = ((pProcAdr->step[actstep].par05 >> 0) & 0x0f);
             tskcmd.c       7474          stahei  = GetPosiData( pProcAdr->step[actstep].par07 );
    00004C1C E014                   MOV         #20,R0     ; H'00000014
    00004C1E 4E80                   MULR        R0,R14
    00004C20 D6C5                   MOV.L       L1394,R6   ; __$pProcAdr
    00004C22 6462                   MOV.L       @R6,R4     ; pProcAdr
    00004C24 7406                   ADD         #6,R4
    00004C26 60E3                   MOV         R14,R0
    00004C28 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par07
    00004C2A 3FE1204C               MOV.L       R14,@(304:12,R15)
    00004C2E D3C3                   MOV.L       L1394+4,R3 ; __$GetPosiData
    00004C30 434B                   JSR/N       @R3
             tskcmd.c       7475          endhei  = GetPosiData( pProcAdr->step[actstep].par08 );
    00004C32 D7C1                   MOV.L       L1394,R7   ; __$pProcAdr
    00004C34 6472                   MOV.L       @R7,R4     ; pProcAdr
    00004C36 60E3                   MOV         R14,R0
    00004C38 7407                   ADD         #7,R4
    00004C3A D3C0                   MOV.L       L1394+4,R3 ; __$GetPosiData
    00004C3C 430B                   JSR         @R3
    00004C3E 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par08
             tskcmd.c       7476          sucval  = pProcAdr->step[actstep].par13;
             tskcmd.c       7477          putval  = pProcAdr->step[actstep].par14;
             tskcmd.c       7478          
             tskcmd.c       7479          pProcDat->Stp++;
    00004C40 6A92                   MOV.L       @R9,R10    ; pProcDat
    00004C42 84A2                   MOV.B       @(2,R10),R0; (pProcDat)->Stp
    00004C44 7001                   ADD         #1,R0
    00004C46 80A2                   MOV.B       R0,@(2,R10); (pProcDat)->Stp
    00004C48              L976:
    00004C48 D1BD                   MOV.L       L1394+8,R1 ; H'00000006+__$SpPtn
    00004C4A 3E118000               MOVU.B      @(0,R1),R14; SpPtn.Z0_SpdNmlPtn
    00004C4E E00C                   MOV         #12,R0     ; H'0000000C
    00004C50 4E80                   MULR        R0,R14
             tskcmd.c       7480          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7481          
             tskcmd.c       7482          
             tskcmd.c       7483      case 1:// [攪拌処理] 1．ブローアウトエア高さ（退避高さ）移動
             tskcmd.c       7484          MAC_SPEED_SET( MT_Z0, 
    00004C52 DBBC                   MOV.L       L1394+12,R11; H'00000078+__$Sp
    00004C54 DCBC                   MOV.L       L1394+16,R12; __$Sp
    00004C56 60E3                   MOV         R14,R0
    00004C58 04BD                   MOV.W       @(R0,R11),R4; Sp[].ac
    00004C5A 6AC3                   MOV         R12,R10
    00004C5C 3F411002               MOV.W       R4,@(4:12,R15); mp.accel_type
    00004C60 D1BA                   MOV.L       L1394+20,R1; _GetFactor
    00004C62 410B                   JSR         @R1
    00004C64 E403                   MOV         #3,R4      ; H'00000003
    00004C66 D2B6                   MOV.L       L1394+8,R2 ; H'00000006+__$SpPtn
    00004C68 35218000               MOVU.B      @(0,R2),R5 ; SpPtn.Z0_SpdNmlPtn
    00004C6C 2F02                   MOV.L       R0,@R15    ; mp.factor
    00004C6E E00C                   MOV         #12,R0     ; H'0000000C
    00004C70 4580                   MULR        R0,R5
    00004C72 E280                   MOV         #-128,R2   ; H'FFFFFF80
    00004C74 67C3                   MOV         R12,R7
    00004C76 622C                   EXTU.B      R2,R2
    00004C78 7C7A                   ADD         #122,R12
    00004C7A 777C                   ADD         #124,R7
    00004C7C 3A2C                   ADD         R2,R10
    00004C7E 6053                   MOV         R5,R0
    00004C80 0BCD                   MOV.W       @(R0,R12),R11; Sp[].gl
    00004C82 017E                   MOV.L       @(R0,R7),R1; Sp[].fl
    00004C84 E400                   MOV         #0,R4      ; H'00000000
    00004C86 05AE                   MOV.L       @(R0,R10),R5; Sp[].fh
    00004C88 6BBD                   EXTU.W      R11,R11
    00004C8A 1F12                   MOV.L       R1,@(8,R15); mp.FL
    00004C8C 1F53                   MOV.L       R5,@(12,R15); mp.FH
    00004C8E 1FB4                   MOV.L       R11,@(16,R15); mp.utime
    00004C90 1FB5                   MOV.L       R11,@(20,R15); mp.dtime
    00004C92 1F46                   MOV.L       R4,@(24,R15); mp.us
    00004C94 1F47                   MOV.L       R4,@(28,R15); mp.ds
    00004C96 7FE0                   ADD         #-32,R15
    00004C98 6CF3                   MOV         R15,R12
    00004C9A 7C20                   ADD         #32,R12
    00004C9C 57C3                   MOV.L       @(12,R12),R7; (part of)mp
    00004C9E E402                   MOV         #2,R4      ; H'00000002
    00004CA0 6EC2                   MOV.L       @R12,R14   ; (part of)mp
    00004CA2 55C1                   MOV.L       @(4,R12),R5; (part of)mp
    00004CA4 51C2                   MOV.L       @(8,R12),R1; (part of)mp
    00004CA6 1F73                   MOV.L       R7,@(12,R15)
    00004CA8 52C4                   MOV.L       @(16,R12),R2; (part of)mp
    00004CAA 5AC5                   MOV.L       @(20,R12),R10; (part of)mp
    00004CAC 57C6                   MOV.L       @(24,R12),R7; (part of)mp
    00004CAE 5BC7                   MOV.L       @(28,R12),R11; (part of)mp
    00004CB0 2FE2                   MOV.L       R14,@R15
    00004CB2 1F51                   MOV.L       R5,@(4,R15)
    00004CB4 1F12                   MOV.L       R1,@(8,R15)
    00004CB6 1F24                   MOV.L       R2,@(16,R15)
    00004CB8 1FA5                   MOV.L       R10,@(20,R15)
    00004CBA 1F76                   MOV.L       R7,@(24,R15)
    00004CBC DCA4                   MOV.L       L1394+24,R12; _motor_SET
    00004CBE 4C0B                   JSR         @R12
    00004CC0 1FB7                   MOV.L       R11,@(28,R15)
    00004CC2 7F20                   ADD         #32,R15
             tskcmd.c       7485                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].ac, 
             tskcmd.c       7486                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fl, 
             tskcmd.c       7487                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fh, 
             tskcmd.c       7488                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].gl );
             tskcmd.c       7489    
             tskcmd.c       7490          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, BkP7.Z0_Taihi );
    00004CC4 DAA3                   MOV.L       L1394+28,R10; H'00000018+__$BkP7
    00004CC6 6EA2                   MOV.L       @R10,R14   ; BkP7.Z0_Taihi
    00004CC8 2FE6                   MOV.L       R14,@-R15
    00004CCA E700                   MOV         #0,R7      ; H'00000000
    00004CCC 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00004CD0 E602                   MOV         #2,R6      ; H'00000002
    00004CD2 D3A1                   MOV.L       L1394+32,R3; __$AbsmvAction
    00004CD4 430B                   JSR         @R3
    00004CD6 E451                   MOV         #81,R4     ; H'00000051
    00004CD8 6203                   MOV         R0,R2
    00004CDA 7F04                   ADD         #4,R15
    00004CDC 6603                   MOV         R0,R6
    00004CDE E04A                   MOV         #74,R0     ; H'0000004A
    00004CE0 4008                   SHLL2       R0
             tskcmd.c       7491          if( result == E_SUCCESS ) result = E_CONTINUE;
    00004CE2 2228                   TST         R2,R2
    00004CE4 8F01                   BF/S        L1006
    00004CE6 0F66                   MOV.L       R6,@(R0,R15); result
    00004CE8 0FD6                   MOV.L       R13,@(R0,R15); result
    00004CEA              L1006:
             tskcmd.c       7492          pProcDat->Stp++;
    00004CEA 6692                   MOV.L       @R9,R6     ; pProcDat
    00004CEC 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004CEE 7001                   ADD         #1,R0
    00004CF0 A443                   BRA         L1000
    00004CF2 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004CF4              L977:
             tskcmd.c       7493          break;
             tskcmd.c       7494    
             tskcmd.c       7495      case 2:// [攪拌処理] 2．圧力基板制御：未指定のノズルチャンネルの電磁弁をONにする
             tskcmd.c       7496          psns.suc  = 0;
    00004CF4 E000                   MOV         #0,R0      ; H'00000000
    00004CF6 DD99                   MOV.L       L1394+36,R13; H'00000002+__$psns
    00004CF8 2D01                   MOV.W       R0,@R13    ; psns.suc
    00004CFA DD99                   MOV.L       L1394+40,R13; H'00000001+__$psel
    00004CFC 64D0                   MOV.B       @R13,R4    ; psel.smp
             tskcmd.c       7497          psns.idl  = IdleBitSet(psel.smp);
    00004CFE D199                   MOV.L       L1394+44,R1; _IdleBitSet
    00004D00 410B                   JSR         @R1
    00004D02 ED04                   MOV         #4,R13     ; H'00000004
    00004D04 DE98                   MOV.L       L1394+48,R14; __$psns
    00004D06 2E01                   MOV.W       R0,@R14    ; psns.idl
             tskcmd.c       7498          psns.tcnt = 0;
    00004D08 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       7499    
             tskcmd.c       7500    //        memcpy( &psns.pre[0], &psns.now[0], (NOZZLE_MAX*2) );
             tskcmd.c       7501          vout.target = 0x0fff;
    00004D0A 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    00004D0E D197                   MOV.L       L1394+52,R1; __$vout
    00004D10 81E3                   MOV.W       R0,@(6,R14); psns.tcnt
    00004D12 2141                   MOV.W       R4,@R1     ; vout.target
    00004D14 3F41109A               MOV.W       R4,@(308:12,R15)
             tskcmd.c       7502          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
    00004D18 D395                   MOV.L       L1394+56,R3; __$NzlTargetGet
    00004D1A 434B                   JSR/N       @R3
    00004D1C 6703                   MOV         R0,R7
    00004D1E 30F1509A               MOV.W       @(308:12,R15),R0
    00004D22 D294                   MOV.L       L1394+60,R2; H'00000002+__$vout
    00004D24 207A                   XOR         R7,R0
    00004D26 2201                   MOV.W       R0,@R2     ; vout.valout
    00004D28 2FD6                   MOV.L       R13,@-R15
    00004D2A DE90                   MOV.L       L1394+52,R14; __$vout
    00004D2C 2FE6                   MOV.L       R14,@-R15
    00004D2E 2FC6                   MOV.L       R12,@-R15
    00004D30 2FB6                   MOV.L       R11,@-R15
    00004D32 EE9B                   MOV         #-101,R14  ; H'FFFFFF9B
    00004D34 6EEC                   EXTU.B      R14,R14
    00004D36 2FE6                   MOV.L       R14,@-R15
    00004D38 7FFC                   ADD         #-4,R15
    00004D3A E60D                   MOV         #13,R6     ; H'0000000D
    00004D3C 3BF18144               MOVU.B      @(324,R15),R11; bcid
    00004D40 E50C                   MOV         #12,R5     ; H'0000000C
    00004D42 6463                   MOV         R6,R4
    00004D44 2FB2                   MOV.L       R11,@R15
    00004D46 D28C                   MOV.L       L1394+64,R2; _mbx_send
    00004D48 420B                   JSR         @R2
    00004D4A 67A3                   MOV         R10,R7
    00004D4C 7F18                   ADD         #24,R15
             tskcmd.c       7503          
             tskcmd.c       7504          mbx_send    (
             tskcmd.c       7505                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7506                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7507                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7508                          prid1,               // prid1
             tskcmd.c       7509                          bcid,                // bcid
             tskcmd.c       7510                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       7511                          inf1,                // sts
             tskcmd.c       7512                          inf2,                // sts2
             tskcmd.c       7513                          (UB *)&vout.target,  // data
             tskcmd.c       7514                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7515                      );
             tskcmd.c       7516          pProcDat->Stp++;
    00004D4E 6592                   MOV.L       @R9,R5     ; pProcDat
    00004D50 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00004D52 7001                   ADD         #1,R0
    00004D54 A411                   BRA         L1000
    00004D56 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00004D58              L978:
             tskcmd.c       7517          break;
             tskcmd.c       7518          
             tskcmd.c       7519      case 3:// [攪拌処理] 3．P軸ブローアウトエア吸引速度設定
             tskcmd.c       7520          // ブローアウトエア吸引
             tskcmd.c       7521          devno  = MT_P0;
             tskcmd.c       7522          spdptn = SpPtn.P0_SpdMovAirS;
    00004D58 D188                   MOV.L       L1394+68,R1; H'0000000A+__$SpPtn
    00004D5A 6010                   MOV.B       @R1,R0     ; SpPtn.P0_SpdMovAirS
    00004D5C D188                   MOV.L       L1394+72,R1; H'000000B4+__$Sp
    00004D5E 3F010138               MOV.B       R0,@(312:12,R15); spdptn
             tskcmd.c       7523          MAC_SPEED_SET( devno, 
    00004D62 670C                   EXTU.B      R0,R7
    00004D64 E00C                   MOV         #12,R0     ; H'0000000C
    00004D66 4780                   MULR        R0,R7
    00004D68 6073                   MOV         R7,R0
    00004D6A 041D                   MOV.W       @(R0,R1),R4; Sp[].ac
    00004D6C 3F411012               MOV.W       R4,@(36:12,R15); mp.accel_type
    00004D70 D176                   MOV.L       L1394+20,R1; _GetFactor
    00004D72 410B                   JSR         @R1
    00004D74 E403                   MOV         #3,R4      ; H'00000003
    00004D76 36F18138               MOVU.B      @(312,R15),R6; spdptn
    00004D7A 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00004D7C E00C                   MOV         #12,R0     ; H'0000000C
    00004D7E 4680                   MULR        R0,R6
    00004D80 E5B8                   MOV         #-72,R5    ; H'FFFFFFB8
    00004D82 E2BC                   MOV         #-68,R2    ; H'FFFFFFBC
    00004D84 D170                   MOV.L       L1394+16,R1; __$Sp
    00004D86 655C                   EXTU.B      R5,R5
    00004D88 622C                   EXTU.B      R2,R2
    00004D8A 6413                   MOV         R1,R4
    00004D8C 345C                   ADD         R5,R4
    00004D8E 6513                   MOV         R1,R5
    00004D90 352C                   ADD         R2,R5
    00004D92 6063                   MOV         R6,R0
    00004D94 074E                   MOV.L       @(R0,R4),R7; Sp[].fl
    00004D96 045E                   MOV.L       @(R0,R5),R4; Sp[].fh
    00004D98 E5B6                   MOV         #-74,R5    ; H'FFFFFFB6
    00004D9A 655C                   EXTU.B      R5,R5
    00004D9C 1F7A                   MOV.L       R7,@(40,R15); mp.FL
    00004D9E 315C                   ADD         R5,R1
    00004DA0 1F4B                   MOV.L       R4,@(44,R15); mp.FH
    00004DA2 071D                   MOV.W       @(R0,R1),R7; Sp[].gl
    00004DA4 677D                   EXTU.W      R7,R7
    00004DA6 1F7C                   MOV.L       R7,@(48,R15); mp.utime
    00004DA8 1F7D                   MOV.L       R7,@(52,R15); mp.dtime
    00004DAA E700                   MOV         #0,R7      ; H'00000000
    00004DAC 1F7E                   MOV.L       R7,@(56,R15); mp.us
    00004DAE 1F7F                   MOV.L       R7,@(60,R15); mp.ds
    00004DB0 7FE0                   ADD         #-32,R15
    00004DB2 67F3                   MOV         R15,R7
    00004DB4 7740                   ADD         #64,R7
    00004DB6 5271                   MOV.L       @(4,R7),R2 ; (part of)mp
    00004DB8 5672                   MOV.L       @(8,R7),R6 ; (part of)mp
    00004DBA 1F21                   MOV.L       R2,@(4,R15)
    00004DBC 1F62                   MOV.L       R6,@(8,R15)
    00004DBE 5274                   MOV.L       @(16,R7),R2; (part of)mp
    00004DC0 5675                   MOV.L       @(20,R7),R6; (part of)mp
    00004DC2 6172                   MOV.L       @R7,R1     ; (part of)mp
    00004DC4 5573                   MOV.L       @(12,R7),R5; (part of)mp
    00004DC6 1F24                   MOV.L       R2,@(16,R15)
    00004DC8 1F65                   MOV.L       R6,@(20,R15)
    00004DCA 5676                   MOV.L       @(24,R7),R6; (part of)mp
    00004DCC 5277                   MOV.L       @(28,R7),R2; (part of)mp
    00004DCE 2F12                   MOV.L       R1,@R15
    00004DD0 1F53                   MOV.L       R5,@(12,R15)
    00004DD2 1F66                   MOV.L       R6,@(24,R15)
    00004DD4 1F27                   MOV.L       R2,@(28,R15)
    00004DD6 D25E                   MOV.L       L1394+24,R2; _motor_SET
    00004DD8 420B                   JSR         @R2
    00004DDA E403                   MOV         #3,R4      ; H'00000003
    00004DDC 7F20                   ADD         #32,R15
             tskcmd.c       7524                         Sp[devno][spdptn].ac, 
             tskcmd.c       7525                         Sp[devno][spdptn].fl, 
             tskcmd.c       7526                         Sp[devno][spdptn].fh, 
             tskcmd.c       7527                         Sp[devno][spdptn].gl );
             tskcmd.c       7528          value = BlowoutAirValue( (ST_HOSEI_PTN *)&pProcAdr->step[actstep] );
    00004DDE E014                   MOV         #20,R0     ; H'00000014
    00004DE0 4E80                   MULR        R0,R14
    00004DE2 D255                   MOV.L       L1394,R2   ; __$pProcAdr
    00004DE4 6422                   MOV.L       @R2,R4     ; pProcAdr
    00004DE6 D367                   MOV.L       L1394+76,R3; __$BlowoutAirValue
    00004DE8 430B                   JSR         @R3
    00004DEA 34EC                   ADD         R14,R4
             tskcmd.c       7529          result = RelmvAction( ID_TPL_PRTCL, bcid, MT_P0, REQ_STAUD, value );
    00004DEC 2F06                   MOV.L       R0,@-R15
    00004DEE E700                   MOV         #0,R7      ; H'00000000
    00004DF0 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00004DF4 E451                   MOV         #81,R4     ; H'00000051
    00004DF6 D364                   MOV.L       L1394+80,R3; __$RelmvAction
    00004DF8 430B                   JSR         @R3
    00004DFA E603                   MOV         #3,R6      ; H'00000003
    00004DFC 6E03                   MOV         R0,R14
    00004DFE 7F04                   ADD         #4,R15
    00004E00 6603                   MOV         R0,R6
    00004E02 E04A                   MOV         #74,R0     ; H'0000004A
    00004E04 4008                   SHLL2       R0
             tskcmd.c       7530          if( result == E_SUCCESS ) result = E_CONTINUE;
    00004E06 2EE8                   TST         R14,R14
    00004E08 8F01                   BF/S        L1010
    00004E0A 0F66                   MOV.L       R6,@(R0,R15); result
    00004E0C 0FD6                   MOV.L       R13,@(R0,R15); result
    00004E0E              L1010:
             tskcmd.c       7531    
             tskcmd.c       7532          mbx_send    (
             tskcmd.c       7533                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7534                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7535                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7536                          prid1,               // prid1
             tskcmd.c       7537                          bcid,                // bcid
             tskcmd.c       7538                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7539                          inf1,                // sts
             tskcmd.c       7540                          inf2,                // sts2
             tskcmd.c       7541                          &dummy,              // data
             tskcmd.c       7542                          sizeof( dummy )      // siz
             tskcmd.c       7543                      );
    00004E0E E701                   MOV         #1,R7      ; H'00000001
    00004E10 2F76                   MOV.L       R7,@-R15
    00004E12 6DF3                   MOV         R15,R13
    00004E14 7D44                   ADD         #68,R13
    00004E16 2FD6                   MOV.L       R13,@-R15
    00004E18 2FC6                   MOV.L       R12,@-R15
    00004E1A 2FB6                   MOV.L       R11,@-R15
    00004E1C E299                   MOV         #-103,R2   ; H'FFFFFF99
    00004E1E 622C                   EXTU.B      R2,R2
    00004E20 2F26                   MOV.L       R2,@-R15
    00004E22 7FFC                   ADD         #-4,R15
    00004E24 E60D                   MOV         #13,R6     ; H'0000000D
    00004E26 31F18144               MOVU.B      @(324,R15),R1; bcid
    00004E2A E50C                   MOV         #12,R5     ; H'0000000C
    00004E2C 6463                   MOV         R6,R4
    00004E2E 2F12                   MOV.L       R1,@R15
    00004E30 DE51                   MOV.L       L1394+64,R14; _mbx_send
    00004E32 4E0B                   JSR         @R14
    00004E34 67A3                   MOV         R10,R7
    00004E36 7F18                   ADD         #24,R15
             tskcmd.c       7544          pProcDat->Stp++;
    00004E38 6492                   MOV.L       @R9,R4     ; pProcDat
    00004E3A 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    00004E3C 7001                   ADD         #1,R0
    00004E3E A39C                   BRA         L1000
    00004E40 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00004E42              L979:
             tskcmd.c       7545          break;
             tskcmd.c       7546          
             tskcmd.c       7547      case 4: // [攪拌処理]  4．分注Z軸｢撹拌吸引高さ｣位置移動
             tskcmd.c       7548          if( tskid == ID_TSK_PUNIT )
    00004E42 6023                   MOV         R2,R0
    00004E44 880D                   CMP/EQ      #13,R0
    00004E46 8B12                   BF          L1013
             tskcmd.c       7549          {
             tskcmd.c       7550              // ★圧力監視記述
             tskcmd.c       7551              
             tskcmd.c       7552              
             tskcmd.c       7553              mbx_send    (
             tskcmd.c       7554                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7555                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7556                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7557                              prid1,               // prid1
             tskcmd.c       7558                              bcid,                // bcid
             tskcmd.c       7559                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7560                              inf1,                // sts
             tskcmd.c       7561                              inf2,                // sts2
             tskcmd.c       7562                              &dummy,              // data
             tskcmd.c       7563                              sizeof( dummy )      // siz
             tskcmd.c       7564                          );
    00004E48 E601                   MOV         #1,R6      ; H'00000001
    00004E4A 2F66                   MOV.L       R6,@-R15
    00004E4C 67F3                   MOV         R15,R7
    00004E4E 7744                   ADD         #68,R7
    00004E50 2F76                   MOV.L       R7,@-R15
    00004E52 2FC6                   MOV.L       R12,@-R15
    00004E54 2FB6                   MOV.L       R11,@-R15
    00004E56 EB99                   MOV         #-103,R11  ; H'FFFFFF99
    00004E58 6BBC                   EXTU.B      R11,R11
    00004E5A 2FB6                   MOV.L       R11,@-R15
    00004E5C 2F56                   MOV.L       R5,@-R15
    00004E5E E60D                   MOV         #13,R6     ; H'0000000D
    00004E60 E50C                   MOV         #12,R5     ; H'0000000C
    00004E62 6463                   MOV         R6,R4
    00004E64 D944                   MOV.L       L1394+64,R9; _mbx_send
    00004E66 490B                   JSR         @R9
    00004E68 67A3                   MOV         R10,R7
    00004E6A A386                   BRA         L1000
    00004E6C 7F18                   ADD         #24,R15
    00004E6E              L1013:
             tskcmd.c       7565          }
             tskcmd.c       7566          else
             tskcmd.c       7567          {
             tskcmd.c       7568              devno  = MT_Z0;
             tskcmd.c       7569              spdptn = (pProcAdr->step[actstep].par04 >> 4);
    00004E6E E014                   MOV         #20,R0     ; H'00000014
    00004E70 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00004E72 4E80                   MULR        R0,R14
    00004E74 E04C                   MOV         #76,R0     ; H'0000004C
    00004E76 4008                   SHLL2       R0
             tskcmd.c       7570              MAC_SPEED_SET( devno, 
    00004E78 DA2F                   MOV.L       L1394,R10  ; __$pProcAdr
    00004E7A 0FE6                   MOV.L       R14,@(R0,R15)
    00004E7C 61A2                   MOV.L       @R10,R1    ; pProcAdr
    00004E7E 60E3                   MOV         R14,R0
    00004E80 7103                   ADD         #3,R1
    00004E82 011C                   MOV.B       @(R0,R1),R1; pProcAdr->step[].par04
    00004E84 E00C                   MOV         #12,R0     ; H'0000000C
    00004E86 DC2F                   MOV.L       L1394+12,R12; H'00000078+__$Sp
    00004E88 6E1C                   EXTU.B      R1,R14
    00004E8A 4E2C                   SHAD        R2,R14
    00004E8C 6EEC                   EXTU.B      R14,R14
    00004E8E 4E80                   MULR        R0,R14
    00004E90 DB2D                   MOV.L       L1394+16,R11; __$Sp
    00004E92 60E3                   MOV         R14,R0
    00004E94 01CD                   MOV.W       @(R0,R12),R1; Sp[].ac
    00004E96 3FE1204F               MOV.L       R14,@(316:12,R15)
    00004E9A 3F111024               MOV.W       R1,@(72:12,R15); mp.accel_type
    00004E9E D52B                   MOV.L       L1394+20,R5; _GetFactor
    00004EA0 450B                   JSR         @R5
    00004EA2 E403                   MOV         #3,R4      ; H'00000003
    00004EA4 E344                   MOV         #68,R3     ; H'00000044
    00004EA6 E580                   MOV         #-128,R5   ; H'FFFFFF80
    00004EA8 33FC                   ADD         R15,R3
    00004EAA 67B3                   MOV         R11,R7
    00004EAC 2302                   MOV.L       R0,@R3     ; mp.factor
    00004EAE 655C                   EXTU.B      R5,R5
    00004EB0 60E3                   MOV         R14,R0
    00004EB2 6CB3                   MOV         R11,R12
    00004EB4 7B7A                   ADD         #122,R11
    00004EB6 777C                   ADD         #124,R7
    00004EB8 3C5C                   ADD         R5,R12
    00004EBA 0EBD                   MOV.W       @(R0,R11),R14; Sp[].gl
    00004EBC E100                   MOV         #0,R1      ; H'00000000
    00004EBE 047E                   MOV.L       @(R0,R7),R4; Sp[].fl
    00004EC0 07CE                   MOV.L       @(R0,R12),R7; Sp[].fh
    00004EC2 6EED                   EXTU.W      R14,R14
    00004EC4 1342                   MOV.L       R4,@(8,R3) ; mp.FL
    00004EC6 1373                   MOV.L       R7,@(12,R3); mp.FH
    00004EC8 13E4                   MOV.L       R14,@(16,R3); mp.utime
    00004ECA 13E5                   MOV.L       R14,@(20,R3); mp.dtime
    00004ECC 1316                   MOV.L       R1,@(24,R3); mp.us
    00004ECE 1317                   MOV.L       R1,@(28,R3); mp.ds
    00004ED0 7FE0                   ADD         #-32,R15
    00004ED2 6EF3                   MOV         R15,R14
    00004ED4 7E64                   ADD         #100,R14
    00004ED6 6BE2                   MOV.L       @R14,R11   ; (part of)mp
    00004ED8 E402                   MOV         #2,R4      ; H'00000002
    00004EDA 5CE2                   MOV.L       @(8,R14),R12; (part of)mp
    00004EDC 55E1                   MOV.L       @(4,R14),R5; (part of)mp
    00004EDE 2FB2                   MOV.L       R11,@R15
    00004EE0 57E3                   MOV.L       @(12,R14),R7; (part of)mp
    00004EE2 1FC2                   MOV.L       R12,@(8,R15)
    00004EE4 52E4                   MOV.L       @(16,R14),R2; (part of)mp
    00004EE6 5BE5                   MOV.L       @(20,R14),R11; (part of)mp
    00004EE8 56E6                   MOV.L       @(24,R14),R6; (part of)mp
    00004EEA 5CE7                   MOV.L       @(28,R14),R12; (part of)mp
    00004EEC 1F51                   MOV.L       R5,@(4,R15)
    00004EEE 1F73                   MOV.L       R7,@(12,R15)
    00004EF0 1F24                   MOV.L       R2,@(16,R15)
    00004EF2 1FB5                   MOV.L       R11,@(20,R15)
    00004EF4 1F66                   MOV.L       R6,@(24,R15)
    00004EF6 D116                   MOV.L       L1394+24,R1; _motor_SET
    00004EF8 410B                   JSR         @R1
    00004EFA 1FC7                   MOV.L       R12,@(28,R15)
    00004EFC 7F20                   ADD         #32,R15
             tskcmd.c       7571                             Sp[devno][spdptn].ac, 
             tskcmd.c       7572                             Sp[devno][spdptn].fl, 
             tskcmd.c       7573                             Sp[devno][spdptn].fh, 
             tskcmd.c       7574                             Sp[devno][spdptn].gl );
             tskcmd.c       7575    
             tskcmd.c       7576              movptn = pProcAdr->step[actstep].par06;
             tskcmd.c       7577              movval = GetPositionValue(movptn);
    00004EFE 62A2                   MOV.L       @R10,R2    ; pProcAdr
    00004F00 30F1604C               MOV.L       @(304:12,R15),R0
    00004F04 7205                   ADD         #5,R2
    00004F06 D321                   MOV.L       L1394+84,R3; __$GetPositionValue
    00004F08 430B                   JSR         @R3
    00004F0A 042C                   MOV.B       @(R0,R2),R4; pProcAdr->step[].par06
             tskcmd.c       7578              
             tskcmd.c       7579              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00004F0C 2F06                   MOV.L       R0,@-R15
    00004F0E E700                   MOV         #0,R7      ; H'00000000
    00004F10 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00004F14 E602                   MOV         #2,R6      ; H'00000002
    00004F16 D310                   MOV.L       L1394+32,R3; __$AbsmvAction
    00004F18 430B                   JSR         @R3
    00004F1A E451                   MOV         #81,R4     ; H'00000051
    00004F1C 6A03                   MOV         R0,R10
    00004F1E 7F04                   ADD         #4,R15
    00004F20 6603                   MOV         R0,R6
    00004F22 E04A                   MOV         #74,R0     ; H'0000004A
    00004F24 4008                   SHLL2       R0
             tskcmd.c       7580              if( result == E_SUCCESS ) result = E_CONTINUE;
    00004F26 2AA8                   TST         R10,R10
    00004F28 8F01                   BF/S        L1015
    00004F2A 0F66                   MOV.L       R6,@(R0,R15); result
    00004F2C 0FD6                   MOV.L       R13,@(R0,R15); result
    00004F2E              L1015:
             tskcmd.c       7581              pProcDat->Stp++;
    00004F2E 6692                   MOV.L       @R9,R6     ; pProcDat
    00004F30 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004F32 7001                   ADD         #1,R0
    00004F34 A321                   BRA         L1000
    00004F36 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004F38              L1394:
    00004F38 <00000000>             .DATA.L     __$pProcAdr
    00004F3C <00000000>             .DATA.L     __$GetPosiData
    00004F40 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00004F44 <00000078>             .DATA.L     H'00000078+__$Sp
    00004F48 <00000000>             .DATA.L     __$Sp
    00004F4C <00000000>             .DATA.L     _GetFactor
    00004F50 <00000000>             .DATA.L     _motor_SET
    00004F54 <00000018>             .DATA.L     H'00000018+__$BkP7
    00004F58 <00000000>             .DATA.L     __$AbsmvAction
    00004F5C <00000002>             .DATA.L     H'00000002+__$psns
    00004F60 <00000001>             .DATA.L     H'00000001+__$psel
    00004F64 <00000000>             .DATA.L     _IdleBitSet
    00004F68 <00000000>             .DATA.L     __$psns
    00004F6C <00000000>             .DATA.L     __$vout
    00004F70 <00000000>             .DATA.L     __$NzlTargetGet
    00004F74 <00000002>             .DATA.L     H'00000002+__$vout
    00004F78 <00000000>             .DATA.L     _mbx_send
    00004F7C <0000000A>             .DATA.L     H'0000000A+__$SpPtn
    00004F80 <000000B4>             .DATA.L     H'000000B4+__$Sp
    00004F84 <00000000>             .DATA.L     __$BlowoutAirValue
    00004F88 <00000000>             .DATA.L     __$RelmvAction
    00004F8C <00000000>             .DATA.L     __$GetPositionValue
    00004F90              L980:
             tskcmd.c       7582          }
             tskcmd.c       7583          break;
             tskcmd.c       7584          
             tskcmd.c       7585      case 5 :    // [攪拌処理]  5 ．撹拌容量＋余剰量分（初回のみ）を吸引と同時に分注Z軸を下降させる。& 吸引中圧力監視
             tskcmd.c       7586          if( tskid == ID_TSK_PUNIT )
    00004F90 6023                   MOV         R2,R0
    00004F92 880D                   CMP/EQ      #13,R0
    00004F94 8B01                   BF          L1430
    00004F96 A2F0                   BRA         L1000
    00004F98 0009                   NOP
    00004F9A              L1430:
             tskcmd.c       7587          {
             tskcmd.c       7588              // 読み捨て
             tskcmd.c       7589          }
             tskcmd.c       7590          else
             tskcmd.c       7591          {
             tskcmd.c       7592              devno  = MT_Z0;
             tskcmd.c       7593              spdptn = (pProcAdr->step[actstep].par05 >> 4);
    00004F9A E014                   MOV         #20,R0     ; H'00000014
    00004F9C E1FC                   MOV         #-4,R1     ; H'FFFFFFFC
    00004F9E 4E80                   MULR        R0,R14
    00004FA0 E04C                   MOV         #76,R0     ; H'0000004C
    00004FA2 4008                   SHLL2       R0
    00004FA4 DD77                   MOV.L       L1395+2,R13; __$pProcAdr
    00004FA6 0FE6                   MOV.L       R14,@(R0,R15)
    00004FA8 64D2                   MOV.L       @R13,R4    ; pProcAdr
    00004FAA 60E3                   MOV         R14,R0
    00004FAC 6543                   MOV         R4,R5
    00004FAE 7504                   ADD         #4,R5
    00004FB0 0E5C                   MOV.B       @(R0,R5),R14; pProcAdr->step[].par05
             tskcmd.c       7594              movptn = pProcAdr->step[actstep].par07;             // 吸引終了高さ
             tskcmd.c       7595              movval = GetPositionValue(movptn);
    00004FB2 7406                   ADD         #6,R4
    00004FB4 30F1604C               MOV.L       @(304:12,R15),R0
    00004FB8 67EC                   EXTU.B      R14,R7
    00004FBA 471C                   SHAD        R1,R7
    00004FBC 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par07
    00004FBE 3F710140               MOV.B       R7,@(320:12,R15)
    00004FC2 D371                   MOV.L       L1395+6,R3 ; __$GetPositionValue
    00004FC4 434B                   JSR/N       @R3
             tskcmd.c       7596    
             tskcmd.c       7597              MAC_SPEED_SET( devno, 
    00004FC6 32F18140               MOVU.B      @(320,R15),R2
    00004FCA 3F012054               MOV.L       R0,@(336:12,R15); movval
    00004FCE E00C                   MOV         #12,R0     ; H'0000000C
    00004FD0 4280                   MULR        R0,R2
    00004FD2 D66E                   MOV.L       L1395+10,R6; H'00000078+__$Sp
    00004FD4 6023                   MOV         R2,R0
    00004FD6 046D                   MOV.W       @(R0,R6),R4; Sp[].ac
    00004FD8 3F21204F               MOV.L       R2,@(316:12,R15)
    00004FDC 3F411034               MOV.W       R4,@(104:12,R15); mp.accel_type
    00004FE0 DE6B                   MOV.L       L1395+14,R14; _GetFactor
    00004FE2 4E0B                   JSR         @R14
    00004FE4 E403                   MOV         #3,R4      ; H'00000003
    00004FE6 3F012019               MOV.L       R0,@(100:12,R15); mp.factor
    00004FEA D76A                   MOV.L       L1395+18,R7; __$Sp
    00004FEC 30F1604F               MOV.L       @(316:12,R15),R0
    00004FF0 EE80                   MOV         #-128,R14  ; H'FFFFFF80
    00004FF2 6173                   MOV         R7,R1
    00004FF4 717C                   ADD         #124,R1
    00004FF6 6EEC                   EXTU.B      R14,R14
    00004FF8 6473                   MOV         R7,R4
    00004FFA 777A                   ADD         #122,R7
    00004FFC 051E                   MOV.L       @(R0,R1),R5; Sp[].fl
    00004FFE 34EC                   ADD         R14,R4
    00005000 027D                   MOV.W       @(R0,R7),R2; Sp[].gl
    00005002 014E                   MOV.L       @(R0,R4),R1; Sp[].fh
    00005004 3F51201B               MOV.L       R5,@(108:12,R15); mp.FL
    00005008 622D                   EXTU.W      R2,R2
    0000500A E500                   MOV         #0,R5      ; H'00000000
    0000500C 3F11201C               MOV.L       R1,@(112:12,R15); mp.FH
    00005010 3F21201D               MOV.L       R2,@(116:12,R15); mp.utime
    00005014 3F21201E               MOV.L       R2,@(120:12,R15); mp.dtime
    00005018 3F51201F               MOV.L       R5,@(124:12,R15); mp.us
    0000501C 3F512020               MOV.L       R5,@(128:12,R15); mp.ds
    00005020 7FE0                   ADD         #-32,R15
    00005022 E784                   MOV         #-124,R7   ; H'FFFFFF84
    00005024 677C                   EXTU.B      R7,R7
    00005026 62F3                   MOV         R15,R2
    00005028 327C                   ADD         R7,R2
    0000502A 5E21                   MOV.L       @(4,R2),R14; (part of)mp
    0000502C 5523                   MOV.L       @(12,R2),R5; (part of)mp
    0000502E 5725                   MOV.L       @(20,R2),R7; (part of)mp
    00005030 6422                   MOV.L       @R2,R4     ; (part of)mp
    00005032 1FE1                   MOV.L       R14,@(4,R15)
    00005034 5122                   MOV.L       @(8,R2),R1 ; (part of)mp
    00005036 1F53                   MOV.L       R5,@(12,R15)
    00005038 5524                   MOV.L       @(16,R2),R5; (part of)mp
    0000503A 1F75                   MOV.L       R7,@(20,R15)
    0000503C 5E26                   MOV.L       @(24,R2),R14; (part of)mp
    0000503E 5727                   MOV.L       @(28,R2),R7; (part of)mp
    00005040 2F42                   MOV.L       R4,@R15
    00005042 E402                   MOV         #2,R4      ; H'00000002
    00005044 1F12                   MOV.L       R1,@(8,R15)
    00005046 1F54                   MOV.L       R5,@(16,R15)
    00005048 1FE6                   MOV.L       R14,@(24,R15)
    0000504A DE53                   MOV.L       L1395+22,R14; _motor_SET
    0000504C 4E0B                   JSR         @R14
    0000504E 1F77                   MOV.L       R7,@(28,R15)
    00005050 7F20                   ADD         #32,R15
             tskcmd.c       7598                             Sp[devno][spdptn].ac, 
             tskcmd.c       7599                             Sp[devno][spdptn].fl, 
             tskcmd.c       7600                             Sp[devno][spdptn].fh, 
             tskcmd.c       7601                             Sp[devno][spdptn].gl );
             tskcmd.c       7602    
             tskcmd.c       7603              devno  = MT_P0;
             tskcmd.c       7604              spdptn = (pProcAdr->step[actstep].par05 & 0x0f);
             tskcmd.c       7605              MAC_SPEED_SET( devno, 
    00005052 61D2                   MOV.L       @R13,R1    ; pProcAdr
    00005054 30F1604C               MOV.L       @(304:12,R15),R0
    00005058 7104                   ADD         #4,R1
    0000505A 001C                   MOV.B       @(R0,R1),R0; pProcAdr->step[].par05
    0000505C D74F                   MOV.L       L1395+26,R7; H'000000B4+__$Sp
    0000505E C90F                   AND         #15,R0
    00005060 6103                   MOV         R0,R1
    00005062 E00C                   MOV         #12,R0     ; H'0000000C
    00005064 4180                   MULR        R0,R1
    00005066 6013                   MOV         R1,R0
    00005068 047D                   MOV.W       @(R0,R7),R4; Sp[].ac
    0000506A 3F112053               MOV.L       R1,@(332:12,R15)
    0000506E 3F411044               MOV.W       R4,@(136:12,R15); mp.accel_type
    00005072 D547                   MOV.L       L1395+14,R5; _GetFactor
    00005074 450B                   JSR         @R5
    00005076 E403                   MOV         #3,R4      ; H'00000003
    00005078 E1B8                   MOV         #-72,R1    ; H'FFFFFFB8
    0000507A E4BC                   MOV         #-68,R4    ; H'FFFFFFBC
    0000507C 3F012021               MOV.L       R0,@(132:12,R15); mp.factor
    00005080 611C                   EXTU.B      R1,R1
    00005082 D744                   MOV.L       L1395+18,R7; __$Sp
    00005084 30F16053               MOV.L       @(332:12,R15),R0
    00005088 644C                   EXTU.B      R4,R4
    0000508A 6E73                   MOV         R7,R14
    0000508C 3E1C                   ADD         R1,R14
    0000508E 6173                   MOV         R7,R1
    00005090 314C                   ADD         R4,R1
    00005092 051E                   MOV.L       @(R0,R1),R5; Sp[].fh
    00005094 E1B6                   MOV         #-74,R1    ; H'FFFFFFB6
    00005096 611C                   EXTU.B      R1,R1
    00005098 02EE                   MOV.L       @(R0,R14),R2; Sp[].fl
    0000509A 371C                   ADD         R1,R7
    0000509C 067D                   MOV.W       @(R0,R7),R6; Sp[].gl
    0000509E 3F512024               MOV.L       R5,@(144:12,R15); mp.FH
    000050A2 666D                   EXTU.W      R6,R6
    000050A4 E500                   MOV         #0,R5      ; H'00000000
    000050A6 3F212023               MOV.L       R2,@(140:12,R15); mp.FL
    000050AA 3F612025               MOV.L       R6,@(148:12,R15); mp.utime
    000050AE 3F612026               MOV.L       R6,@(152:12,R15); mp.dtime
    000050B2 3F512027               MOV.L       R5,@(156:12,R15); mp.us
    000050B6 3F512028               MOV.L       R5,@(160:12,R15); mp.ds
    000050BA 7FE0                   ADD         #-32,R15
    000050BC E6A4                   MOV         #-92,R6    ; H'FFFFFFA4
    000050BE 666C                   EXTU.B      R6,R6
    000050C0 E403                   MOV         #3,R4      ; H'00000003
    000050C2 65F3                   MOV         R15,R5
    000050C4 356C                   ADD         R6,R5
    000050C6 5651                   MOV.L       @(4,R5),R6 ; (part of)mp
    000050C8 5253                   MOV.L       @(12,R5),R2; (part of)mp
    000050CA 1F61                   MOV.L       R6,@(4,R15)
    000050CC 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    000050CE 1F23                   MOV.L       R2,@(12,R15)
    000050D0 1F62                   MOV.L       R6,@(8,R15)
    000050D2 5654                   MOV.L       @(16,R5),R6; (part of)mp
    000050D4 5255                   MOV.L       @(20,R5),R2; (part of)mp
    000050D6 6E52                   MOV.L       @R5,R14    ; (part of)mp
    000050D8 1F64                   MOV.L       R6,@(16,R15)
    000050DA 1F25                   MOV.L       R2,@(20,R15)
    000050DC 5256                   MOV.L       @(24,R5),R2; (part of)mp
    000050DE 5657                   MOV.L       @(28,R5),R6; (part of)mp
    000050E0 2FE2                   MOV.L       R14,@R15
    000050E2 1F26                   MOV.L       R2,@(24,R15)
    000050E4 D22C                   MOV.L       L1395+22,R2; _motor_SET
    000050E6 420B                   JSR         @R2
    000050E8 1F67                   MOV.L       R6,@(28,R15)
    000050EA 7F20                   ADD         #32,R15
             tskcmd.c       7606                             Sp[devno][spdptn].ac, 
             tskcmd.c       7607                             Sp[devno][spdptn].fl, 
             tskcmd.c       7608                             Sp[devno][spdptn].fh, 
             tskcmd.c       7609                             Sp[devno][spdptn].gl );
             tskcmd.c       7610              
             tskcmd.c       7611              MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
    000050EC 66D2                   MOV.L       @R13,R6    ; pProcAdr
    000050EE 30F1604C               MOV.L       @(304:12,R15),R0
    000050F2 760C                   ADD         #12,R6
    000050F4 066E                   MOV.L       @(R0,R6),R6; pProcAdr->step[].par13
    000050F6 2F66                   MOV.L       R6,@-R15
    000050F8 7FFC                   ADD         #-4,R15
    000050FA E602                   MOV         #2,R6      ; H'00000002
    000050FC 3DF16056               MOV.L       @(344:12,R15),R13; movval
    00005100 35F14134               MOV.B       @(308:12,R15),R5; bcid
    00005104 2FD2                   MOV.L       R13,@R15
    00005106 E703                   MOV         #3,R7      ; H'00000003
    00005108 D325                   MOV.L       L1395+30,R3; __$MapAction
    0000510A 430B                   JSR         @R3
    0000510C 64A3                   MOV         R10,R4
    0000510E 7F08                   ADD         #8,R15
             tskcmd.c       7612              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7613    
             tskcmd.c       7614              mbx_send    (
             tskcmd.c       7615                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7616                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7617                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7618                              prid1,               // prid1
             tskcmd.c       7619                              bcid,                // bcid
             tskcmd.c       7620                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7621                              inf1,                // sts
             tskcmd.c       7622                              inf2,                // sts2
             tskcmd.c       7623                              &dummy,              // data
             tskcmd.c       7624                              sizeof( dummy )      // siz
             tskcmd.c       7625                          );
    00005110 E701                   MOV         #1,R7      ; H'00000001
    00005112 2F76                   MOV.L       R7,@-R15
    00005114 6DF3                   MOV         R15,R13
    00005116 7D44                   ADD         #68,R13
    00005118 2FD6                   MOV.L       R13,@-R15
    0000511A 2FC6                   MOV.L       R12,@-R15
    0000511C 2FB6                   MOV.L       R11,@-R15
    0000511E E299                   MOV         #-103,R2   ; H'FFFFFF99
    00005120 622C                   EXTU.B      R2,R2
    00005122 2F26                   MOV.L       R2,@-R15
    00005124 7FFC                   ADD         #-4,R15
    00005126 E60D                   MOV         #13,R6     ; H'0000000D
    00005128 31F18144               MOVU.B      @(324,R15),R1; bcid
    0000512C E50C                   MOV         #12,R5     ; H'0000000C
    0000512E 6463                   MOV         R6,R4
    00005130 2F12                   MOV.L       R1,@R15
    00005132 DE1C                   MOV.L       L1395+34,R14; _mbx_send
    00005134 4E0B                   JSR         @R14
    00005136 67A3                   MOV         R10,R7
    00005138 7F18                   ADD         #24,R15
             tskcmd.c       7626              
             tskcmd.c       7627              pProcDat->Stp++;
    0000513A 6492                   MOV.L       @R9,R4     ; pProcDat
    0000513C 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    0000513E 7001                   ADD         #1,R0
    00005140 A21B                   BRA         L1000
    00005142 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00005144              L981:
             tskcmd.c       7628          }
             tskcmd.c       7629          break;
             tskcmd.c       7630          
             tskcmd.c       7631      case 6 :    // [攪拌処理]  6 ．吸引後ウェイト
             tskcmd.c       7632          if( tskid == ID_TSK_PUNIT )
    00005144 6023                   MOV         R2,R0
    00005146 880D                   CMP/EQ      #13,R0
    00005148 8B12                   BF          L1021
             tskcmd.c       7633          {
             tskcmd.c       7634              // ★圧力監視記述
             tskcmd.c       7635              
             tskcmd.c       7636              
             tskcmd.c       7637              
             tskcmd.c       7638              mbx_send    (
             tskcmd.c       7639                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7640                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7641                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7642                              prid1,               // prid1
             tskcmd.c       7643                              bcid,                // bcid
             tskcmd.c       7644                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7645                              inf1,                // sts
             tskcmd.c       7646                              inf2,                // sts2
             tskcmd.c       7647                              &dummy,              // data
             tskcmd.c       7648                              sizeof( dummy )      // siz
             tskcmd.c       7649                          );
    0000514A E601                   MOV         #1,R6      ; H'00000001
    0000514C 2F66                   MOV.L       R6,@-R15
    0000514E 67F3                   MOV         R15,R7
    00005150 7744                   ADD         #68,R7
    00005152 2F76                   MOV.L       R7,@-R15
    00005154 2FC6                   MOV.L       R12,@-R15
    00005156 2FB6                   MOV.L       R11,@-R15
    00005158 EB99                   MOV         #-103,R11  ; H'FFFFFF99
    0000515A 6BBC                   EXTU.B      R11,R11
    0000515C 2FB6                   MOV.L       R11,@-R15
    0000515E 2F56                   MOV.L       R5,@-R15
    00005160 E60D                   MOV         #13,R6     ; H'0000000D
    00005162 E50C                   MOV         #12,R5     ; H'0000000C
    00005164 6463                   MOV         R6,R4
    00005166 D90F                   MOV.L       L1395+34,R9; _mbx_send
    00005168 490B                   JSR         @R9
    0000516A 67A3                   MOV         R10,R7
    0000516C A205                   BRA         L1000
    0000516E 7F18                   ADD         #24,R15
    00005170              L1021:
             tskcmd.c       7650          }
             tskcmd.c       7651          else
             tskcmd.c       7652          {
             tskcmd.c       7653              WaitAction( prid1, bcid, 10 );
    00005170 E60A                   MOV         #10,R6     ; H'0000000A
    00005172 D30D                   MOV.L       L1395+38,R3; __$WaitAction
    00005174 430B                   JSR         @R3
    00005176 64A3                   MOV         R10,R4
             tskcmd.c       7654              pProcDat->Stp++;
    00005178 6C92                   MOV.L       @R9,R12    ; pProcDat
    0000517A 84C2                   MOV.B       @(2,R12),R0; (pProcDat)->Stp
    0000517C 7001                   ADD         #1,R0
    0000517E A1FC                   BRA         L1000
    00005180 80C2                   MOV.B       R0,@(2,R12); (pProcDat)->Stp
    00005182              L1395:
    00005182 00000002               .RES.W      1
    00005184 <00000000>             .DATA.L     __$pProcAdr
    00005188 <00000000>             .DATA.L     __$GetPositionValue
    0000518C <00000078>             .DATA.L     H'00000078+__$Sp
    00005190 <00000000>             .DATA.L     _GetFactor
    00005194 <00000000>             .DATA.L     __$Sp
    00005198 <00000000>             .DATA.L     _motor_SET
    0000519C <000000B4>             .DATA.L     H'000000B4+__$Sp
    000051A0 <00000000>             .DATA.L     __$MapAction
    000051A4 <00000000>             .DATA.L     _mbx_send
    000051A8 <00000000>             .DATA.L     __$WaitAction
    000051AC              L982:
             tskcmd.c       7655          }
             tskcmd.c       7656          break;
             tskcmd.c       7657          
             tskcmd.c       7658      case 7 :    // [攪拌処理]  7 ．現在の分注Z軸位置から撹拌容量を吐出と同時に分注Z軸上昇させる。
             tskcmd.c       7659          if( tskid == ID_TSK_PUNIT )
    000051AC 6023                   MOV         R2,R0
    000051AE 880D                   CMP/EQ      #13,R0
    000051B0 8B01                   BF          L1431
    000051B2 A1E2                   BRA         L1000
    000051B4 0009                   NOP
    000051B6              L1431:
             tskcmd.c       7660          {
             tskcmd.c       7661              // 読み捨て
             tskcmd.c       7662          }
             tskcmd.c       7663          else
             tskcmd.c       7664          {
             tskcmd.c       7665              devno  = MT_Z0;
             tskcmd.c       7666              spdptn = (pProcAdr->step[actstep].par05 >> 4);// 吐出上昇速度パターン
    000051B6 E014                   MOV         #20,R0     ; H'00000014
    000051B8 E5FC                   MOV         #-4,R5     ; H'FFFFFFFC
    000051BA 4E80                   MULR        R0,R14
    000051BC E04C                   MOV         #76,R0     ; H'0000004C
    000051BE 4008                   SHLL2       R0
    000051C0 DDB0                   MOV.L       L1396+2,R13; __$pProcAdr
    000051C2 0FE6                   MOV.L       R14,@(R0,R15)
    000051C4 64D2                   MOV.L       @R13,R4    ; pProcAdr
    000051C6 60E3                   MOV         R14,R0
    000051C8 6E43                   MOV         R4,R14
    000051CA 7E04                   ADD         #4,R14
    000051CC 02EC                   MOV.B       @(R0,R14),R2; pProcAdr->step[].par05
             tskcmd.c       7667              movptn = pProcAdr->step[actstep].par06;       // 攪拌開始高さ
             tskcmd.c       7668              movval = GetPositionValue(movptn);
    000051CE 7405                   ADD         #5,R4
    000051D0 30F1604C               MOV.L       @(304:12,R15),R0
    000051D4 612C                   EXTU.B      R2,R1
    000051D6 415C                   SHAD        R5,R1
    000051D8 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par06
    000051DA 3F110144               MOV.B       R1,@(324:12,R15)
    000051DE D3AA                   MOV.L       L1396+6,R3 ; __$GetPositionValue
    000051E0 434B                   JSR/N       @R3
             tskcmd.c       7669    
             tskcmd.c       7670              MAC_SPEED_SET( devno, 
    000051E2 3EF18144               MOVU.B      @(324,R15),R14
    000051E6 3F012054               MOV.L       R0,@(336:12,R15); movval
    000051EA E00C                   MOV         #12,R0     ; H'0000000C
    000051EC 4E80                   MULR        R0,R14
    000051EE D6A7                   MOV.L       L1396+10,R6; H'00000078+__$Sp
    000051F0 60E3                   MOV         R14,R0
    000051F2 046D                   MOV.W       @(R0,R6),R4; Sp[].ac
    000051F4 3FE12052               MOV.L       R14,@(328:12,R15)
    000051F8 3F411054               MOV.W       R4,@(168:12,R15); mp.accel_type
    000051FC D5A4                   MOV.L       L1396+14,R5; _GetFactor
    000051FE 450B                   JSR         @R5
    00005200 E403                   MOV         #3,R4      ; H'00000003
    00005202 3F012029               MOV.L       R0,@(164:12,R15); mp.factor
    00005206 D6A3                   MOV.L       L1396+18,R6; __$Sp
    00005208 60E3                   MOV         R14,R0
    0000520A 6E63                   MOV         R6,R14
    0000520C 7E7C                   ADD         #124,R14
    0000520E 01EE                   MOV.L       @(R0,R14),R1; Sp[].fl
    00005210 E280                   MOV         #-128,R2   ; H'FFFFFF80
    00005212 622C                   EXTU.B      R2,R2
    00005214 E500                   MOV         #0,R5      ; H'00000000
    00005216 3F11202B               MOV.L       R1,@(172:12,R15); mp.FL
    0000521A 6163                   MOV         R6,R1
    0000521C 312C                   ADD         R2,R1
    0000521E 041E                   MOV.L       @(R0,R1),R4; Sp[].fh
    00005220 767A                   ADD         #122,R6
    00005222 3F51202F               MOV.L       R5,@(188:12,R15); mp.us
    00005226 3F41202C               MOV.L       R4,@(176:12,R15); mp.FH
    0000522A 046D                   MOV.W       @(R0,R6),R4; Sp[].gl
    0000522C 3F512030               MOV.L       R5,@(192:12,R15); mp.ds
    00005230 644D                   EXTU.W      R4,R4
    00005232 3F41202D               MOV.L       R4,@(180:12,R15); mp.utime
    00005236 3F41202E               MOV.L       R4,@(184:12,R15); mp.dtime
    0000523A 7FE0                   ADD         #-32,R15
    0000523C E5C4                   MOV         #-60,R5    ; H'FFFFFFC4
    0000523E 655C                   EXTU.B      R5,R5
    00005240 62F3                   MOV         R15,R2
    00005242 325C                   ADD         R5,R2
    00005244 6722                   MOV.L       @R2,R7     ; (part of)mp
    00005246 5E21                   MOV.L       @(4,R2),R14; (part of)mp
    00005248 5122                   MOV.L       @(8,R2),R1 ; (part of)mp
    0000524A 2F72                   MOV.L       R7,@R15
    0000524C 1FE1                   MOV.L       R14,@(4,R15)
    0000524E 5E23                   MOV.L       @(12,R2),R14; (part of)mp
    00005250 1F12                   MOV.L       R1,@(8,R15)
    00005252 5124                   MOV.L       @(16,R2),R1; (part of)mp
    00005254 5425                   MOV.L       @(20,R2),R4; (part of)mp
    00005256 5526                   MOV.L       @(24,R2),R5; (part of)mp
    00005258 5727                   MOV.L       @(28,R2),R7; (part of)mp
    0000525A 1FE3                   MOV.L       R14,@(12,R15)
    0000525C 1F14                   MOV.L       R1,@(16,R15)
    0000525E 1F45                   MOV.L       R4,@(20,R15)
    00005260 1F56                   MOV.L       R5,@(24,R15)
    00005262 1F77                   MOV.L       R7,@(28,R15)
    00005264 D78C                   MOV.L       L1396+22,R7; _motor_SET
    00005266 470B                   JSR         @R7
    00005268 E402                   MOV         #2,R4      ; H'00000002
    0000526A 7F20                   ADD         #32,R15
             tskcmd.c       7671                             Sp[devno][spdptn].ac, 
             tskcmd.c       7672                             Sp[devno][spdptn].fl, 
             tskcmd.c       7673                             Sp[devno][spdptn].fh, 
             tskcmd.c       7674                             Sp[devno][spdptn].gl );
             tskcmd.c       7675    
             tskcmd.c       7676              devno  = MT_P0;
             tskcmd.c       7677              spdptn = (pProcAdr->step[actstep].par05 & 0x0f);// 吐出速度パターン
             tskcmd.c       7678              MAC_SPEED_SET( devno, 
    0000526C 6ED2                   MOV.L       @R13,R14   ; pProcAdr
    0000526E 30F1604C               MOV.L       @(304:12,R15),R0
    00005272 7E04                   ADD         #4,R14
    00005274 E70C                   MOV         #12,R7     ; H'0000000C
    00005276 00EC                   MOV.B       @(R0,R14),R0; pProcAdr->step[].par05
    00005278 E403                   MOV         #3,R4      ; H'00000003
    0000527A C90F                   AND         #15,R0
    0000527C EEB8                   MOV         #-72,R14   ; H'FFFFFFB8
    0000527E 6103                   MOV         R0,R1
    00005280 6073                   MOV         R7,R0
    00005282 4180                   MULR        R0,R1
    00005284 D785                   MOV.L       L1396+26,R7; H'000000B4+__$Sp
    00005286 3F112053               MOV.L       R1,@(332:12,R15)
    0000528A 6013                   MOV         R1,R0
    0000528C 017D                   MOV.W       @(R0,R7),R1; Sp[].ac
    0000528E 3F111064               MOV.W       R1,@(200:12,R15); mp.accel_type
    00005292 D57F                   MOV.L       L1396+14,R5; _GetFactor
    00005294 450B                   JSR         @R5
    00005296 6EEC                   EXTU.B      R14,R14
    00005298 3F012031               MOV.L       R0,@(196:12,R15); mp.factor
    0000529C D77D                   MOV.L       L1396+18,R7; __$Sp
    0000529E 30F16053               MOV.L       @(332:12,R15),R0
    000052A2 6D73                   MOV         R7,R13
    000052A4 3DEC                   ADD         R14,R13
    000052A6 02DE                   MOV.L       @(R0,R13),R2; Sp[].fl
    000052A8 EDBC                   MOV         #-68,R13   ; H'FFFFFFBC
    000052AA E1B6                   MOV         #-74,R1    ; H'FFFFFFB6
    000052AC 6DDC                   EXTU.B      R13,R13
    000052AE 611C                   EXTU.B      R1,R1
    000052B0 6E73                   MOV         R7,R14
    000052B2 3EDC                   ADD         R13,R14
    000052B4 371C                   ADD         R1,R7
    000052B6 0DEE                   MOV.L       @(R0,R14),R13; Sp[].fh
    000052B8 057D                   MOV.W       @(R0,R7),R5; Sp[].gl
    000052BA 3FD12034               MOV.L       R13,@(208:12,R15); mp.FH
    000052BE 655D                   EXTU.W      R5,R5
    000052C0 ED00                   MOV         #0,R13     ; H'00000000
    000052C2 3F212033               MOV.L       R2,@(204:12,R15); mp.FL
    000052C6 3F512035               MOV.L       R5,@(212:12,R15); mp.utime
    000052CA 3F512036               MOV.L       R5,@(216:12,R15); mp.dtime
    000052CE 3FD12037               MOV.L       R13,@(220:12,R15); mp.us
    000052D2 3FD12038               MOV.L       R13,@(224:12,R15); mp.ds
    000052D6 7FE0                   ADD         #-32,R15
    000052D8 E6E4                   MOV         #-28,R6    ; H'FFFFFFE4
    000052DA 666C                   EXTU.B      R6,R6
    000052DC 65F3                   MOV         R15,R5
    000052DE 356C                   ADD         R6,R5
    000052E0 5651                   MOV.L       @(4,R5),R6 ; (part of)mp
    000052E2 5253                   MOV.L       @(12,R5),R2; (part of)mp
    000052E4 1F61                   MOV.L       R6,@(4,R15)
    000052E6 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    000052E8 1F23                   MOV.L       R2,@(12,R15)
    000052EA 1F62                   MOV.L       R6,@(8,R15)
    000052EC 5654                   MOV.L       @(16,R5),R6; (part of)mp
    000052EE 5255                   MOV.L       @(20,R5),R2; (part of)mp
    000052F0 6D52                   MOV.L       @R5,R13    ; (part of)mp
    000052F2 1F64                   MOV.L       R6,@(16,R15)
    000052F4 1F25                   MOV.L       R2,@(20,R15)
    000052F6 5656                   MOV.L       @(24,R5),R6; (part of)mp
    000052F8 5257                   MOV.L       @(28,R5),R2; (part of)mp
    000052FA 2FD2                   MOV.L       R13,@R15
    000052FC 1F66                   MOV.L       R6,@(24,R15)
    000052FE 1F27                   MOV.L       R2,@(28,R15)
    00005300 D265                   MOV.L       L1396+22,R2; _motor_SET
    00005302 420B                   JSR         @R2
    00005304 E403                   MOV         #3,R4      ; H'00000003
    00005306 7F20                   ADD         #32,R15
    00005308 D75E                   MOV.L       L1396+2,R7 ; __$pProcAdr
    0000530A 6E72                   MOV.L       @R7,R14    ; pProcAdr
    0000530C 30F1604C               MOV.L       @(304:12,R15),R0
    00005310 7E10                   ADD         #16,R14
    00005312 0EEE                   MOV.L       @(R0,R14),R14; pProcAdr->step[].par14
    00005314 2FE6                   MOV.L       R14,@-R15
    00005316 7FFC                   ADD         #-4,R15
    00005318 E602                   MOV         #2,R6      ; H'00000002
    0000531A 3DF16056               MOV.L       @(344:12,R15),R13; movval
    0000531E 35F14134               MOV.B       @(308:12,R15),R5; bcid
    00005322 2FD2                   MOV.L       R13,@R15
    00005324 E703                   MOV         #3,R7      ; H'00000003
    00005326 D35E                   MOV.L       L1396+30,R3; __$MapAction
    00005328 430B                   JSR         @R3
    0000532A 64A3                   MOV         R10,R4
    0000532C 7F08                   ADD         #8,R15
             tskcmd.c       7679                             Sp[devno][spdptn].ac, 
             tskcmd.c       7680                             Sp[devno][spdptn].fl, 
             tskcmd.c       7681                             Sp[devno][spdptn].fh, 
             tskcmd.c       7682                             Sp[devno][spdptn].gl );
             tskcmd.c       7683      
             tskcmd.c       7684              // ★最終の吐出か（余剰量＋吐出量を吐き出す）
             tskcmd.c       7685              if( ((pProcAdr->step[actstep].par03 & 0x0f)+1) >= psns.tcnt )
             tskcmd.c       7686              {
             tskcmd.c       7687                  MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par14 );
             tskcmd.c       7688              }
             tskcmd.c       7689              else
             tskcmd.c       7690              {
             tskcmd.c       7691                  MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par14 );
             tskcmd.c       7692              }
             tskcmd.c       7693              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7694    
             tskcmd.c       7695              mbx_send    (
             tskcmd.c       7696                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7697                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7698                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7699                              prid1,               // prid1
             tskcmd.c       7700                              bcid,                // bcid
             tskcmd.c       7701                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7702                              inf1,                // sts
             tskcmd.c       7703                              inf2,                // sts2
             tskcmd.c       7704                              &dummy,              // data
             tskcmd.c       7705                              sizeof( dummy )      // siz
             tskcmd.c       7706                          );
    0000532E E101                   MOV         #1,R1      ; H'00000001
    00005330 2F16                   MOV.L       R1,@-R15
    00005332 64F3                   MOV         R15,R4
    00005334 7444                   ADD         #68,R4
    00005336 2F46                   MOV.L       R4,@-R15
    00005338 2FC6                   MOV.L       R12,@-R15
    0000533A 2FB6                   MOV.L       R11,@-R15
    0000533C E199                   MOV         #-103,R1   ; H'FFFFFF99
    0000533E 611C                   EXTU.B      R1,R1
    00005340 2F16                   MOV.L       R1,@-R15
    00005342 7FFC                   ADD         #-4,R15
    00005344 E60D                   MOV         #13,R6     ; H'0000000D
    00005346 3EF18144               MOVU.B      @(324,R15),R14; bcid
    0000534A E50C                   MOV         #12,R5     ; H'0000000C
    0000534C 6463                   MOV         R6,R4
    0000534E 2FE2                   MOV.L       R14,@R15
    00005350 DD54                   MOV.L       L1396+34,R13; _mbx_send
    00005352 4D0B                   JSR         @R13
    00005354 67A3                   MOV         R10,R7
    00005356 7F18                   ADD         #24,R15
             tskcmd.c       7707              
             tskcmd.c       7708              pProcDat->Stp++;
    00005358 6292                   MOV.L       @R9,R2     ; pProcDat
    0000535A 8422                   MOV.B       @(2,R2),R0 ; (pProcDat)->Stp
    0000535C 7001                   ADD         #1,R0
    0000535E A10C                   BRA         L1000
    00005360 8022                   MOV.B       R0,@(2,R2) ; (pProcDat)->Stp
    00005362              L983:
             tskcmd.c       7709          }
             tskcmd.c       7710          break;
             tskcmd.c       7711          
             tskcmd.c       7712      case 8 :    // [攪拌処理]  8 ．撹拌容量を吐出
             tskcmd.c       7713          if( tskid == ID_TSK_PUNIT )
    00005362 6023                   MOV         R2,R0
    00005364 880D                   CMP/EQ      #13,R0
    00005366 8B01                   BF          L1432
    00005368 A107                   BRA         L1000
    0000536A 0009                   NOP
    0000536C              L1432:
             tskcmd.c       7714          {
             tskcmd.c       7715              // 読み捨て
             tskcmd.c       7716          }
             tskcmd.c       7717          else
             tskcmd.c       7718          {
             tskcmd.c       7719              pProcDat->Stp++;
    0000536C 8472                   MOV.B       @(2,R7),R0 ; (pProcDat)->Stp
             tskcmd.c       7720              WaitAction( prid1, bcid, 10 );
    0000536E E60A                   MOV         #10,R6     ; H'0000000A
    00005370 64A3                   MOV         R10,R4
    00005372 7001                   ADD         #1,R0
    00005374 D34C                   MOV.L       L1396+38,R3; __$WaitAction
    00005376 430B                   JSR         @R3
    00005378 8072                   MOV.B       R0,@(2,R7) ; (pProcDat)->Stp
    0000537A A0FE                   BRA         L1000
    0000537C 0009                   NOP
    0000537E              L984:
             tskcmd.c       7721          }
             tskcmd.c       7722          break;
             tskcmd.c       7723          
             tskcmd.c       7724      case 9 :    // [攪拌処理]  9 ．吐出後ウェイト
             tskcmd.c       7725          if( tskid == ID_TSK_PUNIT )
    0000537E 6023                   MOV         R2,R0
    00005380 880D                   CMP/EQ      #13,R0
    00005382 8B01                   BF          L1433
    00005384 A0F9                   BRA         L1000
    00005386 0009                   NOP
    00005388              L1433:
             tskcmd.c       7726          {
             tskcmd.c       7727              // 読み捨て
             tskcmd.c       7728          }
             tskcmd.c       7729          else
             tskcmd.c       7730          {
             tskcmd.c       7731              psns.tcnt++;
    00005388 D448                   MOV.L       L1396+42,R4; __$psns
    0000538A 8543                   MOV.W       @(6,R4),R0 ; psns.tcnt
    0000538C D23D                   MOV.L       L1396+2,R2 ; __$pProcAdr
    0000538E 7001                   ADD         #1,R0
    00005390 6622                   MOV.L       @R2,R6     ; pProcAdr
    00005392 8143                   MOV.W       R0,@(6,R4) ; psns.tcnt
             tskcmd.c       7732    
             tskcmd.c       7733              cntwk  = pProcAdr->step[actstep].par03 & 0x0f;
             tskcmd.c       7734    
             tskcmd.c       7735              if( psns.tcnt >= cntwk )
    00005394 690D                   EXTU.W      R0,R9
    00005396 E014                   MOV         #20,R0     ; H'00000014
    00005398 7602                   ADD         #2,R6
    0000539A 4E80                   MULR        R0,R14
    0000539C 60E3                   MOV         R14,R0
    0000539E 006C                   MOV.B       @(R0,R6),R0; pProcAdr->step[].par03
    000053A0 C90F                   AND         #15,R0
    000053A2 3903                   CMP/GE      R0,R9
    000053A4 8F02                   BF/S        L1031
    000053A6 E005                   MOV         #5,R0      ; H'00000005
             tskcmd.c       7736              {
             tskcmd.c       7737                  pProcDat->Stp++;
    000053A8 8472                   MOV.B       @(2,R7),R0 ; (pProcDat)->Stp
    000053AA 7001                   ADD         #1,R0
    000053AC              L1031:
             tskcmd.c       7738              }
             tskcmd.c       7739              else
             tskcmd.c       7740              {
             tskcmd.c       7741                  pProcDat->Stp = 5;// ｢5〜9｣を設定回数繰り返す
             tskcmd.c       7742              }
             tskcmd.c       7743              WaitAction( prid1, bcid, 2 );
    000053AC 8072                   MOV.B       R0,@(2,R7) ; (pProcDat)->Stp
    000053AE E602                   MOV         #2,R6      ; H'00000002
    000053B0 D33D                   MOV.L       L1396+38,R3; __$WaitAction
    000053B2 430B                   JSR         @R3
    000053B4 64A3                   MOV         R10,R4
    000053B6 A0E0                   BRA         L1000
    000053B8 0009                   NOP
    000053BA              L996:
             tskcmd.c       7744          }
             tskcmd.c       7745          break;
             tskcmd.c       7746          
             tskcmd.c       7747      case 10:    // [攪拌処理]  10．分注Z軸ブローアウト高さ位置移動
             tskcmd.c       7748          MAC_SPEED_SET( MT_Z0, 
             tskcmd.c       7749                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].ac, 
             tskcmd.c       7750                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fl, 
             tskcmd.c       7751                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fh, 
             tskcmd.c       7752                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].gl );
             tskcmd.c       7753    
             tskcmd.c       7754          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, BkP7.Z0_Taihi );
             tskcmd.c       7755          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7756          pProcDat->Stp++;
             tskcmd.c       7757          break;
             tskcmd.c       7758          
             tskcmd.c       7759      case 11:    // [攪拌処理]  11．ポンプリセット
             tskcmd.c       7760          // ブローアウトエア吸引
             tskcmd.c       7761          devno  = MT_P0;
             tskcmd.c       7762          spdptn = SpPtn.P0_SpdMovAirS;
             tskcmd.c       7763          MAC_SPEED_SET( devno, 
             tskcmd.c       7764                         Sp[devno][spdptn].ac, 
             tskcmd.c       7765                         Sp[devno][spdptn].fl, 
             tskcmd.c       7766                         Sp[devno][spdptn].fh, 
             tskcmd.c       7767                         Sp[devno][spdptn].gl );
             tskcmd.c       7768          result = RelmvAction( ID_TPL_PRTCL, bcid, MT_P0, REQ_STAUD, 0 );
             tskcmd.c       7769          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7770          pProcDat->Stp++;
             tskcmd.c       7771          break;
             tskcmd.c       7772          
             tskcmd.c       7773      case 12:    // [攪拌処理]  12．圧力基板制御：未指定のノズルチャンネルの電磁弁をONにする
             tskcmd.c       7774          pProcDat->Stp++;
             tskcmd.c       7775          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7776    
             tskcmd.c       7777    
             tskcmd.c       7778      case 13:    // [攪拌処理]  13．分注Z軸チップタッチ位置移動  (チップタッチ有り)
             tskcmd.c       7779          pProcDat->Stp++;
             tskcmd.c       7780          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7781    
             tskcmd.c       7782    
             tskcmd.c       7783      case 14:    // [攪拌処理]  14．分注Z軸退避位置移動
             tskcmd.c       7784          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, BkP7.Z0_Taihi );
             tskcmd.c       7785          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7786          pProcDat->Stp++;
             tskcmd.c       7787          break;
             tskcmd.c       7788          
             tskcmd.c       7789      case 15:    // [攪拌処理] 
             tskcmd.c       7790          result = E_SUCCESS;
    000053BA E200                   MOV         #0,R2      ; H'00000000
    000053BC 3F21204A               MOV.L       R2,@(296:12,R15); result
    000053C0 A0DB                   BRA         L1000
    000053C2 0009                   NOP
    000053C4              L993:
    000053C4 D23A                   MOV.L       L1396+46,R2; __$pProcDat
    000053C6 6622                   MOV.L       @R2,R6     ; pProcDat
    000053C8 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000053CA 7001                   ADD         #1,R0
    000053CC 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000053CE              L994:
    000053CE D238                   MOV.L       L1396+46,R2; __$pProcDat
    000053D0 6622                   MOV.L       @R2,R6     ; pProcDat
    000053D2 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000053D4 7001                   ADD         #1,R0
    000053D6 A0B8                   BRA         L1035
    000053D8 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000053DA              L992:
    000053DA D736                   MOV.L       L1396+50,R7; H'0000000A+__$SpPtn
    000053DC 6E70                   MOV.B       @R7,R14    ; SpPtn.P0_SpdMovAirS
    000053DE E00C                   MOV         #12,R0     ; H'0000000C
    000053E0 61EC                   EXTU.B      R14,R1
    000053E2 4180                   MULR        R0,R1
    000053E4 6013                   MOV         R1,R0
    000053E6 D12D                   MOV.L       L1396+26,R1; H'000000B4+__$Sp
    000053E8 041D                   MOV.W       @(R0,R1),R4; Sp[].ac
    000053EA 3F411084               MOV.W       R4,@(264:12,R15); mp.accel_type
    000053EE D528                   MOV.L       L1396+14,R5; _GetFactor
    000053F0 450B                   JSR         @R5
    000053F2 E403                   MOV         #3,R4      ; H'00000003
    000053F4 3F012041               MOV.L       R0,@(260:12,R15); mp.factor
    000053F8 62EC                   EXTU.B      R14,R2
    000053FA E00C                   MOV         #12,R0     ; H'0000000C
    000053FC 4280                   MULR        R0,R2
    000053FE E4B8                   MOV         #-72,R4    ; H'FFFFFFB8
    00005400 D124                   MOV.L       L1396+18,R1; __$Sp
    00005402 644C                   EXTU.B      R4,R4
    00005404 6713                   MOV         R1,R7
    00005406 374C                   ADD         R4,R7
    00005408 6023                   MOV         R2,R0
    0000540A 057E                   MOV.L       @(R0,R7),R5; Sp[].fl
    0000540C E7BC                   MOV         #-68,R7    ; H'FFFFFFBC
    0000540E 6413                   MOV         R1,R4
    00005410 677C                   EXTU.B      R7,R7
    00005412 347C                   ADD         R7,R4
    00005414 3F512043               MOV.L       R5,@(268:12,R15); mp.FL
    00005418 024E                   MOV.L       @(R0,R4),R2; Sp[].fh
    0000541A E5B6                   MOV         #-74,R5    ; H'FFFFFFB6
    0000541C 655C                   EXTU.B      R5,R5
    0000541E E400                   MOV         #0,R4      ; H'00000000
    00005420 3F212044               MOV.L       R2,@(272:12,R15); mp.FH
    00005424 6213                   MOV         R1,R2
    00005426 325C                   ADD         R5,R2
    00005428 072D                   MOV.W       @(R0,R2),R7; Sp[].gl
    0000542A 3F412047               MOV.L       R4,@(284:12,R15); mp.us
    0000542E 677D                   EXTU.W      R7,R7
    00005430 3F712045               MOV.L       R7,@(276:12,R15); mp.utime
    00005434 3F712046               MOV.L       R7,@(280:12,R15); mp.dtime
    00005438 3F412048               MOV.L       R4,@(288:12,R15); mp.ds
    0000543C 7FE0                   ADD         #-32,R15
    0000543E E649                   MOV         #73,R6     ; H'00000049
    00005440 4608                   SHLL2       R6
    00005442 E403                   MOV         #3,R4      ; H'00000003
    00005444 65F3                   MOV         R15,R5
    00005446 356C                   ADD         R6,R5
    00005448 5651                   MOV.L       @(4,R5),R6 ; (part of)mp
    0000544A 5253                   MOV.L       @(12,R5),R2; (part of)mp
    0000544C 1F61                   MOV.L       R6,@(4,R15)
    0000544E 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    00005450 1F23                   MOV.L       R2,@(12,R15)
    00005452 1F62                   MOV.L       R6,@(8,R15)
    00005454 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00005456 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00005458 6752                   MOV.L       @R5,R7     ; (part of)mp
    0000545A 1F24                   MOV.L       R2,@(16,R15)
    0000545C 1F65                   MOV.L       R6,@(20,R15)
    0000545E 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00005460 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00005462 2F72                   MOV.L       R7,@R15
    00005464 1F26                   MOV.L       R2,@(24,R15)
    00005466 D20C                   MOV.L       L1396+22,R2; _motor_SET
    00005468 420B                   JSR         @R2
    0000546A 1F67                   MOV.L       R6,@(28,R15)
    0000546C 7F20                   ADD         #32,R15
    0000546E E700                   MOV         #0,R7      ; H'00000000
    00005470 2F76                   MOV.L       R7,@-R15
    00005472 E603                   MOV         #3,R6      ; H'00000003
    00005474 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00005478 D30F                   MOV.L       L1396+54,R3; __$RelmvAction
    0000547A 430B                   JSR         @R3
    0000547C E451                   MOV         #81,R4     ; H'00000051
    0000547E A06E                   BRA         L1037
    00005480 0009                   NOP
    00005482              L1396:
    00005482 00000002               .RES.W      1
    00005484 <00000000>             .DATA.L     __$pProcAdr
    00005488 <00000000>             .DATA.L     __$GetPositionValue
    0000548C <00000078>             .DATA.L     H'00000078+__$Sp
    00005490 <00000000>             .DATA.L     _GetFactor
    00005494 <00000000>             .DATA.L     __$Sp
    00005498 <00000000>             .DATA.L     _motor_SET
    0000549C <000000B4>             .DATA.L     H'000000B4+__$Sp
    000054A0 <00000000>             .DATA.L     __$MapAction
    000054A4 <00000000>             .DATA.L     _mbx_send
    000054A8 <00000000>             .DATA.L     __$WaitAction
    000054AC <00000000>             .DATA.L     __$psns
    000054B0 <00000000>             .DATA.L     __$pProcDat
    000054B4 <0000000A>             .DATA.L     H'0000000A+__$SpPtn
    000054B8 <00000000>             .DATA.L     __$RelmvAction
    000054BC              L991:
    000054BC D744                   MOV.L       L1061,R7   ; H'00000006+__$SpPtn
    000054BE 31718000               MOVU.B      @(0,R7),R1 ; SpPtn.Z0_SpdNmlPtn
    000054C2 E00C                   MOV         #12,R0     ; H'0000000C
    000054C4 4180                   MULR        R0,R1
    000054C6 D243                   MOV.L       L1061+4,R2 ; H'00000078+__$Sp
    000054C8 6013                   MOV         R1,R0
    000054CA 042D                   MOV.W       @(R0,R2),R4; Sp[].ac
    000054CC 3F411074               MOV.W       R4,@(232:12,R15); mp.accel_type
    000054D0 D541                   MOV.L       L1061+8,R5 ; _GetFactor
    000054D2 450B                   JSR         @R5
    000054D4 E403                   MOV         #3,R4      ; H'00000003
    000054D6 D13E                   MOV.L       L1061,R1   ; H'00000006+__$SpPtn
    000054D8 32118000               MOVU.B      @(0,R1),R2 ; SpPtn.Z0_SpdNmlPtn
    000054DC 3F012039               MOV.L       R0,@(228:12,R15); mp.factor
    000054E0 E00C                   MOV         #12,R0     ; H'0000000C
    000054E2 4280                   MULR        R0,R2
    000054E4 D53D                   MOV.L       L1061+12,R5; __$Sp
    000054E6 6753                   MOV         R5,R7
    000054E8 777C                   ADD         #124,R7
    000054EA 6153                   MOV         R5,R1
    000054EC 757A                   ADD         #122,R5
    000054EE 6023                   MOV         R2,R0
    000054F0 027E                   MOV.L       @(R0,R7),R2; Sp[].fl
    000054F2 E780                   MOV         #-128,R7   ; H'FFFFFF80
    000054F4 677C                   EXTU.B      R7,R7
    000054F6 317C                   ADD         R7,R1
    000054F8 041E                   MOV.L       @(R0,R1),R4; Sp[].fh
    000054FA 3F21203B               MOV.L       R2,@(236:12,R15); mp.FL
    000054FE 3F41203C               MOV.L       R4,@(240:12,R15); mp.FH
    00005502 045D                   MOV.W       @(R0,R5),R4; Sp[].gl
    00005504 E500                   MOV         #0,R5      ; H'00000000
    00005506 3F51203F               MOV.L       R5,@(252:12,R15); mp.us
    0000550A 644D                   EXTU.W      R4,R4
    0000550C 3F41203D               MOV.L       R4,@(244:12,R15); mp.utime
    00005510 3F41203E               MOV.L       R4,@(248:12,R15); mp.dtime
    00005514 3F512040               MOV.L       R5,@(256:12,R15); mp.ds
    00005518 7FE0                   ADD         #-32,R15
    0000551A E741                   MOV         #65,R7     ; H'00000041
    0000551C 4708                   SHLL2       R7
    0000551E E402                   MOV         #2,R4      ; H'00000002
    00005520 65F3                   MOV         R15,R5
    00005522 357C                   ADD         R7,R5
    00005524 5651                   MOV.L       @(4,R5),R6 ; (part of)mp
    00005526 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00005528 1F61                   MOV.L       R6,@(4,R15)
    0000552A 5653                   MOV.L       @(12,R5),R6; (part of)mp
    0000552C 6752                   MOV.L       @R5,R7     ; (part of)mp
    0000552E 1F63                   MOV.L       R6,@(12,R15)
    00005530 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00005532 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    00005534 1F24                   MOV.L       R2,@(16,R15)
    00005536 1F65                   MOV.L       R6,@(20,R15)
    00005538 5256                   MOV.L       @(24,R5),R2; (part of)mp
    0000553A 5657                   MOV.L       @(28,R5),R6; (part of)mp
    0000553C 2F72                   MOV.L       R7,@R15
    0000553E 1F12                   MOV.L       R1,@(8,R15)
    00005540 1F26                   MOV.L       R2,@(24,R15)
    00005542 D227                   MOV.L       L1061+16,R2; _motor_SET
    00005544 420B                   JSR         @R2
    00005546 1F67                   MOV.L       R6,@(28,R15)
    00005548 7F20                   ADD         #32,R15
    0000554A              L995:
    0000554A              L1035:
    0000554A D426                   MOV.L       L1061+20,R4; H'00000018+__$BkP7
    0000554C 6242                   MOV.L       @R4,R2     ; BkP7.Z0_Taihi
    0000554E 2F26                   MOV.L       R2,@-R15
    00005550 E700                   MOV         #0,R7      ; H'00000000
    00005552 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00005556 E451                   MOV         #81,R4     ; H'00000051
    00005558 D323                   MOV.L       L1061+24,R3; __$AbsmvAction
    0000555A 430B                   JSR         @R3
    0000555C E602                   MOV         #2,R6      ; H'00000002
    0000555E              L1037:
    0000555E 7F04                   ADD         #4,R15
    00005560 2008                   TST         R0,R0
    00005562 3F01204A               MOV.L       R0,@(296:12,R15); result
    00005566 8B03                   BF          L1040
    00005568 E6F1                   MOV         #-15,R6    ; H'FFFFFFF1
    0000556A 666C                   EXTU.B      R6,R6
    0000556C 3F61204A               MOV.L       R6,@(296:12,R15); result
    00005570              L1040:
    00005570 D21E                   MOV.L       L1061+28,R2; __$pProcDat
    00005572 6622                   MOV.L       @R2,R6     ; pProcDat
    00005574 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005576 7001                   ADD         #1,R0
    00005578 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000557A              L1000:
             tskcmd.c       7791          break;
             tskcmd.c       7792      }
             tskcmd.c       7793      
             tskcmd.c       7794      return( result );
    0000557A 30F1604A               MOV.L       @(296:12,R15),R0; result
    0000557E 03000154               MOVI20      #340,R3    ; H'00000154
    00005582 3F3C                   ADD         R3,R15
    00005584 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       7795    }
    00005586 006B                   RTS/N
             tskcmd.c       7796    /***********************************************************************
             tskcmd.c       7797    * 
             tskcmd.c       7798    * [概要]  吸引
             tskcmd.c       7799    * [引数]  
             tskcmd.c       7800    * [戻値]  
             tskcmd.c       7801    * [補足]  P1  P2   P3     P4        P5  P6       P7       P8        P9  P10  P11  P12  P13    P14
             tskcmd.c       7802    *           *8       ﾊﾟﾀ-ﾝ  吸引位置  -   吸引速度 吸引高開 吸引高終  -   -    -    -    吸引量 -
             tskcmd.c       7803    * 
             tskcmd.c       7804    ***********************************************************************/
             tskcmd.c       7805    static ER  CmdActionSuc( T_CMD_MSG* mrcv )
    00005588              __$CmdActionSuc:                 ; function: __$CmdActionSuc
                                                           ; frame size=252
    00005588 48F0                   MOVMU.L     R8,@-R15
    0000558A 03F0FF44               MOVI20      #-188,R3   ; H'FFFFFF44
    0000558E 3F3C                   ADD         R3,R15
             tskcmd.c       7806    {
             tskcmd.c       7807      ER result = E_CONTINUE;
             tskcmd.c       7808      UB bcid;
             tskcmd.c       7809      UB prid1;
             tskcmd.c       7810      UB actstep;
             tskcmd.c       7811      UB spdptn;
             tskcmd.c       7812      UB inf1;
             tskcmd.c       7813      UB inf2;
             tskcmd.c       7814      UB movptn;
             tskcmd.c       7815      UB devno;
             tskcmd.c       7816      INT movval;
             tskcmd.c       7817      UB dummy;
             tskcmd.c       7818    
             tskcmd.c       7819      bcid  = mrcv->msgdata.bcid;
    00005590 3841801A               MOVU.B      @(26,R4),R8; (mrcv)->bcid
             tskcmd.c       7820      prid1   = mrcv->msgdata.prid1;
    00005594 39418018               MOVU.B      @(24,R4),R9; (mrcv)->prid1
             tskcmd.c       7821      inf1  = mrcv->msgdata.inf;
    00005598 3C41801C               MOVU.B      @(28,R4),R12; (mrcv)->inf
             tskcmd.c       7822      inf2  = mrcv->msgdata.inf2;
    0000559C 3D41801D               MOVU.B      @(29,R4),R13; (mrcv)->inf2
             tskcmd.c       7823      actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       7824    
             tskcmd.c       7825    //    psel.pno = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
             tskcmd.c       7826    //    psel.smp = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
             tskcmd.c       7827    //    psel.val = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
             tskcmd.c       7828    
             tskcmd.c       7829    
             tskcmd.c       7830      switch( pProcDat->Stp )
    000055A0 D412                   MOV.L       L1061+28,R4; __$pProcDat
    000055A2 6083                   MOV         R8,R0
    000055A4 6542                   MOV.L       @R4,R5     ; pProcDat
    000055A6 4008                   SHLL2       R0
    000055A8 EBF1                   MOV         #-15,R11   ; H'FFFFFFF1
    000055AA DE11                   MOV.L       L1061+32,R14; H'00000002+__$bcctrl
    000055AC 4000                   SHLL        R0
    000055AE E70E                   MOV         #14,R7     ; H'0000000E
    000055B0 01EC                   MOV.B       @(R0,R14),R1; bcctrl[].actstp
    000055B2 6BBC                   EXTU.B      R11,R11
    000055B4 36518002               MOVU.B      @(2,R5),R6 ; (pProcDat)->Stp
    000055B8 71FF                   ADD         #-1,R1
    000055BA 6AB3                   MOV         R11,R10
    000055BC 3676                   CMP/HI      R7,R6
    000055BE 8F02                   BF/S        L1434
    000055C0 6E1C                   EXTU.B      R1,R14
    000055C2 A244                   BRA         L1060
    000055C4 0009                   NOP
    000055C6              L1434:
    000055C6 4600                   SHLL        R6
    000055C8 C70A                   MOVA        L1062,R0
    000055CA 006D                   MOV.W       @(R0,R6),R0
    000055CC 0023                   BRAF        R0
    000055CE 0009                   NOP
    000055D0              L1061:
    000055D0 <00000006>             .DATA.L     H'00000006+__$SpPtn
    000055D4 <00000078>             .DATA.L     H'00000078+__$Sp
    000055D8 <00000000>             .DATA.L     _GetFactor
    000055DC <00000000>             .DATA.L     __$Sp
    000055E0 <00000000>             .DATA.L     _motor_SET
    000055E4 <00000018>             .DATA.L     H'00000018+__$BkP7
    000055E8 <00000000>             .DATA.L     __$AbsmvAction
    000055EC <00000000>             .DATA.L     __$pProcDat
    000055F0 <00000002>             .DATA.L     H'00000002+__$bcctrl
    000055F4              L1062:
    000055F4 0042                   .DATA.W     L1043-L1061
    000055F6 0048                   .DATA.W     L1044-L1061
    000055F8 0456                   .DATA.W     L1045-L1061
    000055FA 00DA                   .DATA.W     L1046-L1061
    000055FC 016A                   .DATA.W     L1047-L1061
    000055FE 017C                   .DATA.W     L1048-L1061
    00005600 0196                   .DATA.W     L1049-L1061
    00005602 01AC                   .DATA.W     L1050-L1061
    00005604 02EA                   .DATA.W     L1051-L1061
    00005606 0312                   .DATA.W     L1052-L1061
    00005608 033C                   .DATA.W     L1053-L1061
    0000560A 0342                   .DATA.W     L1054-L1061
    0000560C 0372                   .DATA.W     L1055-L1061
    0000560E 03C8                   .DATA.W     L1056-L1061
    00005610 0452                   .DATA.W     L1057-L1061
    00005612              L1043:
             tskcmd.c       7831      {
             tskcmd.c       7832      case 0: // 0． 待機
             tskcmd.c       7833          pProcDat->Stp++;
    00005612 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00005614 7001                   ADD         #1,R0
    00005616 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00005618              L1044:
             tskcmd.c       7834          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7835    
             tskcmd.c       7836      case 1: // 1． Z軸通常速度設定
             tskcmd.c       7837          devno  = MT_Z0;
             tskcmd.c       7838          spdptn = SpPtn.Z0_SpdNmlPtn;
    00005618 DBCF                   MOV.L       L1397+2,R11; H'00000006+__$SpPtn
    0000561A 60B0                   MOV.B       @R11,R0    ; SpPtn.Z0_SpdNmlPtn
             tskcmd.c       7839          movval = GetPositionValue(POS_Z0_TAIHI);
    0000561C DCCF                   MOV.L       L1397+6,R12; H'00000078+__$Sp
    0000561E 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
    00005622 D3CF                   MOV.L       L1397+10,R3; __$GetPositionValue
    00005624 430B                   JSR         @R3
    00005626 E407                   MOV         #7,R4      ; H'00000007
             tskcmd.c       7840    
             tskcmd.c       7841          MAC_SPEED_SET( devno, 
    00005628 3EF180A4               MOVU.B      @(164,R15),R14; spdptn
    0000562C 3F01202A               MOV.L       R0,@(168:12,R15); movval
    00005630 E00C                   MOV         #12,R0     ; H'0000000C
    00005632 4E80                   MULR        R0,R14
    00005634 DDCB                   MOV.L       L1397+14,R13; __$Sp
    00005636 60E3                   MOV         R14,R0
    00005638 01CD                   MOV.W       @(R0,R12),R1; Sp[].ac
    0000563A 3FE1202B               MOV.L       R14,@(172:12,R15)
    0000563E 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
    00005642 D1C9                   MOV.L       L1397+18,R1; _GetFactor
    00005644 410B                   JSR         @R1
    00005646 E403                   MOV         #3,R4      ; H'00000003
    00005648 2F02                   MOV.L       R0,@R15    ; mp.factor
    0000564A E780                   MOV         #-128,R7   ; H'FFFFFF80
    0000564C 60E3                   MOV         R14,R0
    0000564E 64D3                   MOV         R13,R4
    00005650 747C                   ADD         #124,R4
    00005652 677C                   EXTU.B      R7,R7
    00005654 024E                   MOV.L       @(R0,R4),R2; Sp[].fl
    00005656 65D3                   MOV         R13,R5
    00005658 7D7A                   ADD         #122,R13
    0000565A 357C                   ADD         R7,R5
    0000565C 07DD                   MOV.W       @(R0,R13),R7; Sp[].gl
    0000565E 095E                   MOV.L       @(R0,R5),R9; Sp[].fh
    00005660 E100                   MOV         #0,R1      ; H'00000000
    00005662 677D                   EXTU.W      R7,R7
    00005664 1F22                   MOV.L       R2,@(8,R15); mp.FL
    00005666 1F93                   MOV.L       R9,@(12,R15); mp.FH
    00005668 1F74                   MOV.L       R7,@(16,R15); mp.utime
    0000566A 1F75                   MOV.L       R7,@(20,R15); mp.dtime
    0000566C 1F16                   MOV.L       R1,@(24,R15); mp.us
    0000566E 1F17                   MOV.L       R1,@(28,R15); mp.ds
    00005670 7FE0                   ADD         #-32,R15
    00005672 65F3                   MOV         R15,R5
    00005674 7520                   ADD         #32,R5
    00005676 5951                   MOV.L       @(4,R5),R9 ; (part of)mp
    00005678 E402                   MOV         #2,R4      ; H'00000002
    0000567A 5B52                   MOV.L       @(8,R5),R11; (part of)mp
    0000567C 5C54                   MOV.L       @(16,R5),R12; (part of)mp
    0000567E 6752                   MOV.L       @R5,R7     ; (part of)mp
    00005680 1F91                   MOV.L       R9,@(4,R15)
    00005682 5953                   MOV.L       @(12,R5),R9; (part of)mp
    00005684 1FB2                   MOV.L       R11,@(8,R15)
    00005686 5B55                   MOV.L       @(20,R5),R11; (part of)mp
    00005688 1FC4                   MOV.L       R12,@(16,R15)
    0000568A 5C56                   MOV.L       @(24,R5),R12; (part of)mp
    0000568C 5257                   MOV.L       @(28,R5),R2; (part of)mp
    0000568E 2F72                   MOV.L       R7,@R15
    00005690 1F93                   MOV.L       R9,@(12,R15)
    00005692 1FB5                   MOV.L       R11,@(20,R15)
    00005694 1FC6                   MOV.L       R12,@(24,R15)
    00005696 DDB5                   MOV.L       L1397+22,R13; _motor_SET
    00005698 4D0B                   JSR         @R13
    0000569A 1F27                   MOV.L       R2,@(28,R15)
    0000569C 7F20                   ADD         #32,R15
             tskcmd.c       7842                         Sp[devno][spdptn].ac, 
             tskcmd.c       7843                         Sp[devno][spdptn].fl, 
             tskcmd.c       7844                         Sp[devno][spdptn].fh, 
             tskcmd.c       7845                         Sp[devno][spdptn].gl );
             tskcmd.c       7846          pProcDat->Stp++;
    0000569E DEB4                   MOV.L       L1397+26,R14; __$pProcDat
    000056A0 66E2                   MOV.L       @R14,R6    ; pProcDat
    000056A2 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000056A4 7001                   ADD         #1,R0
    000056A6 A1BE                   BRA         L1065
    000056A8 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000056AA              L1046:
             tskcmd.c       7847          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7848    
             tskcmd.c       7849      case 2: // 2． Z軸退避高さへ移動
             tskcmd.c       7850          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       7851          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7852          pProcDat->Stp++;
             tskcmd.c       7853          break;
             tskcmd.c       7854    
             tskcmd.c       7855      case 3: // 3． Y0軸通常速度設定
             tskcmd.c       7856          devno  = MT_Y0;
             tskcmd.c       7857          spdptn = SpPtn.Y0_SpdNmlPtn;
    000056AA D9B2                   MOV.L       L1397+30,R9; H'00000005+__$SpPtn
    000056AC 6090                   MOV.B       @R9,R0     ; SpPtn.Y0_SpdNmlPtn
    000056AE D4B2                   MOV.L       L1397+34,R4; __$pProcAdr
    000056B0 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
             tskcmd.c       7858          movptn = pProcAdr->step[actstep].par03;
             tskcmd.c       7859          movval = GetPositionValue(movptn);
    000056B4 E014                   MOV         #20,R0     ; H'00000014
    000056B6 6B42                   MOV.L       @R4,R11    ; pProcAdr
    000056B8 4E80                   MULR        R0,R14
    000056BA 7B02                   ADD         #2,R11
    000056BC 60E3                   MOV         R14,R0
    000056BE D3A8                   MOV.L       L1397+10,R3; __$GetPositionValue
    000056C0 430B                   JSR         @R3
    000056C2 04BC                   MOV.B       @(R0,R11),R4; pProcAdr->step[].par03
             tskcmd.c       7860          
             tskcmd.c       7861          MAC_SPEED_SET( devno, 
    000056C4 31F180A4               MOVU.B      @(164,R15),R1; spdptn
    000056C8 3F01202A               MOV.L       R0,@(168:12,R15); movval
    000056CC E00C                   MOV         #12,R0     ; H'0000000C
    000056CE 4180                   MULR        R0,R1
    000056D0 D4AA                   MOV.L       L1397+38,R4; H'0000003C+__$Sp
    000056D2 6013                   MOV         R1,R0
    000056D4 054D                   MOV.W       @(R0,R4),R5; Sp[].ac
    000056D6 3F11202B               MOV.L       R1,@(172:12,R15)
    000056DA 3F511012               MOV.W       R5,@(36:12,R15); mp.accel_type
    000056DE D6A2                   MOV.L       L1397+18,R6; _GetFactor
    000056E0 460B                   JSR         @R6
    000056E2 E403                   MOV         #3,R4      ; H'00000003
    000056E4 1F08                   MOV.L       R0,@(32,R15); mp.factor
    000056E6 D59F                   MOV.L       L1397+14,R5; __$Sp
    000056E8 30F1602B               MOV.L       @(172:12,R15),R0
    000056EC 6753                   MOV         R5,R7
    000056EE 7740                   ADD         #64,R7
    000056F0 6953                   MOV         R5,R9
    000056F2 753E                   ADD         #62,R5
    000056F4 0C7E                   MOV.L       @(R0,R7),R12; Sp[].fl
    000056F6 7944                   ADD         #68,R9
    000056F8 0B5D                   MOV.W       @(R0,R5),R11; Sp[].gl
    000056FA 0D9E                   MOV.L       @(R0,R9),R13; Sp[].fh
    000056FC 1FCA                   MOV.L       R12,@(40,R15); mp.FL
    000056FE 6BBD                   EXTU.W      R11,R11
    00005700 EC00                   MOV         #0,R12     ; H'00000000
    00005702 1FDB                   MOV.L       R13,@(44,R15); mp.FH
    00005704 1FBC                   MOV.L       R11,@(48,R15); mp.utime
    00005706 1FBD                   MOV.L       R11,@(52,R15); mp.dtime
    00005708 1FCE                   MOV.L       R12,@(56,R15); mp.us
    0000570A 1FCF                   MOV.L       R12,@(60,R15); mp.ds
    0000570C 7FE0                   ADD         #-32,R15
    0000570E 62F3                   MOV         R15,R2
    00005710 7240                   ADD         #64,R2
    00005712 6722                   MOV.L       @R2,R7     ; (part of)mp
    00005714 E401                   MOV         #1,R4      ; H'00000001
    00005716 5D21                   MOV.L       @(4,R2),R13; (part of)mp
    00005718 2F72                   MOV.L       R7,@R15
    0000571A 5E22                   MOV.L       @(8,R2),R14; (part of)mp
    0000571C 5923                   MOV.L       @(12,R2),R9; (part of)mp
    0000571E 5124                   MOV.L       @(16,R2),R1; (part of)mp
    00005720 5B25                   MOV.L       @(20,R2),R11; (part of)mp
    00005722 5726                   MOV.L       @(24,R2),R7; (part of)mp
    00005724 5627                   MOV.L       @(28,R2),R6; (part of)mp
    00005726 1FD1                   MOV.L       R13,@(4,R15)
    00005728 1FE2                   MOV.L       R14,@(8,R15)
    0000572A 1F93                   MOV.L       R9,@(12,R15)
    0000572C 1F14                   MOV.L       R1,@(16,R15)
    0000572E 1FB5                   MOV.L       R11,@(20,R15)
    00005730 1F76                   MOV.L       R7,@(24,R15)
    00005732 D28E                   MOV.L       L1397+22,R2; _motor_SET
    00005734 420B                   JSR         @R2
    00005736 1F67                   MOV.L       R6,@(28,R15)
    00005738 7F20                   ADD         #32,R15
    0000573A              L1047:
             tskcmd.c       7862                         Sp[devno][spdptn].ac, 
             tskcmd.c       7863                         Sp[devno][spdptn].fl, 
             tskcmd.c       7864                         Sp[devno][spdptn].fh, 
             tskcmd.c       7865                         Sp[devno][spdptn].gl );
             tskcmd.c       7866          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7867    
             tskcmd.c       7868      case 4: // 4． Y0軸指定位置移動
             tskcmd.c       7869          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    0000573A 7FFC                   ADD         #-4,R15
    0000573C 6583                   MOV         R8,R5
    0000573E 3CF1602B               MOV.L       @(172:12,R15),R12; movval
    00005742 E700                   MOV         #0,R7      ; H'00000000
    00005744 E601                   MOV         #1,R6      ; H'00000001
    00005746 2FC2                   MOV.L       R12,@R15
    00005748 A175                   BRA         L1068
    0000574A E451                   MOV         #81,R4     ; H'00000051
    0000574C              L1048:
             tskcmd.c       7870          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7871          pProcDat->Stp++;
             tskcmd.c       7872          break;
             tskcmd.c       7873    
             tskcmd.c       7874      case 5: // 5． Z軸吸引高さ位置移動
             tskcmd.c       7875          devno  = MT_Z0;
             tskcmd.c       7876          movptn = pProcAdr->step[actstep].par06;
             tskcmd.c       7877          movval = GetPositionValue(movptn);
    0000574C E014                   MOV         #20,R0     ; H'00000014
    0000574E 4E80                   MULR        R0,R14
    00005750 D289                   MOV.L       L1397+34,R2; __$pProcAdr
    00005752 6522                   MOV.L       @R2,R5     ; pProcAdr
    00005754 7505                   ADD         #5,R5
    00005756 60E3                   MOV         R14,R0
    00005758 D381                   MOV.L       L1397+10,R3; __$GetPositionValue
    0000575A 430B                   JSR         @R3
    0000575C 045C                   MOV.B       @(R0,R5),R4; pProcAdr->step[].par06
    0000575E 3F01202A               MOV.L       R0,@(168:12,R15); movval
    00005762 A160                   BRA         L1065
    00005764 0009                   NOP
    00005766              L1049:
             tskcmd.c       7878    
             tskcmd.c       7879          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       7880          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7881          pProcDat->Stp++;
             tskcmd.c       7882          break;
             tskcmd.c       7883    
             tskcmd.c       7884      case 6: // 6． 圧力基板制御：未指定電磁弁ON、指定電磁弁OFF
             tskcmd.c       7885          vout.target = 0x01fff;
    00005766 06001FFF               MOVI20      #8191,R6   ; H'00001FFF
    0000576A DE85                   MOV.L       L1397+42,R14; __$vout
             tskcmd.c       7886          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
    0000576C D385                   MOV.L       L1397+46,R3; __$NzlTargetGet
    0000576E 430B                   JSR         @R3
    00005770 2E61                   MOV.W       R6,@R14    ; vout.target
    00005772 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    00005776 D582                   MOV.L       L1397+42,R5; __$vout
    00005778 A0D0                   BRA         L1071
    0000577A 204A                   XOR         R4,R0
    0000577C              L1050:
             tskcmd.c       7887          
             tskcmd.c       7888          mbx_send    (
             tskcmd.c       7889                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7890                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7891                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7892                          prid1,               // prid1
             tskcmd.c       7893                          bcid,                // bcid
             tskcmd.c       7894                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       7895                          inf1,                // sts
             tskcmd.c       7896                          inf2,                // sts2
             tskcmd.c       7897                          (UB *)&vout.target,  // data
             tskcmd.c       7898                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7899                      );
             tskcmd.c       7900          pProcDat->Stp++;
             tskcmd.c       7901          break;
             tskcmd.c       7902    
             tskcmd.c       7903      case 7: // 7． P軸吸引速度設定
             tskcmd.c       7904          devno  = MT_Z0;
             tskcmd.c       7905          spdptn = (pProcAdr->step[actstep].par05 >> 4);
    0000577C E014                   MOV         #20,R0     ; H'00000014
    0000577E 6DE3                   MOV         R14,R13
    00005780 4D80                   MULR        R0,R13
    00005782 DA7D                   MOV.L       L1397+34,R10; __$pProcAdr
    00005784 64A2                   MOV.L       @R10,R4    ; pProcAdr
    00005786 E7FC                   MOV         #-4,R7     ; H'FFFFFFFC
    00005788 6143                   MOV         R4,R1
    0000578A 7104                   ADD         #4,R1
    0000578C 60D3                   MOV         R13,R0
    0000578E 021C                   MOV.B       @(R0,R1),R2; pProcAdr->step[].par05
             tskcmd.c       7906          movptn = pProcAdr->step[actstep].par06;             // 吸引終了高さ
             tskcmd.c       7907          movval = GetPositionValue(movptn);
    00005790 7405                   ADD         #5,R4
    00005792 652C                   EXTU.B      R2,R5
    00005794 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par06
    00005796 457C                   SHAD        R7,R5
    00005798 3F5100B4               MOV.B       R5,@(180:12,R15)
    0000579C D370                   MOV.L       L1397+10,R3; __$GetPositionValue
    0000579E 434B                   JSR/N       @R3
             tskcmd.c       7908    
             tskcmd.c       7909          MAC_SPEED_SET( devno, 
    000057A0 3CF180B4               MOVU.B      @(180,R15),R12
    000057A4 3F01202A               MOV.L       R0,@(168:12,R15); movval
    000057A8 E00C                   MOV         #12,R0     ; H'0000000C
    000057AA 4C80                   MULR        R0,R12
    000057AC 3FD1202C               MOV.L       R13,@(176:12,R15)
    000057B0 DD6A                   MOV.L       L1397+6,R13; H'00000078+__$Sp
    000057B2 3FC1202E               MOV.L       R12,@(184:12,R15)
    000057B6 60C3                   MOV         R12,R0
    000057B8 0CDD                   MOV.W       @(R0,R13),R12; Sp[].ac
    000057BA DD6B                   MOV.L       L1397+18,R13; _GetFactor
    000057BC 4D0B                   JSR         @R13
    000057BE E403                   MOV         #3,R4      ; H'00000003
    000057C0 E340                   MOV         #64,R3     ; H'00000040
    000057C2 33FC                   ADD         R15,R3
    000057C4 2302                   MOV.L       R0,@R3     ; mp.factor
    000057C6 D567                   MOV.L       L1397+14,R5; __$Sp
    000057C8 30F1602E               MOV.L       @(184:12,R15),R0
    000057CC 6153                   MOV         R5,R1
    000057CE 717C                   ADD         #124,R1
    000057D0 0D1E                   MOV.L       @(R0,R1),R13; Sp[].fl
    000057D2 E180                   MOV         #-128,R1   ; H'FFFFFF80
    000057D4 611C                   EXTU.B      R1,R1
    000057D6 6453                   MOV         R5,R4
    000057D8 341C                   ADD         R1,R4
    000057DA 757A                   ADD         #122,R5
    000057DC 024E                   MOV.L       @(R0,R4),R2; Sp[].fh
    000057DE 045D                   MOV.W       @(R0,R5),R4; Sp[].gl
    000057E0 E500                   MOV         #0,R5      ; H'00000000
    000057E2 3FC11022               MOV.W       R12,@(68:12,R15); mp.accel_type
    000057E6 644D                   EXTU.W      R4,R4
    000057E8 13D2                   MOV.L       R13,@(8,R3); mp.FL
    000057EA 1323                   MOV.L       R2,@(12,R3); mp.FH
    000057EC 1344                   MOV.L       R4,@(16,R3); mp.utime
    000057EE 1345                   MOV.L       R4,@(20,R3); mp.dtime
    000057F0 1356                   MOV.L       R5,@(24,R3); mp.us
    000057F2 1357                   MOV.L       R5,@(28,R3); mp.ds
    000057F4 7FE0                   ADD         #-32,R15
    000057F6 62F3                   MOV         R15,R2
    000057F8 7260                   ADD         #96,R2
    000057FA 5721                   MOV.L       @(4,R2),R7 ; (part of)mp
    000057FC E402                   MOV         #2,R4      ; H'00000002
    000057FE 5C23                   MOV.L       @(12,R2),R12; (part of)mp
    00005800 5D24                   MOV.L       @(16,R2),R13; (part of)mp
    00005802 6522                   MOV.L       @R2,R5     ; (part of)mp
    00005804 1F71                   MOV.L       R7,@(4,R15)
    00005806 5722                   MOV.L       @(8,R2),R7 ; (part of)mp
    00005808 1FC3                   MOV.L       R12,@(12,R15)
    0000580A 5C25                   MOV.L       @(20,R2),R12; (part of)mp
    0000580C 1FD4                   MOV.L       R13,@(16,R15)
    0000580E 5D26                   MOV.L       @(24,R2),R13; (part of)mp
    00005810 5127                   MOV.L       @(28,R2),R1; (part of)mp
    00005812 2F52                   MOV.L       R5,@R15
    00005814 1F72                   MOV.L       R7,@(8,R15)
    00005816 1FC5                   MOV.L       R12,@(20,R15)
    00005818 1FD6                   MOV.L       R13,@(24,R15)
    0000581A DC54                   MOV.L       L1397+22,R12; _motor_SET
    0000581C 4C0B                   JSR         @R12
    0000581E 1F17                   MOV.L       R1,@(28,R15)
    00005820 7F20                   ADD         #32,R15
             tskcmd.c       7910                         Sp[devno][spdptn].ac, 
             tskcmd.c       7911                         Sp[devno][spdptn].fl, 
             tskcmd.c       7912                         Sp[devno][spdptn].fh, 
             tskcmd.c       7913                         Sp[devno][spdptn].gl );
             tskcmd.c       7914    
             tskcmd.c       7915          devno  = MT_P0;
             tskcmd.c       7916          spdptn = (pProcAdr->step[actstep].par05 & 0x0f);
             tskcmd.c       7917          MAC_SPEED_SET( devno, 
    00005822 64A2                   MOV.L       @R10,R4    ; pProcAdr
    00005824 30F1602C               MOV.L       @(176:12,R15),R0
    00005828 7404                   ADD         #4,R4
    0000582A EC60                   MOV         #96,R12    ; H'00000060
    0000582C 004C                   MOV.B       @(R0,R4),R0; pProcAdr->step[].par05
    0000582E 3CFC                   ADD         R15,R12
    00005830 D655                   MOV.L       L1397+50,R6; H'000000B4+__$Sp
    00005832 C90F                   AND         #15,R0
    00005834 E403                   MOV         #3,R4      ; H'00000003
    00005836 6503                   MOV         R0,R5
    00005838 E00C                   MOV         #12,R0     ; H'0000000C
    0000583A 4580                   MULR        R0,R5
    0000583C 6053                   MOV         R5,R0
    0000583E 006D                   MOV.W       @(R0,R6),R0; Sp[].ac
    00005840 3F51202B               MOV.L       R5,@(172:12,R15)
    00005844 D748                   MOV.L       L1397+18,R7; _GetFactor
    00005846 470B                   JSR         @R7
    00005848 81C2                   MOV.W       R0,@(4,R12); mp.accel_type
    0000584A E1B8                   MOV         #-72,R1    ; H'FFFFFFB8
    0000584C 2C02                   MOV.L       R0,@R12    ; mp.factor
    0000584E D745                   MOV.L       L1397+14,R7; __$Sp
    00005850 611C                   EXTU.B      R1,R1
    00005852 E4BC                   MOV         #-68,R4    ; H'FFFFFFBC
    00005854 30F1602B               MOV.L       @(172:12,R15),R0
    00005858 6A73                   MOV         R7,R10
    0000585A 3A1C                   ADD         R1,R10
    0000585C 02AE                   MOV.L       @(R0,R10),R2; Sp[].fl
    0000585E EAB6                   MOV         #-74,R10   ; H'FFFFFFB6
    00005860 6AAC                   EXTU.B      R10,R10
    00005862 E100                   MOV         #0,R1      ; H'00000000
    00005864 644C                   EXTU.B      R4,R4
    00005866 1C22                   MOV.L       R2,@(8,R12); mp.FL
    00005868 6D73                   MOV         R7,R13
    0000586A 37AC                   ADD         R10,R7
    0000586C 3D4C                   ADD         R4,R13
    0000586E 0A7D                   MOV.W       @(R0,R7),R10; Sp[].gl
    00005870 05DE                   MOV.L       @(R0,R13),R5; Sp[].fh
    00005872 6AAD                   EXTU.W      R10,R10
    00005874 1C16                   MOV.L       R1,@(24,R12); mp.us
    00005876 1C53                   MOV.L       R5,@(12,R12); mp.FH
    00005878 1CA4                   MOV.L       R10,@(16,R12); mp.utime
    0000587A 1CA5                   MOV.L       R10,@(20,R12); mp.dtime
    0000587C 1C17                   MOV.L       R1,@(28,R12); mp.ds
    0000587E 7FE0                   ADD         #-32,R15
    00005880 EA80                   MOV         #-128,R10  ; H'FFFFFF80
    00005882 65F3                   MOV         R15,R5
    00005884 6AAC                   EXTU.B      R10,R10
    00005886 E403                   MOV         #3,R4      ; H'00000003
    00005888 35AC                   ADD         R10,R5
    0000588A 5651                   MOV.L       @(4,R5),R6 ; (part of)mp
    0000588C 5254                   MOV.L       @(16,R5),R2; (part of)mp
    0000588E 1F61                   MOV.L       R6,@(4,R15)
    00005890 5653                   MOV.L       @(12,R5),R6; (part of)mp
    00005892 6C52                   MOV.L       @R5,R12    ; (part of)mp
    00005894 1F63                   MOV.L       R6,@(12,R15)
    00005896 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00005898 5A52                   MOV.L       @(8,R5),R10; (part of)mp
    0000589A 1F24                   MOV.L       R2,@(16,R15)
    0000589C 1F65                   MOV.L       R6,@(20,R15)
    0000589E 5256                   MOV.L       @(24,R5),R2; (part of)mp
    000058A0 5657                   MOV.L       @(28,R5),R6; (part of)mp
    000058A2 2FC2                   MOV.L       R12,@R15
    000058A4 1FA2                   MOV.L       R10,@(8,R15)
    000058A6 1F26                   MOV.L       R2,@(24,R15)
    000058A8 DD30                   MOV.L       L1397+22,R13; _motor_SET
    000058AA 4D0B                   JSR         @R13
    000058AC 1F67                   MOV.L       R6,@(28,R15)
    000058AE 7F20                   ADD         #32,R15
             tskcmd.c       7918                         Sp[devno][spdptn].ac, 
             tskcmd.c       7919                         Sp[devno][spdptn].fl, 
             tskcmd.c       7920                         Sp[devno][spdptn].fh, 
             tskcmd.c       7921                         Sp[devno][spdptn].gl );
             tskcmd.c       7922          pProcDat->Stp++;
    000058B0 D22F                   MOV.L       L1397+26,R2; __$pProcDat
    000058B2 6622                   MOV.L       @R2,R6     ; pProcDat
    000058B4 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000058B6 7001                   ADD         #1,R0
    000058B8 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000058BA              L1051:
             tskcmd.c       7923          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7924    
             tskcmd.c       7925      case 8: // 8． 吸引開始（P軸吸引 & Z軸下降）
             tskcmd.c       7926    //      MapAction( UB prid1, UB bcid, UB mm1, UB mm2, INT pppp1, INT pppp2 );
             tskcmd.c       7927          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
    000058BA E014                   MOV         #20,R0     ; H'00000014
    000058BC 4E80                   MULR        R0,R14
    000058BE D72E                   MOV.L       L1397+34,R7; __$pProcAdr
    000058C0 6C72                   MOV.L       @R7,R12    ; pProcAdr
    000058C2 7C0C                   ADD         #12,R12
    000058C4 60E3                   MOV         R14,R0
    000058C6 0CCE                   MOV.L       @(R0,R12),R12; pProcAdr->step[].par13
    000058C8 2FC6                   MOV.L       R12,@-R15
    000058CA 7FFC                   ADD         #-4,R15
    000058CC E703                   MOV         #3,R7      ; H'00000003
    000058CE 3AF1602C               MOV.L       @(176:12,R15),R10; movval
    000058D2 E602                   MOV         #2,R6      ; H'00000002
    000058D4 6583                   MOV         R8,R5
    000058D6 2FA2                   MOV.L       R10,@R15
    000058D8 D32C                   MOV.L       L1397+54,R3; __$MapAction
    000058DA 430B                   JSR         @R3
    000058DC 6493                   MOV         R9,R4
    000058DE A0B1                   BRA         L1074
    000058E0 7F08                   ADD         #8,R15
    000058E2              L1052:
             tskcmd.c       7928    
             tskcmd.c       7929          
             tskcmd.c       7930          
             tskcmd.c       7931          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7932          pProcDat->Stp++;
             tskcmd.c       7933          break;
             tskcmd.c       7934    
             tskcmd.c       7935      case 9: // 9． 圧力基板制御：吸引動作中に指定したノズルチャンネルの圧力を監視
             tskcmd.c       7936              //     ※各チャンネルの圧力センサ値が設定値を上回った場合、エラーとし電磁弁をONにする。
             tskcmd.c       7937          mbx_send    (
             tskcmd.c       7938                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7939                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7940                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7941                          prid1,               // prid1
             tskcmd.c       7942                          bcid,                // bcid
             tskcmd.c       7943                          ID_MSG_PRESSREN,     // msgid
             tskcmd.c       7944                          inf1,                // sts
             tskcmd.c       7945                          inf2,                // sts2
             tskcmd.c       7946                          &dummy,              // data
             tskcmd.c       7947                          sizeof( dummy )      // siz
             tskcmd.c       7948                      );
    000058E2 EE01                   MOV         #1,R14     ; H'00000001
    000058E4 2FE6                   MOV.L       R14,@-R15
    000058E6 EE84                   MOV         #-124,R14  ; H'FFFFFF84
    000058E8 6EEC                   EXTU.B      R14,R14
    000058EA 61F3                   MOV         R15,R1
    000058EC 31EC                   ADD         R14,R1
    000058EE 2F16                   MOV.L       R1,@-R15
    000058F0 2FD6                   MOV.L       R13,@-R15
    000058F2 2FC6                   MOV.L       R12,@-R15
    000058F4 E198                   MOV         #-104,R1   ; H'FFFFFF98
    000058F6 611C                   EXTU.B      R1,R1
    000058F8 2F16                   MOV.L       R1,@-R15
    000058FA 2F86                   MOV.L       R8,@-R15
    000058FC E60D                   MOV         #13,R6     ; H'0000000D
    000058FE E50C                   MOV         #12,R5     ; H'0000000C
    00005900 6463                   MOV         R6,R4
    00005902 DA23                   MOV.L       L1397+58,R10; _mbx_send
    00005904 4A0B                   JSR         @R10
    00005906 6793                   MOV         R9,R7
    00005908 A09C                   BRA         L1074
    0000590A 7F18                   ADD         #24,R15
    0000590C              L1053:
             tskcmd.c       7949          pProcDat->Stp++;
             tskcmd.c       7950          break;
             tskcmd.c       7951    
             tskcmd.c       7952      case 10:// 10．吸引動作終了
             tskcmd.c       7953          pProcDat->Stp++;
    0000590C 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    0000590E 7001                   ADD         #1,R0
    00005910 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00005912              L1054:
             tskcmd.c       7954    
             tskcmd.c       7955    
             tskcmd.c       7956      case 11:// 11．圧力基板制御：圧力監視終了。全てのノズルチャンネルの電磁弁をOFFにする。
             tskcmd.c       7957          vout.target = 0x0fff;
    00005912 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    00005916 D51A                   MOV.L       L1397+42,R5; __$vout
    00005918 2541                   MOV.W       R4,@R5     ; vout.target
             tskcmd.c       7958          vout.valout = 0x0000;
    0000591A E000                   MOV         #0,R0      ; H'00000000
    0000591C              L1071:
    0000591C E404                   MOV         #4,R4      ; H'00000004
    0000591E 8151                   MOV.W       R0,@(2,R5) ; vout.valout
    00005920 2F46                   MOV.L       R4,@-R15
    00005922 D717                   MOV.L       L1397+42,R7; __$vout
    00005924 2F76                   MOV.L       R7,@-R15
    00005926 2FD6                   MOV.L       R13,@-R15
    00005928 2FC6                   MOV.L       R12,@-R15
    0000592A EC9B                   MOV         #-101,R12  ; H'FFFFFF9B
    0000592C 6CCC                   EXTU.B      R12,R12
    0000592E 2FC6                   MOV.L       R12,@-R15
    00005930 2F86                   MOV.L       R8,@-R15
    00005932 E60D                   MOV         #13,R6     ; H'0000000D
    00005934 E50C                   MOV         #12,R5     ; H'0000000C
    00005936 6463                   MOV         R6,R4
    00005938 DA15                   MOV.L       L1397+58,R10; _mbx_send
    0000593A 4A0B                   JSR         @R10
    0000593C 6793                   MOV         R9,R7
    0000593E A081                   BRA         L1074
    00005940 7F18                   ADD         #24,R15
    00005942              L1055:
             tskcmd.c       7959          
             tskcmd.c       7960          mbx_send    (
             tskcmd.c       7961                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7962                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7963                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7964                          prid1,               // prid1
             tskcmd.c       7965                          bcid,                // bcid
             tskcmd.c       7966                          ID_MSG_VALVEOUT,     // msgid
             tskcmd.c       7967                          inf1,                // sts
             tskcmd.c       7968                          inf2,                // sts2
             tskcmd.c       7969                          (UB *)&vout.target,        // data
             tskcmd.c       7970                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7971                      );
             tskcmd.c       7972          pProcDat->Stp++;
             tskcmd.c       7973          break;
             tskcmd.c       7974    
             tskcmd.c       7975      case 12:// 12．指定時間ウェイト
             tskcmd.c       7976          pProcDat->Stp++;
    00005942 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
             tskcmd.c       7977          WaitAction( prid1, bcid, 10 );
    00005944 E60A                   MOV         #10,R6     ; H'0000000A
    00005946 6493                   MOV         R9,R4
    00005948 7001                   ADD         #1,R0
    0000594A 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    0000594C D311                   MOV.L       L1397+62,R3; __$WaitAction
    0000594E 430B                   JSR         @R3
    00005950 6583                   MOV         R8,R5
    00005952 A07C                   BRA         L1060
    00005954 0009                   NOP
    00005956              L1397:
    00005956 00000002               .RES.W      1
    00005958 <00000006>             .DATA.L     H'00000006+__$SpPtn
    0000595C <00000078>             .DATA.L     H'00000078+__$Sp
    00005960 <00000000>             .DATA.L     __$GetPositionValue
    00005964 <00000000>             .DATA.L     __$Sp
    00005968 <00000000>             .DATA.L     _GetFactor
    0000596C <00000000>             .DATA.L     _motor_SET
    00005970 <00000000>             .DATA.L     __$pProcDat
    00005974 <00000005>             .DATA.L     H'00000005+__$SpPtn
    00005978 <00000000>             .DATA.L     __$pProcAdr
    0000597C <0000003C>             .DATA.L     H'0000003C+__$Sp
    00005980 <00000000>             .DATA.L     __$vout
    00005984 <00000000>             .DATA.L     __$NzlTargetGet
    00005988 <000000B4>             .DATA.L     H'000000B4+__$Sp
    0000598C <00000000>             .DATA.L     __$MapAction
    00005990 <00000000>             .DATA.L     _mbx_send
    00005994 <00000000>             .DATA.L     __$WaitAction
    00005998              L1056:
             tskcmd.c       7978          break;
             tskcmd.c       7979    
             tskcmd.c       7980      case 13:// 13．Z軸退避高さへ移動
             tskcmd.c       7981          devno  = MT_Z0;
             tskcmd.c       7982          spdptn = SpPtn.Z0_SpdNmlPtn;
    00005998 DD41                   MOV.L       L1101,R13  ; H'00000006+__$SpPtn
    0000599A 60D0                   MOV.B       @R13,R0    ; SpPtn.Z0_SpdNmlPtn
    0000599C EB84                   MOV         #-124,R11  ; H'FFFFFF84
             tskcmd.c       7983          movval = GetPositionValue(POS_Z0_TAIHI);
    0000599E E407                   MOV         #7,R4      ; H'00000007
    000059A0 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
    000059A4 B7C2                   BSR         __$GetPositionValue
    000059A6 6BBC                   EXTU.B      R11,R11
    000059A8 3BFC                   ADD         R15,R11
    000059AA E403                   MOV         #3,R4      ; H'00000003
             tskcmd.c       7984    
             tskcmd.c       7985          MAC_SPEED_SET( devno, 
    000059AC 32F180A4               MOVU.B      @(164,R15),R2; spdptn
    000059B0 1B09                   MOV.L       R0,@(36,R11); movval
    000059B2 E00C                   MOV         #12,R0     ; H'0000000C
    000059B4 4280                   MULR        R0,R2
    000059B6 DE3B                   MOV.L       L1101+4,R14; H'00000078+__$Sp
    000059B8 6023                   MOV         R2,R0
    000059BA 00ED                   MOV.W       @(R0,R14),R0; Sp[].ac
    000059BC 1B2A                   MOV.L       R2,@(40,R11)
    000059BE DD3A                   MOV.L       L1101+8,R13; _GetFactor
    000059C0 4D0B                   JSR         @R13
    000059C2 81B2                   MOV.W       R0,@(4,R11); mp.accel_type
    000059C4 2B02                   MOV.L       R0,@R11    ; mp.factor
    000059C6 E580                   MOV         #-128,R5   ; H'FFFFFF80
    000059C8 D238                   MOV.L       L1101+12,R2; __$Sp
    000059CA 50BA                   MOV.L       @(40,R11),R0
    000059CC 6E23                   MOV         R2,R14
    000059CE 7E7C                   ADD         #124,R14
    000059D0 655C                   EXTU.B      R5,R5
    000059D2 04EE                   MOV.L       @(R0,R14),R4; Sp[].fl
    000059D4 6123                   MOV         R2,R1
    000059D6 727A                   ADD         #122,R2
    000059D8 315C                   ADD         R5,R1
    000059DA 1B42                   MOV.L       R4,@(8,R11); mp.FL
    000059DC E500                   MOV         #0,R5      ; H'00000000
    000059DE 042D                   MOV.W       @(R0,R2),R4; Sp[].gl
    000059E0 071E                   MOV.L       @(R0,R1),R7; Sp[].fh
    000059E2 644D                   EXTU.W      R4,R4
    000059E4 1B56                   MOV.L       R5,@(24,R11); mp.us
    000059E6 1B73                   MOV.L       R7,@(12,R11); mp.FH
    000059E8 1B44                   MOV.L       R4,@(16,R11); mp.utime
    000059EA 1B45                   MOV.L       R4,@(20,R11); mp.dtime
    000059EC 1B57                   MOV.L       R5,@(28,R11); mp.ds
    000059EE 7FE0                   ADD         #-32,R15
    000059F0 E9A4                   MOV         #-92,R9    ; H'FFFFFFA4
    000059F2 61F3                   MOV         R15,R1
    000059F4 699C                   EXTU.B      R9,R9
    000059F6 E402                   MOV         #2,R4      ; H'00000002
    000059F8 319C                   ADD         R9,R1
    000059FA 5B11                   MOV.L       @(4,R1),R11; (part of)mp
    000059FC 5C12                   MOV.L       @(8,R1),R12; (part of)mp
    000059FE 5614                   MOV.L       @(16,R1),R6; (part of)mp
    00005A00 6712                   MOV.L       @R1,R7     ; (part of)mp
    00005A02 1FB1                   MOV.L       R11,@(4,R15)
    00005A04 5913                   MOV.L       @(12,R1),R9; (part of)mp
    00005A06 1FC2                   MOV.L       R12,@(8,R15)
    00005A08 5B15                   MOV.L       @(20,R1),R11; (part of)mp
    00005A0A 1F64                   MOV.L       R6,@(16,R15)
    00005A0C 5616                   MOV.L       @(24,R1),R6; (part of)mp
    00005A0E 5C17                   MOV.L       @(28,R1),R12; (part of)mp
    00005A10 2F72                   MOV.L       R7,@R15
    00005A12 1F93                   MOV.L       R9,@(12,R15)
    00005A14 1FB5                   MOV.L       R11,@(20,R15)
    00005A16 1F66                   MOV.L       R6,@(24,R15)
    00005A18 D225                   MOV.L       L1101+16,R2; _motor_SET
    00005A1A 420B                   JSR         @R2
    00005A1C 1FC7                   MOV.L       R12,@(28,R15)
    00005A1E A002                   BRA         L1065
    00005A20 7F20                   ADD         #32,R15
    00005A22              L1057:
             tskcmd.c       7986                         Sp[devno][spdptn].ac, 
             tskcmd.c       7987                         Sp[devno][spdptn].fl, 
             tskcmd.c       7988                         Sp[devno][spdptn].fh, 
             tskcmd.c       7989                         Sp[devno][spdptn].gl );
             tskcmd.c       7990    
             tskcmd.c       7991          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       7992          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7993          pProcDat->Stp++;
             tskcmd.c       7994          break;
             tskcmd.c       7995          
             tskcmd.c       7996      case 14:    // 
             tskcmd.c       7997          result = E_SUCCESS;
    00005A22 A00F                   BRA         L1074
    00005A24 EB00                   MOV         #0,R11     ; H'00000000
    00005A26              L1045:
    00005A26              L1065:
    00005A26 7FFC                   ADD         #-4,R15
    00005A28 6583                   MOV         R8,R5
    00005A2A 31F1602B               MOV.L       @(172:12,R15),R1; movval
    00005A2E E700                   MOV         #0,R7      ; H'00000000
    00005A30 E451                   MOV         #81,R4     ; H'00000051
    00005A32 2F12                   MOV.L       R1,@R15
    00005A34 E602                   MOV         #2,R6      ; H'00000002
    00005A36              L1068:
    00005A36 D31F                   MOV.L       L1101+20,R3; __$AbsmvAction
    00005A38 434B                   JSR/N       @R3
    00005A3A 7F04                   ADD         #4,R15
    00005A3C 2008                   TST         R0,R0
    00005A3E 8F01                   BF/S        L1074
    00005A40 6B03                   MOV         R0,R11
    00005A42 6BA3                   MOV         R10,R11
    00005A44              L1074:
    00005A44 D21C                   MOV.L       L1101+24,R2; __$pProcDat
    00005A46 6622                   MOV.L       @R2,R6     ; pProcDat
    00005A48 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005A4A 7001                   ADD         #1,R0
    00005A4C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005A4E              L1060:
             tskcmd.c       7998          pProcDat->Stp++;
             tskcmd.c       7999          break;
             tskcmd.c       8000      }
             tskcmd.c       8001      
             tskcmd.c       8002      return( result );
    00005A4E 60B3                   MOV         R11,R0
    00005A50 030000BC               MOVI20      #188,R3    ; H'000000BC
    00005A54 3F3C                   ADD         R3,R15
    00005A56 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       8003    }
    00005A58 006B                   RTS/N
             tskcmd.c       8004    
             tskcmd.c       8005    /***********************************************************************
             tskcmd.c       8006    * 
             tskcmd.c       8007    * [概要]  吐出
             tskcmd.c       8008    * [引数]  
             tskcmd.c       8009    * [戻値]  
             tskcmd.c       8010    * [補足]  P1  P2    P3    P4       P5   P6   P7   P8   P9   P10   P11   P12   P13   P14
             tskcmd.c       8011    *           *8       ﾊﾟﾀ-ﾝ  吸引位置 -    -    -    -
             tskcmd.c       8012    *
             tskcmd.c       8013    ***********************************************************************/
             tskcmd.c       8014    static ER  CmdActionPut( T_CMD_MSG* mrcv )
    00005A5A              __$CmdActionPut:                 ; function: __$CmdActionPut
                                                           ; frame size=252
    00005A5A 49F0                   MOVMU.L     R9,@-R15
    00005A5C 03F0FF40               MOVI20      #-192,R3   ; H'FFFFFF40
    00005A60 3F3C                   ADD         R3,R15
             tskcmd.c       8015    {
             tskcmd.c       8016      ER result = E_CONTINUE;
             tskcmd.c       8017      INT tskid;
             tskcmd.c       8018      UB prid1;
             tskcmd.c       8019      UB bcid;
             tskcmd.c       8020      UB msgid;
             tskcmd.c       8021      UB inf1;
             tskcmd.c       8022      UB inf2;
             tskcmd.c       8023      UB actstep;
             tskcmd.c       8024      UB spdptn;
             tskcmd.c       8025      UB devno;
             tskcmd.c       8026      UB movptn;
             tskcmd.c       8027      UB dummy;
             tskcmd.c       8028      INT movval;
             tskcmd.c       8029    
             tskcmd.c       8030      bcid    = mrcv->msgdata.bcid;
    00005A62 3A41801A               MOVU.B      @(26,R4),R10; (mrcv)->bcid
             tskcmd.c       8031      prid1   = mrcv->msgdata.prid1;
             tskcmd.c       8032      actstep = bcctrl[bcid].actstp - 1 ;
             tskcmd.c       8033      tskid    = mrcv->msgdata.tskid;
             tskcmd.c       8034      msgid    = mrcv->msgdata.msgid;
             tskcmd.c       8035      
             tskcmd.c       8036      switch( pProcDat->Stp )
    00005A66 D914                   MOV.L       L1101+24,R9; __$pProcDat
    00005A68 3B418018               MOVU.B      @(24,R4),R11; (mrcv)->prid1
    00005A6C 60A3                   MOV         R10,R0
    00005A6E 5745                   MOV.L       @(20,R4),R7; (mrcv)->tskid
    00005A70 4008                   SHLL2       R0
    00005A72 EDF1                   MOV         #-15,R13   ; H'FFFFFFF1
    00005A74 3641801B               MOVU.B      @(27,R4),R6; (mrcv)->msgid
    00005A78 6492                   MOV.L       @R9,R4     ; pProcDat
    00005A7A 4000                   SHLL        R0
    00005A7C D20F                   MOV.L       L1101+28,R2; H'00000002+__$bcctrl
    00005A7E 012C                   MOV.B       @(R0,R2),R1; bcctrl[].actstp
    00005A80 E20D                   MOV         #13,R2     ; H'0000000D
    00005A82 35418002               MOVU.B      @(2,R4),R5 ; (pProcDat)->Stp
    00005A86 6DDC                   EXTU.B      R13,R13
    00005A88 71FF                   ADD         #-1,R1
    00005A8A 3526                   CMP/HI      R2,R5
    00005A8C 6CD3                   MOV         R13,R12
    00005A8E 8F02                   BF/S        L1435
    00005A90 6E1C                   EXTU.B      R1,R14
    00005A92 A267                   BRA         L1100
    00005A94 0009                   NOP
    00005A96              L1435:
    00005A96 4500                   SHLL        R5
    00005A98 C709                   MOVA        L1102,R0
    00005A9A 005D                   MOV.W       @(R0,R5),R0
    00005A9C 0023                   BRAF        R0
    00005A9E 0009                   NOP
    00005AA0              L1101:
    00005AA0 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005AA4 <00000078>             .DATA.L     H'00000078+__$Sp
    00005AA8 <00000000>             .DATA.L     _GetFactor
    00005AAC <00000000>             .DATA.L     __$Sp
    00005AB0 <00000000>             .DATA.L     _motor_SET
    00005AB4 <00000000>             .DATA.L     __$AbsmvAction
    00005AB8 <00000000>             .DATA.L     __$pProcDat
    00005ABC <00000002>             .DATA.L     H'00000002+__$bcctrl
    00005AC0              L1102:
    00005AC0 040A                   .DATA.W     L1084-L1101
    00005AC2 0410                   .DATA.W     L1085-L1101
    00005AC4 049E                   .DATA.W     L1086-L1101
    00005AC6 036C                   .DATA.W     L1087-L1101
    00005AC8 03FA                   .DATA.W     L1088-L1101
    00005ACA 0320                   .DATA.W     L1089-L1101
    00005ACC 02DE                   .DATA.W     L1090-L1101
    00005ACE 0132                   .DATA.W     L1091-L1101
    00005AD0 0284                   .DATA.W     L1092-L1101
    00005AD2 02B2                   .DATA.W     L1093-L1101
    00005AD4 00EA                   .DATA.W     L1094-L1101
    00005AD6 0040                   .DATA.W     L1095-L1101
    00005AD8 005A                   .DATA.W     L1096-L1101
    00005ADA 003C                   .DATA.W     L1097-L1101
    00005ADC              L1097:
             tskcmd.c       8037      {
             tskcmd.c       8038      case 0: // 0． 待機
             tskcmd.c       8039          pProcDat->Stp++;
             tskcmd.c       8040          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8041    
             tskcmd.c       8042      //****************************************************
             tskcmd.c       8043      //***                    吸引                      ***
             tskcmd.c       8044      //****************************************************
             tskcmd.c       8045      case 1: // 1． Z軸通常速度設定
             tskcmd.c       8046          devno  = MT_Z0;
             tskcmd.c       8047          spdptn = SpPtn.Z0_SpdNmlPtn;                    // [Z]通常速度
             tskcmd.c       8048          movval = GetPositionValue(POS_Z0_TAIHI);        // [Z]退避位置
             tskcmd.c       8049    
             tskcmd.c       8050          MAC_SPEED_SET( devno, 
             tskcmd.c       8051                         Sp[devno][spdptn].ac, 
             tskcmd.c       8052                         Sp[devno][spdptn].fl, 
             tskcmd.c       8053                         Sp[devno][spdptn].fh, 
             tskcmd.c       8054                         Sp[devno][spdptn].gl );
             tskcmd.c       8055          pProcDat->Stp++;
             tskcmd.c       8056          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8057    
             tskcmd.c       8058      case 2: // 2． Z軸退避高さへ移動
             tskcmd.c       8059          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8060          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8061          pProcDat->Stp++;
             tskcmd.c       8062          break;
             tskcmd.c       8063    
             tskcmd.c       8064      case 3: // 3． Y0軸通常速度設定
             tskcmd.c       8065          devno  = MT_Y0;
             tskcmd.c       8066          spdptn = SpPtn.Y0_SpdNmlPtn;                    // [Y0]通常速度
             tskcmd.c       8067          movptn = pProcAdr->step[actstep].par03;         // [Y0]吸引位置
             tskcmd.c       8068          movval = GetPositionValue(movptn);
             tskcmd.c       8069          
             tskcmd.c       8070          MAC_SPEED_SET( devno, 
             tskcmd.c       8071                         Sp[devno][spdptn].ac, 
             tskcmd.c       8072                         Sp[devno][spdptn].fl, 
             tskcmd.c       8073                         Sp[devno][spdptn].fh, 
             tskcmd.c       8074                         Sp[devno][spdptn].gl );
             tskcmd.c       8075          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8076    
             tskcmd.c       8077      case 4: // 4． Y0軸指定位置移動
             tskcmd.c       8078          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8079          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8080          pProcDat->Stp++;
             tskcmd.c       8081          break;
             tskcmd.c       8082    
             tskcmd.c       8083      case 5: // 5． Z軸吸引高さ位置移動
             tskcmd.c       8084          devno  = MT_Z0;
             tskcmd.c       8085          movptn = pProcAdr->step[actstep].par06;         // [Z]吸引開始高さ
             tskcmd.c       8086          movval = GetPositionValue(movptn);
             tskcmd.c       8087    
             tskcmd.c       8088          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8089          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8090          pProcDat->Stp++;
             tskcmd.c       8091          break;
             tskcmd.c       8092    
             tskcmd.c       8093      case 6: // 6． 圧力基板制御：未指定電磁弁ON、指定電磁弁OFF
             tskcmd.c       8094          vout.target = 0x0fff;
             tskcmd.c       8095          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
             tskcmd.c       8096          
             tskcmd.c       8097          mbx_send    (
             tskcmd.c       8098                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8099                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8100                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8101                          prid1,               // prid1
             tskcmd.c       8102                          bcid,                // bcid
             tskcmd.c       8103                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       8104                          inf1,                // sts
             tskcmd.c       8105                          inf2,                // sts2
             tskcmd.c       8106                          (UB *)&vout.target,  // data
             tskcmd.c       8107                          sizeof( ST_VOUT )    // siz
             tskcmd.c       8108                      );
             tskcmd.c       8109          pProcDat->Stp++;
             tskcmd.c       8110          break;
             tskcmd.c       8111    
             tskcmd.c       8112      case 7: // 7． P軸吸引速度設定
             tskcmd.c       8113          devno  = MT_Z0;
             tskcmd.c       8114          spdptn = (pProcAdr->step[actstep].par05 >> 4);  // [Z]吸引下降速度パターン
             tskcmd.c       8115          movptn = pProcAdr->step[actstep].par07;         // [Z]吸引終了高さ
             tskcmd.c       8116          movval = GetPositionValue(movptn);
             tskcmd.c       8117    
             tskcmd.c       8118          MAC_SPEED_SET( devno, 
             tskcmd.c       8119                         Sp[devno][spdptn].ac, 
             tskcmd.c       8120                         Sp[devno][spdptn].fl, 
             tskcmd.c       8121                         Sp[devno][spdptn].fh, 
             tskcmd.c       8122                         Sp[devno][spdptn].gl );
             tskcmd.c       8123    
             tskcmd.c       8124          devno  = MT_P0;
             tskcmd.c       8125          spdptn = (pProcAdr->step[actstep].par05 & 0x0f);// [P]吸引速度パターン
             tskcmd.c       8126          MAC_SPEED_SET( devno, 
             tskcmd.c       8127                         Sp[devno][spdptn].ac, 
             tskcmd.c       8128                         Sp[devno][spdptn].fl, 
             tskcmd.c       8129                         Sp[devno][spdptn].fh, 
             tskcmd.c       8130                         Sp[devno][spdptn].gl );
             tskcmd.c       8131          pProcDat->Stp++;
             tskcmd.c       8132          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8133    
             tskcmd.c       8134      case 8: // 8． 吸引開始（P軸吸引 & Z軸下降）
             tskcmd.c       8135          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
             tskcmd.c       8136          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8137          pProcDat->Stp++;
             tskcmd.c       8138          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8139    
             tskcmd.c       8140      case 9: // 9． 圧力基板制御：吸引動作中に指定したノズルチャンネルの圧力を監視
             tskcmd.c       8141              //     ※各チャンネルの圧力センサ値が設定値を上回った場合、エラーとし電磁弁をONにする。
             tskcmd.c       8142          mbx_send    (
             tskcmd.c       8143                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8144                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8145                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8146                          prid1,               // prid1
             tskcmd.c       8147                          bcid,                // bcid
             tskcmd.c       8148                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8149                          inf1,                // sts
             tskcmd.c       8150                          inf2,                // sts2
             tskcmd.c       8151                          &dummy,              // data
             tskcmd.c       8152                          sizeof( dummy )      // siz
             tskcmd.c       8153                      );
             tskcmd.c       8154          pProcDat->Stp++;
             tskcmd.c       8155          break;
             tskcmd.c       8156    
             tskcmd.c       8157      case 10:// 10．吸引動作終了
             tskcmd.c       8158          if( tskid == ID_TSK_MOTEND )
             tskcmd.c       8159          {
             tskcmd.c       8160              WaitAction( prid1, bcid, 10 );
             tskcmd.c       8161              pProcDat->Stp++;
             tskcmd.c       8162          }
             tskcmd.c       8163          if( tskid == ID_TSK_PUNIT )
             tskcmd.c       8164          {
             tskcmd.c       8165              mbx_send    (
             tskcmd.c       8166                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8167                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8168                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8169                              prid1,               // prid1
             tskcmd.c       8170                              bcid,                // bcid
             tskcmd.c       8171                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8172                              inf1,                // sts
             tskcmd.c       8173                              inf2,                // sts2
             tskcmd.c       8174                              &dummy,              // data
             tskcmd.c       8175                              sizeof( dummy )      // siz
             tskcmd.c       8176                          );
             tskcmd.c       8177          }
             tskcmd.c       8178          break;
             tskcmd.c       8179    
             tskcmd.c       8180      case 11:  // 11．指定時間ウェイト待ち
             tskcmd.c       8181          if( msgid == ID_MSG_PRESSTAN )
             tskcmd.c       8182          {
             tskcmd.c       8183              //読み捨て
             tskcmd.c       8184              break;
             tskcmd.c       8185          }
             tskcmd.c       8186          if( msgid == ID_MSG_TIMWAIT )
             tskcmd.c       8187          {
             tskcmd.c       8188              pProcDat->Stp++;
             tskcmd.c       8189          }
             tskcmd.c       8190          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8191          
             tskcmd.c       8192      case 12:// 12．Z軸退避高さへ移動
             tskcmd.c       8193          devno  = MT_Z0;
             tskcmd.c       8194          spdptn = SpPtn.Z0_SpdNmlPtn;
             tskcmd.c       8195          movval = GetPositionValue(POS_Z0_TAIHI);
             tskcmd.c       8196    
             tskcmd.c       8197          MAC_SPEED_SET( devno, 
             tskcmd.c       8198                         Sp[devno][spdptn].ac, 
             tskcmd.c       8199                         Sp[devno][spdptn].fl, 
             tskcmd.c       8200                         Sp[devno][spdptn].fh, 
             tskcmd.c       8201                         Sp[devno][spdptn].gl );
             tskcmd.c       8202    
             tskcmd.c       8203          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8204          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8205          pProcDat->Stp++;
             tskcmd.c       8206          break;
             tskcmd.c       8207    
             tskcmd.c       8208      case 13:  // 13．終了待ち
             tskcmd.c       8209          result = E_SUCCESS;
    00005ADC A242                   BRA         L1100
    00005ADE ED00                   MOV         #0,R13     ; H'00000000
    00005AE0              L1095:
    00005AE0 E599                   MOV         #-103,R5   ; H'FFFFFF99
    00005AE2 655C                   EXTU.B      R5,R5
    00005AE4 3650                   CMP/EQ      R5,R6
    00005AE6 8B01                   BF          L1436
    00005AE8 A23C                   BRA         L1100
    00005AEA 0009                   NOP
    00005AEC              L1436:
    00005AEC E5C8                   MOV         #-56,R5    ; H'FFFFFFC8
    00005AEE 655C                   EXTU.B      R5,R5
    00005AF0 3650                   CMP/EQ      R5,R6
    00005AF2 8B02                   BF          L1106
    00005AF4 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    00005AF6 7001                   ADD         #1,R0
    00005AF8 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00005AFA              L1096:
    00005AFA              L1106:
    00005AFA DDB7                   MOV.L       L1398,R13  ; H'00000006+__$SpPtn
    00005AFC 60D0                   MOV.B       @R13,R0    ; SpPtn.Z0_SpdNmlPtn
    00005AFE E407                   MOV         #7,R4      ; H'00000007
    00005B00 EB84                   MOV         #-124,R11  ; H'FFFFFF84
    00005B02 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
    00005B06 B711                   BSR         __$GetPositionValue
    00005B08 EE80                   MOV         #-128,R14  ; H'FFFFFF80
    00005B0A E384                   MOV         #-124,R3   ; H'FFFFFF84
    00005B0C 6BBC                   EXTU.B      R11,R11
    00005B0E 633C                   EXTU.B      R3,R3
    00005B10 3BFC                   ADD         R15,R11
    00005B12 33FC                   ADD         R15,R3
    00005B14 6EEC                   EXTU.B      R14,R14
    00005B16 34F180A4               MOVU.B      @(164,R15),R4; spdptn
    00005B1A 1309                   MOV.L       R0,@(36,R3); movval
    00005B1C E00C                   MOV         #12,R0     ; H'0000000C
    00005B1E 4480                   MULR        R0,R4
    00005B20 D6AE                   MOV.L       L1398+4,R6 ; H'00000078+__$Sp
    00005B22 6043                   MOV         R4,R0
    00005B24 006D                   MOV.W       @(R0,R6),R0; Sp[].ac
    00005B26 134A                   MOV.L       R4,@(40,R3)
    00005B28 E403                   MOV         #3,R4      ; H'00000003
    00005B2A D5AD                   MOV.L       L1398+8,R5 ; _GetFactor
    00005B2C 450B                   JSR         @R5
    00005B2E 8132                   MOV.W       R0,@(4,R3) ; mp.accel_type
    00005B30 2B02                   MOV.L       R0,@R11    ; mp.factor
    00005B32 D2AC                   MOV.L       L1398+12,R2; __$Sp
    00005B34 50BA                   MOV.L       @(40,R11),R0
    00005B36 6623                   MOV         R2,R6
    00005B38 767C                   ADD         #124,R6
    00005B3A 6723                   MOV         R2,R7
    00005B3C 0D6E                   MOV.L       @(R0,R6),R13; Sp[].fl
    00005B3E 727A                   ADD         #122,R2
    00005B40 37EC                   ADD         R14,R7
    00005B42 EE00                   MOV         #0,R14     ; H'00000000
    00005B44 1BD2                   MOV.L       R13,@(8,R11); mp.FL
    00005B46 0D2D                   MOV.W       @(R0,R2),R13; Sp[].gl
    00005B48 017E                   MOV.L       @(R0,R7),R1; Sp[].fh
    00005B4A 6DDD                   EXTU.W      R13,R13
    00005B4C 1BE6                   MOV.L       R14,@(24,R11); mp.us
    00005B4E 1B13                   MOV.L       R1,@(12,R11); mp.FH
    00005B50 1BD4                   MOV.L       R13,@(16,R11); mp.utime
    00005B52 1BD5                   MOV.L       R13,@(20,R11); mp.dtime
    00005B54 1BE7                   MOV.L       R14,@(28,R11); mp.ds
    00005B56 7FE0                   ADD         #-32,R15
    00005B58 EEA4                   MOV         #-92,R14   ; H'FFFFFFA4
    00005B5A 62F3                   MOV         R15,R2
    00005B5C 6EEC                   EXTU.B      R14,R14
    00005B5E 32EC                   ADD         R14,R2
    00005B60 5723                   MOV.L       @(12,R2),R7; (part of)mp
    00005B62 5B25                   MOV.L       @(20,R2),R11; (part of)mp
    00005B64 6122                   MOV.L       @R2,R1     ; (part of)mp
    00005B66 5421                   MOV.L       @(4,R2),R4 ; (part of)mp
    00005B68 5622                   MOV.L       @(8,R2),R6 ; (part of)mp
    00005B6A 1F73                   MOV.L       R7,@(12,R15)
    00005B6C 5724                   MOV.L       @(16,R2),R7; (part of)mp
    00005B6E 1FB5                   MOV.L       R11,@(20,R15)
    00005B70 5B26                   MOV.L       @(24,R2),R11; (part of)mp
    00005B72 5527                   MOV.L       @(28,R2),R5; (part of)mp
    00005B74 2F12                   MOV.L       R1,@R15
    00005B76 1F41                   MOV.L       R4,@(4,R15)
    00005B78 E402                   MOV         #2,R4      ; H'00000002
    00005B7A 1F62                   MOV.L       R6,@(8,R15)
    00005B7C 1F74                   MOV.L       R7,@(16,R15)
    00005B7E 1FB6                   MOV.L       R11,@(24,R15)
    00005B80 D299                   MOV.L       L1398+16,R2; _motor_SET
    00005B82 420B                   JSR         @R2
    00005B84 1F57                   MOV.L       R5,@(28,R15)
    00005B86 A1DA                   BRA         L1108
    00005B88 7F20                   ADD         #32,R15
    00005B8A              L1094:
    00005B8A 6073                   MOV         R7,R0
    00005B8C 880A                   CMP/EQ      #10,R0
    00005B8E 8919                   BT          L1111
    00005B90 880D                   CMP/EQ      #13,R0
    00005B92 8901                   BT          L1437
    00005B94 A1E6                   BRA         L1100
    00005B96 0009                   NOP
    00005B98              L1437:
    00005B98 0129                   MOVT        R1
    00005B9A 2F16                   MOV.L       R1,@-R15
    00005B9C EE84                   MOV         #-124,R14  ; H'FFFFFF84
    00005B9E 6EEC                   EXTU.B      R14,R14
    00005BA0 64F3                   MOV         R15,R4
    00005BA2 34EC                   ADD         R14,R4
    00005BA4 2F46                   MOV.L       R4,@-R15
    00005BA6 644C                   EXTU.B      R4,R4
    00005BA8 2F46                   MOV.L       R4,@-R15
    00005BAA 2F46                   MOV.L       R4,@-R15
    00005BAC EC99                   MOV         #-103,R12  ; H'FFFFFF99
    00005BAE 6CCC                   EXTU.B      R12,R12
    00005BB0 2FC6                   MOV.L       R12,@-R15
    00005BB2 2FA6                   MOV.L       R10,@-R15
    00005BB4 E60D                   MOV         #13,R6     ; H'0000000D
    00005BB6 E50C                   MOV         #12,R5     ; H'0000000C
    00005BB8 6463                   MOV         R6,R4
    00005BBA D98C                   MOV.L       L1398+20,R9; _mbx_send
    00005BBC 490B                   JSR         @R9
    00005BBE 67B3                   MOV         R11,R7
    00005BC0 A1D0                   BRA         L1100
    00005BC2 7F18                   ADD         #24,R15
    00005BC4              L1111:
    00005BC4 E60A                   MOV         #10,R6     ; H'0000000A
    00005BC6 65A3                   MOV         R10,R5
    00005BC8 D389                   MOV.L       L1398+24,R3; __$WaitAction
    00005BCA 430B                   JSR         @R3
    00005BCC 64B3                   MOV         R11,R4
    00005BCE A1C5                   BRA         L1113
    00005BD0 0009                   NOP
    00005BD2              L1091:
    00005BD2 E014                   MOV         #20,R0     ; H'00000014
    00005BD4 62E3                   MOV         R14,R2
    00005BD6 4280                   MULR        R0,R2
    00005BD8 DC86                   MOV.L       L1398+28,R12; __$pProcAdr
    00005BDA 64C2                   MOV.L       @R12,R4    ; pProcAdr
    00005BDC E7FC                   MOV         #-4,R7     ; H'FFFFFFFC
    00005BDE 6143                   MOV         R4,R1
    00005BE0 7104                   ADD         #4,R1
    00005BE2 3F21202C               MOV.L       R2,@(176:12,R15)
    00005BE6 6023                   MOV         R2,R0
    00005BE8 021C                   MOV.B       @(R0,R1),R2; pProcAdr->step[].par05
    00005BEA 7406                   ADD         #6,R4
    00005BEC 652C                   EXTU.B      R2,R5
    00005BEE 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par07
    00005BF0 457C                   SHAD        R7,R5
    00005BF2 3F5100B4               MOV.B       R5,@(180:12,R15)
    00005BF6 B699                   BSR         __$GetPositionValue
    00005BF8 0009                   NOP
    00005BFA 31F180B4               MOVU.B      @(180,R15),R1
    00005BFE 3F01202A               MOV.L       R0,@(168:12,R15); movval
    00005C02 E00C                   MOV         #12,R0     ; H'0000000C
    00005C04 4180                   MULR        R0,R1
    00005C06 D475                   MOV.L       L1398+4,R4 ; H'00000078+__$Sp
    00005C08 6013                   MOV         R1,R0
    00005C0A 064D                   MOV.W       @(R0,R4),R6; Sp[].ac
    00005C0C 3F11202E               MOV.L       R1,@(184:12,R15)
    00005C10 3F611022               MOV.W       R6,@(68:12,R15); mp.accel_type
    00005C14 D772                   MOV.L       L1398+8,R7 ; _GetFactor
    00005C16 470B                   JSR         @R7
    00005C18 E403                   MOV         #3,R4      ; H'00000003
    00005C1A 3F012010               MOV.L       R0,@(64:12,R15); mp.factor
    00005C1E D671                   MOV.L       L1398+12,R6; __$Sp
    00005C20 30F1602E               MOV.L       @(184:12,R15),R0
    00005C24 6163                   MOV         R6,R1
    00005C26 717C                   ADD         #124,R1
    00005C28 021E                   MOV.L       @(R0,R1),R2; Sp[].fl
    00005C2A E180                   MOV         #-128,R1   ; H'FFFFFF80
    00005C2C 611C                   EXTU.B      R1,R1
    00005C2E 6563                   MOV         R6,R5
    00005C30 351C                   ADD         R1,R5
    00005C32 767A                   ADD         #122,R6
    00005C34 045E                   MOV.L       @(R0,R5),R4; Sp[].fh
    00005C36 016D                   MOV.W       @(R0,R6),R1; Sp[].gl
    00005C38 3F412013               MOV.L       R4,@(76:12,R15); mp.FH
    00005C3C 611D                   EXTU.W      R1,R1
    00005C3E E400                   MOV         #0,R4      ; H'00000000
    00005C40 3F212012               MOV.L       R2,@(72:12,R15); mp.FL
    00005C44 3F112014               MOV.L       R1,@(80:12,R15); mp.utime
    00005C48 3F112015               MOV.L       R1,@(84:12,R15); mp.dtime
    00005C4C 3F412016               MOV.L       R4,@(88:12,R15); mp.us
    00005C50 3F412017               MOV.L       R4,@(92:12,R15); mp.ds
    00005C54 7FE0                   ADD         #-32,R15
    00005C56 62F3                   MOV         R15,R2
    00005C58 7260                   ADD         #96,R2
    00005C5A 5721                   MOV.L       @(4,R2),R7 ; (part of)mp
    00005C5C 6522                   MOV.L       @R2,R5     ; (part of)mp
    00005C5E 1F71                   MOV.L       R7,@(4,R15)
    00005C60 5122                   MOV.L       @(8,R2),R1 ; (part of)mp
    00005C62 5723                   MOV.L       @(12,R2),R7; (part of)mp
    00005C64 2F52                   MOV.L       R5,@R15
    00005C66 1F12                   MOV.L       R1,@(8,R15)
    00005C68 1F73                   MOV.L       R7,@(12,R15)
    00005C6A 5124                   MOV.L       @(16,R2),R1; (part of)mp
    00005C6C 5425                   MOV.L       @(20,R2),R4; (part of)mp
    00005C6E 5726                   MOV.L       @(24,R2),R7; (part of)mp
    00005C70 5527                   MOV.L       @(28,R2),R5; (part of)mp
    00005C72 1F14                   MOV.L       R1,@(16,R15)
    00005C74 1F45                   MOV.L       R4,@(20,R15)
    00005C76 E402                   MOV         #2,R4      ; H'00000002
    00005C78 1F76                   MOV.L       R7,@(24,R15)
    00005C7A D15B                   MOV.L       L1398+16,R1; _motor_SET
    00005C7C 410B                   JSR         @R1
    00005C7E 1F57                   MOV.L       R5,@(28,R15)
    00005C80 7F20                   ADD         #32,R15
    00005C82 67C2                   MOV.L       @R12,R7    ; pProcAdr
    00005C84 30F1602C               MOV.L       @(176:12,R15),R0
    00005C88 7704                   ADD         #4,R7
    00005C8A 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].par05
    00005C8C C90F                   AND         #15,R0
    00005C8E 6C03                   MOV         R0,R12
    00005C90 E00C                   MOV         #12,R0     ; H'0000000C
    00005C92 4C80                   MULR        R0,R12
    00005C94 60C3                   MOV         R12,R0
    00005C96 3FC1202B               MOV.L       R12,@(172:12,R15)
    00005C9A DC57                   MOV.L       L1398+32,R12; H'000000B4+__$Sp
    00005C9C 01CD                   MOV.W       @(R0,R12),R1; Sp[].ac
    00005C9E 3F111032               MOV.W       R1,@(100:12,R15); mp.accel_type
    00005CA2 D54F                   MOV.L       L1398+8,R5 ; _GetFactor
    00005CA4 450B                   JSR         @R5
    00005CA6 E403                   MOV         #3,R4      ; H'00000003
    00005CA8 E1B8                   MOV         #-72,R1    ; H'FFFFFFB8
    00005CAA E4BC                   MOV         #-68,R4    ; H'FFFFFFBC
    00005CAC 3F012018               MOV.L       R0,@(96:12,R15); mp.factor
    00005CB0 D74C                   MOV.L       L1398+12,R7; __$Sp
    00005CB2 611C                   EXTU.B      R1,R1
    00005CB4 30F1602B               MOV.L       @(172:12,R15),R0
    00005CB8 6C73                   MOV         R7,R12
    00005CBA 3C1C                   ADD         R1,R12
    00005CBC 644C                   EXTU.B      R4,R4
    00005CBE 02CE                   MOV.L       @(R0,R12),R2; Sp[].fl
    00005CC0 6173                   MOV         R7,R1
    00005CC2 314C                   ADD         R4,R1
    00005CC4 ECB6                   MOV         #-74,R12   ; H'FFFFFFB6
    00005CC6 051E                   MOV.L       @(R0,R1),R5; Sp[].fh
    00005CC8 6CCC                   EXTU.B      R12,R12
    00005CCA 37CC                   ADD         R12,R7
    00005CCC EC00                   MOV         #0,R12     ; H'00000000
    00005CCE 3F51201B               MOV.L       R5,@(108:12,R15); mp.FH
    00005CD2 057D                   MOV.W       @(R0,R7),R5; Sp[].gl
    00005CD4 3F21201A               MOV.L       R2,@(104:12,R15); mp.FL
    00005CD8 655D                   EXTU.W      R5,R5
    00005CDA 3F51201C               MOV.L       R5,@(112:12,R15); mp.utime
    00005CDE 3F51201D               MOV.L       R5,@(116:12,R15); mp.dtime
    00005CE2 3FC1201E               MOV.L       R12,@(120:12,R15); mp.us
    00005CE6 3FC1201F               MOV.L       R12,@(124:12,R15); mp.ds
    00005CEA 7FE0                   ADD         #-32,R15
    00005CEC E280                   MOV         #-128,R2   ; H'FFFFFF80
    00005CEE 622C                   EXTU.B      R2,R2
    00005CF0 E403                   MOV         #3,R4      ; H'00000003
    00005CF2 6CF3                   MOV         R15,R12
    00005CF4 3C2C                   ADD         R2,R12
    00005CF6 66C2                   MOV.L       @R12,R6    ; (part of)mp
    00005CF8 52C1                   MOV.L       @(4,R12),R2; (part of)mp
    00005CFA 2F62                   MOV.L       R6,@R15
    00005CFC 1F21                   MOV.L       R2,@(4,R15)
    00005CFE 52C2                   MOV.L       @(8,R12),R2; (part of)mp
    00005D00 56C3                   MOV.L       @(12,R12),R6; (part of)mp
    00005D02 1F22                   MOV.L       R2,@(8,R15)
    00005D04 1F63                   MOV.L       R6,@(12,R15)
    00005D06 52C4                   MOV.L       @(16,R12),R2; (part of)mp
    00005D08 56C5                   MOV.L       @(20,R12),R6; (part of)mp
    00005D0A 1F24                   MOV.L       R2,@(16,R15)
    00005D0C 1F65                   MOV.L       R6,@(20,R15)
    00005D0E 52C6                   MOV.L       @(24,R12),R2; (part of)mp
    00005D10 56C7                   MOV.L       @(28,R12),R6; (part of)mp
    00005D12 1F26                   MOV.L       R2,@(24,R15)
    00005D14 DC34                   MOV.L       L1398+16,R12; _motor_SET
    00005D16 4C0B                   JSR         @R12
    00005D18 1F67                   MOV.L       R6,@(28,R15)
    00005D1A 7F20                   ADD         #32,R15
    00005D1C 6692                   MOV.L       @R9,R6     ; pProcDat
    00005D1E 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005D20 7001                   ADD         #1,R0
    00005D22 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005D24              L1092:
    00005D24 E014                   MOV         #20,R0     ; H'00000014
    00005D26 4E80                   MULR        R0,R14
    00005D28 D132                   MOV.L       L1398+28,R1; __$pProcAdr
    00005D2A 6212                   MOV.L       @R1,R2     ; pProcAdr
    00005D2C 720C                   ADD         #12,R2
    00005D2E 60E3                   MOV         R14,R0
    00005D30 022E                   MOV.L       @(R0,R2),R2; pProcAdr->step[].par13
    00005D32 2F26                   MOV.L       R2,@-R15
    00005D34 7FFC                   ADD         #-4,R15
    00005D36 E703                   MOV         #3,R7      ; H'00000003
    00005D38 3CF1602C               MOV.L       @(176:12,R15),R12; movval
    00005D3C E602                   MOV         #2,R6      ; H'00000002
    00005D3E 65A3                   MOV         R10,R5
    00005D40 2FC2                   MOV.L       R12,@R15
    00005D42 D32E                   MOV.L       L1398+36,R3; __$MapAction
    00005D44 430B                   JSR         @R3
    00005D46 64B3                   MOV         R11,R4
    00005D48 7F08                   ADD         #8,R15
    00005D4A 6492                   MOV.L       @R9,R4     ; pProcDat
    00005D4C 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    00005D4E 7001                   ADD         #1,R0
    00005D50 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00005D52              L1093:
    00005D52 E501                   MOV         #1,R5      ; H'00000001
    00005D54 2F56                   MOV.L       R5,@-R15
    00005D56 E184                   MOV         #-124,R1   ; H'FFFFFF84
    00005D58 611C                   EXTU.B      R1,R1
    00005D5A 67F3                   MOV         R15,R7
    00005D5C 371C                   ADD         R1,R7
    00005D5E 2F76                   MOV.L       R7,@-R15
    00005D60 677C                   EXTU.B      R7,R7
    00005D62 2F76                   MOV.L       R7,@-R15
    00005D64 2F76                   MOV.L       R7,@-R15
    00005D66 EE99                   MOV         #-103,R14  ; H'FFFFFF99
    00005D68 6EEC                   EXTU.B      R14,R14
    00005D6A 2FE6                   MOV.L       R14,@-R15
    00005D6C 2FA6                   MOV.L       R10,@-R15
    00005D6E E60D                   MOV         #13,R6     ; H'0000000D
    00005D70 E50C                   MOV         #12,R5     ; H'0000000C
    00005D72 6463                   MOV         R6,R4
    00005D74 DC1D                   MOV.L       L1398+20,R12; _mbx_send
    00005D76 4C0B                   JSR         @R12
    00005D78 67B3                   MOV         R11,R7
    00005D7A A0EF                   BRA         L1113
    00005D7C 7F18                   ADD         #24,R15
    00005D7E              L1090:
    00005D7E 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    00005D82 DE1F                   MOV.L       L1398+40,R14; __$vout
    00005D84 2E41                   MOV.W       R4,@R14    ; vout.target
    00005D86 3F41105E               MOV.W       R4,@(188:12,R15)
    00005D8A D31E                   MOV.L       L1398+44,R3; __$NzlTargetGet
    00005D8C 434B                   JSR/N       @R3
    00005D8E 6503                   MOV         R0,R5
    00005D90 E604                   MOV         #4,R6      ; H'00000004
    00005D92 30F1505E               MOV.W       @(188:12,R15),R0
    00005D96 D11C                   MOV.L       L1398+48,R1; H'00000002+__$vout
    00005D98 205A                   XOR         R5,R0
    00005D9A 2101                   MOV.W       R0,@R1     ; vout.valout
    00005D9C 2F66                   MOV.L       R6,@-R15
    00005D9E D718                   MOV.L       L1398+40,R7; __$vout
    00005DA0 2F76                   MOV.L       R7,@-R15
    00005DA2 677C                   EXTU.B      R7,R7
    00005DA4 2F76                   MOV.L       R7,@-R15
    00005DA6 2F76                   MOV.L       R7,@-R15
    00005DA8 E29B                   MOV         #-101,R2   ; H'FFFFFF9B
    00005DAA 622C                   EXTU.B      R2,R2
    00005DAC 2F26                   MOV.L       R2,@-R15
    00005DAE 2FA6                   MOV.L       R10,@-R15
    00005DB0 E60D                   MOV         #13,R6     ; H'0000000D
    00005DB2 E50C                   MOV         #12,R5     ; H'0000000C
    00005DB4 6463                   MOV         R6,R4
    00005DB6 DC0D                   MOV.L       L1398+20,R12; _mbx_send
    00005DB8 4C0B                   JSR         @R12
    00005DBA 67B3                   MOV         R11,R7
    00005DBC A0CE                   BRA         L1113
    00005DBE 7F18                   ADD         #24,R15
    00005DC0              L1089:
    00005DC0 E014                   MOV         #20,R0     ; H'00000014
    00005DC2 4E80                   MULR        R0,R14
    00005DC4 D20B                   MOV.L       L1398+28,R2; __$pProcAdr
    00005DC6 6522                   MOV.L       @R2,R5     ; pProcAdr
    00005DC8 7505                   ADD         #5,R5
    00005DCA 60E3                   MOV         R14,R0
    00005DCC B5AE                   BSR         __$GetPositionValue
    00005DCE 045C                   MOV.B       @(R0,R5),R4; pProcAdr->step[].par06
    00005DD0 3F01202A               MOV.L       R0,@(168:12,R15); movval
    00005DD4 A0B3                   BRA         L1108
    00005DD6 0009                   NOP
    00005DD8              L1398:
    00005DD8 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005DDC <00000078>             .DATA.L     H'00000078+__$Sp
    00005DE0 <00000000>             .DATA.L     _GetFactor
    00005DE4 <00000000>             .DATA.L     __$Sp
    00005DE8 <00000000>             .DATA.L     _motor_SET
    00005DEC <00000000>             .DATA.L     _mbx_send
    00005DF0 <00000000>             .DATA.L     __$WaitAction
    00005DF4 <00000000>             .DATA.L     __$pProcAdr
    00005DF8 <000000B4>             .DATA.L     H'000000B4+__$Sp
    00005DFC <00000000>             .DATA.L     __$MapAction
    00005E00 <00000000>             .DATA.L     __$vout
    00005E04 <00000000>             .DATA.L     __$NzlTargetGet
    00005E08 <00000002>             .DATA.L     H'00000002+__$vout
    00005E0C              L1087:
    00005E0C D16B                   MOV.L       L1155+2,R1 ; H'00000005+__$SpPtn
    00005E0E EBA4                   MOV         #-92,R11   ; H'FFFFFFA4
    00005E10 6010                   MOV.B       @R1,R0     ; SpPtn.Y0_SpdNmlPtn
    00005E12 6BBC                   EXTU.B      R11,R11
    00005E14 3BFC                   ADD         R15,R11
    00005E16 2B00                   MOV.B       R0,@R11    ; spdptn
    00005E18 E014                   MOV         #20,R0     ; H'00000014
    00005E1A 4E80                   MULR        R0,R14
    00005E1C D468                   MOV.L       L1155+6,R4 ; __$pProcAdr
    00005E1E 6742                   MOV.L       @R4,R7     ; pProcAdr
    00005E20 DD68                   MOV.L       L1155+10,R13; H'0000003C+__$Sp
    00005E22 7702                   ADD         #2,R7
    00005E24 60E3                   MOV         R14,R0
    00005E26 B581                   BSR         __$GetPositionValue
    00005E28 047C                   MOV.B       @(R0,R7),R4; pProcAdr->step[].par03
    00005E2A 1B01                   MOV.L       R0,@(4,R11); movval
    00005E2C E20C                   MOV         #12,R2     ; H'0000000C
    00005E2E 60B0                   MOV.B       @R11,R0    ; spdptn
    00005E30 660C                   EXTU.B      R0,R6
    00005E32 6023                   MOV         R2,R0
    00005E34 4680                   MULR        R0,R6
    00005E36 6063                   MOV         R6,R0
    00005E38 02DD                   MOV.W       @(R0,R13),R2; Sp[].ac
    00005E3A 1B62                   MOV.L       R6,@(8,R11)
    00005E3C 3F211012               MOV.W       R2,@(36:12,R15); mp.accel_type
    00005E40 D761                   MOV.L       L1155+14,R7; _GetFactor
    00005E42 470B                   JSR         @R7
    00005E44 E403                   MOV         #3,R4      ; H'00000003
    00005E46 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00005E48 D560                   MOV.L       L1155+18,R5; __$Sp
    00005E4A 50B2                   MOV.L       @(8,R11),R0
    00005E4C 6D53                   MOV         R5,R13
    00005E4E 7D40                   ADD         #64,R13
    00005E50 6E53                   MOV         R5,R14
    00005E52 753E                   ADD         #62,R5
    00005E54 04DE                   MOV.L       @(R0,R13),R4; Sp[].fl
    00005E56 7E44                   ADD         #68,R14
    00005E58 015D                   MOV.W       @(R0,R5),R1; Sp[].gl
    00005E5A 07EE                   MOV.L       @(R0,R14),R7; Sp[].fh
    00005E5C 1F4A                   MOV.L       R4,@(40,R15); mp.FL
    00005E5E 611D                   EXTU.W      R1,R1
    00005E60 E400                   MOV         #0,R4      ; H'00000000
    00005E62 1F7B                   MOV.L       R7,@(44,R15); mp.FH
    00005E64 1F1C                   MOV.L       R1,@(48,R15); mp.utime
    00005E66 1F1D                   MOV.L       R1,@(52,R15); mp.dtime
    00005E68 1F4E                   MOV.L       R4,@(56,R15); mp.us
    00005E6A 1F4F                   MOV.L       R4,@(60,R15); mp.ds
    00005E6C 7FE0                   ADD         #-32,R15
    00005E6E 65F3                   MOV         R15,R5
    00005E70 7540                   ADD         #64,R5
    00005E72 6B52                   MOV.L       @R5,R11    ; (part of)mp
    00005E74 E401                   MOV         #1,R4      ; H'00000001
    00005E76 5D52                   MOV.L       @(8,R5),R13; (part of)mp
    00005E78 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    00005E7A 2FB2                   MOV.L       R11,@R15
    00005E7C 5B53                   MOV.L       @(12,R5),R11; (part of)mp
    00005E7E 1FD2                   MOV.L       R13,@(8,R15)
    00005E80 5D54                   MOV.L       @(16,R5),R13; (part of)mp
    00005E82 5E55                   MOV.L       @(20,R5),R14; (part of)mp
    00005E84 5156                   MOV.L       @(24,R5),R1; (part of)mp
    00005E86 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00005E88 1F71                   MOV.L       R7,@(4,R15)
    00005E8A 1FB3                   MOV.L       R11,@(12,R15)
    00005E8C 1FD4                   MOV.L       R13,@(16,R15)
    00005E8E 1FE5                   MOV.L       R14,@(20,R15)
    00005E90 1F16                   MOV.L       R1,@(24,R15)
    00005E92 D24F                   MOV.L       L1155+22,R2; _motor_SET
    00005E94 420B                   JSR         @R2
    00005E96 1F67                   MOV.L       R6,@(28,R15)
    00005E98 7F20                   ADD         #32,R15
    00005E9A              L1088:
    00005E9A 7FFC                   ADD         #-4,R15
    00005E9C 65A3                   MOV         R10,R5
    00005E9E 31F1602B               MOV.L       @(172:12,R15),R1; movval
    00005EA2 E700                   MOV         #0,R7      ; H'00000000
    00005EA4 E601                   MOV         #1,R6      ; H'00000001
    00005EA6 A051                   BRA         L1121
    00005EA8 2F12                   MOV.L       R1,@R15
    00005EAA              L1084:
    00005EAA 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    00005EAC 7001                   ADD         #1,R0
    00005EAE 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00005EB0              L1085:
    00005EB0 D248                   MOV.L       L1155+26,R2; H'00000006+__$SpPtn
    00005EB2 EBA4                   MOV         #-92,R11   ; H'FFFFFFA4
    00005EB4 6020                   MOV.B       @R2,R0     ; SpPtn.Z0_SpdNmlPtn
    00005EB6 6BBC                   EXTU.B      R11,R11
    00005EB8 E407                   MOV         #7,R4      ; H'00000007
    00005EBA 3BFC                   ADD         R15,R11
    00005EBC B536                   BSR         __$GetPositionValue
    00005EBE 2B00                   MOV.B       R0,@R11    ; spdptn
    00005EC0 1B01                   MOV.L       R0,@(4,R11); movval
    00005EC2 E20C                   MOV         #12,R2     ; H'0000000C
    00005EC4 60B0                   MOV.B       @R11,R0    ; spdptn
    00005EC6 D444                   MOV.L       L1155+30,R4; H'00000078+__$Sp
    00005EC8 660C                   EXTU.B      R0,R6
    00005ECA 6023                   MOV         R2,R0
    00005ECC 4680                   MULR        R0,R6
    00005ECE 6063                   MOV         R6,R0
    00005ED0 074D                   MOV.W       @(R0,R4),R7; Sp[].ac
    00005ED2 1B62                   MOV.L       R6,@(8,R11)
    00005ED4 3F711002               MOV.W       R7,@(4:12,R15); mp.accel_type
    00005ED8 DD3B                   MOV.L       L1155+14,R13; _GetFactor
    00005EDA 4D0B                   JSR         @R13
    00005EDC E403                   MOV         #3,R4      ; H'00000003
    00005EDE 2F02                   MOV.L       R0,@R15    ; mp.factor
    00005EE0 E780                   MOV         #-128,R7   ; H'FFFFFF80
    00005EE2 DD3A                   MOV.L       L1155+18,R13; __$Sp
    00005EE4 50B2                   MOV.L       @(8,R11),R0
    00005EE6 6ED3                   MOV         R13,R14
    00005EE8 7E7C                   ADD         #124,R14
    00005EEA 677C                   EXTU.B      R7,R7
    00005EEC 06EE                   MOV.L       @(R0,R14),R6; Sp[].fl
    00005EEE 61D3                   MOV         R13,R1
    00005EF0 7D7A                   ADD         #122,R13
    00005EF2 317C                   ADD         R7,R1
    00005EF4 1F62                   MOV.L       R6,@(8,R15); mp.FL
    00005EF6 E700                   MOV         #0,R7      ; H'00000000
    00005EF8 06DD                   MOV.W       @(R0,R13),R6; Sp[].gl
    00005EFA 0B1E                   MOV.L       @(R0,R1),R11; Sp[].fh
    00005EFC 666D                   EXTU.W      R6,R6
    00005EFE 1F76                   MOV.L       R7,@(24,R15); mp.us
    00005F00 1FB3                   MOV.L       R11,@(12,R15); mp.FH
    00005F02 1F64                   MOV.L       R6,@(16,R15); mp.utime
    00005F04 1F65                   MOV.L       R6,@(20,R15); mp.dtime
    00005F06 1F77                   MOV.L       R7,@(28,R15); mp.ds
    00005F08 7FE0                   ADD         #-32,R15
    00005F0A 62F3                   MOV         R15,R2
    00005F0C 7220                   ADD         #32,R2
    00005F0E 5E21                   MOV.L       @(4,R2),R14; (part of)mp
    00005F10 E402                   MOV         #2,R4      ; H'00000002
    00005F12 5122                   MOV.L       @(8,R2),R1 ; (part of)mp
    00005F14 5524                   MOV.L       @(16,R2),R5; (part of)mp
    00005F16 6B22                   MOV.L       @R2,R11    ; (part of)mp
    00005F18 1FE1                   MOV.L       R14,@(4,R15)
    00005F1A 5D23                   MOV.L       @(12,R2),R13; (part of)mp
    00005F1C 1F12                   MOV.L       R1,@(8,R15)
    00005F1E 5E25                   MOV.L       @(20,R2),R14; (part of)mp
    00005F20 1F54                   MOV.L       R5,@(16,R15)
    00005F22 5126                   MOV.L       @(24,R2),R1; (part of)mp
    00005F24 5527                   MOV.L       @(28,R2),R5; (part of)mp
    00005F26 2FB2                   MOV.L       R11,@R15
    00005F28 1FD3                   MOV.L       R13,@(12,R15)
    00005F2A 1FE5                   MOV.L       R14,@(20,R15)
    00005F2C 1F16                   MOV.L       R1,@(24,R15)
    00005F2E D228                   MOV.L       L1155+22,R2; _motor_SET
    00005F30 420B                   JSR         @R2
    00005F32 1F57                   MOV.L       R5,@(28,R15)
    00005F34 7F20                   ADD         #32,R15
    00005F36 6592                   MOV.L       @R9,R5     ; pProcDat
    00005F38 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00005F3A 7001                   ADD         #1,R0
    00005F3C 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00005F3E              L1086:
    00005F3E              L1108:
    00005F3E 7FFC                   ADD         #-4,R15
    00005F40 65A3                   MOV         R10,R5
    00005F42 34F1602B               MOV.L       @(172:12,R15),R4; movval
    00005F46 E602                   MOV         #2,R6      ; H'00000002
    00005F48 E700                   MOV         #0,R7      ; H'00000000
    00005F4A 2F42                   MOV.L       R4,@R15
    00005F4C              L1121:
    00005F4C D323                   MOV.L       L1155+34,R3; __$AbsmvAction
    00005F4E 430B                   JSR         @R3
    00005F50 E451                   MOV         #81,R4     ; H'00000051
    00005F52 7F04                   ADD         #4,R15
    00005F54 2008                   TST         R0,R0
    00005F56 8F01                   BF/S        L1113
    00005F58 6D03                   MOV         R0,R13
    00005F5A 6DC3                   MOV         R12,R13
    00005F5C              L1113:
    00005F5C 6692                   MOV.L       @R9,R6     ; pProcDat
    00005F5E 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005F60 7001                   ADD         #1,R0
    00005F62 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005F64              L1100:
             tskcmd.c       8210          break;
             tskcmd.c       8211      }
             tskcmd.c       8212    
             tskcmd.c       8213      return( result );
    00005F64 60D3                   MOV         R13,R0
    00005F66 030000C0               MOVI20      #192,R3    ; H'000000C0
    00005F6A 3F3C                   ADD         R3,R15
    00005F6C 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       8214    }
    00005F6E 006B                   RTS/N
             tskcmd.c       8215    /***********************************************************************
             tskcmd.c       8216    * 
             tskcmd.c       8217    * [概要]  分注１
             tskcmd.c       8218    * [引数]  
             tskcmd.c       8219    * [戻値]  
             tskcmd.c       8220    * 
             tskcmd.c       8221    ***********************************************************************/
             tskcmd.c       8222    static ER  CmdActionPrep1( T_CMD_MSG* mrcv )
    00005F70              __$CmdActionPrep1:               ; function: __$CmdActionPrep1
                                                           ; frame size=372
    00005F70 49F0                   MOVMU.L     R9,@-R15
    00005F72 03F0FEC8               MOVI20      #-312,R3   ; H'FFFFFEC8
    00005F76 3F3C                   ADD         R3,R15
             tskcmd.c       8223    {
             tskcmd.c       8224      ER result = E_CONTINUE;
    00005F78 E341                   MOV         #65,R3     ; H'00000041
    00005F7A EDF1                   MOV         #-15,R13   ; H'FFFFFFF1
    00005F7C 4308                   SHLL2       R3
    00005F7E E715                   MOV         #21,R7     ; H'00000015
             tskcmd.c       8225      INT tskid;
             tskcmd.c       8226      UB prid1;
             tskcmd.c       8227      UB bcid;
             tskcmd.c       8228      UB msgid;
             tskcmd.c       8229      UB inf1;
             tskcmd.c       8230      UB inf2;
             tskcmd.c       8231      UB actstep;
             tskcmd.c       8232      UB spdptn;
             tskcmd.c       8233      UB devno;
             tskcmd.c       8234      UB movptn;
             tskcmd.c       8235      UB dummy;
             tskcmd.c       8236      INT movval;
             tskcmd.c       8237      
             tskcmd.c       8238      bcid  = mrcv->msgdata.bcid;
    00005F80 3041801A               MOVU.B      @(26,R4),R0; (mrcv)->bcid
    00005F84 33FC                   ADD         R15,R3
    00005F86 6DDC                   EXTU.B      R13,R13
             tskcmd.c       8239      prid1   = mrcv->msgdata.prid1;
             tskcmd.c       8240      actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       8241      
             tskcmd.c       8242      switch( pProcDat->Stp )
    00005F88 DA15                   MOV.L       L1155+38,R10; __$pProcDat
    00005F8A 6B03                   MOV         R0,R11
    00005F8C 8038                   MOV.B       R0,@(8,R3) ; bcid
    00005F8E 4008                   SHLL2       R0
    00005F90 65A2                   MOV.L       @R10,R5    ; pProcDat
    00005F92 D914                   MOV.L       L1155+42,R9; H'00000002+__$bcctrl
    00005F94 4000                   SHLL        R0
    00005F96 2342                   MOV.L       R4,@R3     ; mrcv
    00005F98 3C418018               MOVU.B      @(24,R4),R12; (mrcv)->prid1
    00005F9C 049C                   MOV.B       @(R0,R9),R4; bcctrl[].actstp
    00005F9E 36518002               MOVU.B      @(2,R5),R6 ; (pProcDat)->Stp
    00005FA2 74FF                   ADD         #-1,R4
    00005FA4 13D1                   MOV.L       R13,@(4,R3); result
    00005FA6 3676                   CMP/HI      R7,R6
    00005FA8 8F02                   BF/S        L1438
    00005FAA 6E4C                   EXTU.B      R4,R14
    00005FAC A4B7                   BRA         L1154
    00005FAE 0009                   NOP
    00005FB0              L1438:
    00005FB0 4600                   SHLL        R6
    00005FB2 C70D                   MOVA        L1156,R0
    00005FB4 006D                   MOV.W       @(R0,R6),R0
    00005FB6 0023                   BRAF        R0
    00005FB8 0009                   NOP
    00005FBA              L1155:
    00005FBA 00000002               .RES.W      1
    00005FBC <00000005>             .DATA.L     H'00000005+__$SpPtn
    00005FC0 <00000000>             .DATA.L     __$pProcAdr
    00005FC4 <0000003C>             .DATA.L     H'0000003C+__$Sp
    00005FC8 <00000000>             .DATA.L     _GetFactor
    00005FCC <00000000>             .DATA.L     __$Sp
    00005FD0 <00000000>             .DATA.L     _motor_SET
    00005FD4 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005FD8 <00000078>             .DATA.L     H'00000078+__$Sp
    00005FDC <00000000>             .DATA.L     __$AbsmvAction
    00005FE0 <00000000>             .DATA.L     __$pProcDat
    00005FE4 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00005FE8              L1156:
    00005FE8 005A                   .DATA.W     L1127-L1155
    00005FEA 0060                   .DATA.W     L1128-L1155
    00005FEC 00EC                   .DATA.W     L1129-L1155
    00005FEE 011C                   .DATA.W     L1130-L1155
    00005FF0 01AA                   .DATA.W     L1131-L1155
    00005FF2 01DA                   .DATA.W     L1132-L1155
    00005FF4 0214                   .DATA.W     L1133-L1155
    00005FF6 029A                   .DATA.W     L1134-L1155
    00005FF8 03DE                   .DATA.W     L1135-L1155
    00005FFA 040C                   .DATA.W     L1136-L1155
    00005FFC 0446                   .DATA.W     L1137-L1155
    00005FFE 049E                   .DATA.W     L1138-L1155
    00006000 04BA                   .DATA.W     L1139-L1155
    00006002 0576                   .DATA.W     L1140-L1155
    00006004 05DE                   .DATA.W     L1141-L1155
    00006006 0618                   .DATA.W     L1142-L1155
    00006008 0764                   .DATA.W     L1143-L1155
    0000600A 0792                   .DATA.W     L1144-L1155
    0000600C 07CC                   .DATA.W     L1145-L1155
    0000600E 0852                   .DATA.W     L1146-L1155
    00006010 08AA                   .DATA.W     L1149-L1155
    00006012 0874                   .DATA.W     L1150-L1155
    00006014              L1127:
             tskcmd.c       8243      {
             tskcmd.c       8244      case 0: // 0． 待機
             tskcmd.c       8245          pProcDat->Stp++;
    00006014 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00006016 7001                   ADD         #1,R0
    00006018 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    0000601A              L1128:
             tskcmd.c       8246          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8247    
             tskcmd.c       8248      //****************************************************
             tskcmd.c       8249      //***                    吸引                      ***
             tskcmd.c       8250      //****************************************************
             tskcmd.c       8251      case 1: // 1． Z軸通常速度設定
             tskcmd.c       8252          devno  = MT_Z0;
             tskcmd.c       8253          spdptn = SpPtn.Z0_SpdNmlPtn;                    // [Z]通常速度
    0000601A D282                   MOV.L       L1399+2,R2 ; H'00000006+__$SpPtn
    0000601C E944                   MOV         #68,R9     ; H'00000044
    0000601E 6020                   MOV.B       @R2,R0     ; SpPtn.Z0_SpdNmlPtn
    00006020 4908                   SHLL2       R9
             tskcmd.c       8254          movval = GetPositionValue(POS_Z0_TAIHI);        // [Z]退避位置
    00006022 E407                   MOV         #7,R4      ; H'00000007
    00006024 39FC                   ADD         R15,R9
    00006026 B481                   BSR         __$GetPositionValue
    00006028 2900                   MOV.B       R0,@R9     ; spdptn
    0000602A 1901                   MOV.L       R0,@(4,R9) ; movval
    0000602C E403                   MOV         #3,R4      ; H'00000003
             tskcmd.c       8255    
             tskcmd.c       8256          MAC_SPEED_SET( devno, 
    0000602E 6090                   MOV.B       @R9,R0     ; spdptn
    00006030 DC7D                   MOV.L       L1399+6,R12; H'00000078+__$Sp
    00006032 670C                   EXTU.B      R0,R7
    00006034 E00C                   MOV         #12,R0     ; H'0000000C
    00006036 4780                   MULR        R0,R7
    00006038 1972                   MOV.L       R7,@(8,R9)
    0000603A 6073                   MOV         R7,R0
    0000603C 0ECD                   MOV.W       @(R0,R12),R14; Sp[].ac
    0000603E D17B                   MOV.L       L1399+10,R1; _GetFactor
    00006040 410B                   JSR         @R1
    00006042 EC80                   MOV         #-128,R12  ; H'FFFFFF80
    00006044 3FE11002               MOV.W       R14,@(4:12,R15); mp.accel_type
    00006048 2F02                   MOV.L       R0,@R15    ; mp.factor
    0000604A 6CCC                   EXTU.B      R12,R12
    0000604C DE78                   MOV.L       L1399+14,R14; __$Sp
    0000604E 5092                   MOV.L       @(8,R9),R0
    00006050 64E3                   MOV         R14,R4
    00006052 65E3                   MOV         R14,R5
    00006054 7E7A                   ADD         #122,R14
    00006056 747C                   ADD         #124,R4
    00006058 35CC                   ADD         R12,R5
    0000605A 07ED                   MOV.W       @(R0,R14),R7; Sp[].gl
    0000605C E900                   MOV         #0,R9      ; H'00000000
    0000605E 014E                   MOV.L       @(R0,R4),R1; Sp[].fl
    00006060 025E                   MOV.L       @(R0,R5),R2; Sp[].fh
    00006062 677D                   EXTU.W      R7,R7
    00006064 1F12                   MOV.L       R1,@(8,R15); mp.FL
    00006066 1F23                   MOV.L       R2,@(12,R15); mp.FH
    00006068 1F74                   MOV.L       R7,@(16,R15); mp.utime
    0000606A 1F75                   MOV.L       R7,@(20,R15); mp.dtime
    0000606C 1F96                   MOV.L       R9,@(24,R15); mp.us
    0000606E 1F97                   MOV.L       R9,@(28,R15); mp.ds
    00006070 7FE0                   ADD         #-32,R15
    00006072 65F3                   MOV         R15,R5
    00006074 7520                   ADD         #32,R5
    00006076 6452                   MOV.L       @R5,R4     ; (part of)mp
    00006078 5C51                   MOV.L       @(4,R5),R12; (part of)mp
    0000607A 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    0000607C 5753                   MOV.L       @(12,R5),R7; (part of)mp
    0000607E 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00006080 5955                   MOV.L       @(20,R5),R9; (part of)mp
    00006082 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00006084 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00006086 2F42                   MOV.L       R4,@R15
    00006088 E402                   MOV         #2,R4      ; H'00000002
    0000608A 1FC1                   MOV.L       R12,@(4,R15)
    0000608C 1FE2                   MOV.L       R14,@(8,R15)
    0000608E 1F73                   MOV.L       R7,@(12,R15)
    00006090 1F14                   MOV.L       R1,@(16,R15)
    00006092 1F95                   MOV.L       R9,@(20,R15)
    00006094 1F26                   MOV.L       R2,@(24,R15)
    00006096 D267                   MOV.L       L1399+18,R2; _motor_SET
    00006098 420B                   JSR         @R2
    0000609A 1F67                   MOV.L       R6,@(28,R15)
    0000609C 7F20                   ADD         #32,R15
             tskcmd.c       8257                         Sp[devno][spdptn].ac, 
             tskcmd.c       8258                         Sp[devno][spdptn].fl, 
             tskcmd.c       8259                         Sp[devno][spdptn].fh, 
             tskcmd.c       8260                         Sp[devno][spdptn].gl );
             tskcmd.c       8261          pProcDat->Stp++;
    0000609E 66A2                   MOV.L       @R10,R6    ; pProcDat
    000060A0 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000060A2 7001                   ADD         #1,R0
    000060A4 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000060A6              L1129:
             tskcmd.c       8262          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8263    
             tskcmd.c       8264      case 2: // 2． Z軸退避高さへ移動
             tskcmd.c       8265          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    000060A6 7FFC                   ADD         #-4,R15
    000060A8 E700                   MOV         #0,R7      ; H'00000000
    000060AA 31F16046               MOV.L       @(280:12,R15),R1; movval
    000060AE E602                   MOV         #2,R6      ; H'00000002
    000060B0 E451                   MOV         #81,R4     ; H'00000051
    000060B2 2F12                   MOV.L       R1,@R15
    000060B4 D360                   MOV.L       L1399+22,R3; __$AbsmvAction
    000060B6 430B                   JSR         @R3
    000060B8 65B3                   MOV         R11,R5
    000060BA 6203                   MOV         R0,R2
    000060BC 7F04                   ADD         #4,R15
    000060BE 6E03                   MOV         R0,R14
    000060C0 E042                   MOV         #66,R0     ; H'00000042
    000060C2 4008                   SHLL2       R0
             tskcmd.c       8266          if( result == E_SUCCESS ) result = E_CONTINUE;
    000060C4 2228                   TST         R2,R2
    000060C6 8F01                   BF/S        L1161
    000060C8 0FE6                   MOV.L       R14,@(R0,R15); result
    000060CA 0FD6                   MOV.L       R13,@(R0,R15); result
    000060CC              L1161:
             tskcmd.c       8267          pProcDat->Stp++;
    000060CC 66A2                   MOV.L       @R10,R6    ; pProcDat
    000060CE 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000060D0 7001                   ADD         #1,R0
    000060D2 A424                   BRA         L1154
    000060D4 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000060D6              L1130:
             tskcmd.c       8268          break;
             tskcmd.c       8269    
             tskcmd.c       8270      case 3: // 3． Y0軸通常速度設定
             tskcmd.c       8271          devno  = MT_Y0;
             tskcmd.c       8272          spdptn = SpPtn.Y0_SpdNmlPtn;                    // [Y0]通常速度
    000060D6 D259                   MOV.L       L1399+26,R2; H'00000005+__$SpPtn
    000060D8 E944                   MOV         #68,R9     ; H'00000044
    000060DA 6020                   MOV.B       @R2,R0     ; SpPtn.Y0_SpdNmlPtn
    000060DC 4908                   SHLL2       R9
    000060DE 39FC                   ADD         R15,R9
    000060E0 2900                   MOV.B       R0,@R9     ; spdptn
             tskcmd.c       8273          movptn = pProcAdr->step[actstep].par03;         // [Y0]吸引位置
             tskcmd.c       8274          movval = GetPositionValue(movptn);
    000060E2 E014                   MOV         #20,R0     ; H'00000014
    000060E4 4E80                   MULR        R0,R14
    000060E6 D556                   MOV.L       L1399+30,R5; __$pProcAdr
    000060E8 6452                   MOV.L       @R5,R4     ; pProcAdr
    000060EA 7402                   ADD         #2,R4
    000060EC 60E3                   MOV         R14,R0
             tskcmd.c       8275          
             tskcmd.c       8276          MAC_SPEED_SET( devno, 
    000060EE B41D                   BSR         __$GetPositionValue
    000060F0 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par03
    000060F2 1901                   MOV.L       R0,@(4,R9) ; movval
    000060F4 E40C                   MOV         #12,R4     ; H'0000000C
    000060F6 6090                   MOV.B       @R9,R0     ; spdptn
    000060F8 D552                   MOV.L       L1399+34,R5; H'0000003C+__$Sp
    000060FA 670C                   EXTU.B      R0,R7
    000060FC 6043                   MOV         R4,R0
    000060FE E403                   MOV         #3,R4      ; H'00000003
    00006100 4780                   MULR        R0,R7
    00006102 1972                   MOV.L       R7,@(8,R9)
    00006104 6073                   MOV         R7,R0
    00006106 DE49                   MOV.L       L1399+10,R14; _GetFactor
    00006108 4E0B                   JSR         @R14
    0000610A 0C5D                   MOV.W       @(R0,R5),R12; Sp[].ac
    0000610C 3FC11012               MOV.W       R12,@(36:12,R15); mp.accel_type
    00006110 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00006112 DC47                   MOV.L       L1399+14,R12; __$Sp
    00006114 5092                   MOV.L       @(8,R9),R0
    00006116 61C3                   MOV         R12,R1
    00006118 7140                   ADD         #64,R1
    0000611A 041E                   MOV.L       @(R0,R1),R4; Sp[].fl
    0000611C 1F4A                   MOV.L       R4,@(40,R15); mp.FL
    0000611E 64C3                   MOV         R12,R4
    00006120 7444                   ADD         #68,R4
    00006122 7C3E                   ADD         #62,R12
    00006124 074E                   MOV.L       @(R0,R4),R7; Sp[].fh
    00006126 05CD                   MOV.W       @(R0,R12),R5; Sp[].gl
    00006128 1F7B                   MOV.L       R7,@(44,R15); mp.FH
    0000612A E700                   MOV         #0,R7      ; H'00000000
    0000612C 655D                   EXTU.W      R5,R5
    0000612E 1F7E                   MOV.L       R7,@(56,R15); mp.us
    00006130 1F5C                   MOV.L       R5,@(48,R15); mp.utime
    00006132 1F5D                   MOV.L       R5,@(52,R15); mp.dtime
    00006134 1F7F                   MOV.L       R7,@(60,R15); mp.ds
    00006136 7FE0                   ADD         #-32,R15
    00006138 62F3                   MOV         R15,R2
    0000613A 7240                   ADD         #64,R2
    0000613C 6E22                   MOV.L       @R2,R14    ; (part of)mp
    0000613E E401                   MOV         #1,R4      ; H'00000001
    00006140 5123                   MOV.L       @(12,R2),R1; (part of)mp
    00006142 5625                   MOV.L       @(20,R2),R6; (part of)mp
    00006144 5921                   MOV.L       @(4,R2),R9 ; (part of)mp
    00006146 2FE2                   MOV.L       R14,@R15
    00006148 5C22                   MOV.L       @(8,R2),R12; (part of)mp
    0000614A 1F13                   MOV.L       R1,@(12,R15)
    0000614C 5E24                   MOV.L       @(16,R2),R14; (part of)mp
    0000614E 1F65                   MOV.L       R6,@(20,R15)
    00006150 5626                   MOV.L       @(24,R2),R6; (part of)mp
    00006152 5127                   MOV.L       @(28,R2),R1; (part of)mp
    00006154 1F91                   MOV.L       R9,@(4,R15)
    00006156 1FC2                   MOV.L       R12,@(8,R15)
    00006158 1FE4                   MOV.L       R14,@(16,R15)
    0000615A 1F66                   MOV.L       R6,@(24,R15)
    0000615C D235                   MOV.L       L1399+18,R2; _motor_SET
    0000615E 420B                   JSR         @R2
    00006160 1F17                   MOV.L       R1,@(28,R15)
    00006162 7F20                   ADD         #32,R15
    00006164              L1131:
             tskcmd.c       8277                         Sp[devno][spdptn].ac, 
             tskcmd.c       8278                         Sp[devno][spdptn].fl, 
             tskcmd.c       8279                         Sp[devno][spdptn].fh, 
             tskcmd.c       8280                         Sp[devno][spdptn].gl );
             tskcmd.c       8281          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8282    
             tskcmd.c       8283      case 4: // 4． Y0軸指定位置移動
             tskcmd.c       8284          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00006164 7FFC                   ADD         #-4,R15
    00006166 E700                   MOV         #0,R7      ; H'00000000
    00006168 35F16046               MOV.L       @(280:12,R15),R5; movval
    0000616C E451                   MOV         #81,R4     ; H'00000051
    0000616E E601                   MOV         #1,R6      ; H'00000001
    00006170 2F52                   MOV.L       R5,@R15
    00006172 D331                   MOV.L       L1399+22,R3; __$AbsmvAction
    00006174 430B                   JSR         @R3
    00006176 65B3                   MOV         R11,R5
    00006178 6203                   MOV         R0,R2
    0000617A 7F04                   ADD         #4,R15
    0000617C 6403                   MOV         R0,R4
    0000617E E042                   MOV         #66,R0     ; H'00000042
    00006180 4008                   SHLL2       R0
             tskcmd.c       8285          if( result == E_SUCCESS ) result = E_CONTINUE;
    00006182 2228                   TST         R2,R2
    00006184 8F01                   BF/S        L1165
    00006186 0F46                   MOV.L       R4,@(R0,R15); result
    00006188 0FD6                   MOV.L       R13,@(R0,R15); result
    0000618A              L1165:
             tskcmd.c       8286          pProcDat->Stp++;
    0000618A 66A2                   MOV.L       @R10,R6    ; pProcDat
    0000618C 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000618E 7001                   ADD         #1,R0
    00006190 A3C5                   BRA         L1154
    00006192 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00006194              L1132:
             tskcmd.c       8287          break;
             tskcmd.c       8288    
             tskcmd.c       8289      case 5: // 5． Z軸吸引高さ位置移動
             tskcmd.c       8290          devno  = MT_Z0;
             tskcmd.c       8291          movptn = pProcAdr->step[actstep].par06;         // [Z]吸引開始高さ
             tskcmd.c       8292          movval = GetPositionValue(movptn);
    00006194 E014                   MOV         #20,R0     ; H'00000014
    00006196 4E80                   MULR        R0,R14
    00006198 D729                   MOV.L       L1399+30,R7; __$pProcAdr
    0000619A 6C72                   MOV.L       @R7,R12    ; pProcAdr
    0000619C 7C05                   ADD         #5,R12
    0000619E 60E3                   MOV         R14,R0
    000061A0 B3C4                   BSR         __$GetPositionValue
    000061A2 04CC                   MOV.B       @(R0,R12),R4; pProcAdr->step[].par06
             tskcmd.c       8293    
             tskcmd.c       8294          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    000061A4 2F06                   MOV.L       R0,@-R15
    000061A6 E700                   MOV         #0,R7      ; H'00000000
    000061A8 E602                   MOV         #2,R6      ; H'00000002
    000061AA E451                   MOV         #81,R4     ; H'00000051
    000061AC D322                   MOV.L       L1399+22,R3; __$AbsmvAction
    000061AE 430B                   JSR         @R3
    000061B0 65B3                   MOV         R11,R5
    000061B2 6903                   MOV         R0,R9
    000061B4 7F04                   ADD         #4,R15
    000061B6 6E03                   MOV         R0,R14
    000061B8 E042                   MOV         #66,R0     ; H'00000042
    000061BA 4008                   SHLL2       R0
             tskcmd.c       8295          if( result == E_SUCCESS ) result = E_CONTINUE;
    000061BC 2998                   TST         R9,R9
    000061BE 8F01                   BF/S        L1168
    000061C0 0FE6                   MOV.L       R14,@(R0,R15); result
    000061C2 0FD6                   MOV.L       R13,@(R0,R15); result
    000061C4              L1168:
             tskcmd.c       8296          pProcDat->Stp++;
    000061C4 66A2                   MOV.L       @R10,R6    ; pProcDat
    000061C6 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000061C8 7001                   ADD         #1,R0
    000061CA A3A8                   BRA         L1154
    000061CC 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000061CE              L1133:
             tskcmd.c       8297          break;
             tskcmd.c       8298    
             tskcmd.c       8299      case 6: // 6． 圧力基板制御：未指定電磁弁ON、指定電磁弁OFF
             tskcmd.c       8300          vout.target = 0x0fff;
    000061CE 01000FFF               MOVI20      #4095,R1   ; H'00000FFF
    000061D2 D21D                   MOV.L       L1399+38,R2; __$vout
    000061D4 2211                   MOV.W       R1,@R2     ; vout.target
    000061D6 3F11108E               MOV.W       R1,@(284:12,R15)
             tskcmd.c       8301          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
    000061DA B630                   BSR         __$NzlTargetGet
    000061DC 0009                   NOP
    000061DE 6403                   MOV         R0,R4
             tskcmd.c       8302          
             tskcmd.c       8303          mbx_send    (
             tskcmd.c       8304                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8305                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8306                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8307                          prid1,               // prid1
             tskcmd.c       8308                          bcid,                // bcid
             tskcmd.c       8309                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       8310                          inf1,                // sts
             tskcmd.c       8311                          inf2,                // sts2
             tskcmd.c       8312                          (UB *)&vout.target,  // data
             tskcmd.c       8313                          sizeof( ST_VOUT )    // siz
             tskcmd.c       8314                      );
    000061E0 E704                   MOV         #4,R7      ; H'00000004
    000061E2 30F1508E               MOV.W       @(284:12,R15),R0
    000061E6 D919                   MOV.L       L1399+42,R9; H'00000002+__$vout
    000061E8 204A                   XOR         R4,R0
    000061EA 2901                   MOV.W       R0,@R9     ; vout.valout
    000061EC 2F76                   MOV.L       R7,@-R15
    000061EE D916                   MOV.L       L1399+38,R9; __$vout
    000061F0 2F96                   MOV.L       R9,@-R15
    000061F2 7FFC                   ADD         #-4,R15
    000061F4 31F1812C               MOVU.B      @(300,R15),R1; inf2
    000061F8 2F12                   MOV.L       R1,@R15
    000061FA 7FFC                   ADD         #-4,R15
    000061FC 3DF18134               MOVU.B      @(308,R15),R13; inf1
    00006200 EE9B                   MOV         #-101,R14  ; H'FFFFFF9B
    00006202 6EEC                   EXTU.B      R14,R14
    00006204 2FD2                   MOV.L       R13,@R15
    00006206 2FE6                   MOV.L       R14,@-R15
    00006208 2FB6                   MOV.L       R11,@-R15
    0000620A E60D                   MOV         #13,R6     ; H'0000000D
    0000620C E50C                   MOV         #12,R5     ; H'0000000C
    0000620E 6463                   MOV         R6,R4
    00006210 DD0F                   MOV.L       L1399+46,R13; _mbx_send
    00006212 4D0B                   JSR         @R13
    00006214 67C3                   MOV         R12,R7
    00006216 7F18                   ADD         #24,R15
             tskcmd.c       8315          pProcDat->Stp++;
    00006218 6EA2                   MOV.L       @R10,R14   ; pProcDat
    0000621A 84E2                   MOV.B       @(2,R14),R0; (pProcDat)->Stp
    0000621C 7001                   ADD         #1,R0
    0000621E A37E                   BRA         L1154
    00006220 80E2                   MOV.B       R0,@(2,R14); (pProcDat)->Stp
    00006222              L1399:
    00006222 00000002               .RES.W      1
    00006224 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00006228 <00000078>             .DATA.L     H'00000078+__$Sp
    0000622C <00000000>             .DATA.L     _GetFactor
    00006230 <00000000>             .DATA.L     __$Sp
    00006234 <00000000>             .DATA.L     _motor_SET
    00006238 <00000000>             .DATA.L     __$AbsmvAction
    0000623C <00000005>             .DATA.L     H'00000005+__$SpPtn
    00006240 <00000000>             .DATA.L     __$pProcAdr
    00006244 <0000003C>             .DATA.L     H'0000003C+__$Sp
    00006248 <00000000>             .DATA.L     __$vout
    0000624C <00000002>             .DATA.L     H'00000002+__$vout
    00006250 <00000000>             .DATA.L     _mbx_send
    00006254              L1134:
             tskcmd.c       8316          break;
             tskcmd.c       8317    
             tskcmd.c       8318      case 7: // 7． P軸吸引速度設定
             tskcmd.c       8319          devno  = MT_Z0;
             tskcmd.c       8320          spdptn = (pProcAdr->step[actstep].par05 >> 4);  // [Z]吸引下降速度パターン
    00006254 E014                   MOV         #20,R0     ; H'00000014
    00006256 6DE3                   MOV         R14,R13
    00006258 4D80                   MULR        R0,R13
    0000625A D9C4                   MOV.L       L1400+2,R9 ; __$pProcAdr
    0000625C 6292                   MOV.L       @R9,R2     ; pProcAdr
    0000625E E7FC                   MOV         #-4,R7     ; H'FFFFFFFC
    00006260 6123                   MOV         R2,R1
    00006262 7104                   ADD         #4,R1
    00006264 60D3                   MOV         R13,R0
    00006266 051C                   MOV.B       @(R0,R1),R5; pProcAdr->step[].par05
             tskcmd.c       8321          movptn = pProcAdr->step[actstep].par07;         // [Z]吸引終了高さ
             tskcmd.c       8322          movval = GetPositionValue(movptn);
    00006268 7206                   ADD         #6,R2
    0000626A 645C                   EXTU.B      R5,R4
    0000626C 447C                   SHAD        R7,R4
    0000626E 3F41012C               MOV.B       R4,@(300:12,R15)
             tskcmd.c       8323    
             tskcmd.c       8324          MAC_SPEED_SET( devno, 
    00006272 39F1812C               MOVU.B      @(300,R15),R9
    00006276 B359                   BSR         __$GetPositionValue
    00006278 042C                   MOV.B       @(R0,R2),R4; pProcAdr->step[].par07
    0000627A 3F012045               MOV.L       R0,@(276:12,R15); movval
    0000627E E00C                   MOV         #12,R0     ; H'0000000C
    00006280 E403                   MOV         #3,R4      ; H'00000003
    00006282 4980                   MULR        R0,R9
    00006284 D5BA                   MOV.L       L1400+6,R5 ; H'00000078+__$Sp
    00006286 3FD1204A               MOV.L       R13,@(296:12,R15)
    0000628A ED40                   MOV         #64,R13    ; H'00000040
    0000628C 6093                   MOV         R9,R0
    0000628E 005D                   MOV.W       @(R0,R5),R0; Sp[].ac
    00006290 3DFC                   ADD         R15,R13
    00006292 3F91204C               MOV.L       R9,@(304:12,R15)
    00006296 D5B7                   MOV.L       L1400+10,R5; _GetFactor
    00006298 450B                   JSR         @R5
    0000629A 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    0000629C 2D02                   MOV.L       R0,@R13    ; mp.factor
    0000629E E600                   MOV         #0,R6      ; H'00000000
    000062A0 D7B5                   MOV.L       L1400+14,R7; __$Sp
    000062A2 6093                   MOV         R9,R0
    000062A4 6173                   MOV         R7,R1
    000062A6 717C                   ADD         #124,R1
    000062A8 091E                   MOV.L       @(R0,R1),R9; Sp[].fl
    000062AA 6273                   MOV         R7,R2
    000062AC 777A                   ADD         #122,R7
    000062AE 1D66                   MOV.L       R6,@(24,R13); mp.us
    000062B0 1D92                   MOV.L       R9,@(8,R13); mp.FL
    000062B2 E980                   MOV         #-128,R9   ; H'FFFFFF80
    000062B4 699C                   EXTU.B      R9,R9
    000062B6 047D                   MOV.W       @(R0,R7),R4; Sp[].gl
    000062B8 329C                   ADD         R9,R2
    000062BA 1D67                   MOV.L       R6,@(28,R13); mp.ds
    000062BC 012E                   MOV.L       @(R0,R2),R1; Sp[].fh
    000062BE 644D                   EXTU.W      R4,R4
    000062C0 1D44                   MOV.L       R4,@(16,R13); mp.utime
    000062C2 1D13                   MOV.L       R1,@(12,R13); mp.FH
    000062C4 1D45                   MOV.L       R4,@(20,R13); mp.dtime
    000062C6 7FE0                   ADD         #-32,R15
    000062C8 65F3                   MOV         R15,R5
    000062CA 7560                   ADD         #96,R5
    000062CC 5951                   MOV.L       @(4,R5),R9 ; (part of)mp
    000062CE E402                   MOV         #2,R4      ; H'00000002
    000062D0 5D52                   MOV.L       @(8,R5),R13; (part of)mp
    000062D2 5155                   MOV.L       @(20,R5),R1; (part of)mp
    000062D4 6752                   MOV.L       @R5,R7     ; (part of)mp
    000062D6 1F91                   MOV.L       R9,@(4,R15)
    000062D8 5953                   MOV.L       @(12,R5),R9; (part of)mp
    000062DA 1FD2                   MOV.L       R13,@(8,R15)
    000062DC 5D54                   MOV.L       @(16,R5),R13; (part of)mp
    000062DE 1F15                   MOV.L       R1,@(20,R15)
    000062E0 5256                   MOV.L       @(24,R5),R2; (part of)mp
    000062E2 5157                   MOV.L       @(28,R5),R1; (part of)mp
    000062E4 2F72                   MOV.L       R7,@R15
    000062E6 1F93                   MOV.L       R9,@(12,R15)
    000062E8 1FD4                   MOV.L       R13,@(16,R15)
    000062EA 1F26                   MOV.L       R2,@(24,R15)
    000062EC D5A3                   MOV.L       L1400+18,R5; _motor_SET
    000062EE 450B                   JSR         @R5
    000062F0 1F17                   MOV.L       R1,@(28,R15)
    000062F2 7F20                   ADD         #32,R15
             tskcmd.c       8325                         Sp[devno][spdptn].ac, 
             tskcmd.c       8326                         Sp[devno][spdptn].fl, 
             tskcmd.c       8327                         Sp[devno][spdptn].fh, 
             tskcmd.c       8328                         Sp[devno][spdptn].gl );
             tskcmd.c       8329    
             tskcmd.c       8330          devno  = MT_P0;
             tskcmd.c       8331          spdptn = (pProcAdr->step[actstep].par05 & 0x0f);// [P]吸引速度パターン
             tskcmd.c       8332          MAC_SPEED_SET( devno, 
    000062F4 DD9D                   MOV.L       L1400+2,R13; __$pProcAdr
    000062F6 67D2                   MOV.L       @R13,R7    ; pProcAdr
    000062F8 30F1604A               MOV.L       @(296:12,R15),R0
    000062FC 7704                   ADD         #4,R7
    000062FE 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].par05
    00006300 D79F                   MOV.L       L1400+22,R7; H'000000B4+__$Sp
    00006302 C90F                   AND         #15,R0
    00006304 6903                   MOV         R0,R9
    00006306 E00C                   MOV         #12,R0     ; H'0000000C
    00006308 4980                   MULR        R0,R9
    0000630A 6093                   MOV         R9,R0
    0000630C 0D7D                   MOV.W       @(R0,R7),R13; Sp[].ac
    0000630E 3F912046               MOV.L       R9,@(280:12,R15)
    00006312 D198                   MOV.L       L1400+10,R1; _GetFactor
    00006314 410B                   JSR         @R1
    00006316 E403                   MOV         #3,R4      ; H'00000003
    00006318 E5B8                   MOV         #-72,R5    ; H'FFFFFFB8
    0000631A E9B6                   MOV         #-74,R9    ; H'FFFFFFB6
    0000631C 3F012018               MOV.L       R0,@(96:12,R15); mp.factor
    00006320 D795                   MOV.L       L1400+14,R7; __$Sp
    00006322 655C                   EXTU.B      R5,R5
    00006324 E6BC                   MOV         #-68,R6    ; H'FFFFFFBC
    00006326 30F16046               MOV.L       @(280:12,R15),R0
    0000632A 6473                   MOV         R7,R4
    0000632C 345C                   ADD         R5,R4
    0000632E 3FD11032               MOV.W       R13,@(100:12,R15); mp.accel_type
    00006332 0D4E                   MOV.L       @(R0,R4),R13; Sp[].fl
    00006334 699C                   EXTU.B      R9,R9
    00006336 666C                   EXTU.B      R6,R6
    00006338 E100                   MOV         #0,R1      ; H'00000000
    0000633A 6573                   MOV         R7,R5
    0000633C 379C                   ADD         R9,R7
    0000633E 3FD1201A               MOV.L       R13,@(104:12,R15); mp.FL
    00006342 356C                   ADD         R6,R5
    00006344 0D7D                   MOV.W       @(R0,R7),R13; Sp[].gl
    00006346 065E                   MOV.L       @(R0,R5),R6; Sp[].fh
    00006348 6DDD                   EXTU.W      R13,R13
    0000634A 3F61201B               MOV.L       R6,@(108:12,R15); mp.FH
    0000634E 3FD1201C               MOV.L       R13,@(112:12,R15); mp.utime
    00006352 3FD1201D               MOV.L       R13,@(116:12,R15); mp.dtime
    00006356 3F11201E               MOV.L       R1,@(120:12,R15); mp.us
    0000635A 3F11201F               MOV.L       R1,@(124:12,R15); mp.ds
    0000635E 7FE0                   ADD         #-32,R15
    00006360 ED80                   MOV         #-128,R13  ; H'FFFFFF80
    00006362 6DDC                   EXTU.B      R13,R13
    00006364 E403                   MOV         #3,R4      ; H'00000003
    00006366 65F3                   MOV         R15,R5
    00006368 35DC                   ADD         R13,R5
    0000636A 6252                   MOV.L       @R5,R2     ; (part of)mp
    0000636C 5653                   MOV.L       @(12,R5),R6; (part of)mp
    0000636E 2F22                   MOV.L       R2,@R15
    00006370 5252                   MOV.L       @(8,R5),R2 ; (part of)mp
    00006372 1F63                   MOV.L       R6,@(12,R15)
    00006374 1F22                   MOV.L       R2,@(8,R15)
    00006376 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00006378 5655                   MOV.L       @(20,R5),R6; (part of)mp
    0000637A 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    0000637C 1F24                   MOV.L       R2,@(16,R15)
    0000637E 1F65                   MOV.L       R6,@(20,R15)
    00006380 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00006382 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00006384 1F71                   MOV.L       R7,@(4,R15)
    00006386 1F26                   MOV.L       R2,@(24,R15)
    00006388 D27C                   MOV.L       L1400+18,R2; _motor_SET
    0000638A 420B                   JSR         @R2
    0000638C 1F67                   MOV.L       R6,@(28,R15)
    0000638E 7F20                   ADD         #32,R15
             tskcmd.c       8333                         Sp[devno][spdptn].ac, 
             tskcmd.c       8334                         Sp[devno][spdptn].fl, 
             tskcmd.c       8335                         Sp[devno][spdptn].fh, 
             tskcmd.c       8336                         Sp[devno][spdptn].gl );
             tskcmd.c       8337          pProcDat->Stp++;
    00006390 66A2                   MOV.L       @R10,R6    ; pProcDat
    00006392 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00006394 7001                   ADD         #1,R0
    00006396 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00006398              L1135:
             tskcmd.c       8338          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8339    
             tskcmd.c       8340      case 8: // 8． 吸引開始（P軸吸引 & Z軸下降）
             tskcmd.c       8341          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
    00006398 E014                   MOV         #20,R0     ; H'00000014
    0000639A 4E80                   MULR        R0,R14
    0000639C D473                   MOV.L       L1400+2,R4 ; __$pProcAdr
    0000639E 6D42                   MOV.L       @R4,R13    ; pProcAdr
    000063A0 7D0C                   ADD         #12,R13
    000063A2 60E3                   MOV         R14,R0
    000063A4 0DDE                   MOV.L       @(R0,R13),R13; pProcAdr->step[].par13
    000063A6 2FD6                   MOV.L       R13,@-R15
    000063A8 7FFC                   ADD         #-4,R15
    000063AA E602                   MOV         #2,R6      ; H'00000002
    000063AC 39F16047               MOV.L       @(284:12,R15),R9; movval
    000063B0 E703                   MOV         #3,R7      ; H'00000003
    000063B2 65B3                   MOV         R11,R5
    000063B4 2F92                   MOV.L       R9,@R15
    000063B6 D373                   MOV.L       L1400+26,R3; __$MapAction
    000063B8 430B                   JSR         @R3
    000063BA 64C3                   MOV         R12,R4
    000063BC 7F08                   ADD         #8,R15
             tskcmd.c       8342          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8343          pProcDat->Stp++;
    000063BE 66A2                   MOV.L       @R10,R6    ; pProcDat
    000063C0 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000063C2 7001                   ADD         #1,R0
    000063C4 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000063C6              L1136:
             tskcmd.c       8344          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8345    
             tskcmd.c       8346      case 9: // 9． 圧力基板制御：吸引動作中に指定したノズルチャンネルの圧力を監視
             tskcmd.c       8347              //     ※各チャンネルの圧力センサ値が設定値を上回った場合、エラーとし電磁弁をONにする。
             tskcmd.c       8348          mbx_send    (
             tskcmd.c       8349                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8350                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8351                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8352                          prid1,               // prid1
             tskcmd.c       8353                          bcid,                // bcid
             tskcmd.c       8354                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8355                          inf1,                // sts
             tskcmd.c       8356                          inf2,                // sts2
             tskcmd.c       8357                          &dummy,              // data
             tskcmd.c       8358                          sizeof( dummy )      // siz
             tskcmd.c       8359                      );
    000063C6 EE01                   MOV         #1,R14     ; H'00000001
    000063C8 2FE6                   MOV.L       R14,@-R15
    000063CA EE84                   MOV         #-124,R14  ; H'FFFFFF84
    000063CC 6EEC                   EXTU.B      R14,R14
    000063CE 64F3                   MOV         R15,R4
    000063D0 34EC                   ADD         R14,R4
    000063D2 2F46                   MOV.L       R4,@-R15
    000063D4 611C                   EXTU.B      R1,R1
    000063D6 2F16                   MOV.L       R1,@-R15
    000063D8 7FFC                   ADD         #-4,R15
    000063DA ED99                   MOV         #-103,R13  ; H'FFFFFF99
    000063DC 35F18134               MOVU.B      @(308,R15),R5; inf1
    000063E0 6DDC                   EXTU.B      R13,R13
    000063E2 2F52                   MOV.L       R5,@R15
    000063E4 2FD6                   MOV.L       R13,@-R15
    000063E6 2FB6                   MOV.L       R11,@-R15
    000063E8 E60D                   MOV         #13,R6     ; H'0000000D
    000063EA E50C                   MOV         #12,R5     ; H'0000000C
    000063EC 6463                   MOV         R6,R4
    000063EE D966                   MOV.L       L1400+30,R9; _mbx_send
    000063F0 490B                   JSR         @R9
    000063F2 67C3                   MOV         R12,R7
    000063F4 7F18                   ADD         #24,R15
             tskcmd.c       8360          pProcDat->Stp++;
    000063F6 61A2                   MOV.L       @R10,R1    ; pProcDat
    000063F8 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    000063FA 7001                   ADD         #1,R0
    000063FC A28F                   BRA         L1154
    000063FE 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00006400              L1137:
             tskcmd.c       8361          break;
             tskcmd.c       8362    
             tskcmd.c       8363      case 10:// 10．吸引動作終了
             tskcmd.c       8364          if( tskid == ID_TSK_MOTEND )
    00006400 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    00006404 880A                   CMP/EQ      #10,R0
    00006406 8B08                   BF          L1176
             tskcmd.c       8365          {
             tskcmd.c       8366              WaitAction( prid1, bcid, 10 );
    00006408 E60A                   MOV         #10,R6     ; H'0000000A
    0000640A 65B3                   MOV         R11,R5
    0000640C D35F                   MOV.L       L1400+34,R3; __$WaitAction
    0000640E 430B                   JSR         @R3
    00006410 64C3                   MOV         R12,R4
             tskcmd.c       8367              pProcDat->Stp++;
    00006412 62A2                   MOV.L       @R10,R2    ; pProcDat
    00006414 8422                   MOV.B       @(2,R2),R0 ; (pProcDat)->Stp
    00006416 7001                   ADD         #1,R0
    00006418 8022                   MOV.B       R0,@(2,R2) ; (pProcDat)->Stp
    0000641A              L1176:
             tskcmd.c       8368          }
             tskcmd.c       8369          if( tskid == ID_TSK_PUNIT )
    0000641A 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    0000641E 880D                   CMP/EQ      #13,R0
    00006420 8901                   BT          L1439
    00006422 A27C                   BRA         L1154
    00006424 0009                   NOP
    00006426              L1439:
             tskcmd.c       8370          {
             tskcmd.c       8371              mbx_send    (
             tskcmd.c       8372                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8373                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8374                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8375                              prid1,               // prid1
             tskcmd.c       8376                              bcid,                // bcid
             tskcmd.c       8377                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8378                              inf1,                // sts
             tskcmd.c       8379                              inf2,                // sts2
             tskcmd.c       8380                              &dummy,              // data
             tskcmd.c       8381                              sizeof( dummy )      // siz
             tskcmd.c       8382                          );
    00006426 E401                   MOV         #1,R4      ; H'00000001
    00006428 2F46                   MOV.L       R4,@-R15
    0000642A ED84                   MOV         #-124,R13  ; H'FFFFFF84
    0000642C 6DDC                   EXTU.B      R13,R13
    0000642E 65F3                   MOV         R15,R5
    00006430 35DC                   ADD         R13,R5
    00006432 2F56                   MOV.L       R5,@-R15
    00006434 611C                   EXTU.B      R1,R1
    00006436 2F16                   MOV.L       R1,@-R15
    00006438 7FFC                   ADD         #-4,R15
    0000643A EA99                   MOV         #-103,R10  ; H'FFFFFF99
    0000643C 3EF18134               MOVU.B      @(308,R15),R14; inf1
    00006440 6AAC                   EXTU.B      R10,R10
    00006442 2FE2                   MOV.L       R14,@R15
    00006444 2FA6                   MOV.L       R10,@-R15
    00006446 2FB6                   MOV.L       R11,@-R15
    00006448 E60D                   MOV         #13,R6     ; H'0000000D
    0000644A E50C                   MOV         #12,R5     ; H'0000000C
    0000644C 6463                   MOV         R6,R4
    0000644E D94E                   MOV.L       L1400+30,R9; _mbx_send
    00006450 490B                   JSR         @R9
    00006452 67C3                   MOV         R12,R7
    00006454 A263                   BRA         L1154
    00006456 7F18                   ADD         #24,R15
    00006458              L1138:
    00006458 E499                   MOV         #-103,R4   ; H'FFFFFF99
             tskcmd.c       8383          }
             tskcmd.c       8384          break;
             tskcmd.c       8385    
             tskcmd.c       8386      case 11:  // 11．指定時間ウェイト待ち
             tskcmd.c       8387          if( msgid == ID_MSG_PRESSTAN )
    0000645A 626C                   EXTU.B      R6,R2
    0000645C 644C                   EXTU.B      R4,R4
    0000645E 3240                   CMP/EQ      R4,R2
    00006460 8B01                   BF          L1440
    00006462 A25C                   BRA         L1154
    00006464 0009                   NOP
    00006466              L1440:
             tskcmd.c       8388          {
             tskcmd.c       8389              //読み捨て
             tskcmd.c       8390              break;
             tskcmd.c       8391          }
             tskcmd.c       8392          if( msgid == ID_MSG_TIMWAIT )
    00006466 E4C8                   MOV         #-56,R4    ; H'FFFFFFC8
    00006468 644C                   EXTU.B      R4,R4
    0000646A 3240                   CMP/EQ      R4,R2
    0000646C 8B02                   BF          L1181
             tskcmd.c       8393          {
             tskcmd.c       8394              pProcDat->Stp++;
    0000646E 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00006470 7001                   ADD         #1,R0
    00006472 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00006474              L1139:
    00006474              L1181:
             tskcmd.c       8395          }
             tskcmd.c       8396          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8397          
             tskcmd.c       8398      case 12:// 12．Z軸退避高さへ移動
             tskcmd.c       8399          devno  = MT_Z0;
             tskcmd.c       8400          spdptn = SpPtn.Z0_SpdNmlPtn;
    00006474 D146                   MOV.L       L1400+38,R1; H'00000006+__$SpPtn
    00006476 6010                   MOV.B       @R1,R0     ; SpPtn.Z0_SpdNmlPtn
             tskcmd.c       8401          movval = GetPositionValue(POS_Z0_TAIHI);
    00006478 E407                   MOV         #7,R4      ; H'00000007
    0000647A EC84                   MOV         #-124,R12  ; H'FFFFFF84
    0000647C 3F010110               MOV.B       R0,@(272:12,R15); spdptn
    00006480 B254                   BSR         __$GetPositionValue
    00006482 E980                   MOV         #-128,R9   ; H'FFFFFF80
             tskcmd.c       8402    
             tskcmd.c       8403          MAC_SPEED_SET( devno, 
    00006484 31F18110               MOVU.B      @(272,R15),R1; spdptn
    00006488 3F012045               MOV.L       R0,@(276:12,R15); movval
    0000648C E00C                   MOV         #12,R0     ; H'0000000C
    0000648E 6CCC                   EXTU.B      R12,R12
    00006490 4180                   MULR        R0,R1
    00006492 D237                   MOV.L       L1400+6,R2 ; H'00000078+__$Sp
    00006494 3CFC                   ADD         R15,R12
    00006496 E403                   MOV         #3,R4      ; H'00000003
    00006498 699C                   EXTU.B      R9,R9
    0000649A 6013                   MOV         R1,R0
    0000649C 002D                   MOV.W       @(R0,R2),R0; Sp[].ac
    0000649E 3F112046               MOV.L       R1,@(280:12,R15)
    000064A2 D134                   MOV.L       L1400+10,R1; _GetFactor
    000064A4 410B                   JSR         @R1
    000064A6 81C2                   MOV.W       R0,@(4,R12); mp.accel_type
    000064A8 2C02                   MOV.L       R0,@R12    ; mp.factor
    000064AA D533                   MOV.L       L1400+14,R5; __$Sp
    000064AC 30F16046               MOV.L       @(280:12,R15),R0
    000064B0 6453                   MOV         R5,R4
    000064B2 747C                   ADD         #124,R4
    000064B4 6753                   MOV         R5,R7
    000064B6 379C                   ADD         R9,R7
    000064B8 757A                   ADD         #122,R5
    000064BA 0E7E                   MOV.L       @(R0,R7),R14; Sp[].fh
    000064BC 095D                   MOV.W       @(R0,R5),R9; Sp[].gl
    000064BE 024E                   MOV.L       @(R0,R4),R2; Sp[].fl
    000064C0 1CE3                   MOV.L       R14,@(12,R12); mp.FH
    000064C2 699D                   EXTU.W      R9,R9
    000064C4 EE00                   MOV         #0,R14     ; H'00000000
    000064C6 1C22                   MOV.L       R2,@(8,R12); mp.FL
    000064C8 1C94                   MOV.L       R9,@(16,R12); mp.utime
    000064CA 1C95                   MOV.L       R9,@(20,R12); mp.dtime
    000064CC 1CE6                   MOV.L       R14,@(24,R12); mp.us
    000064CE 1CE7                   MOV.L       R14,@(28,R12); mp.ds
    000064D0 7FE0                   ADD         #-32,R15
    000064D2 E7A4                   MOV         #-92,R7    ; H'FFFFFFA4
    000064D4 65F3                   MOV         R15,R5
    000064D6 677C                   EXTU.B      R7,R7
    000064D8 E402                   MOV         #2,R4      ; H'00000002
    000064DA 357C                   ADD         R7,R5
    000064DC 5951                   MOV.L       @(4,R5),R9 ; (part of)mp
    000064DE 5C52                   MOV.L       @(8,R5),R12; (part of)mp
    000064E0 6152                   MOV.L       @R5,R1     ; (part of)mp
    000064E2 1F91                   MOV.L       R9,@(4,R15)
    000064E4 5753                   MOV.L       @(12,R5),R7; (part of)mp
    000064E6 1FC2                   MOV.L       R12,@(8,R15)
    000064E8 5E54                   MOV.L       @(16,R5),R14; (part of)mp
    000064EA 5955                   MOV.L       @(20,R5),R9; (part of)mp
    000064EC 5C56                   MOV.L       @(24,R5),R12; (part of)mp
    000064EE 5657                   MOV.L       @(28,R5),R6; (part of)mp
    000064F0 2F12                   MOV.L       R1,@R15
    000064F2 1F73                   MOV.L       R7,@(12,R15)
    000064F4 1FE4                   MOV.L       R14,@(16,R15)
    000064F6 1F95                   MOV.L       R9,@(20,R15)
    000064F8 1FC6                   MOV.L       R12,@(24,R15)
    000064FA DE20                   MOV.L       L1400+18,R14; _motor_SET
    000064FC 4E0B                   JSR         @R14
    000064FE 1F67                   MOV.L       R6,@(28,R15)
    00006500 7F1C                   ADD         #28,R15
    00006502 E700                   MOV         #0,R7      ; H'00000000
             tskcmd.c       8404                         Sp[devno][spdptn].ac, 
             tskcmd.c       8405                         Sp[devno][spdptn].fl, 
             tskcmd.c       8406                         Sp[devno][spdptn].fh, 
             tskcmd.c       8407                         Sp[devno][spdptn].gl );
             tskcmd.c       8408    
             tskcmd.c       8409          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00006504 3CF16046               MOV.L       @(280:12,R15),R12; movval
    00006508 E602                   MOV         #2,R6      ; H'00000002
    0000650A E451                   MOV         #81,R4     ; H'00000051
    0000650C 2FC2                   MOV.L       R12,@R15
    0000650E D321                   MOV.L       L1400+42,R3; __$AbsmvAction
    00006510 430B                   JSR         @R3
    00006512 65B3                   MOV         R11,R5
    00006514 6203                   MOV         R0,R2
    00006516 7F04                   ADD         #4,R15
    00006518 6B03                   MOV         R0,R11
    0000651A E042                   MOV         #66,R0     ; H'00000042
    0000651C 4008                   SHLL2       R0
             tskcmd.c       8410          if( result == E_SUCCESS ) result = E_CONTINUE;
    0000651E 2228                   TST         R2,R2
    00006520 8F01                   BF/S        L1183
    00006522 0FB6                   MOV.L       R11,@(R0,R15); result
    00006524 0FD6                   MOV.L       R13,@(R0,R15); result
    00006526              L1183:
             tskcmd.c       8411          pProcDat->Stp++;
    00006526 66A2                   MOV.L       @R10,R6    ; pProcDat
    00006528 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000652A 7001                   ADD         #1,R0
    0000652C A1F7                   BRA         L1154
    0000652E 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00006530              L1140:
             tskcmd.c       8412          break;
             tskcmd.c       8413    
             tskcmd.c       8414      //****************************************************
             tskcmd.c       8415      //***                    吐出                      ***
             tskcmd.c       8416      //****************************************************
             tskcmd.c       8417      case 13:   // 13．Y0軸指定位置移動
             tskcmd.c       8418          movptn = pProcAdr->step[actstep].par04;
             tskcmd.c       8419          movval = GetPositionValue(movptn);
    00006530 E014                   MOV         #20,R0     ; H'00000014
    00006532 4E80                   MULR        R0,R14
    00006534 D10D                   MOV.L       L1400+2,R1 ; __$pProcAdr
    00006536 6C12                   MOV.L       @R1,R12    ; pProcAdr
    00006538 7C03                   ADD         #3,R12
    0000653A 60E3                   MOV         R14,R0
    0000653C 04CC                   MOV.B       @(R0,R12),R4; pProcAdr->step[].par04
    0000653E B1F5                   BSR         __$GetPositionValue
    00006540 66E3                   MOV         R14,R6
             tskcmd.c       8420          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00006542 2F06                   MOV.L       R0,@-R15
    00006544 E700                   MOV         #0,R7      ; H'00000000
    00006546 E451                   MOV         #81,R4     ; H'00000051
    00006548 D312                   MOV.L       L1400+42,R3; __$AbsmvAction
    0000654A 430B                   JSR         @R3
    0000654C 65B3                   MOV         R11,R5
    0000654E 6903                   MOV         R0,R9
    00006550 7F04                   ADD         #4,R15
    00006552 6E03                   MOV         R0,R14
    00006554 E042                   MOV         #66,R0     ; H'00000042
    00006556 4008                   SHLL2       R0
             tskcmd.c       8421          if( result == E_SUCCESS ) result = E_CONTINUE;
    00006558 2998                   TST         R9,R9
    0000655A 8F01                   BF/S        L1186
    0000655C 0FE6                   MOV.L       R14,@(R0,R15); result
    0000655E 0FD6                   MOV.L       R13,@(R0,R15); result
    00006560              L1186:
             tskcmd.c       8422          pProcDat->Stp++;
    00006560 66A2                   MOV.L       @R10,R6    ; pProcDat
    00006562 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00006564 7001                   ADD         #1,R0
    00006566 A1DA                   BRA         L1154
    00006568 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000656A              L1400:
    0000656A 00000002               .RES.W      1
    0000656C <00000000>             .DATA.L     __$pProcAdr
    00006570 <00000078>             .DATA.L     H'00000078+__$Sp
    00006574 <00000000>             .DATA.L     _GetFactor
    00006578 <00000000>             .DATA.L     __$Sp
    0000657C <00000000>             .DATA.L     _motor_SET
    00006580 <000000B4>             .DATA.L     H'000000B4+__$Sp
    00006584 <00000000>             .DATA.L     __$MapAction
    00006588 <00000000>             .DATA.L     _mbx_send
    0000658C <00000000>             .DATA.L     __$WaitAction
    00006590 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00006594 <00000000>             .DATA.L     __$AbsmvAction
    00006598              L1141:
             tskcmd.c       8423          break;
             tskcmd.c       8424    
             tskcmd.c       8425      case 14:   // 14．Z軸吐出開始高さへ移動
             tskcmd.c       8426          devno  = MT_Z0;
             tskcmd.c       8427          movptn = pProcAdr->step[actstep].par09;                 // 吐出開始高さ
             tskcmd.c       8428          movval = GetPositionValue(movptn);
    00006598 E014                   MOV         #20,R0     ; H'00000014
    0000659A 4E80                   MULR        R0,R14
    0000659C D1A6                   MOV.L       L1401,R1   ; __$pProcAdr
    0000659E 6C12                   MOV.L       @R1,R12    ; pProcAdr
    000065A0 7C08                   ADD         #8,R12
    000065A2 60E3                   MOV         R14,R0
    000065A4 B1C2                   BSR         __$GetPositionValue
    000065A6 04CC                   MOV.B       @(R0,R12),R4; pProcAdr->step[].par09
             tskcmd.c       8429    
             tskcmd.c       8430          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    000065A8 2F06                   MOV.L       R0,@-R15
    000065AA E700                   MOV         #0,R7      ; H'00000000
    000065AC E602                   MOV         #2,R6      ; H'00000002
    000065AE E451                   MOV         #81,R4     ; H'00000051
    000065B0 D3A2                   MOV.L       L1401+4,R3 ; __$AbsmvAction
    000065B2 430B                   JSR         @R3
    000065B4 65B3                   MOV         R11,R5
    000065B6 6903                   MOV         R0,R9
    000065B8 7F04                   ADD         #4,R15
    000065BA 6E03                   MOV         R0,R14
    000065BC E042                   MOV         #66,R0     ; H'00000042
    000065BE 4008                   SHLL2       R0
             tskcmd.c       8431          if( result == E_SUCCESS ) result = E_CONTINUE;
    000065C0 2998                   TST         R9,R9
    000065C2 8F01                   BF/S        L1189
    000065C4 0FE6                   MOV.L       R14,@(R0,R15); result
    000065C6 0FD6                   MOV.L       R13,@(R0,R15); result
    000065C8              L1189:
             tskcmd.c       8432          pProcDat->Stp++;
    000065C8 66A2                   MOV.L       @R10,R6    ; pProcDat
    000065CA 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000065CC 7001                   ADD         #1,R0
    000065CE A1A6                   BRA         L1154
    000065D0 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000065D2              L1142:
             tskcmd.c       8433          break;
             tskcmd.c       8434          
             tskcmd.c       8435      case 15:   // 15．P軸吐出速度設定、Z軸上昇速度設定
             tskcmd.c       8436          devno  = MT_Z0;
             tskcmd.c       8437          spdptn = (pProcAdr->step[actstep].par08 >> 4);
    000065D2 E014                   MOV         #20,R0     ; H'00000014
    000065D4 65E3                   MOV         R14,R5
    000065D6 4580                   MULR        R0,R5
    000065D8 DD97                   MOV.L       L1401,R13  ; __$pProcAdr
    000065DA 62D2                   MOV.L       @R13,R2    ; pProcAdr
    000065DC E7FC                   MOV         #-4,R7     ; H'FFFFFFFC
    000065DE EDA4                   MOV         #-92,R13   ; H'FFFFFFA4
    000065E0 6123                   MOV         R2,R1
    000065E2 7107                   ADD         #7,R1
    000065E4 3F51204A               MOV.L       R5,@(296:12,R15)
    000065E8 6053                   MOV         R5,R0
    000065EA 051C                   MOV.B       @(R0,R1),R5; pProcAdr->step[].par08
             tskcmd.c       8438          movptn = pProcAdr->step[actstep].par10;                 // 吐出終了位置
             tskcmd.c       8439          movval = GetPositionValue(movptn);
    000065EC 7209                   ADD         #9,R2
    000065EE 6DDC                   EXTU.B      R13,R13
    000065F0 645C                   EXTU.B      R5,R4
    000065F2 3DFC                   ADD         R15,R13
    000065F4 447C                   SHAD        R7,R4
    000065F6 3F41012C               MOV.B       R4,@(300:12,R15)
             tskcmd.c       8440    
             tskcmd.c       8441          MAC_SPEED_SET( devno, 
    000065FA 39F1812C               MOVU.B      @(300,R15),R9
    000065FE B195                   BSR         __$GetPositionValue
    00006600 042C                   MOV.B       @(R0,R2),R4; pProcAdr->step[].par10
    00006602 3F012045               MOV.L       R0,@(276:12,R15); movval
    00006606 E00C                   MOV         #12,R0     ; H'0000000C
    00006608 E403                   MOV         #3,R4      ; H'00000003
    0000660A 4980                   MULR        R0,R9
    0000660C D78C                   MOV.L       L1401+8,R7 ; H'00000078+__$Sp
    0000660E 6093                   MOV         R9,R0
    00006610 007D                   MOV.W       @(R0,R7),R0; Sp[].ac
    00006612 3F91204C               MOV.L       R9,@(304:12,R15)
    00006616 D58B                   MOV.L       L1401+12,R5; _GetFactor
    00006618 450B                   JSR         @R5
    0000661A 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    0000661C 2D02                   MOV.L       R0,@R13    ; mp.factor
    0000661E D78A                   MOV.L       L1401+16,R7; __$Sp
    00006620 6093                   MOV         R9,R0
    00006622 6973                   MOV         R7,R9
    00006624 797C                   ADD         #124,R9
    00006626 019E                   MOV.L       @(R0,R9),R1; Sp[].fl
    00006628 E980                   MOV         #-128,R9   ; H'FFFFFF80
    0000662A 699C                   EXTU.B      R9,R9
    0000662C 1D12                   MOV.L       R1,@(8,R13); mp.FL
    0000662E 6173                   MOV         R7,R1
    00006630 777A                   ADD         #122,R7
    00006632 319C                   ADD         R9,R1
    00006634 047D                   MOV.W       @(R0,R7),R4; Sp[].gl
    00006636 021E                   MOV.L       @(R0,R1),R2; Sp[].fh
    00006638 644D                   EXTU.W      R4,R4
    0000663A 1D44                   MOV.L       R4,@(16,R13); mp.utime
    0000663C 1D45                   MOV.L       R4,@(20,R13); mp.dtime
    0000663E E400                   MOV         #0,R4      ; H'00000000
    00006640 1D23                   MOV.L       R2,@(12,R13); mp.FH
    00006642 1D46                   MOV.L       R4,@(24,R13); mp.us
    00006644 1D47                   MOV.L       R4,@(28,R13); mp.ds
    00006646 7FE0                   ADD         #-32,R15
    00006648 E5C4                   MOV         #-60,R5    ; H'FFFFFFC4
    0000664A 62F3                   MOV         R15,R2
    0000664C 655C                   EXTU.B      R5,R5
    0000664E 325C                   ADD         R5,R2
    00006650 6922                   MOV.L       @R2,R9     ; (part of)mp
    00006652 5D23                   MOV.L       @(12,R2),R13; (part of)mp
    00006654 5125                   MOV.L       @(20,R2),R1; (part of)mp
    00006656 5721                   MOV.L       @(4,R2),R7 ; (part of)mp
    00006658 2F92                   MOV.L       R9,@R15
    0000665A 5922                   MOV.L       @(8,R2),R9 ; (part of)mp
    0000665C 1FD3                   MOV.L       R13,@(12,R15)
    0000665E 5D24                   MOV.L       @(16,R2),R13; (part of)mp
    00006660 1F15                   MOV.L       R1,@(20,R15)
    00006662 5426                   MOV.L       @(24,R2),R4; (part of)mp
    00006664 5127                   MOV.L       @(28,R2),R1; (part of)mp
    00006666 1F71                   MOV.L       R7,@(4,R15)
    00006668 1F92                   MOV.L       R9,@(8,R15)
    0000666A 1FD4                   MOV.L       R13,@(16,R15)
    0000666C 1F46                   MOV.L       R4,@(24,R15)
    0000666E E402                   MOV         #2,R4      ; H'00000002
    00006670 D576                   MOV.L       L1401+20,R5; _motor_SET
    00006672 450B                   JSR         @R5
    00006674 1F17                   MOV.L       R1,@(28,R15)
    00006676 7F20                   ADD         #32,R15
    00006678 E50C                   MOV         #12,R5     ; H'0000000C
             tskcmd.c       8442                         Sp[devno][spdptn].ac, 
             tskcmd.c       8443                         Sp[devno][spdptn].fl, 
             tskcmd.c       8444                         Sp[devno][spdptn].fh, 
             tskcmd.c       8445                         Sp[devno][spdptn].gl );
             tskcmd.c       8446    
             tskcmd.c       8447          devno  = MT_P0;
             tskcmd.c       8448          spdptn = (pProcAdr->step[actstep].par08 & 0x0f);
             tskcmd.c       8449          MAC_SPEED_SET( devno, 
    0000667A D96F                   MOV.L       L1401,R9   ; __$pProcAdr
    0000667C 6792                   MOV.L       @R9,R7     ; pProcAdr
    0000667E 30F1604A               MOV.L       @(296:12,R15),R0
    00006682 7707                   ADD         #7,R7
    00006684 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].par08
    00006686 DD72                   MOV.L       L1401+24,R13; H'000000B4+__$Sp
    00006688 C90F                   AND         #15,R0
    0000668A 6703                   MOV         R0,R7
    0000668C 6053                   MOV         R5,R0
    0000668E 4780                   MULR        R0,R7
    00006690 6073                   MOV         R7,R0
    00006692 09DD                   MOV.W       @(R0,R13),R9; Sp[].ac
    00006694 3F712046               MOV.L       R7,@(280:12,R15)
    00006698 3F911064               MOV.W       R9,@(200:12,R15); mp.accel_type
    0000669C D969                   MOV.L       L1401+12,R9; _GetFactor
    0000669E 490B                   JSR         @R9
    000066A0 E403                   MOV         #3,R4      ; H'00000003
    000066A2 E2B8                   MOV         #-72,R2    ; H'FFFFFFB8
    000066A4 E7BC                   MOV         #-68,R7    ; H'FFFFFFBC
    000066A6 3F012031               MOV.L       R0,@(196:12,R15); mp.factor
    000066AA 622C                   EXTU.B      R2,R2
    000066AC D166                   MOV.L       L1401+16,R1; __$Sp
    000066AE 30F16046               MOV.L       @(280:12,R15),R0
    000066B2 6D13                   MOV         R1,R13
    000066B4 3D2C                   ADD         R2,R13
    000066B6 05DE                   MOV.L       @(R0,R13),R5; Sp[].fl
    000066B8 677C                   EXTU.B      R7,R7
    000066BA 6413                   MOV         R1,R4
    000066BC 347C                   ADD         R7,R4
    000066BE 3F512033               MOV.L       R5,@(204:12,R15); mp.FL
    000066C2 E5B6                   MOV         #-74,R5    ; H'FFFFFFB6
    000066C4 655C                   EXTU.B      R5,R5
    000066C6 0D4E                   MOV.L       @(R0,R4),R13; Sp[].fh
    000066C8 315C                   ADD         R5,R1
    000066CA 071D                   MOV.W       @(R0,R1),R7; Sp[].gl
    000066CC 3FD12034               MOV.L       R13,@(208:12,R15); mp.FH
    000066D0 677D                   EXTU.W      R7,R7
    000066D2 ED00                   MOV         #0,R13     ; H'00000000
    000066D4 3F712035               MOV.L       R7,@(212:12,R15); mp.utime
    000066D8 3F712036               MOV.L       R7,@(216:12,R15); mp.dtime
    000066DC 3FD12037               MOV.L       R13,@(220:12,R15); mp.us
    000066E0 3FD12038               MOV.L       R13,@(224:12,R15); mp.ds
    000066E4 7FE0                   ADD         #-32,R15
    000066E6 E6E4                   MOV         #-28,R6    ; H'FFFFFFE4
    000066E8 666C                   EXTU.B      R6,R6
    000066EA E403                   MOV         #3,R4      ; H'00000003
    000066EC 65F3                   MOV         R15,R5
    000066EE 356C                   ADD         R6,R5
    000066F0 6652                   MOV.L       @R5,R6     ; (part of)mp
    000066F2 5252                   MOV.L       @(8,R5),R2 ; (part of)mp
    000066F4 2F62                   MOV.L       R6,@R15
    000066F6 5653                   MOV.L       @(12,R5),R6; (part of)mp
    000066F8 1F22                   MOV.L       R2,@(8,R15)
    000066FA 1F63                   MOV.L       R6,@(12,R15)
    000066FC 5254                   MOV.L       @(16,R5),R2; (part of)mp
    000066FE 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00006700 5151                   MOV.L       @(4,R5),R1 ; (part of)mp
    00006702 1F24                   MOV.L       R2,@(16,R15)
    00006704 1F65                   MOV.L       R6,@(20,R15)
    00006706 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00006708 5657                   MOV.L       @(28,R5),R6; (part of)mp
    0000670A 1F11                   MOV.L       R1,@(4,R15)
    0000670C 1F26                   MOV.L       R2,@(24,R15)
    0000670E D24F                   MOV.L       L1401+20,R2; _motor_SET
    00006710 420B                   JSR         @R2
    00006712 1F67                   MOV.L       R6,@(28,R15)
    00006714 7F20                   ADD         #32,R15
             tskcmd.c       8450                         Sp[devno][spdptn].ac, 
             tskcmd.c       8451                         Sp[devno][spdptn].fl, 
             tskcmd.c       8452                         Sp[devno][spdptn].fh, 
             tskcmd.c       8453                         Sp[devno][spdptn].gl );
             tskcmd.c       8454          pProcDat->Stp++;
    00006716 66A2                   MOV.L       @R10,R6    ; pProcDat
    00006718 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000671A 7001                   ADD         #1,R0
    0000671C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000671E              L1143:
             tskcmd.c       8455          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8456    
             tskcmd.c       8457      case 16:   // 16．吐出開始（P軸吐出・Z軸吐出上昇同時駆動）、同時に圧力基板へ圧力値取得指示
             tskcmd.c       8458          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par14 );
    0000671E E014                   MOV         #20,R0     ; H'00000014
    00006720 4E80                   MULR        R0,R14
    00006722 D445                   MOV.L       L1401,R4   ; __$pProcAdr
    00006724 6D42                   MOV.L       @R4,R13    ; pProcAdr
    00006726 7D10                   ADD         #16,R13
    00006728 60E3                   MOV         R14,R0
    0000672A 0DDE                   MOV.L       @(R0,R13),R13; pProcAdr->step[].par14
    0000672C 2FD6                   MOV.L       R13,@-R15
    0000672E 7FFC                   ADD         #-4,R15
    00006730 E602                   MOV         #2,R6      ; H'00000002
    00006732 39F16047               MOV.L       @(284:12,R15),R9; movval
    00006736 E703                   MOV         #3,R7      ; H'00000003
    00006738 65B3                   MOV         R11,R5
    0000673A 2F92                   MOV.L       R9,@R15
    0000673C D345                   MOV.L       L1401+28,R3; __$MapAction
    0000673E 430B                   JSR         @R3
    00006740 64C3                   MOV         R12,R4
    00006742 7F08                   ADD         #8,R15
             tskcmd.c       8459          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8460          pProcDat->Stp++;
    00006744 66A2                   MOV.L       @R10,R6    ; pProcDat
    00006746 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00006748 7001                   ADD         #1,R0
    0000674A 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000674C              L1144:
             tskcmd.c       8461          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8462    
             tskcmd.c       8463      case 17:   // 17．P軸・Z軸動作終わるまで、圧力状態監視を行う。閾値以下を検出した場合は、吐出失敗。
             tskcmd.c       8464          mbx_send    (
             tskcmd.c       8465                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8466                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8467                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8468                          prid1,               // prid1
             tskcmd.c       8469                          bcid,                // bcid
             tskcmd.c       8470                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8471                          inf1,                // sts
             tskcmd.c       8472                          inf2,                // sts2
             tskcmd.c       8473                          &dummy,              // data
             tskcmd.c       8474                          sizeof( dummy )      // siz
             tskcmd.c       8475                      );
    0000674C EE01                   MOV         #1,R14     ; H'00000001
    0000674E 2FE6                   MOV.L       R14,@-R15
    00006750 EE84                   MOV         #-124,R14  ; H'FFFFFF84
    00006752 6EEC                   EXTU.B      R14,R14
    00006754 65F3                   MOV         R15,R5
    00006756 35EC                   ADD         R14,R5
    00006758 2F56                   MOV.L       R5,@-R15
    0000675A 611C                   EXTU.B      R1,R1
    0000675C 2F16                   MOV.L       R1,@-R15
    0000675E 7FFC                   ADD         #-4,R15
    00006760 ED99                   MOV         #-103,R13  ; H'FFFFFF99
    00006762 31F18134               MOVU.B      @(308,R15),R1; inf1
    00006766 6DDC                   EXTU.B      R13,R13
    00006768 2F12                   MOV.L       R1,@R15
    0000676A 2FD6                   MOV.L       R13,@-R15
    0000676C 2FB6                   MOV.L       R11,@-R15
    0000676E E60D                   MOV         #13,R6     ; H'0000000D
    00006770 E50C                   MOV         #12,R5     ; H'0000000C
    00006772 6463                   MOV         R6,R4
    00006774 D938                   MOV.L       L1401+32,R9; _mbx_send
    00006776 490B                   JSR         @R9
    00006778 67C3                   MOV         R12,R7
    0000677A 7F18                   ADD         #24,R15
             tskcmd.c       8476          pProcDat->Stp++;
    0000677C 62A2                   MOV.L       @R10,R2    ; pProcDat
    0000677E 8422                   MOV.B       @(2,R2),R0 ; (pProcDat)->Stp
    00006780 7001                   ADD         #1,R0
    00006782 A0CC                   BRA         L1154
    00006784 8022                   MOV.B       R0,@(2,R2) ; (pProcDat)->Stp
    00006786              L1145:
             tskcmd.c       8477          break;
             tskcmd.c       8478    
             tskcmd.c       8479      case 18:   // 18．（P軸・Z軸動作終了後）圧力基板制御：圧力監視終了。全てのノズルチャンネルの電磁弁をOFFにする。
             tskcmd.c       8480          if( tskid == ID_TSK_MOTEND )
    00006786 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    0000678A 880A                   CMP/EQ      #10,R0
    0000678C 8B1D                   BF          L1196
             tskcmd.c       8481          {
             tskcmd.c       8482              vout.target = 0x0fff;
    0000678E 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    00006792 DE32                   MOV.L       L1401+36,R14; __$vout
             tskcmd.c       8483              vout.valout = 0x0000;
    00006794 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       8484              
             tskcmd.c       8485              mbx_send    (
             tskcmd.c       8486                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8487                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8488                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8489                              prid1,               // prid1
             tskcmd.c       8490                              bcid,                // bcid
             tskcmd.c       8491                              ID_MSG_VALVEOUT, // msgid
             tskcmd.c       8492                              inf1,                // sts
             tskcmd.c       8493                              inf2,                // sts2
             tskcmd.c       8494                              (UB *)&vout.target,  // data
             tskcmd.c       8495                              sizeof( ST_VOUT )    // siz
             tskcmd.c       8496                          );
    00006796 E504                   MOV         #4,R5      ; H'00000004
    00006798 2E41                   MOV.W       R4,@R14    ; vout.target
    0000679A 81E1                   MOV.W       R0,@(2,R14); vout.valout
    0000679C 2F56                   MOV.L       R5,@-R15
    0000679E D62F                   MOV.L       L1401+36,R6; __$vout
    000067A0 2F66                   MOV.L       R6,@-R15
    000067A2 2F16                   MOV.L       R1,@-R15
    000067A4 7FFC                   ADD         #-4,R15
    000067A6 ED9B                   MOV         #-101,R13  ; H'FFFFFF9B
    000067A8 37F18134               MOVU.B      @(308,R15),R7; inf1
    000067AC 6DDC                   EXTU.B      R13,R13
    000067AE 2F72                   MOV.L       R7,@R15
    000067B0 2FD6                   MOV.L       R13,@-R15
    000067B2 2FB6                   MOV.L       R11,@-R15
    000067B4 E60D                   MOV         #13,R6     ; H'0000000D
    000067B6 E50C                   MOV         #12,R5     ; H'0000000C
    000067B8 6463                   MOV         R6,R4
    000067BA D927                   MOV.L       L1401+32,R9; _mbx_send
    000067BC 490B                   JSR         @R9
    000067BE 67C3                   MOV         R12,R7
    000067C0 7F18                   ADD         #24,R15
             tskcmd.c       8497              pProcDat->Stp++;
    000067C2 61A2                   MOV.L       @R10,R1    ; pProcDat
    000067C4 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    000067C6 7001                   ADD         #1,R0
    000067C8 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    000067CA              L1196:
             tskcmd.c       8498          }
             tskcmd.c       8499          if( tskid == ID_TSK_PUNIT )
    000067CA 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    000067CE 880D                   CMP/EQ      #13,R0
    000067D0 8901                   BT          L1441
    000067D2 A0A4                   BRA         L1154
    000067D4 0009                   NOP
    000067D6              L1441:
             tskcmd.c       8500          {
             tskcmd.c       8501              mbx_send    (
             tskcmd.c       8502                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8503                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8504                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8505                              prid1,               // prid1
             tskcmd.c       8506                              bcid,                // bcid
             tskcmd.c       8507                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8508                              inf1,                // sts
             tskcmd.c       8509                              inf2,                // sts2
             tskcmd.c       8510                              &dummy,              // data
             tskcmd.c       8511                              sizeof( dummy )      // siz
             tskcmd.c       8512                          );
    000067D6 E401                   MOV         #1,R4      ; H'00000001
    000067D8 2F46                   MOV.L       R4,@-R15
    000067DA ED84                   MOV         #-124,R13  ; H'FFFFFF84
    000067DC 6DDC                   EXTU.B      R13,R13
    000067DE 65F3                   MOV         R15,R5
    000067E0 35DC                   ADD         R13,R5
    000067E2 2F56                   MOV.L       R5,@-R15
    000067E4 7FFC                   ADD         #-4,R15
    000067E6 31F1812C               MOVU.B      @(300,R15),R1; inf2
    000067EA 2F12                   MOV.L       R1,@R15
    000067EC 7FFC                   ADD         #-4,R15
    000067EE 37F18134               MOVU.B      @(308,R15),R7; inf1
    000067F2 EA99                   MOV         #-103,R10  ; H'FFFFFF99
    000067F4 6AAC                   EXTU.B      R10,R10
    000067F6 2F72                   MOV.L       R7,@R15
    000067F8 2FA6                   MOV.L       R10,@-R15
    000067FA 2FB6                   MOV.L       R11,@-R15
    000067FC E60D                   MOV         #13,R6     ; H'0000000D
    000067FE E50C                   MOV         #12,R5     ; H'0000000C
    00006800 6463                   MOV         R6,R4
    00006802 D915                   MOV.L       L1401+32,R9; _mbx_send
    00006804 490B                   JSR         @R9
    00006806 67C3                   MOV         R12,R7
    00006808 A089                   BRA         L1154
    0000680A 7F18                   ADD         #24,R15
    0000680C              L1146:
    0000680C E49B                   MOV         #-101,R4   ; H'FFFFFF9B
             tskcmd.c       8513          }
             tskcmd.c       8514          break;
             tskcmd.c       8515          
             tskcmd.c       8516      case 19:  // 19．指定時間ウェイト
             tskcmd.c       8517          if( msgid == ID_MSG_PRESSTAN )
             tskcmd.c       8518          {
             tskcmd.c       8519              //読み捨て
             tskcmd.c       8520          }
             tskcmd.c       8521          if( msgid == ID_MSG_VALVEOUT )
    0000680E 626C                   EXTU.B      R6,R2
    00006810 644C                   EXTU.B      R4,R4
    00006812 3240                   CMP/EQ      R4,R2
    00006814 8901                   BT          L1442
    00006816 A082                   BRA         L1154
    00006818 0009                   NOP
    0000681A              L1442:
             tskcmd.c       8522          {
             tskcmd.c       8523              pProcDat->Stp++;
    0000681A 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
             tskcmd.c       8524              WaitAction( prid1, bcid, 10 );
    0000681C E60A                   MOV         #10,R6     ; H'0000000A
    0000681E 64C3                   MOV         R12,R4
    00006820 7001                   ADD         #1,R0
    00006822 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00006824 D30E                   MOV.L       L1401+40,R3; __$WaitAction
    00006826 430B                   JSR         @R3
    00006828 65B3                   MOV         R11,R5
    0000682A A078                   BRA         L1154
    0000682C 0009                   NOP
    0000682E              L1150:
             tskcmd.c       8525          }
             tskcmd.c       8526          break;
             tskcmd.c       8527          
             tskcmd.c       8528          
             tskcmd.c       8529      case 20:  // 20．Z軸通常速度設定・退避位置移動
             tskcmd.c       8530          devno  = MT_Z0;
             tskcmd.c       8531          spdptn = SpPtn.Z0_SpdNmlPtn;
             tskcmd.c       8532          movval = GetPositionValue(POS_Z0_TAIHI);
             tskcmd.c       8533    
             tskcmd.c       8534          MAC_SPEED_SET( devno, 
             tskcmd.c       8535                         Sp[devno][spdptn].ac, 
             tskcmd.c       8536                         Sp[devno][spdptn].fl, 
             tskcmd.c       8537                         Sp[devno][spdptn].fh, 
             tskcmd.c       8538                         Sp[devno][spdptn].gl );
             tskcmd.c       8539    
             tskcmd.c       8540          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8541          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8542          pProcDat->Stp++;
             tskcmd.c       8543          break;
             tskcmd.c       8544          
             tskcmd.c       8545          
             tskcmd.c       8546      case 21:  // 21．終了待ち
             tskcmd.c       8547          result = E_SUCCESS;
    0000682E E200                   MOV         #0,R2      ; H'00000000
    00006830 3F212042               MOV.L       R2,@(264:12,R15); result
    00006834 A073                   BRA         L1154
    00006836 0009                   NOP
    00006838              L1401:
    00006838 <00000000>             .DATA.L     __$pProcAdr
    0000683C <00000000>             .DATA.L     __$AbsmvAction
    00006840 <00000078>             .DATA.L     H'00000078+__$Sp
    00006844 <00000000>             .DATA.L     _GetFactor
    00006848 <00000000>             .DATA.L     __$Sp
    0000684C <00000000>             .DATA.L     _motor_SET
    00006850 <000000B4>             .DATA.L     H'000000B4+__$Sp
    00006854 <00000000>             .DATA.L     __$MapAction
    00006858 <00000000>             .DATA.L     _mbx_send
    0000685C <00000000>             .DATA.L     __$vout
    00006860 <00000000>             .DATA.L     __$WaitAction
    00006864              L1149:
    00006864 D4AC                   MOV.L       L1402,R4   ; H'00000006+__$SpPtn
    00006866 6E40                   MOV.B       @R4,R14    ; SpPtn.Z0_SpdNmlPtn
    00006868 B060                   BSR         __$GetPositionValue
    0000686A E407                   MOV         #7,R4      ; H'00000007
    0000686C 6D03                   MOV         R0,R13
    0000686E E00C                   MOV         #12,R0     ; H'0000000C
    00006870 6EEC                   EXTU.B      R14,R14
    00006872 4E80                   MULR        R0,R14
    00006874 D2A9                   MOV.L       L1402+4,R2 ; H'00000078+__$Sp
    00006876 60E3                   MOV         R14,R0
    00006878 062D                   MOV.W       @(R0,R2),R6; Sp[].ac
    0000687A 3F611074               MOV.W       R6,@(232:12,R15); mp.accel_type
    0000687E D7A8                   MOV.L       L1402+8,R7 ; _GetFactor
    00006880 470B                   JSR         @R7
    00006882 E403                   MOV         #3,R4      ; H'00000003
    00006884 D5A7                   MOV.L       L1402+12,R5; __$Sp
    00006886 6453                   MOV         R5,R4
    00006888 747C                   ADD         #124,R4
    0000688A 3F012039               MOV.L       R0,@(228:12,R15); mp.factor
    0000688E 60E3                   MOV         R14,R0
    00006890 074E                   MOV.L       @(R0,R4),R7; Sp[].fl
    00006892 E280                   MOV         #-128,R2   ; H'FFFFFF80
    00006894 622C                   EXTU.B      R2,R2
    00006896 3F71203B               MOV.L       R7,@(236:12,R15); mp.FL
    0000689A 6753                   MOV         R5,R7
    0000689C 372C                   ADD         R2,R7
    0000689E 047E                   MOV.L       @(R0,R7),R4; Sp[].fh
    000068A0 757A                   ADD         #122,R5
    000068A2 3F41203C               MOV.L       R4,@(240:12,R15); mp.FH
    000068A6 045D                   MOV.W       @(R0,R5),R4; Sp[].gl
    000068A8 E500                   MOV         #0,R5      ; H'00000000
    000068AA 3F51203F               MOV.L       R5,@(252:12,R15); mp.us
    000068AE 644D                   EXTU.W      R4,R4
    000068B0 3F41203D               MOV.L       R4,@(244:12,R15); mp.utime
    000068B4 3F41203E               MOV.L       R4,@(248:12,R15); mp.dtime
    000068B8 3F512040               MOV.L       R5,@(256:12,R15); mp.ds
    000068BC 7FE0                   ADD         #-32,R15
    000068BE E741                   MOV         #65,R7     ; H'00000041
    000068C0 4708                   SHLL2       R7
    000068C2 65F3                   MOV         R15,R5
    000068C4 357C                   ADD         R7,R5
    000068C6 5251                   MOV.L       @(4,R5),R2 ; (part of)mp
    000068C8 5653                   MOV.L       @(12,R5),R6; (part of)mp
    000068CA 6752                   MOV.L       @R5,R7     ; (part of)mp
    000068CC 1F21                   MOV.L       R2,@(4,R15)
    000068CE 1F63                   MOV.L       R6,@(12,R15)
    000068D0 5654                   MOV.L       @(16,R5),R6; (part of)mp
    000068D2 5255                   MOV.L       @(20,R5),R2; (part of)mp
    000068D4 2F72                   MOV.L       R7,@R15
    000068D6 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    000068D8 1F64                   MOV.L       R6,@(16,R15)
    000068DA 1F25                   MOV.L       R2,@(20,R15)
    000068DC 5656                   MOV.L       @(24,R5),R6; (part of)mp
    000068DE 5257                   MOV.L       @(28,R5),R2; (part of)mp
    000068E0 1F72                   MOV.L       R7,@(8,R15)
    000068E2 1F66                   MOV.L       R6,@(24,R15)
    000068E4 1F27                   MOV.L       R2,@(28,R15)
    000068E6 D290                   MOV.L       L1402+16,R2; _motor_SET
    000068E8 420B                   JSR         @R2
    000068EA E402                   MOV         #2,R4      ; H'00000002
    000068EC 7F20                   ADD         #32,R15
    000068EE 2FD6                   MOV.L       R13,@-R15
    000068F0 E700                   MOV         #0,R7      ; H'00000000
    000068F2 35F14110               MOV.B       @(272:12,R15),R5; bcid
    000068F6 E602                   MOV         #2,R6      ; H'00000002
    000068F8 D38C                   MOV.L       L1402+20,R3; __$AbsmvAction
    000068FA 430B                   JSR         @R3
    000068FC E451                   MOV         #81,R4     ; H'00000051
    000068FE 6203                   MOV         R0,R2
    00006900 7F04                   ADD         #4,R15
    00006902 6603                   MOV         R0,R6
    00006904 E042                   MOV         #66,R0     ; H'00000042
    00006906 4008                   SHLL2       R0
    00006908 2228                   TST         R2,R2
    0000690A 8F03                   BF/S        L1203
    0000690C 0F66                   MOV.L       R6,@(R0,R15); result
    0000690E E6F1                   MOV         #-15,R6    ; H'FFFFFFF1
    00006910 666C                   EXTU.B      R6,R6
    00006912 0F66                   MOV.L       R6,@(R0,R15); result
    00006914              L1203:
    00006914 D286                   MOV.L       L1402+24,R2; __$pProcDat
    00006916 6622                   MOV.L       @R2,R6     ; pProcDat
    00006918 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000691A 7001                   ADD         #1,R0
    0000691C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000691E              L1154:
             tskcmd.c       8548          break;
             tskcmd.c       8549      }
             tskcmd.c       8550      
             tskcmd.c       8551      return( result );
    0000691E 30F16042               MOV.L       @(264:12,R15),R0; result
    00006922 03000138               MOVI20      #312,R3    ; H'00000138
    00006926 3F3C                   ADD         R3,R15
    00006928 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       8552    }
    0000692A 006B                   RTS/N
             tskcmd.c       8553    
             tskcmd.c       8554    /***********************************************************************
             tskcmd.c       8555    * 
             tskcmd.c       8556    * [概要]  吸引位置取得
             tskcmd.c       8557    * [引数]  
             tskcmd.c       8558    * [戻値]  
             tskcmd.c       8559    * 
             tskcmd.c       8560    ***********************************************************************/
             tskcmd.c       8561    static INT  GetPositionValue( UB index )
    0000692C              __$GetPositionValue:             ; function: __$GetPositionValue
                                                           ; frame size=0
             tskcmd.c       8562    {
             tskcmd.c       8563      INT *posadr;
             tskcmd.c       8564      INT result = CLR;
    0000692C 614C                   EXTU.B      R4,R1
    0000692E E601                   MOV         #1,R6      ; H'00000001
    00006930 3163                   CMP/GE      R6,R1
    00006932 E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       8565      
             tskcmd.c       8566      if(( index >= POS_Y0_OFFSE )&&( index <= POS_Z0_COLDS ))    // 1〜32
    00006934 8F08                   BF/S        L1206
    00006936 6413                   MOV         R1,R4
    00006938 E620                   MOV         #32,R6     ; H'00000020
    0000693A 3467                   CMP/GT      R6,R4
    0000693C 8904                   BT          L1206
             tskcmd.c       8567      {
             tskcmd.c       8568          posadr = &BkP7.Y0_Offset + (index - POS_Y0_OFFSE) ;
             tskcmd.c       8569          result = *posadr;
    0000693E 6513                   MOV         R1,R5
    00006940 75FF                   ADD         #-1,R5
    00006942 4508                   SHLL2       R5
    00006944 D07B                   MOV.L       L1402+28,R0; __$BkP7
    00006946 025E                   MOV.L       @(R0,R5),R2; *(posadr)
    00006948              L1206:
             tskcmd.c       8570      }
             tskcmd.c       8571    
             tskcmd.c       8572      if(( index >= POS_Z0_SUCS1 )&&( index <= POS_XX_RSV64 ))    // 33〜
    00006948 E621                   MOV         #33,R6     ; H'00000021
    0000694A 3463                   CMP/GE      R6,R4
    0000694C 8B07                   BF          L1209
    0000694E E640                   MOV         #64,R6     ; H'00000040
    00006950 3467                   CMP/GT      R6,R4
    00006952 8904                   BT          L1209
             tskcmd.c       8573      {
             tskcmd.c       8574          posadr = &BkP8.Z0_SucStaHei1 + (index - POS_Z0_SUCS1) ;
             tskcmd.c       8575          result = *posadr;
    00006954 6513                   MOV         R1,R5
    00006956 75DF                   ADD         #-33,R5
    00006958 4508                   SHLL2       R5
    0000695A D077                   MOV.L       L1402+32,R0; __$BkP8
    0000695C 025E                   MOV.L       @(R0,R5),R2; *(posadr)
    0000695E              L1209:
             tskcmd.c       8576      }
             tskcmd.c       8577    
             tskcmd.c       8578      if(( index >= POS_H1_C1VO1 )&&( index <= POS_XX_RSV96 ))    // 65〜
    0000695E E641                   MOV         #65,R6     ; H'00000041
    00006960 3463                   CMP/GE      R6,R4
    00006962 8B06                   BF          L1212
    00006964 E660                   MOV         #96,R6     ; H'00000060
    00006966 3467                   CMP/GT      R6,R4
    00006968 8903                   BT          L1212
             tskcmd.c       8579      {
             tskcmd.c       8580          posadr = &BkP9.Hosei[0].HS_VL1 + (index - POS_H1_C1VO1) ;
             tskcmd.c       8581          result = *posadr;
    0000696A 71BF                   ADD         #-65,R1
    0000696C 4108                   SHLL2       R1
    0000696E D073                   MOV.L       L1402+36,R0; __$BkP9
    00006970 021E                   MOV.L       @(R0,R1),R2; *(posadr)
    00006972              L1212:
             tskcmd.c       8582      }
             tskcmd.c       8583    
             tskcmd.c       8584      if( index == POS_P0_TIPDL ) // 
    00006972 6043                   MOV         R4,R0
    00006974 8837                   CMP/EQ      #55,R0
    00006976 8B00                   BF          L1215
             tskcmd.c       8585      {
             tskcmd.c       8586          result = 100;
    00006978 E264                   MOV         #100,R2    ; H'00000064
    0000697A              L1215:
             tskcmd.c       8587      }
             tskcmd.c       8588      return( result );
             tskcmd.c       8589    }
    0000697A 027B                   RTV/N       R2
             tskcmd.c       8590    
             tskcmd.c       8591    /***********************************************************************
             tskcmd.c       8592    * 
             tskcmd.c       8593    * [概要]  分注２
             tskcmd.c       8594    * [引数]  
             tskcmd.c       8595    * [戻値]  
             tskcmd.c       8596    * 
             tskcmd.c       8597    ***********************************************************************/
             tskcmd.c       8598    static ER  CmdActionPrep2( T_CMD_MSG* mrcv )
    0000697C              __$CmdActionPrep2:               ; function: __$CmdActionPrep2
                                                           ; frame size=0
             tskcmd.c       8599    {
             tskcmd.c       8600      ER result = E_CONTINUE;
             tskcmd.c       8601    
             tskcmd.c       8602      return( result );
    0000697C E0F1                   MOV         #-15,R0    ; H'FFFFFFF1
             tskcmd.c       8603    }
    0000697E 000B                   RTS
    00006980 600C                   EXTU.B      R0,R0
             tskcmd.c       8604    /***********************************************************************
             tskcmd.c       8605    * 
             tskcmd.c       8606    * [概要]  インキュベーション
             tskcmd.c       8607    * [引数]  
             tskcmd.c       8608    * [戻値]  
             tskcmd.c       8609    * 
             tskcmd.c       8610    ***********************************************************************/
             tskcmd.c       8611    static ER  CmdActionIncub( T_CMD_MSG* mrcv )
    00006982              __$CmdActionIncub:               ; function: __$CmdActionIncub
                                                           ; frame size=100
    00006982 48F0                   MOVMU.L     R8,@-R15
    00006984 7FDC                   ADD         #-36,R15
             tskcmd.c       8612    {
             tskcmd.c       8613      ER result = E_CONTINUE;
             tskcmd.c       8614      UB  msgid;
             tskcmd.c       8615      UB actstep;
             tskcmd.c       8616      UB spdptn;
             tskcmd.c       8617      UB movptn;
             tskcmd.c       8618      UB devno;
             tskcmd.c       8619      INT movval;
             tskcmd.c       8620      UB  inf;
             tskcmd.c       8621      UB  inf2;
             tskcmd.c       8622      UB  prid1;
             tskcmd.c       8623      UB  bcid;
             tskcmd.c       8624      UB  tempdat;
             tskcmd.c       8625    
             tskcmd.c       8626      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       8627      bcid  = mrcv->msgdata.bcid;
    00006986 3A41801A               MOVU.B      @(26,R4),R10; (mrcv)->bcid
             tskcmd.c       8628      msgid = mrcv->msgdata.msgid;
             tskcmd.c       8629      inf   = mrcv->msgdata.inf;
             tskcmd.c       8630      inf2  = mrcv->msgdata.inf2;
             tskcmd.c       8631      actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       8632    
             tskcmd.c       8633      switch( pProcDat->Stp )
    0000698A D869                   MOV.L       L1402+24,R8; __$pProcDat
    0000698C 60A3                   MOV         R10,R0
    0000698E 6282                   MOV.L       @R8,R2     ; pProcDat
    00006990 4008                   SHLL2       R0
    00006992 EEF1                   MOV         #-15,R14   ; H'FFFFFFF1
    00006994 D16A                   MOV.L       L1402+40,R1; H'00000002+__$bcctrl
    00006996 4000                   SHLL        R0
    00006998 061C                   MOV.B       @(R0,R1),R6; bcctrl[].actstp
    0000699A 6EEC                   EXTU.B      R14,R14
    0000699C 30218002               MOVU.B      @(2,R2),R0 ; (pProcDat)->Stp
    000069A0 76FF                   ADD         #-1,R6
    000069A2 69E3                   MOV         R14,R9
    000069A4 2008                   TST         R0,R0
    000069A6 3B418018               MOVU.B      @(24,R4),R11; (mrcv)->prid1
    000069AA 3C41801C               MOVU.B      @(28,R4),R12; (mrcv)->inf
    000069AE 3D41801D               MOVU.B      @(29,R4),R13; (mrcv)->inf2
    000069B2 8D0C                   BT/S        L1225
    000069B4 666C                   EXTU.B      R6,R6
    000069B6 8801                   CMP/EQ      #1,R0
    000069B8 8967                   BT          L1227
    000069BA 8802                   CMP/EQ      #2,R0
    000069BC 8B01                   BF          L1443
    000069BE A084                   BRA         L1229
    000069C0 0009                   NOP
    000069C2              L1443:
    000069C2 8803                   CMP/EQ      #3,R0
    000069C4 8B01                   BF          L1444
    000069C6 A0A2                   BRA         L1230
    000069C8 0009                   NOP
    000069CA              L1444:
    000069CA A0A1                   BRA         L1231
    000069CC 0009                   NOP
    000069CE              L1225:
             tskcmd.c       8634      {
             tskcmd.c       8635      case 0:// [Z]ノズル高さ移動
             tskcmd.c       8636          IncuvDataInit(pProcAdr->step[actstep].par03 , pProcAdr->step[actstep].par04);
    000069CE E014                   MOV         #20,R0     ; H'00000014
    000069D0 4680                   MULR        R0,R6
    000069D2 D75C                   MOV.L       L1402+44,R7; __$pProcAdr
    000069D4 6472                   MOV.L       @R7,R4     ; pProcAdr
             tskcmd.c       8637          
             tskcmd.c       8638          devno  = MT_Z0;
             tskcmd.c       8639          spdptn = (pProcAdr->step[actstep].par05 >> 4);  // [Z]吸引下降速度パターン
    000069D6 DB5B                   MOV.L       L1402+44,R11; __$pProcAdr
    000069D8 6E43                   MOV         R4,R14
    000069DA 7E03                   ADD         #3,R14
    000069DC 6063                   MOV         R6,R0
    000069DE 0CEC                   MOV.B       @(R0,R14),R12; pProcAdr->step[].par04
    000069E0 7402                   ADD         #2,R4
    000069E2 6D63                   MOV         R6,R13
    000069E4 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par03
    000069E6 B0CF                   BSR         __$IncuvDataInit
    000069E8 65CC                   EXTU.B      R12,R5
    000069EA 6CB2                   MOV.L       @R11,R12   ; pProcAdr
    000069EC 60D3                   MOV         R13,R0
    000069EE E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    000069F0 6EC3                   MOV         R12,R14
    000069F2 7E04                   ADD         #4,R14
    000069F4 01EC                   MOV.B       @(R0,R14),R1; pProcAdr->step[].par05
             tskcmd.c       8640          movptn = pProcAdr->step[actstep].par06;         // [Z]吸引終了高さ
             tskcmd.c       8641          movval = GetPositionValue(movptn);
    000069F6 7C05                   ADD         #5,R12
    000069F8 04CC                   MOV.B       @(R0,R12),R4; pProcAdr->step[].par06
    000069FA 6B1C                   EXTU.B      R1,R11
    000069FC BF96                   BSR         __$GetPositionValue
    000069FE 4B2C                   SHAD        R2,R11
    00006A00 6D03                   MOV         R0,R13
             tskcmd.c       8642          
             tskcmd.c       8643          MAC_SPEED_SET( devno, 
    00006A02 E00C                   MOV         #12,R0     ; H'0000000C
    00006A04 6BBC                   EXTU.B      R11,R11
    00006A06 4B80                   MULR        R0,R11
    00006A08 D444                   MOV.L       L1402+4,R4 ; H'00000078+__$Sp
    00006A0A 60B3                   MOV         R11,R0
    00006A0C 014D                   MOV.W       @(R0,R4),R1; Sp[].ac
    00006A0E 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
    00006A12 D543                   MOV.L       L1402+8,R5 ; _GetFactor
    00006A14 450B                   JSR         @R5
    00006A16 E403                   MOV         #3,R4      ; H'00000003
    00006A18 D542                   MOV.L       L1402+12,R5; __$Sp
    00006A1A E180                   MOV         #-128,R1   ; H'FFFFFF80
    00006A1C 2F02                   MOV.L       R0,@R15    ; mp.factor
    00006A1E 6753                   MOV         R5,R7
    00006A20 777C                   ADD         #124,R7
    00006A22 60B3                   MOV         R11,R0
    00006A24 0E7E                   MOV.L       @(R0,R7),R14; Sp[].fl
    00006A26 611C                   EXTU.B      R1,R1
    00006A28 6B53                   MOV         R5,R11
    00006A2A 757A                   ADD         #122,R5
    00006A2C 3B1C                   ADD         R1,R11
    00006A2E 0C5D                   MOV.W       @(R0,R5),R12; Sp[].gl
    00006A30 02BE                   MOV.L       @(R0,R11),R2; Sp[].fh
    00006A32 1FE2                   MOV.L       R14,@(8,R15); mp.FL
    00006A34 6CCD                   EXTU.W      R12,R12
    00006A36 EE00                   MOV         #0,R14     ; H'00000000
    00006A38 1F23                   MOV.L       R2,@(12,R15); mp.FH
    00006A3A 1FC4                   MOV.L       R12,@(16,R15); mp.utime
    00006A3C 1FC5                   MOV.L       R12,@(20,R15); mp.dtime
    00006A3E 1FE6                   MOV.L       R14,@(24,R15); mp.us
    00006A40 1FE7                   MOV.L       R14,@(28,R15); mp.ds
    00006A42 7FE0                   ADD         #-32,R15
    00006A44 6CF3                   MOV         R15,R12
    00006A46 7C20                   ADD         #32,R12
    00006A48 57C1                   MOV.L       @(4,R12),R7; (part of)mp
    00006A4A 5BC2                   MOV.L       @(8,R12),R11; (part of)mp
    00006A4C 56C5                   MOV.L       @(20,R12),R6; (part of)mp
    00006A4E 61C2                   MOV.L       @R12,R1    ; (part of)mp
    00006A50 1F71                   MOV.L       R7,@(4,R15)
    00006A52 57C3                   MOV.L       @(12,R12),R7; (part of)mp
    00006A54 1FB2                   MOV.L       R11,@(8,R15)
    00006A56 5BC4                   MOV.L       @(16,R12),R11; (part of)mp
    00006A58 1F65                   MOV.L       R6,@(20,R15)
    00006A5A 56C6                   MOV.L       @(24,R12),R6; (part of)mp
    00006A5C 52C7                   MOV.L       @(28,R12),R2; (part of)mp
    00006A5E 2F12                   MOV.L       R1,@R15
    00006A60 1F73                   MOV.L       R7,@(12,R15)
    00006A62 1FB4                   MOV.L       R11,@(16,R15)
    00006A64 1F66                   MOV.L       R6,@(24,R15)
    00006A66 1F27                   MOV.L       R2,@(28,R15)
    00006A68 D22F                   MOV.L       L1402+16,R2; _motor_SET
    00006A6A 420B                   JSR         @R2
    00006A6C E402                   MOV         #2,R4      ; H'00000002
    00006A6E 7F20                   ADD         #32,R15
             tskcmd.c       8644                         Sp[devno][spdptn].ac, 
             tskcmd.c       8645                         Sp[devno][spdptn].fl, 
             tskcmd.c       8646                         Sp[devno][spdptn].fh, 
             tskcmd.c       8647                         Sp[devno][spdptn].gl );
             tskcmd.c       8648          
             tskcmd.c       8649          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00006A70 2FD6                   MOV.L       R13,@-R15
    00006A72 E700                   MOV         #0,R7      ; H'00000000
    00006A74 E602                   MOV         #2,R6      ; H'00000002
    00006A76 E451                   MOV         #81,R4     ; H'00000051
    00006A78 D32C                   MOV.L       L1402+20,R3; __$AbsmvAction
    00006A7A 430B                   JSR         @R3
    00006A7C 65A3                   MOV         R10,R5
    00006A7E 7F04                   ADD         #4,R15
             tskcmd.c       8650          if( result == E_SUCCESS ) result = E_CONTINUE;
    00006A80 2008                   TST         R0,R0
    00006A82 8F1D                   BF/S        L1233
    00006A84 6E03                   MOV         R0,R14
    00006A86 A01B                   BRA         L1233
    00006A88 6E93                   MOV         R9,R14
    00006A8A              L1227:
             tskcmd.c       8651          pProcDat->Stp++;
             tskcmd.c       8652          break;
             tskcmd.c       8653          
             tskcmd.c       8654      case 1: // 温調器へ指定した温度に設定通知を行う。
             tskcmd.c       8655          // 指定温度通知
             tskcmd.c       8656          tempdat = pProcAdr->step[actstep].par04;
    00006A8A E014                   MOV         #20,R0     ; H'00000014
             tskcmd.c       8657    
             tskcmd.c       8658          mbx_send    (
             tskcmd.c       8659                      ID_TSK_TMPCNT,       // tskid
             tskcmd.c       8660                      ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       8661                      ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       8662                      prid1,               // prid1
             tskcmd.c       8663                      bcid,                // bcid
             tskcmd.c       8664                      ID_MSG_TMPSET,       // msgid
             tskcmd.c       8665                      inf,                 // sts
             tskcmd.c       8666                      inf2,                // sts2/inf2
             tskcmd.c       8667                      (UB *)&tempdat,      // data
             tskcmd.c       8668                      sizeof( tempdat )    // siz
             tskcmd.c       8669                  );
    00006A8C E501                   MOV         #1,R5      ; H'00000001
    00006A8E 4680                   MULR        R0,R6
    00006A90 D12C                   MOV.L       L1402+44,R1; __$pProcAdr
    00006A92 6412                   MOV.L       @R1,R4     ; pProcAdr
    00006A94 7403                   ADD         #3,R4
    00006A96 6063                   MOV         R6,R0
    00006A98 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par04
    00006A9A 3F410020               MOV.B       R4,@(32:12,R15); tempdat
    00006A9E 2F56                   MOV.L       R5,@-R15
    00006AA0 67F3                   MOV         R15,R7
    00006AA2 7724                   ADD         #36,R7
    00006AA4 2F76                   MOV.L       R7,@-R15
    00006AA6 2FD6                   MOV.L       R13,@-R15
    00006AA8 2FC6                   MOV.L       R12,@-R15
    00006AAA EC9D                   MOV         #-99,R12   ; H'FFFFFF9D
    00006AAC 6CCC                   EXTU.B      R12,R12
    00006AAE 2FC6                   MOV.L       R12,@-R15
    00006AB0 2FA6                   MOV.L       R10,@-R15
    00006AB2 E60E                   MOV         #14,R6     ; H'0000000E
    00006AB4 E50D                   MOV         #13,R5     ; H'0000000D
    00006AB6 6463                   MOV         R6,R4
    00006AB8 D923                   MOV.L       L1402+48,R9; _mbx_send
    00006ABA 490B                   JSR         @R9
    00006ABC 67B3                   MOV         R11,R7
    00006ABE 7F18                   ADD         #24,R15
    00006AC0              L1233:
    00006AC0 6682                   MOV.L       @R8,R6     ; pProcDat
    00006AC2 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00006AC4 7001                   ADD         #1,R0
    00006AC6 A023                   BRA         L1231
    00006AC8 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00006ACA              L1229:
             tskcmd.c       8670          pProcDat->Stp++;
             tskcmd.c       8671          break;
             tskcmd.c       8672    
             tskcmd.c       8673      case 2: // 指定温度を指定時間になるまで監視
             tskcmd.c       8674          if( TempChk() == FALSE  )
    00006ACA B041                   BSR         __$TempChk
    00006ACC 0009                   NOP
    00006ACE 2008                   TST         R0,R0
    00006AD0 8B19                   BF          L1235
             tskcmd.c       8675          {
             tskcmd.c       8676              mbx_send    (
             tskcmd.c       8677                          ID_TSK_TMPCNT,       // tskid
             tskcmd.c       8678                          ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       8679                          ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       8680                          prid1,               // prid1
             tskcmd.c       8681                          bcid,                // bcid
             tskcmd.c       8682                          ID_MSG_TMPGETR,      // msgid
             tskcmd.c       8683                          inf,                 // sts
             tskcmd.c       8684                          inf2,                // sts2/inf2
             tskcmd.c       8685                          (UB *)&tempdat,      // data
             tskcmd.c       8686                          sizeof( tempdat )    // siz
             tskcmd.c       8687                      );
    00006AD2 0429                   MOVT        R4
    00006AD4 2F46                   MOV.L       R4,@-R15
    00006AD6 67F3                   MOV         R15,R7
    00006AD8 7724                   ADD         #36,R7
    00006ADA 2F76                   MOV.L       R7,@-R15
    00006ADC 2FD6                   MOV.L       R13,@-R15
    00006ADE 2FC6                   MOV.L       R12,@-R15
    00006AE0 E99F                   MOV         #-97,R9    ; H'FFFFFF9F
    00006AE2 699C                   EXTU.B      R9,R9
    00006AE4 2F96                   MOV.L       R9,@-R15
    00006AE6 2FA6                   MOV.L       R10,@-R15
    00006AE8 E60E                   MOV         #14,R6     ; H'0000000E
    00006AEA E50D                   MOV         #13,R5     ; H'0000000D
    00006AEC 6463                   MOV         R6,R4
    00006AEE D816                   MOV.L       L1402+48,R8; _mbx_send
    00006AF0 480B                   JSR         @R8
    00006AF2 67B3                   MOV         R11,R7
    00006AF4 7F18                   ADD         #24,R15
             tskcmd.c       8688              WaitAction( prid1, bcid, TEMP_CHK_WAIT );
    00006AF6 E67D                   MOV         #125,R6    ; H'0000007D
    00006AF8 4608                   SHLL2       R6
    00006AFA 64B3                   MOV         R11,R4
    00006AFC D313                   MOV.L       L1402+52,R3; __$WaitAction
    00006AFE 430B                   JSR         @R3
    00006B00 65A3                   MOV         R10,R5
    00006B02 A005                   BRA         L1231
    00006B04 0009                   NOP
    00006B06              L1235:
             tskcmd.c       8689              break;
             tskcmd.c       8690          }
             tskcmd.c       8691          else
             tskcmd.c       8692          {
             tskcmd.c       8693              pProcDat->Stp++;
    00006B06 6682                   MOV.L       @R8,R6     ; pProcDat
    00006B08 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00006B0A 7001                   ADD         #1,R0
    00006B0C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00006B0E              L1230:
             tskcmd.c       8694          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8695          }
             tskcmd.c       8696    
             tskcmd.c       8697      case 3: // 終了待ち
             tskcmd.c       8698          result = E_SUCCESS;
    00006B0E EE00                   MOV         #0,R14     ; H'00000000
    00006B10              L1231:
             tskcmd.c       8699          break;
             tskcmd.c       8700      }
             tskcmd.c       8701      return( result );
    00006B10 60E3                   MOV         R14,R0
    00006B12 7F24                   ADD         #36,R15
    00006B14 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       8702    }
    00006B16 006B                   RTS/N
    00006B18              L1402:
    00006B18 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00006B1C <00000078>             .DATA.L     H'00000078+__$Sp
    00006B20 <00000000>             .DATA.L     _GetFactor
    00006B24 <00000000>             .DATA.L     __$Sp
    00006B28 <00000000>             .DATA.L     _motor_SET
    00006B2C <00000000>             .DATA.L     __$AbsmvAction
    00006B30 <00000000>             .DATA.L     __$pProcDat
    00006B34 <00000000>             .DATA.L     __$BkP7
    00006B38 <00000000>             .DATA.L     __$BkP8
    00006B3C <00000000>             .DATA.L     __$BkP9
    00006B40 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00006B44 <00000000>             .DATA.L     __$pProcAdr
    00006B48 <00000000>             .DATA.L     _mbx_send
    00006B4C <00000000>             .DATA.L     __$WaitAction
             tskcmd.c       8703    /***********************************************************************
             tskcmd.c       8704    * 
             tskcmd.c       8705    * [概要]  
             tskcmd.c       8706    * [引数]  
             tskcmd.c       8707    * [戻値]  TRUE = インキュベーション終了 
             tskcmd.c       8708    * 
             tskcmd.c       8709    ***********************************************************************/
             tskcmd.c       8710    static BOOL TempChk()
    00006B50              __$TempChk:                      ; function: __$TempChk
                                                           ; frame size=8
    00006B50 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       8711    {
             tskcmd.c       8712      BOOL blnResult = FALSE;
             tskcmd.c       8713      unsigned char tempdat;
             tskcmd.c       8714      
             tskcmd.c       8715      tempdat = TmpDataGet();
    00006B52 D164                   MOV.L       L1332+2,R1 ; _TmpDataGet
    00006B54 414B                   JSR/N       @R1
             tskcmd.c       8716      
             tskcmd.c       8717      incuv.smp[2] = incuv.smp[1];
    00006B56 D264                   MOV.L       L1332+6,R2 ; H'00000001+__$incuv
    00006B58 6603                   MOV         R0,R6
    00006B5A 8421                   MOV.B       @(1,R2),R0 ; incuv.smp[]
    00006B5C D463                   MOV.L       L1332+10,R4; __$incuv
    00006B5E 8022                   MOV.B       R0,@(2,R2) ; incuv.smp[]
    00006B60 EE00                   MOV         #0,R14     ; H'00000000
    00006B62 37418000               MOVU.B      @(0,R4),R7 ; incuv.tmp
             tskcmd.c       8718      incuv.smp[1] = incuv.smp[0];
    00006B66 6020                   MOV.B       @R2,R0     ; incuv.smp[]
    00006B68 8021                   MOV.B       R0,@(1,R2) ; incuv.smp[]
             tskcmd.c       8719      incuv.smp[0] = tempdat;
    00006B6A 2260                   MOV.B       R6,@R2     ; incuv.smp[]
             tskcmd.c       8720      
             tskcmd.c       8721      if( tempdat == incuv.tmp )
    00006B6C 666C                   EXTU.B      R6,R6
    00006B6E 3670                   CMP/EQ      R7,R6
    00006B70 8F02                   BF/S        L1238
    00006B72 62E3                   MOV         R14,R2
             tskcmd.c       8722      {
             tskcmd.c       8723          incuv.cnt += (( TEMP_CHK_WAIT * 10 ) / 1000) ;
    00006B74 5242                   MOV.L       @(8,R4),R2 ; incuv.cnt
    00006B76 7205                   ADD         #5,R2
    00006B78              L1238:
    00006B78 5641                   MOV.L       @(4,R4),R6 ; incuv.tim
             tskcmd.c       8724      }
             tskcmd.c       8725      else
             tskcmd.c       8726      {
             tskcmd.c       8727          incuv.cnt = 0;
             tskcmd.c       8728      }
             tskcmd.c       8729      
             tskcmd.c       8730      if( incuv.cnt >= incuv.tim )
    00006B7A 3263                   CMP/GE      R6,R2
    00006B7C 8F01                   BF/S        L1240
    00006B7E 1422                   MOV.L       R2,@(8,R4) ; incuv.cnt
             tskcmd.c       8731      {
             tskcmd.c       8732          blnResult = TRUE;
    00006B80 EE01                   MOV         #1,R14     ; H'00000001
    00006B82              L1240:
             tskcmd.c       8733      }
             tskcmd.c       8734      else
             tskcmd.c       8735      {
             tskcmd.c       8736      }
             tskcmd.c       8737      
             tskcmd.c       8738      return( blnResult );
    00006B82 60E3                   MOV         R14,R0
    00006B84 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       8739    }
    00006B86 006B                   RTS/N
             tskcmd.c       8740    /***********************************************************************
             tskcmd.c       8741    * 
             tskcmd.c       8742    * [概要]  
             tskcmd.c       8743    * [引数]  
             tskcmd.c       8744    * [戻値]  TRUE = インキュベーション終了 
             tskcmd.c       8745    * 
             tskcmd.c       8746    ***********************************************************************/
             tskcmd.c       8747    static void IncuvDataInit( unsigned char tmp, unsigned int tim )
    00006B88              __$IncuvDataInit:                ; function: __$IncuvDataInit
                                                           ; frame size=0
             tskcmd.c       8748    {
             tskcmd.c       8749      incuv.tmp = tmp;
    00006B88 D158                   MOV.L       L1332+10,R1; __$incuv
    00006B8A 2140                   MOV.B       R4,@R1     ; incuv.tmp
    00006B8C E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       8750      incuv.smp[0] = 0;
    00006B8E D456                   MOV.L       L1332+6,R4 ; H'00000001+__$incuv
    00006B90 2400                   MOV.B       R0,@R4     ; incuv.smp[]
             tskcmd.c       8751      incuv.smp[1] = 0;
             tskcmd.c       8752      incuv.smp[2] = 0;
             tskcmd.c       8753      incuv.tim = ( tim * 60 ) ;
             tskcmd.c       8754      incuv.cnt = 0;
    00006B92 E600                   MOV         #0,R6      ; H'00000000
    00006B94 8041                   MOV.B       R0,@(1,R4) ; incuv.smp[]
    00006B96 8042                   MOV.B       R0,@(2,R4) ; incuv.smp[]
    00006B98 E03C                   MOV         #60,R0     ; H'0000003C
    00006B9A 4580                   MULR        R0,R5
    00006B9C 1162                   MOV.L       R6,@(8,R1) ; incuv.cnt
             tskcmd.c       8755      incuv.tmo = 0;
    00006B9E 1163                   MOV.L       R6,@(12,R1); incuv.tmo
             tskcmd.c       8756    }
    00006BA0 000B                   RTS
    00006BA2 1151                   MOV.L       R5,@(4,R1) ; incuv.tim
             tskcmd.c       8757    
             tskcmd.c       8758    /***********************************************************************
             tskcmd.c       8759    * 
             tskcmd.c       8760    * [概要]  移動
             tskcmd.c       8761    * [引数]  
             tskcmd.c       8762    * [戻値]  
             tskcmd.c       8763    * 
             tskcmd.c       8764    ***********************************************************************/
             tskcmd.c       8765    static ER  CmdActionMove( T_CMD_MSG* mrcv )
    00006BA4              __$CmdActionMove:                ; function: __$CmdActionMove
                                                           ; frame size=84
    00006BA4 4BF0                   MOVMU.L     R11,@-R15
    00006BA6 7FE0                   ADD         #-32,R15
             tskcmd.c       8766    {
             tskcmd.c       8767      ER result = E_CONTINUE;
             tskcmd.c       8768      UB bcid;
             tskcmd.c       8769      UB prid1;
             tskcmd.c       8770      UB actstep;
             tskcmd.c       8771      UB spdptn;
             tskcmd.c       8772      UB movptn;
             tskcmd.c       8773      UB devno;
             tskcmd.c       8774      INT movval;
             tskcmd.c       8775    
             tskcmd.c       8776      bcid  = mrcv->msgdata.bcid;
    00006BA8 3041801A               MOVU.B      @(26,R4),R0; (mrcv)->bcid
             tskcmd.c       8777      prid1   = mrcv->msgdata.prid1;
             tskcmd.c       8778      actstep = bcctrl[bcid].actstp -1 ;
    00006BAC D250                   MOV.L       L1332+14,R2; H'00000002+__$bcctrl
    00006BAE 6D03                   MOV         R0,R13
    00006BB0 E1F1                   MOV         #-15,R1    ; H'FFFFFFF1
    00006BB2 4008                   SHLL2       R0
    00006BB4 4000                   SHLL        R0
    00006BB6 062C                   MOV.B       @(R0,R2),R6; bcctrl[].actstp
    00006BB8 611C                   EXTU.B      R1,R1
             tskcmd.c       8779    
             tskcmd.c       8780      switch( pProcDat->Stp )
    00006BBA D24E                   MOV.L       L1332+18,R2; __$pProcDat
    00006BBC 6722                   MOV.L       @R2,R7     ; pProcDat
    00006BBE 8472                   MOV.B       @(2,R7),R0 ; (pProcDat)->Stp
    00006BC0 2008                   TST         R0,R0
    00006BC2 8F6A                   BF/S        L1247
    00006BC4 76FF                   ADD         #-1,R6
             tskcmd.c       8781      {
             tskcmd.c       8782      case 0: //
             tskcmd.c       8783          movptn = pProcAdr->step[actstep].par03;
    00006BC6 656C                   EXTU.B      R6,R5
    00006BC8 E014                   MOV         #20,R0     ; H'00000014
    00006BCA 4580                   MULR        R0,R5
    00006BCC DB4A                   MOV.L       L1332+22,R11; __$pProcAdr
    00006BCE 62B2                   MOV.L       @R11,R2    ; pProcAdr
    00006BD0 7202                   ADD         #2,R2
    00006BD2 6053                   MOV         R5,R0
    00006BD4 022C                   MOV.B       @(R0,R2),R2; pProcAdr->step[].par03
    00006BD6 6E2C                   EXTU.B      R2,R14
             tskcmd.c       8784          devno = GetMoveDevice(movptn);
    00006BD8 B076                   BSR         __$GetMoveDevice
    00006BDA 64E3                   MOV         R14,R4
    00006BDC 6C0C                   EXTU.B      R0,R12
             tskcmd.c       8785          movval = GetPositionValue(movptn);
    00006BDE BEA5                   BSR         __$GetPositionValue
    00006BE0 64E3                   MOV         R14,R4
    00006BE2 6B03                   MOV         R0,R11
             tskcmd.c       8786          
             tskcmd.c       8787          if( devno == MT_Y0 )        spdptn = SpPtn.Y0_SpdNmlPtn;
    00006BE4 60C3                   MOV         R12,R0
    00006BE6 8801                   CMP/EQ      #1,R0
    00006BE8 8B01                   BF          L1249
    00006BEA D644                   MOV.L       L1332+26,R6; H'00000005+__$SpPtn
    00006BEC 6560                   MOV.B       @R6,R5     ; SpPtn.Y0_SpdNmlPtn
    00006BEE              L1249:
             tskcmd.c       8788          if( devno == MT_Z0 )        spdptn = SpPtn.Z0_SpdNmlPtn;
    00006BEE 60C3                   MOV         R12,R0
    00006BF0 8802                   CMP/EQ      #2,R0
    00006BF2 8B01                   BF          L1251
    00006BF4 D642                   MOV.L       L1332+30,R6; H'00000006+__$SpPtn
    00006BF6 6560                   MOV.B       @R6,R5     ; SpPtn.Z0_SpdNmlPtn
    00006BF8              L1251:
             tskcmd.c       8789          if( devno == MT_P0 )        spdptn = SpPtn.P0_SpdNmlPtn;
    00006BF8 60C3                   MOV         R12,R0
    00006BFA 8803                   CMP/EQ      #3,R0
    00006BFC 8B01                   BF          L1253
    00006BFE D641                   MOV.L       L1332+34,R6; H'00000007+__$SpPtn
    00006C00 6560                   MOV.B       @R6,R5     ; SpPtn.P0_SpdNmlPtn
    00006C02              L1253:
             tskcmd.c       8790          if( devno == MT_F0 )        spdptn = SpPtn.F0_SpdNmlPtn;
    00006C02 60C3                   MOV         R12,R0
    00006C04 8804                   CMP/EQ      #4,R0
    00006C06 8B01                   BF          L1255
    00006C08 D63F                   MOV.L       L1332+38,R6; H'00000009+__$SpPtn
    00006C0A 6560                   MOV.B       @R6,R5     ; SpPtn.F0_SpdNmlPtn
    00006C0C              L1255:
             tskcmd.c       8791          if( devno == MT_Y1 )        spdptn = SpPtn.Y1_SpdNmlPtn;
    00006C0C 60C3                   MOV         R12,R0
    00006C0E 8805                   CMP/EQ      #5,R0
    00006C10 8B01                   BF          L1257
    00006C12 D63E                   MOV.L       L1332+42,R6; H'00000008+__$SpPtn
    00006C14 6560                   MOV.B       @R6,R5     ; SpPtn.Y1_SpdNmlPtn
    00006C16              L1257:
             tskcmd.c       8792          
             tskcmd.c       8793          MAC_SPEED_SET( devno, 
    00006C16 E03C                   MOV         #60,R0     ; H'0000003C
    00006C18 6EC3                   MOV         R12,R14
    00006C1A 4E80                   MULR        R0,R14
    00006C1C 655C                   EXTU.B      R5,R5
    00006C1E E00C                   MOV         #12,R0     ; H'0000000C
    00006C20 D43B                   MOV.L       L1332+46,R4; __$Sp
    00006C22 4580                   MULR        R0,R5
    00006C24 3E5C                   ADD         R5,R14
    00006C26 60E3                   MOV         R14,R0
    00006C28 014D                   MOV.W       @(R0,R4),R1; Sp[].ac
    00006C2A 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
    00006C2E D539                   MOV.L       L1332+50,R5; _GetFactor
    00006C30 450B                   JSR         @R5
    00006C32 E403                   MOV         #3,R4      ; H'00000003
    00006C34 D536                   MOV.L       L1332+46,R5; __$Sp
    00006C36 6753                   MOV         R5,R7
    00006C38 7704                   ADD         #4,R7
    00006C3A 2F02                   MOV.L       R0,@R15    ; mp.factor
    00006C3C 60E3                   MOV         R14,R0
    00006C3E 017E                   MOV.L       @(R0,R7),R1; Sp[].fl
    00006C40 6E53                   MOV         R5,R14
    00006C42 7502                   ADD         #2,R5
    00006C44 7E08                   ADD         #8,R14
    00006C46 1F12                   MOV.L       R1,@(8,R15); mp.FL
    00006C48 E400                   MOV         #0,R4      ; H'00000000
    00006C4A 015D                   MOV.W       @(R0,R5),R1; Sp[].gl
    00006C4C 02EE                   MOV.L       @(R0,R14),R2; Sp[].fh
    00006C4E 611D                   EXTU.W      R1,R1
    00006C50 1F46                   MOV.L       R4,@(24,R15); mp.us
    00006C52 1F23                   MOV.L       R2,@(12,R15); mp.FH
    00006C54 1F14                   MOV.L       R1,@(16,R15); mp.utime
    00006C56 1F15                   MOV.L       R1,@(20,R15); mp.dtime
    00006C58 1F47                   MOV.L       R4,@(28,R15); mp.ds
    00006C5A 7FE0                   ADD         #-32,R15
    00006C5C 65F3                   MOV         R15,R5
    00006C5E 7520                   ADD         #32,R5
    00006C60 6E52                   MOV.L       @R5,R14    ; (part of)mp
    00006C62 64C3                   MOV         R12,R4
    00006C64 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    00006C66 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00006C68 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00006C6A 2FE2                   MOV.L       R14,@R15
    00006C6C 1F71                   MOV.L       R7,@(4,R15)
    00006C6E 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    00006C70 5753                   MOV.L       @(12,R5),R7; (part of)mp
    00006C72 1F24                   MOV.L       R2,@(16,R15)
    00006C74 1F65                   MOV.L       R6,@(20,R15)
    00006C76 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00006C78 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00006C7A 1FE2                   MOV.L       R14,@(8,R15)
    00006C7C 1F73                   MOV.L       R7,@(12,R15)
    00006C7E 1F26                   MOV.L       R2,@(24,R15)
    00006C80 D225                   MOV.L       L1332+54,R2; _motor_SET
    00006C82 420B                   JSR         @R2
    00006C84 1F67                   MOV.L       R6,@(28,R15)
    00006C86 7F20                   ADD         #32,R15
             tskcmd.c       8794                         Sp[devno][spdptn].ac, 
             tskcmd.c       8795                         Sp[devno][spdptn].fl, 
             tskcmd.c       8796                         Sp[devno][spdptn].fh, 
             tskcmd.c       8797                         Sp[devno][spdptn].gl );
             tskcmd.c       8798    
             tskcmd.c       8799          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00006C88 2FB6                   MOV.L       R11,@-R15
    00006C8A E700                   MOV         #0,R7      ; H'00000000
    00006C8C E451                   MOV         #81,R4     ; H'00000051
    00006C8E 65D3                   MOV         R13,R5
    00006C90 D322                   MOV.L       L1332+58,R3; __$AbsmvAction
    00006C92 430B                   JSR         @R3
    00006C94 66C3                   MOV         R12,R6
    00006C96 6103                   MOV         R0,R1
    00006C98 7F04                   ADD         #4,R15
    00006C9A              L1247:
    00006C9A 7F20                   ADD         #32,R15
    00006C9C 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       8800          break;
             tskcmd.c       8801      }
             tskcmd.c       8802      return( result );
             tskcmd.c       8803    }
    00006C9E 017B                   RTV/N       R1
             tskcmd.c       8804    
             tskcmd.c       8805    /***********************************************************************
             tskcmd.c       8806    * 
             tskcmd.c       8807    * [概要]  
             tskcmd.c       8808    * [引数]  
             tskcmd.c       8809    * [戻値]  
             tskcmd.c       8810    * 
             tskcmd.c       8811    ***********************************************************************/
             tskcmd.c       8812    static UB  GetTipPatern( UB commdat )
    00006CA0              __$GetTipPatern:                 ; function: __$GetTipPatern
                                                           ; frame size=0
             tskcmd.c       8813    {
             tskcmd.c       8814      UB result = CLR;
             tskcmd.c       8815      UB tipwk;
             tskcmd.c       8816      
             tskcmd.c       8817      tipwk = ( commdat >> 6);
             tskcmd.c       8818      
             tskcmd.c       8819      switch( tipwk )
    00006CA0 624C                   EXTU.B      R4,R2
    00006CA2 E6FA                   MOV         #-6,R6     ; H'FFFFFFFA
    00006CA4 426D                   SHLD        R6,R2
    00006CA6 602C                   EXTU.B      R2,R0
    00006CA8 8801                   CMP/EQ      #1,R0
    00006CAA 8905                   BT          L1266
    00006CAC 8802                   CMP/EQ      #2,R0
    00006CAE 8905                   BT          L1268
    00006CB0 8803                   CMP/EQ      #3,R0
    00006CB2 8905                   BT          L1269
    00006CB4 A007                   BRA         L1270
    00006CB6 0009                   NOP
    00006CB8              L1266:
             tskcmd.c       8820      {
             tskcmd.c       8821      case 1:
             tskcmd.c       8822          result = POS_STRIPTP1;
    00006CB8 A003                   BRA         L1271
    00006CBA E20B                   MOV         #11,R2     ; H'0000000B
    00006CBC              L1268:
             tskcmd.c       8823          break;
             tskcmd.c       8824      case 2:
             tskcmd.c       8825          result = POS_STRIPTP2;
    00006CBC A001                   BRA         L1271
    00006CBE E20C                   MOV         #12,R2     ; H'0000000C
    00006CC0              L1269:
             tskcmd.c       8826          break;
             tskcmd.c       8827      case 3:
             tskcmd.c       8828          result = POS_STRIPTPL;
    00006CC0 E20D                   MOV         #13,R2     ; H'0000000D
    00006CC2              L1271:
    00006CC2 000B                   RTS
    00006CC4 6023                   MOV         R2,R0
    00006CC6              L1270:
    00006CC6 006B                   RTS/N
             tskcmd.c       8829          break;
             tskcmd.c       8830      default:
             tskcmd.c       8831          break;
             tskcmd.c       8832      }
             tskcmd.c       8833    
             tskcmd.c       8834      if( result )
             tskcmd.c       8835      
             tskcmd.c       8836      return( result );
             tskcmd.c       8837    }
             tskcmd.c       8838    /***********************************************************************
             tskcmd.c       8839    * 
             tskcmd.c       8840    * [概要]  
             tskcmd.c       8841    * [引数]  
             tskcmd.c       8842    * [戻値]  
             tskcmd.c       8843    * 
             tskcmd.c       8844    ***********************************************************************/
             tskcmd.c       8845    static UB  GetMoveDevice( UB posi )
    00006CC8              __$GetMoveDevice:                ; function: __$GetMoveDevice
                                                           ; frame size=0
             tskcmd.c       8846    {
             tskcmd.c       8847      UB devno = CLR;
             tskcmd.c       8848      
             tskcmd.c       8849      switch( posi )
    00006CC8 624C                   EXTU.B      R4,R2
    00006CCA E535                   MOV         #53,R5     ; H'00000035
    00006CCC 72FF                   ADD         #-1,R2
    00006CCE 3256                   CMP/HI      R5,R2
    00006CD0 8F02                   BF/S        L1445
    00006CD2 E600                   MOV         #0,R6      ; H'00000000
    00006CD4 A063                   BRA         L1331
    00006CD6 0009                   NOP
    00006CD8              L1445:
    00006CD8 4200                   SHLL        R2
    00006CDA C711                   MOVA        L1333,R0
    00006CDC 002D                   MOV.W       @(R0,R2),R0
    00006CDE 0023                   BRAF        R0
    00006CE0 0009                   NOP
    00006CE2              L1332:
    00006CE2 00000002               .RES.W      1
    00006CE4 <00000000>             .DATA.L     _TmpDataGet
    00006CE8 <00000001>             .DATA.L     H'00000001+__$incuv
    00006CEC <00000000>             .DATA.L     __$incuv
    00006CF0 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00006CF4 <00000000>             .DATA.L     __$pProcDat
    00006CF8 <00000000>             .DATA.L     __$pProcAdr
    00006CFC <00000005>             .DATA.L     H'00000005+__$SpPtn
    00006D00 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00006D04 <00000007>             .DATA.L     H'00000007+__$SpPtn
    00006D08 <00000009>             .DATA.L     H'00000009+__$SpPtn
    00006D0C <00000008>             .DATA.L     H'00000008+__$SpPtn
    00006D10 <00000000>             .DATA.L     __$Sp
    00006D14 <00000000>             .DATA.L     _GetFactor
    00006D18 <00000000>             .DATA.L     _motor_SET
    00006D1C <00000000>             .DATA.L     __$AbsmvAction
    00006D20              L1333:
    00006D20 00B6                   .DATA.W     L1281-L1332
    00006D22 00BA                   .DATA.W     L1295-L1332
    00006D24 00AA                   .DATA.W     L1275-L1332
    00006D26 00AE                   .DATA.W     L1277-L1332
    00006D28 00B2                   .DATA.W     L1279-L1332
    00006D2A 00B6                   .DATA.W     L1282-L1332
    00006D2C 00BA                   .DATA.W     L1296-L1332
    00006D2E 00AA                   .DATA.W     L1276-L1332
    00006D30 00AE                   .DATA.W     L1278-L1332
    00006D32 00B2                   .DATA.W     L1280-L1332
    00006D34 00B6                   .DATA.W     L1283-L1332
    00006D36 00B6                   .DATA.W     L1284-L1332
    00006D38 00B6                   .DATA.W     L1285-L1332
    00006D3A 00B6                   .DATA.W     L1286-L1332
    00006D3C 00B6                   .DATA.W     L1287-L1332
    00006D3E 00B6                   .DATA.W     L1288-L1332
    00006D40 00B6                   .DATA.W     L1289-L1332
    00006D42 00B6                   .DATA.W     L1290-L1332
    00006D44 00B6                   .DATA.W     L1291-L1332
    00006D46 00B6                   .DATA.W     L1292-L1332
    00006D48 00B6                   .DATA.W     L1293-L1332
    00006D4A 00B6                   .DATA.W     L1294-L1332
    00006D4C 00BA                   .DATA.W     L1297-L1332
    00006D4E 00BA                   .DATA.W     L1298-L1332
    00006D50 00BA                   .DATA.W     L1299-L1332
    00006D52 00BA                   .DATA.W     L1300-L1332
    00006D54 00BA                   .DATA.W     L1301-L1332
    00006D56 00BA                   .DATA.W     L1302-L1332
    00006D58 00BA                   .DATA.W     L1303-L1332
    00006D5A 00BA                   .DATA.W     L1304-L1332
    00006D5C 00BA                   .DATA.W     L1305-L1332
    00006D5E 00BA                   .DATA.W     L1306-L1332
    00006D60 00BA                   .DATA.W     L1307-L1332
    00006D62 00BA                   .DATA.W     L1308-L1332
    00006D64 00BA                   .DATA.W     L1309-L1332
    00006D66 00BA                   .DATA.W     L1310-L1332
    00006D68 00BA                   .DATA.W     L1311-L1332
    00006D6A 00BA                   .DATA.W     L1312-L1332
    00006D6C 00BA                   .DATA.W     L1313-L1332
    00006D6E 00BA                   .DATA.W     L1314-L1332
    00006D70 00BA                   .DATA.W     L1315-L1332
    00006D72 00BA                   .DATA.W     L1316-L1332
    00006D74 00BA                   .DATA.W     L1317-L1332
    00006D76 00BA                   .DATA.W     L1318-L1332
    00006D78 00BA                   .DATA.W     L1319-L1332
    00006D7A 00BA                   .DATA.W     L1320-L1332
    00006D7C 00BA                   .DATA.W     L1321-L1332
    00006D7E 00BA                   .DATA.W     L1322-L1332
    00006D80 00BA                   .DATA.W     L1323-L1332
    00006D82 00BA                   .DATA.W     L1324-L1332
    00006D84 00BA                   .DATA.W     L1325-L1332
    00006D86 00BA                   .DATA.W     L1326-L1332
    00006D88 00BA                   .DATA.W     L1327-L1332
    00006D8A 00BA                   .DATA.W     L1328-L1332
    00006D8C              L1275:
    00006D8C              L1276:
             tskcmd.c       8850      {
             tskcmd.c       8851          case POS_P0_OFFSE :   // [P0] 仮想原点オフセット値               ポジション番号３
             tskcmd.c       8852          case POS_P0_TAIHI :   // [P0] 退避位置                           ポジション番号８
             tskcmd.c       8853              devno = MT_P0;
    00006D8C A007                   BRA         L1331
    00006D8E E603                   MOV         #3,R6      ; H'00000003
    00006D90              L1277:
    00006D90              L1278:
             tskcmd.c       8854              break;
             tskcmd.c       8855    
             tskcmd.c       8856          case POS_F0_OFFSE :   // [F0] 仮想原点オフセット値               ポジション番号４
             tskcmd.c       8857          case POS_F0_TAIHI :   // [F0] 退避位置                           ポジション番号９
             tskcmd.c       8858              devno = MT_F0;
    00006D90 A005                   BRA         L1331
    00006D92 E604                   MOV         #4,R6      ; H'00000004
    00006D94              L1279:
    00006D94              L1280:
             tskcmd.c       8859              break;
             tskcmd.c       8860          
             tskcmd.c       8861          case POS_Y1_OFFSE :   // [Y1] 仮想原点オフセット値               ポジション番号５
             tskcmd.c       8862          case POS_Y1_TAIHI :   // [Y1] 退避位置                           ポジション番号１０
             tskcmd.c       8863              devno = MT_Y1;
    00006D94 A003                   BRA         L1331
    00006D96 E605                   MOV         #5,R6      ; H'00000005
    00006D98              L1281:
    00006D98              L1282:
    00006D98              L1283:
    00006D98              L1284:
    00006D98              L1285:
    00006D98              L1286:
    00006D98              L1287:
    00006D98              L1288:
    00006D98              L1289:
    00006D98              L1290:
    00006D98              L1291:
    00006D98              L1292:
    00006D98              L1293:
    00006D98              L1294:
             tskcmd.c       8864              break;
             tskcmd.c       8865    
             tskcmd.c       8866          case POS_Y0_OFFSE :   // [Y0] 仮想原点オフセット値               ポジション番号１
             tskcmd.c       8867          case POS_Y0_TAIHI :   // [Y0] 退避位置                           ポジション番号６
             tskcmd.c       8868          case POS_STRIPTP1 :   // [Y0] 試薬ストリップ-ショートチップ１    ポジション番号１１
             tskcmd.c       8869          case POS_STRIPTP2 :   // [Y0] 試薬ストリップ-ショートチップ２    ポジション番号１２
             tskcmd.c       8870          case POS_STRIPTPL :   // [Y0] 試薬ストリップ-ロングチップ        ポジション番号１３
             tskcmd.c       8871          case POS_STRIPTUB :   // [Y0] 試薬ストリップ-サンプルチューブ    ポジション番号１４
             tskcmd.c       8872          case POS_STRIPSM6 :   // [Y0] 試薬ストリップ-抽出用試薬6         ポジション番号１５
             tskcmd.c       8873          case POS_STRIPSM5 :   // [Y0] 試薬ストリップ-抽出用試薬5         ポジション番号１６
             tskcmd.c       8874          case POS_STRIPSM4 :   // [Y0] 試薬ストリップ-抽出用試薬4         ポジション番号１７
             tskcmd.c       8875          case POS_STRIPSM3 :   // [Y0] 試薬ストリップ-抽出用試薬3         ポジション番号１８
             tskcmd.c       8876          case POS_STRIPSM2 :   // [Y0] 試薬ストリップ-抽出用試薬2         ポジション番号１９
             tskcmd.c       8877          case POS_STRIPSM1 :   // [Y0] 試薬ストリップ-抽出用試薬1         ポジション番号２０
             tskcmd.c       8878          case POS_STRIPCAT :   // [Y0] 試薬ストリップ-カートリッジ        ポジション番号２１
             tskcmd.c       8879          case POS_STRIPCOL :   // [Y0] 試薬ストリップ-核酸回収液          ポジション番号２２
             tskcmd.c       8880              devno = MT_Y0;
    00006D98 A001                   BRA         L1331
    00006D9A E601                   MOV         #1,R6      ; H'00000001
    00006D9C              L1295:
    00006D9C              L1296:
    00006D9C              L1297:
    00006D9C              L1298:
    00006D9C              L1299:
    00006D9C              L1300:
    00006D9C              L1301:
    00006D9C              L1302:
    00006D9C              L1303:
    00006D9C              L1304:
    00006D9C              L1305:
    00006D9C              L1306:
    00006D9C              L1307:
    00006D9C              L1308:
    00006D9C              L1309:
    00006D9C              L1310:
    00006D9C              L1311:
    00006D9C              L1312:
    00006D9C              L1313:
    00006D9C              L1314:
    00006D9C              L1315:
    00006D9C              L1316:
    00006D9C              L1317:
    00006D9C              L1318:
    00006D9C              L1319:
    00006D9C              L1320:
    00006D9C              L1321:
    00006D9C              L1322:
    00006D9C              L1323:
    00006D9C              L1324:
    00006D9C              L1325:
    00006D9C              L1326:
    00006D9C              L1327:
    00006D9C              L1328:
             tskcmd.c       8881              break;
             tskcmd.c       8882    
             tskcmd.c       8883          case POS_Z0_OFFSE :   // [Z0] 仮想原点オフセット値               ポジション番号２
             tskcmd.c       8884          case POS_Z0_TAIHI :   // [Z0] 退避位置                           ポジション番号７
             tskcmd.c       8885          case POS_Z0_STOPE :   // [Z0] 試薬ストリップ-シール開け最終位置  ポジション番号２３
             tskcmd.c       8886          case POS_Z0_STOP1 :   // [Z0] 試薬ストリップ-シール開け１段位置  ポジション番号２４
             tskcmd.c       8887          case POS_Z0_STRIP :   // [Z0] 試薬ストリップ-加圧位置            ポジション番号２５
             tskcmd.c       8888          case POS_Z0_TPGTE :   // [Z0] チップ取得最終位置                 ポジション番号２６
             tskcmd.c       8889          case POS_Z0_TPGT1 :   // [Z0] チップ取得１段位置                 ポジション番号２７
             tskcmd.c       8890          case POS_Z0_TPDLE :   // [Z0] チップ廃棄最終位置                 ポジション番号２８
             tskcmd.c       8891          case POS_Z0_TPDL1 :   // [Z0] チップ廃棄１段位置                 ポジション番号２９
             tskcmd.c       8892          case POS_Z0_LIQPU :   // [Z0] 廃液吐出位置                       ポジション番号３０
             tskcmd.c       8893          case POS_Z0_COPOS :   // [Z0] コレクション 回収チューブ位置      ポジション番号３１
             tskcmd.c       8894          case POS_Z0_COLDS :   // [Z0] 廃液チューブ位置                   ポジション番号３２
             tskcmd.c       8895          case POS_Z0_SUCS1 :   // [Z0] 吸引開始高さ1                      ポジション番号３３
             tskcmd.c       8896          case POS_Z0_SUCS2 :   // [Z0] 吸引開始高さ2                      ポジション番号３４
             tskcmd.c       8897          case POS_Z0_SUCS3 :   // [Z0] 吸引開始高さ3                      ポジション番号３５
             tskcmd.c       8898          case POS_Z0_SUCS4 :   // [Z0] 吸引開始高さ4                      ポジション番号３６
             tskcmd.c       8899          case POS_Z0_SUCS5 :   // [Z0] 吸引開始高さ5                      ポジション番号３７
             tskcmd.c       8900          case POS_Z0_SUCE1 :   // [Z0] 吸引終了高さ1                      ポジション番号３８
             tskcmd.c       8901          case POS_Z0_SUCE2 :   // [Z0] 吸引終了高さ2                      ポジション番号３９
             tskcmd.c       8902          case POS_Z0_SUCE3 :   // [Z0] 吸引終了高さ3                      ポジション番号４０
             tskcmd.c       8903          case POS_Z0_SUCE4 :   // [Z0] 吸引終了高さ4                      ポジション番号４１
             tskcmd.c       8904          case POS_Z0_SUCE5 :   // [Z0] 吸引終了高さ5                      ポジション番号４２
             tskcmd.c       8905          case POS_Z0_PUTS1 :   // [Z0] 吐出開始高さ1                      ポジション番号４３
             tskcmd.c       8906          case POS_Z0_PUTS2 :   // [Z0] 吐出開始高さ2                      ポジション番号４４
             tskcmd.c       8907          case POS_Z0_PUTS3 :   // [Z0] 吐出開始高さ3                      ポジション番号４５
             tskcmd.c       8908          case POS_Z0_PUTS4 :   // [Z0] 吐出開始高さ4                      ポジション番号４６
             tskcmd.c       8909          case POS_Z0_PUTS5 :   // [Z0] 吐出開始高さ5                      ポジション番号４７
             tskcmd.c       8910          case POS_Z0_PUTE1 :   // [Z0] 吐出終了高さ1                      ポジション番号４８
             tskcmd.c       8911          case POS_Z0_PUTE2 :   // [Z0] 吐出終了高さ2                      ポジション番号４９
             tskcmd.c       8912          case POS_Z0_PUTE3 :   // [Z0] 吐出終了高さ3                      ポジション番号５０
             tskcmd.c       8913          case POS_Z0_PUTE4 :   // [Z0] 吐出終了高さ4                      ポジション番号５１
             tskcmd.c       8914          case POS_Z0_PUTE5 :   // [Z0] 吐出終了高さ5                      ポジション番号５２
             tskcmd.c       8915          case POS_Z0_MIXS1 :   // [Z0] 撹拌吸引開始高さ                   ポジション番号５３
             tskcmd.c       8916          case POS_Z0_MIXE1 :   // [Z0] 撹拌吸引終了高さ                   ポジション番号５４
             tskcmd.c       8917              devno = MT_Z0;
    00006D9C E602                   MOV         #2,R6      ; H'00000002
    00006D9E              L1331:
             tskcmd.c       8918              break;
             tskcmd.c       8919          
             tskcmd.c       8920          default:
             tskcmd.c       8921              break;
             tskcmd.c       8922      }
             tskcmd.c       8923      return( devno );
             tskcmd.c       8924    }
    00006D9E 067B                   RTV/N       R6
             tskcmd.c       8925    /***********************************************************************
             tskcmd.c       8926    * 
             tskcmd.c       8927    * [概要]  
             tskcmd.c       8928    * [引数]  
             tskcmd.c       8929    * [戻値]  
             tskcmd.c       8930    * 
             tskcmd.c       8931    ***********************************************************************/
             tskcmd.c       8932    static INT GetPosiData( UB posino )
    00006DA0              __$GetPosiData:                  ; function: __$GetPosiData
                                                           ; frame size=0
             tskcmd.c       8933    {
             tskcmd.c       8934      INT result = CLR;
             tskcmd.c       8935      INT *adr;
             tskcmd.c       8936      
             tskcmd.c       8937      if(
    00006DA0 664C                   EXTU.B      R4,R6
    00006DA2 E503                   MOV         #3,R5      ; H'00000003
    00006DA4 3653                   CMP/GE      R5,R6
    00006DA6 8F08                   BF/S        L1341
    00006DA8 E200                   MOV         #0,R2      ; H'00000000
    00006DAA E560                   MOV         #96,R5     ; H'00000060
    00006DAC 3657                   CMP/GT      R5,R6
    00006DAE 8904                   BT          L1341
             tskcmd.c       8938          ( posino >= POS_P0_OFFSE )&&
             tskcmd.c       8939          ( posino <= POS_XX_RSV96 )
             tskcmd.c       8940      )
             tskcmd.c       8941      {
             tskcmd.c       8942          adr = &BkP7.Y0_Offset + ( posino - 1 ) ;
             tskcmd.c       8943          result = *adr;
    00006DB0 644C                   EXTU.B      R4,R4
    00006DB2 74FF                   ADD         #-1,R4
    00006DB4 4408                   SHLL2       R4
    00006DB6 D03E                   MOV.L       L1403+2,R0 ; __$BkP7
    00006DB8 024E                   MOV.L       @(R0,R4),R2; *(adr)
    00006DBA              L1341:
             tskcmd.c       8944      }
             tskcmd.c       8945    
             tskcmd.c       8946      return( result );
             tskcmd.c       8947    }
    00006DBA 027B                   RTV/N       R2
             tskcmd.c       8948    
             tskcmd.c       8949    /***********************************************************************
             tskcmd.c       8950    * 
             tskcmd.c       8951    * [概要]  圧力ユニットへ加圧指示
             tskcmd.c       8952    * [引数]  
             tskcmd.c       8953    * [戻値]  
             tskcmd.c       8954    * 
             tskcmd.c       8955    ***********************************************************************/
             tskcmd.c       8956    static ER  PressReq( UB *par )
             tskcmd.c       8957    {
             tskcmd.c       8958      ER result = E_CONTINUE;
             tskcmd.c       8959      // ★後日検討
             tskcmd.c       8960      
             tskcmd.c       8961      return( result );
             tskcmd.c       8962    }
             tskcmd.c       8963    /***********************************************************************
             tskcmd.c       8964    * 
             tskcmd.c       8965    * [概要]  圧力ユニットへ加圧指示
             tskcmd.c       8966    * [引数]  
             tskcmd.c       8967    * [戻値]  
             tskcmd.c       8968    * 
             tskcmd.c       8969    ***********************************************************************/
             tskcmd.c       8970    static INT  PressStatus( UB *par )
    00006DBC              __$PressStatus:                  ; function: __$PressStatus
                                                           ; frame size=0
             tskcmd.c       8971    {
             tskcmd.c       8972      INT result = E_CONTINUE;
             tskcmd.c       8973      
             tskcmd.c       8974      // ★後日検討
             tskcmd.c       8975      result = E_SUCCESS;
             tskcmd.c       8976      
             tskcmd.c       8977      return( result );
             tskcmd.c       8978    }
    00006DBC 000B                   RTS
    00006DBE E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       8979    /***********************************************************************
             tskcmd.c       8980    * 
             tskcmd.c       8981    * [概要]  
             tskcmd.c       8982    * [引数]  
             tskcmd.c       8983    * [戻値]  
             tskcmd.c       8984    * 
             tskcmd.c       8985    ***********************************************************************/
             tskcmd.c       8986    static void  SetPauseStop( UB act )
    00006DC0              __$SetPauseStop:                 ; function: __$SetPauseStop
                                                           ; frame size=0
             tskcmd.c       8987    {
             tskcmd.c       8988      if( act > PAUS_STS )    PauseStopFlg = PAUS_STS;
    00006DC0 624C                   EXTU.B      R4,R2
    00006DC2 E602                   MOV         #2,R6      ; H'00000002
    00006DC4 3267                   CMP/GT      R6,R2
    00006DC6 8902                   BT          L1345
             tskcmd.c       8989      else                    PauseStopFlg = act;
    00006DC8 D63A                   MOV.L       L1403+6,R6 ; __$PauseStopFlg
    00006DCA 000B                   RTS
    00006DCC 2640                   MOV.B       R4,@R6     ; PauseStopFlg
    00006DCE              L1345:
    00006DCE E202                   MOV         #2,R2      ; H'00000002
    00006DD0 D638                   MOV.L       L1403+6,R6 ; __$PauseStopFlg
    00006DD2 000B                   RTS
    00006DD4 2620                   MOV.B       R2,@R6     ; PauseStopFlg
             tskcmd.c       8990      
             tskcmd.c       8991      // 状態書き込み
             tskcmd.c       8992      
             tskcmd.c       8993    }
             tskcmd.c       8994    /***********************************************************************
             tskcmd.c       8995    * 
             tskcmd.c       8996    * [概要]  
             tskcmd.c       8997    * [引数]  
             tskcmd.c       8998    * [戻値]  
             tskcmd.c       8999    * 
             tskcmd.c       9000    ***********************************************************************/
             tskcmd.c       9001    static UB  GetPauseStop()
    00006DD6              __$GetPauseStop:                 ; function: __$GetPauseStop
                                                           ; frame size=0
             tskcmd.c       9002    {
             tskcmd.c       9003      return( PauseStopFlg );
    00006DD6 D637                   MOV.L       L1403+6,R6 ; __$PauseStopFlg
             tskcmd.c       9004    }
    00006DD8 000B                   RTS
    00006DDA 6060                   MOV.B       @R6,R0     ; PauseStopFlg
             tskcmd.c       9005    /***********************************************************************
             tskcmd.c       9006    * 
             tskcmd.c       9007    * [概要]  
             tskcmd.c       9008    * [引数]  
             tskcmd.c       9009    * [戻値]  
             tskcmd.c       9010    * 
             tskcmd.c       9011    ***********************************************************************/
             tskcmd.c       9012    static UB  InitPauseStop()
             tskcmd.c       9013    {
             tskcmd.c       9014      PauseStopFlg = IDLE_STS;
             tskcmd.c       9015    }
             tskcmd.c       9016    
             tskcmd.c       9017    /***********************************************************************
             tskcmd.c       9018    * 
             tskcmd.c       9019    * [概要]  ブローアウトエア量
             tskcmd.c       9020    * [引数]  補正前容量
             tskcmd.c       9021    * [戻値]  補正後容量
             tskcmd.c       9022    * 
             tskcmd.c       9023    ***********************************************************************/
             tskcmd.c       9024    static INT  BlowoutAirValue( ST_HOSEI_PTN *adr )
    00006DDC              __$BlowoutAirValue:              ; function: __$BlowoutAirValue
                                                           ; frame size=0
             tskcmd.c       9025    {
             tskcmd.c       9026      INT result = 0;
             tskcmd.c       9027      
             tskcmd.c       9028      result = ValueCal(adr, adr->HS_Out);
    00006DDC 5543                   MOV.L       @(12,R4),R5; (adr)->HS_Out
             tskcmd.c       9029      
             tskcmd.c       9030      return( result);
             tskcmd.c       9031    }
             tskcmd.c       9032    /***********************************************************************
             tskcmd.c       9033    * 
             tskcmd.c       9034    * [概要]  エアギャップ量
             tskcmd.c       9035    * [引数]  補正前容量
             tskcmd.c       9036    * [戻値]  補正後容量
             tskcmd.c       9037    * 
             tskcmd.c       9038    ***********************************************************************/
             tskcmd.c       9039    static INT  AirGapValue( ST_HOSEI_PTN *adr )
             tskcmd.c       9040    {
             tskcmd.c       9041      INT result = 0;
             tskcmd.c       9042      
             tskcmd.c       9043      result = ValueCal(adr, adr->HS_Air);
             tskcmd.c       9044      
             tskcmd.c       9045      return( result);
             tskcmd.c       9046    }
             tskcmd.c       9047    /***********************************************************************
             tskcmd.c       9048    * 
             tskcmd.c       9049    * [概要]  余剰量
             tskcmd.c       9050    * [引数]  補正前容量
             tskcmd.c       9051    * [戻値]  補正後容量
             tskcmd.c       9052    * 
             tskcmd.c       9053    ***********************************************************************/
             tskcmd.c       9054    static INT  SurplusValue( ST_HOSEI_PTN *adr )
             tskcmd.c       9055    {
             tskcmd.c       9056      INT result = 0;
             tskcmd.c       9057      
             tskcmd.c       9058      result = ValueCal(adr, adr->HS_Tra);
             tskcmd.c       9059      
             tskcmd.c       9060      return( result);
             tskcmd.c       9061    }
             tskcmd.c       9062    
             tskcmd.c       9063    /***********************************************************************
             tskcmd.c       9064    * 
             tskcmd.c       9065    * [概要]  容量補正計算
             tskcmd.c       9066    * [引数]  補正前容量
             tskcmd.c       9067    * [戻値]  補正後容量
             tskcmd.c       9068    * 
             tskcmd.c       9069    ***********************************************************************/
             tskcmd.c       9070    static INT  ValueCal( ST_HOSEI_PTN *adr, INT value )
    00006DDE              __$ValueCal:                     ; function: __$ValueCal
                                                           ; frame size=8
    00006DDE 4F12                   STS.L       MACL,@-R15
    00006DE0 4F02                   STS.L       MACH,@-R15
             tskcmd.c       9071    {
             tskcmd.c       9072      INT result = 0;
             tskcmd.c       9073      INT valcal = 0;
             tskcmd.c       9074      INT factor = 0;
             tskcmd.c       9075      INT vl0_base = POMPVALUE_BASE * (0.0*10) ;
             tskcmd.c       9076      INT vl1_base = POMPVALUE_BASE * (0.1*10) ;
             tskcmd.c       9077      INT vl2_base = POMPVALUE_BASE * (0.5*10) ;
             tskcmd.c       9078      INT vl3_base = POMPVALUE_BASE * (1.0*10) ;
             tskcmd.c       9079      
             tskcmd.c       9080      valcal = value * 10;
    00006DE2 E00A                   MOV         #10,R0     ; H'0000000A
    00006DE4 4580                   MULR        R0,R5
             tskcmd.c       9081      
             tskcmd.c       9082      if( ( vl0_base >= 0 )&&( ( valcal < vl1_base ) ))           //  0%以上 〜 10%未満
    00006DE6 060003E8               MOVI20      #1000,R6   ; H'000003E8
    00006DEA 3563                   CMP/GE      R6,R5
    00006DEC 8D01                   BT/S        L1352
    00006DEE E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       9083      {
             tskcmd.c       9084          factor = adr->HS_VL1;
    00006DF0 6242                   MOV.L       @R4,R2     ; (adr)->HS_VL1
    00006DF2              L1352:
             tskcmd.c       9085      }
             tskcmd.c       9086      if( ( valcal >= vl1_base )&&( ( valcal < vl2_base ) ))  // 10%以上 〜 50%未満
    00006DF2 3563                   CMP/GE      R6,R5
    00006DF4 8B04                   BF          L1354
    00006DF6 06001388               MOVI20      #5000,R6   ; H'00001388
    00006DFA 3563                   CMP/GE      R6,R5
    00006DFC 8900                   BT          L1354
             tskcmd.c       9087      {
             tskcmd.c       9088          factor = adr->HS_VL2;
    00006DFE 5241                   MOV.L       @(4,R4),R2 ; (adr)->HS_VL2
    00006E00              L1354:
             tskcmd.c       9089      }
             tskcmd.c       9090      if( ( valcal >= vl2_base )&&( ( valcal < vl3_base ) ))  // 50%以上 〜 100%未満
    00006E00 06001388               MOVI20      #5000,R6   ; H'00001388
    00006E04 3563                   CMP/GE      R6,R5
    00006E06 8B04                   BF          L1357
    00006E08 06002710               MOVI20      #10000,R6  ; H'00002710
    00006E0C 3563                   CMP/GE      R6,R5
    00006E0E 8900                   BT          L1357
             tskcmd.c       9091      {
             tskcmd.c       9092          factor = adr->HS_VL3;
    00006E10 5242                   MOV.L       @(8,R4),R2 ; (adr)->HS_VL3
    00006E12              L1357:
             tskcmd.c       9093      }
             tskcmd.c       9094      if( valcal >= vl3_base )                                        // 100%以上
    00006E12 06002710               MOVI20      #10000,R6  ; H'00002710
    00006E16 3563                   CMP/GE      R6,R5
    00006E18 8B00                   BF          L1360
             tskcmd.c       9095      {
             tskcmd.c       9096          factor = adr->HS_VL3;
    00006E1A 5242                   MOV.L       @(8,R4),R2 ; (adr)->HS_VL3
    00006E1C              L1360:
             tskcmd.c       9097      }
             tskcmd.c       9098      
             tskcmd.c       9099      result = factor * valcal;
             tskcmd.c       9100      result = result / 1000;
             tskcmd.c       9101    
             tskcmd.c       9102      return( result);
    00006E1C 6053                   MOV         R5,R0
    00006E1E D126                   MOV.L       L1403+10,R1; H'10624DD3
    00006E20 4280                   MULR        R0,R2
    00006E22 E4FA                   MOV         #-6,R4     ; H'FFFFFFFA
    00006E24 312D                   DMULS.L     R2,R1
    00006E26 070A                   STS         MACH,R7
    00006E28 474C                   SHAD        R4,R7
    00006E2A 6073                   MOV         R7,R0
    00006E2C 4004                   ROTL        R0
    00006E2E C901                   AND         #1,R0
    00006E30 370C                   ADD         R0,R7
    00006E32 4F06                   LDS.L       @R15+,MACH
    00006E34 4F16                   LDS.L       @R15+,MACL
             tskcmd.c       9103    }
    00006E36 077B                   RTV/N       R7
             tskcmd.c       9104    
             tskcmd.c       9105    /***********************************************************************
             tskcmd.c       9106    * 
             tskcmd.c       9107    * [概要]  
             tskcmd.c       9108    * [引数]  
             tskcmd.c       9109    * [戻値]  
             tskcmd.c       9110    * 
             tskcmd.c       9111    ***********************************************************************/
             tskcmd.c       9112    static unsigned short  GetNzlStsAll()
    00006E38              __$GetNzlStsAll:                 ; function: __$GetNzlStsAll
                                                           ; frame size=0
             tskcmd.c       9113    {
             tskcmd.c       9114      return( nzlsts );
    00006E38 D620                   MOV.L       L1403+14,R6; __$nzlsts
             tskcmd.c       9115    }
    00006E3A 000B                   RTS
    00006E3C 6061                   MOV.W       @R6,R0     ; nzlsts
             tskcmd.c       9116    /***********************************************************************
             tskcmd.c       9117    * 
             tskcmd.c       9118    * [概要]  指定ノズルの状態を取得する
             tskcmd.c       9119    * [引数]  ノズル番号
             tskcmd.c       9120    * [戻値]  ノズル状態（0 ≠  エラー状態、0 = 正常状態）
             tskcmd.c       9121    * 
             tskcmd.c       9122    ***********************************************************************/
             tskcmd.c       9123    static unsigned short  GetNzlSts(UB no)
             tskcmd.c       9124    {
             tskcmd.c       9125      unsigned short sftbit = 0x0001;
             tskcmd.c       9126      unsigned short result = 0x0000;
             tskcmd.c       9127      
             tskcmd.c       9128      if( no > 0 )
             tskcmd.c       9129      {
             tskcmd.c       9130          sftbit = ( sftbit << ( no - 1) );
             tskcmd.c       9131          result = ( nzlsts & sftbit );
             tskcmd.c       9132      }
             tskcmd.c       9133      
             tskcmd.c       9134      return( result );
             tskcmd.c       9135    }
             tskcmd.c       9136    /***********************************************************************
             tskcmd.c       9137    * 
             tskcmd.c       9138    * [概要]  ノズル状態セット
             tskcmd.c       9139    * [引数]  ノズル番号
             tskcmd.c       9140    * [戻値]  −
             tskcmd.c       9141    * [備考]  bit0:ノズル1・・・・bit11:ノズル12  ノズル状態（1 =  エラー状態、0 = 正常状態）
             tskcmd.c       9142    * 
             tskcmd.c       9143    ***********************************************************************/
             tskcmd.c       9144    static void  SetNzlSts( unsigned char  no )
             tskcmd.c       9145    {
             tskcmd.c       9146      unsigned short sftbit = 0x0001;
             tskcmd.c       9147      
             tskcmd.c       9148      if( no > 0 )
             tskcmd.c       9149      {
             tskcmd.c       9150          sftbit  = ( sftbit << ( no - 1) );
             tskcmd.c       9151          nzlsts |= sftbit;
             tskcmd.c       9152      }
             tskcmd.c       9153    }
             tskcmd.c       9154    /***********************************************************************
             tskcmd.c       9155    * 
             tskcmd.c       9156    * [概要]  ノズル状態クリア
             tskcmd.c       9157    * [引数]  ノズル番号
             tskcmd.c       9158    * [戻値]  −
             tskcmd.c       9159    * 
             tskcmd.c       9160    ***********************************************************************/
             tskcmd.c       9161    static void  ClrNzlSts( unsigned char  no )
             tskcmd.c       9162    {
             tskcmd.c       9163      unsigned short sftbit = 0x0001;
             tskcmd.c       9164      
             tskcmd.c       9165      if( no > 0 )
             tskcmd.c       9166      {
             tskcmd.c       9167          sftbit  = ( sftbit << ( no - 1) );
             tskcmd.c       9168          nzlsts &= ( sftbit ^ 0xffff );
             tskcmd.c       9169      }
             tskcmd.c       9170    }
             tskcmd.c       9171    /***********************************************************************
             tskcmd.c       9172    * 
             tskcmd.c       9173    * [概要]  
             tskcmd.c       9174    * [引数]  
             tskcmd.c       9175    * [戻値]  
             tskcmd.c       9176    * 
             tskcmd.c       9177    ***********************************************************************/
             tskcmd.c       9178    static unsigned short  NzlTargetGet()
    00006E3E              __$NzlTargetGet:                 ; function: __$NzlTargetGet
                                                           ; frame size=8
    00006E3E 4EF0                   MOVMU.L     R14,@-R15
    00006E40 D61F                   MOV.L       L1403+18,R6; H'00000001+__$psel
             tskcmd.c       9179    {
             tskcmd.c       9180      unsigned short nzltarget;
             tskcmd.c       9181      unsigned short nzlerror;
             tskcmd.c       9182      unsigned short nzlmask;
             tskcmd.c       9183      unsigned short nzlresult;
             tskcmd.c       9184      
             tskcmd.c       9185      nzltarget = IdleBitSet( psel.smp ); // ターゲット取得
    00006E42 D220                   MOV.L       L1403+22,R2; _IdleBitSet
    00006E44 420B                   JSR         @R2
    00006E46 6460                   MOV.B       @R6,R4     ; psel.smp
             tskcmd.c       9186      nzlerror  = GetNzlStsAll() ;        // エラー状態取得
    00006E48 BFF6                   BSR         __$GetNzlStsAll
    00006E4A 6E03                   MOV         R0,R14
             tskcmd.c       9187      nzlmask   = ( nzlerror ^ 0xffff );  // エラーチャネルマスクデータ作成
             tskcmd.c       9188      nzlresult = ( nzltarget & nzlmask );// エラー以外のターゲット取得
             tskcmd.c       9189      
             tskcmd.c       9190      return( nzlresult );
    00006E4C E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00006E4E 205A                   XOR         R5,R0
    00006E50 20E9                   AND         R14,R0
    00006E52 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       9191    }
    00006E54 006B                   RTS/N
             tskcmd.c       9192    
             tskcmd.c       9193    /***********************************************************************
             tskcmd.c       9194    * 
             tskcmd.c       9195    * [概要]  
             tskcmd.c       9196    * [引数]  メッセージデータ
             tskcmd.c       9197    * [戻値]  −
             tskcmd.c       9198    * 
             tskcmd.c       9199    ***********************************************************************/
             tskcmd.c       9200    INT GetPsnsData( unsigned char *pdat )
    00006E56              _GetPsnsData:                    ; function: GetPsnsData
                                                           ; frame size=8
    00006E56 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       9201    {
             tskcmd.c       9202      INT i;
             tskcmd.c       9203      INT len;
             tskcmd.c       9204    
             tskcmd.c       9205      len = strlen(&psnsdat[0]);
    00006E58 6E43                   MOV         R4,R14
    00006E5A D41B                   MOV.L       L1403+26,R4; __$psnsdat
    00006E5C D21B                   MOV.L       L1403+30,R2; _strlen
    00006E5E 424B                   JSR/N       @R2
    00006E60 6403                   MOV         R0,R4
             tskcmd.c       9206    
             tskcmd.c       9207      for( i=0;i<len;i++)
    00006E62 D519                   MOV.L       L1403+26,R5; __$psnsdat
    00006E64 A003                   BRA         L1364
    00006E66 E600                   MOV         #0,R6      ; H'00000000
    00006E68              L1365:
             tskcmd.c       9208      {
             tskcmd.c       9209          *pdat=psnsdat[i];
    00006E68 6054                   MOV.B       @R5+,R0    ; psnsdat[]
    00006E6A 7601                   ADD         #1,R6
    00006E6C 4E8B                   MOV.B       R0,@R14+   ; *(pdat)
    00006E6E              L1364:
    00006E6E 3643                   CMP/GE      R4,R6
    00006E70 8BFA                   BF          L1365
    00006E72 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       9210          pdat++;
             tskcmd.c       9211      }
             tskcmd.c       9212      return( len );
             tskcmd.c       9213    }
    00006E74 047B                   RTV/N       R4
             tskcmd.c       9214    
             tskcmd.c       9215    /***********************************************************************
             tskcmd.c       9216    * 
             tskcmd.c       9217    * [概要]  
             tskcmd.c       9218    * [引数]  メッセージデータ
             tskcmd.c       9219    * [戻値]  −
             tskcmd.c       9220    * 
             tskcmd.c       9221    ***********************************************************************/
             tskcmd.c       9222    INT GetRunData( unsigned char *buf )
    00006E76              _GetRunData:                     ; function: GetRunData
                                                           ; frame size=4
    00006E76 4F22                   STS.L       PR,@-R15
    00006E78 D715                   MOV.L       L1403+34,R7; __$RcvDataSize
             tskcmd.c       9223    {
             tskcmd.c       9224      memcpy( buf, &ImpExpRcvData[0], RcvDataSize );
    00006E7A D516                   MOV.L       L1403+38,R5; __$ImpExpRcvData
    00006E7C D216                   MOV.L       L1403+42,R2; _memcpy
    00006E7E 420B                   JSR         @R2
    00006E80 6672                   MOV.L       @R7,R6     ; RcvDataSize
             tskcmd.c       9225      
             tskcmd.c       9226      return( RcvDataSize );
    00006E82 D113                   MOV.L       L1403+34,R1; __$RcvDataSize
    00006E84 4F26                   LDS.L       @R15+,PR
             tskcmd.c       9227    }
    00006E86 000B                   RTS
    00006E88 6012                   MOV.L       @R1,R0     ; RcvDataSize
             tskcmd.c       9228    
             tskcmd.c       9229    /***********************************************************************
             tskcmd.c       9230    * 
             tskcmd.c       9231    * [概要]  大容量データ扱う場合、一時的にRcvDataに格納 ※競合しない設計必要
             tskcmd.c       9232    * [引数]  メッセージデータ
             tskcmd.c       9233    * [戻値]  −
             tskcmd.c       9234    * 
             tskcmd.c       9235    ***********************************************************************/
             tskcmd.c       9236    void SetRcvData( unsigned char *buf, unsigned int len )
    00006E8A              _SetRcvData:                     ; function: SetRcvData
                                                           ; frame size=12
    00006E8A 4DF0                   MOVMU.L     R13,@-R15
             tskcmd.c       9237    {
             tskcmd.c       9238      memset( &ImpExpRcvData[0], CLR, sizeof( ImpExpRcvData ) );
    00006E8C 6E53                   MOV         R5,R14
    00006E8E 6D43                   MOV         R4,R13
    00006E90 D410                   MOV.L       L1403+38,R4; __$ImpExpRcvData
    00006E92 06000D48               MOVI20      #3400,R6   ; H'00000D48
    00006E96 D111                   MOV.L       L1403+46,R1; _memset
    00006E98 410B                   JSR         @R1
    00006E9A E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       9239    
             tskcmd.c       9240      RcvDataSize = len;
    00006E9C D70C                   MOV.L       L1403+34,R7; __$RcvDataSize
    00006E9E 27E2                   MOV.L       R14,@R7    ; RcvDataSize
    00006EA0 65D3                   MOV         R13,R5
             tskcmd.c       9241      memcpy( &ImpExpRcvData[0], buf, len );
    00006EA2 D40C                   MOV.L       L1403+38,R4; __$ImpExpRcvData
    00006EA4 66E3                   MOV         R14,R6
    00006EA6 D20C                   MOV.L       L1403+42,R2; _memcpy
    00006EA8 4DF4                   MOVMU.L     @R15+,R13
    00006EAA 422B                   JMP         @R2
    00006EAC 0009                   NOP
    00006EAE              L1403:
    00006EAE 00000002               .RES.W      1
    00006EB0 <00000000>             .DATA.L     __$BkP7
    00006EB4 <00000000>             .DATA.L     __$PauseStopFlg
    00006EB8 10624DD3               .DATA.L     H'10624DD3
    00006EBC <00000000>             .DATA.L     __$nzlsts
    00006EC0 <00000001>             .DATA.L     H'00000001+__$psel
    00006EC4 <00000000>             .DATA.L     _IdleBitSet
    00006EC8 <00000000>             .DATA.L     __$psnsdat
    00006ECC <00000000>             .DATA.L     _strlen
    00006ED0 <00000000>             .DATA.L     __$RcvDataSize
    00006ED4 <00000000>             .DATA.L     __$ImpExpRcvData
    00006ED8 <00000000>             .DATA.L     _memcpy
    00006EDC <00000000>             .DATA.L     _memset
             tskcmd.c       9242    }
             tskcmd.c       9243    
             tskcmd.c       9244    
             tskcmd.c       9245    
C   00000000              _DATCHK_TBL:                     ; static: DATCHK_TBL
    00000000 01                     .DATA.B     H'01
    00000001 00                     .DATAB.B    3,0
    00000004 0000000000             .DATA.L     H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000002,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,
             0100000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000002,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000005,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000004,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000002,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0001000000 +                       H'00000006,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000005,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000007,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000005,H'00000000,H'00000000,H'00000000,
             0000010000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000004,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000008,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000002,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000002,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000004,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000200 +                       H'00000000,H'00000000,H'00000000,H'00000000
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0200000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000050000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000400   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000002   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0600000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0005000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000070000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000300   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0500000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0004000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000080000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000200   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000002   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0400000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
    00000324 00                     .DATA.B     H'00
    00000325 00                     .DATAB.B    3,0
    00000328 0000000000             .DATA.L     H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000001 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000002,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,
             0100000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0200000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0003000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000030000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000300   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0300000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0003000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000030000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000300   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
    00000648 00                     .DATA.B     H'00
    00000649 00                     .DATAB.B    3,0
    0000064C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000654 00                     .DATAB.B    33756,0
    00008A30              __$TP_RID_SEND_FORM:             ; static: __$TP_RID_SEND_FORM
    00008A30 0000000D               .DATA.L     H'0000000D
    00008A34 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'49,H'44,H'20,H'26,H'48,H'2A,H'2A,H'03,H'30,H'30,H'0D
             4944202648   
             2A2A033030   
             0D           
    00008A44 00                     .DATAB.B    28,0
    00008A60              __$TP_RP1_SEND_FORM01:           ; static: __$TP_RP1_SEND_FORM01
    00008A60 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'31,H'20,H'30,H'03,H'30,H'30,H'0D
             5031203003   
             30300D       
    00008A6D              __$TP_RP1_SEND_FORM02:           ; static: __$TP_RP1_SEND_FORM02
    00008A6D 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'31,H'20,H'30,H'30,H'03,H'30,H'30,H'0D
             5031203030   
             0330300D     
    00008A7B              __$TP_RP1_SEND_FORM04:           ; static: __$TP_RP1_SEND_FORM04
    00008A7B 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'31,H'20,H'30,H'30,H'30,H'30,H'03,H'30,H'30,H'0D
             5031203030   
             3030033030   
             0D           
    00008A8B              __$TP_RP3_SEND_FORM:             ; static: __$TP_RP3_SEND_FORM
    00008A8B 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'33,H'20,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,
             5033202A2A +                       H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,
             2A2A2A2A2A +                       H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'03,H'30,H'30,H'0D
             2A2A2A2A2A   
             2A2A2A2A2A   
             2A2A2A2A2A   
             2A2A2A2A2A   
             2A2A2A2A2A   
             0330300D     
D   00000000              __$CmdFuncTbl:                   ; static: __$CmdFuncTbl
    00000000 <00000000>   
             <00000000>             .DATA.L     __$CmdVER,__$CmdDummy,__$CmdVER,__$CmdALLIN,__$CmdBIN,__$CmdBOUT,__$CmdCINIT,
             <00000000> +                       __$CmdCOUNT,__$CmdINT,__$CmdABSMV,__$CmdABORT,__$CmdENCODER,__$CmdLIMIT,__$CmdMAP,
             <00000000> +                       __$CmdPDELAY,__$CmdPOWER,__$CmdPSET,__$CmdRELMV,__$CmdSET,__$CmdSTATUS,__$CmdSTOP,
             <00000000> +                       __$CmdBZCNT,__$CmdEEPREAD,__$CmdEEPWRIT,__$CmdDummy,__$CmdDummy,__$CmdTmpSet,
             <00000000> +                       __$CmdTmpGet,__$CmdDummy,__$CmdVini,__$CmdPini,__$CmdPren,__$CmdPtan,__$CmdPcan,
             <00000000> +                       __$CmdVout,__$CmdPsns,__$CmdImpPdat,__$CmdImpSped,__$CmdImpPosi,__$CmdImpOptn,
             <00000000> +                       __$CmdExpRunl,__$CmdExpComl,__$CmdDummy,__$CmdDummy,__$CmdDummy
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
    000000B4              _TpFuncTbl:                      ; static: TpFuncTbl
    000000B4 <00000000>   
             <00000000>             .DATA.L     __$TplDummy,__$TplFwver,__$TplOptif,__$TplLgin1,__$TplLgin2,__$TplInita,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplUsral,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDummy,__$TplInf01,__$TplInf02,__$TplInf03,__$TplInf04,
             <00000000> +                       __$TplInf05,__$TplInf06,__$TplInf07,__$TplInf08,__$TplInf09,__$TplInf10,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplRec01,__$TplRec02,
             <00000000> +                       __$TplRec03,__$TplRec04,__$TplRec05,__$TplRec06,__$TplRec07,__$TplRec08,__$TplRec09,
             <00000000> +                       __$TplRec10,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplChg01,__$TplChg02,__$TplChg03,__$TplChg04,__$TplChg05,__$TplChg06,__$TplChg07,
             <00000000> +                       __$TplChg08,__$TplChg09,__$TplChg10,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDel01,__$TplDel02,__$TplDel03,__$TplDel04,__$TplDel05,
             <00000000> +                       __$TplDel06,__$TplDel07,__$TplDel08,__$TplDel09,__$TplDel10,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDummy,__$TplFwpol,__$TplPrtcl,__$TplResta,__$TplPause,
             <00000000> +                       __$TplResum,__$TplAbort,__$TplDummy,__$TplDummy,__$TplOptcd,__$TplSmbar,__$TplSmsgl,
             <00000000> +                       __$TplSmall,__$TplCllne,__$TplClqrc,__$TplClsgl,__$TplClall,__$TplLdlmp,__$TplUvlmp,
             <00000000> +                       __$TplPtlmp,__$TplPowof,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplExRun,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
C   00008AB7 00000001               .RES.B      1
    00008AB8              L1447:
    00008AB8 433A5C5573             .SDATA      "C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskcmd.c"
             6572735C53   
             65696A6959   
             616D617A61   
             6B695C446F   
             63756D656E   
             74735C5175   
             69636B6765   
             6E655C536F   
             66745F4669   
             726D5C5175   
             69636B4765   
             6E655F5072   
             6F6A656374   
             325C74736B   
             636D642E63   
    00008B08 00                     .DATA.B     H'00
    00008B09 00                     .DATAB.B    3,0
    00008B0C              L1489:
    00008B0C 25732C2530             .SDATA      "%s,%04X,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d"
             34582C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             3464         
    00008B54 00                     .DATA.B     H'00
    00008B55 00                     .DATAB.B    3,0
    00008B58              L1492:
    00008B58 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             3064         
    00008B87 00                     .DATA.B     H'00
    00008B88              L1493:
    00008B88 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
             2C2530642C   
             253064       
    00008BB3 00                     .DATA.B     H'00
    00008BB4              L1494:
    00008BB4 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
             2C253064     
    00008BDB 00                     .DATA.B     H'00
    00008BDC              L1495:
    00008BDC 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
    00008BFF 00                     .DATA.B     H'00
    00008C00              L1496:
    00008C00 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             64           
    00008C1F 00                     .DATA.B     H'00
    00008C20              L1497:
    00008C20 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             3064         
    00008C3B 00                     .DATA.B     H'00
    00008C3C              L1498:
    00008C3C 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             253064       
    00008C53 00                     .DATA.B     H'00
    00008C54              L1499:
    00008C54 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C253064     
    00008C67 00                     .DATA.B     H'00
    00008C68              L1500:
    00008C68 25732C2530             .SDATA      "%s,%04X,%0d,%0d"
             34582C2530   
             642C253064   
    00008C77 00                     .DATA.B     H'00
    00008C78              L1501:
    00008C78 25732C2530             .SDATA      "%s,%04X,%0d"
             34582C2530   
             64           
    00008C83 00                     .DATA.B     H'00
    00008C84              L1502:
    00008C84 25732C2530             .SDATA      "%s,%04X"
             3458         
    00008C8B 00                     .DATA.B     H'00
    00008C8C              L1503:
    00008C8C 2573                   .SDATA      "%s"
    00008C8E 00                     .DATA.B     H'00
    00008C8F 00                     .DATAB.B    1,0
    00008C90              L1504:
    00008C90 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008CBA 00                     .DATA.B     H'00
    00008CBB 00                     .DATAB.B    1,0
    00008CBC              L1505:
    00008CBC 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008CE1 00                     .DATA.B     H'00
    00008CE2 00                     .DATAB.B    2,0
    00008CE4              L1506:
    00008CE4 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008D04 00                     .DATA.B     H'00
    00008D05 00                     .DATAB.B    3,0
    00008D08              L1507:
    00008D08 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008D23 00                     .DATA.B     H'00
    00008D24              L1508:
    00008D24 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008D3A 00                     .DATA.B     H'00
    00008D3B 00                     .DATAB.B    1,0
    00008D3C              L1509:
    00008D3C 25732C2530             .SDATA      "%s,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             3458         
    00008D4D 00                     .DATA.B     H'00
    00008D4E 00                     .DATAB.B    2,0
    00008D50              L1510:
    00008D50 25732C2530             .SDATA      "%s,%04X,%04X"
             34582C2530   
             3458         
    00008D5C 00                     .DATA.B     H'00
    00008D5D 00                     .DATAB.B    3,0
    00008D60              L1511:
    00008D60 25732C2530             .SDATA      "%s,%0d,%0d"
             642C253064   
    00008D6A 00                     .DATA.B     H'00
    00008D6B 00                     .DATAB.B    1,0
    00008D6C              L1512:
    00008D6C 25732C2530             .SDATA      "%s,%0d"
             64           
    00008D72 00                     .DATA.B     H'00
    00008D73 00                     .DATAB.B    1,0
    00008D74              L1513:
    00008D74 25732C2530             .SDATA      "%s,%04X,%0d,%0u"
             34582C2530   
             642C253075   
    00008D83 00                     .DATA.B     H'00
    00008D84              L1514:
    00008D84 25732C2530             .SDATA      "%s,%04X,%s,%s"
             34582C2573   
             2C2573       
    00008D91 00                     .DATA.B     H'00
    00008D92 00                     .DATAB.B    2,0
    00008D94              L1515:
    00008D94 25732C2530             .SDATA      "%s,%04X,%s"
             34582C2573   
    00008D9E 00                     .DATA.B     H'00
    00008D9F 00                     .DATAB.B    1,0
    00008DA0              L1646:
    00008DA0 574E205250             .SDATA      "WN RP%0d &H%08X"
             2530642026   
             4825303858   
    00008DAF 00                     .DATA.B     H'00
    00008DB0              L1647:
    00008DB0 574E205250             .SDATA      "WN RP1 %02d"
             3120253032   
             64           
    00008DBB 00                     .DATA.B     H'00
    00008DBC              L1648:
    00008DBC 574E205250             .SDATA      "WN RP100 %s"
             3130302025   
             73           
    00008DC7 00                     .DATA.B     H'00
    00008DC8              L1650:
    00008DC8 574E205250             .SDATA      "WN RP1 %s"
             31202573     
    00008DD1 00                     .DATA.B     H'00
B   00000000              _MentePcSendbuf:                 ; static: MentePcSendbuf
    00000000 00000001               .RES.B      3400
    00000D48              __$stCtl:                        ; static: __$stCtl
    00000D48 00000004               .RES.L      71
    00000E64              __$RecvData:                     ; static: __$RecvData
    00000E64 00000001               .RES.B      60
    00000EA0              __$RecvArgs:                     ; static: __$RecvArgs
    00000EA0 00000004               .RES.L      100
    00001030              __$bufwk:                        ; static: __$bufwk
    00001030 00000001               .RES.B      60
    0000106C              __$eepb:                         ; static: __$eepb
    0000106C 00000004               .RES.L      32
    000010EC              __$RcvUserInfo:                  ; static: __$RcvUserInfo
    000010EC 00000001               .RES.B      12
    000010F8              __$DeviceStatus:                 ; static: __$DeviceStatus
    000010F8 00000004               .RES.L      2
    00001100              __$MnetStatus:                   ; static: __$MnetStatus
    00001100 00000004               .RES.L      1
    00001104              __$power:                        ; static: __$power
    00001104 00000001               .RES.B      16
    00001114              __$pProcAdr:                     ; static: __$pProcAdr
    00001114 00000004               .RES.L      1
    00001118              __$pProcDat:                     ; static: __$pProcDat
    00001118 00000004               .RES.L      1
    0000111C              __$bzcnt:                        ; static: __$bzcnt
    0000111C 00000001               .RES.B      4
    00001120              __$PauseStopFlg:                 ; static: __$PauseStopFlg
    00001120 00000001               .RES.B      1
    00001121 00000001               .RES.B      1
    00001122 00000002               .RES.W      1
    00001124              __$RcvDataSize:                  ; static: __$RcvDataSize
    00001124 00000004               .RES.L      1
    00001128              __$ExpRunlSeqno:                 ; static: __$ExpRunlSeqno
    00001128 00000001               .RES.B      1
    00001129              __$ExpRunlRetry:                 ; static: __$ExpRunlRetry
    00001129 00000001               .RES.B      1
    0000112A 00000002               .RES.W      1
    0000112C              __$tp:                           ; static: __$tp
    0000112C 00000004               .RES.L      71
    00001248              __$TpRecvData:                   ; static: __$TpRecvData
    00001248 00000001               .RES.B      60
    00001284              __$TpRecvArgs:                   ; static: __$TpRecvArgs
    00001284 00000004               .RES.L      100
    00001414              __$bcctrl:                       ; static: __$bcctrl
    00001414 00000001               .RES.B      152
    000014AC              __$BkP1:                         ; static: __$BkP1
    000014AC 00000001               .RES.B      128
    0000152C              __$Sp:                           ; static: __$Sp
    0000152C 00000004               .RES.L      120
    0000170C              __$SpPtn:                        ; static: __$SpPtn
    0000170C 00000001               .RES.B      68
    00001750              __$BkP7:                         ; static: __$BkP7
    00001750 00000004               .RES.L      32
    000017D0              __$BkP8:                         ; static: __$BkP8
    000017D0 00000004               .RES.L      32
    00001850              __$BkP9:                         ; static: __$BkP9
    00001850 00000004               .RES.L      32
    000018D0              __$BkP10:                        ; static: __$BkP10
    000018D0 00000001               .RES.B      128
    00001950              __$BkPrData:                     ; static: __$BkPrData
    00001950 00000001               .RES.B      80
    000019A0              __$BkPr:                         ; static: __$BkPr
    000019A0 00000004               .RES.L      400
    00001FE0              __$incuv:                        ; static: __$incuv
    00001FE0 00000004               .RES.L      4
    00001FF0              __$vout:                         ; static: __$vout
    00001FF0 00000002               .RES.W      2
    00001FF4              __$psns:                         ; static: __$psns
    00001FF4 00000002               .RES.W      173
    0000214E              __$psel:                         ; static: __$psel
    0000214E 00000001               .RES.B      4
    00002152              __$nzlsts:                       ; static: __$nzlsts
    00002152 00000002               .RES.W      1
    00002154              __$rspbuf2:                      ; static: __$rspbuf2
    00002154 00000001               .RES.B      128
    000021D4              __$psnsdat:                      ; static: __$psnsdat
    000021D4 00000001               .RES.B      128
    00002254              __$rspbuf:                       ; static: __$rspbuf
    00002254 00000001               .RES.B      60
    00002290              __$ImpExpRcvData:                ; static: __$ImpExpRcvData
    00002290 00000001               .RES.B      3400
    00002FD8              __$peekdat:                      ; static: __$peekdat
    00002FD8 00000004               .RES.L      1
    00002FDC              __$debug1_flg:                   ; static: __$debug1_flg
    00002FDC 00000004               .RES.L      1
    00002FE0              __$temp1:                        ; static: __$temp1
    00002FE0 00000001               .RES.B      1
    00002FE1              __$temp2:                        ; static: __$temp2
    00002FE1 00000001               .RES.B      1
    00002FE2 00000002               .RES.W      1
    00002FE4              __$lendbg:                       ; static: __$lendbg
    00002FE4 00000004               .RES.L      1
SH SERIES C/C++ Compiler (V.9.02.00.003)                                                         08-Sep-2023 13:46:34  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     9245



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 00006EE0 Byte(s)
CONSTANT SECTION (C):                                 00008DD2 Byte(s)
DATA     SECTION (D):                                 00000274 Byte(s)
BSS      SECTION (B):                                 00002FE8 Byte(s)

TOTAL PROGRAM  SECTION: 00006EE0 Byte(s)
TOTAL CONSTANT SECTION: 00008DD2 Byte(s)
TOTAL DATA     SECTION: 00000274 Byte(s)
TOTAL BSS      SECTION: 00002FE8 Byte(s)

    TOTAL PROGRAM SIZE: 00012F0E Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           60
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          27
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           781



*** COMMAND PARAMETER ***

-subcommand=C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskcmd.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-object="C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskcmd.obj"
-debug
-listfile="C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\Debug\tskcmd.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\Users\SeijiYamazaki\Documents\Quickgene\Soft_Firm\QuickGene_Project2\tskcmd.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
