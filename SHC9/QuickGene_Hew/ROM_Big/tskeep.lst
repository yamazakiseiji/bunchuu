SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:35  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskeep.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             tskeep.c          1    /******************************************************************************
             tskeep.c          2    * EEPROM制御タスク                                                            *
             tskeep.c          3    *                                                                             *
             tskeep.c          4    * File name : tskeep.c                                                        *
             tskeep.c          5    *                                                                             *
             tskeep.c          6    * Copyright (c) 2016 NICHIRYO Co., Ltd.                                       *
             tskeep.c          7    *                                                                             *
             tskeep.c          8    ******************************************************************************/
             tskeep.c          9    #include <kernel.h>
             tskeep.c         10    #include "define.h"
             tskeep.c         11    #include "datastruct.h"
             tskeep.c         12    #include "iodefine.h"
             tskeep.c         13    #include "spi.h"
             tskeep.c         14    #include "sub.h"
             tskeep.c         15    #include "tskeep.h"
             tskeep.c         16    #include "tblchr.h"
             tskeep.c         17    
             tskeep.c         18    
             tskeep.c         19    
             tskeep.c         20    
             tskeep.c         21    #define   SRAM_BASE_ADDRESS   0x0C000000  // Motionnetアドレス
             tskeep.c         22    #define EEP_DEF_DAT           0xff
             tskeep.c         23    #define EEPROM_PAGE_NUM     512
             tskeep.c         24    #define EEPSTART_ADRS     0x0000
             tskeep.c         25    
             tskeep.c         26    // EEPROM読込み済みか確認するためのBIT定数
             tskeep.c         27    #define EP_B_USER 0x00000001
             tskeep.c         28    #define EP_B_SPED 0x00000002
             tskeep.c         29    #define EP_B_POSI 0x00000004
             tskeep.c         30    #define EP_B_OPTI 0x00000008
             tskeep.c         31    #define EP_B_TITL 0x00000010
             tskeep.c         32    #define EP_B_0020 0x00000020
             tskeep.c         33    #define EP_B_0040 0x00000040
             tskeep.c         34    #define EP_B_0080 0x00000080
             tskeep.c         35    #define EP_B_0100 0x00000100
             tskeep.c         36    #define EP_B_0200 0x00000200
             tskeep.c         37    #define EP_B_0400 0x00000400
             tskeep.c         38    #define EP_B_0800 0x00000800
             tskeep.c         39    #define EP_B_PR01 0x00001000
             tskeep.c         40    #define EP_B_PR02 0x00002000
             tskeep.c         41    #define EP_B_PR03 0x00004000
             tskeep.c         42    #define EP_B_PR04 0x00008000
             tskeep.c         43    #define EP_B_PR05 0x00010000
             tskeep.c         44    #define EP_B_PR06 0x00020000
             tskeep.c         45    #define EP_B_PR07 0x00040000
             tskeep.c         46    #define EP_B_PR08 0x00080000
             tskeep.c         47    #define EP_B_PR09 0x00100000
             tskeep.c         48    #define EP_B_PR10 0x00200000
             tskeep.c         49    #define EP_B_PR11 0x00400000
             tskeep.c         50    #define EP_B_PR12 0x00800000
             tskeep.c         51    #define EP_B_PR13 0x01000000
             tskeep.c         52    #define EP_B_PR14 0x02000000
             tskeep.c         53    #define EP_B_PR15 0x04000000
             tskeep.c         54    #define EP_B_PR16 0x08000000
             tskeep.c         55    #define EP_B_PR17 0x10000000
             tskeep.c         56    #define EP_B_PR18 0x20000000
             tskeep.c         57    #define EP_B_PR19 0x40000000
             tskeep.c         58    #define EP_B_PR20 0x80000000
             tskeep.c         59    
             tskeep.c         60    
             tskeep.c         61    
             tskeep.c         62    
             tskeep.c         63    
             tskeep.c         64    
             tskeep.c         65    /*=================================================================================================
             tskeep.c         66      ローカル変数定義
             tskeep.c         67    =================================================================================================*/
             tskeep.c         68    
             tskeep.c         69    static tEEPBUF      eepbuf;                                       // 作業用バッファ
             tskeep.c         70    static T_MSG_DAT*   mrcv;                                     // メッセージデータ
             tskeep.c         71    static UB         dummy;
             tskeep.c         72    
             tskeep.c         73    static ST_PAGE0 Page0;
             tskeep.c         74    static ST_PAGE1 Page1;
             tskeep.c         75    static ST_PAGE2 Page2;//ST_SPEED  Y0[5];
             tskeep.c         76    static ST_PAGE3 Page3;//ST_SPEED  Z0[5];
             tskeep.c         77    static ST_PAGE4 Page4;//ST_SPEED  P0[5];
             tskeep.c         78    //static ST_PAGE5 Page5;//ST_SPEED    F0[5];
             tskeep.c         79    //static ST_PAGE6 Page6;//ST_SPEED    Y1[5];
             tskeep.c         80    static ST_PAGE7 Page7;
             tskeep.c         81    static ST_PAGE8 Page8;
             tskeep.c         82    static ST_PAGE9 Page9;
             tskeep.c         83    static ST_PAGE10 Page10;
             tskeep.c         84    
             tskeep.c         85    //typedef struct {
             tskeep.c         86    //    unsigned char Pno;  // プロトコル番号
             tskeep.c         87    //    unsigned char Cnt;  // トータルステップ数（ 1 〜 80 ）
             tskeep.c         88    //    unsigned char Prc;  // 工程有無
             tskeep.c         89    //    unsigned char Dmy;  // 
             tskeep.c         90    //} ST_PROTCOL_DATA;
             tskeep.c         91    static ST_PROTCOL_INFO  Prtinf; 
             tskeep.c         92    static ST_PROTCOL       Prtwk; 
             tskeep.c         93    static ST_USERINFO RcvUserInfo;
             tskeep.c         94    static UB writebufwk[128];
             tskeep.c         95    
             tskeep.c         96    
             tskeep.c         97    static int eepread_page;// bit0 = Page0 〜 bit11 = Page11、bit12 = プロトコル1〜bit31 =プロトコル20
             tskeep.c         98    
             tskeep.c         99    //                            123456789012345678901234567890
             tskeep.c        100    const char STRTBL_TEST[]  = {"DBGPROTCOL12345678901234567890"};
             tskeep.c        101    const char STRTBL_TEST2[] = {"DBGPROTCOL2"};
             tskeep.c        102    const char STRTBL_NASI[]  = {"-"};
             tskeep.c        103    
             tskeep.c        104    //    unsigned char Pno;  // プロトコル番号
             tskeep.c        105    //    unsigned char Cnt;  // トータルステップ数（ 1 〜 80 ）
             tskeep.c        106    //    unsigned char Prc;  // 工程有無
             tskeep.c        107    //    unsigned char Dmy;  // 
             tskeep.c        108    
             tskeep.c        109    const ST_PROTCOL_DATA TEST_DATA_TBL[20] = {
             tskeep.c        110      0x01,0x16,0x0f,0x00,// 01
             tskeep.c        111      0x02,0x16,0x0f,0x00,// 02
             tskeep.c        112      0x00,0x00,0x00,0x00,// 03
             tskeep.c        113      0x00,0x00,0x00,0x00,// 04
             tskeep.c        114      0x00,0x00,0x00,0x00,// 05
             tskeep.c        115      0x00,0x00,0x00,0x00,// 06
             tskeep.c        116      0x00,0x00,0x00,0x00,// 07
             tskeep.c        117      0x00,0x00,0x00,0x00,// 08
             tskeep.c        118      0x00,0x00,0x00,0x00,// 09
             tskeep.c        119      0x00,0x00,0x00,0x00,// 10
             tskeep.c        120      0x00,0x00,0x00,0x00,// 11
             tskeep.c        121      0x00,0x00,0x00,0x00,// 12
             tskeep.c        122      0x00,0x00,0x00,0x00,// 13
             tskeep.c        123      0x00,0x00,0x00,0x00,// 14
             tskeep.c        124      0x00,0x00,0x00,0x00,// 15
             tskeep.c        125      0x00,0x00,0x00,0x00,// 16
             tskeep.c        126      0x00,0x00,0x00,0x00,// 17
             tskeep.c        127      0x00,0x00,0x00,0x00,// 18
             tskeep.c        128      0x00,0x00,0x00,0x00,// 19
             tskeep.c        129      0x00,0x00,0x00,0x00 // 20
             tskeep.c        130    };
             tskeep.c        131    
             tskeep.c        132    //
             tskeep.c        133    // ★これはデバック用 ★
             tskeep.c        134    //
             tskeep.c        135    const ST_PROTCOL_STEP TEST_PROTCOL_TBL[80] = {
             tskeep.c        136    //                CMD     P2      P3      P4      P5      P6      P7      P8      P9      P10     P11     P12     P13         P14
             tskeep.c        137    /* チップ取得 */  0x21,   0x00,   0x00,   0x40,   0x01,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S00
             tskeep.c        138    /* チップ廃棄 */  0x22,   0x00,   0x00,   0x40,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S01
             tskeep.c        139    /* チップ取得 */  0x21,   0x00,   0x00,   0x80,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S02
             tskeep.c        140    /* チップ廃棄 */  0x22,   0x00,   0x00,   0x80,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x000001E0, 0x000001E0,// S03
             tskeep.c        141    /* チップ取得 */  0x21,   0x00,   0x00,   0xC0,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S04
             tskeep.c        142    /* チップ廃棄 */  0x22,   0x00,   0x00,   0xC0,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S05
             tskeep.c        143    /* 穴あけ     */  0x23,   0x00,   0x00,   0x0F,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S06
             tskeep.c        144    /* 穴あけ     */  0x23,   0x00,   0x00,   0x10,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S07
             tskeep.c        145    /* 穴あけ     */  0x23,   0x00,   0x00,   0x11,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x000002DA,// S08
             tskeep.c        146    /* 穴あけ     */  0x23,   0x00,   0x00,   0x12,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S09
             tskeep.c        147    /* 穴あけ     */  0x23,   0x00,   0x00,   0x13,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S10
             tskeep.c        148    /* 穴あけ     */  0x23,   0x00,   0x00,   0x14,   0x11,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S11
             tskeep.c        149    /* ウェイト   */  0x25,   0x00,   0x00,   0x01,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S12
             tskeep.c        150    /* 移動       */  0x2D,   0x00,   0x00,   0x0D,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x000001F4, 0x000001F4,// S13
             tskeep.c        151    /* 攪拌       */  0x26,   0x00,   0x01,   0x41,   0x11,   0x11,   0x35,   0x36,   0x00,   0x00,   0x00,   0x00,   0x000001F4, 0x000001F4,// S14
             tskeep.c        152    /* 攪拌       */  0x26,   0x00,   0x02,   0x82,   0x11,   0x11,   0x35,   0x36,   0x00,   0x00,   0x00,   0x00,   0x000001F4, 0x000001F4,// S15
             tskeep.c        153    /* 攪拌       */  0x26,   0x00,   0x03,   0xC3,   0x11,   0x11,   0x35,   0x36,   0x00,   0x00,   0x00,   0x00,   0x000001F4, 0x000001F4,// S16
             tskeep.c        154    /* 吸引       */  0x27,   0x00,   0x01,   0x10,   0x00,   0x11,   0x21,   0x26,   0x00,   0x00,   0x00,   0x00,   0x000001F4, 0x00000000,// S17
             tskeep.c        155    /* 吐出       */  0x28,   0x00,   0x01,   0x00,   0x14,   0x00,   0x00,   0x00,   0x11,   0x2B,   0x30,   0x00,   0x00000000, 0x000001F4,// S18
             tskeep.c        156    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S19
             tskeep.c        157    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S20
             tskeep.c        158    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S21
             tskeep.c        159    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S22
             tskeep.c        160    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S23
             tskeep.c        161    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S24
             tskeep.c        162    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S25
             tskeep.c        163    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S26
             tskeep.c        164    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S27
             tskeep.c        165    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S28
             tskeep.c        166    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S29
             tskeep.c        167    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S30
             tskeep.c        168    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S31
             tskeep.c        169    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S32
             tskeep.c        170    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S33
             tskeep.c        171    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S34
             tskeep.c        172    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S35
             tskeep.c        173    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S36
             tskeep.c        174    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S37
             tskeep.c        175    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S38
             tskeep.c        176    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S39
             tskeep.c        177    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S40
             tskeep.c        178    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S41
             tskeep.c        179    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S42
             tskeep.c        180    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S43
             tskeep.c        181    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S44
             tskeep.c        182    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S45
             tskeep.c        183    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S46
             tskeep.c        184    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S47
             tskeep.c        185    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S48
             tskeep.c        186    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S49
             tskeep.c        187    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S50
             tskeep.c        188    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S51
             tskeep.c        189    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S52
             tskeep.c        190    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S53
             tskeep.c        191    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S54
             tskeep.c        192    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S55
             tskeep.c        193    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S56
             tskeep.c        194    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S57
             tskeep.c        195    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S58
             tskeep.c        196    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S59
             tskeep.c        197    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S60
             tskeep.c        198    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S61
             tskeep.c        199    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S62
             tskeep.c        200    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S63
             tskeep.c        201    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S64
             tskeep.c        202    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S65
             tskeep.c        203    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S66
             tskeep.c        204    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S67
             tskeep.c        205    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S68
             tskeep.c        206    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S69
             tskeep.c        207    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S70
             tskeep.c        208    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S71
             tskeep.c        209    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S72
             tskeep.c        210    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S73
             tskeep.c        211    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S74
             tskeep.c        212    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S75
             tskeep.c        213    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S76
             tskeep.c        214    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S77
             tskeep.c        215    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000,// S78
             tskeep.c        216    /*            */  0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00,   0x00000000, 0x00000000 // S79
             tskeep.c        217    };
             tskeep.c        218    
             tskeep.c        219    
             tskeep.c        220    /*=================================================================================================
             tskeep.c        221      ローカル関数プロトタイプ宣言
             tskeep.c        222    =================================================================================================*/
             tskeep.c        223    static ER      write_enable( INT ssl );                           // 書き込み許可
             tskeep.c        224    static ER      write_disable( INT ssl );                      // 書き込み禁止
             tskeep.c        225    static ER      busy_wait( INT ssl );                          // ビジー待ち
             tskeep.c        226    static ER      init_page( INT ssl, INT pno );                 // ページの初期化
             tskeep.c        227    static ER      write_bytes( UH adr, B* buff, INT len );           // データの書き込み
             tskeep.c        228    static ER      read_bytes( UH adr, B* buff, INT size );           // データの読込み
             tskeep.c        229    static ER      write_page( INT pno, B* buff, INT len );       // データの書き込み
             tskeep.c        230    static ER      read_page( INT pno, B* buff, INT size );           // データの読込み
             tskeep.c        231    static ER      read_status( INT ssl, B* sts );                    // ステータス読込み
             tskeep.c        232    static ER      write_status( INT ssl, B status );             // ステータス書き込み
             tskeep.c        233    static void    read_eeprom_1byte( INT addr, B* data );            // EEPROM 1byteリード
             tskeep.c        234    static void    EepProc(T_CMD_MSG* mrcv);                      // EEPROM制御処理
             tskeep.c        235    static void    CmdRcvMsg( T_CMD_MSG* mrcv );                  // 実行タスクからのメッセージ処理
             tskeep.c        236    static UB      UserInfoCheck();
             tskeep.c        237    
             tskeep.c        238    void eeprom_init( void );
             tskeep.c        239    void etc_memset( B* buff, INT bufsiz, B chr );
             tskeep.c        240    static void TestRead(INT pno);
             tskeep.c        241    static void TestWrite(INT pno);
             tskeep.c        242    
             tskeep.c        243    void EepBitSet( int dat );
             tskeep.c        244    void EepBitClr( int dat );
             tskeep.c        245    BOOL EepBitGet( int dat );
             tskeep.c        246    void EepBitAllClr();
             tskeep.c        247    static ER write_byte_len( INT pno, B* buff, INT len );
             tskeep.c        248    void Rcvset_spddat( const char* str );
             tskeep.c        249    //void Rcvset_spdptn( const char* str );
             tskeep.c        250    
             tskeep.c        251    /******************************************************************************
             tskeep.c        252    * 
             tskeep.c        253    * [概要]  EEPROM管理タスク
             tskeep.c        254    *             EEPROMデータ取得及び書き込みの管理を行う。
             tskeep.c        255    * [引数]  −
             tskeep.c        256    * [戻り値]    −
             tskeep.c        257    * 
             tskeep.c        258    ******************************************************************************/
             tskeep.c        259    TASK TskEep( void )
P   00000000              _TskEep:                         ; function: TskEep
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
             tskeep.c        260    {
             tskeep.c        261        T_CMD_MSG*  msg;
             tskeep.c        262        ER          err;
             tskeep.c        263    
             tskeep.c        264      //SPIデータ初期化
             tskeep.c        265      spi_init();
    00000002 D27F                   MOV.L       L137+2,R2  ; _spi_init
    00000004 424B                   JSR/N       @R2
             tskeep.c        266    
             tskeep.c        267      //EEPROMタスク内データ初期化
             tskeep.c        268      eeprom_init();
    00000006 B013                   BSR         _eeprom_init
    00000008 ED4E                   MOV         #78,R13    ; H'0000004E
    0000000A 4D08                   SHLL2       R13
    0000000C DE7D                   MOV.L       L137+6,R14 ; _v4_trcv_mbx
    0000000E DB7E                   MOV.L       L137+10,R11; L147
    00000010 DC7E                   MOV.L       L137+14,R12; _api_rel_mpf
    00000012              L11:
             tskeep.c        269    
             tskeep.c        270    
             tskeep.c        271    //--------------------
             tskeep.c        272    //    TestWrite(0);   
             tskeep.c        273    //    TestWrite(1);   
             tskeep.c        274    //    TestWrite(2);   
             tskeep.c        275    //    TestWrite(3);   
             tskeep.c        276    //    TestWrite(4);   
             tskeep.c        277    //    TestWrite(5);   
             tskeep.c        278    //    TestWrite(6);   
             tskeep.c        279    //    TestWrite(7);   
             tskeep.c        280    //    TestWrite(8);   
             tskeep.c        281    //    TestWrite(9);   
             tskeep.c        282    //    TestWrite(10);  
             tskeep.c        283    //    TestWrite(90);  
             tskeep.c        284    //    TestWrite(100); 
             tskeep.c        285    //    TestWrite(120); 
             tskeep.c        286    
             tskeep.c        287    //    TestRead(0);
             tskeep.c        288    //    TestRead(1);
             tskeep.c        289    //    TestRead(2);
             tskeep.c        290    //    TestRead(3);
             tskeep.c        291    //    TestRead(4);
             tskeep.c        292    //    TestRead(5);
             tskeep.c        293    //    TestRead(6);
             tskeep.c        294    //    TestRead(7);
             tskeep.c        295    //    TestRead(8);
             tskeep.c        296    //    TestRead(9);
             tskeep.c        297    //    TestRead(10);
             tskeep.c        298    //    TestRead(90);
             tskeep.c        299    //    TestRead(100);
             tskeep.c        300    //    TestRead(120);
             tskeep.c        301    //    TestRead(480);
             tskeep.c        302    //--------------------
             tskeep.c        303      
             tskeep.c        304        for( ;; )
             tskeep.c        305        {
             tskeep.c        306            // コマンド待ち
             tskeep.c        307          err = rcv_mbx( ID_MBX_EEP, (T_MSG**)&msg );
    00000012 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00000014 E406                   MOV         #6,R4      ; H'00000006
    00000016 4E0B                   JSR         @R14
    00000018 65F3                   MOV         R15,R5
             tskeep.c        308          if( E_OK != err )       continue;
    0000001A 2008                   TST         R0,R0
    0000001C 8BF9                   BF          L11
             tskeep.c        309    
             tskeep.c        310          EepProc(msg);
    0000001E B00F                   BSR         __$EepProc
    00000020 64F2                   MOV.L       @R15,R4    ; msg
    00000022 67F2                   MOV.L       @R15,R7    ; msg
             tskeep.c        311    
             tskeep.c        312          RelMpf( ID_MPF_EEP, (VP)msg );// メモリ解放
    00000024 E605                   MOV         #5,R6      ; H'00000005
    00000026 64B3                   MOV         R11,R4
    00000028 4C0B                   JSR         @R12
    0000002A 65D3                   MOV         R13,R5
    0000002C AFF1                   BRA         L11
    0000002E 0009                   NOP
             tskeep.c        313    
             tskeep.c        314        }
             tskeep.c        315    }
             tskeep.c        316    /******************************************************************************
             tskeep.c        317    * 
             tskeep.c        318    * [概要]  EEPROM管理タスク初期化
             tskeep.c        319    *             EEPROMデータ取得及び書き込みの管理を行う。
             tskeep.c        320    * [引数]  −
             tskeep.c        321    * [戻り値]    −
             tskeep.c        322    * 
             tskeep.c        323    ******************************************************************************/
             tskeep.c        324    void eeprom_init( void )
    00000030              _eeprom_init:                    ; function: eeprom_init
                                                           ; frame size=4
    00000030 4F22                   STS.L       PR,@-R15
    00000032 E580                   MOV         #-128,R5   ; H'FFFFFF80
    00000034 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
             tskeep.c        325    {
             tskeep.c        326        etc_memset( eepbuf.format.data, sizeof( eepbuf.format.data ), 0xFF );
    00000036 D476                   MOV.L       L137+18,R4 ; H'00000003+__$eepbuf
    00000038 B2EE                   BSR         _etc_memset
    0000003A 655C                   EXTU.B      R5,R5
             tskeep.c        327    //    memset( &eepbuf.format.data, NO_DATA, sizeof( eepbuf.format.data ) );
             tskeep.c        328      
             tskeep.c        329      EepBitAllClr();
    0000003C A37F                   BRA         _EepBitAllClr
    0000003E 4F26                   LDS.L       @R15+,PR
             tskeep.c        330    }
             tskeep.c        331    
             tskeep.c        332    /******************************************************************************
             tskeep.c        333    * 
             tskeep.c        334    * [概要]  EEPROM処理
             tskeep.c        335    * [引数]  −
             tskeep.c        336    * [戻り値]    −
             tskeep.c        337    * 
             tskeep.c        338    ******************************************************************************/
             tskeep.c        339    static void EepProc(T_CMD_MSG* mrcv)
    00000040              __$EepProc:                      ; function: __$EepProc
                                                           ; frame size=0
             tskeep.c        340    {
             tskeep.c        341      switch( mrcv->msgdata.tskid )
    00000040 5045                   MOV.L       @(20,R4),R0; (mrcv)->tskid
    00000042 8805                   CMP/EQ      #5,R0
    00000044 8B01                   BF          L22
             tskeep.c        342      {
             tskeep.c        343      case ID_TSK_RXEX:
             tskeep.c        344          break;
             tskeep.c        345      case ID_TSK_TXEX:
             tskeep.c        346          break;
             tskeep.c        347      case ID_TSK_CMD:
             tskeep.c        348          CmdRcvMsg(mrcv);
    00000046 A001                   BRA         __$CmdRcvMsg
    00000048 0009                   NOP
    0000004A              L22:
    0000004A 006B                   RTS/N
             tskeep.c        349          break;
             tskeep.c        350      }
             tskeep.c        351    }
             tskeep.c        352    
             tskeep.c        353    static    int staadr_a;
             tskeep.c        354    static    int page_a;
             tskeep.c        355    static    int pageadr_a;
             tskeep.c        356    static    B *pnter_a;
             tskeep.c        357    static    int staadr_k;
             tskeep.c        358    static    int page_k;
             tskeep.c        359    static    int pageadr_k;
             tskeep.c        360    static    B *pnter_k;
             tskeep.c        361    static    int test_step;
             tskeep.c        362    static    int debug_flg;
             tskeep.c        363    
             tskeep.c        364    static void TestRead(INT pno)
             tskeep.c        365    {
             tskeep.c        366      int staadr=0;
             tskeep.c        367      int page=0;
             tskeep.c        368      int pageadr;
             tskeep.c        369      B *pnter;
             tskeep.c        370      int pagecnt;
             tskeep.c        371    
             tskeep.c        372    
             tskeep.c        373      pageadr = pno * 0x80;
             tskeep.c        374    
             tskeep.c        375      switch( pno )
             tskeep.c        376      {
             tskeep.c        377      case 0:// - PAGE0 ----------------
             tskeep.c        378    
             tskeep.c        379          memset( &Page0.prot.sts, CLR, sizeof( Page0 ) );
             tskeep.c        380    
             tskeep.c        381    // 8byte  109msec
             tskeep.c        382          debug_flg = 1;
             tskeep.c        383          read_bytes( pageadr, (B*)&Page0.prot.sts, 8 );
             tskeep.c        384          memcpy( &Page0.prot.sts, eepbuf.format.data, 8 );
             tskeep.c        385          debug_flg = 2;
             tskeep.c        386    
             tskeep.c        387    // 1page  1347msec
             tskeep.c        388    //        memset( &Page0.prot.sts, CLR, sizeof( Page0 ) );
             tskeep.c        389    //        debug_flg = 3;
             tskeep.c        390    //        eeprom_read(pageadr, &Page0.prot.sts, 0x80);
             tskeep.c        391    //        debug_flg = 4;
             tskeep.c        392          break;
             tskeep.c        393      case 1:
             tskeep.c        394          memset( &Page1.User[0].Id[0], CLR, sizeof( Page1 ) );
             tskeep.c        395          eeprom_read(pageadr, &Page1.User[0].Id[0], 0x80);
             tskeep.c        396          break;
             tskeep.c        397      case 2://速度
             tskeep.c        398          memset( &Page2.Y0[0].ac, CLR, sizeof( Page2 ) );
             tskeep.c        399          eeprom_read(pageadr, &Page2.Y0[0].ac, 0x80);
             tskeep.c        400          break;
             tskeep.c        401      case 3://速度
             tskeep.c        402          memset( &Page3.P0[0].ac, CLR, sizeof( Page3 ) );
             tskeep.c        403          eeprom_read(pageadr, &Page3.P0[0].ac, 0x80);
             tskeep.c        404          break;
             tskeep.c        405      case 4://速度
             tskeep.c        406          memset( &Page4.Y1[0].ac, CLR, sizeof( Page4 ) );
             tskeep.c        407          eeprom_read(pageadr, &Page4.Y1[0].ac, 0x80);
             tskeep.c        408          break;
             tskeep.c        409    
             tskeep.c        410      case 7:
             tskeep.c        411          memset( &Page7.Y0_Offset, CLR, sizeof( Page7 ) );
             tskeep.c        412          eeprom_read(pageadr, &Page7.Y0_Offset, 0x80);
             tskeep.c        413          break;
             tskeep.c        414      case 8:
             tskeep.c        415          memset( &Page8.Z0_SucStaHei1, CLR, sizeof( Page8 ) );
             tskeep.c        416          eeprom_read(pageadr, &Page8.Z0_SucStaHei1, 0x80);
             tskeep.c        417          break;
             tskeep.c        418      case 9:
             tskeep.c        419          memset( &Page9.Hosei[0].HS_VL1, CLR, sizeof( Page9 ) );
             tskeep.c        420          eeprom_read(pageadr, &Page9.Hosei[0].HS_VL1, 0x80);
             tskeep.c        421          break;
             tskeep.c        422    
             tskeep.c        423      case 10:
             tskeep.c        424          memset( &Page10.Login, CLR, sizeof( Page10 ) );
             tskeep.c        425          eeprom_read(pageadr, &Page10.Login, 0x80);
             tskeep.c        426          break;
             tskeep.c        427          
             tskeep.c        428      case 90:
             tskeep.c        429          memset( &Prtinf.Dat[0].Cnt, CLR, (4*20) );
             tskeep.c        430          
             tskeep.c        431          pnter = (B* )&Prtinf.Dat[0].Cnt;
             tskeep.c        432          eeprom_read( (pageadr + ( page * 0x80 )), pnter, 0x80 );
             tskeep.c        433          pnter += 0x80 ;
             tskeep.c        434          break;
             tskeep.c        435    #if 0
             tskeep.c        436      case 100:
             tskeep.c        437          memset( &Prtwk.step[0].StCmd, CLR, sizeof( ST_PROTCOL ) );
             tskeep.c        438          pnter_a = (B* )&Prtwk.step[0].StCmd;
             tskeep.c        439    
             tskeep.c        440          eeprom_read( ( 100 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        441          eeprom_read( ( 101 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        442          eeprom_read( ( 102 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        443          eeprom_read( ( 103 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        444          eeprom_read( ( 104 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        445          eeprom_read( ( 105 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        446          eeprom_read( ( 106 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        447          eeprom_read( ( 107 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        448          eeprom_read( ( 108 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        449          eeprom_read( ( 109 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        450          eeprom_read( ( 110 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        451          eeprom_read( ( 111 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        452          eeprom_read( ( 112 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        453          eeprom_read( ( 113 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        454          eeprom_read( ( 114 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        455          eeprom_read( ( 115 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        456          eeprom_read( ( 116 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        457          eeprom_read( ( 117 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        458          eeprom_read( ( 118 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        459          eeprom_read( ( 119 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        460          break;
             tskeep.c        461      case 120:
             tskeep.c        462          memset( &Prtwk.step[0].StCmd, CLR, sizeof( ST_PROTCOL ) );
             tskeep.c        463          pnter_a = (B* )&Prtwk.step[0].StCmd;
             tskeep.c        464          
             tskeep.c        465          eeprom_read( ( 120 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        466          eeprom_read( ( 121 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        467          eeprom_read( ( 122 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        468          eeprom_read( ( 123 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        469          eeprom_read( ( 124 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        470          eeprom_read( ( 125 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        471          eeprom_read( ( 126 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        472          eeprom_read( ( 127 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        473          eeprom_read( ( 128 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        474          eeprom_read( ( 129 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        475          eeprom_read( ( 130 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        476          eeprom_read( ( 131 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        477          eeprom_read( ( 132 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        478          eeprom_read( ( 133 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        479          eeprom_read( ( 134 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        480          eeprom_read( ( 135 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        481          eeprom_read( ( 136 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        482          eeprom_read( ( 137 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        483          eeprom_read( ( 138 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        484          eeprom_read( ( 139 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        485          break;
             tskeep.c        486    #endif
             tskeep.c        487      case 100:
             tskeep.c        488      case 120:
             tskeep.c        489      case 140:
             tskeep.c        490      case 160:
             tskeep.c        491      case 180:
             tskeep.c        492      case 200:
             tskeep.c        493      case 220:
             tskeep.c        494      case 240:
             tskeep.c        495      case 260:
             tskeep.c        496          
             tskeep.c        497          memset( &Prtwk.step[0].StCmd, CLR, sizeof( ST_PROTCOL ) );
             tskeep.c        498          pnter_a = (B* )&Prtwk.step[0].StCmd;
             tskeep.c        499          
             tskeep.c        500          eeprom_read( ( (pno+0) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        501          eeprom_read( ( (pno+1) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        502          eeprom_read( ( (pno+2) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        503          eeprom_read( ( (pno+3) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        504          eeprom_read( ( (pno+4) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        505          eeprom_read( ( (pno+5) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        506          eeprom_read( ( (pno+6) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        507          eeprom_read( ( (pno+7) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        508          eeprom_read( ( (pno+8) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        509          eeprom_read( ( (pno+9) * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c        510          eeprom_read( ( (pno+10) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        511          eeprom_read( ( (pno+11) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        512          eeprom_read( ( (pno+12) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        513          eeprom_read( ( (pno+13) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        514          eeprom_read( ( (pno+14) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        515          eeprom_read( ( (pno+15) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        516          eeprom_read( ( (pno+16) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        517          eeprom_read( ( (pno+17) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        518          eeprom_read( ( (pno+18) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        519          eeprom_read( ( (pno+19) * 0x80 ), pnter_a, 0x80 );  pnter_a += 0x80 ;
             tskeep.c        520          break;
             tskeep.c        521          
             tskeep.c        522          
             tskeep.c        523          
             tskeep.c        524          
             tskeep.c        525      case 480:
             tskeep.c        526          break;
             tskeep.c        527      }
             tskeep.c        528    
             tskeep.c        529    }
             tskeep.c        530    
             tskeep.c        531    static void TestWrite(INT pno)
             tskeep.c        532    {
             tskeep.c        533      int staadr=0;
             tskeep.c        534      int page=0;
             tskeep.c        535      int loop=0;
             tskeep.c        536      int pageadr;
             tskeep.c        537      B *pnter;
             tskeep.c        538    
             tskeep.c        539      memset( &Page0, CLR, sizeof( Page0 ) );
             tskeep.c        540      memset( &Page1, CLR, sizeof( Page1 ) );
             tskeep.c        541      memset( &Page2, CLR, sizeof( Page2 ) );
             tskeep.c        542      memset( &Page3, CLR, sizeof( Page3 ) );
             tskeep.c        543      memset( &Page4, CLR, sizeof( Page4 ) );
             tskeep.c        544      memset( &Page8, CLR, sizeof( Page8 ) );
             tskeep.c        545      memset( &Page9, CLR, sizeof( Page9 ) );
             tskeep.c        546      memset( &Page10, CLR, sizeof( Page10 ) );
             tskeep.c        547    
             tskeep.c        548      
             tskeep.c        549      switch( pno )
             tskeep.c        550      {
             tskeep.c        551      case 0:// - PAGE0 ----------------
             tskeep.c        552          // 8byte 139msec
             tskeep.c        553          Page0.prot.sts  = E_TIP_DPFALL; // 状態
             tskeep.c        554          Page0.prot.no   = 1;            // プロトコル番号
             tskeep.c        555          Page0.prot.step = 4;            // 処理ステップ
             tskeep.c        556          Page0.prot.proc = PROCESS_LYSI; // 工程
             tskeep.c        557          write_byte_len( EEPROM_PAGE0_ADR , (B*)&Page0.prot.sts, 8 );
             tskeep.c        558    debug_flg = 1;
             tskeep.c        559    
             tskeep.c        560    //        // 128byte 1346msec
             tskeep.c        561    //        Page0.prot.sts  = E_TIP_NTHING; // 状態
             tskeep.c        562    //        Page0.prot.no   = 2;            // プロトコル番号
             tskeep.c        563    //        Page0.prot.step = 5;            // 処理ステップ
             tskeep.c        564    //        Page0.prot.proc = PROCESS_BILD; // 工程
             tskeep.c        565    //        eeprom_write( EEPROM_PAGE0_ADR , &Page0.prot.sts, 0x80 );
             tskeep.c        566    //        debug_flg = 3;
             tskeep.c        567          break;
             tskeep.c        568    
             tskeep.c        569      case 1:// - PAGE1 ----------------
             tskeep.c        570          Page1.User[0].Id[0] = 0x61;
             tskeep.c        571          Page1.User[0].Id[1] = 0x64;
             tskeep.c        572          Page1.User[0].Id[2] = 0x6d;
             tskeep.c        573          Page1.User[0].Id[3] = 0x69;
             tskeep.c        574          Page1.User[0].Id[4] = 0x6e;
             tskeep.c        575          Page1.User[0].Pw[0] = 0x31;
             tskeep.c        576          Page1.User[0].Pw[1] = 0x32;
             tskeep.c        577          Page1.User[0].Pw[2] = 0x33;
             tskeep.c        578          Page1.User[0].Pw[3] = 0x34;
             tskeep.c        579          
             tskeep.c        580          Page1.User[1].Id[0] = 0x75;
             tskeep.c        581          Page1.User[1].Id[1] = 0x73;
             tskeep.c        582          Page1.User[1].Id[2] = 0x65;
             tskeep.c        583          Page1.User[1].Id[3] = 0x72;
             tskeep.c        584          Page1.User[1].Id[4] = 0x31;
             tskeep.c        585          Page1.User[1].Pw[0] = 0x31;
             tskeep.c        586          Page1.User[1].Pw[1] = 0x32;
             tskeep.c        587          Page1.User[1].Pw[2] = 0x33;
             tskeep.c        588          Page1.User[1].Pw[3] = 0x34;
             tskeep.c        589    
             tskeep.c        590          Page1.User[9].Id[0] = 0x75;
             tskeep.c        591          Page1.User[9].Id[1] = 0x73;
             tskeep.c        592          Page1.User[9].Id[2] = 0x65;
             tskeep.c        593          Page1.User[9].Id[3] = 0x72;
             tskeep.c        594          Page1.User[9].Id[4] = 0x39;
             tskeep.c        595          Page1.User[9].Pw[0] = 0x31;
             tskeep.c        596          Page1.User[9].Pw[1] = 0x32;
             tskeep.c        597          Page1.User[9].Pw[2] = 0x33;
             tskeep.c        598          Page1.User[9].Pw[3] = 0x34;
             tskeep.c        599          eeprom_write( ( 1 * 0x80) , &Page1.User[0].Id[0], 0x80 );
             tskeep.c        600          break;
             tskeep.c        601    
             tskeep.c        602      case 2:// - PAGE2 ----------------
             tskeep.c        603          for( loop = 0; loop < 5; loop++ )
             tskeep.c        604          {
             tskeep.c        605              Page2.Y0[loop].ac = 1;
             tskeep.c        606              Page2.Y0[loop].gl = 500;
             tskeep.c        607              Page2.Y0[loop].fl = 300;
             tskeep.c        608              Page2.Y0[loop].fh = 1000;
             tskeep.c        609    
             tskeep.c        610              Page2.Z0[loop].ac = 1;
             tskeep.c        611              Page2.Z0[loop].gl = 500;
             tskeep.c        612              Page2.Z0[loop].fl = 300;
             tskeep.c        613              Page2.Z0[loop].fh = 1000;
             tskeep.c        614    
             tskeep.c        615          }
             tskeep.c        616          eeprom_write( ( 2 * 0x80) , &Page2.Y0[0].ac, 0x80 );
             tskeep.c        617          break;
             tskeep.c        618    
             tskeep.c        619      case 3:// - PAGE3 ----------------
             tskeep.c        620          for( loop = 0; loop < 5; loop++ )
             tskeep.c        621          {
             tskeep.c        622              Page3.P0[loop].ac = 1;
             tskeep.c        623              Page3.P0[loop].gl = 500;
             tskeep.c        624              Page3.P0[loop].fl = 300;
             tskeep.c        625              Page3.P0[loop].fh = 1000;
             tskeep.c        626    
             tskeep.c        627              Page3.F0[loop].ac = 1;
             tskeep.c        628              Page3.F0[loop].gl = 500;
             tskeep.c        629              Page3.F0[loop].fl = 300;
             tskeep.c        630              Page3.F0[loop].fh = 1000;
             tskeep.c        631          }
             tskeep.c        632          eeprom_write( ( 3 * 0x80) , &Page3.P0[0].ac, 0x80 );
             tskeep.c        633          break;
             tskeep.c        634      
             tskeep.c        635      case 4:// - PAGE4 ----------------
             tskeep.c        636          for( loop = 0; loop < 5; loop++ )
             tskeep.c        637          {
             tskeep.c        638              Page4.Y1[loop].ac = 1;
             tskeep.c        639              Page4.Y1[loop].gl = 500;
             tskeep.c        640              Page4.Y1[loop].fl = 300;
             tskeep.c        641              Page4.Y1[loop].fh = 1000;
             tskeep.c        642          }
             tskeep.c        643          Page4.SpPtn.Y0_SpdIniPtn       = 1;
             tskeep.c        644          Page4.SpPtn.Z0_SpdIniPtn       = 1;
             tskeep.c        645          Page4.SpPtn.P0_SpdIniPtn       = 1;
             tskeep.c        646          Page4.SpPtn.Y1_SpdIniPtn       = 1;
             tskeep.c        647          Page4.SpPtn.F0_SpdIniPtn       = 1;
             tskeep.c        648          Page4.SpPtn.Y0_SpdNmlPtn       = 2;
             tskeep.c        649          Page4.SpPtn.Z0_SpdNmlPtn       = 2;
             tskeep.c        650          Page4.SpPtn.P0_SpdNmlPtn       = 2;
             tskeep.c        651          Page4.SpPtn.Y1_SpdNmlPtn       = 2;
             tskeep.c        652          Page4.SpPtn.F0_SpdNmlPtn       = 2;
             tskeep.c        653          Page4.SpPtn.P0_SpdMovAirS      = 3;
             tskeep.c        654          Page4.SpPtn.P0_SpdMovAirP      = 3;
             tskeep.c        655          Page4.SpPtn.Z0_SpdTipGetDownE  = 3;
             tskeep.c        656          Page4.SpPtn.Z0_SpdTipGetDown1  = 3;
             tskeep.c        657          Page4.SpPtn.Z0_SpdTipDelDownE  = 3;
             tskeep.c        658          Page4.SpPtn.Z0_SpdTipDelDown1  = 3;
             tskeep.c        659          Page4.SpPtn.Z0_SpdTipDownE     = 3;
             tskeep.c        660          Page4.SpPtn.Z0_SpdTipDown1     = 3;
             tskeep.c        661          Page4.SpPtn.Y0_SpdSucMov       = 3;
             tskeep.c        662          Page4.SpPtn.Y0_SpdPutMov       = 3;
             tskeep.c        663          Page4.SpPtn.Z0_SpdPutDown      = 3;
             tskeep.c        664          Page4.SpPtn.Z0_SpdSucDown      = 3;
             tskeep.c        665          Page4.SpPtn.P0_SpdPut          = 3;
             tskeep.c        666          Page4.SpPtn.P0_SpdSuc          = 3;
             tskeep.c        667          Page4.SpPtn.P0_SpdTipDel       = 3;
             tskeep.c        668          
             tskeep.c        669          eeprom_write( ( 4 * 0x80) , &Page4.Y1[0].ac, 0x80 );
             tskeep.c        670          break;
             tskeep.c        671    
             tskeep.c        672      case 5:// - PAGE5 ----------------
             tskeep.c        673          break;
             tskeep.c        674    
             tskeep.c        675      case 6:// - PAGE6 ----------------
             tskeep.c        676          break;
             tskeep.c        677    
             tskeep.c        678      case 7:// - PAGE7 ----------------      
             tskeep.c        679          Page7.Y0_Offset     = 20    ; // [Y0] 仮想原点オフセット値               ポジション番号１
             tskeep.c        680          Page7.Z0_Offset     = 20    ; // [Z0] 仮想原点オフセット値               ポジション番号２
             tskeep.c        681          Page7.P0_Offset     = 20    ; // [P0] 仮想原点オフセット値               ポジション番号３
             tskeep.c        682          Page7.F0_Offset     = 20    ; // [F0] 仮想原点オフセット値               ポジション番号４
             tskeep.c        683          Page7.Y1_Offset     = 20    ; // [Y1] 仮想原点オフセット値               ポジション番号５
             tskeep.c        684          Page7.Y0_Taihi      = 100   ; // [Y0] 退避位置                           ポジション番号６
             tskeep.c        685          Page7.Z0_Taihi      = 100   ; // [Z0] 退避位置                           ポジション番号７
             tskeep.c        686          Page7.P0_Taihi      = 100   ; // [P0] 退避位置                           ポジション番号８
             tskeep.c        687          Page7.F0_Taihi      = 100   ; // [F0] 退避位置                           ポジション番号９
             tskeep.c        688          Page7.Y1_Taihi      = 100   ; // [Y1] 退避位置                           ポジション番号１０
             tskeep.c        689          Page7.StripTp1      = 140   ; // [Y0] 試薬ストリップ-ショートチップ１    ポジション番号１１
             tskeep.c        690          Page7.StripTp2      = 180   ; // [Y0] 試薬ストリップ-ショートチップ２    ポジション番号１２
             tskeep.c        691          Page7.StripTpL      = 220   ; // [Y0] 試薬ストリップ-ロングチップ        ポジション番号１３
             tskeep.c        692          Page7.StripTub      = 290   ; // [Y0] 試薬ストリップ-サンプルチューブ    ポジション番号１４
             tskeep.c        693          Page7.StripSm6      = 340   ; // [Y0] 試薬ストリップ-抽出用試薬6         ポジション番号１５
             tskeep.c        694          Page7.StripSm5      = 385   ; // [Y0] 試薬ストリップ-抽出用試薬5         ポジション番号１６
             tskeep.c        695          Page7.StripSm4      = 430   ; // [Y0] 試薬ストリップ-抽出用試薬4         ポジション番号１７
             tskeep.c        696          Page7.StripSm3      = 475   ; // [Y0] 試薬ストリップ-抽出用試薬3         ポジション番号１８
             tskeep.c        697          Page7.StripSm2      = 520   ; // [Y0] 試薬ストリップ-抽出用試薬2         ポジション番号１９
             tskeep.c        698          Page7.StripSm1      = 565   ; // [Y0] 試薬ストリップ-抽出用試薬1         ポジション番号２０
             tskeep.c        699          Page7.StripCat      = 620   ; // [Y0] 試薬ストリップ-カートリッジ        ポジション番号２１
             tskeep.c        700          Page7.StripCol      = 665   ; // [Y0] 試薬ストリップ-核酸回収液          ポジション番号２２
             tskeep.c        701          Page7.Z0_StripOpnE  = 3200  ; // [Z0] 試薬ストリップ-シール開け最終位置 ポジション番号２３
             tskeep.c        702          Page7.Z0_StripOpn1  = 3000  ; // [Z0] 試薬ストリップ-シール開け１段位置 ポジション番号２４
             tskeep.c        703          Page7.Z0_StripPres  = 3000  ; // [Z0] 試薬ストリップ-加圧位置           ポジション番号２５
             tskeep.c        704          Page7.Z0_TipGetE    = 3200  ; // [Z0] チップ取得最終位置                 ポジション番号２６
             tskeep.c        705          Page7.Z0_TipGet1    = 3200  ; // [Z0] チップ取得１段位置                 ポジション番号２７
             tskeep.c        706          Page7.Z0_TipDelE    = 3000  ; // [Z0] チップ廃棄最終位置                 ポジション番号２８
             tskeep.c        707          Page7.Z0_TipDel1    = 3200  ; // [Z0] チップ廃棄１段位置                 ポジション番号２９
             tskeep.c        708          Page7.Z0_LiqPut     = 3000  ; // [Z0] 廃液吐出位置                       ポジション番号３０
             tskeep.c        709          Page7.Y1_ColTube    = 100   ; // [Z0] コレクション 回収チューブ位置      ポジション番号３１
             tskeep.c        710          Page7.Y1_ColDspTube = 200   ; // [Z0] 廃液チューブ位置                   ポジション番号３２
             tskeep.c        711    
             tskeep.c        712          eeprom_write( ( 7 * 0x80) , &Page7.Y0_Offset, 0x80 );
             tskeep.c        713          break;
             tskeep.c        714    
             tskeep.c        715      case 8:// - PAGE8 ----------------
             tskeep.c        716          Page8.Z0_SucStaHei1 = 3000  ; // [Z0] 吸引開始高さ1                      ポジション番号３３
             tskeep.c        717          Page8.Z0_SucStaHei2 = 3010  ; // [Z0] 吸引開始高さ2                      ポジション番号３４
             tskeep.c        718          Page8.Z0_SucStaHei3 = 3020  ; // [Z0] 吸引開始高さ3                      ポジション番号３５
             tskeep.c        719          Page8.Z0_SucStaHei4 = 3030  ; // [Z0] 吸引開始高さ4                      ポジション番号３６
             tskeep.c        720          Page8.Z0_SucStaHei5 = 3040  ; // [Z0] 吸引開始高さ5                      ポジション番号３７
             tskeep.c        721          Page8.Z0_SucEndHei1 = 3050  ; // [Z0] 吸引終了高さ1                      ポジション番号３８
             tskeep.c        722          Page8.Z0_SucEndHei2 = 3060  ; // [Z0] 吸引終了高さ2                      ポジション番号３９
             tskeep.c        723          Page8.Z0_SucEndHei3 = 3070  ; // [Z0] 吸引終了高さ3                      ポジション番号４０
             tskeep.c        724          Page8.Z0_SucEndHei4 = 3080  ; // [Z0] 吸引終了高さ4                      ポジション番号４１
             tskeep.c        725          Page8.Z0_SucEndHei5 = 3090  ; // [Z0] 吸引終了高さ5                      ポジション番号４２
             tskeep.c        726          Page8.Z0_PutStaHei1 = 3000  ; // [Z0] 吐出開始高さ1                      ポジション番号４３
             tskeep.c        727          Page8.Z0_PutStaHei2 = 3010  ; // [Z0] 吐出開始高さ2                      ポジション番号４４
             tskeep.c        728          Page8.Z0_PutStaHei3 = 3030  ; // [Z0] 吐出開始高さ3                      ポジション番号４５
             tskeep.c        729          Page8.Z0_PutStaHei4 = 3040  ; // [Z0] 吐出開始高さ4                      ポジション番号４６
             tskeep.c        730          Page8.Z0_PutStaHei5 = 3050  ; // [Z0] 吐出開始高さ5                      ポジション番号４７
             tskeep.c        731          Page8.Z0_PutEndHei1 = 3000  ; // [Z0] 吐出終了高さ1                      ポジション番号４８
             tskeep.c        732          Page8.Z0_PutEndHei2 = 3010  ; // [Z0] 吐出終了高さ2                      ポジション番号４９
             tskeep.c        733          Page8.Z0_PutEndHei3 = 3030  ; // [Z0] 吐出終了高さ3                      ポジション番号５０
             tskeep.c        734          Page8.Z0_PutEndHei4 = 3040  ; // [Z0] 吐出終了高さ4                      ポジション番号５１
             tskeep.c        735          Page8.Z0_PutEndHei5 = 3050  ; // [Z0] 吐出終了高さ5                      ポジション番号５２
             tskeep.c        736          Page8.Z0_MixStaSuc  = 2500  ; // [Z0] 撹拌吸引開始高さ                   ポジション番号５３
             tskeep.c        737          Page8.Z0_MixEndSuc  = 2500  ; // [Z0] 撹拌吸引終了高さ                   ポジション番号５４
             tskeep.c        738            Page8.P0_TpDispose  = 10    ; // [P0] 廃棄動作                             ポジション番号５５
             tskeep.c        739          
             tskeep.c        740          eeprom_write( ( 8 * 0x80) , &Page8.Z0_SucStaHei1, 0x80 );
             tskeep.c        741          break;
             tskeep.c        742    
             tskeep.c        743      case 9:// - PAGE9 ----------------
             tskeep.c        744          Page9.Hosei[0].HS_VL1  =  1000;   // 補正パターン１ 容量 10%                ポジション番号６５
             tskeep.c        745          Page9.Hosei[0].HS_VL2  =  5000;   //                 容量 50%               ポジション番号６６
             tskeep.c        746          Page9.Hosei[0].HS_VL3  =  10000;  //                 容量100%                   ポジション番号６７
             tskeep.c        747          Page9.Hosei[0].HS_Out  =  100;    //                 ブローアウトエア量      ポジション番号６８
             tskeep.c        748          Page9.Hosei[0].HS_Air  =  300;    //                 エアキャップ量          ポジション番号６９
             tskeep.c        749          Page9.Hosei[0].HS_Tra  =  100;    //                 余剰量                     ポジション番号７０
             tskeep.c        750          Page9.Hosei[1].HS_VL1  =  1000;   // 補正パターン２  容量 10%                ポジション番号７１
             tskeep.c        751          Page9.Hosei[1].HS_VL2  =  5000;   //                 容量 50%                   ポジション番号７２
             tskeep.c        752          Page9.Hosei[1].HS_VL3  =  10000;  //                 容量100%                   ポジション番号７３
             tskeep.c        753          Page9.Hosei[1].HS_Out  =  100;    //                 ブローアウトエア量      ポジション番号７４
             tskeep.c        754          Page9.Hosei[1].HS_Air  =  300;    //                 エアキャップ量          ポジション番号７５
             tskeep.c        755          Page9.Hosei[1].HS_Tra  =  100;    //                 余剰量                     ポジション番号７６
             tskeep.c        756          Page9.Hosei[2].HS_VL1  =  1000;   // 補正パターン３  容量 10%                ポジション番号７７
             tskeep.c        757          Page9.Hosei[2].HS_VL2  =  5000;   //                 容量 50%               ポジション番号７８
             tskeep.c        758          Page9.Hosei[2].HS_VL3  =  10000;  //                 容量100%                   ポジション番号７９
             tskeep.c        759          Page9.Hosei[2].HS_Out  =  100;    //                 ブローアウトエア量      ポジション番号８０
             tskeep.c        760          Page9.Hosei[2].HS_Air  =  300;    //                 エアキャップ量          ポジション番号８１
             tskeep.c        761          Page9.Hosei[2].HS_Tra  =  100;    //                 余剰量                     ポジション番号８２
             tskeep.c        762          
             tskeep.c        763          eeprom_write( ( 9 * 0x80) , &Page9.Hosei[0].HS_VL1, 0x80 );
             tskeep.c        764          break;
             tskeep.c        765    
             tskeep.c        766      case 10:// - PAGE10 ----------------
             tskeep.c        767          Page10.Login       = 1;
             tskeep.c        768          eeprom_write( ( 10 * 0x80) , &Page10.Login, 0x80 );
             tskeep.c        769          break;
             tskeep.c        770    
             tskeep.c        771      case 90:// - PAGE90 ----------------
             tskeep.c        772          memcpy( &Prtinf.Dat[0].Cnt, &TEST_DATA_TBL[0], 0x80 );
             tskeep.c        773          staadr = 90*0x80;
             tskeep.c        774          pnter = (B* )&Prtinf.Dat[0].Cnt;
             tskeep.c        775          eeprom_write( (staadr + ( page * 0x80 )) , pnter, 0x80 );
             tskeep.c        776          break;
             tskeep.c        777    
             tskeep.c        778      case 100:// - PAGE100 ----------------
             tskeep.c        779          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskeep.c        780          memcpy( &Prtwk.step[0].StCmd,      &TEST_PROTCOL_TBL[0], sizeof( ST_PROTCOL ) );
             tskeep.c        781    
             tskeep.c        782    
             tskeep.c        783          staadr = 100*0x80;
             tskeep.c        784          pnter = (B* )&Prtwk.step[0].StCmd;
             tskeep.c        785          for( page = 0; page < 20; page++ )
             tskeep.c        786          {
             tskeep.c        787              eeprom_write( (staadr + ( page * 0x80 )) , pnter, 0x80 );
             tskeep.c        788              pnter += 0x80 ;
             tskeep.c        789          }
             tskeep.c        790          break;
             tskeep.c        791      case 120:// - PAGE120 ----------------
             tskeep.c        792          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskeep.c        793    //        memcpy( &Prtwk.info.ProtcolName[0], &STRTBL_TEST2[0], sizeof( STRTBL_TEST ) );
             tskeep.c        794          memcpy( &Prtwk.step[0].StCmd,      &TEST_PROTCOL_TBL[0], sizeof( ST_PROTCOL ) );
             tskeep.c        795    
             tskeep.c        796          staadr_k = 120*0x80;
             tskeep.c        797          pnter_k = (B* )&Prtwk.step[0].StCmd;
             tskeep.c        798          for( page_k = 0; page_k < 20; page_k++ )
             tskeep.c        799          {
             tskeep.c        800              eeprom_write( (staadr_k + ( page_k * 0x80 )) , pnter_k, 0x80 );
             tskeep.c        801              pnter_k += 0x80 ;
             tskeep.c        802          }
             tskeep.c        803          break;
             tskeep.c        804      }
             tskeep.c        805    }
             tskeep.c        806    static UB inf2;
             tskeep.c        807    static    int staadr;
             tskeep.c        808    static        B   *pnter;
             tskeep.c        809    static        int page;
             tskeep.c        810    static    int dbgadr;
             tskeep.c        811    static        B   *dbgpnter;
             tskeep.c        812    static        UB  dbgpagecnt;
             tskeep.c        813    static            int dbgbytcnt;
             tskeep.c        814    static        int dbgpage;
             tskeep.c        815    
             tskeep.c        816    /******************************************************************************
             tskeep.c        817    * 
             tskeep.c        818    * [概要]  実行タスクからのメッセージ受信処理
             tskeep.c        819    * [引数]  mrcv:メッセージデータ
             tskeep.c        820    * [戻り値]    −
             tskeep.c        821    * 
             tskeep.c        822    ******************************************************************************/
             tskeep.c        823    static void CmdRcvMsg(T_CMD_MSG* mrcv)
    0000004C              __$CmdRcvMsg:                    ; function: __$CmdRcvMsg
                                                           ; frame size=352
    0000004C 48F0                   MOVMU.L     R8,@-R15
    0000004E 03F0FECC               MOVI20      #-308,R3   ; H'FFFFFECC
    00000052 3F3C                   ADD         R3,R15
    00000054 E19C                   MOV         #-100,R1   ; H'FFFFFF9C
             tskeep.c        824    {
             tskeep.c        825      UB  msgid;
             tskeep.c        826      UB  prid1;
             tskeep.c        827      UB  bcid;
             tskeep.c        828      UB  inf;
             tskeep.c        829      int cnt;
             tskeep.c        830      int loop;
             tskeep.c        831      int index;
             tskeep.c        832      int pageadr;
             tskeep.c        833      ST_CNTLDATA         msgdat;                                     // メッセージデータ
             tskeep.c        834      int bytcnt;
             tskeep.c        835      UB  pagecnt;
             tskeep.c        836      UB  pstepcnt;
             tskeep.c        837    
             tskeep.c        838    
             tskeep.c        839      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskeep.c        840      memcpy( &msgdat.rsp.buf[0],   &mrcv->msgdata.data[0],CMD_BUFSIZ );
    00000056 6E43                   MOV         R4,R14
    00000058 7424                   ADD         #36,R4
    0000005A 611C                   EXTU.B      R1,R1
    0000005C 6B43                   MOV         R4,R11
    0000005E E63C                   MOV         #60,R6     ; H'0000003C
    00000060 6543                   MOV         R4,R5
    00000062 64F3                   MOV         R15,R4
    00000064 D76B                   MOV.L       L137+22,R7 ; _memcpy
    00000066 470B                   JSR         @R7
    00000068 341C                   ADD         R1,R4
             tskeep.c        841    
             tskeep.c        842      msgid = mrcv->msgdata.msgid;
             tskeep.c        843      prid1 = mrcv->msgdata.prid1;
             tskeep.c        844      bcid  = mrcv->msgdata.bcid;
             tskeep.c        845      inf   = mrcv->msgdata.inf;
             tskeep.c        846      inf2  = mrcv->msgdata.inf2;
    0000006A 36E1401D               MOV.B       @(29:12,R14),R6; (mrcv)->inf2
    0000006E D26A                   MOV.L       L137+26,R2 ; __$inf2
    00000070 3AE18018               MOVU.B      @(24,R14),R10; (mrcv)->prid1
    00000074 38E1801A               MOVU.B      @(26,R14),R8; (mrcv)->bcid
    00000078 39E1801C               MOVU.B      @(28,R14),R9; (mrcv)->inf
    0000007C 2260                   MOV.B       R6,@R2     ; inf2
             tskeep.c        847      
             tskeep.c        848      if( msgid == ID_MSG_EEPREAD )
    0000007E 30E1801B               MOVU.B      @(27,R14),R0; (mrcv)->msgid
    00000082 8816                   CMP/EQ      #22,R0
    00000084 8D02                   BT/S        L140
    00000086 6D03                   MOV         R0,R13
    00000088 A0FA                   BRA         L31
    0000008A 0009                   NOP
    0000008C              L140:
             tskeep.c        849      {
             tskeep.c        850          switch( prid1 )
    0000008C 60A3                   MOV         R10,R0
    0000008E 8803                   CMP/EQ      #3,R0
    00000090 8907                   BT          L33
    00000092 8801                   CMP/EQ      #1,R0
    00000094 8914                   BT          L35
    00000096 8802                   CMP/EQ      #2,R0
    00000098 8951                   BT          L37
    0000009A 8851                   CMP/EQ      #81,R0
    0000009C 895F                   BT          L38
    0000009E A0EF                   BRA         L31
    000000A0 0009                   NOP
    000000A2              L33:
             tskeep.c        851          {
             tskeep.c        852          case ID_TPL_LGIN1:
             tskeep.c        853              if( EepBitGet( EP_B_USER ) == FALSE )
    000000A2 B347                   BSR         _EepBitGet
    000000A4 E401                   MOV         #1,R4      ; H'00000001
    000000A6 2008                   TST         R0,R0
    000000A8 8901                   BT          L141
    000000AA A0E9                   BRA         L31
    000000AC 0009                   NOP
    000000AE              L141:
    000000AE E680                   MOV         #-128,R6   ; H'FFFFFF80
    000000B0 666C                   EXTU.B      R6,R6
             tskeep.c        854              {
             tskeep.c        855                  eeprom_read(EEPROM_PAGE1_ADR, &Page1.User[0].Id[0], sizeof( Page1 ));
    000000B2 D55A                   MOV.L       L137+30,R5 ; __$Page1
    000000B4 B1A6                   BSR         _eeprom_read
    000000B6 6463                   MOV         R6,R4
             tskeep.c        856                  EepBitSet( EP_B_USER );
    000000B8 B331                   BSR         _EepBitSet
    000000BA E401                   MOV         #1,R4      ; H'00000001
    000000BC A0E0                   BRA         L31
    000000BE 0009                   NOP
    000000C0              L35:
             tskeep.c        857              }
             tskeep.c        858              break;
             tskeep.c        859    
             tskeep.c        860          case ID_TPL_FWVER:
             tskeep.c        861              if( (inf2 & EEPROM_SPED_PTRN) ) // 速度情報（Page2〜Page7）
    000000C0 8769                   BLD         #1,R6
    000000C2 8B17                   BF          L41
             tskeep.c        862              {
             tskeep.c        863                  if( EepBitGet( EP_B_SPED ) == FALSE )
    000000C4 B336                   BSR         _EepBitGet
    000000C6 E402                   MOV         #2,R4      ; H'00000002
    000000C8 2008                   TST         R0,R0
    000000CA 8B13                   BF          L41
    000000CC E680                   MOV         #-128,R6   ; H'FFFFFF80
    000000CE E401                   MOV         #1,R4      ; H'00000001
    000000D0 666C                   EXTU.B      R6,R6
             tskeep.c        864                  {
             tskeep.c        865                      eeprom_read(EEPROM_PAGE2_ADR, &Page2.Y0[0].ac, sizeof( Page2 ));
    000000D2 D553                   MOV.L       L137+34,R5 ; __$Page2
    000000D4 B196                   BSR         _eeprom_read
    000000D6 4418                   SHLL8       R4
    000000D8 E680                   MOV         #-128,R6   ; H'FFFFFF80
    000000DA E460                   MOV         #96,R4     ; H'00000060
    000000DC 666C                   EXTU.B      R6,R6
             tskeep.c        866                      eeprom_read(EEPROM_PAGE3_ADR, &Page3.P0[0].ac, sizeof( Page3 ));
    000000DE D551                   MOV.L       L137+38,R5 ; __$Page3
    000000E0 B190                   BSR         _eeprom_read
    000000E2 4408                   SHLL2       R4
    000000E4 E680                   MOV         #-128,R6   ; H'FFFFFF80
    000000E6 E402                   MOV         #2,R4      ; H'00000002
    000000E8 666C                   EXTU.B      R6,R6
             tskeep.c        867                      eeprom_read(EEPROM_PAGE4_ADR, &Page4.Y1[0].ac, sizeof( Page4 ));
    000000EA D54F                   MOV.L       L137+42,R5 ; __$Page4
    000000EC B18A                   BSR         _eeprom_read
    000000EE 4418                   SHLL8       R4
             tskeep.c        868                      EepBitSet( EP_B_SPED );
    000000F0 B315                   BSR         _EepBitSet
    000000F2 E402                   MOV         #2,R4      ; H'00000002
    000000F4              L41:
             tskeep.c        869    //debug
             tskeep.c        870    //TestRead(2);
             tskeep.c        871    //TestRead(3);
             tskeep.c        872    //TestRead(4);
             tskeep.c        873    //debug
             tskeep.c        874                  }
             tskeep.c        875              }
             tskeep.c        876              
             tskeep.c        877              if( (inf2 & EEPROM_POSI_INFO) ) // 位置情報（Page8〜Page9）
    000000F4 D448                   MOV.L       L137+26,R4 ; __$inf2
    000000F6 34293000               BLD.B       #2,@(0,R4) ; inf2
    000000FA 8901                   BT          L142
    000000FC A0C0                   BRA         L31
    000000FE 0009                   NOP
    00000100              L142:
             tskeep.c        878              {
             tskeep.c        879                  if( EepBitGet( EP_B_POSI ) == FALSE )
    00000100 B318                   BSR         _EepBitGet
    00000102 E404                   MOV         #4,R4      ; H'00000004
    00000104 2008                   TST         R0,R0
    00000106 8901                   BT          L143
    00000108 A0BA                   BRA         L31
    0000010A 0009                   NOP
    0000010C              L143:
    0000010C EC4C                   MOV         #76,R12    ; H'0000004C
    0000010E E680                   MOV         #-128,R6   ; H'FFFFFF80
    00000110 4C08                   SHLL2       R12
    00000112 666C                   EXTU.B      R6,R6
    00000114 3CFC                   ADD         R15,R12
    00000116 2C62                   MOV.L       R6,@R12
             tskeep.c        880                  {
             tskeep.c        881                      eeprom_read(EEPROM_PAGE7_ADR, &Page7.Y0_Offset,       sizeof( Page7 ));
    00000118 D544                   MOV.L       L137+46,R5 ; __$Page7
    0000011A 04000380               MOVI20      #896,R4    ; H'00000380
    0000011E B171                   BSR         _eeprom_read
    00000120 0009                   NOP
    00000122 66C2                   MOV.L       @R12,R6
    00000124 E404                   MOV         #4,R4      ; H'00000004
             tskeep.c        882                      eeprom_read(EEPROM_PAGE8_ADR, &Page8.Z0_SucStaHei1,   sizeof( Page8 ));
    00000126 D542                   MOV.L       L137+50,R5 ; __$Page8
    00000128 B16C                   BSR         _eeprom_read
    0000012A 4418                   SHLL8       R4
             tskeep.c        883                      eeprom_read(EEPROM_PAGE9_ADR, &Page9.Hosei[0].HS_VL1, sizeof( Page9 ));
    0000012C D541                   MOV.L       L137+54,R5 ; __$Page9
    0000012E 04000480               MOVI20      #1152,R4   ; H'00000480
    00000132 B167                   BSR         _eeprom_read
    00000134 66C2                   MOV.L       @R12,R6
             tskeep.c        884                      EepBitSet( EP_B_POSI );
    00000136 B2F2                   BSR         _EepBitSet
    00000138 E404                   MOV         #4,R4      ; H'00000004
    0000013A A0A1                   BRA         L31
    0000013C 0009                   NOP
    0000013E              L37:
             tskeep.c        885                  }
             tskeep.c        886              }
             tskeep.c        887              break;
             tskeep.c        888    
             tskeep.c        889          case ID_TPL_OPTIF:
             tskeep.c        890              if( EepBitGet( EP_B_OPTI ) == FALSE )
    0000013E B2F9                   BSR         _EepBitGet
    00000140 E408                   MOV         #8,R4      ; H'00000008
    00000142 2008                   TST         R0,R0
    00000144 8901                   BT          L144
    00000146 A09B                   BRA         L31
    00000148 0009                   NOP
    0000014A              L144:
    0000014A E680                   MOV         #-128,R6   ; H'FFFFFF80
    0000014C E405                   MOV         #5,R4      ; H'00000005
    0000014E 666C                   EXTU.B      R6,R6
             tskeep.c        891              {
             tskeep.c        892                  eeprom_read(EEPROM_PAGE10_ADR, &Page10.Login, sizeof( Page10 ));
    00000150 D539                   MOV.L       L137+58,R5 ; __$Page10
    00000152 B157                   BSR         _eeprom_read
    00000154 4418                   SHLL8       R4
             tskeep.c        893                  EepBitSet( EP_B_OPTI );
    00000156 B2E2                   BSR         _EepBitSet
    00000158 E408                   MOV         #8,R4      ; H'00000008
    0000015A A091                   BRA         L31
    0000015C 0009                   NOP
    0000015E              L38:
             tskeep.c        894              }
             tskeep.c        895              break;
             tskeep.c        896              
             tskeep.c        897          case ID_TPL_PRTCL:
             tskeep.c        898              if( EepBitGet( EP_B_PR01 ) == FALSE )
    0000015E E410                   MOV         #16,R4     ; H'00000010
    00000160 B2E8                   BSR         _EepBitGet
    00000162 4418                   SHLL8       R4
    00000164 2008                   TST         R0,R0
    00000166 8901                   BT          L145
    00000168 A08A                   BRA         L31
    0000016A 0009                   NOP
    0000016C              L145:
             tskeep.c        899              {
             tskeep.c        900                  if( inf2 >= 1 )
    0000016C D42A                   MOV.L       L137+26,R4 ; __$inf2
    0000016E 6640                   MOV.B       @R4,R6     ; inf2
    00000170 E501                   MOV         #1,R5      ; H'00000001
    00000172 3652                   CMP/HS      R5,R6
    00000174 8901                   BT          L146
    00000176 A083                   BRA         L31
    00000178 0009                   NOP
    0000017A              L146:
             tskeep.c        901                  {
             tskeep.c        902                      index = (inf2 - 1);
    0000017A 666C                   EXTU.B      R6,R6
             tskeep.c        903                      EepBitSet( ( EP_B_PR01 << index ) );
    0000017C E410                   MOV         #16,R4     ; H'00000010
    0000017E 76FF                   ADD         #-1,R6
    00000180 4418                   SHLL8       R4
    00000182 3F612047               MOV.L       R6,@(284:12,R15); index
    00000186 B2CA                   BSR         _EepBitSet
    00000188 446C                   SHAD        R6,R4
             tskeep.c        904    
             tskeep.c        905                      // プロトコルデータ取得（プロトコル番号、総ステップ数、工程）
             tskeep.c        906                      //                       Cnt           , Stp,          Prc
             tskeep.c        907                      pnter_a = (B* )&Prtinf.Dat[index].Cnt;
    0000018A 34F16047               MOV.L       @(284:12,R15),R4; index
    0000018E E12D                   MOV         #45,R1     ; H'0000002D
             tskeep.c        908                      staadr  = EEPROM_PAGE90_ADR + index * sizeof(ST_PROTCOL_DATA);
             tskeep.c        909                      eeprom_read(  staadr , pnter_a, sizeof(ST_PROTCOL_DATA) );
    00000190 E604                   MOV         #4,R6      ; H'00000004
    00000192 6543                   MOV         R4,R5
    00000194 4508                   SHLL2       R5
    00000196 DC29                   MOV.L       L137+62,R12; __$Prtinf
    00000198 4408                   SHLL2       R4
    0000019A 35CC                   ADD         R12,R5
    0000019C 4118                   SHLL8       R1
    0000019E DE28                   MOV.L       L137+66,R14; __$pnter_a
    000001A0 341C                   ADD         R1,R4
    000001A2 2E52                   MOV.L       R5,@R14    ; pnter_a
    000001A4 D227                   MOV.L       L137+70,R2 ; __$staadr
    000001A6 3F512048               MOV.L       R5,@(288:12,R15)
    000001AA B12B                   BSR         _eeprom_read
    000001AC 2242                   MOV.L       R4,@R2     ; staadr
             tskeep.c        910    
             tskeep.c        911                      // プロトコルデータステップ取得
             tskeep.c        912                      pstepcnt = Prtinf.Dat[index].Cnt;
    000001AE 32F16048               MOV.L       @(288:12,R15),R2
             tskeep.c        913                      if( pstepcnt <= PROTCOL_MAX )
    000001B2 E750                   MOV         #80,R7     ; H'00000050
    000001B4 36218000               MOVU.B      @(0,R2),R6 ; Dat[].Cnt
    000001B8 3677                   CMP/GT      R7,R6
    000001BA 8961                   BT          L31
             tskeep.c        914                      {
             tskeep.c        915                          bytcnt  = pstepcnt * sizeof(ST_PROTCOL_STEP);
    000001BC E014                   MOV         #20,R0     ; H'00000014
    000001BE E4F9                   MOV         #-7,R4     ; H'FFFFFFF9
    000001C0 4680                   MULR        R0,R6
    000001C2 6063                   MOV         R6,R0
             tskeep.c        916                          pagecnt = (UB) bytcnt / EEPROM_SIZE_MAX;
             tskeep.c        917                          if( (bytcnt % EEPROM_SIZE_MAX) )    pagecnt++;
    000001C4 C87F                   TST         #127,R0
    000001C6 666C                   EXTU.B      R6,R6
    000001C8 8D01                   BT/S        L50
    000001CA 464C                   SHAD        R4,R6
    000001CC 7601                   ADD         #1,R6
    000001CE              L50:
             tskeep.c        918                          
             tskeep.c        919                          pnter_a = (B* )&Prtwk.step[0].StCmd;
             tskeep.c        920    //                        page = EEPROM_PAGE100_ADR + index * sizeof(ST_PROTCOL_STEP);
             tskeep.c        921                          page = EEPROM_PAGE100_ADR + index * 20 * EEPROM_SIZE_MAX;
    000001CE E347                   MOV         #71,R3     ; H'00000047
    000001D0 E00A                   MOV         #10,R0     ; H'0000000A
    000001D2 4308                   SHLL2       R3
    000001D4 E432                   MOV         #50,R4     ; H'00000032
    000001D6 33FC                   ADD         R15,R3
    000001D8 4018                   SHLL8       R0
    000001DA 6732                   MOV.L       @R3,R7     ; index
    000001DC 4418                   SHLL8       R4
    000001DE D51A                   MOV.L       L137+74,R5 ; __$Prtwk
    000001E0 4780                   MULR        R0,R7
    000001E2 D117                   MOV.L       L137+66,R1 ; __$pnter_a
    000001E4 2152                   MOV.L       R5,@R1     ; pnter_a
             tskeep.c        922                          
             tskeep.c        923                          for( loop = 0; loop < pagecnt ;loop++ )
    000001E6 E100                   MOV         #0,R1      ; H'00000000
    000001E8 DE18                   MOV.L       L137+78,R14; __$page
    000001EA 374C                   ADD         R4,R7
    000001EC 6C6C                   EXTU.B      R6,R12
    000001EE 2E72                   MOV.L       R7,@R14    ; page
    000001F0 6213                   MOV         R1,R2
    000001F2 1312                   MOV.L       R1,@(8,R3) ; loop
    000001F4 13C3                   MOV.L       R12,@(12,R3)
    000001F6 EC80                   MOV         #-128,R12  ; H'FFFFFF80
    000001F8 1314                   MOV.L       R1,@(16,R3)
    000001FA A03D                   BRA         L51
    000001FC 6CCC                   EXTU.B      R12,R12
    000001FE              L137:
    000001FE 00000002               .RES.W      1
    00000200 <00000000>             .DATA.L     _spi_init
    00000204 <00000000>             .DATA.L     _v4_trcv_mbx
    00000208 <00000000>             .DATA.L     L147
    0000020C <00000000>             .DATA.L     _api_rel_mpf
    00000210 <00000003>             .DATA.L     H'00000003+__$eepbuf
    00000214 <00000000>             .DATA.L     _memcpy
    00000218 <00000000>             .DATA.L     __$inf2
    0000021C <00000000>             .DATA.L     __$Page1
    00000220 <00000000>             .DATA.L     __$Page2
    00000224 <00000000>             .DATA.L     __$Page3
    00000228 <00000000>             .DATA.L     __$Page4
    0000022C <00000000>             .DATA.L     __$Page7
    00000230 <00000000>             .DATA.L     __$Page8
    00000234 <00000000>             .DATA.L     __$Page9
    00000238 <00000000>             .DATA.L     __$Page10
    0000023C <00000000>             .DATA.L     __$Prtinf
    00000240 <00000000>             .DATA.L     __$pnter_a
    00000244 <00000000>             .DATA.L     __$staadr
    00000248 <00000000>             .DATA.L     __$Prtwk
    0000024C <00000000>             .DATA.L     __$page
    00000250              L52:
             tskeep.c        924                          {
             tskeep.c        925                              eeprom_read(  page +  (loop * EEPROM_SIZE_MAX ), pnter_a, EEPROM_SIZE_MAX );
    00000250 D68F                   MOV.L       L138,R6    ; __$page
    00000252 6462                   MOV.L       @R6,R4     ; page
    00000254 EE49                   MOV         #73,R14    ; H'00000049
    00000256 66C3                   MOV         R12,R6
    00000258 342C                   ADD         R2,R4
    0000025A B0D3                   BSR         _eeprom_read
    0000025C 4E08                   SHLL2       R14
             tskeep.c        926                              pnter_a += EEPROM_SIZE_MAX ;
    0000025E D78D                   MOV.L       L138+4,R7  ; __$pnter_a
    00000260 6572                   MOV.L       @R7,R5     ; pnter_a
    00000262 3EFC                   ADD         R15,R14
    00000264 52E2                   MOV.L       @(8,R14),R2
    00000266 757F                   ADD         #127,R5
    00000268 61E2                   MOV.L       @R14,R1    ; loop
    0000026A 7501                   ADD         #1,R5
    0000026C 727F                   ADD         #127,R2
    0000026E 7101                   ADD         #1,R1
    00000270 7201                   ADD         #1,R2
    00000272 2752                   MOV.L       R5,@R7     ; pnter_a
    00000274 2E12                   MOV.L       R1,@R14    ; loop
    00000276 1E22                   MOV.L       R2,@(8,R14)
    00000278              L51:
    00000278 36F1604A               MOV.L       @(296:12,R15),R6
    0000027C 3163                   CMP/GE      R6,R1
    0000027E 8BE7                   BF          L52
    00000280              L31:
             tskeep.c        927                          }
             tskeep.c        928                      }
             tskeep.c        929                  }
             tskeep.c        930              }
             tskeep.c        931              break;
             tskeep.c        932              
             tskeep.c        933              
             tskeep.c        934          default:
             tskeep.c        935              break;
             tskeep.c        936          }
             tskeep.c        937      }
             tskeep.c        938      
             tskeep.c        939      if( msgid == ID_MSG_IMPPDAT )
    00000280 60D3                   MOV         R13,R0
    00000282 8824                   CMP/EQ      #36,R0
    00000284 8B61                   BF          L54
             tskeep.c        940      {
             tskeep.c        941            //  --------------------
             tskeep.c        942            // ProcNo  page    Adr(hex)
             tskeep.c        943            //   1     100     3200
             tskeep.c        944            //   2     120     3C00
             tskeep.c        945            //   3     140     4600
             tskeep.c        946            //   4     160     5000
             tskeep.c        947            //   5     180     5400
             tskeep.c        948            //   6     200     5800
             tskeep.c        949            //   7     220     5C00
             tskeep.c        950            //   8     240     6000
             tskeep.c        951            //   9     260     6400
             tskeep.c        952            //  10     280     6800
             tskeep.c        953            //  11     300     6C00
             tskeep.c        954            //  12     320     7000
             tskeep.c        955            //  13     340     7400
             tskeep.c        956            //  14     360     7800
             tskeep.c        957            //  15     380     7C00
             tskeep.c        958            //  16     400     8000
             tskeep.c        959            //  17     420     8400
             tskeep.c        960            //  18     440     8800
             tskeep.c        961            //  19     460     8C00
             tskeep.c        962            //  20     480     9000
             tskeep.c        963            //  --------------------
             tskeep.c        964          
             tskeep.c        965          pstepcnt = Get_pcnt();
    00000286 D784                   MOV.L       L138+8,R7  ; _Get_pcnt
    00000288 474B                   JSR/N       @R7
             tskeep.c        966          if( pstepcnt <= PROTCOL_MAX )
    0000028A 6C0C                   EXTU.B      R0,R12
    0000028C E550                   MOV         #80,R5     ; H'00000050
    0000028E 3C57                   CMP/GT      R5,R12
    00000290 8D5B                   BT/S        L54
    00000292 6E03                   MOV         R0,R14
             tskeep.c        967          {
             tskeep.c        968              if( inf2 >= 1 )
    00000294 D481                   MOV.L       L138+12,R4 ; __$inf2
    00000296 6640                   MOV.B       @R4,R6     ; inf2
    00000298 E501                   MOV         #1,R5      ; H'00000001
    0000029A 3652                   CMP/HS      R5,R6
    0000029C 8B55                   BF          L54
             tskeep.c        969              {
             tskeep.c        970                  // プロトコルステップ数書込み
             tskeep.c        971                  index = (inf2 - 1);
             tskeep.c        972                  Prtinf.Dat[index].Cnt = pstepcnt;
    0000029E 646C                   EXTU.B      R6,R4
             tskeep.c        973                  pnter_a = (B* )&Prtinf.Dat[index].Cnt;
             tskeep.c        974                  staadr = EEPROM_PAGE90_ADR + index * 4;
    000002A0 E12D                   MOV         #45,R1     ; H'0000002D
    000002A2 74FF                   ADD         #-1,R4
    000002A4 4118                   SHLL8       R1
    000002A6 4408                   SHLL2       R4
             tskeep.c        975    
             tskeep.c        976                  write_byte_len( staadr , pnter_a, 1 );
    000002A8 E601                   MOV         #1,R6      ; H'00000001
    000002AA D57D                   MOV.L       L138+16,R5 ; __$Prtinf
    000002AC 354C                   ADD         R4,R5
    000002AE 341C                   ADD         R1,R4
    000002B0 D778                   MOV.L       L138+4,R7  ; __$pnter_a
    000002B2 D17C                   MOV.L       L138+20,R1 ; __$staadr
    000002B4 25E0                   MOV.B       R14,@R5    ; Dat[].Cnt
             tskeep.c        977                  
             tskeep.c        978                  
             tskeep.c        979    // ----- debug -----
             tskeep.c        980    #if 0
             tskeep.c        981    TestRead(90);
             tskeep.c        982    #endif
             tskeep.c        983    // ----- debug -----
             tskeep.c        984    
             tskeep.c        985                  
             tskeep.c        986                  // プロトコル書込み
             tskeep.c        987                  bytcnt  = pstepcnt * sizeof(ST_PROTCOL_STEP);
    000002B6 6EEC                   EXTU.B      R14,R14
    000002B8 2752                   MOV.L       R5,@R7     ; pnter_a
    000002BA B178                   BSR         __$write_byte_len
    000002BC 2142                   MOV.L       R4,@R1     ; staadr
    000002BE E014                   MOV         #20,R0     ; H'00000014
    000002C0 4E80                   MULR        R0,R14
             tskeep.c        988    dbgbytcnt = bytcnt;
    000002C2 D479                   MOV.L       L138+24,R4 ; __$dbgbytcnt
    000002C4 4E11                   CMP/PZ      R14
    000002C6 24E2                   MOV.L       R14,@R4    ; dbgbytcnt
             tskeep.c        989    
             tskeep.c        990                  pagecnt = bytcnt / EEPROM_SIZE_MAX;
    000002C8 8D01                   BT/S        L58
    000002CA 62E3                   MOV         R14,R2
    000002CC 727F                   ADD         #127,R2
    000002CE              L58:
    000002CE E4F9                   MOV         #-7,R4     ; H'FFFFFFF9
             tskeep.c        991    
             tskeep.c        992    dbgpagecnt = pagecnt;
             tskeep.c        993                  
             tskeep.c        994                  if( (bytcnt % EEPROM_SIZE_MAX) )    pagecnt++;
    000002D0 60E3                   MOV         R14,R0
    000002D2 424C                   SHAD        R4,R2
    000002D4 C87F                   TST         #127,R0
    000002D6 8D01                   BT/S        L60
    000002D8 6123                   MOV         R2,R1
    000002DA 7101                   ADD         #1,R1
    000002DC              L60:
             tskeep.c        995    
             tskeep.c        996    dbgpagecnt = pagecnt;
    000002DC D573                   MOV.L       L138+28,R5 ; __$dbgpagecnt
             tskeep.c        997                  
             tskeep.c        998    //                staadr = (100 + (inf2 - 1) * sizeof(ST_PROTCOL_STEP)) * EEPROM_SIZE_MAX;
             tskeep.c        999                  staadr = (100 + (inf2 - 1) * 20 ) * EEPROM_SIZE_MAX;
    000002DE D26F                   MOV.L       L138+12,R2 ; __$inf2
    000002E0 2510                   MOV.B       R1,@R5     ; dbgpagecnt
    000002E2 E00A                   MOV         #10,R0     ; H'0000000A
    000002E4 35218000               MOVU.B      @(0,R2),R5 ; inf2
    000002E8 4018                   SHLL8       R0
    000002EA E428                   MOV         #40,R4     ; H'00000028
    000002EC 6C53                   MOV         R5,R12
             tskeep.c       1000    dbgadr = staadr ;
             tskeep.c       1001    
             tskeep.c       1002                  pnter = (B* )( SRAM_START_ADDRESS + sizeof( ST_PROTCOL )*( inf2 - 1));
    000002EE 75FF                   ADD         #-1,R5
    000002F0 4C80                   MULR        R0,R12
    000002F2 00000640               MOVI20      #1600,R0   ; H'00000640
    000002F6 4418                   SHLL8       R4
    000002F8 4580                   MULR        R0,R5
    000002FA 0E000C00               MOVI20      #3072,R14  ; H'00000C00
    000002FE 3C4C                   ADD         R4,R12
    00000300 4E28                   SHLL16      R14
    00000302 D668                   MOV.L       L138+20,R6 ; __$staadr
    00000304 26C2                   MOV.L       R12,@R6    ; staadr
    00000306 35EC                   ADD         R14,R5
    00000308 D669                   MOV.L       L138+32,R6 ; __$dbgadr
             tskeep.c       1003    dbgpnter=pnter ;
    0000030A D26A                   MOV.L       L138+36,R2 ; __$dbgpnter
    0000030C 26C2                   MOV.L       R12,@R6    ; dbgadr
             tskeep.c       1004                  
             tskeep.c       1005                  for( page = 0; page < pagecnt; page++ )
    0000030E E400                   MOV         #0,R4      ; H'00000000
    00000310 D769                   MOV.L       L138+40,R7 ; __$pnter
    00000312 2252                   MOV.L       R5,@R2     ; dbgpnter
    00000314 EC80                   MOV         #-128,R12  ; H'FFFFFF80
    00000316 D25E                   MOV.L       L138,R2    ; __$page
    00000318 2752                   MOV.L       R5,@R7     ; pnter
    0000031A 6E1C                   EXTU.B      R1,R14
    0000031C 2242                   MOV.L       R4,@R2     ; page
    0000031E A012                   BRA         L61
    00000320 6CCC                   EXTU.B      R12,R12
    00000322              L62:
    00000322 D660                   MOV.L       L138+20,R6 ; __$staadr
             tskeep.c       1006                  {
             tskeep.c       1007    dbgpage=page;
    00000324 D165                   MOV.L       L138+44,R1 ; __$dbgpage
             tskeep.c       1008                      eeprom_write( (staadr + ( page * EEPROM_SIZE_MAX )) , pnter, EEPROM_SIZE_MAX );
    00000326 E707                   MOV         #7,R7      ; H'00000007
    00000328 6262                   MOV.L       @R6,R2     ; staadr
    0000032A 2142                   MOV.L       R4,@R1     ; dbgpage
    0000032C 447D                   SHLD        R7,R4
    0000032E 342C                   ADD         R2,R4
    00000330 B066                   BSR         _eeprom_write
    00000332 66C3                   MOV         R12,R6
             tskeep.c       1009                      pnter += EEPROM_SIZE_MAX ;
    00000334 D260                   MOV.L       L138+40,R2 ; __$pnter
    00000336 6522                   MOV.L       @R2,R5     ; pnter
    00000338 D155                   MOV.L       L138,R1    ; __$page
    0000033A 6412                   MOV.L       @R1,R4     ; page
    0000033C 757F                   ADD         #127,R5
    0000033E 7501                   ADD         #1,R5
    00000340 7401                   ADD         #1,R4
    00000342 2252                   MOV.L       R5,@R2     ; pnter
    00000344 2142                   MOV.L       R4,@R1     ; page
    00000346              L61:
    00000346 34E3                   CMP/GE      R14,R4
    00000348 8BEB                   BF          L62
    0000034A              L54:
             tskeep.c       1010                  }
             tskeep.c       1011                  
             tskeep.c       1012                  
             tskeep.c       1013    // ----- debug -----
             tskeep.c       1014    #if 0
             tskeep.c       1015          memset( &Prtwk.step[0].StCmd, CLR, sizeof( ST_PROTCOL ) );
             tskeep.c       1016          pnter_a = (B* )&Prtwk.step[0].StCmd;
             tskeep.c       1017    
             tskeep.c       1018          eeprom_read( ( 140 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1019          eeprom_read( ( 141 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1020          eeprom_read( ( 142 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1021          eeprom_read( ( 143 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1022          eeprom_read( ( 144 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1023          eeprom_read( ( 145 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1024          eeprom_read( ( 146 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1025          eeprom_read( ( 147 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1026          eeprom_read( ( 148 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1027          eeprom_read( ( 149 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1028          eeprom_read( ( 150 * 0x80 ), pnter_a, 0x80 );   pnter_a += 0x80 ;
             tskeep.c       1029          eeprom_read( ( 151 * 0x80 ), pnter_a, 0x80 );   
             tskeep.c       1030    #endif
             tskeep.c       1031    // ----- debug -----
             tskeep.c       1032                  
             tskeep.c       1033                  
             tskeep.c       1034                  
             tskeep.c       1035              }
             tskeep.c       1036          }
             tskeep.c       1037          
             tskeep.c       1038      }
             tskeep.c       1039      
             tskeep.c       1040      
             tskeep.c       1041      if( msgid == ID_MSG_IMPSPED )
    0000034A 60D3                   MOV         R13,R0
    0000034C 8825                   CMP/EQ      #37,R0
    0000034E 8B12                   BF          L64
    00000350 E401                   MOV         #1,R4      ; H'00000001
    00000352 E680                   MOV         #-128,R6   ; H'FFFFFF80
    00000354 4418                   SHLL8       R4
    00000356 666C                   EXTU.B      R6,R6
             tskeep.c       1042      {
             tskeep.c       1043          eeprom_write( ( 2 * EEPROM_SIZE_MAX) , &Page2.Y0[0].ac, EEPROM_SIZE_MAX );
    00000358 D559                   MOV.L       L138+48,R5 ; __$Page2
    0000035A 6E43                   MOV         R4,R14
    0000035C 7E80                   ADD         #-128,R14
    0000035E B04F                   BSR         _eeprom_write
    00000360 6C63                   MOV         R6,R12
    00000362 E460                   MOV         #96,R4     ; H'00000060
    00000364 66E3                   MOV         R14,R6
             tskeep.c       1044          eeprom_write( ( 3 * EEPROM_SIZE_MAX) , &Page3.P0[0].ac, EEPROM_SIZE_MAX );
    00000366 D557                   MOV.L       L138+52,R5 ; __$Page3
    00000368 B04A                   BSR         _eeprom_write
    0000036A 4408                   SHLL2       R4
    0000036C E402                   MOV         #2,R4      ; H'00000002
    0000036E 66C3                   MOV         R12,R6
             tskeep.c       1045          eeprom_write( ( 4 * EEPROM_SIZE_MAX) , &Page4.Y1[0].ac, EEPROM_SIZE_MAX );
    00000370 D555                   MOV.L       L138+56,R5 ; __$Page4
    00000372 B045                   BSR         _eeprom_write
    00000374 4418                   SHLL8       R4
    00000376              L64:
             tskeep.c       1046      }
             tskeep.c       1047      
             tskeep.c       1048      if( msgid == ID_MSG_IMPPOSI )
    00000376 60D3                   MOV         R13,R0
    00000378 8826                   CMP/EQ      #38,R0
    0000037A 8B10                   BF          L66
    0000037C E680                   MOV         #-128,R6   ; H'FFFFFF80
    0000037E 666C                   EXTU.B      R6,R6
             tskeep.c       1049      {
             tskeep.c       1050          eeprom_write( ( 7 * EEPROM_SIZE_MAX) , &Page7.Y0_Offset,      EEPROM_SIZE_MAX );
    00000380 D552                   MOV.L       L138+60,R5 ; __$Page7
    00000382 04000380               MOVI20      #896,R4    ; H'00000380
    00000386 B03B                   BSR         _eeprom_write
    00000388 6C63                   MOV         R6,R12
    0000038A E404                   MOV         #4,R4      ; H'00000004
    0000038C 66C3                   MOV         R12,R6
             tskeep.c       1051          eeprom_write( ( 8 * EEPROM_SIZE_MAX) , &Page8.Z0_SucStaHei1,  EEPROM_SIZE_MAX );
    0000038E D550                   MOV.L       L138+64,R5 ; __$Page8
    00000390 B036                   BSR         _eeprom_write
    00000392 4418                   SHLL8       R4
             tskeep.c       1052          eeprom_write( ( 9 * EEPROM_SIZE_MAX) , &Page9.Hosei[0].HS_VL1,EEPROM_SIZE_MAX );
    00000394 D54F                   MOV.L       L138+68,R5 ; __$Page9
    00000396 04000480               MOVI20      #1152,R4   ; H'00000480
    0000039A B031                   BSR         _eeprom_write
    0000039C 66C3                   MOV         R12,R6
    0000039E              L66:
             tskeep.c       1053      }
             tskeep.c       1054      
             tskeep.c       1055      
             tskeep.c       1056      
             tskeep.c       1057      if( msgid == ID_MSG_EEPWRIT_STS )
    0000039E E6C9                   MOV         #-55,R6    ; H'FFFFFFC9
    000003A0 666C                   EXTU.B      R6,R6
    000003A2 3D60                   CMP/EQ      R6,R13
    000003A4 8B0A                   BF          L68
    000003A6 E608                   MOV         #8,R6      ; H'00000008
             tskeep.c       1058      {
             tskeep.c       1059          memcpy( &writebufwk[0], &mrcv->msgdata.data[0], sizeof(ST_DEVICE_INFO));
    000003A8 D44B                   MOV.L       L138+72,R4 ; __$writebufwk
    000003AA D74C                   MOV.L       L138+76,R7 ; _memcpy
    000003AC 470B                   JSR         @R7
    000003AE 65B3                   MOV         R11,R5
             tskeep.c       1060          write_byte_len( EEPROM_PAGE0_ADR , (B*)&writebufwk[0], sizeof(ST_DEVICE_INFO) );
    000003B0 E608                   MOV         #8,R6      ; H'00000008
    000003B2 D549                   MOV.L       L138+72,R5 ; __$writebufwk
    000003B4 B0FB                   BSR         __$write_byte_len
    000003B6 E400                   MOV         #0,R4      ; H'00000000
    000003B8 A00E                   BRA         L69
    000003BA 0009                   NOP
    000003BC              L68:
             tskeep.c       1061          
             tskeep.c       1062          
             tskeep.c       1063    // ここからはデバックで確認用
             tskeep.c       1064    // ここからはデバックで確認用     memset( &Page0.prot.sts, CLR, sizeof( Page0 ) );
             tskeep.c       1065    // ここからはデバックで確認用     read_bytes( EEPROM_PAGE0_ADR, (B*)&Page0.prot.sts, 8 );
             tskeep.c       1066    // ここからはデバックで確認用     memcpy( &Page0.prot.sts, eepbuf.format.data, 8 );
             tskeep.c       1067    // ここからはデバックで確認用     debug_flg = 1;
             tskeep.c       1068    // ここからはデバックで確認用
             tskeep.c       1069          return;
             tskeep.c       1070      }
             tskeep.c       1071    
             tskeep.c       1072      
             tskeep.c       1073      
             tskeep.c       1074      
             tskeep.c       1075      
             tskeep.c       1076      
             tskeep.c       1077      
             tskeep.c       1078        // 応答メッセージ送信
             tskeep.c       1079      CmdEndResponse  (
             tskeep.c       1080                          ID_TSK_EEP,
             tskeep.c       1081                          prid1,
             tskeep.c       1082                          bcid,
             tskeep.c       1083                          msgid,
             tskeep.c       1084                          inf,
             tskeep.c       1085                          inf2,
             tskeep.c       1086                          &msgdat
             tskeep.c       1087                      );
    000003BC 65F3                   MOV         R15,R5
    000003BE 2F56                   MOV.L       R5,@-R15
    000003C0 DC36                   MOV.L       L138+12,R12; __$inf2
    000003C2 3EC18000               MOVU.B      @(0,R12),R14; inf2
    000003C6 2FE6                   MOV.L       R14,@-R15
    000003C8 2F96                   MOV.L       R9,@-R15
    000003CA E406                   MOV         #6,R4      ; H'00000006
    000003CC 6683                   MOV         R8,R6
    000003CE 65A3                   MOV         R10,R5
    000003D0 DB43                   MOV.L       L138+80,R11; _CmdEndResponse
    000003D2 4B0B                   JSR         @R11
    000003D4 67D3                   MOV         R13,R7
    000003D6 7F0C                   ADD         #12,R15
    000003D8              L69:
    000003D8 03000134               MOVI20      #308,R3    ; H'00000134
    000003DC 3F3C                   ADD         R3,R15
    000003DE 48F4                   MOVMU.L     @R15+,R8
             tskeep.c       1088    }
    000003E0 006B                   RTS/N
             tskeep.c       1089    /******************************************************************************
             tskeep.c       1090    * 
             tskeep.c       1091    * [概要]  EEPROM書込み管理データ初期化
             tskeep.c       1092    * [引数]  −
             tskeep.c       1093    * [戻り値]    −
             tskeep.c       1094    * 
             tskeep.c       1095    ******************************************************************************/
             tskeep.c       1096    static UB UserInfoCheck()
             tskeep.c       1097    {
             tskeep.c       1098      int i;
             tskeep.c       1099    
             tskeep.c       1100    //    if(
             tskeep.c       1101    //        ( Strncmp( &RcvUserInfo.Id[0], &Page0.Mast.Id[0], 8 ))||
             tskeep.c       1102    //        ( Strncmp( &RcvUserInfo.Pw[0], &Page0.Mast.Pw[0], 4 ))
             tskeep.c       1103    //    )
             tskeep.c       1104    //    {
             tskeep.c       1105          for( i = 0; i < 10; i++ )
             tskeep.c       1106          {
             tskeep.c       1107              if(
             tskeep.c       1108                  ( Strncmp( &RcvUserInfo.Id[0], &Page1.User[i].Id[0], 8 ))||
             tskeep.c       1109                  ( Strncmp( &RcvUserInfo.Pw[0], &Page1.User[i].Pw[0], 4 ))
             tskeep.c       1110              )
             tskeep.c       1111              {
             tskeep.c       1112                  return(1);
             tskeep.c       1113              }
             tskeep.c       1114          }
             tskeep.c       1115    //    }
             tskeep.c       1116      return(0);
             tskeep.c       1117    }
             tskeep.c       1118    
             tskeep.c       1119    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1120      機能：EEPROMのデータクリア
             tskeep.c       1121      引数：なし
             tskeep.c       1122      戻値：エラーコード
             tskeep.c       1123    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1124    ER eeprom_clear( void )
    000003E2              _eeprom_clear:                   ; function: eeprom_clear
                                                           ; frame size=12
    000003E2 4DF0                   MOVMU.L     R13,@-R15
    000003E4 ED02                   MOV         #2,R13     ; H'00000002
             tskeep.c       1125    {
             tskeep.c       1126        ER     err;
             tskeep.c       1127        INT     i;
             tskeep.c       1128    
             tskeep.c       1129        for( i = 0; i < EEPROM_PAGE_NUM; i++ )
    000003E6 EE00                   MOV         #0,R14     ; H'00000000
    000003E8 4D18                   SHLL8       R13
    000003EA              L71:
             tskeep.c       1130        {
             tskeep.c       1131            err = init_page( SPI_SSL2, i );
    000003EA E402                   MOV         #2,R4      ; H'00000002
    000003EC B07E                   BSR         __$init_page
    000003EE 65E3                   MOV         R14,R5
             tskeep.c       1132            if( err ) return err;
    000003F0 2008                   TST         R0,R0
    000003F2 8B03                   BF          L73
    000003F4 7E01                   ADD         #1,R14
    000003F6 3ED3                   CMP/GE      R13,R14
    000003F8 8FF7                   BF/S        L71
    000003FA E000                   MOV         #0,R0      ; H'00000000
    000003FC              L73:
    000003FC 4DF4                   MOVMU.L     @R15+,R13
             tskeep.c       1133        }
             tskeep.c       1134        return E_SUCCESS;
             tskeep.c       1135    }
    000003FE 006B                   RTS/N
             tskeep.c       1136    
             tskeep.c       1137    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1138      機能：データの書き込み
             tskeep.c       1139      引数：pno         ページ番号
             tskeep.c       1140            buf         書き込むデータ(1-120)
             tskeep.c       1141            len         データの長さ
             tskeep.c       1142            nopowchk    TRUE:電源OFFチェックなし、FALSE:電源OFFチェックあり
             tskeep.c       1143      戻値：エラーコード
             tskeep.c       1144    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1145    ER eeprom_write( INT pno, const B* buff, INT len )
    00000400              _eeprom_write:                   ; function: eeprom_write
                                                           ; frame size=0
             tskeep.c       1146    {
             tskeep.c       1147        INT     err;
             tskeep.c       1148    
             tskeep.c       1149        err = write_page( pno, buff, len );
    00000400 A0BC                   BRA         __$write_page
    00000402 0009                   NOP
             tskeep.c       1150    
             tskeep.c       1151      return err;
             tskeep.c       1152    }
             tskeep.c       1153    
             tskeep.c       1154    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1155      機能：データの読込み
             tskeep.c       1156      引数：pno     ページ番号
             tskeep.c       1157            buff    読み込んだデータを格納するバッファ
             tskeep.c       1158            size    バッファのサイズ
             tskeep.c       1159            len     読み込んだサイズ
             tskeep.c       1160      戻値：エラーコード
             tskeep.c       1161    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1162    ER eeprom_read( INT pno, B* buff, INT size )
    00000404              _eeprom_read:                    ; function: eeprom_read
                                                           ; frame size=28
    00000404 49F0                   MOVMU.L     R9,@-R15
    00000406 4611                   CMP/PZ      R6
             tskeep.c       1163    {
             tskeep.c       1164        INT     err = E_SUCCESS;
    00000408 6A53                   MOV         R5,R10
    0000040A 6D43                   MOV         R4,R13
    0000040C E200                   MOV         #0,R2      ; H'00000000
             tskeep.c       1165        INT     adr;
             tskeep.c       1166      UH      cnt;
             tskeep.c       1167      UH      cntmax;
             tskeep.c       1168      INT     readsiz;
             tskeep.c       1169    
             tskeep.c       1170    #if 1
             tskeep.c       1171    
             tskeep.c       1172      adr = pno;
             tskeep.c       1173      cntmax = size / PAGEMAX ;
             tskeep.c       1174      readsiz = size % PAGEMAX;
    0000040E 6B63                   MOV         R6,R11
    00000410 8D06                   BT/S        L77
    00000412 E57F                   MOV         #127,R5    ; H'0000007F
    00000414 6BB7                   NOT         R11,R11
    00000416 7B01                   ADD         #1,R11
    00000418 2B59                   AND         R5,R11
    0000041A 6BB7                   NOT         R11,R11
    0000041C A001                   BRA         L78
    0000041E 7B01                   ADD         #1,R11
    00000420              L77:
    00000420 2B59                   AND         R5,R11
    00000422              L78:
    00000422 4611                   CMP/PZ      R6
             tskeep.c       1175    
             tskeep.c       1176      for( cnt = 0;cnt <= cntmax; cnt++,adr=adr+PAGEMAX )
    00000424 8D01                   BT/S        L80
    00000426 EC00                   MOV         #0,R12     ; H'00000000
    00000428 767F                   ADD         #127,R6
    0000042A              L80:
    0000042A E5F9                   MOV         #-7,R5     ; H'FFFFFFF9
    0000042C E980                   MOV         #-128,R9   ; H'FFFFFF80
    0000042E 465C                   SHAD        R5,R6
    00000430 6E6D                   EXTU.W      R6,R14
    00000432 A00B                   BRA         L81
    00000434 699C                   EXTU.B      R9,R9
    00000436              L82:
             tskeep.c       1177      {
             tskeep.c       1178          if(cnt == cntmax)   size = readsiz;
    00000436 36E0                   CMP/EQ      R14,R6
    00000438 8F01                   BF/S        L84
    0000043A 6693                   MOV         R9,R6
    0000043C 66B3                   MOV         R11,R6
    0000043E              L84:
             tskeep.c       1179          else                size = PAGEMAX;
             tskeep.c       1180    
             tskeep.c       1181          err = read_page( adr, buff, size );
    0000043E 65A3                   MOV         R10,R5
    00000440 7C01                   ADD         #1,R12
    00000442 64D3                   MOV         R13,R4
    00000444 B0CC                   BSR         __$read_page
    00000446 7D7F                   ADD         #127,R13
    00000448 6203                   MOV         R0,R2
    0000044A 7D01                   ADD         #1,R13
    0000044C              L81:
    0000044C 66CD                   EXTU.W      R12,R6
    0000044E 36E7                   CMP/GT      R14,R6
    00000450 8BF1                   BF          L82
    00000452 49F4                   MOVMU.L     @R15+,R9
             tskeep.c       1182      }
             tskeep.c       1183    
             tskeep.c       1184    #else
             tskeep.c       1185      int cnt;
             tskeep.c       1186      
             tskeep.c       1187      RSPI.SPCR.BIT.SPE = 1;                      // RSPI機能イネーブル : RSPI機能を有効化する
             tskeep.c       1188      for( cnt = 0; cnt < size; cnt++,pno++,buff++ )
             tskeep.c       1189      {
             tskeep.c       1190          read_eeprom_1byte((INT)pno, (B *)buff);
             tskeep.c       1191      }
             tskeep.c       1192    
             tskeep.c       1193    #endif
             tskeep.c       1194      return err;
             tskeep.c       1195    }
    00000454 027B                   RTV/N       R2
             tskeep.c       1196    static void read_eeprom_1byte(INT addr, B *data )
             tskeep.c       1197    {
             tskeep.c       1198      // 読み込み
             tskeep.c       1199      RSPI.SPCMD0.BIT.SPB = 2;                    // RSPIデータ長設定 : 32ビット
             tskeep.c       1200      RSPI.SPSR.BIT.OVRF = 0;                     // オーバランエラーフラグをクリアする
             tskeep.c       1201      RSPI.SPSR.BIT.SPRF = 0;                     // これで受信の準備を行う
             tskeep.c       1202      RSPI.SPDR.LONG = ( (INT)CMD_READ_ARRAY << 24 ) | ( (INT)addr << 8 ) | 0x00; 
             tskeep.c       1203      RSPI.SPSR.BIT.SPTEF = 0;                    // これで送信が開始される
             tskeep.c       1204      dly_tsk(DLY_10M);
             tskeep.c       1205      
             tskeep.c       1206      // 読み込んだデータを取得する
             tskeep.c       1207      *data = RSPI.SPDR.LONG;
             tskeep.c       1208    }
             tskeep.c       1209    /*=================================================================================================
             tskeep.c       1210      ローカル関数
             tskeep.c       1211    =================================================================================================*/
             tskeep.c       1212    
             tskeep.c       1213    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1214      機能：書き込み許可
             tskeep.c       1215      引数：ssl     SPIの/CS番号
             tskeep.c       1216      戻値：エラーコード
             tskeep.c       1217    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1218    static ER write_enable( INT ssl )
    00000456              __$write_enable:                 ; function: __$write_enable
                                                           ; frame size=8
    00000456 4F22                   STS.L       PR,@-R15
    00000458 7FFC                   ADD         #-4,R15
             tskeep.c       1219    {
             tskeep.c       1220        B    cmd;
             tskeep.c       1221        ER     err;
             tskeep.c       1222    
             tskeep.c       1223        cmd = CMD_WRITE_ENABLE;
    0000045A E106                   MOV         #6,R1      ; H'00000006
    0000045C E601                   MOV         #1,R6      ; H'00000001
    0000045E 2F10                   MOV.B       R1,@R15    ; cmd
             tskeep.c       1224        err = spi_send( ssl, &cmd, 1 );
    00000460 D720                   MOV.L       L138+84,R7 ; _spi_send
    00000462 470B                   JSR         @R7
    00000464 65F3                   MOV         R15,R5
    00000466 7F04                   ADD         #4,R15
    00000468 4F26                   LDS.L       @R15+,PR
             tskeep.c       1225        return err;
             tskeep.c       1226    }
    0000046A 006B                   RTS/N
             tskeep.c       1227    
             tskeep.c       1228    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1229      機能：書き込み禁止
             tskeep.c       1230      引数：ssl     SPIの/CS番号
             tskeep.c       1231      戻値：エラーコード
             tskeep.c       1232    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1233    static ER write_disable( INT ssl )
             tskeep.c       1234    {
             tskeep.c       1235        B    cmd;
             tskeep.c       1236        ER     err;
             tskeep.c       1237    
             tskeep.c       1238        cmd = CMD_WRITE_DISABLE;
             tskeep.c       1239        err = spi_send( ssl, &cmd, 1 );
             tskeep.c       1240        return err;
             tskeep.c       1241    }
             tskeep.c       1242    
             tskeep.c       1243    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1244      機能：ビジー待ち
             tskeep.c       1245      引数：ssl     SPIの/CS番号
             tskeep.c       1246      戻値：エラーコード
             tskeep.c       1247    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1248    static ER busy_wait( INT ssl )
    0000046C              __$busy_wait:                    ; function: __$busy_wait
                                                           ; frame size=8
    0000046C 4F22                   STS.L       PR,@-R15
    0000046E 7FFC                   ADD         #-4,R15
             tskeep.c       1249    {
             tskeep.c       1250        ER     err;
             tskeep.c       1251      B   rty = 0;
             tskeep.c       1252      B   sts;
             tskeep.c       1253    
             tskeep.c       1254        err = read_status( ssl, &sts );
    00000470 B0C5                   BSR         __$read_status
    00000472 65F3                   MOV         R15,R5
             tskeep.c       1255        if( err ) return err;
    00000474 2008                   TST         R0,R0
    00000476 8B08                   BF          L88
    00000478 A003                   BRA         L89
    0000047A 0009                   NOP
    0000047C              L90:
             tskeep.c       1256    
             tskeep.c       1257      while( 0 != ( sts & STS_MASK_BUSY ) )
             tskeep.c       1258      {
             tskeep.c       1259          rty++;
             tskeep.c       1260          if( rty > SPI_TIMOUT)
             tskeep.c       1261          {
             tskeep.c       1262              return E_COM_SPITMO;
             tskeep.c       1263          }
             tskeep.c       1264          dly_tsk(DLY_10M);
    0000047C D21A                   MOV.L       L138+88,R2 ; _v4_dly_tsk
    0000047E 420B                   JSR         @R2
    00000480 E40A                   MOV         #10,R4     ; H'0000000A
    00000482              L89:
    00000482 3F093000               BLD.B       #0,@(0,R15); sts
    00000486 89F9                   BT          L90
             tskeep.c       1265      }
             tskeep.c       1266        return E_SUC;
    00000488 E000                   MOV         #0,R0      ; H'00000000
    0000048A              L88:
    0000048A 7F04                   ADD         #4,R15
    0000048C 4F26                   LDS.L       @R15+,PR
             tskeep.c       1267    }
    0000048E 006B                   RTS/N
    00000490              L138:
    00000490 <00000000>             .DATA.L     __$page
    00000494 <00000000>             .DATA.L     __$pnter_a
    00000498 <00000000>             .DATA.L     _Get_pcnt
    0000049C <00000000>             .DATA.L     __$inf2
    000004A0 <00000000>             .DATA.L     __$Prtinf
    000004A4 <00000000>             .DATA.L     __$staadr
    000004A8 <00000000>             .DATA.L     __$dbgbytcnt
    000004AC <00000000>             .DATA.L     __$dbgpagecnt
    000004B0 <00000000>             .DATA.L     __$dbgadr
    000004B4 <00000000>             .DATA.L     __$dbgpnter
    000004B8 <00000000>             .DATA.L     __$pnter
    000004BC <00000000>             .DATA.L     __$dbgpage
    000004C0 <00000000>             .DATA.L     __$Page2
    000004C4 <00000000>             .DATA.L     __$Page3
    000004C8 <00000000>             .DATA.L     __$Page4
    000004CC <00000000>             .DATA.L     __$Page7
    000004D0 <00000000>             .DATA.L     __$Page8
    000004D4 <00000000>             .DATA.L     __$Page9
    000004D8 <00000000>             .DATA.L     __$writebufwk
    000004DC <00000000>             .DATA.L     _memcpy
    000004E0 <00000000>             .DATA.L     _CmdEndResponse
    000004E4 <00000000>             .DATA.L     _spi_send
    000004E8 <00000000>             .DATA.L     _v4_dly_tsk
             tskeep.c       1268    
             tskeep.c       1269    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1270      機能：ページの初期化
             tskeep.c       1271      引数：ssl     SPIの/CS番号
             tskeep.c       1272            pno     ページ番号
             tskeep.c       1273      戻値：エラーコード
             tskeep.c       1274    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1275    static ER init_page( INT ssl, INT pno )
    000004EC              __$init_page:                    ; function: __$init_page
                                                           ; frame size=12
    000004EC 4DF0                   MOVMU.L     R13,@-R15
    000004EE EE80                   MOV         #-128,R14  ; H'FFFFFF80
    000004F0 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    000004F2 6EEC                   EXTU.B      R14,R14
             tskeep.c       1276    {
             tskeep.c       1277        ER     err;
             tskeep.c       1278        UH    adr;
             tskeep.c       1279    
             tskeep.c       1280        etc_memset( eepbuf.format.data, sizeof( eepbuf.format.data ), 0xFF );
    000004F4 6D53                   MOV         R5,R13
    000004F6 D499                   MOV.L       L139+2,R4  ; H'00000003+__$eepbuf
    000004F8 B08E                   BSR         _etc_memset
    000004FA 65E3                   MOV         R14,R5
    000004FC E500                   MOV         #0,R5      ; H'00000000
             tskeep.c       1281    
             tskeep.c       1282        adr = (UH)pno;
             tskeep.c       1283        err = write_bytes( adr, NULL,sizeof( eepbuf.format.data ) );
    000004FE 64D3                   MOV         R13,R4
    00000500 B005                   BSR         __$write_bytes
    00000502 66E3                   MOV         R14,R6
             tskeep.c       1284        if( err ) return err;
    00000504 2008                   TST         R0,R0
    00000506 8B00                   BF          L94
             tskeep.c       1285    
             tskeep.c       1286        return E_SUCCESS;
    00000508 E000                   MOV         #0,R0      ; H'00000000
    0000050A              L94:
    0000050A 4DF4                   MOVMU.L     @R15+,R13
             tskeep.c       1287    }
    0000050C 006B                   RTS/N
             tskeep.c       1288    
             tskeep.c       1289    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1290      機能：データの書き込み
             tskeep.c       1291      引数：ssl         SPIの/CS番号
             tskeep.c       1292            adr         アドレス(ページの先頭アドレス)
             tskeep.c       1293            buf         書き込むデータ  (NULLを指定するとeepbufの内容を使用する)
             tskeep.c       1294            len         データの長さ
             tskeep.c       1295            nopowchk    TRUE:電源OFFチェックなし、FALSE:電源OFFチェックあり
             tskeep.c       1296      戻値：エラーコード
             tskeep.c       1297    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1298    static ER write_bytes( UH adr, B* buff, INT len )
    0000050E              __$write_bytes:                  ; function: __$write_bytes
                                                           ; frame size=8
    0000050E 4EF0                   MOVMU.L     R14,@-R15
             tskeep.c       1299    {
             tskeep.c       1300        ER     err;
             tskeep.c       1301    
             tskeep.c       1302        // EEPROMのコマンド
             tskeep.c       1303        eepbuf.format.cmd.cmd  = CMD_WRITE_ARRAY;
             tskeep.c       1304        eepbuf.format.cmd.adrh = (B)((adr >>  8) & 0xff);
    00000510 604D                   EXTU.W      R4,R0
    00000512 E2F8                   MOV         #-8,R2     ; H'FFFFFFF8
    00000514 E102                   MOV         #2,R1      ; H'00000002
    00000516 402C                   SHAD        R2,R0
    00000518 D591                   MOV.L       L139+6,R5  ; __$eepbuf
    0000051A 2510                   MOV.B       R1,@R5     ; eepbuf.format.cmd.cmd
    0000051C 6E63                   MOV         R6,R14
    0000051E 8051                   MOV.B       R0,@(1,R5) ; eepbuf.format.cmd.adrh
             tskeep.c       1305        eepbuf.format.cmd.adrl = (B)( adr        & 0xff);
    00000520 6043                   MOV         R4,R0
    00000522 8052                   MOV.B       R0,@(2,R5) ; eepbuf.format.cmd.adrl
             tskeep.c       1306    
             tskeep.c       1307      err = write_enable( SPI_SSL2 );
    00000524 BF97                   BSR         __$write_enable
    00000526 6413                   MOV         R1,R4
             tskeep.c       1308        if( err ) return err;
    00000528 2008                   TST         R0,R0
    0000052A 8F0F                   BF/S        L97
    0000052C 6203                   MOV         R0,R2
             tskeep.c       1309        err = spi_send( SPI_SSL2, eepbuf.buff, sizeof( tEEPCMD ) + len );
    0000052E 7E03                   ADD         #3,R14
    00000530 E402                   MOV         #2,R4      ; H'00000002
    00000532 D58B                   MOV.L       L139+6,R5  ; __$eepbuf
    00000534 D78B                   MOV.L       L139+10,R7 ; _spi_send
    00000536 470B                   JSR         @R7
    00000538 66E3                   MOV         R14,R6
             tskeep.c       1310        if( err ) return err;
    0000053A 2008                   TST         R0,R0
    0000053C 8F06                   BF/S        L97
    0000053E 6203                   MOV         R0,R2
             tskeep.c       1311        err = busy_wait( SPI_SSL2 );
    00000540 BF94                   BSR         __$busy_wait
    00000542 E402                   MOV         #2,R4      ; H'00000002
             tskeep.c       1312        if( err ) return err;
    00000544 2008                   TST         R0,R0
    00000546 6203                   MOV         R0,R2
    00000548 8D01                   BT/S        L99
    0000054A E000                   MOV         #0,R0      ; H'00000000
    0000054C              L97:
    0000054C 6023                   MOV         R2,R0
    0000054E              L99:
    0000054E 4EF4                   MOVMU.L     @R15+,R14
             tskeep.c       1313    
             tskeep.c       1314        return E_SUCCESS;
             tskeep.c       1315    }
    00000550 006B                   RTS/N
             tskeep.c       1316    
             tskeep.c       1317    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1318      機能：データの読込み
             tskeep.c       1319      引数：ssl     SPIの/CS番号
             tskeep.c       1320            adr     アドレス(ページの先頭アドレス)
             tskeep.c       1321            buff    読み込んだデータを格納するバッファ(NULL指定可能)
             tskeep.c       1322            size    バッファのサイズ
             tskeep.c       1323            len     読み込んだサイズ
             tskeep.c       1324      戻値：エラーコード
             tskeep.c       1325    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1326    static ER read_bytes( UH adr, B* buff, INT size )
    00000552              __$read_bytes:                   ; function: __$read_bytes
                                                           ; frame size=4
    00000552 4F22                   STS.L       PR,@-R15
             tskeep.c       1327    {
             tskeep.c       1328        ER     err;
             tskeep.c       1329    
             tskeep.c       1330        // EEPROMのコマンド
             tskeep.c       1331        eepbuf.format.cmd.cmd  = CMD_READ_ARRAY;
             tskeep.c       1332        eepbuf.format.cmd.adrh = (B)((adr >>  8) & 0xff);
    00000554 604D                   EXTU.W      R4,R0
    00000556 E5F8                   MOV         #-8,R5     ; H'FFFFFFF8
    00000558 E103                   MOV         #3,R1      ; H'00000003
    0000055A 405C                   SHAD        R5,R0
    0000055C D280                   MOV.L       L139+6,R2  ; __$eepbuf
    0000055E 2210                   MOV.B       R1,@R2     ; eepbuf.format.cmd.cmd
    00000560 8021                   MOV.B       R0,@(1,R2) ; eepbuf.format.cmd.adrh
             tskeep.c       1333        eepbuf.format.cmd.adrl = (B)( adr        & 0xff);
    00000562 6043                   MOV         R4,R0
    00000564 8022                   MOV.B       R0,@(2,R2) ; eepbuf.format.cmd.adrl
    00000566 6763                   MOV         R6,R7
             tskeep.c       1334    
             tskeep.c       1335        // 読み込み
             tskeep.c       1336        err = spi_send_recv( (B*)    &eepbuf.format.cmd
             tskeep.c       1337                            , sizeof( eepbuf.format.cmd )
             tskeep.c       1338                            , (B*)   &eepbuf.format.data
             tskeep.c       1339                            , size);
    00000568 D67C                   MOV.L       L139+2,R6  ; H'00000003+__$eepbuf
    0000056A D47D                   MOV.L       L139+6,R4  ; __$eepbuf
    0000056C D27E                   MOV.L       L139+14,R2 ; _spi_send_recv
    0000056E 420B                   JSR         @R2
    00000570 E503                   MOV         #3,R5      ; H'00000003
             tskeep.c       1340    
             tskeep.c       1341      
             tskeep.c       1342      if( err ) return err;
    00000572 2008                   TST         R0,R0
    00000574 8B00                   BF          L102
             tskeep.c       1343    
             tskeep.c       1344      return E_SUCCESS;
    00000576 E000                   MOV         #0,R0      ; H'00000000
    00000578              L102:
    00000578 4F26                   LDS.L       @R15+,PR
             tskeep.c       1345    }
    0000057A 006B                   RTS/N
             tskeep.c       1346    
             tskeep.c       1347    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1348      機能：データの書き込み(１ページ:120バイト)
             tskeep.c       1349      引数：ssl         SPIの/CS番号
             tskeep.c       1350            pno         ページ番号
             tskeep.c       1351            buf         書き込むデータ(NULLを指定するとeepbufの内容を使用する)
             tskeep.c       1352            len         データの長さ
             tskeep.c       1353            nopowchk    TRUE:電源OFFチェックなし、FALSE:電源OFFチェックあり
             tskeep.c       1354      戻値：エラーコード
             tskeep.c       1355    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1356    static ER write_page( INT pno, B* buff, INT len )
    0000057C              __$write_page:                   ; function: __$write_page
                                                           ; frame size=20
    0000057C 4BF0                   MOVMU.L     R11,@-R15
             tskeep.c       1357    {
             tskeep.c       1358    //k    ER     err = E_ERR;
             tskeep.c       1359        ER     err = E_SUCCESS;
             tskeep.c       1360        UH    adr;
             tskeep.c       1361    
             tskeep.c       1362        adr = (UH)pno;
             tskeep.c       1363    
             tskeep.c       1364        if( buff )
    0000057E 2558                   TST         R5,R5
    00000580 6D63                   MOV         R6,R13
    00000582 6E53                   MOV         R5,R14
    00000584 E200                   MOV         #0,R2      ; H'00000000
    00000586 8D10                   BT/S        L105
    00000588 6B43                   MOV         R4,R11
    0000058A EC80                   MOV         #-128,R12  ; H'FFFFFF80
    0000058C E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    0000058E 6CCC                   EXTU.B      R12,R12
             tskeep.c       1365        {
             tskeep.c       1366            etc_memset( eepbuf.format.data, sizeof( eepbuf.format.data ), 0xFF );
    00000590 D472                   MOV.L       L139+2,R4  ; H'00000003+__$eepbuf
    00000592 B041                   BSR         _etc_memset
    00000594 65C3                   MOV         R12,R5
             tskeep.c       1367            etc_memcpy( eepbuf.format.data, sizeof( eepbuf.format.data ), buff, len );
    00000596 D471                   MOV.L       L139+2,R4  ; H'00000003+__$eepbuf
    00000598 66E3                   MOV         R14,R6
    0000059A 67D3                   MOV         R13,R7
    0000059C B044                   BSR         _etc_memcpy
    0000059E 65C3                   MOV         R12,R5
             tskeep.c       1368          err = write_bytes( adr, buff, sizeof( eepbuf.format.data ) );
    000005A0 65E3                   MOV         R14,R5
    000005A2 64B3                   MOV         R11,R4
    000005A4 BFB3                   BSR         __$write_bytes
    000005A6 66C3                   MOV         R12,R6
    000005A8 6203                   MOV         R0,R2
    000005AA              L105:
    000005AA 4BF4                   MOVMU.L     @R15+,R11
             tskeep.c       1369        }
             tskeep.c       1370    
             tskeep.c       1371      return err;
             tskeep.c       1372    }
    000005AC 027B                   RTV/N       R2
             tskeep.c       1373    static ER write_byte_len( INT pno, B* buff, INT len )
    000005AE              __$write_byte_len:               ; function: __$write_byte_len
                                                           ; frame size=16
    000005AE 4CF0                   MOVMU.L     R12,@-R15
             tskeep.c       1374    {
             tskeep.c       1375    //k    ER     err = E_ERR;
             tskeep.c       1376        ER     err = E_SUCCESS;
             tskeep.c       1377        UH    adr;
             tskeep.c       1378    
             tskeep.c       1379        adr = (UH)pno;
             tskeep.c       1380    
             tskeep.c       1381        if( buff )
    000005B0 2558                   TST         R5,R5
    000005B2 6D63                   MOV         R6,R13
    000005B4 6E53                   MOV         R5,R14
    000005B6 E200                   MOV         #0,R2      ; H'00000000
    000005B8 8D10                   BT/S        L108
    000005BA 6C43                   MOV         R4,R12
    000005BC E580                   MOV         #-128,R5   ; H'FFFFFF80
    000005BE E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
             tskeep.c       1382        {
             tskeep.c       1383            etc_memset( eepbuf.format.data, sizeof( eepbuf.format.data ), 0xFF );
    000005C0 D466                   MOV.L       L139+2,R4  ; H'00000003+__$eepbuf
    000005C2 B029                   BSR         _etc_memset
    000005C4 655C                   EXTU.B      R5,R5
    000005C6 E580                   MOV         #-128,R5   ; H'FFFFFF80
             tskeep.c       1384            etc_memcpy( eepbuf.format.data, sizeof( eepbuf.format.data ), buff, len );
    000005C8 66E3                   MOV         R14,R6
    000005CA 655C                   EXTU.B      R5,R5
    000005CC D463                   MOV.L       L139+2,R4  ; H'00000003+__$eepbuf
    000005CE B02B                   BSR         _etc_memcpy
    000005D0 67D3                   MOV         R13,R7
             tskeep.c       1385          err = write_bytes( adr, buff, len );
    000005D2 65E3                   MOV         R14,R5
    000005D4 66D3                   MOV         R13,R6
    000005D6 BF9A                   BSR         __$write_bytes
    000005D8 64C3                   MOV         R12,R4
    000005DA 6203                   MOV         R0,R2
    000005DC              L108:
    000005DC 4CF4                   MOVMU.L     @R15+,R12
             tskeep.c       1386        }
             tskeep.c       1387    
             tskeep.c       1388      return err;
             tskeep.c       1389    }
    000005DE 027B                   RTV/N       R2
             tskeep.c       1390    
             tskeep.c       1391    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1392      機能：データの読込み
             tskeep.c       1393      引数：ssl     SPIの/CS番号
             tskeep.c       1394            pno     ページ番号
             tskeep.c       1395            buff    読み込んだデータを格納するバッファ
             tskeep.c       1396            size    バッファのサイズ
             tskeep.c       1397            len     [out]読み込んだサイズ(0-120)
             tskeep.c       1398      戻値：エラーコード
             tskeep.c       1399    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1400    static ER      read_page( INT pno, B* buff, INT size )
    000005E0              __$read_page:                    ; function: __$read_page
                                                           ; frame size=12
    000005E0 4DF0                   MOVMU.L     R13,@-R15
    000005E2 6D53                   MOV         R5,R13
    000005E4 E500                   MOV         #0,R5      ; H'00000000
             tskeep.c       1401    {
             tskeep.c       1402        ER     err;
             tskeep.c       1403        UH    adr;
             tskeep.c       1404        adr  = (UH)pno;
             tskeep.c       1405    
             tskeep.c       1406        // １ページ読み込み
             tskeep.c       1407        err = read_bytes( adr, NULL, size );
    000005E6 BFB4                   BSR         __$read_bytes
    000005E8 6E63                   MOV         R6,R14
             tskeep.c       1408        if( err ) return err;
    000005EA 2008                   TST         R0,R0
    000005EC 8B05                   BF          L111
             tskeep.c       1409    
             tskeep.c       1410      memcpy( buff, eepbuf.format.data, size );
    000005EE D55B                   MOV.L       L139+2,R5  ; H'00000003+__$eepbuf
    000005F0 64D3                   MOV         R13,R4
    000005F2 D25E                   MOV.L       L139+18,R2 ; _memcpy
    000005F4 420B                   JSR         @R2
    000005F6 66E3                   MOV         R14,R6
             tskeep.c       1411    
             tskeep.c       1412        return E_SUCCESS;
    000005F8 E000                   MOV         #0,R0      ; H'00000000
    000005FA              L111:
    000005FA 4DF4                   MOVMU.L     @R15+,R13
             tskeep.c       1413    }
    000005FC 006B                   RTS/N
             tskeep.c       1414    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1415      機能：ステータス読込み
             tskeep.c       1416      引数：ssl     SPIの/CS番号
             tskeep.c       1417      引数：sts     [out]読み込んだステータス
             tskeep.c       1418      戻値：エラーコード
             tskeep.c       1419    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1420    static ER read_status( INT ssl, B* sts )
    000005FE              __$read_status:                  ; function: __$read_status
                                                           ; frame size=8
    000005FE 4F22                   STS.L       PR,@-R15
    00000600 7FFC                   ADD         #-4,R15
    00000602 E105                   MOV         #5,R1      ; H'00000005
    00000604 E701                   MOV         #1,R7      ; H'00000001
    00000606 2F10                   MOV.B       R1,@R15    ; cmd
             tskeep.c       1421    {
             tskeep.c       1422        ER     err;
             tskeep.c       1423        B    cmd;
             tskeep.c       1424    
             tskeep.c       1425        cmd = CMD_READ_STATUS;
    00000608 6653                   MOV         R5,R6
             tskeep.c       1426        err = spi_send_recv(&cmd, 1, sts, 1 );
    0000060A 64F3                   MOV         R15,R4
    0000060C D256                   MOV.L       L139+14,R2 ; _spi_send_recv
    0000060E 420B                   JSR         @R2
    00000610 6573                   MOV         R7,R5
    00000612 7F04                   ADD         #4,R15
    00000614 4F26                   LDS.L       @R15+,PR
             tskeep.c       1427        return err;
             tskeep.c       1428    }
    00000616 006B                   RTS/N
             tskeep.c       1429    
             tskeep.c       1430    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1431      機能：ステータス書き込み
             tskeep.c       1432      引数：ssl     SPIの/CS番号
             tskeep.c       1433            sts     書き込むステータス
             tskeep.c       1434      戻値：エラーコード
             tskeep.c       1435    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1436    static ER write_status( INT ssl, B sts )
             tskeep.c       1437    {
             tskeep.c       1438        B    comd[2];
             tskeep.c       1439        ER     err;
             tskeep.c       1440    
             tskeep.c       1441        comd[0] = CMD_WRITE_STATUS;
             tskeep.c       1442        comd[1] = sts;
             tskeep.c       1443    
             tskeep.c       1444        err = write_enable( ssl );
             tskeep.c       1445        if( err ) return err;
             tskeep.c       1446        err = spi_send( ssl, comd, sizeof( comd ) );
             tskeep.c       1447        if( err ) return err;
             tskeep.c       1448        err = busy_wait( ssl );
             tskeep.c       1449        if( err ) return err;
             tskeep.c       1450        return E_SUCCESS;
             tskeep.c       1451    }
             tskeep.c       1452    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1453      機能：データのセット
             tskeep.c       1454      引数：buff        データをセットするバッファ
             tskeep.c       1455            bufsi       データをセットするバッファのサイズ
             tskeep.c       1456            chr         セットするデータ
             tskeep.c       1457      戻値：なし
             tskeep.c       1458    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1459    void etc_memset( B* buff, INT bufsiz, B chr )
    00000618              _etc_memset:                     ; function: etc_memset
                                                           ; frame size=0
             tskeep.c       1460    {
             tskeep.c       1461        INT i;
             tskeep.c       1462    
             tskeep.c       1463        for( i = 0; i < bufsiz; i++ )
    00000618 A003                   BRA         L114
    0000061A E200                   MOV         #0,R2      ; H'00000000
    0000061C              L115:
             tskeep.c       1464        {
             tskeep.c       1465            *buff = chr;
    0000061C 6063                   MOV         R6,R0
    0000061E 448B                   MOV.B       R0,@R4+    ; *(buff)
    00000620 7201                   ADD         #1,R2
    00000622              L114:
    00000622 3253                   CMP/GE      R5,R2
    00000624 8BFA                   BF          L115
             tskeep.c       1466            buff++;
             tskeep.c       1467        }
             tskeep.c       1468    }
    00000626 006B                   RTS/N
             tskeep.c       1469    
             tskeep.c       1470    /*-------------------------------------------------------------------------------------------------
             tskeep.c       1471      機能：データのコピー
             tskeep.c       1472      引数：dbuf        コピー先バッファ
             tskeep.c       1473            dsiz        コピー先バッファのサイズ
             tskeep.c       1474            sbuf        コピー元バッファ
             tskeep.c       1475            ssiz        コピーサイズ
             tskeep.c       1476      戻値：コピーしたサイズ
             tskeep.c       1477    -------------------------------------------------------------------------------------------------*/
             tskeep.c       1478    INT etc_memcpy( B* dbuf, INT dsiz, const B* sbuf, INT ssiz )
    00000628              _etc_memcpy:                     ; function: etc_memcpy
                                                           ; frame size=0
    00000628 3577                   CMP/GT      R7,R5
             tskeep.c       1479    {
             tskeep.c       1480        INT     siz;
             tskeep.c       1481        INT     i;
             tskeep.c       1482    
             tskeep.c       1483        if( dsiz > ssiz )
    0000062A 8F01                   BF/S        L119
    0000062C 6163                   MOV         R6,R1
             tskeep.c       1484        {
             tskeep.c       1485            siz = ssiz;
    0000062E 6573                   MOV         R7,R5
    00000630              L119:
             tskeep.c       1486        }
             tskeep.c       1487        else
             tskeep.c       1488        {
             tskeep.c       1489            siz = dsiz;
             tskeep.c       1490        }
             tskeep.c       1491    
             tskeep.c       1492        for( i = 0; i < siz; i++ )
    00000630 A003                   BRA         L120
    00000632 E600                   MOV         #0,R6      ; H'00000000
    00000634              L121:
             tskeep.c       1493        {
             tskeep.c       1494            *dbuf = *sbuf;
    00000634 6014                   MOV.B       @R1+,R0    ; *(sbuf)
    00000636 7601                   ADD         #1,R6
    00000638 448B                   MOV.B       R0,@R4+    ; *(dbuf)
    0000063A              L120:
    0000063A 3653                   CMP/GE      R5,R6
    0000063C 8BFA                   BF          L121
             tskeep.c       1495            dbuf++;
             tskeep.c       1496            sbuf++;
             tskeep.c       1497        }
             tskeep.c       1498        return siz;
             tskeep.c       1499    }
    0000063E 057B                   RTV/N       R5
             tskeep.c       1500    /***********************************************************************
             tskeep.c       1501    * 
             tskeep.c       1502    * [概要]ユーザー情報
             tskeep.c       1503    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1504    * 
             tskeep.c       1505    * 
             tskeep.c       1506    ***********************************************************************/
             tskeep.c       1507    ER    eep_GetAllInfo( UB *getdat  )
    00000640              _eep_GetAllInfo:                 ; function: eep_GetAllInfo
                                                           ; frame size=4
    00000640 4F22                   STS.L       PR,@-R15
             tskeep.c       1508    {
             tskeep.c       1509      ER  result = E_SUCCESS;
             tskeep.c       1510      int datasiz;
             tskeep.c       1511    
             tskeep.c       1512    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1513    
             tskeep.c       1514    //    datasiz = sizeof( ST_PAGE1 ) + sizeof( ST_PAGE2 ) + sizeof( ST_PAGE3 ) + sizeof( ST_PAGE4 ) + sizeof( ST_PAGE5 ) + sizeof( ST_PAGE6 ) + sizeof( ST_PAGE7 ) + sizeof( ST_PAGE8 ) + sizeof( ST_PAGE9 ) + sizeof( ST_PAGE10 ) ;
             tskeep.c       1515      datasiz = sizeof( ST_PAGE1 ) + sizeof( ST_PAGE2 ) + sizeof( ST_PAGE3 ) + sizeof( ST_PAGE4 ) +  sizeof( ST_PAGE8 ) + sizeof( ST_PAGE9 ) + sizeof( ST_PAGE10 ) ;
             tskeep.c       1516      memcpy( getdat, &Page1.User[0].Id[0] , datasiz );
    00000642 D54B                   MOV.L       L139+22,R5 ; __$Page1
    00000644 06000380               MOVI20      #896,R6    ; H'00000380
    00000648 D248                   MOV.L       L139+18,R2 ; _memcpy
    0000064A 424B                   JSR/N       @R2
             tskeep.c       1517    
             tskeep.c       1518    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1519    
             tskeep.c       1520      return( result );
    0000064C 4F26                   LDS.L       @R15+,PR
             tskeep.c       1521    }
    0000064E 000B                   RTS
    00000650 E000                   MOV         #0,R0      ; H'00000000
             tskeep.c       1522    /***********************************************************************
             tskeep.c       1523    * 
             tskeep.c       1524    * [概要]ユーザー情報
             tskeep.c       1525    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1526    * 
             tskeep.c       1527    * 
             tskeep.c       1528    ***********************************************************************/
             tskeep.c       1529    ER    eep_GetUserInfo( UB *getdat  )
    00000652              _eep_GetUserInfo:                ; function: eep_GetUserInfo
                                                           ; frame size=4
    00000652 4F22                   STS.L       PR,@-R15
    00000654 E680                   MOV         #-128,R6   ; H'FFFFFF80
             tskeep.c       1530    {
             tskeep.c       1531      ER  result = E_SUCCESS;
             tskeep.c       1532      int datasiz;
             tskeep.c       1533    
             tskeep.c       1534    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1535    
             tskeep.c       1536      datasiz = sizeof( ST_PAGE1 );
             tskeep.c       1537      memcpy( getdat, &Page1.User[0].Id[0] , datasiz );
    00000656 D546                   MOV.L       L139+22,R5 ; __$Page1
    00000658 D244                   MOV.L       L139+18,R2 ; _memcpy
    0000065A 420B                   JSR         @R2
    0000065C 666C                   EXTU.B      R6,R6
             tskeep.c       1538    
             tskeep.c       1539    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1540    
             tskeep.c       1541      return( result );
    0000065E 4F26                   LDS.L       @R15+,PR
             tskeep.c       1542    }
    00000660 000B                   RTS
    00000662 E000                   MOV         #0,R0      ; H'00000000
             tskeep.c       1543    /***********************************************************************
             tskeep.c       1544    * 
             tskeep.c       1545    * [概要]速度パターン
             tskeep.c       1546    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1547    * 
             tskeep.c       1548    * 
             tskeep.c       1549    ***********************************************************************/
             tskeep.c       1550    ER    eep_GetSpeedData( UB *getdat  )
    00000664              _eep_GetSpeedData:               ; function: eep_GetSpeedData
                                                           ; frame size=12
    00000664 4DF0                   MOVMU.L     R13,@-R15
    00000666 E63C                   MOV         #60,R6     ; H'0000003C
             tskeep.c       1551    {
             tskeep.c       1552      ER  result = E_SUCCESS;
             tskeep.c       1553      INT datasiz;
             tskeep.c       1554      UB *adr;
             tskeep.c       1555    
             tskeep.c       1556    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1557    
             tskeep.c       1558      datasiz = (sizeof( ST_SPEED )) * 5;
             tskeep.c       1559    
             tskeep.c       1560      adr = getdat;
             tskeep.c       1561      memcpy( adr, &Page2.Y0[0].ac,  datasiz );//1
    00000668 D542                   MOV.L       L139+26,R5 ; __$Page2
    0000066A DD40                   MOV.L       L139+18,R13; _memcpy
    0000066C 4D0B                   JSR         @R13
    0000066E 6E43                   MOV         R4,R14
             tskeep.c       1562    
             tskeep.c       1563      adr += datasiz;
    00000670 7E3C                   ADD         #60,R14
    00000672 E63C                   MOV         #60,R6     ; H'0000003C
    00000674 64E3                   MOV         R14,R4
             tskeep.c       1564      memcpy( adr, &Page2.Z0[0].ac,  datasiz );//2
    00000676 D540                   MOV.L       L139+30,R5 ; H'0000003C+__$Page2
    00000678 4D0B                   JSR         @R13
    0000067A 7E3C                   ADD         #60,R14
    0000067C E63C                   MOV         #60,R6     ; H'0000003C
             tskeep.c       1565      
             tskeep.c       1566      adr += datasiz;
             tskeep.c       1567      memcpy( adr, &Page3.P0[0].ac,  datasiz );//3
    0000067E D53F                   MOV.L       L139+34,R5 ; __$Page3
    00000680 4D0B                   JSR         @R13
    00000682 64E3                   MOV         R14,R4
             tskeep.c       1568      
             tskeep.c       1569      adr += datasiz;
    00000684 7E3C                   ADD         #60,R14
    00000686 E63C                   MOV         #60,R6     ; H'0000003C
             tskeep.c       1570      memcpy( adr, &Page3.F0[0].ac,  datasiz );//4
    00000688 D53D                   MOV.L       L139+38,R5 ; H'0000003C+__$Page3
    0000068A 64E3                   MOV         R14,R4
    0000068C 4D0B                   JSR         @R13
    0000068E 7E3C                   ADD         #60,R14
    00000690 E63C                   MOV         #60,R6     ; H'0000003C
             tskeep.c       1571      
             tskeep.c       1572      adr += datasiz;
             tskeep.c       1573      memcpy( adr, &Page4.Y1[0].ac,  datasiz );//5
    00000692 D53C                   MOV.L       L139+42,R5 ; __$Page4
    00000694 4D0B                   JSR         @R13
    00000696 64E3                   MOV         R14,R4
             tskeep.c       1574      
             tskeep.c       1575      
             tskeep.c       1576      
             tskeep.c       1577      
             tskeep.c       1578    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1579    
             tskeep.c       1580      return( result );
    00000698 E000                   MOV         #0,R0      ; H'00000000
    0000069A 4DF4                   MOVMU.L     @R15+,R13
             tskeep.c       1581    }
    0000069C 006B                   RTS/N
             tskeep.c       1582    static INT datasiz_dbg;
             tskeep.c       1583    
             tskeep.c       1584    /***********************************************************************
             tskeep.c       1585    * 
             tskeep.c       1586    * [概要]速度パターン
             tskeep.c       1587    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1588    * 
             tskeep.c       1589    * 
             tskeep.c       1590    ***********************************************************************/
             tskeep.c       1591    ER    eep_GetSpeedPattern( UB *getdat  )
    0000069E              _eep_GetSpeedPattern:            ; function: eep_GetSpeedPattern
                                                           ; frame size=4
    0000069E 4F22                   STS.L       PR,@-R15
             tskeep.c       1592    {
             tskeep.c       1593      ER  result = E_SUCCESS;
             tskeep.c       1594      INT datasiz;
             tskeep.c       1595    
             tskeep.c       1596    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1597    
             tskeep.c       1598      datasiz = sizeof( ST_SPEED_PTN );
             tskeep.c       1599      memcpy( getdat, &Page4.SpPtn.Y0_SpdIniPtn,  datasiz );
    000006A0 D539                   MOV.L       L139+46,R5 ; H'0000003C+__$Page4
    000006A2 D232                   MOV.L       L139+18,R2 ; _memcpy
    000006A4 420B                   JSR         @R2
    000006A6 E644                   MOV         #68,R6     ; H'00000044
             tskeep.c       1600    
             tskeep.c       1601    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1602    
             tskeep.c       1603      return( result );
    000006A8 4F26                   LDS.L       @R15+,PR
             tskeep.c       1604    }
    000006AA 000B                   RTS
    000006AC E000                   MOV         #0,R0      ; H'00000000
             tskeep.c       1605    /***********************************************************************
             tskeep.c       1606    * 
             tskeep.c       1607    * [概要]位置情報
             tskeep.c       1608    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1609    * 
             tskeep.c       1610    * 
             tskeep.c       1611    ***********************************************************************/
             tskeep.c       1612    ER    eep_GetPositionInfo( UB *getdat  )
    000006AE              _eep_GetPositionInfo:            ; function: eep_GetPositionInfo
                                                           ; frame size=16
    000006AE 4CF0                   MOVMU.L     R12,@-R15
             tskeep.c       1613    {
             tskeep.c       1614      ER  result = E_SUCCESS;
             tskeep.c       1615      INT datasiz;
             tskeep.c       1616    
             tskeep.c       1617    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1618    
             tskeep.c       1619      datasiz = sizeof( ST_PAGE7 ) ;
             tskeep.c       1620      memcpy( getdat, &Page7.Y0_Offset,  datasiz );
    000006B0 6E43                   MOV         R4,R14
    000006B2 ED80                   MOV         #-128,R13  ; H'FFFFFF80
             tskeep.c       1621      getdat += datasiz;
    000006B4 7E7F                   ADD         #127,R14
    000006B6 6DDC                   EXTU.B      R13,R13
    000006B8 7E01                   ADD         #1,R14
    000006BA D534                   MOV.L       L139+50,R5 ; __$Page7
    000006BC DC2B                   MOV.L       L139+18,R12; _memcpy
    000006BE 4C0B                   JSR         @R12
    000006C0 66D3                   MOV         R13,R6
    000006C2 64E3                   MOV         R14,R4
    000006C4 7E7F                   ADD         #127,R14
             tskeep.c       1622    
             tskeep.c       1623      datasiz = sizeof( ST_PAGE8 ) ;
             tskeep.c       1624      memcpy( getdat, &Page8.Z0_SucStaHei1,  datasiz );
    000006C6 D532                   MOV.L       L139+54,R5 ; __$Page8
    000006C8 66D3                   MOV         R13,R6
    000006CA 4C0B                   JSR         @R12
    000006CC 7E01                   ADD         #1,R14
             tskeep.c       1625      getdat += datasiz;
             tskeep.c       1626      
             tskeep.c       1627      datasiz = sizeof( ST_PAGE9 ) ;
             tskeep.c       1628      memcpy( getdat, &Page9.Hosei[0].HS_VL1,  datasiz );
    000006CE D531                   MOV.L       L139+58,R5 ; __$Page9
    000006D0 64E3                   MOV         R14,R4
    000006D2 4C0B                   JSR         @R12
    000006D4 66D3                   MOV         R13,R6
             tskeep.c       1629      
             tskeep.c       1630      
             tskeep.c       1631    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1632    
             tskeep.c       1633      return( result );
    000006D6 E000                   MOV         #0,R0      ; H'00000000
    000006D8 4CF4                   MOVMU.L     @R15+,R12
             tskeep.c       1634    }
    000006DA 006B                   RTS/N
             tskeep.c       1635    /***********************************************************************
             tskeep.c       1636    * 
             tskeep.c       1637    * [概要]オプション情報
             tskeep.c       1638    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1639    * 
             tskeep.c       1640    * 
             tskeep.c       1641    ***********************************************************************/
             tskeep.c       1642    ER    eep_GetOptionInfo( UB *getdat  )
    000006DC              _eep_GetOptionInfo:              ; function: eep_GetOptionInfo
                                                           ; frame size=4
    000006DC 4F22                   STS.L       PR,@-R15
    000006DE E680                   MOV         #-128,R6   ; H'FFFFFF80
             tskeep.c       1643    {
             tskeep.c       1644      ER  result = E_SUCCESS;
             tskeep.c       1645      INT datasiz;
             tskeep.c       1646    
             tskeep.c       1647    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1648    
             tskeep.c       1649      datasiz = sizeof( ST_PAGE10 ) ;
             tskeep.c       1650      memcpy( getdat, &Page10.Login,  datasiz );
    000006E0 D52D                   MOV.L       L139+62,R5 ; __$Page10
    000006E2 D222                   MOV.L       L139+18,R2 ; _memcpy
    000006E4 420B                   JSR         @R2
    000006E6 666C                   EXTU.B      R6,R6
             tskeep.c       1651    
             tskeep.c       1652    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1653    
             tskeep.c       1654      return( result );
    000006E8 4F26                   LDS.L       @R15+,PR
             tskeep.c       1655    }
    000006EA 000B                   RTS
    000006EC E000                   MOV         #0,R0      ; H'00000000
             tskeep.c       1656    
             tskeep.c       1657    /***********************************************************************
             tskeep.c       1658    * 
             tskeep.c       1659    * [概要]プロトコルタイトル取得
             tskeep.c       1660    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1661    * 
             tskeep.c       1662    * 
             tskeep.c       1663    ***********************************************************************/
             tskeep.c       1664    ER    eep_GetProtocolData( UB *getdat ,  UB index )
    000006EE              _eep_GetProtocolData:            ; function: eep_GetProtocolData
                                                           ; frame size=4
    000006EE 4F22                   STS.L       PR,@-R15
             tskeep.c       1665    {
             tskeep.c       1666      ER  result = E_SUCCESS;
             tskeep.c       1667    
             tskeep.c       1668    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1669    
             tskeep.c       1670      Prtinf.Dat[index].Stp = CLR;
    000006F0 655C                   EXTU.B      R5,R5
    000006F2 E000                   MOV         #0,R0      ; H'00000000
    000006F4 4508                   SHLL2       R5
    000006F6 E680                   MOV         #-128,R6   ; H'FFFFFF80
    000006F8 D128                   MOV.L       L139+66,R1 ; __$Prtinf
    000006FA 351C                   ADD         R1,R5
    000006FC 666C                   EXTU.B      R6,R6
    000006FE 8052                   MOV.B       R0,@(2,R5) ; Dat[].Stp
             tskeep.c       1671      Prtinf.Dat[index].Prc = CLR;
             tskeep.c       1672      memcpy( getdat, &Prtinf.Dat[index].Cnt, 0x80 );
    00000700 D21A                   MOV.L       L139+18,R2 ; _memcpy
    00000702 420B                   JSR         @R2
    00000704 8051                   MOV.B       R0,@(1,R5) ; Dat[].Prc
             tskeep.c       1673    
             tskeep.c       1674    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1675    
             tskeep.c       1676      return( result );
    00000706 4F26                   LDS.L       @R15+,PR
             tskeep.c       1677    }
    00000708 000B                   RTS
    0000070A E000                   MOV         #0,R0      ; H'00000000
             tskeep.c       1678    
             tskeep.c       1679    /***********************************************************************
             tskeep.c       1680    * 
             tskeep.c       1681    * [概要]プロトコル取得
             tskeep.c       1682    * 引数：*getdat    格納先 先頭アドレス
             tskeep.c       1683    * 
             tskeep.c       1684    * 
             tskeep.c       1685    ***********************************************************************/
             tskeep.c       1686    ER    eep_GetProtocol( UB *getdat  )
    0000070C              _eep_GetProtocol:                ; function: eep_GetProtocol
                                                           ; frame size=4
    0000070C 4F22                   STS.L       PR,@-R15
             tskeep.c       1687    {
             tskeep.c       1688      ER  result = E_SUCCESS;
             tskeep.c       1689    
             tskeep.c       1690    //    MAC_WAI_SEM( ID_SEM_HDMOV );
             tskeep.c       1691    
             tskeep.c       1692      memcpy( getdat, &Prtwk, sizeof( ST_PROTCOL ) );
    0000070E D524                   MOV.L       L139+70,R5 ; __$Prtwk
    00000710 06000640               MOVI20      #1600,R6   ; H'00000640
    00000714 D215                   MOV.L       L139+18,R2 ; _memcpy
    00000716 424B                   JSR/N       @R2
             tskeep.c       1693    
             tskeep.c       1694    //    MAC_SIG_SEM( ID_SEM_HDMOV );
             tskeep.c       1695    
             tskeep.c       1696      return( result );
    00000718 4F26                   LDS.L       @R15+,PR
             tskeep.c       1697    }
    0000071A 000B                   RTS
    0000071C E000                   MOV         #0,R0      ; H'00000000
             tskeep.c       1698    /******************************************************************************
             tskeep.c       1699    * 
             tskeep.c       1700    * [概要]  EEPROM読込み済みセット
             tskeep.c       1701    * [引数]  対象ビット
             tskeep.c       1702    * [戻値]  −
             tskeep.c       1703    * 
             tskeep.c       1704    ******************************************************************************/
             tskeep.c       1705    void EepBitSet( int dat )
    0000071E              _EepBitSet:                      ; function: EepBitSet
                                                           ; frame size=0
             tskeep.c       1706    {
             tskeep.c       1707      eepread_page |= dat;
    0000071E D621                   MOV.L       L139+74,R6 ; __$eepread_page
    00000720 6262                   MOV.L       @R6,R2     ; eepread_page
    00000722 224B                   OR          R4,R2
             tskeep.c       1708    }
    00000724 000B                   RTS
    00000726 2622                   MOV.L       R2,@R6     ; eepread_page
             tskeep.c       1709    /******************************************************************************
             tskeep.c       1710    * 
             tskeep.c       1711    * [概要]  EEPROM読込み済みクリア
             tskeep.c       1712    * [引数]  対象ビット
             tskeep.c       1713    * [戻値]  −
             tskeep.c       1714    * 
             tskeep.c       1715    ******************************************************************************/
             tskeep.c       1716    void EepBitClr( int dat )
    00000728              _EepBitClr:                      ; function: EepBitClr
                                                           ; frame size=0
    00000728 D51E                   MOV.L       L139+74,R5 ; __$eepread_page
    0000072A 6652                   MOV.L       @R5,R6     ; eepread_page
             tskeep.c       1717    {
             tskeep.c       1718      eepread_page &= (0xffffffff ^ dat);
    0000072C 6447                   NOT         R4,R4
    0000072E 2649                   AND         R4,R6
             tskeep.c       1719    }
    00000730 000B                   RTS
    00000732 2562                   MOV.L       R6,@R5     ; eepread_page
             tskeep.c       1720    /******************************************************************************
             tskeep.c       1721    * 
             tskeep.c       1722    * [概要]  読込み済みか確認
             tskeep.c       1723    * [引数]  対象ビット
             tskeep.c       1724    * [戻値]  TRUE:読込み済み
             tskeep.c       1725    * 
             tskeep.c       1726    ******************************************************************************/
             tskeep.c       1727    BOOL EepBitGet( int dat )
    00000734              _EepBitGet:                      ; function: EepBitGet
                                                           ; frame size=0
             tskeep.c       1728    {
             tskeep.c       1729      int wk;
             tskeep.c       1730      
             tskeep.c       1731      wk = eepread_page & dat;
             tskeep.c       1732      if( wk )    return( TRUE );
    00000734 D61B                   MOV.L       L139+74,R6 ; __$eepread_page
    00000736 6262                   MOV.L       @R6,R2     ; eepread_page
    00000738 2248                   TST         R4,R2
             tskeep.c       1733      
             tskeep.c       1734      return( FALSE );
             tskeep.c       1735    }
    0000073A 000B                   RTS
    0000073C 0039                   MOVRT       R0
             tskeep.c       1736    /******************************************************************************
             tskeep.c       1737    * 
             tskeep.c       1738    * [概要]  EEPROM読込み済みクリア
             tskeep.c       1739    * [引数]  対象ビット
             tskeep.c       1740    * [戻値]  −
             tskeep.c       1741    * 
             tskeep.c       1742    ******************************************************************************/
             tskeep.c       1743    void EepBitAllClr()
    0000073E              _EepBitAllClr:                   ; function: EepBitAllClr
                                                           ; frame size=0
             tskeep.c       1744    {
             tskeep.c       1745      eepread_page = CLR;
    0000073E E200                   MOV         #0,R2      ; H'00000000
    00000740 D618                   MOV.L       L139+74,R6 ; __$eepread_page
             tskeep.c       1746    }
    00000742 000B                   RTS
    00000744 2622                   MOV.L       R2,@R6     ; eepread_page
             tskeep.c       1747    
             tskeep.c       1748    
             tskeep.c       1749    void Rcvset_spddat( const char* str )
    00000746              _Rcvset_spddat:                  ; function: Rcvset_spddat
                                                           ; frame size=0
             tskeep.c       1750    {
             tskeep.c       1751      //      s1:コピー先、      s2:コピー元
             tskeep.c       1752      StrHexcpy( (char * )&Page2.Y0[0].ac, (char * )str );
    00000746 6543                   MOV         R4,R5
    00000748 D40A                   MOV.L       L139+26,R4 ; __$Page2
    0000074A D217                   MOV.L       L139+78,R2 ; _StrHexcpy
    0000074C 422B                   JMP         @R2
    0000074E 0009                   NOP
             tskeep.c       1753    }
             tskeep.c       1754    
             tskeep.c       1755    //void Rcvset_spdptn( const char* str )
             tskeep.c       1756    //{
             tskeep.c       1757    //    //      s1:コピー先、      s2:コピー元
             tskeep.c       1758    //    StrHexcpy( (char * )&Page4.Y1[0].ac, (char * )str );
             tskeep.c       1759    //}
             tskeep.c       1760    
             tskeep.c       1761    void Rcvset_posdat( const char* str )
    00000750              _Rcvset_posdat:                  ; function: Rcvset_posdat
                                                           ; frame size=0
             tskeep.c       1762    {
             tskeep.c       1763      //      s1:コピー先、      s2:コピー元
             tskeep.c       1764      StrHexcpy( (char * )&Page7.Y0_Offset, (char * )str );
    00000750 6543                   MOV         R4,R5
    00000752 D40E                   MOV.L       L139+50,R4 ; __$Page7
    00000754 D214                   MOV.L       L139+78,R2 ; _StrHexcpy
    00000756 422B                   JMP         @R2
    00000758 0009                   NOP
    0000075A              L139:
    0000075A 00000002               .RES.W      1
    0000075C <00000003>             .DATA.L     H'00000003+__$eepbuf
    00000760 <00000000>             .DATA.L     __$eepbuf
    00000764 <00000000>             .DATA.L     _spi_send
    00000768 <00000000>             .DATA.L     _spi_send_recv
    0000076C <00000000>             .DATA.L     _memcpy
    00000770 <00000000>             .DATA.L     __$Page1
    00000774 <00000000>             .DATA.L     __$Page2
    00000778 <0000003C>             .DATA.L     H'0000003C+__$Page2
    0000077C <00000000>             .DATA.L     __$Page3
    00000780 <0000003C>             .DATA.L     H'0000003C+__$Page3
    00000784 <00000000>             .DATA.L     __$Page4
    00000788 <0000003C>             .DATA.L     H'0000003C+__$Page4
    0000078C <00000000>             .DATA.L     __$Page7
    00000790 <00000000>             .DATA.L     __$Page8
    00000794 <00000000>             .DATA.L     __$Page9
    00000798 <00000000>             .DATA.L     __$Page10
    0000079C <00000000>             .DATA.L     __$Prtinf
    000007A0 <00000000>             .DATA.L     __$Prtwk
    000007A4 <00000000>             .DATA.L     __$eepread_page
    000007A8 <00000000>             .DATA.L     _StrHexcpy
             tskeep.c       1765    }
             tskeep.c       1766    
             tskeep.c       1767    
             tskeep.c       1768    
             tskeep.c       1769    
C   00000000              _STRTBL_TEST:                    ; static: STRTBL_TEST
    00000000 4442475052             .SDATA      "DBGPROTCOL12345678901234567890"
             4F54434F4C   
             3132333435   
             3637383930   
             3132333435   
             3637383930   
    0000001E 00                     .DATA.B     H'00
    0000001F              _STRTBL_TEST2:                   ; static: STRTBL_TEST2
    0000001F 4442475052             .SDATA      "DBGPROTCOL2"
             4F54434F4C   
             32           
    0000002A 00                     .DATA.B     H'00
    0000002B              _STRTBL_NASI:                    ; static: STRTBL_NASI
    0000002B 2D                     .SDATA      "-"
    0000002C 00                     .DATA.B     H'00
    0000002D              _TEST_DATA_TBL:                  ; static: TEST_DATA_TBL
    0000002D 01160F0002             .DATA.B     H'01,H'16,H'0F,H'00,H'02,H'16,H'0F,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             160F000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,
             0000000000 +                       H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
    0000007D 00000001               .RES.B      1
    0000007E 00000002               .RES.W      1
    00000080              _TEST_PROTCOL_TBL:               ; static: TEST_PROTCOL_TBL
    00000080 2100004001             .DATA.B     H'21,H'00,H'00,H'40,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000008C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000094 2200004011             .DATA.B     H'22,H'00,H'00,H'40,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000000A0 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000000A8 2100008011             .DATA.B     H'21,H'00,H'00,H'80,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000000B4 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000000BC 2200008011             .DATA.B     H'22,H'00,H'00,H'80,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000000C8 000001E000             .DATA.L     H'000001E0,H'000001E0
             0001E0       
    000000D0 210000C011             .DATA.B     H'21,H'00,H'00,H'C0,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000000DC 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000000E4 220000C011             .DATA.B     H'22,H'00,H'00,H'C0,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000000F0 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000000F8 2300000F11             .DATA.B     H'23,H'00,H'00,H'0F,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000104 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000010C 2300001011             .DATA.B     H'23,H'00,H'00,H'10,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000118 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000120 2300001111             .DATA.B     H'23,H'00,H'00,H'11,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000012C 0000000000             .DATA.L     H'00000000,H'000002DA
             0002DA       
    00000134 2300001211             .DATA.B     H'23,H'00,H'00,H'12,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000140 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000148 2300001311             .DATA.B     H'23,H'00,H'00,H'13,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000154 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000015C 2300001411             .DATA.B     H'23,H'00,H'00,H'14,H'11,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000168 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000170 2500000100             .DATA.B     H'25,H'00,H'00,H'01,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000017C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000184 2D00000D00             .DATA.B     H'2D,H'00,H'00,H'0D,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000190 000001F400             .DATA.L     H'000001F4,H'000001F4
             0001F4       
    00000198 2600014111             .DATA.B     H'26,H'00,H'01,H'41,H'11,H'11,H'35,H'36,H'00,H'00,H'00,H'00
             1135360000   
             0000         
    000001A4 000001F400             .DATA.L     H'000001F4,H'000001F4
             0001F4       
    000001AC 2600028211             .DATA.B     H'26,H'00,H'02,H'82,H'11,H'11,H'35,H'36,H'00,H'00,H'00,H'00
             1135360000   
             0000         
    000001B8 000001F400             .DATA.L     H'000001F4,H'000001F4
             0001F4       
    000001C0 260003C311             .DATA.B     H'26,H'00,H'03,H'C3,H'11,H'11,H'35,H'36,H'00,H'00,H'00,H'00
             1135360000   
             0000         
    000001CC 000001F400             .DATA.L     H'000001F4,H'000001F4
             0001F4       
    000001D4 2700011000             .DATA.B     H'27,H'00,H'01,H'10,H'00,H'11,H'21,H'26,H'00,H'00,H'00,H'00
             1121260000   
             0000         
    000001E0 000001F400             .DATA.L     H'000001F4,H'00000000
             000000       
    000001E8 2800010014             .DATA.B     H'28,H'00,H'01,H'00,H'14,H'00,H'00,H'00,H'11,H'2B,H'30,H'00
             000000112B   
             3000         
    000001F4 0000000000             .DATA.L     H'00000000,H'000001F4
             0001F4       
    000001FC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000208 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000210 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000021C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000224 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000230 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000238 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000244 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000024C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000258 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000260 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000026C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000274 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000280 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000288 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000294 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000029C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000002A8 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000002B0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000002BC 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000002C4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000002D0 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000002D8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000002E4 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000002EC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000002F8 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000300 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000030C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000314 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000320 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000328 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000334 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000033C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000348 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000350 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000035C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000364 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000370 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000378 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000384 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000038C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000398 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000003A0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000003AC 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000003B4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000003C0 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000003C8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000003D4 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000003DC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000003E8 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000003F0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000003FC 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000404 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000410 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000418 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000424 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000042C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000438 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000440 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000044C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000454 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000460 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000468 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000474 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000047C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000488 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000490 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000049C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000004A4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000004B0 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000004B8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000004C4 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000004CC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000004D8 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000004E0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000004EC 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000004F4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000500 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000508 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000514 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000051C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000528 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000530 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000053C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000544 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000550 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000558 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000564 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000056C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000578 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000580 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000058C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000594 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000005A0 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000005A8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000005B4 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000005BC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000005C8 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000005D0 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000005DC 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000005E4 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000005F0 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000005F8 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000604 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000060C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000618 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000620 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000062C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000634 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000640 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000648 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000654 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    0000065C 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000668 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000670 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    0000067C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000684 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    00000690 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000698 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000006A4 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000006AC 0000000000             .DATA.B     H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00,H'00
             0000000000   
             0000         
    000006B8 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    000006C0              L147:
    000006C0 433A5C576F             .SDATA      "C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskeep.c"
             726B537061   
             63655C5175   
             69636B4765   
             6E655C536F   
             66745F4669   
             726D5C5175   
             69636B4765   
             6E655F5072   
             6F6A656374   
             5C74736B65   
             65702E63     
    000006FB 00                     .DATA.B     H'00
B   00000000              __$eepbuf:                       ; static: __$eepbuf
    00000000 00000001               .RES.B      131
    00000083 00000001               .RES.B      1
    00000084              __$mrcv:                         ; static: __$mrcv
    00000084 00000004               .RES.L      1
    00000088              __$dummy:                        ; static: __$dummy
    00000088 00000001               .RES.B      1
    00000089 00000001               .RES.B      1
    0000008A 00000002               .RES.W      1
    0000008C              __$Page0:                        ; static: __$Page0
    0000008C 00000004               .RES.L      32
    0000010C              __$Page1:                        ; static: __$Page1
    0000010C 00000001               .RES.B      128
    0000018C              __$Page2:                        ; static: __$Page2
    0000018C 00000004               .RES.L      32
    0000020C              __$Page3:                        ; static: __$Page3
    0000020C 00000004               .RES.L      32
    0000028C              __$Page4:                        ; static: __$Page4
    0000028C 00000004               .RES.L      32
    0000030C              __$Page7:                        ; static: __$Page7
    0000030C 00000004               .RES.L      32
    0000038C              __$Page8:                        ; static: __$Page8
    0000038C 00000004               .RES.L      32
    0000040C              __$Page9:                        ; static: __$Page9
    0000040C 00000004               .RES.L      32
    0000048C              __$Page10:                       ; static: __$Page10
    0000048C 00000001               .RES.B      128
    0000050C              __$Prtinf:                       ; static: __$Prtinf
    0000050C 00000001               .RES.B      128
    0000058C              __$Prtwk:                        ; static: __$Prtwk
    0000058C 00000004               .RES.L      400
    00000BCC              __$RcvUserInfo:                  ; static: __$RcvUserInfo
    00000BCC 00000001               .RES.B      12
    00000BD8              __$writebufwk:                   ; static: __$writebufwk
    00000BD8 00000001               .RES.B      128
    00000C58              __$eepread_page:                 ; static: __$eepread_page
    00000C58 00000004               .RES.L      1
    00000C5C              __$staadr_a:                     ; static: __$staadr_a
    00000C5C 00000004               .RES.L      1
    00000C60              __$page_a:                       ; static: __$page_a
    00000C60 00000004               .RES.L      1
    00000C64              __$pageadr_a:                    ; static: __$pageadr_a
    00000C64 00000004               .RES.L      1
    00000C68              __$pnter_a:                      ; static: __$pnter_a
    00000C68 00000004               .RES.L      1
    00000C6C              __$staadr_k:                     ; static: __$staadr_k
    00000C6C 00000004               .RES.L      1
    00000C70              __$page_k:                       ; static: __$page_k
    00000C70 00000004               .RES.L      1
    00000C74              __$pageadr_k:                    ; static: __$pageadr_k
    00000C74 00000004               .RES.L      1
    00000C78              __$pnter_k:                      ; static: __$pnter_k
    00000C78 00000004               .RES.L      1
    00000C7C              __$test_step:                    ; static: __$test_step
    00000C7C 00000004               .RES.L      1
    00000C80              __$debug_flg:                    ; static: __$debug_flg
    00000C80 00000004               .RES.L      1
    00000C84              __$inf2:                         ; static: __$inf2
    00000C84 00000001               .RES.B      1
    00000C85 00000001               .RES.B      1
    00000C86 00000002               .RES.W      1
    00000C88              __$staadr:                       ; static: __$staadr
    00000C88 00000004               .RES.L      1
    00000C8C              __$pnter:                        ; static: __$pnter
    00000C8C 00000004               .RES.L      1
    00000C90              __$page:                         ; static: __$page
    00000C90 00000004               .RES.L      1
    00000C94              __$dbgadr:                       ; static: __$dbgadr
    00000C94 00000004               .RES.L      1
    00000C98              __$dbgpnter:                     ; static: __$dbgpnter
    00000C98 00000004               .RES.L      1
    00000C9C              __$dbgpagecnt:                   ; static: __$dbgpagecnt
    00000C9C 00000001               .RES.B      1
    00000C9D 00000001               .RES.B      1
    00000C9E 00000002               .RES.W      1
    00000CA0              __$dbgbytcnt:                    ; static: __$dbgbytcnt
    00000CA0 00000004               .RES.L      1
    00000CA4              __$dbgpage:                      ; static: __$dbgpage
    00000CA4 00000004               .RES.L      1
    00000CA8              __$datasiz_dbg:                  ; static: __$datasiz_dbg
    00000CA8 00000004               .RES.L      1
SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:35  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1769



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 000007AC Byte(s)
CONSTANT SECTION (C):                                 000006FC Byte(s)
DATA     SECTION (D):                                 00000000 Byte(s)
BSS      SECTION (B):                                 00000CAC Byte(s)

TOTAL PROGRAM  SECTION: 000007AC Byte(s)
TOTAL CONSTANT SECTION: 000006FC Byte(s)
TOTAL DATA     SECTION: 00000000 Byte(s)
TOTAL BSS      SECTION: 00000CAC Byte(s)

    TOTAL PROGRAM SIZE: 00001B54 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           10
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          26
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            90



*** COMMAND PARAMETER ***

-subcommand=C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskeep.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-object="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskeep.obj"
-debug
-listfile="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskeep.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskeep.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
