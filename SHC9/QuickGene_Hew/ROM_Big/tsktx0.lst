SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:39  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tsktx0.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             tsktx0.c          1    /******************************************************************************
             tsktx0.c          2    * ＰＣ通信送信タスク(SIO0)                                                    *
             tsktx0.c          3    *                                                                             *
             tsktx0.c          4    * File name : tsktx0.c                                                        *
             tsktx0.c          5    *                                                                             *
             tsktx0.c          6    * Copyright (c) 2018 NICHIRYO Co., Ltd.                                       *
             tsktx0.c          7    *                                                                             *
             tsktx0.c          8    ******************************************************************************/
             tsktx0.c          9    #include <kernel.h>
             tsktx0.c         10    #include "sh7237.h"
             tsktx0.c         11    #include "iodefine.h"
             tsktx0.c         12    #include "define.h"
             tsktx0.c         13    #include "datastruct.h"
             tsktx0.c         14    #include "sub.h"
             tsktx0.c         15    #include "machine.h"//debug
             tsktx0.c         16    #include "tskcmd.h"
             tsktx0.c         17    #include "tblchr.h"
             tsktx0.c         18    
             tsktx0.c         19    
             tsktx0.c         20    //*************************************
             tsktx0.c         21    // 関数定義
             tsktx0.c         22    //*************************************
             tsktx0.c         23    static void Tx0Proc(T_CMD_MSG* mrcv);
             tsktx0.c         24    static void Tx0Send( UB senddata );
             tsktx0.c         25    static void Tx0Init();
             tsktx0.c         26    static void Tx0Proc2();
             tsktx0.c         27    static void Tx0RunLSend();
             tsktx0.c         28    
             tsktx0.c         29    
             tsktx0.c         30    //*************************************
             tsktx0.c         31    // テーブル
             tsktx0.c         32    //*************************************
             tsktx0.c         33    
             tsktx0.c         34    
             tsktx0.c         35    //*************************************
             tsktx0.c         36    // データ定義
             tsktx0.c         37    //*************************************
             tsktx0.c         38    static UB         Sendbuff[640];                          // 送信バッファ
             tsktx0.c         39    static UB         wkbuff[512];                            // 送信バッファ
             tsktx0.c         40    
             tsktx0.c         41    /******************************************************************************
             tsktx0.c         42    * 
             tsktx0.c         43    * [概要]  ＰＣ通信送信タスク
             tsktx0.c         44    *             装置からＰＣへデータ送信を行う
             tsktx0.c         45    * 
             tsktx0.c         46    * 
             tsktx0.c         47    ******************************************************************************/
             tsktx0.c         48    TASK TskTx0( void )
P   00000000              _TskTx0:                         ; function: TskTx0
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
             tsktx0.c         49    {
             tsktx0.c         50      T_CMD_MSG*  msg;
             tsktx0.c         51      ER          err;
             tsktx0.c         52      UB          msgid;
             tsktx0.c         53      INT         siz;
             tsktx0.c         54    
             tsktx0.c         55      Tx0Init();
    00000002 B070                   BSR         __$Tx0Init
    00000004 0009                   NOP
    00000006 DA59                   MOV.L       L64,R10    ; __$Sendbuff
    00000008 DE59                   MOV.L       L64+4,R14  ; _v4_trcv_mbx
    0000000A DB5A                   MOV.L       L64+8,R11  ; _GetPsnsData
    0000000C DC5A                   MOV.L       L64+12,R12 ; L66
    0000000E DD5B                   MOV.L       L64+16,R13 ; _api_rel_mpf
    00000010              L21:
             tsktx0.c         56    
             tsktx0.c         57      for( ;; )
             tsktx0.c         58      {
             tsktx0.c         59          // 送信メッセージの受信
             tsktx0.c         60          err = rcv_mbx( ID_MBX_TX0, (T_MSG**)&msg );
    00000010 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00000012 E402                   MOV         #2,R4      ; H'00000002
    00000014 4E0B                   JSR         @R14
    00000016 65F3                   MOV         R15,R5
             tsktx0.c         61          if( E_OK != err )
    00000018 2008                   TST         R0,R0
    0000001A 8BF9                   BF          L21
             tsktx0.c         62          {
             tsktx0.c         63              continue;
             tsktx0.c         64          }
             tsktx0.c         65    
             tsktx0.c         66          msgid = msg->msgdata.msgid;
             tsktx0.c         67          
             tsktx0.c         68          switch( msgid )
    0000001C 64F2                   MOV.L       @R15,R4    ; msg
    0000001E 3041801B               MOVU.B      @(27,R4),R0; (msg)->msgid
    00000022 881D                   CMP/EQ      #29,R0
    00000024 890F                   BT          L24
    00000026 881E                   CMP/EQ      #30,R0
    00000028 890D                   BT          L24
    0000002A 881F                   CMP/EQ      #31,R0
    0000002C 890B                   BT          L24
    0000002E 8820                   CMP/EQ      #32,R0
    00000030 8909                   BT          L24
    00000032 8821                   CMP/EQ      #33,R0
    00000034 8907                   BT          L24
    00000036 8822                   CMP/EQ      #34,R0
    00000038 8905                   BT          L24
    0000003A 8823                   CMP/EQ      #35,R0
    0000003C 8903                   BT          L24
    0000003E 8828                   CMP/EQ      #40,R0
    00000040 8907                   BT          L31
    00000042 A00A                   BRA         L32
    00000044 0009                   NOP
    00000046              L24:
             tsktx0.c         69          {
             tsktx0.c         70              case ID_MSG_VALVEINI_HS:
             tsktx0.c         71              case ID_MSG_PRESSINI_HS:
             tsktx0.c         72              case ID_MSG_PRESSREN_HS:
             tsktx0.c         73              case ID_MSG_PRESSTAN_HS:
             tsktx0.c         74              case ID_MSG_PRESSCAN_HS:
             tsktx0.c         75              case ID_MSG_VALVEOUT_HS:
             tsktx0.c         76              case ID_MSG_PRESSURE_HS:
             tsktx0.c         77                  siz = GetPsnsData(&Sendbuff[0]);
    00000046 4B0B                   JSR         @R11
    00000048 64A3                   MOV         R10,R4
             tsktx0.c         78                  Tx0Proc2( siz );
    0000004A B06F                   BSR         __$Tx0Proc2
    0000004C 6403                   MOV         R0,R4
    0000004E A006                   BRA         L33
    00000050 0009                   NOP
    00000052              L31:
             tsktx0.c         79                  break;
             tsktx0.c         80              
             tsktx0.c         81              case ID_MSG_EXPRUNL:
             tsktx0.c         82                  Tx0RunLSend();
    00000052 B00B                   BSR         __$Tx0RunLSend
    00000054 0009                   NOP
    00000056 A002                   BRA         L33
    00000058 0009                   NOP
    0000005A              L32:
             tsktx0.c         83                  break;
             tsktx0.c         84              
             tsktx0.c         85              default:
             tsktx0.c         86                  Tx0Proc( msg );
    0000005A B045                   BSR         __$Tx0Proc
    0000005C 0009                   NOP
    0000005E              L33:
    0000005E 67F2                   MOV.L       @R15,R7    ; msg
             tsktx0.c         87                  break;
             tsktx0.c         88          }
             tsktx0.c         89    
             tsktx0.c         90          // メモリ解放
             tsktx0.c         91          RelMpf( ID_MPF_TX0, (VP)msg );
    00000060 E602                   MOV         #2,R6      ; H'00000002
    00000062 E55B                   MOV         #91,R5     ; H'0000005B
    00000064 4D0B                   JSR         @R13
    00000066 64C3                   MOV         R12,R4
    00000068 AFD2                   BRA         L21
    0000006A 0009                   NOP
             tsktx0.c         92      }
             tsktx0.c         93    }
             tsktx0.c         94    /******************************************************************************
             tsktx0.c         95    * 
             tsktx0.c         96    * [概要]  
             tsktx0.c         97    * 
             tsktx0.c         98    * 
             tsktx0.c         99    * 
             tsktx0.c        100    ******************************************************************************/
             tsktx0.c        101    static void Tx0RunLSend()
    0000006C              __$Tx0RunLSend:                  ; function: __$Tx0RunLSend
                                                           ; frame size=28
    0000006C 4CF0                   MOVMU.L     R12,@-R15
    0000006E 7FF8                   ADD         #-8,R15
    00000070 E602                   MOV         #2,R6      ; H'00000002
    00000072 E500                   MOV         #0,R5      ; H'00000000
             tsktx0.c        102    {
             tsktx0.c        103      INT siz;
             tsktx0.c        104      INT len;
             tsktx0.c        105      UB  bcc;
             tsktx0.c        106      UB  bcch;
             tsktx0.c        107      UB  bccl;
             tsktx0.c        108    
             tsktx0.c        109      memset( &wkbuff[0],    CLR,  sizeof( wkbuff ) );
    00000074 DE42                   MOV.L       L64+20,R14 ; __$wkbuff
    00000076 4618                   SHLL8       R6
    00000078 D142                   MOV.L       L64+24,R1  ; _memset
    0000007A 410B                   JSR         @R1
    0000007C 64E3                   MOV         R14,R4
             tsktx0.c        110      memset( &Sendbuff[0],  CLR,  sizeof( Sendbuff ) );
    0000007E DC3B                   MOV.L       L64,R12    ; __$Sendbuff
    00000080 E500                   MOV         #0,R5      ; H'00000000
    00000082 06000280               MOVI20      #640,R6    ; H'00000280
    00000086 D73F                   MOV.L       L64+24,R7  ; _memset
    00000088 470B                   JSR         @R7
    0000008A 64C3                   MOV         R12,R4
             tsktx0.c        111      
             tsktx0.c        112      GetRunData(&wkbuff[0]);
    0000008C 64E3                   MOV         R14,R4
             tsktx0.c        113      sprintf( &Sendbuff[1], "%s,%04X,%s" , STRTBL_MSG[ID_MSG_EXPRUNL], E_SUCCESS, &wkbuff[8] );
    0000008E DD3E                   MOV.L       L64+28,R13 ; _GetRunData
    00000090 4D0B                   JSR         @R13
    00000092 7E08                   ADD         #8,R14
    00000094 2FE6                   MOV.L       R14,@-R15
    00000096 64C3                   MOV         R12,R4
    00000098 DE3C                   MOV.L       L64+32,R14 ; H'000000A0+_STRTBL_MSG
    0000009A 66E2                   MOV.L       @R14,R6    ; STRTBL_MSG[]
    0000009C 7401                   ADD         #1,R4
    0000009E D53C                   MOV.L       L64+36,R5  ; L69
    000000A0 D13C                   MOV.L       L64+40,R1  ; _sprintf
    000000A2 410B                   JSR         @R1
    000000A4 E700                   MOV         #0,R7      ; H'00000000
    000000A6 7F04                   ADD         #4,R15
             tsktx0.c        114      Sendbuff[0] = STX;
    000000A8 E602                   MOV         #2,R6      ; H'00000002
    000000AA 2C60                   MOV.B       R6,@R12    ; Sendbuff[]
             tsktx0.c        115      
             tsktx0.c        116      len = strlen(&Sendbuff);
    000000AC D73A                   MOV.L       L64+44,R7  ; _strlen
    000000AE 470B                   JSR         @R7
    000000B0 64C3                   MOV         R12,R4
             tsktx0.c        117    
             tsktx0.c        118      Sendbuff[len] = ETX;
    000000B2 6EC3                   MOV         R12,R14
    000000B4 3E0C                   ADD         R0,R14
    000000B6 E103                   MOV         #3,R1      ; H'00000003
             tsktx0.c        119    
             tsktx0.c        120      bcc = CalcBCC( &Sendbuff[1], len);              // BCC計算
    000000B8 7C01                   ADD         #1,R12
    000000BA 2E10                   MOV.B       R1,@R14    ; Sendbuff[]
    000000BC 6D03                   MOV         R0,R13
    000000BE 6503                   MOV         R0,R5
             tsktx0.c        121      DectoHexASC( bcc, &bcch, &bccl );               // 10進数→16進数→ASC変換
             tsktx0.c        122    
             tsktx0.c        123      Sendbuff[(len+1)] = bcch;                       // BCC1
             tsktx0.c        124      Sendbuff[(len+2)] = bccl;                       // BCC2
             tsktx0.c        125      
             tsktx0.c        126      siz = len+4;
             tsktx0.c        127      
             tsktx0.c        128      Tx0Proc2( siz );
    000000C0 64C3                   MOV         R12,R4
    000000C2 DC36                   MOV.L       L64+48,R12 ; _CalcBCC
    000000C4 4C0B                   JSR         @R12
    000000C6 7D04                   ADD         #4,R13
    000000C8 65F3                   MOV         R15,R5
    000000CA 7504                   ADD         #4,R5
    000000CC 6403                   MOV         R0,R4
    000000CE D234                   MOV.L       L64+52,R2  ; _DectoHexASC
    000000D0 420B                   JSR         @R2
    000000D2 66F3                   MOV         R15,R6
    000000D4 84F4                   MOV.B       @(4,R15),R0; bcch
    000000D6 64D3                   MOV         R13,R4
    000000D8 80E1                   MOV.B       R0,@(1,R14); Sendbuff[]
    000000DA 60F0                   MOV.B       @R15,R0    ; bccl
    000000DC B026                   BSR         __$Tx0Proc2
    000000DE 80E2                   MOV.B       R0,@(2,R14); Sendbuff[]
    000000E0 7F08                   ADD         #8,R15
    000000E2 4CF4                   MOVMU.L     @R15+,R12
             tsktx0.c        129    }
    000000E4 006B                   RTS/N
             tsktx0.c        130    
             tsktx0.c        131    /******************************************************************************
             tsktx0.c        132    * 
             tsktx0.c        133    * [概要]  ＰＣ通信送信
             tsktx0.c        134    * 
             tsktx0.c        135    * 
             tsktx0.c        136    * 
             tsktx0.c        137    ******************************************************************************/
             tsktx0.c        138    static void Tx0Init()
    000000E6              __$Tx0Init:                      ; function: __$Tx0Init
                                                           ; frame size=0
             tsktx0.c        139    {
             tsktx0.c        140    }
    000000E6 006B                   RTS/N
             tsktx0.c        141    
             tsktx0.c        142    /******************************************************************************
             tsktx0.c        143    * 
             tsktx0.c        144    * [概要]  PC通信送信処理
             tsktx0.c        145    * [引数]  メッセージデータ
             tsktx0.c        146    * [戻値]  なし
             tsktx0.c        147    * 
             tsktx0.c        148    ******************************************************************************/
             tsktx0.c        149    static void Tx0Proc(T_CMD_MSG* mrcv)
    000000E8              __$Tx0Proc:                      ; function: __$Tx0Proc
                                                           ; frame size=16
    000000E8 4CF0                   MOVMU.L     R12,@-R15
             tsktx0.c        150    {
             tsktx0.c        151      INT i;
             tsktx0.c        152      INT siz;
             tsktx0.c        153      UB  msg;
             tsktx0.c        154      UB  bcc;
             tsktx0.c        155      UB  bcch;
             tsktx0.c        156      UB  bccl;
             tsktx0.c        157    
             tsktx0.c        158      msg = mrcv->msgdata.msgid;
             tsktx0.c        159      switch(msg)
    000000EA 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
    000000EE 8864                   CMP/EQ      #100,R0
    000000F0 8903                   BT          L47
    000000F2 8816                   CMP/EQ      #22,R0
    000000F4 8901                   BT          L47
    000000F6 8868                   CMP/EQ      #104,R0
    000000F8 8B0A                   BF          L49
    000000FA              L47:
             tsktx0.c        160      {
             tsktx0.c        161          case ID_MSG_CMD:                                                // コマンドレスポンス
             tsktx0.c        162          case ID_MSG_EEPREAD:                                            // 
             tsktx0.c        163          case ID_MSG_RUNLOGERR:
             tsktx0.c        164              siz = mrcv->msgdata.siz;                                    // サイズ取得
    000000FA 5C48                   MOV.L       @(32,R4),R12; (mrcv)->siz
    000000FC 7424                   ADD         #36,R4
    000000FE 6D43                   MOV         R4,R13
             tsktx0.c        165              for( i = 0; i < siz; i++ )                                  // サイズ分送信
    00000100 EE00                   MOV         #0,R14     ; H'00000000
    00000102              L50:
    00000102 3EC3                   CMP/GE      R12,R14
    00000104 8910                   BT          L52
             tsktx0.c        166              {
             tsktx0.c        167                  Tx0Send( mrcv->msgdata.data[i] );
    00000106 64D4                   MOV.B       @R13+,R4   ; mrcv->data[]
    00000108 B01C                   BSR         __$Tx0Send
    0000010A 7E01                   ADD         #1,R14
    0000010C AFF9                   BRA         L50
    0000010E 0009                   NOP
    00000110              L49:
    00000110 8817                   CMP/EQ      #23,R0
    00000112 8909                   BT          L52
    00000114 8865                   CMP/EQ      #101,R0
    00000116 8B03                   BF          L55
             tsktx0.c        168              }
             tsktx0.c        169              break;
             tsktx0.c        170          
             tsktx0.c        171          case ID_MSG_EEPWRIT:                                            // 
             tsktx0.c        172              break;
             tsktx0.c        173    
             tsktx0.c        174          case ID_MSG_ACK:                                                // ＡＣＫレスポンス
             tsktx0.c        175              Tx0Send( ACK );
    00000118 E406                   MOV         #6,R4      ; H'00000006
    0000011A 4CF4                   MOVMU.L     @R15+,R12
    0000011C A012                   BRA         __$Tx0Send
    0000011E 0009                   NOP
    00000120              L55:
             tsktx0.c        176              break;
             tsktx0.c        177          
             tsktx0.c        178          case ID_MSG_NAK:                                                // ＮＡＫレスポンス
             tsktx0.c        179          default:                                                        // 規定外
             tsktx0.c        180              Tx0Send( NAK );
    00000120 E415                   MOV         #21,R4     ; H'00000015
    00000122 4CF4                   MOVMU.L     @R15+,R12
    00000124 A00E                   BRA         __$Tx0Send
    00000126 0009                   NOP
    00000128              L52:
    00000128 4CF4                   MOVMU.L     @R15+,R12
    0000012A 006B                   RTS/N
             tsktx0.c        181              break;
             tsktx0.c        182      }
             tsktx0.c        183    }
             tsktx0.c        184    
             tsktx0.c        185    /******************************************************************************
             tsktx0.c        186    * 
             tsktx0.c        187    * [概要]  PC通信送信処理
             tsktx0.c        188    * [引数]  送信サイズ
             tsktx0.c        189    * [戻値]  なし
             tsktx0.c        190    * 
             tsktx0.c        191    ******************************************************************************/
             tsktx0.c        192    static void Tx0Proc2( INT siz )
    0000012C              __$Tx0Proc2:                     ; function: __$Tx0Proc2
                                                           ; frame size=16
    0000012C 4CF0                   MOVMU.L     R12,@-R15
             tsktx0.c        193    {
             tsktx0.c        194      INT         i;
             tsktx0.c        195      
             tsktx0.c        196      for( i = 0; i < siz; i++ )                                  // サイズ分送信
    0000012E 6C43                   MOV         R4,R12
    00000130 DD0E                   MOV.L       L64,R13    ; __$Sendbuff
    00000132 A003                   BRA         L57
    00000134 EE00                   MOV         #0,R14     ; H'00000000
    00000136              L58:
             tsktx0.c        197      {
             tsktx0.c        198          Tx0Send( Sendbuff[i] );
    00000136 64D4                   MOV.B       @R13+,R4   ; Sendbuff[]
    00000138 B004                   BSR         __$Tx0Send
    0000013A 7E01                   ADD         #1,R14
    0000013C              L57:
    0000013C 3EC3                   CMP/GE      R12,R14
    0000013E 8BFA                   BF          L58
    00000140 4CF4                   MOVMU.L     @R15+,R12
             tsktx0.c        199      }
             tsktx0.c        200    }
    00000142 006B                   RTS/N
             tsktx0.c        201    /******************************************************************************
             tsktx0.c        202    * 
             tsktx0.c        203    * [概要]  データ送信
             tsktx0.c        204    * [引数]  送信データ
             tsktx0.c        205    * [戻値]  なし
             tsktx0.c        206    * 
             tsktx0.c        207    ******************************************************************************/
             tsktx0.c        208    static void Tx0Send( UB senddata )
    00000144              __$Tx0Send:                      ; function: __$Tx0Send
                                                           ; frame size=12
    00000144 4DF0                   MOVMU.L     R13,@-R15
    00000146 EE80                   MOV         #-128,R14  ; H'FFFFFF80
    00000148 6D43                   MOV         R4,R13
    0000014A A003                   BRA         L61
    0000014C 4E18                   SHLL8       R14
    0000014E              L62:
             tsktx0.c        209    {
             tsktx0.c        210       int save_i;
             tsktx0.c        211    
             tsktx0.c        212        // 割込み禁止処理
             tsktx0.c        213    //x    save_i = get_imask();
             tsktx0.c        214    //x   set_imask(0x0f);
             tsktx0.c        215    
             tsktx0.c        216    //    rx_disable();
             tsktx0.c        217    
             tsktx0.c        218      while( 0 == SCI0.SCSSR.BIT.TDRE )
             tsktx0.c        219      {
             tsktx0.c        220          sio_CheckError( &SCI0 );
    0000014E D215                   MOV.L       L64+56,R2  ; _sio_CheckError
    00000150 420B                   JSR         @R2
    00000152 64E3                   MOV         R14,R4
    00000154              L61:
    00000154 3E79B008               BLDNOT.B    #7,@(8,R14)
    00000158 89F9                   BT          L62
    0000015A E400                   MOV         #0,R4      ; H'00000000
             tsktx0.c        221      }
             tsktx0.c        222      SCI0.SCTDR = senddata;
    0000015C 60D3                   MOV         R13,R0
    0000015E 80E6                   MOV.B       R0,@(6,R14)
             tsktx0.c        223      SCI0.SCSSR.BIT.TDRE = 0;
    00000160 3E790008               BCLR.B      #7,@(8,R14)
             tsktx0.c        224    
             tsktx0.c        225      rot_rdq( TPRI_SELF );
    00000164 D210                   MOV.L       L64+60,R2  ; _v4_rot_rdq
    00000166 4DF4                   MOVMU.L     @R15+,R13
    00000168 422B                   JMP         @R2
    0000016A 0009                   NOP
    0000016C              L64:
    0000016C <00000000>             .DATA.L     __$Sendbuff
    00000170 <00000000>             .DATA.L     _v4_trcv_mbx
    00000174 <00000000>             .DATA.L     _GetPsnsData
    00000178 <00000000>             .DATA.L     L66
    0000017C <00000000>             .DATA.L     _api_rel_mpf
    00000180 <00000000>             .DATA.L     __$wkbuff
    00000184 <00000000>             .DATA.L     _memset
    00000188 <00000000>             .DATA.L     _GetRunData
    0000018C <000000A0>             .DATA.L     H'000000A0+_STRTBL_MSG
    00000190 <00000000>             .DATA.L     L69
    00000194 <00000000>             .DATA.L     _sprintf
    00000198 <00000000>             .DATA.L     _strlen
    0000019C <00000000>             .DATA.L     _CalcBCC
    000001A0 <00000000>             .DATA.L     _DectoHexASC
    000001A4 <00000000>             .DATA.L     _sio_CheckError
    000001A8 <00000000>             .DATA.L     _v4_rot_rdq
             tsktx0.c        226    
             tsktx0.c        227    //    rx_enable();
             tsktx0.c        228    //x   set_imask(save_i);
             tsktx0.c        229    }
             tsktx0.c        230    
             tsktx0.c        231    
             tsktx0.c        232    
             tsktx0.c        233    
C   00000000              L66:
    00000000 433A5C576F             .SDATA      "C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tsktx0.c"
             726B537061   
             63655C5175   
             69636B4765   
             6E655C536F   
             66745F4669   
             726D5C5175   
             69636B4765   
             6E655F5072   
             6F6A656374   
             5C74736B74   
             78302E63     
    0000003B 00                     .DATA.B     H'00
    0000003C              L69:
    0000003C 25732C2530             .SDATA      "%s,%04X,%s"
             34582C2573   
    00000046 00                     .DATA.B     H'00
B   00000000              __$Sendbuff:                     ; static: __$Sendbuff
    00000000 00000001               .RES.B      640
    00000280              __$wkbuff:                       ; static: __$wkbuff
    00000280 00000001               .RES.B      512
SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:39  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      233



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 000001AC Byte(s)
CONSTANT SECTION (C):                                 00000047 Byte(s)
DATA     SECTION (D):                                 00000000 Byte(s)
BSS      SECTION (B):                                 00000480 Byte(s)

TOTAL PROGRAM  SECTION: 000001AC Byte(s)
TOTAL CONSTANT SECTION: 00000047 Byte(s)
TOTAL DATA     SECTION: 00000000 Byte(s)
TOTAL BSS      SECTION: 00000480 Byte(s)

    TOTAL PROGRAM SIZE: 00000673 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           12
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           1
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            30



*** COMMAND PARAMETER ***

-subcommand=C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tsktx0.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-object="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tsktx0.obj"
-debug
-listfile="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tsktx0.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tsktx0.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
