SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 14:07:49  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\n4i7237.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

            n4i7237.c          1    /*******************************************************************************
            n4i7237.c          2    * 割込み管理機能/周期タイマ割込みハンドラ (SH7286)                             *
            n4i7237.c          3    *                                                                              *
            n4i7237.c          4    *  File name : n4i7286.c                                                       *
            n4i7237.c          5    *  Copyright (c) 2010, MiSPO Co., Ltd.                                         *
            n4i7237.c          6    *                                                                              *
            n4i7237.c          7    *  Compile : shc -cp=sh2a -op=1 -def=CLK=?,CH=?,MSEC=?,INTVEC=?,INTVSZ=?,      *
            n4i7237.c          8    *                 IP=? n4i7286.c                                   (Renesas C) *
            n4i7237.c          9    *                                                                              *
            n4i7237.c         10    * 2010-10-29 Created                                                        SZ *
            n4i7237.c         11    *                                                                              *
            n4i7237.c         12    * 2017/09〜   ハンドラ追加                                                       *
            n4i7237.c         13    *             優先順位変更                                                       *
            n4i7237.c         14    *             タイマ値変更                                                       *
            n4i7237.c         15    *                                                                              *
            n4i7237.c         16    *******************************************************************************/
            n4i7237.c         17    
            n4i7237.c         18    /*
            n4i7237.c         19    
            n4i7237.c         20    最適化コンパイル
            n4i7237.c         21    
            n4i7237.c         22              割り込みハンドラのコンパイルには、必ず、最適化オプションを付け、
            n4i7237.c         23              ent_int 呼び出し前に、不要な命令が生成されないよう注意してください。
            n4i7237.c         24              ルネサスCでは、割込みハンドラを #pragma interrupt で定義してください。
            n4i7237.c         25    
            n4i7237.c         26    
            n4i7237.c         27    割込み周期の指定
            n4i7237.c         28    
            n4i7237.c         29              割込み周期は、MSEC マクロで決まります。 デフォルト値は kernel.hで
            n4i7237.c         30              定義しており、10 msec です。
            n4i7237.c         31              割込み周期を変更する場合は、全てのファイルに対してMSECマクロを変更
            n4i7237.c         32              するようにコンパイルしてください。
            n4i7237.c         33    
            n4i7237.c         34              (例) shc <options> -def=MSEC=5 FILE … 5 msec
            n4i7237.c         35                                      ~~~~~~
            n4i7237.c         36    
            n4i7237.c         37    割込みベクタテーブル
            n4i7237.c         38    
            n4i7237.c         39              def_inhシステムコールによる割込みベクタの設定を可能にするため、
            n4i7237.c         40              RAM先頭(0C000000H番地から1024バイト)に、割込みベクタテーブルがあると
            n4i7237.c         41              想定しています。
            n4i7237.c         42              割込みベクタテーブルの領域が、他の領域と重ならない様にリンクしてく
            n4i7237.c         43              ださい。(重なってもリンカで警告は出ません!)
            n4i7237.c         44              割込みベクタテーブルの先頭アドレスはINTVECマクロで変更できます。
            n4i7237.c         45              割込みベクタテーブルのサイズ(バイト数)は、INTVSZマクロで変更できます。
            n4i7237.c         46    
            n4i7237.c         47              (例) shc <op> -def=INTVEC=0,INTVSZ=408 n4iXXX.c … 0番地,408バイト
            n4i7237.c         48                                 ~~~~~~~~ ~~~~~~~~~~
            n4i7237.c         49              割込みベクタテーブルがROM上にあり、def_inhに依らず直接ベクタを定義
            n4i7237.c         50              する場合、INTVEC=0, INTVSZ=0としてください。この場合、def_inhシステ
            n4i7237.c         51              ムコールは機能しません。
            n4i7237.c         52    
            n4i7237.c         53    
            n4i7237.c         54    チャネル番号の指定
            n4i7237.c         55    
            n4i7237.c         56              周期タイマ割込みに使用している内蔵CMTのチャネルをCHマクロで指定で
            n4i7237.c         57              きます。(0〜1, 無指定時は、CH=0)
            n4i7237.c         58    
            n4i7237.c         59              (例) shc <options> -def=CH=1 n4iXXX.c  .......... CMT CH1
            n4i7237.c         60                                      ~~~~
            n4i7237.c         61    
            n4i7237.c         62    クロック周波数の指定
            n4i7237.c         63    
            n4i7237.c         64              本ソースのクロック(Pφ)のデフォルトは49.152 MHz です。変更する場合は
            n4i7237.c         65              CLKマクロを定義してコンパイルしてください。値は[Hz]単位の周波数です。
            n4i7237.c         66    
            n4i7237.c         67              (例) shc <options> -def=CLK=25000000 n4iXXX.c ……… 25 MHz
            n4i7237.c         68                                      ~~~~~~~~~~~~
            n4i7237.c         69    
            n4i7237.c         70    dis_int, ena_int
            n4i7237.c         71    
            n4i7237.c         72              SHシリーズの割込みコントローラでは、汎用的なdis_int, ena_intシステ
            n4i7237.c         73              ムコールの実装が複雑となってしまいます。
            n4i7237.c         74              この２つのシステムコールは用意していませんので、個別の割込み禁止許
            n4i7237.c         75              可を行いたい場合は、各制御レジスタを直接アクセスしてください。
            n4i7237.c         76    
            n4i7237.c         77    
            n4i7237.c         78    _kernel_inROM
            n4i7237.c         79    
            n4i7237.c         80              与えられたアドレスがROM領域か否かを返す関数です。ROM領域であれば
            n4i7237.c         81              TRUE(1), ROM領域でなければ FALSE(0) を返します。
            n4i7237.c         82    
            n4i7237.c         83    
            n4i7237.c         84    割込み優先順位
            n4i7237.c         85    
            n4i7237.c         86              周期タイマ割込みハンドラのデフォルトの割込み優先順位は、7 です。
            n4i7237.c         87              これを変更する場合、IP マクロを定義してコンパイルしてください。
            n4i7237.c         88              ただし、カーネルより高優先にはできません。 (IP ≦ KNL_LEVEL)
            n4i7237.c         89              本ハンドラより高優先度の割込みハンドラが有る場合、多重割込みが
            n4i7237.c         90              起こります。
            n4i7237.c         91    
            n4i7237.c         92              (例) shc <options> -def=IP=2 n4iXXX.c ... 割込み優先順位 2
            n4i7237.c         93                                      ~~~~
            n4i7237.c         94    */
            n4i7237.c         95    
            n4i7237.c         96    #include "kernel.h"
            n4i7237.c         97    #include "nosys4.h"
            n4i7237.c         98    #include "sh7237.h"
            n4i7237.c         99    #include "iodefine.h"
            n4i7237.c        100    #include "hdrsio0.h"
            n4i7237.c        101    #include "define.h"
            n4i7237.c        102    
            n4i7237.c        103    /* 割込みベクタテーブル */
            n4i7237.c        104    
            n4i7237.c        105    #ifndef INTVSZ
            n4i7237.c        106    #define INTVSZ      1024        /* サイズ未定義の場合 */
            n4i7237.c        107    #endif
            n4i7237.c        108    
            n4i7237.c        109    /* 割込み優先順位の定義 */
            n4i7237.c        110    
            n4i7237.c        111    #ifndef IP
            n4i7237.c        112    #define IP      7               /* 割込み優先順位未定義の場合 */
            n4i7237.c        113    #endif
            n4i7237.c        114    
            n4i7237.c        115    /* クロックの定義 */
            n4i7237.c        116    
            n4i7237.c        117    #ifndef CLK
            n4i7237.c        118    #define CLK     40000000L     /* 周辺クロックPck0[Hz] */
            n4i7237.c        119    #endif
            n4i7237.c        120    
            n4i7237.c        121    /* チャネル番号の定義 */
            n4i7237.c        122    
            n4i7237.c        123    #ifndef CH
            n4i7237.c        124    #define CH      0               /* チャネル番号未定義の場合 */
            n4i7237.c        125    #endif
            n4i7237.c        126    
            n4i7237.c        127    /* CHに合わせたCMTレジスタの再定義 */
            n4i7237.c        128    
            n4i7237.c        129    #if (CH==0)
            n4i7237.c        130    #define CMT_CMCSR   CMT_CMCSR_0
            n4i7237.c        131    #define CMT_CMCNT   CMT_CMCNT_0
            n4i7237.c        132    #define CMT_CMCOR   CMT_CMCOR_0
            n4i7237.c        133    #define INT_CMT     INT_CMI0
            n4i7237.c        134    #elif (CH==1)
            n4i7237.c        135    #define CMT_CMCSR   CMT_CMCSR_1
            n4i7237.c        136    #define CMT_CMCNT   CMT_CMCNT_1
            n4i7237.c        137    #define CMT_CMCOR   CMT_CMCOR_1
            n4i7237.c        138    #define INT_CMT     INT_CMI1
            n4i7237.c        139    #else
            n4i7237.c        140    #error illegal CH number! (CH = 0 to 1)
            n4i7237.c        141    #endif
            n4i7237.c        142    
            n4i7237.c        143    /* 処理系の差異の調整 */
            n4i7237.c        144    
            n4i7237.c        145    #if defined(__HITACHI__)        /* Renesas C */
            n4i7237.c        146    #include <machine.h>
            n4i7237.c        147    extern int *_C_BGN, *_C_END, *_P_BGN, *_P_END, *_VECT_BGN;
            n4i7237.c        148    #if (INTVSZ==0)
            n4i7237.c        149    #pragma interrupt(inthdr(resbank))
            n4i7237.c        150    #pragma ifunc(inthdr)
            n4i7237.c        151    #pragma interrupt(int_sio0_rx(resbank))
            n4i7237.c        152    #pragma ifunc(int_sio0_rx)                
            n4i7237.c        153    #pragma interrupt(int_sio0_er(resbank))
            n4i7237.c        154    #pragma ifunc(int_sio0_er)                
            n4i7237.c        155    
            n4i7237.c        156    #pragma interrupt(int_sio1_rx(resbank))
            n4i7237.c        157    #pragma ifunc(int_sio1_rx)                
            n4i7237.c        158    #pragma interrupt(int_sio1_er(resbank))
            n4i7237.c        159    #pragma ifunc(int_sio1_er)                
            n4i7237.c        160    
            n4i7237.c        161    #pragma interrupt(int_sio2_rx(resbank))
            n4i7237.c        162    #pragma ifunc(int_sio2_rx)                
            n4i7237.c        163    #pragma interrupt(int_sio2_er(resbank))
            n4i7237.c        164    #pragma ifunc(int_sio2_er)                
            n4i7237.c        165    
            n4i7237.c        166    // 5/11 #pragma interrupt(int_sio3_rx(resbank))
            n4i7237.c        167    // 5/11 #pragma ifunc(int_sio3_rx)                
            n4i7237.c        168    // 5/11 #pragma interrupt(int_sio3_er(resbank))
            n4i7237.c        169    // 5/11 #pragma ifunc(int_sio3_er)                
            n4i7237.c        170    
            n4i7237.c        171    #endif
            n4i7237.c        172    
            n4i7237.c        173    #elif defined(__ghs)            /* Green Hills */
            n4i7237.c        174    #include <machine.h>
            n4i7237.c        175    extern char __ghsbegin_rodata[], __ghsend_rodata[];
            n4i7237.c        176    extern char __ghsbegin_text[], __ghsend_text[];
            n4i7237.c        177    extern char __ghsbegin_vect[];
            n4i7237.c        178    #endif
            n4i7237.c        179    
            n4i7237.c        180    /* Tick入力積算カウンタ */
            n4i7237.c        181    
            n4i7237.c        182    #ifdef HOOK
            n4i7237.c        183    UW TOTAL_TICKCK;
            n4i7237.c        184    UW TICK_RATE;
            n4i7237.c        185    #endif
            n4i7237.c        186    
            n4i7237.c        187    /* 外部参照 */
            n4i7237.c        188    
            n4i7237.c        189    extern void _kernel_interr(void);
            n4i7237.c        190    void init_timer(void);
            n4i7237.c        191    
            n4i7237.c        192    /* 割込みサービスルーチン生成情報 */
            n4i7237.c        193    
            n4i7237.c        194    #if (INTVSZ!=0)
            n4i7237.c        195    void isritm(VP_INT exinf);
            n4i7237.c        196    const T_CISR disr_isritm = { TA_HLNG, NULL, INT_CMT, (FP)isritm, 0 };
            n4i7237.c        197    #else
            n4i7237.c        198    void isritm(void);
            n4i7237.c        199    #endif
            n4i7237.c        200    
            n4i7237.c        201    #if 1
            n4i7237.c        202    #define   CPU_CLOCK       160000000               // CPUクロック  [Hz]
            n4i7237.c        203    #define   PFAI_CLOCK      (CPU_CLOCK/4)           // Pφクロック  [Hz]
            n4i7237.c        204    #define   CMT0_CLOCK          (PFAI_CLOCK/8)      // CMT0カウントクロック [Hz]
            n4i7237.c        205    #define   CMT0_COUNT_1MS      (CMT0_CYCLE_1000US*(CMT0_CLOCK/1000000))
            n4i7237.c        206                                                  // CMT0の設定周期に対するカウント値
            n4i7237.c        207    #define   CMT0_CYCLE_1000US   1000                // CMT0の割り込み周期   [us]
            n4i7237.c        208    #endif
            n4i7237.c        209    
            n4i7237.c        210    /*****************************************************************************
            n4i7237.c        211    * 割込み初期化
            n4i7237.c        212    *
            n4i7237.c        213    * 形式  ER intini(void);
            n4i7237.c        214    *
            n4i7237.c        215    * 戻値  常に E_OK
            n4i7237.c        216    *
            n4i7237.c        217    * 解説  カーネルの初期化ルーチン sysini から割込み禁止状態で呼び出されます。
            n4i7237.c        218    ******************************************************************************/
            n4i7237.c        219    
            n4i7237.c        220    
            n4i7237.c        221    ER intini(void)
P   00000000              _intini:                         ; function: intini
                                                           ; frame size=8
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FFC                   ADD         #-4,R15
            n4i7237.c        222    {
            n4i7237.c        223      #ifndef INTVEC
            n4i7237.c        224       #if defined(__ghs)               /* Green Hills */
            n4i7237.c        225        UW *intvec = (UW *)__ghsbegin_vect;
            n4i7237.c        226       #elif defined(__HITACHI__)       /* Renesas C */
            n4i7237.c        227        UW *intvec = (UW *)_VECT_BGN;
            n4i7237.c        228       #endif
            n4i7237.c        229      #else
            n4i7237.c        230        UW *intvec = (UW *)INTVEC;
    00000004 E100                   MOV         #0,R1      ; H'00000000
    00000006 2F12                   MOV.L       R1,@R15    ; intvec
            n4i7237.c        231      #endif
            n4i7237.c        232    
            n4i7237.c        233      #if (INTVSZ!=0)
            n4i7237.c        234        int i;
            n4i7237.c        235    
            n4i7237.c        236        /* 割込みベクタテーブルの初期化 */
            n4i7237.c        237    
            n4i7237.c        238        for (i = INT_IRQ0; i < (INTVSZ) / 4; i++)
            n4i7237.c        239            intvec[i] = (UW)_kernel_interr;
            n4i7237.c        240      #endif
            n4i7237.c        241    
            n4i7237.c        242        /* ベクタベースレジスタを設定 */
            n4i7237.c        243    
            n4i7237.c        244        set_vbr((void **)intvec);
    00000008 412E                   LDC         R1,VBR
            n4i7237.c        245    
            n4i7237.c        246        /* 全ての割込み対してレジスタバンクを有効にする */
            n4i7237.c        247    
            n4i7237.c        248        sfr_outw(INTC_IBNR, 0x4000);
    0000000A 04E0080E               MOVI20      #-129010,R4; H'FFFE080E
    0000000E E640                   MOV         #64,R6     ; H'00000040
    00000010 4618                   SHLL8       R6
            n4i7237.c        249    
            n4i7237.c        250      #ifdef HOOK
            n4i7237.c        251        TOTAL_TICKCK = 0;
            n4i7237.c        252      #endif
            n4i7237.c        253        init_timer();
    00000012 B025                   BSR         _init_timer
    00000014 2461                   MOV.W       R6,@R4
            n4i7237.c        254    
            n4i7237.c        255        return E_OK;
    00000016 7F04                   ADD         #4,R15
    00000018 4F26                   LDS.L       @R15+,PR
            n4i7237.c        256    }
    0000001A 000B                   RTS
    0000001C E000                   MOV         #0,R0      ; H'00000000
            n4i7237.c        257    
            n4i7237.c        258    /*****************************************************************************
            n4i7237.c        259    * 定数か否かをチェックする
            n4i7237.c        260    *
            n4i7237.c        261    * 形式  BOOL _kernel_inROM(const void *p);
            n4i7237.c        262    *
            n4i7237.c        263    *       p     チェックする領域へのポインタ
            n4i7237.c        264    *
            n4i7237.c        265    * 戻値  TRUE  コード領域または定数領域
            n4i7237.c        266    *       FALSE 上記以外
            n4i7237.c        267    *
            n4i7237.c        268    * 解説  オブジェクト生成情報等が定数か変数かを判定するために、カーネルの各種
            n4i7237.c        269    *       システムコールから呼び出されます。
            n4i7237.c        270    ******************************************************************************/
            n4i7237.c        271    
            n4i7237.c        272    BOOL _kernel_inROM(const void *p)
    0000001E              __kernel_inROM:                  ; function: _kernel_inROM
                                                           ; frame size=0
    0000001E D572                   MOV.L       L44,R5     ; __P_BGN
    00000020 6652                   MOV.L       @R5,R6     ; _P_BGN
            n4i7237.c        273    {
            n4i7237.c        274    #if defined(__HITACHI__)      /* Renesas C */
            n4i7237.c        275        return((((UW)p >= (UW)_P_BGN) && ((UW)p <= (UW)_P_END)) || (((UW)p >= (UW)_C_BGN) && ((UW)p <= (UW)_C_END)));
    00000022 3462                   CMP/HS      R6,R4
    00000024 8F04                   BF/S        L13
    00000026 E201                   MOV         #1,R2      ; H'00000001
    00000028 D570                   MOV.L       L44+4,R5   ; __P_END
    0000002A 6652                   MOV.L       @R5,R6     ; _P_END
    0000002C 3466                   CMP/HI      R6,R4
    0000002E 8B08                   BF          L14
    00000030              L13:
    00000030 D56F                   MOV.L       L44+8,R5   ; __C_BGN
    00000032 6652                   MOV.L       @R5,R6     ; _C_BGN
    00000034 3462                   CMP/HS      R6,R4
    00000036 8B03                   BF          L16
    00000038 D56E                   MOV.L       L44+12,R5  ; __C_END
    0000003A 6652                   MOV.L       @R5,R6     ; _C_END
    0000003C 3466                   CMP/HI      R6,R4
    0000003E 8B00                   BF          L14
    00000040              L16:
    00000040 E200                   MOV         #0,R2      ; H'00000000
    00000042              L14:
            n4i7237.c        276    
            n4i7237.c        277    #elif defined(__ghs)            /* Green Hills */
            n4i7237.c        278        return((((UW)p >= (UW)__ghsbegin_text) && ((UW)p <= (UW)__ghsend_text)) || (((UW)p >= (UW)__ghsbegin_rodata) && ((UW)p <= (UW)__ghsend_rodata)));
            n4i7237.c        279    
            n4i7237.c        280    #endif
            n4i7237.c        281    }
    00000042 027B                   RTV/N       R2
            n4i7237.c        282    
            n4i7237.c        283    /*****************************************************************************
            n4i7237.c        284    * 割込みサービスルーチン生成情報のチェック
            n4i7237.c        285    *
            n4i7237.c        286    * 形式  ER _kernel_check_cisr(const T_CISR *pk_cisr);
            n4i7237.c        287    *
            n4i7237.c        288    *       pk_cisr  チェックする割込みサービスルーチン生成情報へのポインタ
            n4i7237.c        289    *
            n4i7237.c        290    * 戻値  E_PAR 割込み番号とマスクレベルのいずれかが範囲外
            n4i7237.c        291    *       E_OK  割込み番号とマスクレベルは共に正常
            n4i7237.c        292    *
            n4i7237.c        293    * 解説  割込みサービスルーチン生成情報の割込み番号とマスクレベルの範囲を
            n4i7237.c        294    *       チェックします。
            n4i7237.c        295    *       cre_isr, acre_isr システムコールから呼び出されます。
            n4i7237.c        296    ******************************************************************************/
            n4i7237.c        297    
            n4i7237.c        298    ER _kernel_check_cisr(const T_CISR *pk_cisr)
    00000044              __kernel_check_cisr:             ; function: _kernel_check_cisr
                                                           ; frame size=0
            n4i7237.c        299    {
            n4i7237.c        300      #if (INTVSZ!=0)
            n4i7237.c        301        if (pk_cisr->intno >= (INTVSZ) / 4)
            n4i7237.c        302            return E_PAR;
            n4i7237.c        303        return E_OK;
            n4i7237.c        304      #else
            n4i7237.c        305        return E_PAR;
            n4i7237.c        306      #endif
            n4i7237.c        307    }
    00000044 000B                   RTS
    00000046 E0EF                   MOV         #-17,R0    ; H'FFFFFFEF
            n4i7237.c        308    
            n4i7237.c        309    /*****************************************************************************
            n4i7237.c        310    * 割込みハンドラのアドレス設定
            n4i7237.c        311    *
            n4i7237.c        312    * 形式  void _kernel_set_inthdr(FP hdr, const T_CISR *pk_cisr);
            n4i7237.c        313    *
            n4i7237.c        314    *       hdr       割込みサービスルーチンを呼び出す割込みハンドラのアドレス
            n4i7237.c        315    *       pk_cisr   チェックする割込みサービスルーチン生成情報へのポインタ
            n4i7237.c        316    *
            n4i7237.c        317    * 解説  割込みサービスルーチンを呼び出すために、内部で生成される割込みハンド
            n4i7237.c        318    *       ラのアドレスを、割込みサービスルーチン生成情報の割込み番号より算出し
            n4i7237.c        319    *       た割込みベクタへ格納します。
            n4i7237.c        320    *       cre_isr, acre_isr システムコールから呼び出されます。
            n4i7237.c        321    ******************************************************************************/
            n4i7237.c        322    
            n4i7237.c        323    void _kernel_set_inthdr(FP hdr, const T_CISR *pk_cisr)
    00000048              __kernel_set_inthdr:             ; function: _kernel_set_inthdr
                                                           ; frame size=0
            n4i7237.c        324    {
            n4i7237.c        325      #ifndef INTVEC
            n4i7237.c        326       #if defined(__ghs)               /* Green Hills */
            n4i7237.c        327        UW *intvec = (UW *)__ghsbegin_vect;
            n4i7237.c        328       #elif defined(__HITACHI__)       /* Renesas C */
            n4i7237.c        329        UW *intvec = (UW *)_VECT_BGN;
            n4i7237.c        330       #endif
            n4i7237.c        331      #else
            n4i7237.c        332        UW *intvec = (UW *)INTVEC;
            n4i7237.c        333      #endif
            n4i7237.c        334    
            n4i7237.c        335        intvec[pk_cisr->intno] = (UW)hdr;
    00000048 5052                   MOV.L       @(8,R5),R0 ; (pk_cisr)->intno
    0000004A E600                   MOV         #0,R6      ; H'00000000
    0000004C 4008                   SHLL2       R0
            n4i7237.c        336    }
    0000004E 000B                   RTS
    00000050 0646                   MOV.L       R4,@(R0,R6); intvec[]
            n4i7237.c        337    
            n4i7237.c        338    /*****************************************************************************
            n4i7237.c        339    * 割込みハンドラのアドレス取得
            n4i7237.c        340    *
            n4i7237.c        341    * 形式  FP _kernel_get_inthdr(const T_CISR *pk_cisr);
            n4i7237.c        342    *
            n4i7237.c        343    *       pk_cisr  チェックする割込みサービスルーチン生成情報へのポインタ
            n4i7237.c        344    *
            n4i7237.c        345    * 戻値  当該割込み番号の割込みハンドラアドレス
            n4i7237.c        346    *
            n4i7237.c        347    * 解説  割込みサービスルーチン生成情報の割込み番号より算出した割込みベクタか
            n4i7237.c        348    *       ら、割込みハンドラアドレスを読み出します。
            n4i7237.c        349    *       cre_isr, acre_isr システムコールから呼び出されます。
            n4i7237.c        350    ******************************************************************************/
            n4i7237.c        351    
            n4i7237.c        352    FP _kernel_get_inthdr(const T_CISR *pk_cisr)
    00000052              __kernel_get_inthdr:             ; function: _kernel_get_inthdr
                                                           ; frame size=0
            n4i7237.c        353    {
            n4i7237.c        354      #ifndef INTVEC
            n4i7237.c        355       #if defined(__ghs)               /* Green Hills */
            n4i7237.c        356        UW *intvec = (UW *)__ghsbegin_vect;
            n4i7237.c        357       #elif defined(__HITACHI__)       /* Renesas C */
            n4i7237.c        358        UW *intvec = (UW *)_VECT_BGN;
            n4i7237.c        359       #endif
            n4i7237.c        360      #else
            n4i7237.c        361        UW *intvec = (UW *)INTVEC;
            n4i7237.c        362      #endif
            n4i7237.c        363    
            n4i7237.c        364        return (FP)intvec[pk_cisr->intno];
    00000052 5042                   MOV.L       @(8,R4),R0 ; (pk_cisr)->intno
    00000054 E600                   MOV         #0,R6      ; H'00000000
    00000056 4008                   SHLL2       R0
            n4i7237.c        365    }
    00000058 000B                   RTS
    0000005A 006E                   MOV.L       @(R0,R6),R0; intvec[]
            n4i7237.c        366    
            n4i7237.c        367    /*****************************************************************************
            n4i7237.c        368    * 割込みハンドラを定義する
            n4i7237.c        369    *
            n4i7237.c        370    * 形式  ER def_inh(UINT inhno, const T_DINH *pk_dinh);
            n4i7237.c        371    *
            n4i7237.c        372    *       inhno    割込みベクタ番号
            n4i7237.c        373    *       pk_dinh  割込みハンドラ定義情報
            n4i7237.c        374    *
            n4i7237.c        375    * 戻値  エラーコード
            n4i7237.c        376    *
            n4i7237.c        377    * 解説  inhno に対応する割込みベクタテーブルに、inthdr を設定します。
            n4i7237.c        378    ******************************************************************************/
            n4i7237.c        379    
            n4i7237.c        380    ER v4_def_inh(INHNO inhno, const V4_T_DINH *pk_dinh)
    0000005C              _v4_def_inh:                     ; function: v4_def_inh
                                                           ; frame size=0
            n4i7237.c        381    {
            n4i7237.c        382      #if (INTVSZ==0)
            n4i7237.c        383    
            n4i7237.c        384        return E_NOSPT;
            n4i7237.c        385    
            n4i7237.c        386      #else
            n4i7237.c        387    
            n4i7237.c        388        UINT psw;
            n4i7237.c        389        FP fp;
            n4i7237.c        390      #ifndef INTVEC
            n4i7237.c        391       #if defined(__ghs)               /* Green Hills */
            n4i7237.c        392        UW *intvec = (UW *)__ghsbegin_vect;
            n4i7237.c        393       #elif defined(__HITACHI__)       /* Renesas C */
            n4i7237.c        394        UW *intvec = (UW *)_VECT_BGN;
            n4i7237.c        395       #endif
            n4i7237.c        396      #else
            n4i7237.c        397        UW *intvec = (UW *)INTVEC;
            n4i7237.c        398      #endif
            n4i7237.c        399    
            n4i7237.c        400        /* 割込みベクタテーブルへのポインタ算出 */
            n4i7237.c        401    
            n4i7237.c        402        if (inhno >= (INTVSZ) / 4)
            n4i7237.c        403            return E_PAR;
            n4i7237.c        404    
            n4i7237.c        405        /* 定義解除の場合、未定義割込みハンドラを設定 */
            n4i7237.c        406    
            n4i7237.c        407        if (pk_dinh == (T_DINH *)NADR)
            n4i7237.c        408            fp = (FP)_kernel_interr;
            n4i7237.c        409        else
            n4i7237.c        410            fp = pk_dinh->inthdr;
            n4i7237.c        411    
            n4i7237.c        412        /* CPU割込み禁止 */
            n4i7237.c        413    
            n4i7237.c        414        psw = vdis_psw();
            n4i7237.c        415    
            n4i7237.c        416        /* 新しい割込みベクタ設定 */
            n4i7237.c        417    
            n4i7237.c        418        intvec[inhno] = (UW)fp;
            n4i7237.c        419    
            n4i7237.c        420        /* CPU割込み禁止戻す */
            n4i7237.c        421    
            n4i7237.c        422        vset_psw(psw);
            n4i7237.c        423        return E_OK;
            n4i7237.c        424    
            n4i7237.c        425      #endif
            n4i7237.c        426    }
    0000005C 000B                   RTS
    0000005E E0F7                   MOV         #-9,R0     ; H'FFFFFFF7
            n4i7237.c        427    
            n4i7237.c        428    /*****************************************************************************
            n4i7237.c        429    * 周期タイマ割込み起動 (内蔵CMT)
            n4i7237.c        430    *
            n4i7237.c        431    * 形式  ER intsta(void);
            n4i7237.c        432    *
            n4i7237.c        433    * 戻値  エラーコード
            n4i7237.c        434    *
            n4i7237.c        435    * 補足  割込み禁止状態で実行してください。
            n4i7237.c        436    ******************************************************************************/
            n4i7237.c        437    
            n4i7237.c        438    static UW tc;
            n4i7237.c        439    static UH cks;
            n4i7237.c        440    
            n4i7237.c        441    void init_timer(void)
    00000060              _init_timer:                     ; function: init_timer
                                                           ; frame size=32
    00000060 2FB6                   MOV.L       R11,@-R15
    00000062 2FC6                   MOV.L       R12,@-R15
    00000064 2FD6                   MOV.L       R13,@-R15
    00000066 2FE6                   MOV.L       R14,@-R15
    00000068 7FF0                   ADD         #-16,R15
            n4i7237.c        442    {
            n4i7237.c        443        UW prescale[] = { 8, 32, 128, 512 };
    0000006A D763                   MOV.L       L44+16,R7  ; L45
    0000006C 6B72                   MOV.L       @R7,R11
    0000006E 65F3                   MOV         R15,R5
    00000070 5171                   MOV.L       @(4,R7),R1
    00000072 EC03                   MOV         #3,R12     ; H'00000003
    00000074 5472                   MOV.L       @(8,R7),R4
    00000076 5673                   MOV.L       @(12,R7),R6
    00000078 E7FF                   MOV         #-1,R7     ; H'FFFFFFFF
    0000007A 2FB2                   MOV.L       R11,@R15   ; prescale[]
    0000007C 677D                   EXTU.W      R7,R7
    0000007E 1F11                   MOV.L       R1,@(4,R15); prescale[]
            n4i7237.c        444        /* 時定数を計算 */
            n4i7237.c        445    
            n4i7237.c        446        for (cks = 0; cks <= 3; cks++) {
    00000080 E100                   MOV         #0,R1      ; H'00000000
    00000082 1F42                   MOV.L       R4,@(8,R15); prescale[]
    00000084 1F63                   MOV.L       R6,@(12,R15); prescale[]
    00000086 DB5D                   MOV.L       L44+20,R11 ; __$tc
    00000088 0D0003E8               MOVI20      #1000,R13  ; H'000003E8
    0000008C 0E21625A               MOVI20S     #40000000,R14; H'02625A00
    00000090 A00B                   BRA         L22
    00000092 62B2                   MOV.L       @R11,R2    ; tc
    00000094              L23:
            n4i7237.c        447            tc = (((UW)(CLK) * MSEC)/((UW)prescale[cks] * 1000)) - 1;
    00000094 6652                   MOV.L       @R5,R6     ; prescale[]
    00000096 60D3                   MOV         R13,R0
    00000098 62E3                   MOV         R14,R2
    0000009A 4680                   MULR        R0,R6
    0000009C 6063                   MOV         R6,R0
    0000009E 4284                   DIVU        R0,R2
    000000A0 72FF                   ADD         #-1,R2
            n4i7237.c        448            if (tc <= 0xffffL)
    000000A2 3276                   CMP/HI      R7,R2
    000000A4 8B04                   BF          L25
    000000A6 7101                   ADD         #1,R1
    000000A8 7504                   ADD         #4,R5
    000000AA              L22:
    000000AA 641D                   EXTU.W      R1,R4
    000000AC 34C7                   CMP/GT      R12,R4
    000000AE 8BF1                   BF          L23
    000000B0              L25:
    000000B0 D653                   MOV.L       L44+24,R6  ; __$cks
    000000B2 34C7                   CMP/GT      R12,R4
            n4i7237.c        449                break;
            n4i7237.c        450        }
            n4i7237.c        451    
            n4i7237.c        452      #ifdef HOOK
            n4i7237.c        453        TICK_RATE = 0;
            n4i7237.c        454      #endif
            n4i7237.c        455        if (cks > 3 || tc == 0L)
    000000B4 2B22                   MOV.L       R2,@R11    ; tc
    000000B6 8D12                   BT/S        L27
    000000B8 2611                   MOV.W       R1,@R6     ; cks
    000000BA 2228                   TST         R2,R2
    000000BC 890F                   BT          L27
            n4i7237.c        456            return; /* エラー */
            n4i7237.c        457    
            n4i7237.c        458        /* タイマユニット初期化 */
            n4i7237.c        459    
            n4i7237.c        460        sfr_clr(STBCR4, 0x4);           /* CMTへのクロック供給 */
    000000BE 0EE0040C               MOVI20      #-130036,R14; H'FFFE040C
    000000C2 E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
            n4i7237.c        461        sfr_clrw(CMT_CMSTR, 0x01 << CH);/* カウント一旦停止 */
    000000C4 02E0C000               MOVI20      #-81920,R2 ; H'FFFEC000
    000000C8 6CE0                   MOV.B       @R14,R12
    000000CA 86C2                   BCLR        #2,R12
    000000CC 2EC0                   MOV.B       R12,@R14
    000000CE 6D21                   MOV.W       @R2,R13
    000000D0 86D0                   BCLR        #0,R13
    000000D2 22D1                   MOV.W       R13,@R2
    000000D4 8123                   MOV.W       R0,@(6,R2)
    000000D6 6013                   MOV         R1,R0
    000000D8 8121                   MOV.W       R0,@(2,R2)
    000000DA E000                   MOV         #0,R0      ; H'00000000
    000000DC 8122                   MOV.W       R0,@(4,R2)
    000000DE              L27:
    000000DE 7F10                   ADD         #16,R15
    000000E0 6EF6                   MOV.L       @R15+,R14
    000000E2 6DF6                   MOV.L       @R15+,R13
    000000E4 6CF6                   MOV.L       @R15+,R12
            n4i7237.c        462        sfr_outw(CMT_CMCOR, (UH)(-1));  /* 比較値 */
            n4i7237.c        463        sfr_outw(CMT_CMCSR, cks);       /* クロック選択 */
            n4i7237.c        464        sfr_outw(CMT_CMCNT, 0x00);      /* カウンタクリア */
            n4i7237.c        465    }
    000000E6 000B                   RTS
    000000E8 6BF6                   MOV.L       @R15+,R11
            n4i7237.c        466    
            n4i7237.c        467    ER intsta(void)
    000000EA              _intsta:                         ; function: intsta
                                                           ; frame size=0
            n4i7237.c        468    {
            n4i7237.c        469        if (cks > 3 || tc == 0L)
    000000EA D145                   MOV.L       L44+24,R1  ; __$cks
    000000EC 6211                   MOV.W       @R1,R2     ; cks
    000000EE E603                   MOV         #3,R6      ; H'00000003
    000000F0 3266                   CMP/HI      R6,R2
    000000F2 8923                   BT          L31
    000000F4 D441                   MOV.L       L44+20,R4  ; __$tc
    000000F6 6242                   MOV.L       @R4,R2     ; tc
    000000F8 2228                   TST         R2,R2
    000000FA 891F                   BT          L31
            n4i7237.c        470            return E_PAR; /* エラー */
            n4i7237.c        471    
            n4i7237.c        472        /* 割込み定義 */
            n4i7237.c        473    
            n4i7237.c        474      #if (INTVSZ!=0) /* ROMに定義する場合は不要 */
            n4i7237.c        475        acre_isr(&disr_isritm);
            n4i7237.c        476      #endif
            n4i7237.c        477    
            n4i7237.c        478        /* 割込み優先レベル設定 */
            n4i7237.c        479    
            n4i7237.c        480      /* ↓下記、コメントにすると _RESET繰り返しは起きない。 */
            n4i7237.c        481        sfr_setw(INTC_IPR08, (IP) << (12 - CH * 4));
    000000FC 05E00C04               MOVI20      #-127996,R5; H'FFFE0C04
    00000100 E270                   MOV         #112,R2    ; H'00000070
    00000102 4218                   SHLL8       R2
    00000104 6651                   MOV.W       @R5,R6
    00000106 262B                   OR          R2,R6
    00000108 2561                   MOV.W       R6,@R5
            n4i7237.c        482    
            n4i7237.c        483      
            n4i7237.c        484        /* タイマ初期化 */
            n4i7237.c        485    
            n4i7237.c        486      #ifdef HOOK
            n4i7237.c        487        TICK_RATE = (UW)tc;
            n4i7237.c        488        TOTAL_TICKCK = ((sfr_inw(CMT_CMCNT)*MSEC*1000)/TICK_RATE);
            n4i7237.c        489      #endif
            n4i7237.c        490    
            n4i7237.c        491        sfr_clrw(CMT_CMSTR, 0x01 << CH);/* カウント一旦停止 */
    0000010A 06E0C000               MOVI20      #-81920,R6 ; H'FFFEC000
    0000010E 6761                   MOV.W       @R6,R7
    00000110 8670                   BCLR        #0,R7
    00000112 2671                   MOV.W       R7,@R6
    00000114 07008000               MOVI20      #32768,R7  ; H'00008000
    00000118 6042                   MOV.L       @R4,R0     ; tc
    0000011A 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    0000011E 8163                   MOV.W       R0,@(6,R6)
    00000120 E000                   MOV         #0,R0      ; H'00000000
    00000122 8162                   MOV.W       R0,@(4,R6)
            n4i7237.c        492        sfr_outw(CMT_CMCOR, (H)(tc));   /* 比較値 */
            n4i7237.c        493        sfr_outw(CMT_CMCNT, (H)(0));    /* カウンタクリア */
            n4i7237.c        494        sfr_outw(CMT_CMCSR, 0x40|cks);  /* コンペアマッチ割り込みを許可 */
    00000124 6011                   MOV.W       @R1,R0     ; cks
    00000126 860E                   BSET        #6,R0
    00000128 8161                   MOV.W       R0,@(2,R6)
            n4i7237.c        495                                        /* クロック選択 */
            n4i7237.c        496      INTC.IPR08.BIT._CMT0 = 8;                   // CMT0割り込みレベル = 4
            n4i7237.c        497        sfr_setw(CMT_CMSTR, 0x01 << CH);/* カウント動作再スタート */
            n4i7237.c        498    
            n4i7237.c        499        return E_OK;
    0000012A E000                   MOV         #0,R0      ; H'00000000
    0000012C 6151                   MOV.W       @R5,R1
    0000012E 2149                   AND         R4,R1
    00000130 217B                   OR          R7,R1
    00000132 2511                   MOV.W       R1,@R5
    00000134 6261                   MOV.W       @R6,R2
    00000136 8628                   BSET        #0,R2
    00000138 000B                   RTS
    0000013A 2621                   MOV.W       R2,@R6
    0000013C              L31:
    0000013C 000B                   RTS
    0000013E E0EF                   MOV         #-17,R0    ; H'FFFFFFEF
            n4i7237.c        500    }
            n4i7237.c        501    
            n4i7237.c        502    /*****************************************************************************
            n4i7237.c        503    * 周期タイマ割込サービスルーチン (内蔵 CMT)
            n4i7237.c        504    *
            n4i7237.c        505    ******************************************************************************/
            n4i7237.c        506    
            n4i7237.c        507    #if (INTVSZ==0) /* ROMに定義する場合は割込みハンドラ */
            n4i7237.c        508    void isritm(void)
    00000140              _isritm:                         ; function: isritm
                                                           ; frame size=0
            n4i7237.c        509    #else
            n4i7237.c        510    void isritm(VP_INT exinf)
            n4i7237.c        511    #endif
            n4i7237.c        512    {
            n4i7237.c        513      #ifdef HOOK
            n4i7237.c        514        UINT psw;
            n4i7237.c        515    
            n4i7237.c        516        psw = vdis_psw();
            n4i7237.c        517        TOTAL_TICKCK += MSEC*1000;
            n4i7237.c        518      #endif
            n4i7237.c        519        sfr_clrw(CMT_CMCSR, 0x80);      /* CMF コンペアマッチフラグクリア */
    00000140 06E0C002               MOVI20      #-81918,R6 ; H'FFFEC002
    00000144 6161                   MOV.W       @R6,R1
    00000146 8617                   BCLR        #7,R1
    00000148 D42E                   MOV.L       L44+28,R4  ; _v3_sig_tim
    0000014A 442B                   JMP         @R4
    0000014C 2611                   MOV.W       R1,@R6
            n4i7237.c        520      #ifdef HOOK
            n4i7237.c        521        vset_psw(psw);
            n4i7237.c        522      #endif
            n4i7237.c        523        isig_tim();                     /* システムクロック処理 */
            n4i7237.c        524    }
            n4i7237.c        525    
            n4i7237.c        526    /*****************************************************************************
            n4i7237.c        527    * 周期タイマ割込みハンドラ (内蔵 CMT)
            n4i7237.c        528    *
            n4i7237.c        529    ******************************************************************************/
            n4i7237.c        530    
            n4i7237.c        531    #if (INTVSZ==0)
            n4i7237.c        532    INTHDR inthdr(void)
    0000014E              _inthdr:                         ; function: inthdr
                                                           ; frame size=8
            n4i7237.c        533    {
            n4i7237.c        534        ent_int();                      /* 割込みハンドラの開始 */
    0000014E D12E                   MOV.L       L44+32,R1  ; _v3_ent_int
    00000150 414B                   JSR/N       @R1
            n4i7237.c        535        isritm();                       /* 割込サービスルーチンを呼ぶ */
    00000152 BFF5                   BSR         _isritm
    00000154 0009                   NOP
            n4i7237.c        536        ret_int();                      /* 割込みハンドラから復帰する */
    00000156 D42D                   MOV.L       L44+36,R4  ; _v3_ret_int
    00000158 444B                   JSR/N       @R4
    0000015A 005B                   RESBANK
            n4i7237.c        537    }
    0000015C 002B                   RTE
    0000015E 0009                   NOP
            n4i7237.c        538    INTHDR int_sio0_rx(void)
    00000160              _int_sio0_rx:                    ; function: int_sio0_rx
                                                           ; frame size=8
            n4i7237.c        539    {
            n4i7237.c        540        ent_int();                      /* 割込みハンドラの開始 */
    00000160 D129                   MOV.L       L44+32,R1  ; _v3_ent_int
    00000162 414B                   JSR/N       @R1
            n4i7237.c        541        int_sio0_rxi();                 /* 割込サービスルーチンを呼ぶ */
    00000164 D42A                   MOV.L       L44+40,R4  ; _int_sio0_rxi
    00000166 444B                   JSR/N       @R4
            n4i7237.c        542        ret_int();                      /* 割込みハンドラから復帰する */
    00000168 D528                   MOV.L       L44+36,R5  ; _v3_ret_int
    0000016A 454B                   JSR/N       @R5
    0000016C 005B                   RESBANK
            n4i7237.c        543    }
    0000016E 002B                   RTE
    00000170 0009                   NOP
            n4i7237.c        544    INTHDR int_sio0_er(void)
    00000172              _int_sio0_er:                    ; function: int_sio0_er
                                                           ; frame size=8
            n4i7237.c        545    {
            n4i7237.c        546        ent_int();                      /* 割込みハンドラの開始 */
    00000172 D125                   MOV.L       L44+32,R1  ; _v3_ent_int
    00000174 414B                   JSR/N       @R1
            n4i7237.c        547        int_sio0_eri();                 /* 割込サービスルーチンを呼ぶ */
    00000176 D427                   MOV.L       L44+44,R4  ; _int_sio0_eri
    00000178 444B                   JSR/N       @R4
            n4i7237.c        548        ret_int();                      /* 割込みハンドラから復帰する */
    0000017A D524                   MOV.L       L44+36,R5  ; _v3_ret_int
    0000017C 454B                   JSR/N       @R5
    0000017E 005B                   RESBANK
            n4i7237.c        549    }
    00000180 002B                   RTE
    00000182 0009                   NOP
            n4i7237.c        550    
            n4i7237.c        551    INTHDR int_sio1_rx(void)
    00000184              _int_sio1_rx:                    ; function: int_sio1_rx
                                                           ; frame size=8
            n4i7237.c        552    {
            n4i7237.c        553        ent_int();                      /* 割込みハンドラの開始 */
    00000184 D120                   MOV.L       L44+32,R1  ; _v3_ent_int
    00000186 414B                   JSR/N       @R1
            n4i7237.c        554        int_sio_rxEx(SIO_EX1);          /* 割込サービスルーチンを呼ぶ */
    00000188 D523                   MOV.L       L44+48,R5  ; _int_sio_rxEx
    0000018A 450B                   JSR         @R5
    0000018C E401                   MOV         #1,R4      ; H'00000001
            n4i7237.c        555        ret_int();                      /* 割込みハンドラから復帰する */
    0000018E D61F                   MOV.L       L44+36,R6  ; _v3_ret_int
    00000190 464B                   JSR/N       @R6
    00000192 005B                   RESBANK
            n4i7237.c        556    }
    00000194 002B                   RTE
    00000196 0009                   NOP
            n4i7237.c        557    INTHDR int_sio1_er(void)
    00000198              _int_sio1_er:                    ; function: int_sio1_er
                                                           ; frame size=8
            n4i7237.c        558    {
            n4i7237.c        559        ent_int();                      /* 割込みハンドラの開始 */
    00000198 D11B                   MOV.L       L44+32,R1  ; _v3_ent_int
    0000019A 414B                   JSR/N       @R1
            n4i7237.c        560        int_sio_erEx(SIO_EX1);          /* 割込サービスルーチンを呼ぶ */
    0000019C D51F                   MOV.L       L44+52,R5  ; _int_sio_erEx
    0000019E 450B                   JSR         @R5
    000001A0 E401                   MOV         #1,R4      ; H'00000001
            n4i7237.c        561        ret_int();                      /* 割込みハンドラから復帰する */
    000001A2 D61A                   MOV.L       L44+36,R6  ; _v3_ret_int
    000001A4 464B                   JSR/N       @R6
    000001A6 005B                   RESBANK
            n4i7237.c        562    }
    000001A8 002B                   RTE
    000001AA 0009                   NOP
            n4i7237.c        563    INTHDR int_sio2_rx(void)
    000001AC              _int_sio2_rx:                    ; function: int_sio2_rx
                                                           ; frame size=8
            n4i7237.c        564    {
            n4i7237.c        565        ent_int();                      /* 割込みハンドラの開始 */
    000001AC D116                   MOV.L       L44+32,R1  ; _v3_ent_int
    000001AE 414B                   JSR/N       @R1
            n4i7237.c        566        int_sio_rxEx(SIO_EX2);          /* 割込サービスルーチンを呼ぶ */
    000001B0 D519                   MOV.L       L44+48,R5  ; _int_sio_rxEx
    000001B2 450B                   JSR         @R5
    000001B4 E402                   MOV         #2,R4      ; H'00000002
            n4i7237.c        567        ret_int();                      /* 割込みハンドラから復帰する */
    000001B6 D615                   MOV.L       L44+36,R6  ; _v3_ret_int
    000001B8 464B                   JSR/N       @R6
    000001BA 005B                   RESBANK
            n4i7237.c        568    }
    000001BC 002B                   RTE
    000001BE 0009                   NOP
            n4i7237.c        569    INTHDR int_sio2_er(void)
    000001C0              _int_sio2_er:                    ; function: int_sio2_er
                                                           ; frame size=8
            n4i7237.c        570    {
            n4i7237.c        571        ent_int();                      /* 割込みハンドラの開始 */
    000001C0 D111                   MOV.L       L44+32,R1  ; _v3_ent_int
    000001C2 414B                   JSR/N       @R1
            n4i7237.c        572        int_sio_erEx(SIO_EX2);          /* 割込サービスルーチンを呼ぶ */
    000001C4 D515                   MOV.L       L44+52,R5  ; _int_sio_erEx
    000001C6 450B                   JSR         @R5
    000001C8 E402                   MOV         #2,R4      ; H'00000002
            n4i7237.c        573        ret_int();                      /* 割込みハンドラから復帰する */
    000001CA D610                   MOV.L       L44+36,R6  ; _v3_ret_int
    000001CC 464B                   JSR/N       @R6
    000001CE 005B                   RESBANK
            n4i7237.c        574    }
    000001D0 002B                   RTE
    000001D2 0009                   NOP
            n4i7237.c        575    // 5/11INTHDR int_sio3_rx(void)
            n4i7237.c        576    // 5/11{
            n4i7237.c        577    // 5/11    ent_int();                      /* 割込みハンドラの開始 */
            n4i7237.c        578    // 5/11    int_sio_rxEx(SIO_EX3);          /* 割込サービスルーチンを呼ぶ */
            n4i7237.c        579    // 5/11    ret_int();                      /* 割込みハンドラから復帰する */
            n4i7237.c        580    // 5/11}
            n4i7237.c        581    // 5/11INTHDR int_sio3_er(void)
            n4i7237.c        582    // 5/11{
            n4i7237.c        583    // 5/11    ent_int();                      /* 割込みハンドラの開始 */
            n4i7237.c        584    // 5/11    int_sio_erEx(SIO_EX3);          /* 割込サービスルーチンを呼ぶ */
            n4i7237.c        585    // 5/11    ret_int();                      /* 割込みハンドラから復帰する */
            n4i7237.c        586    // 5/11}
            n4i7237.c        587    
            n4i7237.c        588    INTHDR int_irq4(void)
    000001D4              _int_irq4:                       ; function: int_irq4
                                                           ; frame size=4
    000001D4 4F22                   STS.L       PR,@-R15
            n4i7237.c        589    {
            n4i7237.c        590        ent_int();                      /* 割込みハンドラの開始 */
    000001D6 D10C                   MOV.L       L44+32,R1  ; _v3_ent_int
    000001D8 414B                   JSR/N       @R1
            n4i7237.c        591        IRQ4_ISR();                     /* 割込サービスルーチンを呼ぶ */
    000001DA D411                   MOV.L       L44+56,R4  ; _IRQ4_ISR
    000001DC 444B                   JSR/N       @R4
            n4i7237.c        592        ret_int();                      /* 割込みハンドラから復帰する */
    000001DE D50B                   MOV.L       L44+36,R5  ; _v3_ret_int
    000001E0 452B                   JMP         @R5
    000001E2 4F26                   LDS.L       @R15+,PR
            n4i7237.c        593    }
            n4i7237.c        594    #endif
            n4i7237.c        595    
            n4i7237.c        596    /*****************************************************************************
            n4i7237.c        597    * Tick入力積算値を算出 (内蔵CMT)
            n4i7237.c        598    *
            n4i7237.c        599    ******************************************************************************/
            n4i7237.c        600    
            n4i7237.c        601    #ifdef HOOK
            n4i7237.c        602    #if (HOOK==1)
            n4i7237.c        603    UW tickck_read(void)
            n4i7237.c        604    #else
            n4i7237.c        605    UW ctex_timer_read(void)
            n4i7237.c        606    #endif
            n4i7237.c        607    {
            n4i7237.c        608        UW ret, tmp;
            n4i7237.c        609        UH tmp_flg;
            n4i7237.c        610    
            n4i7237.c        611        if (TICK_RATE) {
            n4i7237.c        612            /* 周期タイマー起動後 */
            n4i7237.c        613    
            n4i7237.c        614            do {
            n4i7237.c        615                ret = *((volatile UW*)&TOTAL_TICKCK);
            n4i7237.c        616                tmp_flg = sfr_inw(CMT_CMCSR);
            n4i7237.c        617                tmp = sfr_inw(CMT_CMCNT);
            n4i7237.c        618            } while((tmp == TICK_RATE) || (ret != *((volatile UW*)&TOTAL_TICKCK)));
            n4i7237.c        619            /* コンペアマッチを起こしていると想定される場合は再度計算しなおす。*/
            n4i7237.c        620    
            n4i7237.c        621            if (tmp_flg & 0x80) {
            n4i7237.c        622                tmp += TICK_RATE;
            n4i7237.c        623            }
            n4i7237.c        624    
            n4i7237.c        625            return (ret + ((tmp*MSEC*1000)/TICK_RATE));
            n4i7237.c        626    
            n4i7237.c        627        } else {
            n4i7237.c        628            /* 周期タイマー起動前 */
            n4i7237.c        629            return ((sfr_inw(CMT_CMCNT)*MSEC*1000)/tc);
            n4i7237.c        630        }
            n4i7237.c        631    }
            n4i7237.c        632    
            n4i7237.c        633    #else
            n4i7237.c        634    
            n4i7237.c        635    UW tickck_read(void)
    000001E4              _tickck_read:                    ; function: tickck_read
                                                           ; frame size=0
            n4i7237.c        636    {
            n4i7237.c        637        return 0L;
            n4i7237.c        638    }
    000001E4 000B                   RTS
    000001E6 E000                   MOV         #0,R0      ; H'00000000
    000001E8              L44:
    000001E8 <00000000>             .DATA.L     __P_BGN
    000001EC <00000000>             .DATA.L     __P_END
    000001F0 <00000000>             .DATA.L     __C_BGN
    000001F4 <00000000>             .DATA.L     __C_END
    000001F8 <00000000>             .DATA.L     L45
    000001FC <00000000>             .DATA.L     __$tc
    00000200 <00000000>             .DATA.L     __$cks
    00000204 <00000000>             .DATA.L     _v3_sig_tim
    00000208 <00000000>             .DATA.L     _v3_ent_int
    0000020C <00000000>             .DATA.L     _v3_ret_int
    00000210 <00000000>             .DATA.L     _int_sio0_rxi
    00000214 <00000000>             .DATA.L     _int_sio0_eri
    00000218 <00000000>             .DATA.L     _int_sio_rxEx
    0000021C <00000000>             .DATA.L     _int_sio_erEx
    00000220 <00000000>             .DATA.L     _IRQ4_ISR
            n4i7237.c        639    #endif
            n4i7237.c        640    
            n4i7237.c        641    /* end */
C   00000000              L45:
    00000000 0000000800             .DATA.L     H'00000008,H'00000020,H'00000080,H'00000200
             0000200000   
             0080000002   
             00           
B   00000000              __$tc:                           ; static: __$tc
    00000000 00000004               .RES.L      1
    00000004              __$cks:                          ; static: __$cks
    00000004 00000002               .RES.W      1
SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 14:07:49  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      641



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 00000224 Byte(s)
CONSTANT SECTION (C):                                 00000010 Byte(s)
DATA     SECTION (D):                                 00000000 Byte(s)
BSS      SECTION (B):                                 00000006 Byte(s)

TOTAL PROGRAM  SECTION: 00000224 Byte(s)
TOTAL CONSTANT SECTION: 00000010 Byte(s)
TOTAL DATA     SECTION: 00000000 Byte(s)
TOTAL BSS      SECTION: 00000006 Byte(s)

    TOTAL PROGRAM SIZE: 0000023A Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           12
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          18
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            40



*** COMMAND PARAMETER ***

-subcommand=C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\n4i7237.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-define=INTVEC=0,INTVSZ=0,CLK=40000000,CH=0,MSEC=1
-object="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\n4i7237.obj"
-debug
-listfile="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\n4i7237.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\n4i7237.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
