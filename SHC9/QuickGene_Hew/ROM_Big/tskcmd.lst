SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:34  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskcmd.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             tskcmd.c          1    /******************************************************************************
             tskcmd.c          2    * コマンド実行タスク                                                          *
             tskcmd.c          3    *                                                                             *
             tskcmd.c          4    * File name : tskcmd.c                                                        *
             tskcmd.c          5    *                                                                             *
             tskcmd.c          6    * Copyright (c) 2018 NICHIRYO Co., Ltd.                                       *
             tskcmd.c          7    *                                             h                                *
             tskcmd.c          8    ******************************************************************************/
             tskcmd.c          9    #include <kernel.h>
             tskcmd.c         10    #include <stdio.h>
             tskcmd.c         11    #include <stdlib.h>
             tskcmd.c         12    #include "iodefine.h"
             tskcmd.c         13    #include "define.h"
             tskcmd.c         14    #include "datastruct.h"
             tskcmd.c         15    #include "automachine.h"
             tskcmd.c         16    #include "tskcmd.h"
             tskcmd.c         17    #include "sub.h"
             tskcmd.c         18    #include "mnet.h"
             tskcmd.c         19    #include "machine.h"
             tskcmd.c         20    #include "tskmotwait.h"
             tskcmd.c         21    #include "tblchr.h"
             tskcmd.c         22    #include "macro.h"
             tskcmd.c         23    
             tskcmd.c         24    
             tskcmd.c         25    
             tskcmd.c         26    //*************************************
             tskcmd.c         27    // 定数定義
             tskcmd.c         28    //*************************************
             tskcmd.c         29    //#define SRAM_START_ADDRESS          0x0C000000  // 0C00 0000 - 0C07 FFFF
             tskcmd.c         30    #define   USER_CT_MAX                 10
             tskcmd.c         31    #define   USER_ID_MAX                 8
             tskcmd.c         32    #define   USER_PW_MAX                 4
             tskcmd.c         33    #define   PROT_CT_MAX                 20
             tskcmd.c         34    
             tskcmd.c         35    #define   PULSEMOTOR_ADDR         0x0C009000      // パルスモータコントローラアドレス
             tskcmd.c         36    #define   PULSEMOTOR_CMD_CUN1R    0x20            // カウンタリセット（COUNTER1）
             tskcmd.c         37    #define   PULSEMOTOR_CMD_CUN2R    0x21            // カウンタリセット（COUNTER2）
             tskcmd.c         38    #define   PULSEMOTOR_CMD_STOP     0x49            // 即停止
             tskcmd.c         39    #define   PULSEMOTOR_CMD_STAFL    0x50            // FL低速スタート
             tskcmd.c         40    #define   PULSEMOTOR_CMD_WPRFL    0x81            // [W] 初速度
             tskcmd.c         41    #define   PULSEMOTOR_CMD_WPRMG    0x85            // [W] 速度倍率
             tskcmd.c         42    #define   PULSEMOTOR_CMD_WPRMD    0x87            // [W] 動作モード
             tskcmd.c         43    #define   PULSEMOTOR_CMD_WRENV1   0x9C            // [W] 環境設定1
             tskcmd.c         44    #define   PULSEMOTOR_CMD_WRENV2   0x9D            // [W] 環境設定2
             tskcmd.c         45    #define   PULSEMOTOR_CMD_RRENV1   0xDC            // [R] 環境設定1
             tskcmd.c         46    #define   PULSEMOTOR_CMD_RCUN1    0xE3            // [R] COUNTER1（指令位置カウンタ）
             tskcmd.c         47    #define   PULSEMOTOR_CMD_RCUN2    0xE4            // [R] COUNTER2（機械位置カウンタ）
             tskcmd.c         48    #define   PULSEMOTOR_CMD_RREST    0xF2            // [R] エラー割り込み要因取得
             tskcmd.c         49    #define   PULSEMOTOR_COUNT_ERROR_LIMIT    1       // カウントエラー許容値 [cnt]
             tskcmd.c         50    
             tskcmd.c         51    
             tskcmd.c         52    //*************************************
             tskcmd.c         53    // 関数定義
             tskcmd.c         54    //*************************************
             tskcmd.c         55    static    void    CmdTskInit();                                           // コマンドタスクデータ初期化
             tskcmd.c         56    static    void    CmdTskInitAct();                                        // コマンドタスク動作データ初期化
             tskcmd.c         57    static    void    CmdProc(T_CMD_MSG* mrcv);                               // タスク別解析処理
             tskcmd.c         58    static    void    Rx0RcvMsg( T_CMD_MSG* mrcv );                           // ＰＣ受信（ＲＸ０）タスクからのメッセージ受信処理
             tskcmd.c         59    static    void    Tx0RcvMsg( T_CMD_MSG* mrcv );                           // ＰＣ送信（ＴＸ０）タスクからのメッセージ受信処理
             tskcmd.c         60    static    void    AlmRcvMsg( T_CMD_MSG* mrcv );                           // アラームハンドラから受信
             tskcmd.c         61    static    void    EepRcvMsg( T_CMD_MSG* mrcv );                           // ＥＥＰＲＯＭ管理タスクからのメッセージ受信処理
             tskcmd.c         62    static    void    IntRcvMsg( T_CMD_MSG* mrcv );                           // ＩＮＴタスクから受信
             tskcmd.c         63    static    void    MotWaitRcvMsg( T_CMD_MSG* mrcv );                       // ウェイトタスクから受信
             tskcmd.c         64    static    void    MotEndRcvMsg( T_CMD_MSG* mrcv );                        // 終了監視タスクから受信
             tskcmd.c         65    static    void    RxExRcvMsg( T_CMD_MSG* mrcv );                          // 受信（ＲＸＥＸ）タスクからのメッセージ受信処理
             tskcmd.c         66    static    void    PunitRcvMsg( T_CMD_MSG* mrcv );
             tskcmd.c         67    static    void    TmpCntRcvMsg( T_CMD_MSG* mrcv );
             tskcmd.c         68    
             tskcmd.c         69    static    void    CmdAnalyze( T_CMD_MSG* mrcv );                          // コマンド解析
             tskcmd.c         70    typedef   void    (*CMD_FUNCTBL)( T_CMD_MSG* mrcv, UB anum, const char** args );// 動作実行ファンクション
             tskcmd.c         71    typedef   void    (*TP_FUNCTBL) ( T_CMD_MSG* mrcv, UB anum, const char** args );// 動作実行ファンクション
             tskcmd.c         72    static    ER      ParamDataCheck( UB msg , UB anum ,  const char** args );// 受信パラメータチェック
             tskcmd.c         73    
             tskcmd.c         74    
             tskcmd.c         75    // コマンド処理
             tskcmd.c         76    static void CmdDummy  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ダミールーチン                                    */
             tskcmd.c         77    static void CmdHELLO  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   HELLO   起動通知                                  */
             tskcmd.c         78    static void CmdVER    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   VER     バージョン確認                            */
             tskcmd.c         79    static void CmdALLIN  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ALLIN   全I/O入力                                 */
             tskcmd.c         80    static void CmdBIN    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   BIN     I/O入力                                   */
             tskcmd.c         81    static void CmdBOUT   ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   BOUT    I/O出力                                   */
             tskcmd.c         82    static void CmdCINIT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   CINIT   入力カウンタの設定                        */
             tskcmd.c         83    static void CmdCOUNT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   COUNT   入力カウンタの読み出し                    */
             tskcmd.c         84    static void CmdINT    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   INT     割り込み設定                              */
             tskcmd.c         85    static void CmdABSMV  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ABSMV   パルスモータ移動(絶対位置)                */
             tskcmd.c         86    static void CmdABORT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ABORT   パルスモータ即停止                        */
             tskcmd.c         87    static void CmdENCODER( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   ENCODER エンコーダの設定                          */
             tskcmd.c         88    static void CmdLIMIT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   LIMIT   パルスモータ原点復帰                      */
             tskcmd.c         89    static void CmdMAP    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   MAP     ２軸のパルスモータ移動                    */
             tskcmd.c         90    static void CmdPDELAY ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   PDELAY  パルスモータのパワー制御待ち時間設定      */
             tskcmd.c         91    static void CmdPOWER  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   POWER   パルスモータの励磁制御                    */
             tskcmd.c         92    static void CmdPSET   ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   PSET    パルスモータのカウンタリセット            */
             tskcmd.c         93    static void CmdRELMV  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   RELMV   パルスモータ移動(相対位置)                */
             tskcmd.c         94    static void CmdSET    ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   SET     パルスモータ速度設定                      */
             tskcmd.c         95    static void CmdSTATUS ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   STATUS  パルスモータ状態読み出し                  */
             tskcmd.c         96    static void CmdSTOP   ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   STOP    パルスモータ減速停止                      */
             tskcmd.c         97    static void CmdBZCNT  ( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   BZCNT                                             */
             tskcmd.c         98    static void CmdEEPREAD( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   EEPREAD   */
             tskcmd.c         99    static void CmdEEPWRIT( T_CMD_MSG* mrcv, UB anum, const char** args );    /*   EEPWRIT   */
             tskcmd.c        100    static void CmdTmpSet ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        101    static void CmdTmpGet ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        102    static void CmdVini   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        103    static void CmdPini   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        104    static void CmdPren   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        105    static void CmdPtan   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        106    static void CmdPcan   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        107    static void CmdVout   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        108    static void CmdPsns   ( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        109    static void CmdImpPdat( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        110    static void CmdImpSped( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        111    static void CmdImpPosi( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        112    static void CmdImpOptn( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        113    static void CmdExpRunl( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        114    static void CmdExpComl( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        115    static void CmdExpClog( T_CMD_MSG* mrcv, UB anum, const char** args );
             tskcmd.c        116    
             tskcmd.c        117    static void SetDevice( UB DevNo );                                        // デバイス動作中セット
             tskcmd.c        118    static BOOL GetDeviceStatus( UB DevNo );                              // デバイス動作状態取得
             tskcmd.c        119    static void ClrDevice( UB DevNo );                                        // デバイス動作中クリア
             tskcmd.c        120    static ER GetDeviceActionChk ( UB msg, UB bcid, UB mm );              // ＢＣ動作可能／不可判定
             tskcmd.c        121    static ER LimitAction( UB prid1, UB bcid, UB mm, UB dr, UB md, INT sp );  // リミット動作
             tskcmd.c        122    static ER RelmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp );               // 相対位置移動動作
             tskcmd.c        123    static ER AbsmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp );               // 絶対位置移動動作
             tskcmd.c        124    static ER MapAction( UB prid1, UB bcid, UB mm1, UB mm2, INT pppp1, INT pppp2 );   // MAP移動動作
             tskcmd.c        125    static ER WaitAction( UB prid1, UB bcid, INT waittim );                           // ＷＡＩＴ動作
             tskcmd.c        126    static void GetBCDevice( UB msg, UB mm, INT *data );                  // ＢＣで利用されるデバイス情報の取得
             tskcmd.c        127    
             tskcmd.c        128    static ER QgProcList_INITA( T_CMD_MSG* mrcv );
             tskcmd.c        129    static void TpRspFWVER();
             tskcmd.c        130    static void TpRspLGIN1();
             tskcmd.c        131    static void TpRspOPTIF();
             tskcmd.c        132    static void TpRspINITA( ER result );
             tskcmd.c        133    static void TpRspPRCTL();
             tskcmd.c        134    static void TpRspFWPOL();
             tskcmd.c        135    void TplRpMakeSend( UB parno, INT pardat );
             tskcmd.c        136    void TplRpDataSend();
             tskcmd.c        137    
             tskcmd.c        138    
             tskcmd.c        139    //*************************************
             tskcmd.c        140    // タッチパネル関数定義
             tskcmd.c        141    //*************************************
             tskcmd.c        142           void TpAnalyze( T_CMD_MSG* mrcv );
             tskcmd.c        143    static void TplDummy( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 00 ダミー                                             */
             tskcmd.c        144    static void TplFwver( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 01 FWバージョン情報                                   */
             tskcmd.c        145    static void TplOptif( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 02 オプション情報                                     */
             tskcmd.c        146    static void TplLgin1( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 03 ログイン認証1                                      */
             tskcmd.c        147    static void TplLgin2( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 04 ログイン認証2                                      */
             tskcmd.c        148    static void TplInita( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 05 初期化指示                                         */
             tskcmd.c        149    static void TplTitle( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 06 プロトコルタイトル要求                             */
             tskcmd.c        150    static void TplPrExt( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 07 プロトコル有無                                     */
             tskcmd.c        151    static void TplUsral( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 08 ユーザー情報全取得                                 */
             tskcmd.c        152    static void TplInf01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 11 ユーザー1情報                                      */
             tskcmd.c        153    static void TplInf02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 12 ユーザー2情報                                      */
             tskcmd.c        154    static void TplInf03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 13 ユーザー3情報                                      */
             tskcmd.c        155    static void TplInf04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 14 ユーザー4情報                                      */
             tskcmd.c        156    static void TplInf05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 15 ユーザー5情報                                      */
             tskcmd.c        157    static void TplInf06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 16 ユーザー6情報                                      */
             tskcmd.c        158    static void TplInf07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 17 ユーザー7情報                                      */
             tskcmd.c        159    static void TplInf08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 18 ユーザー8情報                                      */
             tskcmd.c        160    static void TplInf09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 19 ユーザー9情報                                      */
             tskcmd.c        161    static void TplInf10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 1A ユーザー10情報                                     */
             tskcmd.c        162    static void TplRec01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 21 ユーザー1登録                                      */
             tskcmd.c        163    static void TplRec02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 22 ユーザー2登録                                      */
             tskcmd.c        164    static void TplRec03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 23 ユーザー3登録                                      */
             tskcmd.c        165    static void TplRec04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 24 ユーザー4登録                                      */
             tskcmd.c        166    static void TplRec05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 25 ユーザー5登録                                      */
             tskcmd.c        167    static void TplRec06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 26 ユーザー6登録                                      */
             tskcmd.c        168    static void TplRec07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 27 ユーザー7登録                                      */
             tskcmd.c        169    static void TplRec08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 28 ユーザー8登録                                      */
             tskcmd.c        170    static void TplRec09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 29 ユーザー9登録                                      */
             tskcmd.c        171    static void TplRec10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 2A ユーザー10登録                                     */
             tskcmd.c        172    static void TplChg01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 31 ユーザー1変更                                      */
             tskcmd.c        173    static void TplChg02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 32 ユーザー2変更                                      */
             tskcmd.c        174    static void TplChg03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 33 ユーザー3変更                                      */
             tskcmd.c        175    static void TplChg04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 34 ユーザー4変更                                      */
             tskcmd.c        176    static void TplChg05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 35 ユーザー5変更                                      */
             tskcmd.c        177    static void TplChg06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 36 ユーザー6変更                                      */
             tskcmd.c        178    static void TplChg07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 37 ユーザー7変更                                      */
             tskcmd.c        179    static void TplChg08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 38 ユーザー8変更                                      */
             tskcmd.c        180    static void TplChg09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 39 ユーザー9変更                                      */
             tskcmd.c        181    static void TplChg10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 3A ユーザー10変更                                     */
             tskcmd.c        182    static void TplDel01( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 41 ユーザー1削除                                      */
             tskcmd.c        183    static void TplDel02( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 42 ユーザー2削除                                      */
             tskcmd.c        184    static void TplDel03( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 43 ユーザー3削除                                      */
             tskcmd.c        185    static void TplDel04( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 44 ユーザー4削除                                      */
             tskcmd.c        186    static void TplDel05( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 45 ユーザー5削除                                      */
             tskcmd.c        187    static void TplDel06( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 46 ユーザー6削除                                      */
             tskcmd.c        188    static void TplDel07( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 47 ユーザー7削除                                      */
             tskcmd.c        189    static void TplDel08( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 48 ユーザー8削除                                      */
             tskcmd.c        190    static void TplDel09( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 49 ユーザー9削除                                      */
             tskcmd.c        191    static void TplDel10( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 4A ユーザー10削除                                     */
             tskcmd.c        192    static void TplFwpol( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 50 FW状態（ポーリング）                               */
             tskcmd.c        193    static void TplPrtcl( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 51 プロトコル実行                                     */
             tskcmd.c        194    static void TplResta( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 52 リスタート実行                                     */
             tskcmd.c        195    static void TplPause( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 53 一時停止                                           */
             tskcmd.c        196    static void TplResum( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 54 再開                                               */
             tskcmd.c        197    static void TplAbort( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 55 中断                                               */
             tskcmd.c        198    static void TplOptcd( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 58 オプションバーコード実行                           */
             tskcmd.c        199    static void TplSmbar( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 59 サンプルチューブQRコード                           */
             tskcmd.c        200    static void TplSmsgl( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5A サンプルチューブ有無確認（単）                     */
             tskcmd.c        201    static void TplSmall( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5B サンプルチューブ有無確認（全）                     */
             tskcmd.c        202    static void TplCllne( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5C 回収チューブレーンQRコード                         */
             tskcmd.c        203    static void TplClqrc( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5D 回収チューブQRコード                               */
             tskcmd.c        204    static void TplClsgl( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5E 回収チューブ有無（単）                             */
             tskcmd.c        205    static void TplClall( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 5F 回収チューブ有無（全）                             */
             tskcmd.c        206    static void TplLdlmp( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 60 LED                                                */
             tskcmd.c        207    static void TplUvlmp( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 61 UV点灯                                             */
             tskcmd.c        208    static void TplPtlmp( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 62 パトランプ                                         */
             tskcmd.c        209    static void TplPowof( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 63 電源OFF                                            */
             tskcmd.c        210    static void TplExRun( T_CMD_MSG* mrcv, UB anum, const char** args );  /* 6B 運転履歴                                           */
             tskcmd.c        211    static void TplCommDataSend( UB *tpdat, INT tpsiz );                  /* */
             tskcmd.c        212    static void TplCommDataSendImp( UB *tpdat, INT tpsiz, UB msg );
             tskcmd.c        213    static void TplRidDataSend( UB *txdat, UB id );
             tskcmd.c        214    static ER   TpCmdCheck( T_CMD_MSG* mrcv );                                /* タッチパネルコマンド確認                              */
             tskcmd.c        215    static void InitQgProcList( UB procid );
             tskcmd.c        216    static void StaQgProcList( UB bcid, UB msgid, UB devno, UB actstp, UB prid1, UB inf, UB inf2);
             tskcmd.c        217    static UB GetQgProcList( UB procid );
             tskcmd.c        218    static BOOL IsQgProcList( UB procid );
             tskcmd.c        219    static ER QgProcList( T_CMD_MSG* mrcv );
             tskcmd.c        220    static ER QgProcList_INITA( T_CMD_MSG* mrcv );
             tskcmd.c        221    static ER QgProcList_PRTCL( T_CMD_MSG* mrcv );
             tskcmd.c        222    static void SetUserInfoSorce( ST_USERINFO *user );
             tskcmd.c        223    static void ClrUserInfoSorce();
             tskcmd.c        224    static UB   ChkUserInfo();
             tskcmd.c        225    void  check_main_pulsemotor_initialize( void );
             tskcmd.c        226    
             tskcmd.c        227    
             tskcmd.c        228    static ER  CmdActionStatus( T_CMD_MSG* mrcv );    //状態取得
             tskcmd.c        229    static ER  CmdActionTipGet( T_CMD_MSG* mrcv );    //チップ取得
             tskcmd.c        230    static ER  CmdActionTipDsp( T_CMD_MSG* mrcv );    //チップ廃棄
             tskcmd.c        231    static ER  CmdActionStrOpn( T_CMD_MSG* mrcv );    //穴あけ
             tskcmd.c        232    static ER  CmdActionPress ( T_CMD_MSG* mrcv );    //加圧
             tskcmd.c        233    static ER  CmdActionWait  ( T_CMD_MSG* mrcv );    //ウェイト
             tskcmd.c        234    static ER  CmdActionMix   ( T_CMD_MSG* mrcv );    //攪拌
             tskcmd.c        235    static ER  CmdActionSuc   ( T_CMD_MSG* mrcv );    //吸引
             tskcmd.c        236    static ER  CmdActionPut   ( T_CMD_MSG* mrcv );    //吐出
             tskcmd.c        237    static ER  CmdActionPrep1 ( T_CMD_MSG* mrcv );    //分注１
             tskcmd.c        238    static ER  CmdActionPrep2 ( T_CMD_MSG* mrcv );    //分注２
             tskcmd.c        239    static ER  CmdActionIncub ( T_CMD_MSG* mrcv );    //インキュベーション
             tskcmd.c        240    static ER  CmdActionMove  ( T_CMD_MSG* mrcv );    //移動
             tskcmd.c        241    
             tskcmd.c        242    static ER  PressReq( UB *par );
             tskcmd.c        243    static INT PressStatus( UB *par );
             tskcmd.c        244    static INT GetPositionValue( UB index );
             tskcmd.c        245    static UB  GetMoveDevice( UB posi );
             tskcmd.c        246    static UB  GetTipPatern( UB commdat );
             tskcmd.c        247    static void  SetPauseStop( UB act );
             tskcmd.c        248    static UB  GetPauseStop();
             tskcmd.c        249    static UB  InitPauseStop();
             tskcmd.c        250    static INT  BlowoutAirValue( ST_HOSEI_PTN *adr );
             tskcmd.c        251    static INT  AirGapValue( ST_HOSEI_PTN *adr );
             tskcmd.c        252    static INT  SurplusValue( ST_HOSEI_PTN *adr );
             tskcmd.c        253    static INT  ValueCal( ST_HOSEI_PTN *adr, INT value );
             tskcmd.c        254    static INT GetPosiData( UB posino );
             tskcmd.c        255    static unsigned short  NzlTargetGet();
             tskcmd.c        256    static ER PressureChk();
             tskcmd.c        257    static ER RePressureChk();
             tskcmd.c        258    static BOOL TempChk();
             tskcmd.c        259    static void IncuvDataInit( unsigned char tmp, unsigned int tim );
             tskcmd.c        260    
             tskcmd.c        261    void SetRcvData( unsigned char *buf, unsigned int len );
             tskcmd.c        262    void TplExRunSend();
             tskcmd.c        263    void TplRpExpReqSend();
             tskcmd.c        264    
             tskcmd.c        265    //*************************************
             tskcmd.c        266    // テーブル
             tskcmd.c        267    //*************************************
             tskcmd.c        268    // コールファンクション
             tskcmd.c        269    static CMD_FUNCTBL    CmdFuncTbl[ID_MSG_BASE_CMD_MAX] = 
             tskcmd.c        270    {
             tskcmd.c        271      /*===========================================================================================================================*/
             tskcmd.c        272      /*  基本コマンド                                                       No. Command 内容                                      */
             tskcmd.c        273      /*===========================================================================================================================*/
             tskcmd.c        274      &CmdVER    ,                                                        /* 0   HELLO   起動通知                                  */
             tskcmd.c        275      &CmdDummy  ,                                                        /* 1   dummy                                             */
             tskcmd.c        276      &CmdVER    ,                                                        /* 2   VER     バージョン確認                            */
             tskcmd.c        277      &CmdALLIN  ,                                                        /* 3   ALLIN   全I/O入力                                 */
             tskcmd.c        278      &CmdBIN    ,                                                        /* 4   BIN     I/O入力                                   */
             tskcmd.c        279      &CmdBOUT   ,                                                        /* 5   BOUT    I/O出力                                   */
             tskcmd.c        280      &CmdCINIT  ,                                                        /* 6   CINIT   入力カウンタの設定                        */
             tskcmd.c        281      &CmdCOUNT  ,                                                        /* 7   COUNT   入力カウンタの読み出し                    */
             tskcmd.c        282      &CmdINT    ,                                                        /* 8   INT     割り込み設定                              */
             tskcmd.c        283      &CmdABSMV  ,                                                        /* 9   ABSMV   パルスモータ移動(絶対位置)                */
             tskcmd.c        284      &CmdABORT  ,                                                        /* 10  ABORT   パルスモータ即停止                        */
             tskcmd.c        285      &CmdENCODER,                                                        /* 11  ENCODER エンコーダの設定                          */
             tskcmd.c        286      &CmdLIMIT  ,                                                        /* 12  LIMIT   パルスモータ原点復帰                      */
             tskcmd.c        287      &CmdMAP    ,                                                        /* 13  MAP     ２軸のパルスモータ移動                    */
             tskcmd.c        288      &CmdPDELAY ,                                                        /* 14  PDELAY  パルスモータのパワー制御待ち時間設定      */
             tskcmd.c        289      &CmdPOWER  ,                                                        /* 15  POWER   パルスモータの励磁制御                    */
             tskcmd.c        290      &CmdPSET   ,                                                        /* 16  PSET    パルスモータのカウンタリセット            */
             tskcmd.c        291      &CmdRELMV  ,                                                        /* 17  RELMV   パルスモータ移動(相対位置)                */
             tskcmd.c        292      &CmdSET    ,                                                        /* 18  SET     パルスモータ速度設定                      */
             tskcmd.c        293      &CmdSTATUS ,                                                        /* 19  STATUS  パルスモータ状態読み出し                  */
             tskcmd.c        294      &CmdSTOP   ,                                                        /* 20  STOP    パルスモータ減速停止                      */
             tskcmd.c        295      &CmdBZCNT,                                                          /* 21                                                    */
             tskcmd.c        296      &CmdEEPREAD,                                                        /* 22                                                    */
             tskcmd.c        297      &CmdEEPWRIT,                                                        /* 23                                                    */
             tskcmd.c        298      &CmdDummy  ,                                                        /* 24                                                    */
             tskcmd.c        299      &CmdDummy  ,                                                        /* 25                                                    */
             tskcmd.c        300      &CmdTmpSet ,                                                        /* 26                                                    */
             tskcmd.c        301      &CmdTmpGet ,                                                        /* 27                                                    */
             tskcmd.c        302      &CmdDummy  ,                                                        /* 28                                                    */
             tskcmd.c        303      &CmdVini   ,                                                        /* 29                                                    */
             tskcmd.c        304      &CmdPini   ,                                                        /* 30                                                    */
             tskcmd.c        305      &CmdPren   ,                                                        /* 31                                                    */
             tskcmd.c        306      &CmdPtan   ,                                                        /* 32                                                    */
             tskcmd.c        307      &CmdPcan   ,                                                        /* 33                                                    */
             tskcmd.c        308      &CmdVout   ,                                                        /* 34                                                    */
             tskcmd.c        309      &CmdPsns   ,                                                        /* 35                                                    */
             tskcmd.c        310      &CmdImpPdat,                                                        /* 36                                                    */
             tskcmd.c        311      &CmdImpSped,                                                        /* 37                                                    */
             tskcmd.c        312      &CmdImpPosi,                                                        /* 38                                                    */
             tskcmd.c        313      &CmdImpOptn,                                                        /* 39                                                    */
             tskcmd.c        314      &CmdExpRunl,                                                        /* 40                                                    */
             tskcmd.c        315      &CmdExpComl,                                                        /* 41                                                    */
             tskcmd.c        316      &CmdDummy  ,                                                        /* 42                                                    */
             tskcmd.c        317      &CmdDummy  ,                                                        /* 43                                                    */
             tskcmd.c        318      &CmdDummy                                                           /* 44                                                    */
             tskcmd.c        319    };
             tskcmd.c        320    
             tskcmd.c        321    
             tskcmd.c        322    //-----------------------------
             tskcmd.c        323    //        タッチパネル通信
             tskcmd.c        324    //-----------------------------
             tskcmd.c        325    // コールファンクション
             tskcmd.c        326    TP_FUNCTBL    TpFuncTbl[TP_ID_PROC_MAX] = 
             tskcmd.c        327    {
             tskcmd.c        328      /*===========================================================================================================================*/
             tskcmd.c        329      /*  基本コマンド                                                       No. Command 内容                                      */
             tskcmd.c        330      /*===========================================================================================================================*/
             tskcmd.c        331      &TplDummy ,                                                         /* 00 ダミー                                             */
             tskcmd.c        332      &TplFwver ,                                                         /* 01 FWバージョン情報                                   */
             tskcmd.c        333      &TplOptif ,                                                         /* 02 オプション情報                                     */
             tskcmd.c        334      &TplLgin1 ,                                                         /* 03 ログイン認証1                                      */
             tskcmd.c        335      &TplLgin2 ,                                                         /* 04 ログイン認証2                                      */
             tskcmd.c        336      &TplInita ,                                                         /* 05 初期化指示                                         */
             tskcmd.c        337      &TplDummy ,                                                         /* 06 ダミー                                             */
             tskcmd.c        338      &TplDummy ,                                                         /* 07 ダミー                                             */
             tskcmd.c        339      &TplUsral ,                                                         /* 08 ユーザー情報全取得                                 */
             tskcmd.c        340      &TplDummy ,                                                         /* 09 ダミー                                             */
             tskcmd.c        341      &TplDummy ,                                                         /* 0A ダミー                                             */
             tskcmd.c        342      &TplDummy ,                                                         /* 0B ダミー                                             */
             tskcmd.c        343      &TplDummy ,                                                         /* 0C ダミー                                             */
             tskcmd.c        344      &TplDummy ,                                                         /* 0D ダミー                                             */
             tskcmd.c        345      &TplDummy ,                                                         /* 0E ダミー                                             */
             tskcmd.c        346      &TplDummy ,                                                         /* 0F ダミー                                             */
             tskcmd.c        347      &TplDummy ,                                                         /* 10 ダミー                                             */
             tskcmd.c        348      &TplInf01 ,                                                         /* 11 ユーザー1情報                                      */
             tskcmd.c        349      &TplInf02 ,                                                         /* 12 ユーザー2情報                                      */
             tskcmd.c        350      &TplInf03 ,                                                         /* 13 ユーザー3情報                                      */
             tskcmd.c        351      &TplInf04 ,                                                         /* 14 ユーザー4情報                                      */
             tskcmd.c        352      &TplInf05 ,                                                         /* 15 ユーザー5情報                                      */
             tskcmd.c        353      &TplInf06 ,                                                         /* 16 ユーザー6情報                                      */
             tskcmd.c        354      &TplInf07 ,                                                         /* 17 ユーザー7情報                                      */
             tskcmd.c        355      &TplInf08 ,                                                         /* 18 ユーザー8情報                                      */
             tskcmd.c        356      &TplInf09 ,                                                         /* 19 ユーザー9情報                                      */
             tskcmd.c        357      &TplInf10 ,                                                         /* 1A ユーザー10情報                                     */
             tskcmd.c        358      &TplDummy ,                                                         /* 1B ダミー                                             */
             tskcmd.c        359      &TplDummy ,                                                         /* 1C ダミー                                             */
             tskcmd.c        360      &TplDummy ,                                                         /* 1D ダミー                                             */
             tskcmd.c        361      &TplDummy ,                                                         /* 1E ダミー                                             */
             tskcmd.c        362      &TplDummy ,                                                         /* 1F ダミー                                             */
             tskcmd.c        363      &TplDummy ,                                                         /* 20 ダミー                                             */
             tskcmd.c        364      &TplRec01 ,                                                         /* 21 ユーザー1登録                                      */
             tskcmd.c        365      &TplRec02 ,                                                         /* 22 ユーザー2登録                                      */
             tskcmd.c        366      &TplRec03 ,                                                         /* 23 ユーザー3登録                                      */
             tskcmd.c        367      &TplRec04 ,                                                         /* 24 ユーザー4登録                                      */
             tskcmd.c        368      &TplRec05 ,                                                         /* 25 ユーザー5登録                                      */
             tskcmd.c        369      &TplRec06 ,                                                         /* 26 ユーザー6登録                                      */
             tskcmd.c        370      &TplRec07 ,                                                         /* 27 ユーザー7登録                                      */
             tskcmd.c        371      &TplRec08 ,                                                         /* 28 ユーザー8登録                                      */
             tskcmd.c        372      &TplRec09 ,                                                         /* 29 ユーザー9登録                                      */
             tskcmd.c        373      &TplRec10 ,                                                         /* 2A ユーザー10登録                                     */
             tskcmd.c        374      &TplDummy ,                                                         /* 2B ダミー                                             */
             tskcmd.c        375      &TplDummy ,                                                         /* 2C ダミー                                             */
             tskcmd.c        376      &TplDummy ,                                                         /* 2D ダミー                                             */
             tskcmd.c        377      &TplDummy ,                                                         /* 2E ダミー                                             */
             tskcmd.c        378      &TplDummy ,                                                         /* 2F ダミー                                             */
             tskcmd.c        379      &TplDummy ,                                                         /* 30 ダミー                                             */
             tskcmd.c        380      &TplChg01 ,                                                         /* 31 ユーザー1変更                                      */
             tskcmd.c        381      &TplChg02 ,                                                         /* 32 ユーザー2変更                                      */
             tskcmd.c        382      &TplChg03 ,                                                         /* 33 ユーザー3変更                                      */
             tskcmd.c        383      &TplChg04 ,                                                         /* 34 ユーザー4変更                                      */
             tskcmd.c        384      &TplChg05 ,                                                         /* 35 ユーザー5変更                                      */
             tskcmd.c        385      &TplChg06 ,                                                         /* 36 ユーザー6変更                                      */
             tskcmd.c        386      &TplChg07 ,                                                         /* 37 ユーザー7変更                                      */
             tskcmd.c        387      &TplChg08 ,                                                         /* 38 ユーザー8変更                                      */
             tskcmd.c        388      &TplChg09 ,                                                         /* 39 ユーザー9変更                                      */
             tskcmd.c        389      &TplChg10 ,                                                         /* 3A ユーザー10変更                                     */
             tskcmd.c        390      &TplDummy ,                                                         /* 3B ダミー                                             */
             tskcmd.c        391      &TplDummy ,                                                         /* 3C ダミー                                             */
             tskcmd.c        392      &TplDummy ,                                                         /* 3D ダミー                                             */
             tskcmd.c        393      &TplDummy ,                                                         /* 3E ダミー                                             */
             tskcmd.c        394      &TplDummy ,                                                         /* 3F ダミー                                             */
             tskcmd.c        395      &TplDummy ,                                                         /* 40 ダミー                                             */
             tskcmd.c        396      &TplDel01 ,                                                         /* 41 ユーザー1削除                                      */
             tskcmd.c        397      &TplDel02 ,                                                         /* 42 ユーザー2削除                                      */
             tskcmd.c        398      &TplDel03 ,                                                         /* 43 ユーザー3削除                                      */
             tskcmd.c        399      &TplDel04 ,                                                         /* 44 ユーザー4削除                                      */
             tskcmd.c        400      &TplDel05 ,                                                         /* 45 ユーザー5削除                                      */
             tskcmd.c        401      &TplDel06 ,                                                         /* 46 ユーザー6削除                                      */
             tskcmd.c        402      &TplDel07 ,                                                         /* 47 ユーザー7削除                                      */
             tskcmd.c        403      &TplDel08 ,                                                         /* 48 ユーザー8削除                                      */
             tskcmd.c        404      &TplDel09 ,                                                         /* 49 ユーザー9削除                                      */
             tskcmd.c        405      &TplDel10 ,                                                         /* 4A ユーザー10削除                                     */
             tskcmd.c        406      &TplDummy ,                                                         /* 4B ダミー                                             */
             tskcmd.c        407      &TplDummy ,                                                         /* 4C ダミー                                             */
             tskcmd.c        408      &TplDummy ,                                                         /* 4D ダミー                                             */
             tskcmd.c        409      &TplDummy ,                                                         /* 4E ダミー                                             */
             tskcmd.c        410      &TplDummy ,                                                         /* 4F ダミー                                             */
             tskcmd.c        411      &TplFwpol ,                                                         /* 50 FW状態（ポーリング）                               */
             tskcmd.c        412      &TplPrtcl ,                                                         /* 51 プロトコル実行                                     */
             tskcmd.c        413      &TplResta ,                                                         /* 52 リスタート実行                                     */
             tskcmd.c        414      &TplPause ,                                                         /* 53 一時停止                                           */
             tskcmd.c        415      &TplResum ,                                                         /* 54 再開                                               */
             tskcmd.c        416      &TplAbort ,                                                         /* 55 中断                                               */
             tskcmd.c        417      &TplDummy ,                                                         /* 56 ダミー                                             */
             tskcmd.c        418      &TplDummy ,                                                         /* 57 ダミー                                             */
             tskcmd.c        419      &TplOptcd ,                                                         /* 58 オプションバーコード実行                           */
             tskcmd.c        420      &TplSmbar ,                                                         /* 59 サンプルチューブQRコード                           */
             tskcmd.c        421      &TplSmsgl ,                                                         /* 5A サンプルチューブ有無確認（単）                     */
             tskcmd.c        422      &TplSmall ,                                                         /* 5B サンプルチューブ有無確認（全）                     */
             tskcmd.c        423      &TplCllne ,                                                         /* 5C 回収チューブレーンQRコード                         */
             tskcmd.c        424      &TplClqrc ,                                                         /* 5D 回収チューブQRコード                               */
             tskcmd.c        425      &TplClsgl ,                                                         /* 5E 回収チューブ有無（単）                             */
             tskcmd.c        426      &TplClall ,                                                         /* 5F 回収チューブ有無（全）                             */
             tskcmd.c        427      &TplLdlmp ,                                                         /* 60 LED                                                */
             tskcmd.c        428      &TplUvlmp ,                                                         /* 61 UV点灯                                             */
             tskcmd.c        429      &TplPtlmp ,                                                         /* 62 パトランプ                                         */
             tskcmd.c        430      &TplPowof ,                                                         /* 63 電源OFF                                            */
             tskcmd.c        431      &TplDummy ,                                                         /* 64 ダミー                                             */
             tskcmd.c        432      &TplDummy ,                                                         /* 65 ダミー                                             */
             tskcmd.c        433      &TplDummy ,                                                         /* 66 ダミー                                             */
             tskcmd.c        434      &TplDummy ,                                                         /* 67 ダミー                                             */
             tskcmd.c        435      &TplDummy ,                                                         /* 68 ダミー                                             */
             tskcmd.c        436      &TplDummy ,                                                         /* 69 ダミー                                             */
             tskcmd.c        437      &TplDummy ,                                                         /* 6A ダミー                                             */
             tskcmd.c        438      &TplExRun ,                                                         /* 6B 運転履歴                                           */
             tskcmd.c        439      &TplDummy ,                                                         /* 6C ダミー                                             */
             tskcmd.c        440      &TplDummy ,                                                         /* 6D ダミー                                             */
             tskcmd.c        441      &TplDummy ,                                                         /* 6E ダミー                                             */
             tskcmd.c        442      &TplDummy                                                           /* 6F ダミー                                             */
             tskcmd.c        443    };
             tskcmd.c        444    
             tskcmd.c        445    // データチェックテーブル
             tskcmd.c        446    // num:パラメータ数（CMD分を含む）
             tskcmd.c        447    const ST_DATACHK DATCHK_TBL[44] = {
             tskcmd.c        448    /*======================================================================================================================================================================================================================================================================*/
             tskcmd.c        449    /*  基本コマンド                                                               基本コマンド                                                                                                                                                                             */
             tskcmd.c        450    /*======================================================================================================================================================================================================================================================================*/
             tskcmd.c        451                  //num   max1   max2   max3   max4   max5   max6   max7   max8  
             tskcmd.c        452    /* 0  HELLO   */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        453    /* 1  LOG     */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        454    /* 2  VER     */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        455    /* 3  ALLIN   */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        456    /* 4  BIN     */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        457    /* 5  BOUT    */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        458    /* 6  CINIT   */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        459    /* 7  COUNT   */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        460    /* 8  INT     */  5  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        461    /* 9  ABSMV   */  4  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        462    /* 10 ABORT   */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        463    /* 11 ENCODER */  6  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        464    /* 12 LIMIT   */  5  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        465    /* 13 MAP     */  7  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        466    /* 14 PDELAY  */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        467    /* 15 POWER   */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        468    /* 16 PSET    */  5  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        469    /* 17 RELMV   */  4  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        470    /* 18 SET     */  8  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        471    /* 19 STATUS  */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        472    /* 20 STOP    */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        473    /* 21 BCNT    */  4  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        474    /* 22 EEPREAD */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        475    /* 23 EEPWRIT */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        476    /* 24 reserve */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        477    /* 25 reserve */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        478    /* 26 TEMPSET */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        479    /* 27 TEMPGET */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        480    /* 28 reserve */  0  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        481    /* 29 VINI    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        482    /* 30 PINI    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        483    /* 31 PREN    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        484    /* 32 PTAN    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        485    /* 33 PCAN    */  1  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        486    /* 34 VOUT    */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        487    /* 35 PSNS    */  2  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        488    /* 36 IMPPDAT */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        489    /* 37 IMPSPED */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        490    /* 38 IMPPOSI */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        491    /* 39 IMPOPTN */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        492    /* 40 EXPRUNL */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        493    /* 41 EXPCOML */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        494    /* 42 reserve */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        495    /* 43 reserve */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , /*  */
             tskcmd.c        496    /* 44 reserve */  3  ,0    , 0    , 0    , 0    , 0    , 0    , 0    , 0      /*  */
             tskcmd.c        497    };
             tskcmd.c        498    
             tskcmd.c        499    static    const TPN_REQ_DAT TP_RID_SEND_FORM   = { 13, STX, 'W', 'N', ' ', 'R', 'I', 'D', ' ', '&', 'H', '*', '*', ETX, 0x30, 0x30, 0x0d };
             tskcmd.c        500    static    const char TP_RP1_SEND_FORM01[13] = { STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '0', ETX,  0x30, 0x30, 0x0d };
             tskcmd.c        501    static    const char TP_RP1_SEND_FORM02[14] = { STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '0', '0', ETX,  0x30, 0x30, 0x0d};
             tskcmd.c        502    static    const char TP_RP1_SEND_FORM04[16] = { STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '0', '0',  '0',  '0',  ETX,  0x30, 0x30, 0x0d };
             tskcmd.c        503    static    const char TP_RP3_SEND_FORM[44]   = { STX,'W','N',' ','R','P','3',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*', ETX, 0x30, 0x30, 0x0d };
             tskcmd.c        504    
             tskcmd.c        505    
             tskcmd.c        506    
             tskcmd.c        507    //*************************************
             tskcmd.c        508    // データ定義
             tskcmd.c        509    //*************************************
             tskcmd.c        510    static    ST_CNTLDATA         stCtl;                                      // 実行タスク制御用ﾃﾞｰﾀ
             tskcmd.c        511    
             tskcmd.c        512    static    char                RecvData[CMD_BUFSIZ];                       // 
             tskcmd.c        513    static    const   char*       RecvArgs[MAX_ARGS];                         // 
             tskcmd.c        514    static    UB                  bufwk[CMD_BUFSIZ];                          // 
             tskcmd.c        515    static    ST_EEPBUF           eepb;
             tskcmd.c        516    static    ST_USERINFO         RcvUserInfo;
             tskcmd.c        517    static    INT                 DeviceStatus[2];                            // モータ動作中状態  BIT=1:動作中
             tskcmd.c        518    static    ER                  MnetStatus;
             tskcmd.c        519    static    ST_POWER            power[(DVMAX+1)];
             tskcmd.c        520    static    ST_PROTCOL          *pProcAdr;
             tskcmd.c        521    static    ST_PROTCOL_DATA     *pProcDat;
             tskcmd.c        522    static    ST_BZCNT            bzcnt;
             tskcmd.c        523    static    UB                  PauseStopFlg;
             tskcmd.c        524    static    unsigned int        RcvDataSize;
             tskcmd.c        525    static    unsigned char       ExpRunlSeqno;
             tskcmd.c        526    static    unsigned char       ExpRunlRetry;
             tskcmd.c        527    static    ST_CNTLDATA         tp;                                         // 実行タスク制御用ﾃﾞｰﾀ
             tskcmd.c        528    static    char                TpRecvData[CMD_BUFSIZ];                     // 
             tskcmd.c        529    static    const   char*       TpRecvArgs[MAX_ARGS];                       // 
             tskcmd.c        530    static    ST_EEPBUF           eepb;
             tskcmd.c        531    static    ST_BCCTRL           bcctrl[BCCTRL_MAX]; 
             tskcmd.c        532    static ST_PAGE1               BkP1;
             tskcmd.c        533    static ST_SPEED           Sp[DVMAX+1][5];
             tskcmd.c        534    static ST_SPEED_PTN           SpPtn;
             tskcmd.c        535    static ST_PAGE7               BkP7;
             tskcmd.c        536    static ST_PAGE8               BkP8;
             tskcmd.c        537    static ST_PAGE9               BkP9;
             tskcmd.c        538    static ST_PAGE10          BkP10;
             tskcmd.c        539    static ST_PROTCOL_DATA        BkPrData[20]; 
             tskcmd.c        540    static ST_PROTCOL         BkPr; 
             tskcmd.c        541    static ST_INCUV               incuv;
             tskcmd.c        542    static ST_VOUT                vout;
             tskcmd.c        543    static ST_PSNS                psns;
             tskcmd.c        544    static ST_PROTCOL_SEL     psel;
             tskcmd.c        545    static unsigned short     nzlsts;
             tskcmd.c        546    static    char                rspbuf2[128];
             tskcmd.c        547    static    char                psnsdat[128];
             tskcmd.c        548    static    char                rspbuf[CMD_BUFSIZ];
             tskcmd.c        549    static    char                ImpExpRcvData[3400];
             tskcmd.c        550    static    INT                 peekdat;
             tskcmd.c        551          UB                  MentePcSendbuf[3400];
             tskcmd.c        552    
             tskcmd.c        553    // debug用
             tskcmd.c        554    static unsigned debug1_flg;
             tskcmd.c        555    
             tskcmd.c        556    
             tskcmd.c        557    /***********************************************************************
             tskcmd.c        558    * 
             tskcmd.c        559    * [概要]コマンド管理タスク
             tskcmd.c        560    * 
             tskcmd.c        561    * 
             tskcmd.c        562    * 
             tskcmd.c        563    ***********************************************************************/
             tskcmd.c        564    TASK TskCmd( void )
P   00000000              _TskCmd:                         ; function: TskCmd
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
             tskcmd.c        565    {
             tskcmd.c        566        T_CMD_MSG*    msg;
             tskcmd.c        567      ER              err;
             tskcmd.c        568    
             tskcmd.c        569      // ※注意
             tskcmd.c        570      // スレーブよりメイン基板のモーションネットが、先に立ち上がった場合、スレーブ未接続と判断されるため
             tskcmd.c        571      // スレーブが立ち上がる時間分を待ってから起動
             tskcmd.c        572      dly_tsk(1000);
    00000002 040003E8               MOVI20      #1000,R4   ; H'000003E8
    00000006 D17F                   MOV.L       L1358+2,R1 ; _v4_dly_tsk
    00000008 414B                   JSR/N       @R1
             tskcmd.c        573    
             tskcmd.c        574      // コマンドタスク初期化
             tskcmd.c        575      CmdTskInit();
    0000000A B01A                   BSR         __$CmdTskInit
    0000000C 0009                   NOP
             tskcmd.c        576    
             tskcmd.c        577      // モーションネット初期化
             tskcmd.c        578      MnetStatus = MntInit();
    0000000E D57E                   MOV.L       L1358+6,R5 ; _MntInit
    00000010 454B                   JSR/N       @R5
    00000012 D67E                   MOV.L       L1358+10,R6; __$MnetStatus
             tskcmd.c        579    
             tskcmd.c        580      // コマンドタスク初期動作
             tskcmd.c        581      if( MnetStatus != E_SUCCESS )
    00000014 2008                   TST         R0,R0
    00000016 8D02                   BT/S        L12
    00000018 2602                   MOV.L       R0,@R6     ; MnetStatus
             tskcmd.c        582      {
             tskcmd.c        583          CmdTskInitAct();
    0000001A B053                   BSR         __$CmdTskInitAct
    0000001C 0009                   NOP
    0000001E              L12:
    0000001E DB7C                   MOV.L       L1358+14,R11; _v4_trcv_mbx
    00000020 DC7C                   MOV.L       L1358+18,R12; L1428
    00000022 DD7D                   MOV.L       L1358+22,R13; _api_rel_mpf
    00000024 0E000252               MOVI20      #594,R14   ; H'00000252
    00000028              L13:
             tskcmd.c        584      }
             tskcmd.c        585      
             tskcmd.c        586      for( ;; )
             tskcmd.c        587        {
             tskcmd.c        588            // コマンド待ち
             tskcmd.c        589            err = rcv_mbx( ID_MBX_CMD, (T_MSG**)&msg);
    00000028 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    0000002A E405                   MOV         #5,R4      ; H'00000005
    0000002C 4B0B                   JSR         @R11
    0000002E 65F3                   MOV         R15,R5
             tskcmd.c        590    
             tskcmd.c        591          // メッセージ処理
             tskcmd.c        592          CmdProc(msg);
    00000030 B07C                   BSR         __$CmdProc
    00000032 64F2                   MOV.L       @R15,R4    ; msg
    00000034 67F2                   MOV.L       @R15,R7    ; msg
             tskcmd.c        593    
             tskcmd.c        594          RelMpf( ID_MPF_CMD, (VP)msg );// メモリ解放
    00000036 E604                   MOV         #4,R6      ; H'00000004
    00000038 64C3                   MOV         R12,R4
    0000003A 4D0B                   JSR         @R13
    0000003C 65E3                   MOV         R14,R5
    0000003E AFF3                   BRA         L13
    00000040 0009                   NOP
             tskcmd.c        595        }
             tskcmd.c        596    }
             tskcmd.c        597    /***********************************************************************
             tskcmd.c        598    * 
             tskcmd.c        599    * [概要]  実行タスク初期化
             tskcmd.c        600    * [引数]  −
             tskcmd.c        601    * [戻値]  −
             tskcmd.c        602    * 
             tskcmd.c        603    ***********************************************************************/
             tskcmd.c        604    static void CmdTskInit()
    00000042              __$CmdTskInit:                   ; function: __$CmdTskInit
                                                           ; frame size=16
    00000042 4CF0                   MOVMU.L     R12,@-R15
    00000044 E647                   MOV         #71,R6     ; H'00000047
    00000046 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c        605    {
             tskcmd.c        606      INT Loop;
             tskcmd.c        607    
             tskcmd.c        608      // データクリア
             tskcmd.c        609      memset( &stCtl,       CLR,  sizeof( stCtl ) );
    00000048 D474                   MOV.L       L1358+26,R4; __$stCtl
    0000004A DC75                   MOV.L       L1358+30,R12; _memset
    0000004C 4C0B                   JSR         @R12
    0000004E 4608                   SHLL2       R6
    00000050 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c        610      memset( &RecvData,    CLR,  sizeof( RecvData ) );
    00000052 D474                   MOV.L       L1358+34,R4; __$RecvData
    00000054 4C0B                   JSR         @R12
    00000056 E500                   MOV         #0,R5      ; H'00000000
    00000058 E664                   MOV         #100,R6    ; H'00000064
    0000005A E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c        611      memset( &RecvArgs,    CLR,  sizeof( RecvArgs ) );
    0000005C D472                   MOV.L       L1358+38,R4; __$RecvArgs
    0000005E 4C0B                   JSR         @R12
    00000060 4608                   SHLL2       R6
    00000062 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c        612      memset( &TpRecvData,  CLR,  sizeof( TpRecvData ) );
    00000064 D471                   MOV.L       L1358+42,R4; __$TpRecvData
    00000066 4C0B                   JSR         @R12
    00000068 E500                   MOV         #0,R5      ; H'00000000
    0000006A E664                   MOV         #100,R6    ; H'00000064
    0000006C E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c        613      memset( &TpRecvArgs,  CLR,  sizeof( TpRecvArgs ) );
    0000006E D470                   MOV.L       L1358+46,R4; __$TpRecvArgs
    00000070 4C0B                   JSR         @R12
    00000072 4608                   SHLL2       R6
    00000074 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c        614      memset( &bufwk[0],    CLR,  CMD_BUFSIZ );
    00000076 D46F                   MOV.L       L1358+50,R4; __$bufwk
    00000078 4C0B                   JSR         @R12
    0000007A E500                   MOV         #0,R5      ; H'00000000
    0000007C E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c        615      memset( &psel,        CLR,  sizeof( psel ) );
    0000007E D46E                   MOV.L       L1358+54,R4; __$psel
    00000080 4C0B                   JSR         @R12
    00000082 E500                   MOV         #0,R5      ; H'00000000
    00000084 E610                   MOV         #16,R6     ; H'00000010
             tskcmd.c        616      memset( &incuv,       CLR,  sizeof( incuv ) );
    00000086 D46D                   MOV.L       L1358+58,R4; __$incuv
    00000088 4C0B                   JSR         @R12
    0000008A E500                   MOV         #0,R5      ; H'00000000
    0000008C E100                   MOV         #0,R1      ; H'00000000
    0000008E E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c        617    
             tskcmd.c        618      for( Loop = 0; Loop < BCCTRL_MAX; Loop++ )
    00000090 E513                   MOV         #19,R5     ; H'00000013
    00000092 D66B                   MOV.L       L1358+62,R6; __$bcctrl
    00000094              L16:
    00000094 4510                   DT          R5
             tskcmd.c        619      {
             tskcmd.c        620          bcctrl[Loop].actstp = 0;
    00000096 6013                   MOV         R1,R0
    00000098 8062                   MOV.B       R0,@(2,R6) ; bcctrl[].actstp
             tskcmd.c        621          bcctrl[Loop].msgid  = NO_DATA;
             tskcmd.c        622          bcctrl[Loop].devno  = NO_DATA;
    0000009A 6023                   MOV         R2,R0
    0000009C 2620                   MOV.B       R2,@R6     ; bcctrl[].msgid
    0000009E 8061                   MOV.B       R0,@(1,R6) ; bcctrl[].devno
             tskcmd.c        623          bcctrl[Loop].prid1 = NO_DATA;
    000000A0 8063                   MOV.B       R0,@(3,R6) ; bcctrl[].prid1
    000000A2 8FF7                   BF/S        L16
    000000A4 7608                   ADD         #8,R6
             tskcmd.c        624      }
             tskcmd.c        625    
             tskcmd.c        626      for( Loop = DVMIN; Loop <= DVMAX; Loop++ )
    000000A6 EE07                   MOV         #7,R14     ; H'00000007
    000000A8 ED02                   MOV         #2,R13     ; H'00000002
    000000AA              L18:
             tskcmd.c        627      {
             tskcmd.c        628          memset( &power[Loop], CLR, sizeof( ST_POWER ) );
    000000AA D466                   MOV.L       L1358+66,R4; __$power
    000000AC 34DC                   ADD         R13,R4
    000000AE E602                   MOV         #2,R6      ; H'00000002
    000000B0 E500                   MOV         #0,R5      ; H'00000000
    000000B2 4C0B                   JSR         @R12
    000000B4 7D02                   ADD         #2,R13
    000000B6 4E10                   DT          R14
    000000B8 8BF7                   BF          L18
             tskcmd.c        629      }
             tskcmd.c        630    
             tskcmd.c        631      // 7SEG待機表示
             tskcmd.c        632      *( (UB *)LED_ADDR ) = CLR;
    000000BA D263                   MOV.L       L1358+70,R2; H'0C00F020
    000000BC E100                   MOV         #0,R1      ; H'00000000
    000000BE 2210                   MOV.B       R1,@R2
    000000C0 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c        633    
             tskcmd.c        634    }
    000000C2 006B                   RTS/N
             tskcmd.c        635    /***********************************************************************
             tskcmd.c        636    * 
             tskcmd.c        637    * [概要]  コマンドタスク初期動作
             tskcmd.c        638    * [引数]  −
             tskcmd.c        639    * [戻値]  −
             tskcmd.c        640    * 
             tskcmd.c        641    ***********************************************************************/
             tskcmd.c        642    static void CmdTskInitAct()
    000000C4              __$CmdTskInitAct:                ; function: __$CmdTskInitAct
                                                           ; frame size=80
    000000C4 4CF0                   MOVMU.L     R12,@-R15
    000000C6 7FE0                   ADD         #-32,R15
             tskcmd.c        643    {
             tskcmd.c        644      INT Loop;
             tskcmd.c        645        ST_MOTOR_PARAM    mp;
             tskcmd.c        646    
             tskcmd.c        647      // 初期速度設定
             tskcmd.c        648      mp.accel_type = 1;                                              // 駆動タイプ(０：台形、１：Ｓ字)
    000000C8 E101                   MOV         #1,R1      ; H'00000001
    000000CA 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
             tskcmd.c        649      mp.factor     = GetFactor(3);                                   // モータ倍率
    000000CE D55F                   MOV.L       L1358+74,R5; _GetFactor
    000000D0 450B                   JSR         @R5
    000000D2 E403                   MOV         #3,R4      ; H'00000003
             tskcmd.c        650      mp.FL         = 300;                                            // 初速[pls](0〜100,000)
    000000D4 E64B                   MOV         #75,R6     ; H'0000004B
             tskcmd.c        651      mp.FH         = 1000;                                           // 最高速[pls](0〜100,000)
             tskcmd.c        652      mp.utime      = 500;                                            // 加速時間[ms](１〜65535)
    000000D6 E27D                   MOV         #125,R2    ; H'0000007D
    000000D8 4208                   SHLL2       R2
    000000DA 2F02                   MOV.L       R0,@R15    ; mp.factor
    000000DC 4608                   SHLL2       R6
    000000DE 1F24                   MOV.L       R2,@(16,R15); mp.utime
    000000E0 070003E8               MOVI20      #1000,R7   ; H'000003E8
    000000E4 1F62                   MOV.L       R6,@(8,R15); mp.FL
             tskcmd.c        653      mp.dtime      = 500;                                            // 減速時間[ms](１〜65535)
             tskcmd.c        654      mp.us         = 500;                                            // 加速時Ｓ字範囲
             tskcmd.c        655      mp.ds         = 500;                                            // 減速時Ｓ字範囲
             tskcmd.c        656      
             tskcmd.c        657      for( Loop = DVMIN; Loop <= DVMAX; Loop++ )
    000000E6 EE01                   MOV         #1,R14     ; H'00000001
    000000E8 1F73                   MOV.L       R7,@(12,R15); mp.FH
    000000EA EC07                   MOV         #7,R12     ; H'00000007
    000000EC 1F25                   MOV.L       R2,@(20,R15); mp.dtime
    000000EE 1F26                   MOV.L       R2,@(24,R15); mp.us
    000000F0 1F27                   MOV.L       R2,@(28,R15); mp.ds
    000000F2 DD57                   MOV.L       L1358+78,R13; _motor_SET
    000000F4              L21:
             tskcmd.c        658      {
             tskcmd.c        659          motor_SET( Loop, mp );
    000000F4 7FE0                   ADD         #-32,R15
    000000F6 65F3                   MOV         R15,R5
    000000F8 7520                   ADD         #32,R5
    000000FA 6252                   MOV.L       @R5,R2     ; (part of)mp
    000000FC 5151                   MOV.L       @(4,R5),R1 ; (part of)mp
    000000FE 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    00000100 2F22                   MOV.L       R2,@R15
    00000102 1F11                   MOV.L       R1,@(4,R15)
    00000104 5453                   MOV.L       @(12,R5),R4; (part of)mp
    00000106 1F72                   MOV.L       R7,@(8,R15)
    00000108 5754                   MOV.L       @(16,R5),R7; (part of)mp
    0000010A 5155                   MOV.L       @(20,R5),R1; (part of)mp
    0000010C 5256                   MOV.L       @(24,R5),R2; (part of)mp
    0000010E 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00000110 1F43                   MOV.L       R4,@(12,R15)
    00000112 64E3                   MOV         R14,R4
    00000114 1F74                   MOV.L       R7,@(16,R15)
    00000116 1F15                   MOV.L       R1,@(20,R15)
    00000118 1F26                   MOV.L       R2,@(24,R15)
    0000011A 4D0B                   JSR         @R13
    0000011C 1F67                   MOV.L       R6,@(28,R15)
    0000011E 7E01                   ADD         #1,R14
    00000120 3EC7                   CMP/GT      R12,R14
    00000122 8FE7                   BF/S        L21
    00000124 7F20                   ADD         #32,R15
    00000126 7F20                   ADD         #32,R15
    00000128 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c        660      }
             tskcmd.c        661    
             tskcmd.c        662    }
    0000012A 006B                   RTS/N
             tskcmd.c        663    /***********************************************************************
             tskcmd.c        664    * 
             tskcmd.c        665    * [概要]  タスク別解析処理
             tskcmd.c        666    * [引数]  メッセージデータ
             tskcmd.c        667    * [戻値]  −
             tskcmd.c        668    * 
             tskcmd.c        669    ***********************************************************************/
             tskcmd.c        670    static void CmdProc(T_CMD_MSG* mrcv)
    0000012C              __$CmdProc:                      ; function: __$CmdProc
                                                           ; frame size=0
             tskcmd.c        671    {
             tskcmd.c        672      switch( mrcv->msgdata.tskid )
    0000012C 5045                   MOV.L       @(20,R4),R0; (mrcv)->tskid
    0000012E 8801                   CMP/EQ      #1,R0
    00000130 8B01                   BF          L37
             tskcmd.c        673      {
             tskcmd.c        674      case ID_TSK_RX0:    // TSK_RX0->
             tskcmd.c        675          Rx0RcvMsg(mrcv);
    00000132 A025                   BRA         __$Rx0RcvMsg
    00000134 0009                   NOP
    00000136              L37:
    00000136 8802                   CMP/EQ      #2,R0
    00000138 8B01                   BF          L40
             tskcmd.c        676          break;
             tskcmd.c        677      case ID_TSK_TX0:    // TSK_TX0->
             tskcmd.c        678          Tx0RcvMsg(mrcv);
    0000013A A03B                   BRA         __$Tx0RcvMsg
    0000013C 0009                   NOP
    0000013E              L40:
    0000013E 8805                   CMP/EQ      #5,R0
    00000140 890F                   BT          L43
    00000142 8803                   CMP/EQ      #3,R0
    00000144 890D                   BT          L43
    00000146 8806                   CMP/EQ      #6,R0
    00000148 890D                   BT          L46
    0000014A 8808                   CMP/EQ      #8,R0
    0000014C 890D                   BT          L48
    0000014E 880A                   CMP/EQ      #10,R0
    00000150 890D                   BT          L50
    00000152 880B                   CMP/EQ      #11,R0
    00000154 890D                   BT          L52
    00000156 880D                   CMP/EQ      #13,R0
    00000158 890D                   BT          L54
    0000015A 880E                   CMP/EQ      #14,R0
    0000015C 890D                   BT          L55
    0000015E A00E                   BRA         L56
    00000160 0009                   NOP
    00000162              L43:
             tskcmd.c        679          break;
             tskcmd.c        680      case ID_TSK_CMD:
             tskcmd.c        681    //        AlmRcvMsg(mrcv);
             tskcmd.c        682    //        break;
             tskcmd.c        683      case ID_TSK_RXEX:   // TSK_RX2->
             tskcmd.c        684          RxExRcvMsg(mrcv);
    00000162 A1A6                   BRA         __$RxExRcvMsg
    00000164 0009                   NOP
    00000166              L46:
             tskcmd.c        685          break;
             tskcmd.c        686      case ID_TSK_TXEX:
             tskcmd.c        687          break;
             tskcmd.c        688      case ID_TSK_EEP:    // TSK_EEP->
             tskcmd.c        689          EepRcvMsg(mrcv);
    00000166 A026                   BRA         __$EepRcvMsg
    00000168 0009                   NOP
    0000016A              L48:
             tskcmd.c        690          break;
             tskcmd.c        691      case ID_TSK_MOTWAIT:
             tskcmd.c        692          MotWaitRcvMsg(mrcv);
    0000016A A110                   BRA         __$MotWaitRcvMsg
    0000016C 0009                   NOP
    0000016E              L50:
             tskcmd.c        693          break;
             tskcmd.c        694      case ID_TSK_MOTEND:
             tskcmd.c        695          MotEndRcvMsg(mrcv);
    0000016E A117                   BRA         __$MotEndRcvMsg
    00000170 0009                   NOP
    00000172              L52:
             tskcmd.c        696          break;
             tskcmd.c        697      case ID_TSK_INT:
             tskcmd.c        698          IntRcvMsg(mrcv);
    00000172 A0E1                   BRA         __$IntRcvMsg
    00000174 0009                   NOP
    00000176              L54:
             tskcmd.c        699          break;
             tskcmd.c        700      case ID_TSK_PUNIT:
             tskcmd.c        701          PunitRcvMsg(mrcv);
    00000176 A1D1                   BRA         __$PunitRcvMsg
    00000178 0009                   NOP
    0000017A              L55:
             tskcmd.c        702          break;
             tskcmd.c        703      case ID_TSK_TMPCNT:
             tskcmd.c        704          TmpCntRcvMsg(mrcv);
    0000017A A248                   BRA         __$TmpCntRcvMsg
    0000017C 0009                   NOP
    0000017E              L56:
    0000017E 006B                   RTS/N
             tskcmd.c        705          break;
             tskcmd.c        706          
             tskcmd.c        707      default:
             tskcmd.c        708          break;
             tskcmd.c        709      }
             tskcmd.c        710    }
             tskcmd.c        711    /***********************************************************************
             tskcmd.c        712    * 
             tskcmd.c        713    * [概要]  ＰＣ受信（ＲＸ０）タスクからのメッセージ受信処理
             tskcmd.c        714    * [引数]  メッセージデータ
             tskcmd.c        715    * [戻値]  −
             tskcmd.c        716    * 
             tskcmd.c        717    ***********************************************************************/
             tskcmd.c        718    static void Rx0RcvMsg( T_CMD_MSG* mrcv )
    00000180              __$Rx0RcvMsg:                    ; function: __$Rx0RcvMsg
                                                           ; frame size=0
             tskcmd.c        719    {
             tskcmd.c        720      UB          msgid;
             tskcmd.c        721    
             tskcmd.c        722      // メッセージＩＤ取得
             tskcmd.c        723      msgid = mrcv->msgdata.msgid;
             tskcmd.c        724    
             tskcmd.c        725      switch( msgid )
    00000180 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
    00000184 8865                   CMP/EQ      #101,R0
    00000186 8909                   BT          L63
    00000188 8866                   CMP/EQ      #102,R0
    0000018A 8B0D                   BF          L65
             tskcmd.c        726      {
             tskcmd.c        727      case ID_MSG_ACK:
             tskcmd.c        728          // 制御データ初期化
             tskcmd.c        729          memset( &stCtl,  CLR,  sizeof( stCtl ) );
             tskcmd.c        730          break;
             tskcmd.c        731    
             tskcmd.c        732      case ID_MSG_NAK:
             tskcmd.c        733          if( stCtl.rsp.rty > RTY_OVER ) 
    0000018C D531                   MOV.L       L1358+82,R5; H'00000098+__$stCtl
    0000018E 6652                   MOV.L       @R5,R6     ; stCtl.rsp.rty
    00000190 E203                   MOV         #3,R2      ; H'00000003
    00000192 3627                   CMP/GT      R2,R6
    00000194 8902                   BT          L63
             tskcmd.c        734          {
             tskcmd.c        735              // リトライオーバー
             tskcmd.c        736              // 制御データ初期化
             tskcmd.c        737              memset( &stCtl,  CLR,  sizeof( stCtl ) );
             tskcmd.c        738          }
             tskcmd.c        739          else
             tskcmd.c        740          {
             tskcmd.c        741              // 再送
             tskcmd.c        742              CmdSendResponse( &stCtl );
    00000196 D421                   MOV.L       L1358+26,R4; __$stCtl
    00000198 A2DE                   BRA         _CmdSendResponse
    0000019A 0009                   NOP
    0000019C              L63:
    0000019C E647                   MOV         #71,R6     ; H'00000047
    0000019E E500                   MOV         #0,R5      ; H'00000000
    000001A0 D41E                   MOV.L       L1358+26,R4; __$stCtl
    000001A2 D21F                   MOV.L       L1358+30,R2; _memset
    000001A4 422B                   JMP         @R2
    000001A6 4608                   SHLL2       R6
    000001A8              L65:
             tskcmd.c        743          }
             tskcmd.c        744          break;
             tskcmd.c        745    
             tskcmd.c        746      default:
             tskcmd.c        747          // 基本コマンド
             tskcmd.c        748          if( msgid < ID_MSG_BASE_CMD_MAX )
    000001A8 E22D                   MOV         #45,R2     ; H'0000002D
    000001AA 3023                   CMP/GE      R2,R0
    000001AC 8901                   BT          L69
             tskcmd.c        749          {
             tskcmd.c        750              CmdAnalyze( mrcv );
    000001AE A279                   BRA         __$CmdAnalyze
    000001B0 0009                   NOP
    000001B2              L69:
    000001B2 006B                   RTS/N
             tskcmd.c        751          }
             tskcmd.c        752          else
             tskcmd.c        753          {
             tskcmd.c        754              // ありえない
             tskcmd.c        755          }
             tskcmd.c        756          break;
             tskcmd.c        757      }
             tskcmd.c        758    }
             tskcmd.c        759    
             tskcmd.c        760    /***********************************************************************
             tskcmd.c        761    * 
             tskcmd.c        762    * [概要]  ＰＣ送信（ＴＸ０）タスクからのメッセージ受信処理
             tskcmd.c        763    * [引数]  メッセージデータ
             tskcmd.c        764    * [戻値]  −
             tskcmd.c        765    * 
             tskcmd.c        766    ***********************************************************************/
             tskcmd.c        767    static void Tx0RcvMsg( T_CMD_MSG* mrcv )
    000001B4              __$Tx0RcvMsg:                    ; function: __$Tx0RcvMsg
                                                           ; frame size=0
             tskcmd.c        768    {
             tskcmd.c        769    }
    000001B4 006B                   RTS/N
             tskcmd.c        770    
             tskcmd.c        771    /***********************************************************************
             tskcmd.c        772    * 
             tskcmd.c        773    * [概要]  
             tskcmd.c        774    * [引数]  メッセージデータ
             tskcmd.c        775    * [戻値]  −
             tskcmd.c        776    * 
             tskcmd.c        777    ***********************************************************************/
             tskcmd.c        778    static void AlmRcvMsg( T_CMD_MSG* mrcv )
             tskcmd.c        779    {
             tskcmd.c        780    }
             tskcmd.c        781    
             tskcmd.c        782    /***********************************************************************
             tskcmd.c        783    * 
             tskcmd.c        784    * [概要]  ＥＥＰＲＯＭ管理タスクからのメッセージ受信処理
             tskcmd.c        785    * [引数]  メッセージデータ
             tskcmd.c        786    * [戻値]  −
             tskcmd.c        787    * 
             tskcmd.c        788    ***********************************************************************/
             tskcmd.c        789    static void EepRcvMsg( T_CMD_MSG* mrcv )
    000001B6              __$EepRcvMsg:                    ; function: __$EepRcvMsg
                                                           ; frame size=68
    000001B6 4AF0                   MOVMU.L     R10,@-R15
    000001B8 7FFC                   ADD         #-4,R15
             tskcmd.c        790    {
             tskcmd.c        791      UB  msgid;
             tskcmd.c        792      UB  inf;
             tskcmd.c        793      UB  inf2;
             tskcmd.c        794      UB  prid1;
             tskcmd.c        795      UB  bcid;
             tskcmd.c        796      UB  result = SET;
             tskcmd.c        797      int i;
             tskcmd.c        798      UB  *sramadr;
             tskcmd.c        799      int index;
             tskcmd.c        800      
             tskcmd.c        801      prid1 = mrcv->msgdata.prid1;                                        // 
             tskcmd.c        802      bcid  = mrcv->msgdata.bcid;                                         // 
             tskcmd.c        803      msgid = mrcv->msgdata.msgid;
    000001BA 3A41801B               MOVU.B      @(27,R4),R10; (mrcv)->msgid
             tskcmd.c        804      inf   = mrcv->msgdata.inf;
             tskcmd.c        805      inf2  = mrcv->msgdata.inf2;
             tskcmd.c        806      
             tskcmd.c        807      if( msgid == ID_MSG_EEPREAD )
    000001BE 60A3                   MOV         R10,R0
    000001C0 8816                   CMP/EQ      #22,R0
    000001C2 36418018               MOVU.B      @(24,R4),R6; (mrcv)->prid1
    000001C6 3B41801A               MOVU.B      @(26,R4),R11; (mrcv)->bcid
    000001CA 3C41801C               MOVU.B      @(28,R4),R12; (mrcv)->inf
    000001CE 3D41801D               MOVU.B      @(29,R4),R13; (mrcv)->inf2
    000001D2 8D02                   BT/S        L1391
    000001D4 6E43                   MOV         R4,R14
    000001D6 A08C                   BRA         L80
    000001D8 0009                   NOP
    000001DA              L1391:
             tskcmd.c        808      {
             tskcmd.c        809          switch( prid1 )
    000001DA 6063                   MOV         R6,R0
    000001DC 8801                   CMP/EQ      #1,R0
    000001DE 8B49                   BF          L81
             tskcmd.c        810          {
             tskcmd.c        811          case ID_TPL_FWVER:
             tskcmd.c        812              if( (inf2 & EEPROM_SPED_PTRN) ) // 速度情報（Page2〜Page4）
    000001E0 87D9                   BLD         #1,R13
    000001E2 8B05                   BF          L84
             tskcmd.c        813              {
             tskcmd.c        814                  eep_GetSpeedData( &Sp[MT_Y0][0].ac );
    000001E4 D41C                   MOV.L       L1358+86,R4; H'0000003C+__$Sp
    000001E6 DE1D                   MOV.L       L1358+90,R14; _eep_GetSpeedData
    000001E8 4E4B                   JSR/N       @R14
             tskcmd.c        815                  eep_GetSpeedPattern( &SpPtn.Y0_SpdIniPtn );
    000001EA D41D                   MOV.L       L1358+94,R4; __$SpPtn
    000001EC D11D                   MOV.L       L1358+98,R1; _eep_GetSpeedPattern
    000001EE 414B                   JSR/N       @R1
    000001F0              L84:
             tskcmd.c        816              }
             tskcmd.c        817              if( (inf2 & EEPROM_POSI_INFO) ) // 位置情報（Page7〜Page9）
    000001F0 87DA                   BLD         #2,R13
    000001F2 8B02                   BF          L86
             tskcmd.c        818              {
             tskcmd.c        819                  eep_GetPositionInfo( &BkP7.Y0_Offset );
    000001F4 D41C                   MOV.L       L1358+102,R4; __$BkP7
    000001F6 D21D                   MOV.L       L1358+106,R2; _eep_GetPositionInfo
    000001F8 424B                   JSR/N       @R2
    000001FA              L86:
             tskcmd.c        820              }
             tskcmd.c        821              TpRspFWVER();
    000001FA D31D                   MOV.L       L1358+110,R3; __$TpRspFWVER
    000001FC 434B                   JSR/N       @R3
    000001FE A078                   BRA         L80
    00000200 0009                   NOP
    00000202              L1358:
    00000202 00000002               .RES.W      1
    00000204 <00000000>             .DATA.L     _v4_dly_tsk
    00000208 <00000000>             .DATA.L     _MntInit
    0000020C <00000000>             .DATA.L     __$MnetStatus
    00000210 <00000000>             .DATA.L     _v4_trcv_mbx
    00000214 <00000000>             .DATA.L     L1428
    00000218 <00000000>             .DATA.L     _api_rel_mpf
    0000021C <00000000>             .DATA.L     __$stCtl
    00000220 <00000000>             .DATA.L     _memset
    00000224 <00000000>             .DATA.L     __$RecvData
    00000228 <00000000>             .DATA.L     __$RecvArgs
    0000022C <00000000>             .DATA.L     __$TpRecvData
    00000230 <00000000>             .DATA.L     __$TpRecvArgs
    00000234 <00000000>             .DATA.L     __$bufwk
    00000238 <00000000>             .DATA.L     __$psel
    0000023C <00000000>             .DATA.L     __$incuv
    00000240 <00000000>             .DATA.L     __$bcctrl
    00000244 <00000000>             .DATA.L     __$power
    00000248 0C00F020               .DATA.L     H'0C00F020
    0000024C <00000000>             .DATA.L     _GetFactor
    00000250 <00000000>             .DATA.L     _motor_SET
    00000254 <00000098>             .DATA.L     H'00000098+__$stCtl
    00000258 <0000003C>             .DATA.L     H'0000003C+__$Sp
    0000025C <00000000>             .DATA.L     _eep_GetSpeedData
    00000260 <00000000>             .DATA.L     __$SpPtn
    00000264 <00000000>             .DATA.L     _eep_GetSpeedPattern
    00000268 <00000000>             .DATA.L     __$BkP7
    0000026C <00000000>             .DATA.L     _eep_GetPositionInfo
    00000270 <00000000>             .DATA.L     __$TpRspFWVER
    00000274              L81:
    00000274 8803                   CMP/EQ      #3,R0
    00000276 8907                   BT          L88
    00000278 8804                   CMP/EQ      #4,R0
    0000027A 8905                   BT          L88
    0000027C 8802                   CMP/EQ      #2,R0
    0000027E 8907                   BT          L91
    00000280 8851                   CMP/EQ      #81,R0
    00000282 890C                   BT          L92
    00000284 A035                   BRA         L80
    00000286 0009                   NOP
    00000288              L88:
             tskcmd.c        822              break;
             tskcmd.c        823          
             tskcmd.c        824          case ID_TPL_LGIN1:
             tskcmd.c        825          case ID_TPL_LGIN2:
             tskcmd.c        826              TpRspLGIN1();
    00000288 D38E                   MOV.L       L1359,R3   ; __$TpRspLGIN1
    0000028A 434B                   JSR/N       @R3
    0000028C A031                   BRA         L80
    0000028E 0009                   NOP
    00000290              L91:
             tskcmd.c        827              break;
             tskcmd.c        828    
             tskcmd.c        829          case ID_TPL_OPTIF:
             tskcmd.c        830              eep_GetOptionInfo  ( &BkP10.Login );
    00000290 D48D                   MOV.L       L1359+4,R4 ; __$BkP10
    00000292 D28E                   MOV.L       L1359+8,R2 ; _eep_GetOptionInfo
    00000294 424B                   JSR/N       @R2
             tskcmd.c        831              TpRspOPTIF();
    00000296 D38E                   MOV.L       L1359+12,R3; __$TpRspOPTIF
    00000298 434B                   JSR/N       @R3
    0000029A A02A                   BRA         L80
    0000029C 0009                   NOP
    0000029E              L92:
             tskcmd.c        832              break;
             tskcmd.c        833    
             tskcmd.c        834          case ID_TPL_PRTCL:
             tskcmd.c        835              if(( inf2 > 0 )&&( inf2 <= PROT_CT_MAX ))
    0000029E 2DD8                   TST         R13,R13
    000002A0 8927                   BT          L80
    000002A2 E614                   MOV         #20,R6     ; H'00000014
    000002A4 3D67                   CMP/GT      R6,R13
    000002A6 8924                   BT          L80
             tskcmd.c        836              {
             tskcmd.c        837                  index = inf2 - 1;
    000002A8 65D3                   MOV         R13,R5
    000002AA 75FF                   ADD         #-1,R5
             tskcmd.c        838                  
             tskcmd.c        839                  // BkPrData
             tskcmd.c        840                  // UB Cnt; トータルステップ数（ 1 〜 80 ）
             tskcmd.c        841                  // UB Prc; 工程有無
             tskcmd.c        842                  // UB Stp; 処理ステップ
             tskcmd.c        843                  pProcDat = (ST_PROTCOL_DATA *)&BkPrData[index].Cnt;
    000002AC D489                   MOV.L       L1359+16,R4; __$BkPrData
    000002AE 6153                   MOV         R5,R1
    000002B0 2F52                   MOV.L       R5,@R15    ; index
    000002B2 4108                   SHLL2       R1
    000002B4 341C                   ADD         R1,R4
    000002B6 D688                   MOV.L       L1359+20,R6; __$pProcDat
             tskcmd.c        844                  eep_GetProtocolData( pProcDat,  index );
    000002B8 D788                   MOV.L       L1359+24,R7; _eep_GetProtocolData
    000002BA 470B                   JSR         @R7
    000002BC 2642                   MOV.L       R4,@R6     ; pProcDat
             tskcmd.c        845                  
             tskcmd.c        846                  pProcAdr = (ST_PROTCOL *)( SRAM_START_ADDRESS + sizeof(ST_PROTCOL) * index);
    000002BE 64F2                   MOV.L       @R15,R4    ; index
    000002C0 00000640               MOVI20      #1600,R0   ; H'00000640
    000002C4 4480                   MULR        R0,R4
    000002C6 01000C00               MOVI20      #3072,R1   ; H'00000C00
    000002CA 4128                   SHLL16      R1
    000002CC D584                   MOV.L       L1359+28,R5; __$pProcAdr
    000002CE 341C                   ADD         R1,R4
             tskcmd.c        847                  eep_GetProtocol( pProcAdr );
    000002D0 D284                   MOV.L       L1359+32,R2; _eep_GetProtocol
    000002D2 420B                   JSR         @R2
    000002D4 2542                   MOV.L       R4,@R5     ; pProcAdr
             tskcmd.c        848    
             tskcmd.c        849                  StaQgProcList( bcid,          // bcid
             tskcmd.c        850                                 msgid,         // msgid
             tskcmd.c        851                                 NO_DATA,       // devno
             tskcmd.c        852                                 1,             // actstp
             tskcmd.c        853                                 ID_TPL_PRTCL,  // prid1
             tskcmd.c        854                                 inf,           // inf
             tskcmd.c        855                                 inf2           // inf2(プロトコル番号)
             tskcmd.c        856                  );
    000002D6 2FD6                   MOV.L       R13,@-R15
    000002D8 2FC6                   MOV.L       R12,@-R15
    000002DA EC51                   MOV         #81,R12    ; H'00000051
    000002DC 2FC6                   MOV.L       R12,@-R15
    000002DE E701                   MOV         #1,R7      ; H'00000001
    000002E0 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    000002E2 64B3                   MOV         R11,R4
    000002E4 D380                   MOV.L       L1359+36,R3; __$StaQgProcList
    000002E6 430B                   JSR         @R3
    000002E8 65A3                   MOV         R10,R5
    000002EA 7F0C                   ADD         #12,R15
             tskcmd.c        857                  
             tskcmd.c        858                  QgProcList( mrcv );
    000002EC D37F                   MOV.L       L1359+40,R3; __$QgProcList
    000002EE 430B                   JSR         @R3
    000002F0 64E3                   MOV         R14,R4
    000002F2              L80:
             tskcmd.c        859              }
             tskcmd.c        860              break;
             tskcmd.c        861          }
             tskcmd.c        862      }
             tskcmd.c        863    
             tskcmd.c        864      if(
    000002F2 60A3                   MOV         R10,R0
    000002F4 8824                   CMP/EQ      #36,R0
    000002F6 8903                   BT          L96
    000002F8 8825                   CMP/EQ      #37,R0
    000002FA 8901                   BT          L96
    000002FC 8826                   CMP/EQ      #38,R0
    000002FE 8B18                   BF          L98
    00000300              L96:
             tskcmd.c        865          ( msgid == ID_MSG_IMPPDAT )||
             tskcmd.c        866          ( msgid == ID_MSG_IMPSPED )||
             tskcmd.c        867          ( msgid == ID_MSG_IMPPOSI )
             tskcmd.c        868      )
             tskcmd.c        869      {
             tskcmd.c        870          // 応答メッセージ作成
             tskcmd.c        871          CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c        872                              PARAM2,                                         // パラメータ数
             tskcmd.c        873                              STRTBL_MSG[msgid],                              // コマンド文字列
             tskcmd.c        874                              E_SUCCESS,                                      // エラーコード
             tskcmd.c        875    
             tskcmd.c        876                              0,                                              // 
             tskcmd.c        877                              0,                                              // 
             tskcmd.c        878                              0,                                              // 
             tskcmd.c        879                              0,                                              // 
             tskcmd.c        880                              0,                                              // 
             tskcmd.c        881    
             tskcmd.c        882                              0,                                              // 
             tskcmd.c        883                              0,                                              // 
             tskcmd.c        884                              0,                                              // 
             tskcmd.c        885                              0,                                              // 
             tskcmd.c        886                              0                                               // 
             tskcmd.c        887                          );
    00000300 E200                   MOV         #0,R2      ; H'00000000
    00000302 2F26                   MOV.L       R2,@-R15
    00000304 2F26                   MOV.L       R2,@-R15
    00000306 2F26                   MOV.L       R2,@-R15
    00000308 2F26                   MOV.L       R2,@-R15
    0000030A 2F26                   MOV.L       R2,@-R15
    0000030C 2F26                   MOV.L       R2,@-R15
    0000030E 2F26                   MOV.L       R2,@-R15
    00000310 2F26                   MOV.L       R2,@-R15
    00000312 2F26                   MOV.L       R2,@-R15
    00000314 2F26                   MOV.L       R2,@-R15
    00000316 4A08                   SHLL2       R10
    00000318 D775                   MOV.L       L1359+44,R7; _STRTBL_MSG
    0000031A 60A3                   MOV         R10,R0
    0000031C 067E                   MOV.L       @(R0,R7),R6; STRTBL_MSG[]
    0000031E E502                   MOV         #2,R5      ; H'00000002
    00000320 D474                   MOV.L       L1359+48,R4; __$stCtl
    00000322 B34F                   BSR         _CmdMakeResponse
    00000324 6723                   MOV         R2,R7
    00000326 7F28                   ADD         #40,R15
             tskcmd.c        888          CmdSendResponse( &stCtl );                                          // 応答送信
    00000328 D472                   MOV.L       L1359+48,R4; __$stCtl
    0000032A 7F04                   ADD         #4,R15
    0000032C 4AF4                   MOVMU.L     @R15+,R10
    0000032E A213                   BRA         _CmdSendResponse
    00000330 0009                   NOP
    00000332              L98:
    00000332 7F04                   ADD         #4,R15
    00000334 4AF4                   MOVMU.L     @R15+,R10
    00000336 006B                   RTS/N
             tskcmd.c        889      }
             tskcmd.c        890    
             tskcmd.c        891    }
             tskcmd.c        892    
             tskcmd.c        893    /***********************************************************************
             tskcmd.c        894    * 
             tskcmd.c        895    * [概要]  
             tskcmd.c        896    * [引数]  メッセージデータ
             tskcmd.c        897    * [戻値]  −
             tskcmd.c        898    * 
             tskcmd.c        899    ***********************************************************************/
             tskcmd.c        900    static void IntRcvMsg( T_CMD_MSG* mrcv )
    00000338              __$IntRcvMsg:                    ; function: __$IntRcvMsg
                                                           ; frame size=20
    00000338 4F22                   STS.L       PR,@-R15
    0000033A 7FF0                   ADD         #-16,R15
             tskcmd.c        901    {
             tskcmd.c        902      ER result = E_SUCCESS;
             tskcmd.c        903      UB Loopd;
             tskcmd.c        904      UB intbuf[8];
             tskcmd.c        905      INT TargetDevice[2];
             tskcmd.c        906      INT CompareDevice[2];
             tskcmd.c        907      
             tskcmd.c        908      // 今回停止させたデバイスが関連するBLKCMDがある場合にBLKCMD管理テーブルの登録から外す
             tskcmd.c        909      memcpy( &intbuf[0], &mrcv->msgdata.data[0], 8 );
    0000033C 7424                   ADD         #36,R4
    0000033E E608                   MOV         #8,R6      ; H'00000008
    00000340 6543                   MOV         R4,R5
    00000342 D16D                   MOV.L       L1359+52,R1; _memcpy
    00000344 410B                   JSR         @R1
    00000346 64F3                   MOV         R15,R4
             tskcmd.c        910      
             tskcmd.c        911      // 上位
             tskcmd.c        912      TargetDevice[1] =   intbuf[7] * 0x1000000 +
             tskcmd.c        913                          intbuf[6] * 0x10000 +
             tskcmd.c        914                          intbuf[5] * 0x100 +
             tskcmd.c        915                          intbuf[4];
    00000348 84F7                   MOV.B       @(7,R15),R0; intbuf[]
    0000034A 37F18000               MOVU.B      @(0,R15),R7; intbuf[]
    0000034E 4028                   SHLL16      R0
    00000350 4018                   SHLL8       R0
    00000352 6103                   MOV         R0,R1
    00000354 30F18006               MOVU.B      @(6,R15),R0; intbuf[]
    00000358 4028                   SHLL16      R0
    0000035A 310C                   ADD         R0,R1
    0000035C 30F18005               MOVU.B      @(5,R15),R0; intbuf[]
    00000360 4018                   SHLL8       R0
    00000362 310C                   ADD         R0,R1
    00000364 30F18004               MOVU.B      @(4,R15),R0; intbuf[]
    00000368 310C                   ADD         R0,R1
             tskcmd.c        916    
             tskcmd.c        917      // 
             tskcmd.c        918      TargetDevice[0] =   intbuf[3] * 0x1000000 +
             tskcmd.c        919                          intbuf[2] * 0x10000 +
             tskcmd.c        920                          intbuf[1] * 0x100 +
             tskcmd.c        921                          intbuf[0];
    0000036A 84F3                   MOV.B       @(3,R15),R0; intbuf[]
    0000036C 1F13                   MOV.L       R1,@(12,R15); TargetDevice[]
    0000036E 4028                   SHLL16      R0
    00000370 4018                   SHLL8       R0
    00000372 6203                   MOV         R0,R2
    00000374 30F18002               MOVU.B      @(2,R15),R0; intbuf[]
    00000378 4028                   SHLL16      R0
    0000037A 320C                   ADD         R0,R2
    0000037C 30F18001               MOVU.B      @(1,R15),R0; intbuf[]
    00000380 4018                   SHLL8       R0
    00000382 320C                   ADD         R0,R2
    00000384 327C                   ADD         R7,R2
    00000386 1F22                   MOV.L       R2,@(8,R15); TargetDevice[]
    00000388 7F10                   ADD         #16,R15
    0000038A 4F26                   LDS.L       @R15+,PR
             tskcmd.c        922    
             tskcmd.c        923    }
    0000038C 006B                   RTS/N
             tskcmd.c        924    /***********************************************************************
             tskcmd.c        925    * 
             tskcmd.c        926    * [概要]  タスクからのメッセージ受信処理
             tskcmd.c        927    * [引数]  メッセージデータ
             tskcmd.c        928    * [戻値]  −
             tskcmd.c        929    * 
             tskcmd.c        930    ***********************************************************************/
             tskcmd.c        931    static void MotWaitRcvMsg( T_CMD_MSG* mrcv )
    0000038E              __$MotWaitRcvMsg:                ; function: __$MotWaitRcvMsg
                                                           ; frame size=0
             tskcmd.c        932    {
             tskcmd.c        933      ER result = E_SUCCESS;
             tskcmd.c        934      
             tskcmd.c        935      if( mrcv->msgdata.bcid != NO_DATA )
             tskcmd.c        936      {
             tskcmd.c        937    //        result = BlkCmdProc( mrcv );
             tskcmd.c        938      }
             tskcmd.c        939      if( mrcv->msgdata.prid1 != NO_DATA )
    0000038E 36414018               MOV.B       @(24:12,R4),R6; (mrcv)->prid1
    00000392 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00000394 3620                   CMP/EQ      R2,R6
    00000396 8902                   BT          L102
             tskcmd.c        940      {
             tskcmd.c        941          result = QgProcList( mrcv );
    00000398 D354                   MOV.L       L1359+40,R3; __$QgProcList
    0000039A 432B                   JMP         @R3
    0000039C 0009                   NOP
    0000039E              L102:
    0000039E 006B                   RTS/N
             tskcmd.c        942      }
             tskcmd.c        943    }
             tskcmd.c        944      
             tskcmd.c        945    /***********************************************************************
             tskcmd.c        946    * 
             tskcmd.c        947    * [概要]  タスクからのメッセージ受信処理
             tskcmd.c        948    * [引数]  メッセージデータ
             tskcmd.c        949    * [戻値]  −
             tskcmd.c        950    * 
             tskcmd.c        951    ***********************************************************************/
             tskcmd.c        952    static void MotEndRcvMsg( T_CMD_MSG* mrcv )
    000003A0              __$MotEndRcvMsg:                 ; function: __$MotEndRcvMsg
                                                           ; frame size=136
    000003A0 49F0                   MOVMU.L     R9,@-R15
    000003A2 7FBC                   ADD         #-68,R15
             tskcmd.c        953    {
             tskcmd.c        954      ER result  = E_SUCCESS;
             tskcmd.c        955      ER result1 = E_SUCCESS;
             tskcmd.c        956      ER result2 = E_SUCCESS;
             tskcmd.c        957      ST_MOTOR_STATUS     sts;                                        // 
             tskcmd.c        958      ST_MOTOR_STATUS     sts2;                                       // 
             tskcmd.c        959      UB prid1;
             tskcmd.c        960      UB bcid;
             tskcmd.c        961      UB msg;
             tskcmd.c        962      UB mm1;
             tskcmd.c        963      UB mm2;
             tskcmd.c        964      UB Loopd;
             tskcmd.c        965      INT TargetDevice[2];
             tskcmd.c        966      INT CompareDevice[2];
             tskcmd.c        967    
             tskcmd.c        968      prid1 = mrcv->msgdata.prid1;
             tskcmd.c        969      bcid = mrcv->msgdata.bcid;
             tskcmd.c        970      msg  = mrcv->msgdata.msgid;
             tskcmd.c        971      mm1 = mrcv->msgdata.inf;
             tskcmd.c        972      mm2 = mrcv->msgdata.inf2;
             tskcmd.c        973      stCtl.rsp.siz = mrcv->msgdata.siz;
    000003A4 5248                   MOV.L       @(32,R4),R2; (mrcv)->siz
    000003A6 6D43                   MOV         R4,R13
    000003A8 3B41801C               MOVU.B      @(28,R4),R11; (mrcv)->inf
    000003AC D153                   MOV.L       L1359+56,R1; H'00000094+__$stCtl
    000003AE 3E41401A               MOV.B       @(26:12,R4),R14; (mrcv)->bcid
    000003B2 3941801B               MOVU.B      @(27,R4),R9; (mrcv)->msgid
    000003B6 3A41801D               MOVU.B      @(29,R4),R10; (mrcv)->inf2
    000003BA 2122                   MOV.L       R2,@R1     ; stCtl.rsp.siz
             tskcmd.c        974      
             tskcmd.c        975      ClrDevice( mm1 );   
    000003BC D350                   MOV.L       L1359+60,R3; __$ClrDevice
    000003BE 430B                   JSR         @R3
    000003C0 64B3                   MOV         R11,R4
             tskcmd.c        976    
             tskcmd.c        977      if( bcid == NO_DATA )
    000003C2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000003C4 3E50                   CMP/EQ      R5,R14
    000003C6 8F63                   BF/S        L110
    000003C8 EC00                   MOV         #0,R12     ; H'00000000
             tskcmd.c        978      {
             tskcmd.c        979          switch( msg )
    000003CA 6093                   MOV         R9,R0
    000003CC 880D                   CMP/EQ      #13,R0
    000003CE 8B44                   BF          L111
             tskcmd.c        980          {
             tskcmd.c        981          case ID_MSG_MAP:
             tskcmd.c        982              if( GetDeviceStatus( mm2 ) == TRUE )    return;
    000003D0 D34C                   MOV.L       L1359+64,R3; __$GetDeviceStatus
    000003D2 430B                   JSR         @R3
    000003D4 64A3                   MOV         R10,R4
    000003D6 8801                   CMP/EQ      #1,R0
    000003D8 8968                   BT          L114
    000003DA 65F3                   MOV         R15,R5
             tskcmd.c        983    
             tskcmd.c        984              result1 = motor_STATUS( mm1, &sts  );
    000003DC 1FBE                   MOV.L       R11,@(56,R15)
    000003DE DD4A                   MOV.L       L1359+68,R13; _motor_STATUS
    000003E0 4D0B                   JSR         @R13
    000003E2 64B3                   MOV         R11,R4
    000003E4 65F3                   MOV         R15,R5
    000003E6 7518                   ADD         #24,R5
    000003E8 1F0F                   MOV.L       R0,@(60,R15)
             tskcmd.c        985              result2 = motor_STATUS( mm2, &sts2 );
    000003EA DE47                   MOV.L       L1359+68,R14; _motor_STATUS
    000003EC 4E0B                   JSR         @R14
    000003EE 64A3                   MOV         R10,R4
             tskcmd.c        986    
             tskcmd.c        987              if( result2 != E_SUCCESS )      result = result2;
    000003F0 2008                   TST         R0,R0
    000003F2 3FA12010               MOV.L       R10,@(64:12,R15)
    000003F6 8D01                   BT/S        L116
    000003F8 6603                   MOV         R0,R6
    000003FA 6C63                   MOV         R6,R12
    000003FC              L116:
             tskcmd.c        988              if( result1 != E_SUCCESS )      result = result1;
    000003FC 51FF                   MOV.L       @(60,R15),R1
    000003FE 2118                   TST         R1,R1
    00000400 8900                   BT          L118
    00000402 6C13                   MOV         R1,R12
    00000404              L118:
             tskcmd.c        989              
             tskcmd.c        990              // 応答メッセージ作成
             tskcmd.c        991              CmdMakeResponse(    &stCtl,
             tskcmd.c        992                                  PARAM12,                                // パラメータ数
             tskcmd.c        993                                  STRTBL_MSG[msg],                        // コマンド文字列
             tskcmd.c        994                                  result,                                 // エラーコード
             tskcmd.c        995    
             tskcmd.c        996                                  mm1,                                    // モータ１番号
             tskcmd.c        997                                  sts.pos,                                // パルスカウント１
             tskcmd.c        998                                  sts.enc,                                // エンコーダ１
             tskcmd.c        999                                  sts.cw_limit,                           // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1000                                  sts.ccw_limit,                          // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1001    
             tskcmd.c       1002                                  mm2,                                    // モータ２番号
             tskcmd.c       1003                                  sts2.pos,                               // パルスカウント２
             tskcmd.c       1004                                  sts2.enc,                               // エンコーダ２
             tskcmd.c       1005                                  sts2.cw_limit,                          // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1006                                  sts2.ccw_limit                          // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1007                              );
    00000404 7FFC                   ADD         #-4,R15
    00000406 54FC                   MOV.L       @(48,R15),R4; sts2.ccw_limit
    00000408 2F42                   MOV.L       R4,@R15
    0000040A 7FFC                   ADD         #-4,R15
    0000040C 55FC                   MOV.L       @(48,R15),R5; sts2.cw_limit
    0000040E 2F52                   MOV.L       R5,@R15
    00000410 7FFC                   ADD         #-4,R15
    00000412 57FA                   MOV.L       @(40,R15),R7; sts2.enc
    00000414 2F72                   MOV.L       R7,@R15
    00000416 7FFC                   ADD         #-4,R15
    00000418 5AFA                   MOV.L       @(40,R15),R10; sts2.pos
    0000041A 2FA2                   MOV.L       R10,@R15
    0000041C 7FFC                   ADD         #-4,R15
    0000041E 31F16015               MOV.L       @(84:12,R15),R1
    00000422 2F12                   MOV.L       R1,@R15
    00000424 7FFC                   ADD         #-4,R15
    00000426 5BFB                   MOV.L       @(44,R15),R11; sts.ccw_limit
    00000428 2FB2                   MOV.L       R11,@R15
    0000042A 7FFC                   ADD         #-4,R15
    0000042C 5DFB                   MOV.L       @(44,R15),R13; sts.cw_limit
    0000042E 2FD2                   MOV.L       R13,@R15
    00000430 7FFC                   ADD         #-4,R15
    00000432 5EF9                   MOV.L       @(36,R15),R14; sts.enc
    00000434 2FE2                   MOV.L       R14,@R15
    00000436 7FFC                   ADD         #-4,R15
    00000438 51F9                   MOV.L       @(36,R15),R1; sts.pos
    0000043A 2F12                   MOV.L       R1,@R15
    0000043C 7FFC                   ADD         #-4,R15
    0000043E 32F16018               MOV.L       @(96:12,R15),R2
    00000442 4908                   SHLL2       R9
    00000444 E50C                   MOV         #12,R5     ; H'0000000C
    00000446 2F22                   MOV.L       R2,@R15
    00000448 6093                   MOV         R9,R0
    0000044A D229                   MOV.L       L1359+44,R2; _STRTBL_MSG
    0000044C 062E                   MOV.L       @(R0,R2),R6; STRTBL_MSG[]
    0000044E 67C3                   MOV         R12,R7
    00000450 D428                   MOV.L       L1359+48,R4; __$stCtl
    00000452 B2B7                   BSR         _CmdMakeResponse
    00000454 6E43                   MOV         R4,R14
    00000456 A017                   BRA         L119
    00000458 7F28                   ADD         #40,R15
    0000045A              L111:
    0000045A 880A                   CMP/EQ      #10,R0
    0000045C DE25                   MOV.L       L1359+48,R14; __$stCtl
    0000045E 8901                   BT          L121
    00000460 8814                   CMP/EQ      #20,R0
    00000462 8B0A                   BF          L122
    00000464              L121:
             tskcmd.c       1008              break;
             tskcmd.c       1009    
             tskcmd.c       1010    
             tskcmd.c       1011          case ID_MSG_ABORT:
             tskcmd.c       1012          case ID_MSG_STOP:
             tskcmd.c       1013              // 今回停止させたデバイスが関連するＢＣがある場合にＢＣ管理テーブルの登録から外す
             tskcmd.c       1014    
             tskcmd.c       1015              // 対象デバイス初期化
             tskcmd.c       1016              memset( &TargetDevice[0], CLR, sizeof( TargetDevice ) );
    00000464 64F3                   MOV         R15,R4
    00000466 7430                   ADD         #48,R4
    00000468 E608                   MOV         #8,R6      ; H'00000008
    0000046A D128                   MOV.L       L1359+72,R1; _memset
    0000046C 410B                   JSR         @R1
    0000046E E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1017    
             tskcmd.c       1018              // 対象デバイス取得
             tskcmd.c       1019              BitSet_INT( mm1, &TargetDevice[0] );
    00000470 65F3                   MOV         R15,R5
    00000472 7530                   ADD         #48,R5
    00000474 D726                   MOV.L       L1359+76,R7; _BitSet_INT
    00000476 470B                   JSR         @R7
    00000478 64B3                   MOV         R11,R4
    0000047A              L122:
    0000047A D120                   MOV.L       L1359+56,R1; H'00000094+__$stCtl
    0000047C 6612                   MOV.L       @R1,R6     ; stCtl.rsp.siz
             tskcmd.c       1020    
             tskcmd.c       1021              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       1022    
             tskcmd.c       1023          default:
             tskcmd.c       1024              // レスポンスデータ取得
             tskcmd.c       1025              memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], stCtl.rsp.siz );
    0000047E 7D24                   ADD         #36,R13
    00000480 D424                   MOV.L       L1359+80,R4; H'0000009C+__$stCtl
    00000482 D21D                   MOV.L       L1359+52,R2; _memcpy
    00000484 420B                   JSR         @R2
    00000486 65D3                   MOV         R13,R5
    00000488              L119:
             tskcmd.c       1026              break;
             tskcmd.c       1027          }
             tskcmd.c       1028          
             tskcmd.c       1029          // 応答送信
             tskcmd.c       1030          CmdSendResponse( &stCtl );
    00000488 B166                   BSR         _CmdSendResponse
    0000048A 64E3                   MOV         R14,R4
    0000048C A00E                   BRA         L114
    0000048E 0009                   NOP
    00000490              L110:
             tskcmd.c       1031      }
             tskcmd.c       1032      else
             tskcmd.c       1033      {
             tskcmd.c       1034          ClrDevice( mm1 );   
    00000490 D31B                   MOV.L       L1359+60,R3; __$ClrDevice
    00000492 430B                   JSR         @R3
    00000494 64B3                   MOV         R11,R4
             tskcmd.c       1035          if( msg == ID_MSG_MAP )
    00000496 6093                   MOV         R9,R0
    00000498 880D                   CMP/EQ      #13,R0
    0000049A 8B04                   BF          L124
             tskcmd.c       1036          {
             tskcmd.c       1037              if( GetDeviceStatus( mm2 ) == TRUE )    return;
    0000049C D319                   MOV.L       L1359+64,R3; __$GetDeviceStatus
    0000049E 430B                   JSR         @R3
    000004A0 64A3                   MOV         R10,R4
    000004A2 8801                   CMP/EQ      #1,R0
    000004A4 8902                   BT          L114
    000004A6              L124:
             tskcmd.c       1038          }
             tskcmd.c       1039          
             tskcmd.c       1040          QgProcList( mrcv );
    000004A6 D311                   MOV.L       L1359+40,R3; __$QgProcList
    000004A8 430B                   JSR         @R3
    000004AA 64D3                   MOV         R13,R4
    000004AC              L114:
    000004AC 7F44                   ADD         #68,R15
    000004AE 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1041      }
             tskcmd.c       1042    }
    000004B0 006B                   RTS/N
             tskcmd.c       1043    
             tskcmd.c       1044    /***********************************************************************
             tskcmd.c       1045    * 
             tskcmd.c       1046    * [概要]  拡張シリアル受信タスクからのメッセージ受信処理
             tskcmd.c       1047    * [引数]  メッセージデータ
             tskcmd.c       1048    * [戻値]  −
             tskcmd.c       1049    * 
             tskcmd.c       1050    ***********************************************************************/
             tskcmd.c       1051    static void RxExRcvMsg( T_CMD_MSG* mrcv )
    000004B2              __$RxExRcvMsg:                   ; function: __$RxExRcvMsg
                                                           ; frame size=0
             tskcmd.c       1052    {
             tskcmd.c       1053      if( mrcv->msgdata.prid1 < TP_ID_PROC_MAX )
    000004B2 36414018               MOV.B       @(24:12,R4),R6; (mrcv)->prid1
    000004B6 E270                   MOV         #112,R2    ; H'00000070
    000004B8 3622                   CMP/HS      R2,R6
    000004BA 8902                   BT          L127
             tskcmd.c       1054      {
             tskcmd.c       1055          TpAnalyze( mrcv );
    000004BC D316                   MOV.L       L1359+84,R3; _TpAnalyze
    000004BE 432B                   JMP         @R3
    000004C0 0009                   NOP
    000004C2              L127:
    000004C2 006B                   RTS/N
    000004C4              L1359:
    000004C4 <00000000>             .DATA.L     __$TpRspLGIN1
    000004C8 <00000000>             .DATA.L     __$BkP10
    000004CC <00000000>             .DATA.L     _eep_GetOptionInfo
    000004D0 <00000000>             .DATA.L     __$TpRspOPTIF
    000004D4 <00000000>             .DATA.L     __$BkPrData
    000004D8 <00000000>             .DATA.L     __$pProcDat
    000004DC <00000000>             .DATA.L     _eep_GetProtocolData
    000004E0 <00000000>             .DATA.L     __$pProcAdr
    000004E4 <00000000>             .DATA.L     _eep_GetProtocol
    000004E8 <00000000>             .DATA.L     __$StaQgProcList
    000004EC <00000000>             .DATA.L     __$QgProcList
    000004F0 <00000000>             .DATA.L     _STRTBL_MSG
    000004F4 <00000000>             .DATA.L     __$stCtl
    000004F8 <00000000>             .DATA.L     _memcpy
    000004FC <00000094>             .DATA.L     H'00000094+__$stCtl
    00000500 <00000000>             .DATA.L     __$ClrDevice
    00000504 <00000000>             .DATA.L     __$GetDeviceStatus
    00000508 <00000000>             .DATA.L     _motor_STATUS
    0000050C <00000000>             .DATA.L     _memset
    00000510 <00000000>             .DATA.L     _BitSet_INT
    00000514 <0000009C>             .DATA.L     H'0000009C+__$stCtl
    00000518 <00000000>             .DATA.L     _TpAnalyze
             tskcmd.c       1056      }
             tskcmd.c       1057      else
             tskcmd.c       1058      {
             tskcmd.c       1059          //Error
             tskcmd.c       1060      }
             tskcmd.c       1061    }
             tskcmd.c       1062    
             tskcmd.c       1063    /***********************************************************************
             tskcmd.c       1064    * 
             tskcmd.c       1065    * [概要]  
             tskcmd.c       1066    * [引数]  メッセージデータ
             tskcmd.c       1067    * [戻値]  −
             tskcmd.c       1068    * 
             tskcmd.c       1069    ***********************************************************************/
             tskcmd.c       1070    static void PunitRcvMsg( T_CMD_MSG* mrcv )
    0000051C              __$PunitRcvMsg:                  ; function: __$PunitRcvMsg
                                                           ; frame size=56
    0000051C 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1071    {
             tskcmd.c       1072      UB msg;
             tskcmd.c       1073      UB nzl;
             tskcmd.c       1074      UB smp;
             tskcmd.c       1075      unsigned char  result_h = CLR;
             tskcmd.c       1076      unsigned char  result_l = CLR;
             tskcmd.c       1077      ER result   = E_SUCCESS;
             tskcmd.c       1078      
             tskcmd.c       1079      msg  = mrcv->msgdata.msgid;
    0000051E 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
             tskcmd.c       1080      
             tskcmd.c       1081      switch( msg )
    00000522 8820                   CMP/EQ      #32,R0
    00000524 8D02                   BT/S        L142
    00000526 6E03                   MOV         R0,R14
    00000528 881F                   CMP/EQ      #31,R0
    0000052A 8B35                   BF          L143
    0000052C              L142:
             tskcmd.c       1082      {
             tskcmd.c       1083          case ID_MSG_PRESSTAN_HS :
             tskcmd.c       1084          case ID_MSG_PRESSREN_HS :
             tskcmd.c       1085              memcpy( &psns.now[0], &mrcv->msgdata.data[0], sizeof(ST_PSNS) );
    0000052C 7424                   ADD         #36,R4
    0000052E 6543                   MOV         R4,R5
    00000530 D49B                   MOV.L       L1360+2,R4 ; H'00000022+__$psns
    00000532 0600015A               MOVI20      #346,R6    ; H'0000015A
    00000536 D29B                   MOV.L       L1360+6,R2 ; _memcpy
    00000538 424B                   JSR/N       @R2
             tskcmd.c       1086    
             tskcmd.c       1087              // 応答メッセージ作成
             tskcmd.c       1088              CmdMakeResponsePsns( msg,                                           // message
             tskcmd.c       1089                                  STRTBL_MSG[msg],                                // コマンド文字列
             tskcmd.c       1090                                  result,                                         // 
             tskcmd.c       1091                                  psns.now[0],                                    // 
             tskcmd.c       1092                                  psns.now[1],                                    // 
             tskcmd.c       1093                                  psns.now[2],                                    // 
             tskcmd.c       1094                                  psns.now[3],                                    // 
             tskcmd.c       1095                                  psns.now[4],                                    // 
             tskcmd.c       1096                                  psns.now[5],                                    // 
             tskcmd.c       1097                                  psns.now[6],                                    // 
             tskcmd.c       1098                                  psns.now[7],                                    // 
             tskcmd.c       1099                                  psns.now[8],                                    // 
             tskcmd.c       1100                                  psns.now[9],                                    // 
             tskcmd.c       1101                                  psns.now[10],                                   // 
             tskcmd.c       1102                                  psns.now[11],                                   // 
             tskcmd.c       1103                                  psns.now[12]);                                  // 
    0000053A D599                   MOV.L       L1360+2,R5 ; H'00000022+__$psns
    0000053C 3051900C               MOVU.W      @(24,R5),R0; psns.now[]
    00000540 2F06                   MOV.L       R0,@-R15
    00000542 3051900B               MOVU.W      @(22,R5),R0; psns.now[]
    00000546 2F06                   MOV.L       R0,@-R15
    00000548 3051900A               MOVU.W      @(20,R5),R0; psns.now[]
    0000054C 2F06                   MOV.L       R0,@-R15
    0000054E 30519009               MOVU.W      @(18,R5),R0; psns.now[]
    00000552 2F06                   MOV.L       R0,@-R15
    00000554 30519008               MOVU.W      @(16,R5),R0; psns.now[]
    00000558 2F06                   MOV.L       R0,@-R15
    0000055A 30519007               MOVU.W      @(14,R5),R0; psns.now[]
    0000055E 2F06                   MOV.L       R0,@-R15
    00000560 30519006               MOVU.W      @(12,R5),R0; psns.now[]
    00000564 2F06                   MOV.L       R0,@-R15
    00000566 30519005               MOVU.W      @(10,R5),R0; psns.now[]
    0000056A 2F06                   MOV.L       R0,@-R15
    0000056C 30519004               MOVU.W      @(8,R5),R0 ; psns.now[]
    00000570 2F06                   MOV.L       R0,@-R15
    00000572 30519003               MOVU.W      @(6,R5),R0 ; psns.now[]
    00000576 2F06                   MOV.L       R0,@-R15
    00000578 30519002               MOVU.W      @(4,R5),R0 ; psns.now[]
    0000057C 2F06                   MOV.L       R0,@-R15
    0000057E 30519001               MOVU.W      @(2,R5),R0 ; psns.now[]
    00000582 2F06                   MOV.L       R0,@-R15
    00000584 60E3                   MOV         R14,R0
    00000586 D188                   MOV.L       L1360+10,R1; _STRTBL_MSG
    00000588 4008                   SHLL2       R0
    0000058A 6751                   MOV.W       @R5,R7     ; psns.now[]
    0000058C 051E                   MOV.L       @(R0,R1),R5; STRTBL_MSG[]
    0000058E E600                   MOV         #0,R6      ; H'00000000
    00000590 B168                   BSR         _CmdMakeResponsePsns
    00000592 64E3                   MOV         R14,R4
    00000594 A039                   BRA         L144
    00000596 7F30                   ADD         #48,R15
    00000598              L143:
    00000598 8822                   CMP/EQ      #34,R0
    0000059A 8905                   BT          L146
    0000059C 881D                   CMP/EQ      #29,R0
    0000059E 8903                   BT          L146
    000005A0 881E                   CMP/EQ      #30,R0
    000005A2 8901                   BT          L146
    000005A4 8821                   CMP/EQ      #33,R0
    000005A6 8B1C                   BF          L149
    000005A8              L146:
             tskcmd.c       1104              break;
             tskcmd.c       1105    //
             tskcmd.c       1106    // 本メッセージは、仕様上受信ないのでコメント
             tskcmd.c       1107    //        case ID_MSG_PRESSREN:
             tskcmd.c       1108    //        case ID_MSG_PRESSTAN:
             tskcmd.c       1109    // 
             tskcmd.c       1110    //            memcpy( &psns.now[0], &mrcv->msgdata.data[0], sizeof(ST_PSNS) );
             tskcmd.c       1111    // 
             tskcmd.c       1112    //            for( nzl = 0; nzl < NOZZLE_MAX ; nzl++ )
             tskcmd.c       1113    //            {
             tskcmd.c       1114    //                for( smp = 0; smp < (PRESSMP_MAX-1) ; smp++ )
             tskcmd.c       1115    //                {
             tskcmd.c       1116    //                    psns.dat[nzl][smp+1] = psns.dat[nzl][smp];
             tskcmd.c       1117    //                }
             tskcmd.c       1118    //                psns.dat[nzl][0] = psns.now[nzl];
             tskcmd.c       1119    //            }
             tskcmd.c       1120    //            QgProcList( mrcv );
             tskcmd.c       1121    // 
             tskcmd.c       1122    //            break;
             tskcmd.c       1123    //
             tskcmd.c       1124    
             tskcmd.c       1125    //        case ID_MSG_VALVEOUT_HS :
             tskcmd.c       1126    //            memcpy( &vout.target, &mrcv->msgdata.data[0],      sizeof(ST_VOUT) );
             tskcmd.c       1127    //            memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], sizeof(ST_VOUT) );
             tskcmd.c       1128    //            CmdSendResponse( &stCtl );
             tskcmd.c       1129    //            break;
             tskcmd.c       1130    
             tskcmd.c       1131    
             tskcmd.c       1132          case ID_MSG_VALVEOUT_HS :
             tskcmd.c       1133          case ID_MSG_VALVEINI_HS:
             tskcmd.c       1134          case ID_MSG_PRESSINI_HS:
             tskcmd.c       1135          case ID_MSG_PRESSCAN_HS:
             tskcmd.c       1136    //            memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], mrcv->msgdata.siz );
             tskcmd.c       1137              result_h = mrcv->msgdata.data[0];
             tskcmd.c       1138              result_l = mrcv->msgdata.data[1];
             tskcmd.c       1139              result = result_h * 0x0100 + result_l;
             tskcmd.c       1140          
             tskcmd.c       1141              // 応答メッセージ作成
             tskcmd.c       1142              CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c       1143                                  PARAM2,                                         // パラメータ数
             tskcmd.c       1144                                  STRTBL_MSG[msg],                                // コマンド文字列
             tskcmd.c       1145                                  result,                                         // エラーコード
             tskcmd.c       1146    
             tskcmd.c       1147                                  0,                                              // 
             tskcmd.c       1148                                  0,                                              // 
             tskcmd.c       1149                                  0,                                              // 
             tskcmd.c       1150                                  0,                                              // 
             tskcmd.c       1151                                  0,                                              // 
             tskcmd.c       1152    
             tskcmd.c       1153                                  0,                                              // 
             tskcmd.c       1154                                  0,                                              // 
             tskcmd.c       1155                                  0,                                              // 
             tskcmd.c       1156                                  0,                                              // 
             tskcmd.c       1157                                  0                                               // 
             tskcmd.c       1158                              );
    000005A8 E100                   MOV         #0,R1      ; H'00000000
    000005AA 2F16                   MOV.L       R1,@-R15
    000005AC 2F16                   MOV.L       R1,@-R15
    000005AE 2F16                   MOV.L       R1,@-R15
    000005B0 2F16                   MOV.L       R1,@-R15
    000005B2 2F16                   MOV.L       R1,@-R15
    000005B4 2F16                   MOV.L       R1,@-R15
    000005B6 2F16                   MOV.L       R1,@-R15
    000005B8 2F16                   MOV.L       R1,@-R15
    000005BA 2F16                   MOV.L       R1,@-R15
    000005BC 2F16                   MOV.L       R1,@-R15
    000005BE 4E08                   SHLL2       R14
    000005C0 37418024               MOVU.B      @(36,R4),R7; mrcv->data[]
    000005C4 32418025               MOVU.B      @(37,R4),R2; mrcv->data[]
    000005C8 4718                   SHLL8       R7
    000005CA E502                   MOV         #2,R5      ; H'00000002
    000005CC 372C                   ADD         R2,R7
    000005CE 60E3                   MOV         R14,R0
    000005D0 D275                   MOV.L       L1360+10,R2; _STRTBL_MSG
    000005D2 D476                   MOV.L       L1360+14,R4; __$stCtl
    000005D4 B1F6                   BSR         _CmdMakeResponse
    000005D6 062E                   MOV.L       @(R0,R2),R6; STRTBL_MSG[]
    000005D8 7F28                   ADD         #40,R15
             tskcmd.c       1159          // 応答メッセージ作成
             tskcmd.c       1160    //        CmdMakeResponse(    &msgdat,
             tskcmd.c       1161    //                            PARAM7,                                     // パラメータ数
             tskcmd.c       1162    //                            STRTBL_MSG[msg],                            // コマンド文字列
             tskcmd.c       1163    //                            result,                                     // エラーコード
             tskcmd.c       1164    //
             tskcmd.c       1165    //                            (INT)mm,                                    // モータ１番号
             tskcmd.c       1166    //                            sts.pos,                                    // パルスカウント１
             tskcmd.c       1167    //                            sts.enc,                                    // エンコーダ１
             tskcmd.c       1168    //                            sts.cw_limit,                               // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1169    //                            sts.ccw_limit,                              // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1170    //
             tskcmd.c       1171    //                            0,                                          // モータ２番号
             tskcmd.c       1172    //                            0,                                          // パルスカウント２
             tskcmd.c       1173    //                            0,                                          // エンコーダ２
             tskcmd.c       1174    //                            0,                                          // CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1175    //                            0                                           // CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       1176    //                        );
             tskcmd.c       1177    
             tskcmd.c       1178          
             tskcmd.c       1179              CmdSendResponse( &stCtl );
    000005DA D474                   MOV.L       L1360+14,R4; __$stCtl
    000005DC 4EF4                   MOVMU.L     @R15+,R14
    000005DE A0BB                   BRA         _CmdSendResponse
    000005E0 0009                   NOP
    000005E2              L149:
    000005E2 E696                   MOV         #-106,R6   ; H'FFFFFF96
    000005E4 666C                   EXTU.B      R6,R6
    000005E6 3E60                   CMP/EQ      R6,R14
    000005E8 890B                   BT          L151
    000005EA E697                   MOV         #-105,R6   ; H'FFFFFF97
    000005EC 666C                   EXTU.B      R6,R6
    000005EE 3E60                   CMP/EQ      R6,R14
    000005F0 8907                   BT          L151
    000005F2 E69A                   MOV         #-102,R6   ; H'FFFFFF9A
    000005F4 666C                   EXTU.B      R6,R6
    000005F6 3E60                   CMP/EQ      R6,R14
    000005F8 8903                   BT          L151
    000005FA E69B                   MOV         #-101,R6   ; H'FFFFFF9B
    000005FC 666C                   EXTU.B      R6,R6
    000005FE 3E60                   CMP/EQ      R6,R14
    00000600 8B03                   BF          L144
    00000602              L151:
             tskcmd.c       1180              break;
             tskcmd.c       1181    
             tskcmd.c       1182    
             tskcmd.c       1183          case ID_MSG_VALVEINI:
             tskcmd.c       1184          case ID_MSG_PRESSINI:
             tskcmd.c       1185          case ID_MSG_PRESSCAN:
             tskcmd.c       1186          case ID_MSG_VALVEOUT:
             tskcmd.c       1187              QgProcList( mrcv );
    00000602 4EF4                   MOVMU.L     @R15+,R14
    00000604 D36A                   MOV.L       L1360+18,R3; __$QgProcList
    00000606 432B                   JMP         @R3
    00000608 0009                   NOP
    0000060A              L144:
    0000060A 4EF4                   MOVMU.L     @R15+,R14
    0000060C 006B                   RTS/N
             tskcmd.c       1188              break;
             tskcmd.c       1189    
             tskcmd.c       1190          default:
             tskcmd.c       1191              break;
             tskcmd.c       1192      }
             tskcmd.c       1193    }
             tskcmd.c       1194    /**********************************************************************
             tskcmd.c       1195    * 
             tskcmd.c       1196    * [概要]  
             tskcmd.c       1197    * [引数]  メッセージデータ
             tskcmd.c       1198    * [戻値]  −
             tskcmd.c       1199    * 
             tskcmd.c       1200    ***********************************************************************/
             tskcmd.c       1201    static void TmpCntRcvMsg( T_CMD_MSG* mrcv )
    0000060E              __$TmpCntRcvMsg:                 ; function: __$TmpCntRcvMsg
                                                           ; frame size=4
    0000060E 4F22                   STS.L       PR,@-R15
             tskcmd.c       1202    {
             tskcmd.c       1203      UB msg;
             tskcmd.c       1204    
             tskcmd.c       1205      msg  = mrcv->msgdata.msgid;
             tskcmd.c       1206      
             tskcmd.c       1207      switch( msg )
    00000610 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
    00000614 E59D                   MOV         #-99,R5    ; H'FFFFFF9D
    00000616 655C                   EXTU.B      R5,R5
    00000618 3050                   CMP/EQ      R5,R0
    0000061A 8907                   BT          L163
    0000061C E59E                   MOV         #-98,R5    ; H'FFFFFF9E
    0000061E 655C                   EXTU.B      R5,R5
    00000620 3050                   CMP/EQ      R5,R0
    00000622 8903                   BT          L163
    00000624 E59F                   MOV         #-97,R5    ; H'FFFFFF9F
    00000626 655C                   EXTU.B      R5,R5
    00000628 3050                   CMP/EQ      R5,R0
    0000062A 8B02                   BF          L165
    0000062C              L163:
             tskcmd.c       1208      {
             tskcmd.c       1209          case ID_MSG_TMPSET :
             tskcmd.c       1210          case ID_MSG_TMPGET :
             tskcmd.c       1211          case ID_MSG_TMPGETR :
             tskcmd.c       1212              QgProcList( mrcv );
    0000062C D360                   MOV.L       L1360+18,R3; __$QgProcList
    0000062E 432B                   JMP         @R3
    00000630 4F26                   LDS.L       @R15+,PR
    00000632              L165:
    00000632 881A                   CMP/EQ      #26,R0
    00000634 8901                   BT          L168
    00000636 881B                   CMP/EQ      #27,R0
    00000638 8B0A                   BF          L166
    0000063A              L168:
             tskcmd.c       1213              break;
             tskcmd.c       1214    
             tskcmd.c       1215          case ID_MSG_TMPSET_HS :
             tskcmd.c       1216          case ID_MSG_TMPGET_HS :
             tskcmd.c       1217    //            memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], stCtl.rsp.siz ); // レスポンスデータ取得
             tskcmd.c       1218              stCtl.rsp.siz = mrcv->msgdata.siz;
    0000063A 5648                   MOV.L       @(32,R4),R6; (mrcv)->siz
             tskcmd.c       1219              memcpy( &stCtl.rsp.buf[0], &mrcv->msgdata.data[0], mrcv->msgdata.siz ); // レスポンスデータ取得
    0000063C 7424                   ADD         #36,R4
    0000063E D15D                   MOV.L       L1360+22,R1; H'00000094+__$stCtl
    00000640 6543                   MOV         R4,R5
    00000642 D45D                   MOV.L       L1360+26,R4; H'0000009C+__$stCtl
    00000644 D257                   MOV.L       L1360+6,R2 ; _memcpy
    00000646 420B                   JSR         @R2
    00000648 2162                   MOV.L       R6,@R1     ; stCtl.rsp.siz
             tskcmd.c       1220              CmdSendResponse( &stCtl );                                          // 応答メッセージ送信
    0000064A D458                   MOV.L       L1360+14,R4; __$stCtl
    0000064C A084                   BRA         _CmdSendResponse
    0000064E 4F26                   LDS.L       @R15+,PR
    00000650              L166:
    00000650 4F26                   LDS.L       @R15+,PR
    00000652 006B                   RTS/N
             tskcmd.c       1221              break;
             tskcmd.c       1222    
             tskcmd.c       1223    
             tskcmd.c       1224          default:
             tskcmd.c       1225              break;
             tskcmd.c       1226      }
             tskcmd.c       1227    }
             tskcmd.c       1228    /***********************************************************************
             tskcmd.c       1229    * 
             tskcmd.c       1230    * [概要]  コマンドリクエスト受信監視用アラームハンドラ
             tskcmd.c       1231    * [引数]  
             tskcmd.c       1232    * [戻値]  −
             tskcmd.c       1233    * 
             tskcmd.c       1234    ***********************************************************************/
             tskcmd.c       1235    void AlmComR0Ack( VP_INT exinf )
    00000654              _AlmComR0Ack:                    ; function: AlmComR0Ack
                                                           ; frame size=8
    00000654 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1236    {
             tskcmd.c       1237       int save_i;
             tskcmd.c       1238      exinf = 0;
             tskcmd.c       1239    
             tskcmd.c       1240    #if 0// 2022.03.02
             tskcmd.c       1241      stp_alm( ID_ALM_R0ACK );                                                // 
             tskcmd.c       1242    #endif
             tskcmd.c       1243        // 割込み禁止処理
             tskcmd.c       1244        save_i = get_imask();
    00000656 0002                   STC         SR,R0
    00000658 4009                   SHLR2       R0
    0000065A 4009                   SHLR2       R0
    0000065C C90F                   AND         #15,R0
    0000065E 6E03                   MOV         R0,R14
             tskcmd.c       1245      set_imask(0x0f);
    00000660 0002                   STC         SR,R0
    00000662 07F0FF0F               MOVI20      #-241,R7   ; H'FFFFFF0F
    00000666 2079                   AND         R7,R0
    00000668 CBF0                   OR          #240,R0
    0000066A 400E                   LDC         R0,SR
             tskcmd.c       1246    
             tskcmd.c       1247      if( stCtl.rsp.rty > RTY_OVER ) 
    0000066C E203                   MOV         #3,R2      ; H'00000003
    0000066E D44F                   MOV.L       L1360+14,R4; __$stCtl
    00000670 36416026               MOV.L       @(152:12,R4),R6; stCtl.rsp.rty
    00000674 3627                   CMP/GT      R2,R6
    00000676 8B06                   BF          L171
    00000678 E647                   MOV         #71,R6     ; H'00000047
    0000067A E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1248      {
             tskcmd.c       1249          // リトライオーバー
             tskcmd.c       1250          
             tskcmd.c       1251          
             tskcmd.c       1252          // 制御データ初期化
             tskcmd.c       1253          memset( &stCtl,  CLR,  sizeof( stCtl ) );
    0000067C D24F                   MOV.L       L1360+30,R2; _memset
    0000067E 420B                   JSR         @R2
    00000680 4608                   SHLL2       R6
    00000682 A002                   BRA         L172
    00000684 0009                   NOP
    00000686              L171:
             tskcmd.c       1254      }
             tskcmd.c       1255      else
             tskcmd.c       1256      {
             tskcmd.c       1257          // 再送
             tskcmd.c       1258          CmdSendResponse( &stCtl );
    00000686 B067                   BSR         _CmdSendResponse
    00000688 0009                   NOP
    0000068A              L172:
             tskcmd.c       1259      }
             tskcmd.c       1260      set_imask(save_i);
    0000068A 60E3                   MOV         R14,R0
    0000068C C90F                   AND         #15,R0
    0000068E 4008                   SHLL2       R0
    00000690 4008                   SHLL2       R0
    00000692 0202                   STC         SR,R2
    00000694 07F0FF0F               MOVI20      #-241,R7   ; H'FFFFFF0F
    00000698 2279                   AND         R7,R2
    0000069A 220B                   OR          R0,R2
    0000069C 420E                   LDC         R2,SR
    0000069E 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1261    }
    000006A0 006B                   RTS/N
             tskcmd.c       1262    /***********************************************************************
             tskcmd.c       1263    * 
             tskcmd.c       1264    * [概要]  バーコードレスポンスタイムアウト
             tskcmd.c       1265    *           一定時間経過してもバーコードからレスポンスがない場合のタイム
             tskcmd.c       1266    *           アウト処理
             tskcmd.c       1267    * [引数]  
             tskcmd.c       1268    * [戻値]  −
             tskcmd.c       1269    * 
             tskcmd.c       1270    ***********************************************************************/
             tskcmd.c       1271    void AlmCom2RspTmo( VP_INT exinf )
    000006A2              _AlmCom2RspTmo:                  ; function: AlmCom2RspTmo
                                                           ; frame size=0
             tskcmd.c       1272    {
             tskcmd.c       1273    //    RelMpf( ID_MPF_CMD, (VP)msg );// メモリ解放
             tskcmd.c       1274    }
    000006A2 006B                   RTS/N
             tskcmd.c       1275    
             tskcmd.c       1276    /***********************************************************************
             tskcmd.c       1277    * 
             tskcmd.c       1278    * [概要]  コマンドの解析
             tskcmd.c       1279    * [引数]  data:コマンドリクエスト電文
             tskcmd.c       1280    * [戻値]  −
             tskcmd.c       1281    * 
             tskcmd.c       1282    ***********************************************************************/
             tskcmd.c       1283    static void CmdAnalyze( T_CMD_MSG* mrcv )
    000006A4              __$CmdAnalyze:                   ; function: __$CmdAnalyze
                                                           ; frame size=16
    000006A4 4CF0                   MOVMU.L     R12,@-R15
    000006A6 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       1284    {
             tskcmd.c       1285      UB          msgid;
             tskcmd.c       1286      UB          anum;
             tskcmd.c       1287    
             tskcmd.c       1288      // メッセージＩＤ取得
             tskcmd.c       1289      msgid = mrcv->msgdata.msgid;
    000006A8 6D43                   MOV         R4,R13
    000006AA 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
             tskcmd.c       1290      memset( &RecvData,    CLR,  sizeof( RecvData ) );
    000006AE D444                   MOV.L       L1360+34,R4; __$RecvData
    000006B0 D142                   MOV.L       L1360+30,R1; _memset
    000006B2 410B                   JSR         @R1
    000006B4 E500                   MOV         #0,R5      ; H'00000000
    000006B6 E664                   MOV         #100,R6    ; H'00000064
    000006B8 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1291      memset( &RecvArgs,    CLR,  sizeof( RecvArgs ) );
    000006BA DC42                   MOV.L       L1360+38,R12; __$RecvArgs
    000006BC 4608                   SHLL2       R6
    000006BE D73F                   MOV.L       L1360+30,R7; _memset
    000006C0 470B                   JSR         @R7
    000006C2 64C3                   MOV         R12,R4
             tskcmd.c       1292      
             tskcmd.c       1293      if(
    000006C4 60E3                   MOV         R14,R0
    000006C6 8824                   CMP/EQ      #36,R0
    000006C8 8918                   BT          L176
    000006CA 8825                   CMP/EQ      #37,R0
    000006CC 8916                   BT          L176
    000006CE 8826                   CMP/EQ      #38,R0
    000006D0 8914                   BT          L176
    000006D2 8827                   CMP/EQ      #39,R0
    000006D4 8912                   BT          L176
    000006D6 8828                   CMP/EQ      #40,R0
    000006D8 8910                   BT          L176
    000006DA 8829                   CMP/EQ      #41,R0
    000006DC 890E                   BT          L176
             tskcmd.c       1294          ( msgid == ID_MSG_IMPPDAT )||
             tskcmd.c       1295          ( msgid == ID_MSG_IMPSPED )||
             tskcmd.c       1296          ( msgid == ID_MSG_IMPPOSI )||
             tskcmd.c       1297          ( msgid == ID_MSG_IMPOPTN )||
             tskcmd.c       1298          ( msgid == ID_MSG_EXPRUNL )||
             tskcmd.c       1299          ( msgid == ID_MSG_EXPCOML )
             tskcmd.c       1300      )
             tskcmd.c       1301      {
             tskcmd.c       1302          // ImpExpRcvDataは、受信処理で既に大文字しているので不要。
             tskcmd.c       1303          anum = SplitOnly( &ImpExpRcvData[0], RecvArgs );
             tskcmd.c       1304      }
             tskcmd.c       1305      else
             tskcmd.c       1306      {
             tskcmd.c       1307          memcpy( &RecvData[0],     &mrcv->msgdata.data[0],CMD_BUFSIZ );      // コマンド電文コピー
    000006DE 65D3                   MOV         R13,R5
    000006E0 7524                   ADD         #36,R5
    000006E2 D437                   MOV.L       L1360+34,R4; __$RecvData
    000006E4 D12F                   MOV.L       L1360+6,R1 ; _memcpy
    000006E6 410B                   JSR         @R1
    000006E8 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       1308          ToUpper( (char*)&RecvData );                                        // 大文字
    000006EA D435                   MOV.L       L1360+34,R4; __$RecvData
    000006EC D636                   MOV.L       L1360+42,R6; _ToUpper
    000006EE 464B                   JSR/N       @R6
             tskcmd.c       1309          anum = Split( &RecvData[0], RecvArgs );                             // 分解 ＆ パラメータ数取得
    000006F0 D433                   MOV.L       L1360+34,R4; __$RecvData
    000006F2 D736                   MOV.L       L1360+46,R7; _Split
    000006F4 470B                   JSR         @R7
    000006F6 65C3                   MOV         R12,R5
    000006F8 A004                   BRA         L182
    000006FA 0009                   NOP
    000006FC              L176:
    000006FC D434                   MOV.L       L1360+50,R4; __$ImpExpRcvData
    000006FE D235                   MOV.L       L1360+54,R2; _SplitOnly
    00000700 420B                   JSR         @R2
    00000702 65C3                   MOV         R12,R5
    00000704              L182:
    00000704 D234                   MOV.L       L1360+58,R2; __$CmdFuncTbl
    00000706 4E08                   SHLL2       R14
             tskcmd.c       1310      }
             tskcmd.c       1311      
             tskcmd.c       1312      // コールファンクション
             tskcmd.c       1313      (*CmdFuncTbl[msgid])( mrcv, anum, RecvArgs  );
    00000708 6503                   MOV         R0,R5
    0000070A 60E3                   MOV         R14,R0
    0000070C 012E                   MOV.L       @(R0,R2),R1; CmdFuncTbl[]
    0000070E 66C3                   MOV         R12,R6
    00000710 64D3                   MOV         R13,R4
    00000712 4CF4                   MOVMU.L     @R15+,R12
    00000714 412B                   JMP         @R1
    00000716 0009                   NOP
             tskcmd.c       1314    }
             tskcmd.c       1315    
             tskcmd.c       1316    /***********************************************************************
             tskcmd.c       1317    * 
             tskcmd.c       1318    * [概要]  動作終了通知
             tskcmd.c       1319    * [引数]  −
             tskcmd.c       1320    * [戻値]  −
             tskcmd.c       1321    * 
             tskcmd.c       1322    ***********************************************************************/
             tskcmd.c       1323    void CmdEndResponse( ID txkid, UB prid1, UB bcid, UB msgid, UB inf1, UB inf2, ST_CNTLDATA* cntl )
    00000718              _CmdEndResponse:                 ; function: CmdEndResponse
                                                           ; frame size=36
    00000718 4DF0                   MOVMU.L     R13,@-R15
    0000071A 52F5                   MOV.L       @(20,R15),R2
             tskcmd.c       1324    {
             tskcmd.c       1325      mbx_send    (
             tskcmd.c       1326                      txkid,                                              // ﾀｽｸID
             tskcmd.c       1327                      ID_MPF_CMD,                                         // ﾌﾟｰﾙID
             tskcmd.c       1328                      ID_MBX_CMD,                                         // MBOXID
             tskcmd.c       1329                      prid1,                                              // PROCID
             tskcmd.c       1330                      bcid,                                               // BCID
             tskcmd.c       1331                      msgid,                                              // ﾒｯｾｰｼﾞID
             tskcmd.c       1332                      inf1,                                               // 情報1
             tskcmd.c       1333                      inf2,                                               // 情報2
             tskcmd.c       1334                      &cntl->rsp.buf[0],                                  // DATA
             tskcmd.c       1335                      cntl->rsp.siz                                       // DATAサイズ
             tskcmd.c       1336                  );
    0000071C 6E43                   MOV         R4,R14
    0000071E 6153                   MOV         R5,R1
    00000720 55F3                   MOV.L       @(12,R15),R5
    00000722 3D216025               MOV.L       @(148:12,R2),R13; (cntl)->siz
    00000726 6463                   MOV         R6,R4
    00000728 56F4                   MOV.L       @(16,R15),R6
    0000072A 2FD6                   MOV.L       R13,@-R15
    0000072C ED9C                   MOV         #-100,R13  ; H'FFFFFF9C
    0000072E 6DDC                   EXTU.B      R13,R13
    00000730 53F6                   MOV.L       @(24,R15),R3
    00000732 33DC                   ADD         R13,R3
    00000734 2F36                   MOV.L       R3,@-R15
    00000736 6D6C                   EXTU.B      R6,R13
    00000738 2FD6                   MOV.L       R13,@-R15
    0000073A 665C                   EXTU.B      R5,R6
    0000073C 2F66                   MOV.L       R6,@-R15
    0000073E 627C                   EXTU.B      R7,R2
    00000740 2F26                   MOV.L       R2,@-R15
    00000742 674C                   EXTU.B      R4,R7
    00000744 2F76                   MOV.L       R7,@-R15
    00000746 671C                   EXTU.B      R1,R7
    00000748 E605                   MOV         #5,R6      ; H'00000005
    0000074A E504                   MOV         #4,R5      ; H'00000004
    0000074C D123                   MOV.L       L1360+62,R1; _mbx_send
    0000074E 410B                   JSR         @R1
    00000750 64E3                   MOV         R14,R4
    00000752 7F18                   ADD         #24,R15
    00000754 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       1337    }
    00000756 006B                   RTS/N
             tskcmd.c       1338    /***********************************************************************
             tskcmd.c       1339    * 
             tskcmd.c       1340    * [概要]  コマンド応答の送信
             tskcmd.c       1341    * [引数]  −
             tskcmd.c       1342    * [戻値]  −
             tskcmd.c       1343    * 
             tskcmd.c       1344    ***********************************************************************/
             tskcmd.c       1345    void CmdSendResponse( ST_CNTLDATA* cntl )
    00000758              _CmdSendResponse:                ; function: CmdSendResponse
                                                           ; frame size=8
    00000758 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1346    {
             tskcmd.c       1347      // レスポンス送信
             tskcmd.c       1348      SendResponse( cntl );
    0000075A B007                   BSR         _SendResponse
    0000075C 6E43                   MOV         R4,R14
             tskcmd.c       1349      cntl->rsp.rty++;
    0000075E E098                   MOV         #-104,R0   ; H'FFFFFF98
    00000760 600C                   EXTU.B      R0,R0
    00000762 02EE                   MOV.L       @(R0,R14),R2; (cntl)->rty
    00000764 7201                   ADD         #1,R2
    00000766 0E26                   MOV.L       R2,@(R0,R14); (cntl)->rty
    00000768 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1350    }
    0000076A 006B                   RTS/N
             tskcmd.c       1351    /***********************************************************************
             tskcmd.c       1352    * 
             tskcmd.c       1353    * [概要]  レスポンス送信
             tskcmd.c       1354    * [引数]  −
             tskcmd.c       1355    * [戻値]  −
             tskcmd.c       1356    * 
             tskcmd.c       1357    ***********************************************************************/
             tskcmd.c       1358    void SendResponse( ST_CNTLDATA* cntl )
    0000076C              _SendResponse:                   ; function: SendResponse
                                                           ; frame size=28
    0000076C 4F22                   STS.L       PR,@-R15
             tskcmd.c       1359    {
             tskcmd.c       1360      //( ﾀｽｸID, ﾒﾓﾘﾌﾟｰﾙID, ﾒｯｾｰｼﾞBOXID,ﾒｯｾｰｼﾞID, 状態, DATA, DATAサイズ)
             tskcmd.c       1361      mbx_send    (
             tskcmd.c       1362                      ID_TSK_CMD,               // ID tskid,    ﾀｽｸID
             tskcmd.c       1363                      ID_MPF_TX0,               // ID mpfid,    ﾌﾟｰﾙID
             tskcmd.c       1364                      ID_MBX_TX0,               // ID mbxid,    MBOXID
             tskcmd.c       1365                      NO_DATA,                  // UB prid1,    PROCID
             tskcmd.c       1366                      NO_DATA,                  // UB bcid,     BCID
             tskcmd.c       1367                      ID_MSG_CMD,               // UB msgid,    ﾒｯｾｰｼﾞID
             tskcmd.c       1368                      0,                        // UB sts,      情報1
             tskcmd.c       1369                      0,                        // UB sts2,     情報2
             tskcmd.c       1370                      &cntl->rsp.buf[0],        // UB* data,    DATA
             tskcmd.c       1371                      cntl->rsp.siz             // INT siz      DATAサイズ
             tskcmd.c       1372                  );
    0000076E 31416025               MOV.L       @(148:12,R4),R1; (cntl)->siz
    00000772 2F16                   MOV.L       R1,@-R15
    00000774 E29C                   MOV         #-100,R2   ; H'FFFFFF9C
    00000776 622C                   EXTU.B      R2,R2
    00000778 342C                   ADD         R2,R4
    0000077A 2F46                   MOV.L       R4,@-R15
    0000077C E400                   MOV         #0,R4      ; H'00000000
    0000077E 2F46                   MOV.L       R4,@-R15
    00000780 2F46                   MOV.L       R4,@-R15
    00000782 E564                   MOV         #100,R5    ; H'00000064
    00000784 2F56                   MOV.L       R5,@-R15
    00000786 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00000788 611C                   EXTU.B      R1,R1
    0000078A 6713                   MOV         R1,R7
    0000078C 2F16                   MOV.L       R1,@-R15
    0000078E E602                   MOV         #2,R6      ; H'00000002
    00000790 E405                   MOV         #5,R4      ; H'00000005
    00000792 D212                   MOV.L       L1360+62,R2; _mbx_send
    00000794 420B                   JSR         @R2
    00000796 6563                   MOV         R6,R5
    00000798 7F18                   ADD         #24,R15
    0000079A 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1373    }
    0000079C 006B                   RTS/N
    0000079E              L1360:
    0000079E 00000002               .RES.W      1
    000007A0 <00000022>             .DATA.L     H'00000022+__$psns
    000007A4 <00000000>             .DATA.L     _memcpy
    000007A8 <00000000>             .DATA.L     _STRTBL_MSG
    000007AC <00000000>             .DATA.L     __$stCtl
    000007B0 <00000000>             .DATA.L     __$QgProcList
    000007B4 <00000094>             .DATA.L     H'00000094+__$stCtl
    000007B8 <0000009C>             .DATA.L     H'0000009C+__$stCtl
    000007BC <00000000>             .DATA.L     _memset
    000007C0 <00000000>             .DATA.L     __$RecvData
    000007C4 <00000000>             .DATA.L     __$RecvArgs
    000007C8 <00000000>             .DATA.L     _ToUpper
    000007CC <00000000>             .DATA.L     _Split
    000007D0 <00000000>             .DATA.L     __$ImpExpRcvData
    000007D4 <00000000>             .DATA.L     _SplitOnly
    000007D8 <00000000>             .DATA.L     __$CmdFuncTbl
    000007DC <00000000>             .DATA.L     _mbx_send
             tskcmd.c       1374    /***********************************************************************
             tskcmd.c       1375    * 
             tskcmd.c       1376    * [概要]  コマンド応答の送信
             tskcmd.c       1377    * [引数]  −
             tskcmd.c       1378    * [戻値]  −
             tskcmd.c       1379    * 
             tskcmd.c       1380    ***********************************************************************/
             tskcmd.c       1381    void CmdSendResponseEtc( ST_CNTLDATA* cntl, UB msgid )
    000007E0              _CmdSendResponseEtc:             ; function: CmdSendResponseEtc
                                                           ; frame size=32
    000007E0 4EF0                   MOVMU.L     R14,@-R15
    000007E2 31416025               MOV.L       @(148:12,R4),R1; (cntl)->siz
             tskcmd.c       1382    {
             tskcmd.c       1383      //( ﾀｽｸID, ﾒﾓﾘﾌﾟｰﾙID, ﾒｯｾｰｼﾞBOXID,ﾒｯｾｰｼﾞID, 状態, DATA, DATAサイズ)
             tskcmd.c       1384      mbx_send    (
             tskcmd.c       1385                      ID_TSK_CMD,               // ID tskid,    ﾀｽｸID
             tskcmd.c       1386                      ID_MPF_TX0,               // ID mpfid,    ﾌﾟｰﾙID
             tskcmd.c       1387                      ID_MBX_TX0,               // ID mbxid,    MBOXID
             tskcmd.c       1388                      NO_DATA,                  // UB prid1,    PROCID
             tskcmd.c       1389                      NO_DATA,                  // UB bcid,     BCID
             tskcmd.c       1390                      msgid,                    // UB msgid,    ﾒｯｾｰｼﾞID
             tskcmd.c       1391                      0,                        // UB sts,      情報1
             tskcmd.c       1392                      0,                        // UB sts2,     情報2
             tskcmd.c       1393                      &cntl->rsp.buf[0],        // UB* data,    DATA
             tskcmd.c       1394                      cntl->rsp.siz             // INT siz      DATAサイズ
             tskcmd.c       1395                  );
    000007E6 6E43                   MOV         R4,R14
    000007E8 2F16                   MOV.L       R1,@-R15
    000007EA E19C                   MOV         #-100,R1   ; H'FFFFFF9C
    000007EC 611C                   EXTU.B      R1,R1
    000007EE 341C                   ADD         R1,R4
    000007F0 2F46                   MOV.L       R4,@-R15
    000007F2 E400                   MOV         #0,R4      ; H'00000000
    000007F4 2F46                   MOV.L       R4,@-R15
    000007F6 2F46                   MOV.L       R4,@-R15
    000007F8 665C                   EXTU.B      R5,R6
    000007FA 2F66                   MOV.L       R6,@-R15
    000007FC E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    000007FE 611C                   EXTU.B      R1,R1
    00000800 6713                   MOV         R1,R7
    00000802 2F16                   MOV.L       R1,@-R15
    00000804 E602                   MOV         #2,R6      ; H'00000002
    00000806 E405                   MOV         #5,R4      ; H'00000005
    00000808 D264                   MOV.L       L1361+2,R2 ; _mbx_send
    0000080A 420B                   JSR         @R2
    0000080C 6563                   MOV         R6,R5
    0000080E 7F18                   ADD         #24,R15
             tskcmd.c       1396      
             tskcmd.c       1397      cntl->rsp.rty++;
    00000810 E098                   MOV         #-104,R0   ; H'FFFFFF98
    00000812 600C                   EXTU.B      R0,R0
    00000814 07EE                   MOV.L       @(R0,R14),R7; (cntl)->rty
    00000816 7701                   ADD         #1,R7
    00000818 0E76                   MOV.L       R7,@(R0,R14); (cntl)->rty
    0000081A 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1398    }
    0000081C 006B                   RTS/N
             tskcmd.c       1399    
             tskcmd.c       1400    /***********************************************************************
             tskcmd.c       1401    * 
             tskcmd.c       1402    * [概要]  コマンド応答の送信
             tskcmd.c       1403    * [引数]  −
             tskcmd.c       1404    * [戻値]  −
             tskcmd.c       1405    * 
             tskcmd.c       1406    ***********************************************************************/
             tskcmd.c       1407    void CmdSendResponse2( ST_CNTLDATA* cntl )
    0000081E              _CmdSendResponse2:               ; function: CmdSendResponse2
                                                           ; frame size=8
    0000081E 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       1408    {
             tskcmd.c       1409      // レスポンス送信
             tskcmd.c       1410      SendResponse2( cntl );
    00000820 B007                   BSR         _SendResponse2
    00000822 6E43                   MOV         R4,R14
             tskcmd.c       1411      cntl->rsp.rty++;
    00000824 E098                   MOV         #-104,R0   ; H'FFFFFF98
    00000826 600C                   EXTU.B      R0,R0
    00000828 02EE                   MOV.L       @(R0,R14),R2; (cntl)->rty
    0000082A 7201                   ADD         #1,R2
    0000082C 0E26                   MOV.L       R2,@(R0,R14); (cntl)->rty
    0000082E 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       1412    }
    00000830 006B                   RTS/N
             tskcmd.c       1413    /***********************************************************************
             tskcmd.c       1414    * 
             tskcmd.c       1415    * [概要]  レスポンス送信
             tskcmd.c       1416    * [引数]  −
             tskcmd.c       1417    * [戻値]  −
             tskcmd.c       1418    * 
             tskcmd.c       1419    ***********************************************************************/
             tskcmd.c       1420    void SendResponse2( ST_CNTLDATA* cntl )
    00000832              _SendResponse2:                  ; function: SendResponse2
                                                           ; frame size=28
    00000832 4F22                   STS.L       PR,@-R15
             tskcmd.c       1421    {
             tskcmd.c       1422      //( ﾀｽｸID, ﾒﾓﾘﾌﾟｰﾙID, ﾒｯｾｰｼﾞBOXID,ﾒｯｾｰｼﾞID, 状態, DATA, DATAサイズ)
             tskcmd.c       1423      mbx_send    (
             tskcmd.c       1424                      ID_TSK_CMD,
             tskcmd.c       1425                      ID_MPF_TXEX,
             tskcmd.c       1426                      ID_MBX_TXEX,
             tskcmd.c       1427                      NO_DATA,
             tskcmd.c       1428                      NO_DATA,
             tskcmd.c       1429                      ID_MSG_CMD,
             tskcmd.c       1430                      0,
             tskcmd.c       1431                      0,
             tskcmd.c       1432                      &cntl->rsp.buf[0],
             tskcmd.c       1433                      cntl->rsp.siz
             tskcmd.c       1434                  );
    00000834 31416025               MOV.L       @(148:12,R4),R1; (cntl)->siz
    00000838 2F16                   MOV.L       R1,@-R15
    0000083A E29C                   MOV         #-100,R2   ; H'FFFFFF9C
    0000083C 622C                   EXTU.B      R2,R2
    0000083E 342C                   ADD         R2,R4
    00000840 2F46                   MOV.L       R4,@-R15
    00000842 E400                   MOV         #0,R4      ; H'00000000
    00000844 2F46                   MOV.L       R4,@-R15
    00000846 2F46                   MOV.L       R4,@-R15
    00000848 E564                   MOV         #100,R5    ; H'00000064
    0000084A 2F56                   MOV.L       R5,@-R15
    0000084C E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    0000084E 611C                   EXTU.B      R1,R1
    00000850 6713                   MOV         R1,R7
    00000852 2F16                   MOV.L       R1,@-R15
    00000854 E604                   MOV         #4,R6      ; H'00000004
    00000856 E503                   MOV         #3,R5      ; H'00000003
    00000858 D250                   MOV.L       L1361+2,R2 ; _mbx_send
    0000085A 420B                   JSR         @R2
    0000085C E405                   MOV         #5,R4      ; H'00000005
    0000085E 7F18                   ADD         #24,R15
    00000860 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1435    }
    00000862 006B                   RTS/N
             tskcmd.c       1436    
             tskcmd.c       1437    /***********************************************************************
             tskcmd.c       1438    * 
             tskcmd.c       1439    * [概要]  応答データ作成
             tskcmd.c       1440    * [引数]  
             tskcmd.c       1441    * [戻値]  −
             tskcmd.c       1442    * 
             tskcmd.c       1443    ***********************************************************************/
             tskcmd.c       1444    void CmdMakeResponsePsns( UB msgid,
    00000864              _CmdMakeResponsePsns:            ; function: CmdMakeResponsePsns
                                                           ; frame size=124
    00000864 48F0                   MOVMU.L     R8,@-R15
    00000866 7FE4                   ADD         #-28,R15
    00000868 5AFF                   MOV.L       @(60,R15),R10
    0000086A 3BF16010               MOV.L       @(64:12,R15),R11
    0000086E 3FA1101F               MOV.W       R10,@(62:12,R15)
    00000872 3CF16011               MOV.L       @(68:12,R15),R12
    00000876 3DF16012               MOV.L       @(72:12,R15),R13
    0000087A 3AF16013               MOV.L       @(76:12,R15),R10
             tskcmd.c       1445                          const char* cmdchr,
             tskcmd.c       1446                          INT result,
             tskcmd.c       1447                          unsigned short d1,
             tskcmd.c       1448                          unsigned short d2,
             tskcmd.c       1449                          unsigned short d3,
             tskcmd.c       1450                          unsigned short d4,
             tskcmd.c       1451                          unsigned short d5,
             tskcmd.c       1452                          unsigned short d6,
             tskcmd.c       1453                          unsigned short d7,
             tskcmd.c       1454                          unsigned short d8,
             tskcmd.c       1455                          unsigned short d9,
             tskcmd.c       1456                          unsigned short d10,
             tskcmd.c       1457                          unsigned short d11,
             tskcmd.c       1458                          unsigned short d12,
             tskcmd.c       1459                          unsigned short d13 )
             tskcmd.c       1460    {
             tskcmd.c       1461      INT  len;
             tskcmd.c       1462      UB bcc;
             tskcmd.c       1463      UB bcch;
             tskcmd.c       1464      UB bccl;
             tskcmd.c       1465      UB dmyadr ;
             tskcmd.c       1466    
             tskcmd.c       1467      memset( &rspbuf2,  CLR,  sizeof( rspbuf2 ) );
    0000087E 1F64                   MOV.L       R6,@(16,R15); result
    00000880 E680                   MOV         #-128,R6   ; H'FFFFFF80
    00000882 3EF1601A               MOV.L       @(104:12,R15),R14
    00000886 666C                   EXTU.B      R6,R6
    00000888 1F53                   MOV.L       R5,@(12,R15); cmdchr
    0000088A 3F410017               MOV.B       R4,@(23:12,R15); msgid
    0000088E 3F71100D               MOV.W       R7,@(26:12,R15); d1
    00000892 3FB11021               MOV.W       R11,@(66:12,R15)
    00000896 3FC11023               MOV.W       R12,@(70:12,R15)
    0000089A 3FD11025               MOV.W       R13,@(74:12,R15)
    0000089E 3FA11027               MOV.W       R10,@(78:12,R15)
    000008A2 3DF16019               MOV.L       @(100:12,R15),R13
    000008A6 38F16014               MOV.L       @(80:12,R15),R8
    000008AA 39F16015               MOV.L       @(84:12,R15),R9
    000008AE 3AF16016               MOV.L       @(88:12,R15),R10
    000008B2 3BF16017               MOV.L       @(92:12,R15),R11
    000008B6 3CF16018               MOV.L       @(96:12,R15),R12
    000008BA D439                   MOV.L       L1361+6,R4 ; __$rspbuf2
    000008BC D139                   MOV.L       L1361+10,R1; _memset
    000008BE 410B                   JSR         @R1
    000008C0 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1468      
             tskcmd.c       1469                  //    1   2  D01 D02 D03 D04 D05 D06 D07 D08 D09 D10 D11 D12 D13
             tskcmd.c       1470      sprintf(rspbuf2, "%s,%04X,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d" ,cmdchr,result,d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13);
    000008C2 64ED                   EXTU.W      R14,R4
    000008C4 2F46                   MOV.L       R4,@-R15
    000008C6 65DD                   EXTU.W      R13,R5
    000008C8 2F56                   MOV.L       R5,@-R15
    000008CA 66CD                   EXTU.W      R12,R6
    000008CC 2F66                   MOV.L       R6,@-R15
    000008CE 67BD                   EXTU.W      R11,R7
    000008D0 2F76                   MOV.L       R7,@-R15
    000008D2 6BAD                   EXTU.W      R10,R11
    000008D4 2FB6                   MOV.L       R11,@-R15
    000008D6 6C9D                   EXTU.W      R9,R12
    000008D8 2FC6                   MOV.L       R12,@-R15
    000008DA 6D8D                   EXTU.W      R8,R13
    000008DC 2FD6                   MOV.L       R13,@-R15
    000008DE 3BF15035               MOV.W       @(106:12,R15),R11
    000008E2 6EBD                   EXTU.W      R11,R14
    000008E4 2FE6                   MOV.L       R14,@-R15
    000008E6 3EF15035               MOV.W       @(106:12,R15),R14
    000008EA 61ED                   EXTU.W      R14,R1
    000008EC 2F16                   MOV.L       R1,@-R15
    000008EE 31F15035               MOV.W       @(106:12,R15),R1
    000008F2 641D                   EXTU.W      R1,R4
    000008F4 2F46                   MOV.L       R4,@-R15
    000008F6 32F15035               MOV.W       @(106:12,R15),R2
    000008FA 652D                   EXTU.W      R2,R5
    000008FC 2F56                   MOV.L       R5,@-R15
    000008FE 38F15035               MOV.W       @(106:12,R15),R8
    00000902 668D                   EXTU.W      R8,R6
    00000904 2F66                   MOV.L       R6,@-R15
    00000906 39F19025               MOVU.W      @(74,R15),R9; d1
    0000090A 2F96                   MOV.L       R9,@-R15
    0000090C 7FFC                   ADD         #-4,R15
    0000090E E048                   MOV         #72,R0     ; H'00000048
    00000910 03FE                   MOV.L       @(R0,R15),R3; result
    00000912 2F32                   MOV.L       R3,@R15
    00000914 7FFC                   ADD         #-4,R15
    00000916 03FE                   MOV.L       @(R0,R15),R3; cmdchr
    00000918 D723                   MOV.L       L1361+14,R7; L1470
    0000091A 2F32                   MOV.L       R3,@R15
    0000091C D420                   MOV.L       L1361+6,R4 ; __$rspbuf2
    0000091E D823                   MOV.L       L1361+18,R8; _sprintf
    00000920 480B                   JSR         @R8
    00000922 2F76                   MOV.L       R7,@-R15
    00000924 7F40                   ADD         #64,R15
             tskcmd.c       1471    
             tskcmd.c       1472      len = strlen(&rspbuf2);
    00000926 D41E                   MOV.L       L1361+6,R4 ; __$rspbuf2
    00000928 D921                   MOV.L       L1361+22,R9; _strlen
    0000092A 490B                   JSR         @R9
    0000092C EA02                   MOV         #2,R10     ; H'00000002
             tskcmd.c       1473      psnsdat[0] = STX;                           // STX
    0000092E D921                   MOV.L       L1361+26,R9; __$psnsdat
    00000930 29A0                   MOV.B       R10,@R9    ; psnsdat[]
             tskcmd.c       1474      memcpy( &psnsdat[1], &rspbuf2, len );       // コマンド〜データまでコピー
    00000932 6493                   MOV         R9,R4
    00000934 7401                   ADD         #1,R4
    00000936 6803                   MOV         R0,R8
    00000938 D519                   MOV.L       L1361+6,R5 ; __$rspbuf2
    0000093A DB1F                   MOV.L       L1361+30,R11; _memcpy
    0000093C 4B0B                   JSR         @R11
    0000093E 6683                   MOV         R8,R6
             tskcmd.c       1475      psnsdat[(len+1)] = ETX;                 // ETX
    00000940 6C93                   MOV         R9,R12
    00000942 3C8C                   ADD         R8,R12
    00000944 E003                   MOV         #3,R0      ; H'00000003
             tskcmd.c       1476    
             tskcmd.c       1477      // BCC計算
             tskcmd.c       1478      bcc = CalcBCC( (UB*)&psnsdat[1], (len+1));
    00000946 7801                   ADD         #1,R8
    00000948 80C1                   MOV.B       R0,@(1,R12); psnsdat[]
    0000094A 7901                   ADD         #1,R9
    0000094C 6583                   MOV         R8,R5
    0000094E DD1B                   MOV.L       L1361+34,R13; _CalcBCC
    00000950 4D0B                   JSR         @R13
    00000952 6493                   MOV         R9,R4
    00000954 65F3                   MOV         R15,R5
    00000956 7504                   ADD         #4,R5
    00000958 6403                   MOV         R0,R4
             tskcmd.c       1479    
             tskcmd.c       1480      // 10進数→16進数→ASC変換
             tskcmd.c       1481      DectoHexASC( bcc, &bcch, &bccl );
    0000095A DE19                   MOV.L       L1361+38,R14; _DectoHexASC
    0000095C 4E0B                   JSR         @R14
    0000095E 66F3                   MOV         R15,R6
             tskcmd.c       1482    
             tskcmd.c       1483      psnsdat[(len+2)] = bcch;                    // BCC1
    00000960 30F14004               MOV.B       @(4:12,R15),R0; bcch
             tskcmd.c       1484      psnsdat[(len+3)] = bccl;                    // BCC2
             tskcmd.c       1485      
             tskcmd.c       1486      
             tskcmd.c       1487      mbx_send    (
             tskcmd.c       1488                  ID_TSK_CMD,               // ID tskid,    ﾀｽｸID
             tskcmd.c       1489                  ID_MPF_TX0,               // ID mpfid,    ﾌﾟｰﾙID
             tskcmd.c       1490                  ID_MBX_TX0,               // ID mbxid,    MBOXID
             tskcmd.c       1491                  NO_DATA,                  // UB prid1,    PROCID
             tskcmd.c       1492                  NO_DATA,                  // UB bcid,     BCID
             tskcmd.c       1493                  msgid,               // UB msgid,    ﾒｯｾｰｼﾞID
             tskcmd.c       1494                  0,                        // UB sts,      情報1
             tskcmd.c       1495                  0,                        // UB sts2,     情報2
             tskcmd.c       1496                  &dmyadr,                  // UB* data,    DATA
             tskcmd.c       1497                  1                         // INT siz      DATAサイズ
             tskcmd.c       1498              );
    00000964 E101                   MOV         #1,R1      ; H'00000001
    00000966 80C2                   MOV.B       R0,@(2,R12); psnsdat[]
    00000968 30F14000               MOV.B       @(0:12,R15),R0; bccl
    0000096C 80C3                   MOV.B       R0,@(3,R12); psnsdat[]
    0000096E 2F16                   MOV.L       R1,@-R15
    00000970 68F3                   MOV         R15,R8
    00000972 780C                   ADD         #12,R8
    00000974 2F86                   MOV.L       R8,@-R15
    00000976 E900                   MOV         #0,R9      ; H'00000000
    00000978 2F96                   MOV.L       R9,@-R15
    0000097A 2F96                   MOV.L       R9,@-R15
    0000097C 33F18027               MOVU.B      @(39,R15),R3; msgid
    00000980 2F36                   MOV.L       R3,@-R15
    00000982 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00000984 622C                   EXTU.B      R2,R2
    00000986 6723                   MOV         R2,R7
    00000988 2F26                   MOV.L       R2,@-R15
    0000098A E602                   MOV         #2,R6      ; H'00000002
    0000098C E405                   MOV         #5,R4      ; H'00000005
    0000098E D203                   MOV.L       L1361+2,R2 ; _mbx_send
    00000990 420B                   JSR         @R2
    00000992 6563                   MOV         R6,R5
    00000994 7F34                   ADD         #52,R15
    00000996 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       1499    }
    00000998 006B                   RTS/N
    0000099A              L1361:
    0000099A 00000002               .RES.W      1
    0000099C <00000000>             .DATA.L     _mbx_send
    000009A0 <00000000>             .DATA.L     __$rspbuf2
    000009A4 <00000000>             .DATA.L     _memset
    000009A8 <00000000>             .DATA.L     L1470
    000009AC <00000000>             .DATA.L     _sprintf
    000009B0 <00000000>             .DATA.L     _strlen
    000009B4 <00000000>             .DATA.L     __$psnsdat
    000009B8 <00000000>             .DATA.L     _memcpy
    000009BC <00000000>             .DATA.L     _CalcBCC
    000009C0 <00000000>             .DATA.L     _DectoHexASC
             tskcmd.c       1500    /***********************************************************************
             tskcmd.c       1501    * 
             tskcmd.c       1502    * [概要]  応答データ作成
             tskcmd.c       1503    * [引数]  
             tskcmd.c       1504    * [戻値]  −
             tskcmd.c       1505    * 
             tskcmd.c       1506    ***********************************************************************/
             tskcmd.c       1507    void CmdMakeResponse( ST_CNTLDATA* cntl,
    000009C4              _CmdMakeResponse:                ; function: CmdMakeResponse
                                                           ; frame size=88
    000009C4 49F0                   MOVMU.L     R9,@-R15
    000009C6 7FF8                   ADD         #-8,R15
    000009C8 6B63                   MOV         R6,R11
    000009CA E63C                   MOV         #60,R6     ; H'0000003C
    000009CC 6E53                   MOV         R5,R14
    000009CE E500                   MOV         #0,R5      ; H'00000000
    000009D0 D9BE                   MOV.L       L1363,R9   ; __$rspbuf
             tskcmd.c       1508                          UB anum,
             tskcmd.c       1509                          const char* p1,
             tskcmd.c       1510                          INT p2,
             tskcmd.c       1511                          INT p3,
             tskcmd.c       1512                          INT p4,
             tskcmd.c       1513                          INT p5,
             tskcmd.c       1514                          INT p6,
             tskcmd.c       1515                          INT p7,
             tskcmd.c       1516                          INT p8,
             tskcmd.c       1517                          INT p9,
             tskcmd.c       1518                          INT p10,
             tskcmd.c       1519                          INT p11,
             tskcmd.c       1520                          INT p12 )
             tskcmd.c       1521    {
             tskcmd.c       1522      INT  len;
             tskcmd.c       1523      UB bcc;
             tskcmd.c       1524      UB bcch;
             tskcmd.c       1525      UB bccl;
             tskcmd.c       1526    
             tskcmd.c       1527      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    000009D2 6C73                   MOV         R7,R12
    000009D4 6A43                   MOV         R4,R10
    000009D6 D1BE                   MOV.L       L1363+4,R1 ; _memset
    000009D8 410B                   JSR         @R1
    000009DA 6493                   MOV         R9,R4
             tskcmd.c       1528    
             tskcmd.c       1529      if(( anum < PARAM1 )||( anum > PARAM12 ))   return;
    000009DC 6DEC                   EXTU.B      R14,R13
    000009DE E201                   MOV         #1,R2      ; H'00000001
    000009E0 3D23                   CMP/GE      R2,R13
    000009E2 8901                   BT          L1392
    000009E4 A1A2                   BRA         L192
    000009E6 0009                   NOP
    000009E8              L1392:
    000009E8 E20C                   MOV         #12,R2     ; H'0000000C
    000009EA 3D27                   CMP/GT      R2,R13
    000009EC 8B01                   BF          L1393
    000009EE A19D                   BRA         L192
    000009F0 0009                   NOP
    000009F2              L1393:
             tskcmd.c       1530                                               //  1   2   3   4   5   6   7   8   9   10  11  12
             tskcmd.c       1531      if( anum == PARAM12)        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d" , p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    000009F2 60D3                   MOV         R13,R0
    000009F4 880C                   CMP/EQ      #12,R0
    000009F6 8B2F                   BF          L195
    000009F8 7FFC                   ADD         #-4,R15
    000009FA 34F16013               MOV.L       @(76:12,R15),R4
    000009FE 2F42                   MOV.L       R4,@R15
    00000A00 7FFC                   ADD         #-4,R15
    00000A02 35F16013               MOV.L       @(76:12,R15),R5
    00000A06 2F52                   MOV.L       R5,@R15
    00000A08 7FFC                   ADD         #-4,R15
    00000A0A 36F16013               MOV.L       @(76:12,R15),R6
    00000A0E 2F62                   MOV.L       R6,@R15
    00000A10 7FFC                   ADD         #-4,R15
    00000A12 37F16013               MOV.L       @(76:12,R15),R7
    00000A16 2F72                   MOV.L       R7,@R15
    00000A18 7FFC                   ADD         #-4,R15
    00000A1A 3EF16013               MOV.L       @(76:12,R15),R14
    00000A1E 2FE2                   MOV.L       R14,@R15
    00000A20 7FFC                   ADD         #-4,R15
    00000A22 31F16013               MOV.L       @(76:12,R15),R1
    00000A26 2F12                   MOV.L       R1,@R15
    00000A28 7FFC                   ADD         #-4,R15
    00000A2A 34F16013               MOV.L       @(76:12,R15),R4
    00000A2E 2F42                   MOV.L       R4,@R15
    00000A30 7FFC                   ADD         #-4,R15
    00000A32 35F16013               MOV.L       @(76:12,R15),R5
    00000A36 2F52                   MOV.L       R5,@R15
    00000A38 7FFC                   ADD         #-4,R15
    00000A3A 36F16013               MOV.L       @(76:12,R15),R6
    00000A3E 2F62                   MOV.L       R6,@R15
    00000A40 7FFC                   ADD         #-4,R15
    00000A42 37F16013               MOV.L       @(76:12,R15),R7
    00000A46 2F72                   MOV.L       R7,@R15
    00000A48 2FC6                   MOV.L       R12,@-R15
    00000A4A 2FB6                   MOV.L       R11,@-R15
    00000A4C DEA1                   MOV.L       L1363+8,R14; L1473
    00000A4E 2FE6                   MOV.L       R14,@-R15
    00000A50 D2A1                   MOV.L       L1363+12,R2; _sprintf
    00000A52 420B                   JSR         @R2
    00000A54 6493                   MOV         R9,R4
    00000A56 7F34                   ADD         #52,R15
    00000A58              L195:
             tskcmd.c       1532      if( anum == PARAM11)        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"     , p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    00000A58 60D3                   MOV         R13,R0
    00000A5A 880B                   CMP/EQ      #11,R0
    00000A5C 8B2B                   BF          L197
    00000A5E 7FFC                   ADD         #-4,R15
    00000A60 31F16012               MOV.L       @(72:12,R15),R1
    00000A64 2F12                   MOV.L       R1,@R15
    00000A66 7FFC                   ADD         #-4,R15
    00000A68 34F16012               MOV.L       @(72:12,R15),R4
    00000A6C 2F42                   MOV.L       R4,@R15
    00000A6E 7FFC                   ADD         #-4,R15
    00000A70 35F16012               MOV.L       @(72:12,R15),R5
    00000A74 2F52                   MOV.L       R5,@R15
    00000A76 7FFC                   ADD         #-4,R15
    00000A78 36F16012               MOV.L       @(72:12,R15),R6
    00000A7C 2F62                   MOV.L       R6,@R15
    00000A7E 7FFC                   ADD         #-4,R15
    00000A80 37F16012               MOV.L       @(72:12,R15),R7
    00000A84 2F72                   MOV.L       R7,@R15
    00000A86 7FFC                   ADD         #-4,R15
    00000A88 3EF16012               MOV.L       @(72:12,R15),R14
    00000A8C 2FE2                   MOV.L       R14,@R15
    00000A8E 7FFC                   ADD         #-4,R15
    00000A90 31F16012               MOV.L       @(72:12,R15),R1
    00000A94 2F12                   MOV.L       R1,@R15
    00000A96 7FFC                   ADD         #-4,R15
    00000A98 34F16012               MOV.L       @(72:12,R15),R4
    00000A9C 2F42                   MOV.L       R4,@R15
    00000A9E 7FFC                   ADD         #-4,R15
    00000AA0 35F16012               MOV.L       @(72:12,R15),R5
    00000AA4 2F52                   MOV.L       R5,@R15
    00000AA6 2FC6                   MOV.L       R12,@-R15
    00000AA8 2FB6                   MOV.L       R11,@-R15
    00000AAA D68C                   MOV.L       L1363+16,R6; L1474
    00000AAC 2F66                   MOV.L       R6,@-R15
    00000AAE D28A                   MOV.L       L1363+12,R2; _sprintf
    00000AB0 420B                   JSR         @R2
    00000AB2 6493                   MOV         R9,R4
    00000AB4 7F30                   ADD         #48,R15
    00000AB6              L197:
             tskcmd.c       1533      if( anum == PARAM10)        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"         , p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    00000AB6 60D3                   MOV         R13,R0
    00000AB8 880A                   CMP/EQ      #10,R0
    00000ABA 8B27                   BF          L199
    00000ABC 7FFC                   ADD         #-4,R15
    00000ABE 37F16011               MOV.L       @(68:12,R15),R7
    00000AC2 2F72                   MOV.L       R7,@R15
    00000AC4 7FFC                   ADD         #-4,R15
    00000AC6 3EF16011               MOV.L       @(68:12,R15),R14
    00000ACA 2FE2                   MOV.L       R14,@R15
    00000ACC 7FFC                   ADD         #-4,R15
    00000ACE 31F16011               MOV.L       @(68:12,R15),R1
    00000AD2 2F12                   MOV.L       R1,@R15
    00000AD4 7FFC                   ADD         #-4,R15
    00000AD6 34F16011               MOV.L       @(68:12,R15),R4
    00000ADA 2F42                   MOV.L       R4,@R15
    00000ADC 7FFC                   ADD         #-4,R15
    00000ADE 35F16011               MOV.L       @(68:12,R15),R5
    00000AE2 2F52                   MOV.L       R5,@R15
    00000AE4 7FFC                   ADD         #-4,R15
    00000AE6 36F16011               MOV.L       @(68:12,R15),R6
    00000AEA 2F62                   MOV.L       R6,@R15
    00000AEC 7FFC                   ADD         #-4,R15
    00000AEE 37F16011               MOV.L       @(68:12,R15),R7
    00000AF2 2F72                   MOV.L       R7,@R15
    00000AF4 7FFC                   ADD         #-4,R15
    00000AF6 3EF16011               MOV.L       @(68:12,R15),R14
    00000AFA 2FE2                   MOV.L       R14,@R15
    00000AFC 2FC6                   MOV.L       R12,@-R15
    00000AFE 2FB6                   MOV.L       R11,@-R15
    00000B00 D177                   MOV.L       L1363+20,R1; L1475
    00000B02 2F16                   MOV.L       R1,@-R15
    00000B04 D274                   MOV.L       L1363+12,R2; _sprintf
    00000B06 420B                   JSR         @R2
    00000B08 6493                   MOV         R9,R4
    00000B0A 7F2C                   ADD         #44,R15
    00000B0C              L199:
             tskcmd.c       1534      if( anum == PARAM9 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d"             , p1, p2, p3, p4, p5, p6, p7, p8, p9);
    00000B0C 60D3                   MOV         R13,R0
    00000B0E 8809                   CMP/EQ      #9,R0
    00000B10 8B23                   BF          L201
    00000B12 7FFC                   ADD         #-4,R15
    00000B14 34F16010               MOV.L       @(64:12,R15),R4
    00000B18 2F42                   MOV.L       R4,@R15
    00000B1A 7FFC                   ADD         #-4,R15
    00000B1C 35F16010               MOV.L       @(64:12,R15),R5
    00000B20 2F52                   MOV.L       R5,@R15
    00000B22 7FFC                   ADD         #-4,R15
    00000B24 36F16010               MOV.L       @(64:12,R15),R6
    00000B28 2F62                   MOV.L       R6,@R15
    00000B2A 7FFC                   ADD         #-4,R15
    00000B2C 37F16010               MOV.L       @(64:12,R15),R7
    00000B30 2F72                   MOV.L       R7,@R15
    00000B32 7FFC                   ADD         #-4,R15
    00000B34 3EF16010               MOV.L       @(64:12,R15),R14
    00000B38 2FE2                   MOV.L       R14,@R15
    00000B3A 7FFC                   ADD         #-4,R15
    00000B3C 31F16010               MOV.L       @(64:12,R15),R1
    00000B40 2F12                   MOV.L       R1,@R15
    00000B42 7FFC                   ADD         #-4,R15
    00000B44 34F16010               MOV.L       @(64:12,R15),R4
    00000B48 2F42                   MOV.L       R4,@R15
    00000B4A 2FC6                   MOV.L       R12,@-R15
    00000B4C 2FB6                   MOV.L       R11,@-R15
    00000B4E D565                   MOV.L       L1363+24,R5; L1476
    00000B50 2F56                   MOV.L       R5,@-R15
    00000B52 D261                   MOV.L       L1363+12,R2; _sprintf
    00000B54 420B                   JSR         @R2
    00000B56 6493                   MOV         R9,R4
    00000B58 7F28                   ADD         #40,R15
    00000B5A              L201:
             tskcmd.c       1535      if( anum == PARAM8 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d"                 , p1, p2, p3, p4, p5, p6, p7, p8);
    00000B5A 60D3                   MOV         R13,R0
    00000B5C 8808                   CMP/EQ      #8,R0
    00000B5E 8B19                   BF          L203
    00000B60 7FFC                   ADD         #-4,R15
    00000B62 56FF                   MOV.L       @(60,R15),R6
    00000B64 2F62                   MOV.L       R6,@R15
    00000B66 7FFC                   ADD         #-4,R15
    00000B68 57FF                   MOV.L       @(60,R15),R7
    00000B6A 2F72                   MOV.L       R7,@R15
    00000B6C 7FFC                   ADD         #-4,R15
    00000B6E 5EFF                   MOV.L       @(60,R15),R14
    00000B70 2FE2                   MOV.L       R14,@R15
    00000B72 7FFC                   ADD         #-4,R15
    00000B74 51FF                   MOV.L       @(60,R15),R1
    00000B76 2F12                   MOV.L       R1,@R15
    00000B78 7FFC                   ADD         #-4,R15
    00000B7A 54FF                   MOV.L       @(60,R15),R4
    00000B7C 2F42                   MOV.L       R4,@R15
    00000B7E 7FFC                   ADD         #-4,R15
    00000B80 55FF                   MOV.L       @(60,R15),R5
    00000B82 2F52                   MOV.L       R5,@R15
    00000B84 2FC6                   MOV.L       R12,@-R15
    00000B86 2FB6                   MOV.L       R11,@-R15
    00000B88 D657                   MOV.L       L1363+28,R6; L1477
    00000B8A 2F66                   MOV.L       R6,@-R15
    00000B8C D252                   MOV.L       L1363+12,R2; _sprintf
    00000B8E 420B                   JSR         @R2
    00000B90 6493                   MOV         R9,R4
    00000B92 7F24                   ADD         #36,R15
    00000B94              L203:
             tskcmd.c       1536      if( anum == PARAM7 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d,%0d"                     , p1, p2, p3, p4, p5, p6, p7);
    00000B94 60D3                   MOV         R13,R0
    00000B96 8807                   CMP/EQ      #7,R0
    00000B98 8B16                   BF          L205
    00000B9A 7FFC                   ADD         #-4,R15
    00000B9C 57FE                   MOV.L       @(56,R15),R7
    00000B9E 2F72                   MOV.L       R7,@R15
    00000BA0 7FFC                   ADD         #-4,R15
    00000BA2 5EFE                   MOV.L       @(56,R15),R14
    00000BA4 2FE2                   MOV.L       R14,@R15
    00000BA6 7FFC                   ADD         #-4,R15
    00000BA8 51FE                   MOV.L       @(56,R15),R1
    00000BAA 2F12                   MOV.L       R1,@R15
    00000BAC 7FFC                   ADD         #-4,R15
    00000BAE 54FE                   MOV.L       @(56,R15),R4
    00000BB0 2F42                   MOV.L       R4,@R15
    00000BB2 7FFC                   ADD         #-4,R15
    00000BB4 55FE                   MOV.L       @(56,R15),R5
    00000BB6 2F52                   MOV.L       R5,@R15
    00000BB8 2FC6                   MOV.L       R12,@-R15
    00000BBA 2FB6                   MOV.L       R11,@-R15
    00000BBC D64B                   MOV.L       L1363+32,R6; L1478
    00000BBE 2F66                   MOV.L       R6,@-R15
    00000BC0 D245                   MOV.L       L1363+12,R2; _sprintf
    00000BC2 420B                   JSR         @R2
    00000BC4 6493                   MOV         R9,R4
    00000BC6 7F20                   ADD         #32,R15
    00000BC8              L205:
             tskcmd.c       1537      if( anum == PARAM6 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d,%0d"                         , p1, p2, p3, p4, p5, p6);
    00000BC8 60D3                   MOV         R13,R0
    00000BCA 8806                   CMP/EQ      #6,R0
    00000BCC 8B13                   BF          L207
    00000BCE 7FFC                   ADD         #-4,R15
    00000BD0 57FD                   MOV.L       @(52,R15),R7
    00000BD2 2F72                   MOV.L       R7,@R15
    00000BD4 7FFC                   ADD         #-4,R15
    00000BD6 5EFD                   MOV.L       @(52,R15),R14
    00000BD8 2FE2                   MOV.L       R14,@R15
    00000BDA 7FFC                   ADD         #-4,R15
    00000BDC 51FD                   MOV.L       @(52,R15),R1
    00000BDE 2F12                   MOV.L       R1,@R15
    00000BE0 7FFC                   ADD         #-4,R15
    00000BE2 54FD                   MOV.L       @(52,R15),R4
    00000BE4 2F42                   MOV.L       R4,@R15
    00000BE6 2FC6                   MOV.L       R12,@-R15
    00000BE8 2FB6                   MOV.L       R11,@-R15
    00000BEA D541                   MOV.L       L1363+36,R5; L1479
    00000BEC 2F56                   MOV.L       R5,@-R15
    00000BEE D63A                   MOV.L       L1363+12,R6; _sprintf
    00000BF0 460B                   JSR         @R6
    00000BF2 6493                   MOV         R9,R4
    00000BF4 7F1C                   ADD         #28,R15
    00000BF6              L207:
             tskcmd.c       1538      if( anum == PARAM5 )        sprintf(rspbuf, "%s,%04X,%0d,%0d,%0d"                             , p1, p2, p3, p4, p5);
    00000BF6 60D3                   MOV         R13,R0
    00000BF8 8805                   CMP/EQ      #5,R0
    00000BFA 8B10                   BF          L209
    00000BFC 7FFC                   ADD         #-4,R15
    00000BFE 57FC                   MOV.L       @(48,R15),R7
    00000C00 2F72                   MOV.L       R7,@R15
    00000C02 7FFC                   ADD         #-4,R15
    00000C04 5EFC                   MOV.L       @(48,R15),R14
    00000C06 2FE2                   MOV.L       R14,@R15
    00000C08 7FFC                   ADD         #-4,R15
    00000C0A 51FC                   MOV.L       @(48,R15),R1
    00000C0C 2F12                   MOV.L       R1,@R15
    00000C0E 2FC6                   MOV.L       R12,@-R15
    00000C10 2FB6                   MOV.L       R11,@-R15
    00000C12 D438                   MOV.L       L1363+40,R4; L1480
    00000C14 2F46                   MOV.L       R4,@-R15
    00000C16 D530                   MOV.L       L1363+12,R5; _sprintf
    00000C18 450B                   JSR         @R5
    00000C1A 6493                   MOV         R9,R4
    00000C1C 7F18                   ADD         #24,R15
    00000C1E              L209:
             tskcmd.c       1539      if( anum == PARAM4 )        sprintf(rspbuf, "%s,%04X,%0d,%0d"                                 , p1, p2, p3, p4);
    00000C1E 60D3                   MOV         R13,R0
    00000C20 8804                   CMP/EQ      #4,R0
    00000C22 8B0D                   BF          L211
    00000C24 7FFC                   ADD         #-4,R15
    00000C26 56FB                   MOV.L       @(44,R15),R6
    00000C28 2F62                   MOV.L       R6,@R15
    00000C2A 7FFC                   ADD         #-4,R15
    00000C2C 57FB                   MOV.L       @(44,R15),R7
    00000C2E 2F72                   MOV.L       R7,@R15
    00000C30 2FC6                   MOV.L       R12,@-R15
    00000C32 2FB6                   MOV.L       R11,@-R15
    00000C34 DE30                   MOV.L       L1363+44,R14; L1481
    00000C36 2FE6                   MOV.L       R14,@-R15
    00000C38 D127                   MOV.L       L1363+12,R1; _sprintf
    00000C3A 410B                   JSR         @R1
    00000C3C 6493                   MOV         R9,R4
    00000C3E 7F14                   ADD         #20,R15
    00000C40              L211:
             tskcmd.c       1540      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%04X,%0d"                                     , p1, p2, p3);
    00000C40 60D3                   MOV         R13,R0
    00000C42 8803                   CMP/EQ      #3,R0
    00000C44 8B0A                   BF          L213
    00000C46 7FFC                   ADD         #-4,R15
    00000C48 54FA                   MOV.L       @(40,R15),R4
    00000C4A 2F42                   MOV.L       R4,@R15
    00000C4C 2FC6                   MOV.L       R12,@-R15
    00000C4E 2FB6                   MOV.L       R11,@-R15
    00000C50 D52A                   MOV.L       L1363+48,R5; L1482
    00000C52 2F56                   MOV.L       R5,@-R15
    00000C54 D620                   MOV.L       L1363+12,R6; _sprintf
    00000C56 460B                   JSR         @R6
    00000C58 6493                   MOV         R9,R4
    00000C5A 7F10                   ADD         #16,R15
    00000C5C              L213:
             tskcmd.c       1541      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%04X"                                         , p1, p2);
    00000C5C 60D3                   MOV         R13,R0
    00000C5E 8802                   CMP/EQ      #2,R0
    00000C60 8B07                   BF          L215
    00000C62 2FC6                   MOV.L       R12,@-R15
    00000C64 2FB6                   MOV.L       R11,@-R15
    00000C66 D726                   MOV.L       L1363+52,R7; L1483
    00000C68 2F76                   MOV.L       R7,@-R15
    00000C6A DE1B                   MOV.L       L1363+12,R14; _sprintf
    00000C6C 4E0B                   JSR         @R14
    00000C6E 6493                   MOV         R9,R4
    00000C70 7F0C                   ADD         #12,R15
    00000C72              L215:
             tskcmd.c       1542      if( anum == PARAM1 )        sprintf(rspbuf, "%s"                                              , p1);
    00000C72 60D3                   MOV         R13,R0
    00000C74 8801                   CMP/EQ      #1,R0
    00000C76 8B06                   BF          L217
    00000C78 2FB6                   MOV.L       R11,@-R15
    00000C7A D122                   MOV.L       L1363+56,R1; L1484
    00000C7C 2F16                   MOV.L       R1,@-R15
    00000C7E D516                   MOV.L       L1363+12,R5; _sprintf
    00000C80 450B                   JSR         @R5
    00000C82 6493                   MOV         R9,R4
    00000C84 7F08                   ADD         #8,R15
    00000C86              L217:
             tskcmd.c       1543      
             tskcmd.c       1544      
             tskcmd.c       1545      len = strlen(&rspbuf);
    00000C86 D620                   MOV.L       L1363+60,R6; _strlen
    00000C88 460B                   JSR         @R6
    00000C8A 6493                   MOV         R9,R4
             tskcmd.c       1546      cntl->rsp.buf[0] = STX;                         // STX
             tskcmd.c       1547      memcpy( &cntl->rsp.buf[1], &rspbuf, len );          // コマンド〜データまでコピー
    00000C8C 6593                   MOV         R9,R5
    00000C8E E99D                   MOV         #-99,R9    ; H'FFFFFF9D
    00000C90 E702                   MOV         #2,R7      ; H'00000002
    00000C92 699C                   EXTU.B      R9,R9
    00000C94 3A71009C               MOV.B       R7,@(156:12,R10); cntl->buf[]
    00000C98 6CA3                   MOV         R10,R12
    00000C9A 3C9C                   ADD         R9,R12
    00000C9C 6D03                   MOV         R0,R13
    00000C9E 6603                   MOV         R0,R6
    00000CA0 DB1A                   MOV.L       L1363+64,R11; _memcpy
    00000CA2 4B0B                   JSR         @R11
    00000CA4 64C3                   MOV         R12,R4
             tskcmd.c       1548      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    00000CA6 6EA3                   MOV         R10,R14
    00000CA8 3EDC                   ADD         R13,R14
    00000CAA E103                   MOV         #3,R1      ; H'00000003
             tskcmd.c       1549    
             tskcmd.c       1550      // BCC計算
             tskcmd.c       1551      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
    00000CAC 65D3                   MOV         R13,R5
    00000CAE 3E11009D               MOV.B       R1,@(157:12,R14); cntl->buf[]
    00000CB2 7501                   ADD         #1,R5
    00000CB4 D616                   MOV.L       L1363+68,R6; _CalcBCC
    00000CB6 460B                   JSR         @R6
    00000CB8 64C3                   MOV         R12,R4
    00000CBA 65F3                   MOV         R15,R5
    00000CBC 7504                   ADD         #4,R5
    00000CBE 6403                   MOV         R0,R4
             tskcmd.c       1552    
             tskcmd.c       1553      // 10進数→16進数→ASC変換
             tskcmd.c       1554      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1555    
             tskcmd.c       1556      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
             tskcmd.c       1557      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
             tskcmd.c       1558      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    00000CC0 7D04                   ADD         #4,R13
    00000CC2 D714                   MOV.L       L1363+72,R7; _DectoHexASC
    00000CC4 470B                   JSR         @R7
    00000CC6 66F3                   MOV         R15,R6
    00000CC8 A026                   BRA         L1362
    00000CCA 0009                   NOP
    00000CCC              L1363:
    00000CCC <00000000>             .DATA.L     __$rspbuf
    00000CD0 <00000000>             .DATA.L     _memset
    00000CD4 <00000000>             .DATA.L     L1473
    00000CD8 <00000000>             .DATA.L     _sprintf
    00000CDC <00000000>             .DATA.L     L1474
    00000CE0 <00000000>             .DATA.L     L1475
    00000CE4 <00000000>             .DATA.L     L1476
    00000CE8 <00000000>             .DATA.L     L1477
    00000CEC <00000000>             .DATA.L     L1478
    00000CF0 <00000000>             .DATA.L     L1479
    00000CF4 <00000000>             .DATA.L     L1480
    00000CF8 <00000000>             .DATA.L     L1481
    00000CFC <00000000>             .DATA.L     L1482
    00000D00 <00000000>             .DATA.L     L1483
    00000D04 <00000000>             .DATA.L     L1484
    00000D08 <00000000>             .DATA.L     _strlen
    00000D0C <00000000>             .DATA.L     _memcpy
    00000D10 <00000000>             .DATA.L     _CalcBCC
    00000D14 <00000000>             .DATA.L     _DectoHexASC
    00000D18              L1362:
    00000D18 3BF14004               MOV.B       @(4:12,R15),R11; bcch
    00000D1C 3EB1009E               MOV.B       R11,@(158:12,R14); cntl->buf[]
    00000D20 32F14000               MOV.B       @(0:12,R15),R2; bccl
    00000D24 3E21009F               MOV.B       R2,@(159:12,R14); cntl->buf[]
    00000D28 3AD12025               MOV.L       R13,@(148:12,R10); (cntl)->siz
    00000D2C              L192:
    00000D2C 7F08                   ADD         #8,R15
    00000D2E 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1559    }
    00000D30 006B                   RTS/N
             tskcmd.c       1560    /***********************************************************************
             tskcmd.c       1561    * 
             tskcmd.c       1562    * [概要]  応答データ作成
             tskcmd.c       1563    * [引数]  
             tskcmd.c       1564    * [戻値]  −
             tskcmd.c       1565    * 
             tskcmd.c       1566    ***********************************************************************/
             tskcmd.c       1567    void CmdMakeResponseX( ST_CNTLDATA* cntl, UB anum, const char* cmd, INT err, INT p2,INT p3, INT p4, INT p5, INT p6, INT p7, INT p8 )
    00000D32              _CmdMakeResponseX:               ; function: CmdMakeResponseX
                                                           ; frame size=76
    00000D32 49F0                   MOVMU.L     R9,@-R15
    00000D34 7FF8                   ADD         #-8,R15
    00000D36 6B63                   MOV         R6,R11
    00000D38 E63C                   MOV         #60,R6     ; H'0000003C
    00000D3A 6E53                   MOV         R5,R14
    00000D3C E500                   MOV         #0,R5      ; H'00000000
    00000D3E D9B0                   MOV.L       L1364+2,R9 ; __$rspbuf
             tskcmd.c       1568    {
             tskcmd.c       1569      INT  len;
             tskcmd.c       1570      UB bcc;
             tskcmd.c       1571      UB bcch;
             tskcmd.c       1572      UB bccl;
             tskcmd.c       1573    //    char rspbuf[CMD_BUFSIZ];
             tskcmd.c       1574    
             tskcmd.c       1575      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00000D40 6C73                   MOV         R7,R12
    00000D42 6A43                   MOV         R4,R10
    00000D44 D1AF                   MOV.L       L1364+6,R1 ; _memset
    00000D46 410B                   JSR         @R1
    00000D48 6493                   MOV         R9,R4
             tskcmd.c       1576      
             tskcmd.c       1577      if(( anum < PARAM1 )||( anum > PARAM9 ))    return;
    00000D4A 6DEC                   EXTU.B      R14,R13
    00000D4C E201                   MOV         #1,R2      ; H'00000001
    00000D4E 3D23                   CMP/GE      R2,R13
    00000D50 8901                   BT          L1394
    00000D52 A0ED                   BRA         L220
    00000D54 0009                   NOP
    00000D56              L1394:
    00000D56 E209                   MOV         #9,R2      ; H'00000009
    00000D58 3D27                   CMP/GT      R2,R13
    00000D5A 8B01                   BF          L1395
    00000D5C A0E8                   BRA         L220
    00000D5E 0009                   NOP
    00000D60              L1395:
             tskcmd.c       1578    
             tskcmd.c       1579      if( anum == PARAM9 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5, p6, p7, p8);
    00000D60 60D3                   MOV         R13,R0
    00000D62 8809                   CMP/EQ      #9,R0
    00000D64 8B23                   BF          L223
    00000D66 7FFC                   ADD         #-4,R15
    00000D68 34F16010               MOV.L       @(64:12,R15),R4
    00000D6C 2F42                   MOV.L       R4,@R15
    00000D6E 7FFC                   ADD         #-4,R15
    00000D70 35F16010               MOV.L       @(64:12,R15),R5
    00000D74 2F52                   MOV.L       R5,@R15
    00000D76 7FFC                   ADD         #-4,R15
    00000D78 36F16010               MOV.L       @(64:12,R15),R6
    00000D7C 2F62                   MOV.L       R6,@R15
    00000D7E 7FFC                   ADD         #-4,R15
    00000D80 37F16010               MOV.L       @(64:12,R15),R7
    00000D84 2F72                   MOV.L       R7,@R15
    00000D86 7FFC                   ADD         #-4,R15
    00000D88 3EF16010               MOV.L       @(64:12,R15),R14
    00000D8C 2FE2                   MOV.L       R14,@R15
    00000D8E 7FFC                   ADD         #-4,R15
    00000D90 31F16010               MOV.L       @(64:12,R15),R1
    00000D94 2F12                   MOV.L       R1,@R15
    00000D96 7FFC                   ADD         #-4,R15
    00000D98 34F16010               MOV.L       @(64:12,R15),R4
    00000D9C 2F42                   MOV.L       R4,@R15
    00000D9E 2FC6                   MOV.L       R12,@-R15
    00000DA0 2FB6                   MOV.L       R11,@-R15
    00000DA2 D599                   MOV.L       L1364+10,R5; L1485
    00000DA4 2F56                   MOV.L       R5,@-R15
    00000DA6 D299                   MOV.L       L1364+14,R2; _sprintf
    00000DA8 420B                   JSR         @R2
    00000DAA 6493                   MOV         R9,R4
    00000DAC 7F28                   ADD         #40,R15
    00000DAE              L223:
             tskcmd.c       1580      if( anum == PARAM8 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5, p6, p7);
    00000DAE 60D3                   MOV         R13,R0
    00000DB0 8808                   CMP/EQ      #8,R0
    00000DB2 8B19                   BF          L225
    00000DB4 7FFC                   ADD         #-4,R15
    00000DB6 56FF                   MOV.L       @(60,R15),R6
    00000DB8 2F62                   MOV.L       R6,@R15
    00000DBA 7FFC                   ADD         #-4,R15
    00000DBC 57FF                   MOV.L       @(60,R15),R7
    00000DBE 2F72                   MOV.L       R7,@R15
    00000DC0 7FFC                   ADD         #-4,R15
    00000DC2 5EFF                   MOV.L       @(60,R15),R14
    00000DC4 2FE2                   MOV.L       R14,@R15
    00000DC6 7FFC                   ADD         #-4,R15
    00000DC8 51FF                   MOV.L       @(60,R15),R1
    00000DCA 2F12                   MOV.L       R1,@R15
    00000DCC 7FFC                   ADD         #-4,R15
    00000DCE 54FF                   MOV.L       @(60,R15),R4
    00000DD0 2F42                   MOV.L       R4,@R15
    00000DD2 7FFC                   ADD         #-4,R15
    00000DD4 55FF                   MOV.L       @(60,R15),R5
    00000DD6 2F52                   MOV.L       R5,@R15
    00000DD8 2FC6                   MOV.L       R12,@-R15
    00000DDA 2FB6                   MOV.L       R11,@-R15
    00000DDC D68C                   MOV.L       L1364+18,R6; L1486
    00000DDE 2F66                   MOV.L       R6,@-R15
    00000DE0 D28A                   MOV.L       L1364+14,R2; _sprintf
    00000DE2 420B                   JSR         @R2
    00000DE4 6493                   MOV         R9,R4
    00000DE6 7F24                   ADD         #36,R15
    00000DE8              L225:
             tskcmd.c       1581      if( anum == PARAM7 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5, p6);
    00000DE8 60D3                   MOV         R13,R0
    00000DEA 8807                   CMP/EQ      #7,R0
    00000DEC 8B16                   BF          L227
    00000DEE 7FFC                   ADD         #-4,R15
    00000DF0 57FE                   MOV.L       @(56,R15),R7
    00000DF2 2F72                   MOV.L       R7,@R15
    00000DF4 7FFC                   ADD         #-4,R15
    00000DF6 5EFE                   MOV.L       @(56,R15),R14
    00000DF8 2FE2                   MOV.L       R14,@R15
    00000DFA 7FFC                   ADD         #-4,R15
    00000DFC 51FE                   MOV.L       @(56,R15),R1
    00000DFE 2F12                   MOV.L       R1,@R15
    00000E00 7FFC                   ADD         #-4,R15
    00000E02 54FE                   MOV.L       @(56,R15),R4
    00000E04 2F42                   MOV.L       R4,@R15
    00000E06 7FFC                   ADD         #-4,R15
    00000E08 55FE                   MOV.L       @(56,R15),R5
    00000E0A 2F52                   MOV.L       R5,@R15
    00000E0C 2FC6                   MOV.L       R12,@-R15
    00000E0E 2FB6                   MOV.L       R11,@-R15
    00000E10 D680                   MOV.L       L1364+22,R6; L1487
    00000E12 2F66                   MOV.L       R6,@-R15
    00000E14 D27D                   MOV.L       L1364+14,R2; _sprintf
    00000E16 420B                   JSR         @R2
    00000E18 6493                   MOV         R9,R4
    00000E1A 7F20                   ADD         #32,R15
    00000E1C              L227:
             tskcmd.c       1582      if( anum == PARAM6 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4, p5);
    00000E1C 60D3                   MOV         R13,R0
    00000E1E 8806                   CMP/EQ      #6,R0
    00000E20 8B13                   BF          L229
    00000E22 7FFC                   ADD         #-4,R15
    00000E24 57FD                   MOV.L       @(52,R15),R7
    00000E26 2F72                   MOV.L       R7,@R15
    00000E28 7FFC                   ADD         #-4,R15
    00000E2A 5EFD                   MOV.L       @(52,R15),R14
    00000E2C 2FE2                   MOV.L       R14,@R15
    00000E2E 7FFC                   ADD         #-4,R15
    00000E30 51FD                   MOV.L       @(52,R15),R1
    00000E32 2F12                   MOV.L       R1,@R15
    00000E34 7FFC                   ADD         #-4,R15
    00000E36 54FD                   MOV.L       @(52,R15),R4
    00000E38 2F42                   MOV.L       R4,@R15
    00000E3A 2FC6                   MOV.L       R12,@-R15
    00000E3C 2FB6                   MOV.L       R11,@-R15
    00000E3E D576                   MOV.L       L1364+26,R5; L1488
    00000E40 2F56                   MOV.L       R5,@-R15
    00000E42 D672                   MOV.L       L1364+14,R6; _sprintf
    00000E44 460B                   JSR         @R6
    00000E46 6493                   MOV         R9,R4
    00000E48 7F1C                   ADD         #28,R15
    00000E4A              L229:
             tskcmd.c       1583      if( anum == PARAM5 )        sprintf(rspbuf, "%s,%04X,%04X,%04X,%04X", cmd, err, p2, p3, p4);
    00000E4A 60D3                   MOV         R13,R0
    00000E4C 8805                   CMP/EQ      #5,R0
    00000E4E 8B10                   BF          L231
    00000E50 7FFC                   ADD         #-4,R15
    00000E52 57FC                   MOV.L       @(48,R15),R7
    00000E54 2F72                   MOV.L       R7,@R15
    00000E56 7FFC                   ADD         #-4,R15
    00000E58 5EFC                   MOV.L       @(48,R15),R14
    00000E5A 2FE2                   MOV.L       R14,@R15
    00000E5C 7FFC                   ADD         #-4,R15
    00000E5E 51FC                   MOV.L       @(48,R15),R1
    00000E60 2F12                   MOV.L       R1,@R15
    00000E62 2FC6                   MOV.L       R12,@-R15
    00000E64 2FB6                   MOV.L       R11,@-R15
    00000E66 D46D                   MOV.L       L1364+30,R4; L1489
    00000E68 2F46                   MOV.L       R4,@-R15
    00000E6A D568                   MOV.L       L1364+14,R5; _sprintf
    00000E6C 450B                   JSR         @R5
    00000E6E 6493                   MOV         R9,R4
    00000E70 7F18                   ADD         #24,R15
    00000E72              L231:
             tskcmd.c       1584      if( anum == PARAM4 )        sprintf(rspbuf, "%s,%04X,%04X,%04X", cmd, err, p2, p3);
    00000E72 60D3                   MOV         R13,R0
    00000E74 8804                   CMP/EQ      #4,R0
    00000E76 8B0D                   BF          L233
    00000E78 7FFC                   ADD         #-4,R15
    00000E7A 56FB                   MOV.L       @(44,R15),R6
    00000E7C 2F62                   MOV.L       R6,@R15
    00000E7E 7FFC                   ADD         #-4,R15
    00000E80 57FB                   MOV.L       @(44,R15),R7
    00000E82 2F72                   MOV.L       R7,@R15
    00000E84 2FC6                   MOV.L       R12,@-R15
    00000E86 2FB6                   MOV.L       R11,@-R15
    00000E88 DE65                   MOV.L       L1364+34,R14; L1490
    00000E8A 2FE6                   MOV.L       R14,@-R15
    00000E8C D15F                   MOV.L       L1364+14,R1; _sprintf
    00000E8E 410B                   JSR         @R1
    00000E90 6493                   MOV         R9,R4
    00000E92 7F14                   ADD         #20,R15
    00000E94              L233:
             tskcmd.c       1585      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%04X,%04X", cmd, err, p2);
    00000E94 60D3                   MOV         R13,R0
    00000E96 8803                   CMP/EQ      #3,R0
    00000E98 8B0A                   BF          L235
    00000E9A 7FFC                   ADD         #-4,R15
    00000E9C 54FA                   MOV.L       @(40,R15),R4
    00000E9E 2F42                   MOV.L       R4,@R15
    00000EA0 2FC6                   MOV.L       R12,@-R15
    00000EA2 2FB6                   MOV.L       R11,@-R15
    00000EA4 D55F                   MOV.L       L1364+38,R5; L1491
    00000EA6 2F56                   MOV.L       R5,@-R15
    00000EA8 D658                   MOV.L       L1364+14,R6; _sprintf
    00000EAA 460B                   JSR         @R6
    00000EAC 6493                   MOV         R9,R4
    00000EAE 7F10                   ADD         #16,R15
    00000EB0              L235:
             tskcmd.c       1586      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%04X", cmd, err);
    00000EB0 60D3                   MOV         R13,R0
    00000EB2 8802                   CMP/EQ      #2,R0
    00000EB4 8B07                   BF          L237
    00000EB6 2FC6                   MOV.L       R12,@-R15
    00000EB8 2FB6                   MOV.L       R11,@-R15
    00000EBA D75B                   MOV.L       L1364+42,R7; L1483
    00000EBC 2F76                   MOV.L       R7,@-R15
    00000EBE DE53                   MOV.L       L1364+14,R14; _sprintf
    00000EC0 4E0B                   JSR         @R14
    00000EC2 6493                   MOV         R9,R4
    00000EC4 7F0C                   ADD         #12,R15
    00000EC6              L237:
             tskcmd.c       1587      if( anum == PARAM1 )        sprintf(rspbuf, "%s", cmd);
    00000EC6 60D3                   MOV         R13,R0
    00000EC8 8801                   CMP/EQ      #1,R0
    00000ECA 8B06                   BF          L239
    00000ECC 2FB6                   MOV.L       R11,@-R15
    00000ECE D157                   MOV.L       L1364+46,R1; L1484
    00000ED0 2F16                   MOV.L       R1,@-R15
    00000ED2 D54E                   MOV.L       L1364+14,R5; _sprintf
    00000ED4 450B                   JSR         @R5
    00000ED6 6493                   MOV         R9,R4
    00000ED8 7F08                   ADD         #8,R15
    00000EDA              L239:
             tskcmd.c       1588      
             tskcmd.c       1589      
             tskcmd.c       1590      len = strlen(&rspbuf);
    00000EDA D655                   MOV.L       L1364+50,R6; _strlen
    00000EDC 460B                   JSR         @R6
    00000EDE 6493                   MOV         R9,R4
             tskcmd.c       1591      cntl->rsp.buf[0] = STX;                         // STX
             tskcmd.c       1592      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
    00000EE0 6593                   MOV         R9,R5
    00000EE2 E99D                   MOV         #-99,R9    ; H'FFFFFF9D
    00000EE4 E702                   MOV         #2,R7      ; H'00000002
    00000EE6 699C                   EXTU.B      R9,R9
    00000EE8 3A71009C               MOV.B       R7,@(156:12,R10); cntl->buf[]
    00000EEC 6CA3                   MOV         R10,R12
    00000EEE 3C9C                   ADD         R9,R12
    00000EF0 6D03                   MOV         R0,R13
    00000EF2 6603                   MOV         R0,R6
    00000EF4 DB4F                   MOV.L       L1364+54,R11; _memcpy
    00000EF6 4B0B                   JSR         @R11
    00000EF8 64C3                   MOV         R12,R4
             tskcmd.c       1593      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    00000EFA 6EA3                   MOV         R10,R14
    00000EFC 3EDC                   ADD         R13,R14
    00000EFE E103                   MOV         #3,R1      ; H'00000003
             tskcmd.c       1594    
             tskcmd.c       1595      // BCC計算
             tskcmd.c       1596      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
    00000F00 65D3                   MOV         R13,R5
    00000F02 3E11009D               MOV.B       R1,@(157:12,R14); cntl->buf[]
    00000F06 7501                   ADD         #1,R5
    00000F08 D64B                   MOV.L       L1364+58,R6; _CalcBCC
    00000F0A 460B                   JSR         @R6
    00000F0C 64C3                   MOV         R12,R4
    00000F0E 65F3                   MOV         R15,R5
    00000F10 7504                   ADD         #4,R5
    00000F12 6403                   MOV         R0,R4
             tskcmd.c       1597    
             tskcmd.c       1598      // 10進数→16進数→ASC変換
             tskcmd.c       1599      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1600    
             tskcmd.c       1601      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
             tskcmd.c       1602      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
             tskcmd.c       1603      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    00000F14 7D04                   ADD         #4,R13
    00000F16 D749                   MOV.L       L1364+62,R7; _DectoHexASC
    00000F18 470B                   JSR         @R7
    00000F1A 66F3                   MOV         R15,R6
    00000F1C 3BF14004               MOV.B       @(4:12,R15),R11; bcch
    00000F20 3EB1009E               MOV.B       R11,@(158:12,R14); cntl->buf[]
    00000F24 32F14000               MOV.B       @(0:12,R15),R2; bccl
    00000F28 3E21009F               MOV.B       R2,@(159:12,R14); cntl->buf[]
    00000F2C 3AD12025               MOV.L       R13,@(148:12,R10); (cntl)->siz
    00000F30              L220:
    00000F30 7F08                   ADD         #8,R15
    00000F32 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1604    }
    00000F34 006B                   RTS/N
             tskcmd.c       1605    /***********************************************************************
             tskcmd.c       1606    * 
             tskcmd.c       1607    * [概要]  応答データ作成
             tskcmd.c       1608    * [引数]  
             tskcmd.c       1609    * [戻値]  −
             tskcmd.c       1610    * 
             tskcmd.c       1611    ***********************************************************************/
             tskcmd.c       1612    void CmdMakeResponseInt( ST_CNTLDATA* cntl, UB anum, const char* p1, INT p2, INT p3 )
    00000F36              _CmdMakeResponseInt:             ; function: CmdMakeResponseInt
                                                           ; frame size=52
    00000F36 49F0                   MOVMU.L     R9,@-R15
    00000F38 7FF8                   ADD         #-8,R15
    00000F3A 6B63                   MOV         R6,R11
    00000F3C E63C                   MOV         #60,R6     ; H'0000003C
    00000F3E 6E53                   MOV         R5,R14
    00000F40 E500                   MOV         #0,R5      ; H'00000000
    00000F42 D92F                   MOV.L       L1364+2,R9 ; __$rspbuf
             tskcmd.c       1613    {
             tskcmd.c       1614      INT  len;
             tskcmd.c       1615      UB bcc;
             tskcmd.c       1616      UB bcch;
             tskcmd.c       1617      UB bccl;
             tskcmd.c       1618    
             tskcmd.c       1619      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00000F44 6C73                   MOV         R7,R12
    00000F46 6A43                   MOV         R4,R10
    00000F48 D12E                   MOV.L       L1364+6,R1 ; _memset
    00000F4A 410B                   JSR         @R1
    00000F4C 6493                   MOV         R9,R4
             tskcmd.c       1620    
             tskcmd.c       1621      if(( anum < PARAM1 )||( anum > PARAM3 ))    return;
    00000F4E 6DEC                   EXTU.B      R14,R13
    00000F50 E201                   MOV         #1,R2      ; H'00000001
    00000F52 3D23                   CMP/GE      R2,R13
    00000F54 8B50                   BF          L242
    00000F56 E203                   MOV         #3,R2      ; H'00000003
    00000F58 3D27                   CMP/GT      R2,R13
    00000F5A 894D                   BT          L242
             tskcmd.c       1622    
             tskcmd.c       1623      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%0d,%0d" , p1, p2, p3);
    00000F5C 60D3                   MOV         R13,R0
    00000F5E 8803                   CMP/EQ      #3,R0
    00000F60 8B0A                   BF          L245
    00000F62 7FFC                   ADD         #-4,R15
    00000F64 54FA                   MOV.L       @(40,R15),R4
    00000F66 2F42                   MOV.L       R4,@R15
    00000F68 2FC6                   MOV.L       R12,@-R15
    00000F6A 2FB6                   MOV.L       R11,@-R15
    00000F6C D534                   MOV.L       L1364+66,R5; L1492
    00000F6E 2F56                   MOV.L       R5,@-R15
    00000F70 D626                   MOV.L       L1364+14,R6; _sprintf
    00000F72 460B                   JSR         @R6
    00000F74 6493                   MOV         R9,R4
    00000F76 7F10                   ADD         #16,R15
    00000F78              L245:
             tskcmd.c       1624      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%0d"     , p1, p2);
    00000F78 60D3                   MOV         R13,R0
    00000F7A 8802                   CMP/EQ      #2,R0
    00000F7C 8B07                   BF          L247
    00000F7E 2FC6                   MOV.L       R12,@-R15
    00000F80 2FB6                   MOV.L       R11,@-R15
    00000F82 D730                   MOV.L       L1364+70,R7; L1493
    00000F84 2F76                   MOV.L       R7,@-R15
    00000F86 DE21                   MOV.L       L1364+14,R14; _sprintf
    00000F88 4E0B                   JSR         @R14
    00000F8A 6493                   MOV         R9,R4
    00000F8C 7F0C                   ADD         #12,R15
    00000F8E              L247:
             tskcmd.c       1625      if( anum == PARAM1 )        sprintf(rspbuf, "%s"         , p1);
    00000F8E 60D3                   MOV         R13,R0
    00000F90 8801                   CMP/EQ      #1,R0
    00000F92 8B06                   BF          L249
    00000F94 2FB6                   MOV.L       R11,@-R15
    00000F96 D125                   MOV.L       L1364+46,R1; L1484
    00000F98 2F16                   MOV.L       R1,@-R15
    00000F9A D51C                   MOV.L       L1364+14,R5; _sprintf
    00000F9C 450B                   JSR         @R5
    00000F9E 6493                   MOV         R9,R4
    00000FA0 7F08                   ADD         #8,R15
    00000FA2              L249:
             tskcmd.c       1626      
             tskcmd.c       1627      len = strlen(&rspbuf);
    00000FA2 D623                   MOV.L       L1364+50,R6; _strlen
    00000FA4 460B                   JSR         @R6
    00000FA6 6493                   MOV         R9,R4
             tskcmd.c       1628      cntl->rsp.buf[0] = STX;                         // STX
             tskcmd.c       1629      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
    00000FA8 6593                   MOV         R9,R5
    00000FAA E99D                   MOV         #-99,R9    ; H'FFFFFF9D
    00000FAC E702                   MOV         #2,R7      ; H'00000002
    00000FAE 699C                   EXTU.B      R9,R9
    00000FB0 3A71009C               MOV.B       R7,@(156:12,R10); cntl->buf[]
    00000FB4 6CA3                   MOV         R10,R12
    00000FB6 3C9C                   ADD         R9,R12
    00000FB8 6D03                   MOV         R0,R13
    00000FBA 6603                   MOV         R0,R6
    00000FBC DB1D                   MOV.L       L1364+54,R11; _memcpy
    00000FBE 4B0B                   JSR         @R11
    00000FC0 64C3                   MOV         R12,R4
             tskcmd.c       1630      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    00000FC2 6EA3                   MOV         R10,R14
    00000FC4 3EDC                   ADD         R13,R14
    00000FC6 E103                   MOV         #3,R1      ; H'00000003
             tskcmd.c       1631    
             tskcmd.c       1632      // BCC計算
             tskcmd.c       1633      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
    00000FC8 65D3                   MOV         R13,R5
    00000FCA 3E11009D               MOV.B       R1,@(157:12,R14); cntl->buf[]
    00000FCE 7501                   ADD         #1,R5
    00000FD0 D619                   MOV.L       L1364+58,R6; _CalcBCC
    00000FD2 460B                   JSR         @R6
    00000FD4 64C3                   MOV         R12,R4
    00000FD6 65F3                   MOV         R15,R5
    00000FD8 7504                   ADD         #4,R5
    00000FDA 6403                   MOV         R0,R4
             tskcmd.c       1634    
             tskcmd.c       1635      // 10進数→16進数→ASC変換
             tskcmd.c       1636      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1637    
             tskcmd.c       1638      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
             tskcmd.c       1639      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
             tskcmd.c       1640      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    00000FDC 7D04                   ADD         #4,R13
    00000FDE D717                   MOV.L       L1364+62,R7; _DectoHexASC
    00000FE0 470B                   JSR         @R7
    00000FE2 66F3                   MOV         R15,R6
    00000FE4 3BF14004               MOV.B       @(4:12,R15),R11; bcch
    00000FE8 3EB1009E               MOV.B       R11,@(158:12,R14); cntl->buf[]
    00000FEC 32F14000               MOV.B       @(0:12,R15),R2; bccl
    00000FF0 3E21009F               MOV.B       R2,@(159:12,R14); cntl->buf[]
    00000FF4 3AD12025               MOV.L       R13,@(148:12,R10); (cntl)->siz
    00000FF8              L242:
    00000FF8 7F08                   ADD         #8,R15
    00000FFA 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1641    }
    00000FFC 006B                   RTS/N
    00000FFE              L1364:
    00000FFE 00000002               .RES.W      1
    00001000 <00000000>             .DATA.L     __$rspbuf
    00001004 <00000000>             .DATA.L     _memset
    00001008 <00000000>             .DATA.L     L1485
    0000100C <00000000>             .DATA.L     _sprintf
    00001010 <00000000>             .DATA.L     L1486
    00001014 <00000000>             .DATA.L     L1487
    00001018 <00000000>             .DATA.L     L1488
    0000101C <00000000>             .DATA.L     L1489
    00001020 <00000000>             .DATA.L     L1490
    00001024 <00000000>             .DATA.L     L1491
    00001028 <00000000>             .DATA.L     L1483
    0000102C <00000000>             .DATA.L     L1484
    00001030 <00000000>             .DATA.L     _strlen
    00001034 <00000000>             .DATA.L     _memcpy
    00001038 <00000000>             .DATA.L     _CalcBCC
    0000103C <00000000>             .DATA.L     _DectoHexASC
    00001040 <00000000>             .DATA.L     L1492
    00001044 <00000000>             .DATA.L     L1493
             tskcmd.c       1642    /***********************************************************************
             tskcmd.c       1643    * 
             tskcmd.c       1644    * [概要]  応答データ作成(入力カウンタ読み出し用)
             tskcmd.c       1645    * [引数]  
             tskcmd.c       1646    * [戻値]  −
             tskcmd.c       1647    * 
             tskcmd.c       1648    ***********************************************************************/
             tskcmd.c       1649    void CmdMakeResponseCount( ST_CNTLDATA* cntl, UB anum, const char* p1, INT p2, INT p3, UINT p4 )
    00001048              _CmdMakeResponseCount:           ; function: CmdMakeResponseCount
                                                           ; frame size=52
    00001048 4AF0                   MOVMU.L     R10,@-R15
    0000104A 7FF8                   ADD         #-8,R15
    0000104C 6C63                   MOV         R6,R12
    0000104E E63C                   MOV         #60,R6     ; H'0000003C
    00001050 DAA2                   MOV.L       L1365,R10  ; __$rspbuf
    00001052 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       1650    {
             tskcmd.c       1651      INT  len;
             tskcmd.c       1652      UB bcc;
             tskcmd.c       1653      UB bcch;
             tskcmd.c       1654      UB bccl;
             tskcmd.c       1655    
             tskcmd.c       1656      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00001054 6D73                   MOV         R7,R13
    00001056 6B43                   MOV         R4,R11
    00001058 D1A1                   MOV.L       L1365+4,R1 ; _memset
    0000105A 410B                   JSR         @R1
    0000105C 64A3                   MOV         R10,R4
             tskcmd.c       1657      sprintf(rspbuf, "%s,%04X,%0d,%0u" , p1, p2, p3, p4);
    0000105E 7FFC                   ADD         #-4,R15
    00001060 54FA                   MOV.L       @(40,R15),R4
    00001062 2F42                   MOV.L       R4,@R15
    00001064 7FFC                   ADD         #-4,R15
    00001066 55FA                   MOV.L       @(40,R15),R5
    00001068 2F52                   MOV.L       R5,@R15
    0000106A 2FD6                   MOV.L       R13,@-R15
    0000106C 2FC6                   MOV.L       R12,@-R15
    0000106E D69D                   MOV.L       L1365+8,R6 ; L1494
    00001070 2F66                   MOV.L       R6,@-R15
    00001072 D79D                   MOV.L       L1365+12,R7; _sprintf
    00001074 470B                   JSR         @R7
    00001076 64A3                   MOV         R10,R4
    00001078 7F14                   ADD         #20,R15
    0000107A EE9D                   MOV         #-99,R14   ; H'FFFFFF9D
             tskcmd.c       1658      
             tskcmd.c       1659      len = strlen(&rspbuf);
             tskcmd.c       1660      cntl->rsp.buf[0] = STX;                         // STX
    0000107C ED02                   MOV         #2,R13     ; H'00000002
    0000107E 6EEC                   EXTU.B      R14,R14
    00001080 DC9A                   MOV.L       L1365+16,R12; _strlen
    00001082 4C0B                   JSR         @R12
    00001084 64A3                   MOV         R10,R4
    00001086 3BD1009C               MOV.B       R13,@(156:12,R11); cntl->buf[]
    0000108A 6DB3                   MOV         R11,R13
    0000108C 3DEC                   ADD         R14,R13
    0000108E 6C03                   MOV         R0,R12
    00001090 66C3                   MOV         R12,R6
             tskcmd.c       1661      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
    00001092 65A3                   MOV         R10,R5
    00001094 D196                   MOV.L       L1365+20,R1; _memcpy
    00001096 410B                   JSR         @R1
    00001098 64D3                   MOV         R13,R4
             tskcmd.c       1662      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    0000109A 6EB3                   MOV         R11,R14
    0000109C 3ECC                   ADD         R12,R14
    0000109E E703                   MOV         #3,R7      ; H'00000003
             tskcmd.c       1663    
             tskcmd.c       1664      // BCC計算
             tskcmd.c       1665      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
    000010A0 65C3                   MOV         R12,R5
    000010A2 3E71009D               MOV.B       R7,@(157:12,R14); cntl->buf[]
    000010A6 7501                   ADD         #1,R5
    000010A8 DA92                   MOV.L       L1365+24,R10; _CalcBCC
    000010AA 4A0B                   JSR         @R10
    000010AC 64D3                   MOV         R13,R4
    000010AE 65F3                   MOV         R15,R5
    000010B0 7504                   ADD         #4,R5
    000010B2 6403                   MOV         R0,R4
             tskcmd.c       1666    
             tskcmd.c       1667      // 10進数→16進数→ASC変換
             tskcmd.c       1668      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1669    
             tskcmd.c       1670      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
             tskcmd.c       1671      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
             tskcmd.c       1672      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    000010B4 7C04                   ADD         #4,R12
    000010B6 D190                   MOV.L       L1365+28,R1; _DectoHexASC
    000010B8 410B                   JSR         @R1
    000010BA 66F3                   MOV         R15,R6
    000010BC 32F14004               MOV.B       @(4:12,R15),R2; bcch
    000010C0 3E21009E               MOV.B       R2,@(158:12,R14); cntl->buf[]
    000010C4 32F14000               MOV.B       @(0:12,R15),R2; bccl
    000010C8 3E21009F               MOV.B       R2,@(159:12,R14); cntl->buf[]
    000010CC 3BC12025               MOV.L       R12,@(148:12,R11); (cntl)->siz
    000010D0 7F08                   ADD         #8,R15
    000010D2 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       1673    }
    000010D4 006B                   RTS/N
             tskcmd.c       1674    /***********************************************************************
             tskcmd.c       1675    * 
             tskcmd.c       1676    * [概要]  応答データ作成
             tskcmd.c       1677    * [引数]  
             tskcmd.c       1678    * [戻値]  −
             tskcmd.c       1679    * 
             tskcmd.c       1680    ***********************************************************************/
             tskcmd.c       1681    void CmdMakeResponseStr( ST_CNTLDATA* cntl, UB anum, const char* cmd, INT err, char* str2, char* str3 )
    000010D6              _CmdMakeResponseStr:             ; function: CmdMakeResponseStr
                                                           ; frame size=56
    000010D6 49F0                   MOVMU.L     R9,@-R15
    000010D8 7FF8                   ADD         #-8,R15
    000010DA 6B63                   MOV         R6,R11
    000010DC E63C                   MOV         #60,R6     ; H'0000003C
    000010DE 6E53                   MOV         R5,R14
    000010E0 E500                   MOV         #0,R5      ; H'00000000
    000010E2 D97E                   MOV.L       L1365,R9   ; __$rspbuf
             tskcmd.c       1682    {
             tskcmd.c       1683      INT  len;
             tskcmd.c       1684      UB bcc;
             tskcmd.c       1685      UB bcch;
             tskcmd.c       1686      UB bccl;
             tskcmd.c       1687    
             tskcmd.c       1688      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    000010E4 6C73                   MOV         R7,R12
    000010E6 6A43                   MOV         R4,R10
    000010E8 D17D                   MOV.L       L1365+4,R1 ; _memset
    000010EA 410B                   JSR         @R1
    000010EC 6493                   MOV         R9,R4
             tskcmd.c       1689    
             tskcmd.c       1690      if(( anum < PARAM1 )||( anum > PARAM4 ))    return;
    000010EE 6DEC                   EXTU.B      R14,R13
    000010F0 E201                   MOV         #1,R2      ; H'00000001
    000010F2 3D23                   CMP/GE      R2,R13
    000010F4 8B61                   BF          L253
    000010F6 E204                   MOV         #4,R2      ; H'00000004
    000010F8 3D27                   CMP/GT      R2,R13
    000010FA 895E                   BT          L253
             tskcmd.c       1691    
             tskcmd.c       1692      if( anum == PARAM4 )        sprintf(rspbuf, "%s,%04X,%s,%s", cmd, err, str2, str3);
    000010FC 60D3                   MOV         R13,R0
    000010FE 8804                   CMP/EQ      #4,R0
    00001100 8B0D                   BF          L256
    00001102 7FFC                   ADD         #-4,R15
    00001104 54FB                   MOV.L       @(44,R15),R4
    00001106 2F42                   MOV.L       R4,@R15
    00001108 7FFC                   ADD         #-4,R15
    0000110A 55FB                   MOV.L       @(44,R15),R5
    0000110C 2F52                   MOV.L       R5,@R15
    0000110E 2FC6                   MOV.L       R12,@-R15
    00001110 2FB6                   MOV.L       R11,@-R15
    00001112 D67A                   MOV.L       L1365+32,R6; L1495
    00001114 2F66                   MOV.L       R6,@-R15
    00001116 D774                   MOV.L       L1365+12,R7; _sprintf
    00001118 470B                   JSR         @R7
    0000111A 6493                   MOV         R9,R4
    0000111C 7F14                   ADD         #20,R15
    0000111E              L256:
             tskcmd.c       1693      if( anum == PARAM3 )        sprintf(rspbuf, "%s,%04X,%s",    cmd, err, str2);
    0000111E 60D3                   MOV         R13,R0
    00001120 8803                   CMP/EQ      #3,R0
    00001122 8B0A                   BF          L258
    00001124 7FFC                   ADD         #-4,R15
    00001126 5EFA                   MOV.L       @(40,R15),R14
    00001128 2FE2                   MOV.L       R14,@R15
    0000112A 2FC6                   MOV.L       R12,@-R15
    0000112C 2FB6                   MOV.L       R11,@-R15
    0000112E D174                   MOV.L       L1365+36,R1; L1496
    00001130 2F16                   MOV.L       R1,@-R15
    00001132 D56D                   MOV.L       L1365+12,R5; _sprintf
    00001134 450B                   JSR         @R5
    00001136 6493                   MOV         R9,R4
    00001138 7F10                   ADD         #16,R15
    0000113A              L258:
             tskcmd.c       1694      if( anum == PARAM2 )        sprintf(rspbuf, "%s,%04X",       cmd, err);
    0000113A 60D3                   MOV         R13,R0
    0000113C 8802                   CMP/EQ      #2,R0
    0000113E 8B07                   BF          L260
    00001140 2FC6                   MOV.L       R12,@-R15
    00001142 2FB6                   MOV.L       R11,@-R15
    00001144 D66F                   MOV.L       L1365+40,R6; L1483
    00001146 2F66                   MOV.L       R6,@-R15
    00001148 D767                   MOV.L       L1365+12,R7; _sprintf
    0000114A 470B                   JSR         @R7
    0000114C 6493                   MOV         R9,R4
    0000114E 7F0C                   ADD         #12,R15
    00001150              L260:
             tskcmd.c       1695      if( anum == PARAM1 )        sprintf(rspbuf, "%s",            cmd);
    00001150 60D3                   MOV         R13,R0
    00001152 8801                   CMP/EQ      #1,R0
    00001154 8B06                   BF          L262
    00001156 2FB6                   MOV.L       R11,@-R15
    00001158 DB6B                   MOV.L       L1365+44,R11; L1484
    0000115A 2FB6                   MOV.L       R11,@-R15
    0000115C DC62                   MOV.L       L1365+12,R12; _sprintf
    0000115E 4C0B                   JSR         @R12
    00001160 6493                   MOV         R9,R4
    00001162 7F08                   ADD         #8,R15
    00001164              L262:
             tskcmd.c       1696    
             tskcmd.c       1697      len = strlen(&rspbuf);
    00001164 6493                   MOV         R9,R4
             tskcmd.c       1698      cntl->rsp.buf[0] = STX;                         // STX
    00001166 DD61                   MOV.L       L1365+16,R13; _strlen
    00001168 4D0B                   JSR         @R13
    0000116A EE02                   MOV         #2,R14     ; H'00000002
    0000116C E19D                   MOV         #-99,R1    ; H'FFFFFF9D
    0000116E 6D03                   MOV         R0,R13
    00001170 611C                   EXTU.B      R1,R1
    00001172 3AE1009C               MOV.B       R14,@(156:12,R10); cntl->buf[]
             tskcmd.c       1699      memcpy( &cntl->rsp.buf[1], &rspbuf, len );      // コマンド〜データまでコピー
    00001176 6593                   MOV         R9,R5
    00001178 E903                   MOV         #3,R9      ; H'00000003
    0000117A 6BA3                   MOV         R10,R11
    0000117C 3B1C                   ADD         R1,R11
             tskcmd.c       1700      cntl->rsp.buf[(len+1)] = ETX;                   // ETX
    0000117E 6EA3                   MOV         R10,R14
    00001180 3E0C                   ADD         R0,R14
    00001182 6603                   MOV         R0,R6
    00001184 D75A                   MOV.L       L1365+20,R7; _memcpy
    00001186 470B                   JSR         @R7
    00001188 64B3                   MOV         R11,R4
    0000118A 3E91009D               MOV.B       R9,@(157:12,R14); cntl->buf[]
             tskcmd.c       1701    
             tskcmd.c       1702      // BCC計算
             tskcmd.c       1703      bcc = CalcBCC( &cntl->rsp.buf[1], (len+1));
    0000118E 65D3                   MOV         R13,R5
    00001190 7501                   ADD         #1,R5
    00001192 64B3                   MOV         R11,R4
             tskcmd.c       1704    
             tskcmd.c       1705      // 10進数→16進数→ASC変換
             tskcmd.c       1706      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       1707    
             tskcmd.c       1708      cntl->rsp.buf[(len+2)] = bcch;                  // BCC1
             tskcmd.c       1709      cntl->rsp.buf[(len+3)] = bccl;                  // BCC2
             tskcmd.c       1710      cntl->rsp.siz          = len+4;                 // stx,etx,bcc1,bcc2の4byte分をレングスに加算
    00001194 DB57                   MOV.L       L1365+24,R11; _CalcBCC
    00001196 4B0B                   JSR         @R11
    00001198 7D04                   ADD         #4,R13
    0000119A 65F3                   MOV         R15,R5
    0000119C 7504                   ADD         #4,R5
    0000119E 6403                   MOV         R0,R4
    000011A0 DC55                   MOV.L       L1365+28,R12; _DectoHexASC
    000011A2 4C0B                   JSR         @R12
    000011A4 66F3                   MOV         R15,R6
    000011A6 31F14004               MOV.B       @(4:12,R15),R1; bcch
    000011AA 3E11009E               MOV.B       R1,@(158:12,R14); cntl->buf[]
    000011AE 32F14000               MOV.B       @(0:12,R15),R2; bccl
    000011B2 3E21009F               MOV.B       R2,@(159:12,R14); cntl->buf[]
    000011B6 3AD12025               MOV.L       R13,@(148:12,R10); (cntl)->siz
    000011BA              L253:
    000011BA 7F08                   ADD         #8,R15
    000011BC 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       1711    }
    000011BE 006B                   RTS/N
             tskcmd.c       1712    /***********************************************************************
             tskcmd.c       1713    * 
             tskcmd.c       1714    * [概要]  受信パラメータチェック
             tskcmd.c       1715    * [引数]  msg:コマンドＩＤ、anum:パラメータ数、args:パラメータデータアドレス
             tskcmd.c       1716    * [戻値]  状態
             tskcmd.c       1717    * 
             tskcmd.c       1718    ***********************************************************************/
             tskcmd.c       1719    static ER ParamDataCheck( UB msg , UB anum ,  const char** args )
    000011C0              __$ParamDataCheck:               ; function: __$ParamDataCheck
                                                           ; frame size=20
    000011C0 4BF0                   MOVMU.L     R11,@-R15
    000011C2 644C                   EXTU.B      R4,R4
             tskcmd.c       1720    {
             tskcmd.c       1721      INT ParDat;
             tskcmd.c       1722      INT Loop;
             tskcmd.c       1723      INT argnum;
             tskcmd.c       1724    
             tskcmd.c       1725      // パラメータ過不足チェック
             tskcmd.c       1726      if( anum < DATCHK_TBL[msg].argnum )     return( E_PAR_SHORTG );     // パラメータ数過不足
    000011C4 00000324               MOVI20      #804,R0    ; H'00000324
    000011C8 4480                   MULR        R0,R4
    000011CA D250                   MOV.L       L1365+48,R2; _DATCHK_TBL
    000011CC 655C                   EXTU.B      R5,R5
    000011CE 342C                   ADD         R2,R4
    000011D0 3B418000               MOVU.B      @(0,R4),R11; DATCHK_TBL[].argnum
    000011D4 35B3                   CMP/GE      R11,R5
    000011D6 8D03                   BT/S        L265
    000011D8 6163                   MOV         R6,R1
    000011DA E007                   MOV         #7,R0      ; H'00000007
    000011DC A027                   BRA         L266
    000011DE 4018                   SHLL8       R0
    000011E0              L265:
             tskcmd.c       1727    
             tskcmd.c       1728      // パラメータテーブル定義分の数値チェック
             tskcmd.c       1729      argnum = DATCHK_TBL[msg].argnum;
             tskcmd.c       1730    
             tskcmd.c       1731      // コマンド以外のパラメータチェック
             tskcmd.c       1732      if( argnum > 1 )
    000011E0 E201                   MOV         #1,R2      ; H'00000001
    000011E2 3B27                   CMP/GT      R2,R11
    000011E4 8B22                   BF          L268
    000011E6 7104                   ADD         #4,R1
    000011E8 740C                   ADD         #12,R4
    000011EA 6C13                   MOV         R1,R12
             tskcmd.c       1733      {
             tskcmd.c       1734          // anumは、コマンド分も含まれたパラメータ数なので、コマンド以外のパラメータの上下限についてチェック
             tskcmd.c       1735          for( Loop = PARAM1; Loop < argnum; Loop++ )
    000011EC EE01                   MOV         #1,R14     ; H'00000001
    000011EE 6D43                   MOV         R4,R13
    000011F0              L269:
    000011F0 3EB3                   CMP/GE      R11,R14
    000011F2 891B                   BT          L268
             tskcmd.c       1736          {
             tskcmd.c       1737              if( 
    000011F4 62D2                   MOV.L       @R13,R2    ; DATCHK_TBL[].range[].min
    000011F6 2228                   TST         R2,R2
    000011F8 8B02                   BF          L272
    000011FA 52D1                   MOV.L       @(4,R13),R2; DATCHK_TBL[].range[].max
    000011FC 2228                   TST         R2,R2
    000011FE 890C                   BT          L273
    00001200              L272:
             tskcmd.c       1738                  ( DATCHK_TBL[msg].range[Loop].min != CLR )||
             tskcmd.c       1739                  ( DATCHK_TBL[msg].range[Loop].max != CLR )
             tskcmd.c       1740              )
             tskcmd.c       1741              {
             tskcmd.c       1742                  // パラメータ範囲チェック
             tskcmd.c       1743                  ParDat = Atoi( args[Loop], N_DEC, sizeof(INT), N_SIG );
    00001200 64C2                   MOV.L       @R12,R4    ; args[]
    00001202 E701                   MOV         #1,R7      ; H'00000001
    00001204 E604                   MOV         #4,R6      ; H'00000004
    00001206 D142                   MOV.L       L1365+52,R1; _Atoi
    00001208 410B                   JSR         @R1
    0000120A E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       1744                  if( 
    0000120C 62D2                   MOV.L       @R13,R2    ; DATCHK_TBL[].range[].min
    0000120E 3023                   CMP/GE      R2,R0
    00001210 8F07                   BF/S        L275
    00001212 6603                   MOV         R0,R6
    00001214 52D1                   MOV.L       @(4,R13),R2; DATCHK_TBL[].range[].max
    00001216 3627                   CMP/GT      R2,R6
    00001218 8903                   BT          L275
    0000121A              L273:
    0000121A 7E01                   ADD         #1,R14
    0000121C 7D08                   ADD         #8,R13
    0000121E AFE7                   BRA         L269
    00001220 7C04                   ADD         #4,R12
    00001222              L275:
             tskcmd.c       1745                      ( ParDat < DATCHK_TBL[msg].range[Loop].min )||
             tskcmd.c       1746                      ( ParDat > DATCHK_TBL[msg].range[Loop].max )
             tskcmd.c       1747                  )
             tskcmd.c       1748                  {
             tskcmd.c       1749                      return( ( E_PAR_OUTRNG + Loop ));                   // パラメータ範囲異常
    00001222 E208                   MOV         #8,R2      ; H'00000008
    00001224 4218                   SHLL8       R2
    00001226 3E2C                   ADD         R2,R14
    00001228 A001                   BRA         L266
    0000122A 60E3                   MOV         R14,R0
    0000122C              L268:
             tskcmd.c       1750                  }
             tskcmd.c       1751              }
             tskcmd.c       1752          }
             tskcmd.c       1753      }
             tskcmd.c       1754    
             tskcmd.c       1755      return( E_SUCCESS );
    0000122C E000                   MOV         #0,R0      ; H'00000000
    0000122E              L266:
    0000122E 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       1756    }
    00001230 006B                   RTS/N
             tskcmd.c       1757    
             tskcmd.c       1758    
             tskcmd.c       1759    
             tskcmd.c       1760    //
             tskcmd.c       1761    //
             tskcmd.c       1762    //
             tskcmd.c       1763    //
             tskcmd.c       1764    //
             tskcmd.c       1765    //
             tskcmd.c       1766    //
             tskcmd.c       1767    //
             tskcmd.c       1768    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       1769    /*  基本コマンド   ここから                                                                                                                                                                                     基本コマンド   */
             tskcmd.c       1770    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       1771    
             tskcmd.c       1772    /***********************************************************************
             tskcmd.c       1773    * 
             tskcmd.c       1774    * [概要]  ダミールーチン
             tskcmd.c       1775    * [引数]  cmd:コマンドリクエスト電文
             tskcmd.c       1776    * [戻値]  −
             tskcmd.c       1777    * 
             tskcmd.c       1778    ***********************************************************************/
             tskcmd.c       1779    static void CmdDummy( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001232              __$CmdDummy:                     ; function: __$CmdDummy
                                                           ; frame size=0
             tskcmd.c       1780    {
             tskcmd.c       1781      // 必要であればエラー出力
             tskcmd.c       1782    }
    00001232 006B                   RTS/N
             tskcmd.c       1783    
             tskcmd.c       1784    
             tskcmd.c       1785    static    UB temp1;
             tskcmd.c       1786    static    UB temp2;
             tskcmd.c       1787    
             tskcmd.c       1788    /***********************************************************************
             tskcmd.c       1789    *
             tskcmd.c       1790    * [概要]  
             tskcmd.c       1791    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1792    * [戻値]  -
             tskcmd.c       1793    * 
             tskcmd.c       1794    ***********************************************************************/
             tskcmd.c       1795    static void CmdTmpSet  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001234              __$CmdTmpSet:                    ; function: __$CmdTmpSet
                                                           ; frame size=28
    00001234 4F22                   STS.L       PR,@-R15
             tskcmd.c       1796    {
             tskcmd.c       1797      temp1 = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001236 5461                   MOV.L       @(4,R6),R4 ; args[]
    00001238 E701                   MOV         #1,R7      ; H'00000001
    0000123A E50A                   MOV         #10,R5     ; H'0000000A
    0000123C D134                   MOV.L       L1365+52,R1; _Atoi
    0000123E 410B                   JSR         @R1
    00001240 6673                   MOV         R7,R6
    00001242 D234                   MOV.L       L1365+56,R2; __$temp1
             tskcmd.c       1798      
             tskcmd.c       1799      mbx_send    (
             tskcmd.c       1800                      ID_TSK_CMD,       // tskid
             tskcmd.c       1801                      ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       1802                      ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       1803                      NO_DATA,             // prid1
             tskcmd.c       1804                      NO_DATA,             // bcid
             tskcmd.c       1805                      ID_MSG_TMPSET_HS,    // msgid
             tskcmd.c       1806                      NO_DATA,             // sts
             tskcmd.c       1807                      NO_DATA,             // sts2/inf2
             tskcmd.c       1808                      (UB *)&temp1,        // data
             tskcmd.c       1809                      sizeof( temp1 )      // siz
             tskcmd.c       1810                  );
    00001244 E401                   MOV         #1,R4      ; H'00000001
    00001246 2200                   MOV.B       R0,@R2     ; temp1
    00001248 2F46                   MOV.L       R4,@-R15
    0000124A 2F26                   MOV.L       R2,@-R15
    0000124C E4FF                   MOV         #-1,R4     ; H'FFFFFFFF
    0000124E 644C                   EXTU.B      R4,R4
    00001250 6743                   MOV         R4,R7
    00001252 2F46                   MOV.L       R4,@-R15
    00001254 2F46                   MOV.L       R4,@-R15
    00001256 E11A                   MOV         #26,R1     ; H'0000001A
    00001258 2F16                   MOV.L       R1,@-R15
    0000125A 2F46                   MOV.L       R4,@-R15
    0000125C E60E                   MOV         #14,R6     ; H'0000000E
    0000125E E50D                   MOV         #13,R5     ; H'0000000D
    00001260 D22D                   MOV.L       L1365+60,R2; _mbx_send
    00001262 420B                   JSR         @R2
    00001264 E405                   MOV         #5,R4      ; H'00000005
    00001266 7F18                   ADD         #24,R15
    00001268 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1811    }
    0000126A 006B                   RTS/N
             tskcmd.c       1812    
             tskcmd.c       1813    /***********************************************************************
             tskcmd.c       1814    *
             tskcmd.c       1815    * [概要]  
             tskcmd.c       1816    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1817    * [戻値]  -
             tskcmd.c       1818    * 
             tskcmd.c       1819    ***********************************************************************/
             tskcmd.c       1820    static void CmdTmpGet  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000126C              __$CmdTmpGet:                    ; function: __$CmdTmpGet
                                                           ; frame size=32
    0000126C 4F22                   STS.L       PR,@-R15
    0000126E 7FFC                   ADD         #-4,R15
             tskcmd.c       1821    {
             tskcmd.c       1822      UB dummy = 0;
    00001270 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1823      
             tskcmd.c       1824      mbx_send    (
             tskcmd.c       1825                      ID_TSK_CMD,       // tskid
             tskcmd.c       1826                      ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       1827                      ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       1828                      NO_DATA,             // prid1
             tskcmd.c       1829                      NO_DATA,             // bcid
             tskcmd.c       1830                      ID_MSG_TMPGET_HS,    // msgid
             tskcmd.c       1831                      NO_DATA,             // sts/inf
             tskcmd.c       1832                      NO_DATA,             // sts2/inf2
             tskcmd.c       1833                      (UB *)&dummy,        // data
             tskcmd.c       1834                      sizeof( dummy )      // siz
             tskcmd.c       1835                  );
    00001272 E101                   MOV         #1,R1      ; H'00000001
    00001274 0F04                   MOV.B       R0,@(R0,R15); dummy
    00001276 2F16                   MOV.L       R1,@-R15
    00001278 64F3                   MOV         R15,R4
    0000127A 7404                   ADD         #4,R4
    0000127C 2F46                   MOV.L       R4,@-R15
    0000127E E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001280 655C                   EXTU.B      R5,R5
    00001282 6753                   MOV         R5,R7
    00001284 2F56                   MOV.L       R5,@-R15
    00001286 2F56                   MOV.L       R5,@-R15
    00001288 E61B                   MOV         #27,R6     ; H'0000001B
    0000128A 2F66                   MOV.L       R6,@-R15
    0000128C 2F56                   MOV.L       R5,@-R15
    0000128E E60E                   MOV         #14,R6     ; H'0000000E
    00001290 E50D                   MOV         #13,R5     ; H'0000000D
    00001292 D221                   MOV.L       L1365+60,R2; _mbx_send
    00001294 420B                   JSR         @R2
    00001296 E405                   MOV         #5,R4      ; H'00000005
    00001298 7F1C                   ADD         #28,R15
    0000129A 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1836    }
    0000129C 006B                   RTS/N
             tskcmd.c       1837    
             tskcmd.c       1838    /***********************************************************************
             tskcmd.c       1839    *
             tskcmd.c       1840    * [概要]  
             tskcmd.c       1841    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1842    * [戻値]  -
             tskcmd.c       1843    * 
             tskcmd.c       1844    ***********************************************************************/
             tskcmd.c       1845    static void CmdVini   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000129E              __$CmdVini:                      ; function: __$CmdVini
                                                           ; frame size=32
    0000129E 4F22                   STS.L       PR,@-R15
    000012A0 7FFC                   ADD         #-4,R15
             tskcmd.c       1846    {
             tskcmd.c       1847      ER  result = E_SUCCESS;
             tskcmd.c       1848      UB dumy = CLR;
    000012A2 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1849      
             tskcmd.c       1850      //  データチェック
             tskcmd.c       1851      result = ParamDataCheck( ID_MSG_VALVEOUT_HS, anum, args );
    000012A4 655C                   EXTU.B      R5,R5
    000012A6 0F04                   MOV.B       R0,@(R0,R15); dumy
    000012A8 BF8A                   BSR         __$ParamDataCheck
    000012AA E422                   MOV         #34,R4     ; H'00000022
             tskcmd.c       1852    
             tskcmd.c       1853      //  データ正常か
             tskcmd.c       1854      if( result == E_SUCCESS )
    000012AC 2008                   TST         R0,R0
    000012AE 8B12                   BF          L281
             tskcmd.c       1855      {
             tskcmd.c       1856          mbx_send    (
             tskcmd.c       1857                          ID_TSK_CMD,        // tskid
             tskcmd.c       1858                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1859                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1860                          NO_DATA,             // prid1
             tskcmd.c       1861                          NO_DATA,             // bcid
             tskcmd.c       1862                          ID_MSG_VALVEINI_HS,  // msgid
             tskcmd.c       1863                          NO_DATA,             // sts
             tskcmd.c       1864                          NO_DATA,             // sts2
             tskcmd.c       1865                          (UB *)&dumy,         // data
             tskcmd.c       1866                          sizeof( dumy )       // siz
             tskcmd.c       1867                      );
    000012B0 E101                   MOV         #1,R1      ; H'00000001
    000012B2 2F16                   MOV.L       R1,@-R15
    000012B4 64F3                   MOV         R15,R4
    000012B6 7404                   ADD         #4,R4
    000012B8 2F46                   MOV.L       R4,@-R15
    000012BA E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000012BC 655C                   EXTU.B      R5,R5
    000012BE 6753                   MOV         R5,R7
    000012C0 2F56                   MOV.L       R5,@-R15
    000012C2 2F56                   MOV.L       R5,@-R15
    000012C4 E61D                   MOV         #29,R6     ; H'0000001D
    000012C6 2F66                   MOV.L       R6,@-R15
    000012C8 2F56                   MOV.L       R5,@-R15
    000012CA E60D                   MOV         #13,R6     ; H'0000000D
    000012CC E50C                   MOV         #12,R5     ; H'0000000C
    000012CE D212                   MOV.L       L1365+60,R2; _mbx_send
    000012D0 420B                   JSR         @R2
    000012D2 E405                   MOV         #5,R4      ; H'00000005
    000012D4 7F18                   ADD         #24,R15
    000012D6              L281:
    000012D6 7F04                   ADD         #4,R15
    000012D8 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1868      }
             tskcmd.c       1869    }
    000012DA 006B                   RTS/N
    000012DC              L1365:
    000012DC <00000000>             .DATA.L     __$rspbuf
    000012E0 <00000000>             .DATA.L     _memset
    000012E4 <00000000>             .DATA.L     L1494
    000012E8 <00000000>             .DATA.L     _sprintf
    000012EC <00000000>             .DATA.L     _strlen
    000012F0 <00000000>             .DATA.L     _memcpy
    000012F4 <00000000>             .DATA.L     _CalcBCC
    000012F8 <00000000>             .DATA.L     _DectoHexASC
    000012FC <00000000>             .DATA.L     L1495
    00001300 <00000000>             .DATA.L     L1496
    00001304 <00000000>             .DATA.L     L1483
    00001308 <00000000>             .DATA.L     L1484
    0000130C <00000000>             .DATA.L     _DATCHK_TBL
    00001310 <00000000>             .DATA.L     _Atoi
    00001314 <00000000>             .DATA.L     __$temp1
    00001318 <00000000>             .DATA.L     _mbx_send
             tskcmd.c       1870    
             tskcmd.c       1871    /***********************************************************************
             tskcmd.c       1872    *
             tskcmd.c       1873    * [概要]  
             tskcmd.c       1874    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1875    * [戻値]  -
             tskcmd.c       1876    * 
             tskcmd.c       1877    ***********************************************************************/
             tskcmd.c       1878    static void CmdPini   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000131C              __$CmdPini:                      ; function: __$CmdPini
                                                           ; frame size=32
    0000131C 4F22                   STS.L       PR,@-R15
    0000131E 7FFC                   ADD         #-4,R15
             tskcmd.c       1879    {
             tskcmd.c       1880      ER  result = E_SUCCESS;
             tskcmd.c       1881      UB dumy = CLR;
    00001320 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1882      
             tskcmd.c       1883      //  データチェック
             tskcmd.c       1884      result = ParamDataCheck( ID_MSG_VALVEOUT_HS, anum, args );
    00001322 655C                   EXTU.B      R5,R5
    00001324 0F04                   MOV.B       R0,@(R0,R15); dumy
    00001326 BF4B                   BSR         __$ParamDataCheck
    00001328 E422                   MOV         #34,R4     ; H'00000022
             tskcmd.c       1885    
             tskcmd.c       1886      //  データ正常か
             tskcmd.c       1887      if( result == E_SUCCESS )
    0000132A 2008                   TST         R0,R0
    0000132C 8B12                   BF          L284
             tskcmd.c       1888      {
             tskcmd.c       1889          mbx_send    (
             tskcmd.c       1890                          ID_TSK_CMD,        // tskid
             tskcmd.c       1891                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1892                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1893                          NO_DATA,             // prid1
             tskcmd.c       1894                          NO_DATA,             // bcid
             tskcmd.c       1895                          ID_MSG_PRESSINI_HS,  // msgid
             tskcmd.c       1896                          NO_DATA,             // sts
             tskcmd.c       1897                          NO_DATA,             // sts2
             tskcmd.c       1898                          (UB *)&dumy,         // data
             tskcmd.c       1899                          sizeof( dumy )       // siz
             tskcmd.c       1900                      );
    0000132E E101                   MOV         #1,R1      ; H'00000001
    00001330 2F16                   MOV.L       R1,@-R15
    00001332 64F3                   MOV         R15,R4
    00001334 7404                   ADD         #4,R4
    00001336 2F46                   MOV.L       R4,@-R15
    00001338 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    0000133A 655C                   EXTU.B      R5,R5
    0000133C 6753                   MOV         R5,R7
    0000133E 2F56                   MOV.L       R5,@-R15
    00001340 2F56                   MOV.L       R5,@-R15
    00001342 E61E                   MOV         #30,R6     ; H'0000001E
    00001344 2F66                   MOV.L       R6,@-R15
    00001346 2F56                   MOV.L       R5,@-R15
    00001348 E60D                   MOV         #13,R6     ; H'0000000D
    0000134A E50C                   MOV         #12,R5     ; H'0000000C
    0000134C D2AC                   MOV.L       L1366,R2   ; _mbx_send
    0000134E 420B                   JSR         @R2
    00001350 E405                   MOV         #5,R4      ; H'00000005
    00001352 7F18                   ADD         #24,R15
    00001354              L284:
    00001354 7F04                   ADD         #4,R15
    00001356 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1901      }
             tskcmd.c       1902    }
    00001358 006B                   RTS/N
             tskcmd.c       1903    
             tskcmd.c       1904    /***********************************************************************
             tskcmd.c       1905    *
             tskcmd.c       1906    * [概要]  
             tskcmd.c       1907    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1908    * [戻値]  -
             tskcmd.c       1909    * 
             tskcmd.c       1910    ***********************************************************************/
             tskcmd.c       1911    static void CmdPren   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000135A              __$CmdPren:                      ; function: __$CmdPren
                                                           ; frame size=32
    0000135A 4F22                   STS.L       PR,@-R15
    0000135C 7FFC                   ADD         #-4,R15
             tskcmd.c       1912    {
             tskcmd.c       1913      ER  result = E_SUCCESS;
             tskcmd.c       1914      UB dumy = CLR;
    0000135E E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1915      
             tskcmd.c       1916      //  データチェック
             tskcmd.c       1917      result = ParamDataCheck( ID_MSG_PRESSREN_HS, anum, args );
    00001360 655C                   EXTU.B      R5,R5
    00001362 0F04                   MOV.B       R0,@(R0,R15); dumy
    00001364 BF2C                   BSR         __$ParamDataCheck
    00001366 E41F                   MOV         #31,R4     ; H'0000001F
             tskcmd.c       1918    
             tskcmd.c       1919      //  データ正常か
             tskcmd.c       1920      if( result == E_SUCCESS )
    00001368 2008                   TST         R0,R0
    0000136A 8B12                   BF          L287
             tskcmd.c       1921      {
             tskcmd.c       1922          mbx_send    (
             tskcmd.c       1923                          ID_TSK_CMD,        // tskid
             tskcmd.c       1924                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1925                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1926                          NO_DATA,             // prid1
             tskcmd.c       1927                          NO_DATA,             // bcid
             tskcmd.c       1928                          ID_MSG_PRESSREN_HS,  // msgid
             tskcmd.c       1929                          NO_DATA,             // sts
             tskcmd.c       1930                          NO_DATA,             // sts2
             tskcmd.c       1931                          (UB *)&dumy,         // data
             tskcmd.c       1932                          sizeof( dumy )       // siz
             tskcmd.c       1933                      );
    0000136C E101                   MOV         #1,R1      ; H'00000001
    0000136E 2F16                   MOV.L       R1,@-R15
    00001370 64F3                   MOV         R15,R4
    00001372 7404                   ADD         #4,R4
    00001374 2F46                   MOV.L       R4,@-R15
    00001376 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001378 655C                   EXTU.B      R5,R5
    0000137A 6753                   MOV         R5,R7
    0000137C 2F56                   MOV.L       R5,@-R15
    0000137E 2F56                   MOV.L       R5,@-R15
    00001380 E61F                   MOV         #31,R6     ; H'0000001F
    00001382 2F66                   MOV.L       R6,@-R15
    00001384 2F56                   MOV.L       R5,@-R15
    00001386 E60D                   MOV         #13,R6     ; H'0000000D
    00001388 E50C                   MOV         #12,R5     ; H'0000000C
    0000138A D29D                   MOV.L       L1366,R2   ; _mbx_send
    0000138C 420B                   JSR         @R2
    0000138E E405                   MOV         #5,R4      ; H'00000005
    00001390 7F18                   ADD         #24,R15
    00001392              L287:
    00001392 7F04                   ADD         #4,R15
    00001394 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1934      }
             tskcmd.c       1935    }
    00001396 006B                   RTS/N
             tskcmd.c       1936    
             tskcmd.c       1937    /***********************************************************************
             tskcmd.c       1938    *
             tskcmd.c       1939    * [概要]  
             tskcmd.c       1940    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1941    * [戻値]  -
             tskcmd.c       1942    * 
             tskcmd.c       1943    ***********************************************************************/
             tskcmd.c       1944    static void CmdPtan   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001398              __$CmdPtan:                      ; function: __$CmdPtan
                                                           ; frame size=32
    00001398 4F22                   STS.L       PR,@-R15
    0000139A 7FFC                   ADD         #-4,R15
             tskcmd.c       1945    {
             tskcmd.c       1946      ER  result = E_SUCCESS;
             tskcmd.c       1947      UB dumy = CLR;
    0000139C E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1948      
             tskcmd.c       1949      //  データチェック
             tskcmd.c       1950      result = ParamDataCheck( ID_MSG_PRESSTAN_HS, anum, args );
    0000139E 655C                   EXTU.B      R5,R5
    000013A0 0F04                   MOV.B       R0,@(R0,R15); dumy
    000013A2 BF0D                   BSR         __$ParamDataCheck
    000013A4 E420                   MOV         #32,R4     ; H'00000020
             tskcmd.c       1951    
             tskcmd.c       1952      //  データ正常か
             tskcmd.c       1953      if( result == E_SUCCESS )
    000013A6 2008                   TST         R0,R0
    000013A8 8B12                   BF          L290
             tskcmd.c       1954      {
             tskcmd.c       1955          mbx_send    (
             tskcmd.c       1956                          ID_TSK_CMD,        // tskid
             tskcmd.c       1957                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1958                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1959                          NO_DATA,             // prid1
             tskcmd.c       1960                          NO_DATA,             // bcid
             tskcmd.c       1961                          ID_MSG_PRESSTAN_HS,  // msgid
             tskcmd.c       1962                          NO_DATA,             // sts
             tskcmd.c       1963                          NO_DATA,             // sts2
             tskcmd.c       1964                          (UB *)&dumy,         // data
             tskcmd.c       1965                          sizeof( dumy )       // siz
             tskcmd.c       1966                      );
    000013AA E101                   MOV         #1,R1      ; H'00000001
    000013AC 2F16                   MOV.L       R1,@-R15
    000013AE 64F3                   MOV         R15,R4
    000013B0 7404                   ADD         #4,R4
    000013B2 2F46                   MOV.L       R4,@-R15
    000013B4 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000013B6 655C                   EXTU.B      R5,R5
    000013B8 6753                   MOV         R5,R7
    000013BA 2F56                   MOV.L       R5,@-R15
    000013BC 2F56                   MOV.L       R5,@-R15
    000013BE E620                   MOV         #32,R6     ; H'00000020
    000013C0 2F66                   MOV.L       R6,@-R15
    000013C2 2F56                   MOV.L       R5,@-R15
    000013C4 E60D                   MOV         #13,R6     ; H'0000000D
    000013C6 E50C                   MOV         #12,R5     ; H'0000000C
    000013C8 D28D                   MOV.L       L1366,R2   ; _mbx_send
    000013CA 420B                   JSR         @R2
    000013CC E405                   MOV         #5,R4      ; H'00000005
    000013CE 7F18                   ADD         #24,R15
    000013D0              L290:
    000013D0 7F04                   ADD         #4,R15
    000013D2 4F26                   LDS.L       @R15+,PR
             tskcmd.c       1967      }
             tskcmd.c       1968    }
    000013D4 006B                   RTS/N
             tskcmd.c       1969    
             tskcmd.c       1970    /***********************************************************************
             tskcmd.c       1971    *
             tskcmd.c       1972    * [概要]  
             tskcmd.c       1973    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       1974    * [戻値]  -
             tskcmd.c       1975    * 
             tskcmd.c       1976    ***********************************************************************/
             tskcmd.c       1977    static void CmdPcan   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000013D6              __$CmdPcan:                      ; function: __$CmdPcan
                                                           ; frame size=32
    000013D6 4F22                   STS.L       PR,@-R15
    000013D8 7FFC                   ADD         #-4,R15
             tskcmd.c       1978    {
             tskcmd.c       1979      ER  result = E_SUCCESS;
             tskcmd.c       1980      UB dumy = CLR;
    000013DA E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       1981      
             tskcmd.c       1982      //  データチェック
             tskcmd.c       1983      result = ParamDataCheck( ID_MSG_PRESSCAN_HS, anum, args );
    000013DC 655C                   EXTU.B      R5,R5
    000013DE 0F04                   MOV.B       R0,@(R0,R15); dumy
    000013E0 BEEE                   BSR         __$ParamDataCheck
    000013E2 E421                   MOV         #33,R4     ; H'00000021
             tskcmd.c       1984    
             tskcmd.c       1985      //  データ正常か
             tskcmd.c       1986      if( result == E_SUCCESS )
    000013E4 2008                   TST         R0,R0
    000013E6 8B12                   BF          L293
             tskcmd.c       1987      {
             tskcmd.c       1988          mbx_send    (
             tskcmd.c       1989                          ID_TSK_CMD,        // tskid
             tskcmd.c       1990                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       1991                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       1992                          NO_DATA,             // prid1
             tskcmd.c       1993                          NO_DATA,             // bcid
             tskcmd.c       1994                          ID_MSG_PRESSCAN_HS,  // msgid
             tskcmd.c       1995                          NO_DATA,             // sts
             tskcmd.c       1996                          NO_DATA,             // sts2
             tskcmd.c       1997                          (UB *)&dumy,         // data
             tskcmd.c       1998                          sizeof( dumy )       // siz
             tskcmd.c       1999                      );
    000013E8 E101                   MOV         #1,R1      ; H'00000001
    000013EA 2F16                   MOV.L       R1,@-R15
    000013EC 64F3                   MOV         R15,R4
    000013EE 7404                   ADD         #4,R4
    000013F0 2F46                   MOV.L       R4,@-R15
    000013F2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000013F4 655C                   EXTU.B      R5,R5
    000013F6 6753                   MOV         R5,R7
    000013F8 2F56                   MOV.L       R5,@-R15
    000013FA 2F56                   MOV.L       R5,@-R15
    000013FC E621                   MOV         #33,R6     ; H'00000021
    000013FE 2F66                   MOV.L       R6,@-R15
    00001400 2F56                   MOV.L       R5,@-R15
    00001402 E60D                   MOV         #13,R6     ; H'0000000D
    00001404 E50C                   MOV         #12,R5     ; H'0000000C
    00001406 D27E                   MOV.L       L1366,R2   ; _mbx_send
    00001408 420B                   JSR         @R2
    0000140A E405                   MOV         #5,R4      ; H'00000005
    0000140C 7F18                   ADD         #24,R15
    0000140E              L293:
    0000140E 7F04                   ADD         #4,R15
    00001410 4F26                   LDS.L       @R15+,PR
             tskcmd.c       2000      }
             tskcmd.c       2001    }
    00001412 006B                   RTS/N
             tskcmd.c       2002    
             tskcmd.c       2003    /***********************************************************************
             tskcmd.c       2004    *
             tskcmd.c       2005    * [概要]  
             tskcmd.c       2006    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2007    * [戻値]  -
             tskcmd.c       2008    * 
             tskcmd.c       2009    ***********************************************************************/
             tskcmd.c       2010    static void CmdVout  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001414              __$CmdVout:                      ; function: __$CmdVout
                                                           ; frame size=36
    00001414 4DF0                   MOVMU.L     R13,@-R15
    00001416 655C                   EXTU.B      R5,R5
    00001418 E422                   MOV         #34,R4     ; H'00000022
             tskcmd.c       2011    {
             tskcmd.c       2012      ER  result = E_SUCCESS;
             tskcmd.c       2013    
             tskcmd.c       2014      //  データチェック
             tskcmd.c       2015      result = ParamDataCheck( ID_MSG_VALVEOUT_HS, anum, args );
    0000141A BED1                   BSR         __$ParamDataCheck
    0000141C 6E63                   MOV         R6,R14
             tskcmd.c       2016    
             tskcmd.c       2017      //  データ正常か
             tskcmd.c       2018      if( result == E_SUCCESS )
    0000141E 2008                   TST         R0,R0
    00001420 8B25                   BF          L296
    00001422 E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       2019      {
             tskcmd.c       2020          memset( &vout, CLR, sizeof( ST_VOUT ) );
    00001424 D477                   MOV.L       L1366+4,R4 ; __$vout
    00001426 D178                   MOV.L       L1366+8,R1 ; _memset
    00001428 410B                   JSR         @R1
    0000142A E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2021          vout.target = Atoi( args[PARAM1], N_HEX, sizeof(unsigned short), N_UNSIG );
    0000142C 54E1                   MOV.L       @(4,R14),R4; args[]
    0000142E E700                   MOV         #0,R7      ; H'00000000
    00001430 E602                   MOV         #2,R6      ; H'00000002
    00001432 DD76                   MOV.L       L1366+12,R13; _Atoi
    00001434 4D0B                   JSR         @R13
    00001436 E510                   MOV         #16,R5     ; H'00000010
    00001438 DD72                   MOV.L       L1366+4,R13; __$vout
    0000143A 2D01                   MOV.W       R0,@R13    ; vout.target
    0000143C E700                   MOV         #0,R7      ; H'00000000
    0000143E E602                   MOV         #2,R6      ; H'00000002
    00001440 E510                   MOV         #16,R5     ; H'00000010
             tskcmd.c       2022          vout.valout = Atoi( args[PARAM2], N_HEX, sizeof(unsigned short), N_UNSIG );
    00001442 D172                   MOV.L       L1366+12,R1; _Atoi
    00001444 410B                   JSR         @R1
    00001446 54E2                   MOV.L       @(8,R14),R4; args[]
             tskcmd.c       2023          
             tskcmd.c       2024          mbx_send    (
             tskcmd.c       2025                          ID_TSK_CMD,        // tskid
             tskcmd.c       2026                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       2027                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       2028                          NO_DATA,             // prid1
             tskcmd.c       2029                          NO_DATA,             // bcid
             tskcmd.c       2030                          ID_MSG_VALVEOUT_HS,  // msgid
             tskcmd.c       2031                          NO_DATA,             // sts
             tskcmd.c       2032                          NO_DATA,             // sts2
             tskcmd.c       2033                          (UB *)&vout.target,  // data
             tskcmd.c       2034                          sizeof( ST_VOUT )    // siz
             tskcmd.c       2035                      );
    00001448 E704                   MOV         #4,R7      ; H'00000004
    0000144A 81D1                   MOV.W       R0,@(2,R13); vout.valout
    0000144C 2F76                   MOV.L       R7,@-R15
    0000144E DD6D                   MOV.L       L1366+4,R13; __$vout
    00001450 2FD6                   MOV.L       R13,@-R15
    00001452 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00001454 611C                   EXTU.B      R1,R1
    00001456 6713                   MOV         R1,R7
    00001458 2F16                   MOV.L       R1,@-R15
    0000145A 2F16                   MOV.L       R1,@-R15
    0000145C EE22                   MOV         #34,R14    ; H'00000022
    0000145E 2FE6                   MOV.L       R14,@-R15
    00001460 2F16                   MOV.L       R1,@-R15
    00001462 E60D                   MOV         #13,R6     ; H'0000000D
    00001464 E50C                   MOV         #12,R5     ; H'0000000C
    00001466 D266                   MOV.L       L1366,R2   ; _mbx_send
    00001468 420B                   JSR         @R2
    0000146A E405                   MOV         #5,R4      ; H'00000005
    0000146C 7F18                   ADD         #24,R15
    0000146E              L296:
    0000146E 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       2036      }
             tskcmd.c       2037    }
    00001470 006B                   RTS/N
             tskcmd.c       2038    /***********************************************************************
             tskcmd.c       2039    *
             tskcmd.c       2040    * [概要]  
             tskcmd.c       2041    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2042    * [戻値]  -
             tskcmd.c       2043    * 
             tskcmd.c       2044    ***********************************************************************/
             tskcmd.c       2045    static void CmdPsns  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001472              __$CmdPsns:                      ; function: __$CmdPsns
                                                           ; frame size=32
    00001472 4F22                   STS.L       PR,@-R15
    00001474 7FFC                   ADD         #-4,R15
             tskcmd.c       2046    {
             tskcmd.c       2047      ER  result = E_SUCCESS;
             tskcmd.c       2048      UB  dummy  = CLR;
    00001476 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       2049      
             tskcmd.c       2050      result = ParamDataCheck( ID_MSG_PRESSURE_HS, anum, args );
    00001478 655C                   EXTU.B      R5,R5
    0000147A 0F04                   MOV.B       R0,@(R0,R15); dummy
    0000147C BEA0                   BSR         __$ParamDataCheck
    0000147E E423                   MOV         #35,R4     ; H'00000023
             tskcmd.c       2051    
             tskcmd.c       2052      //  データ正常か
             tskcmd.c       2053      if( result == E_SUCCESS )
    00001480 2008                   TST         R0,R0
    00001482 8B12                   BF          L299
             tskcmd.c       2054      {
             tskcmd.c       2055          mbx_send    (
             tskcmd.c       2056                          ID_TSK_CMD,        // tskid
             tskcmd.c       2057                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       2058                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       2059                          NO_DATA,             // prid1
             tskcmd.c       2060                          NO_DATA,             // bcid
             tskcmd.c       2061                          ID_MSG_PRESSURE_HS,  // msgid
             tskcmd.c       2062                          NO_DATA,             // sts
             tskcmd.c       2063                          NO_DATA,             // sts2
             tskcmd.c       2064                          &dummy,              // data
             tskcmd.c       2065                          sizeof( dummy )      // siz
             tskcmd.c       2066                      );
    00001484 E101                   MOV         #1,R1      ; H'00000001
    00001486 2F16                   MOV.L       R1,@-R15
    00001488 64F3                   MOV         R15,R4
    0000148A 7404                   ADD         #4,R4
    0000148C 2F46                   MOV.L       R4,@-R15
    0000148E E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001490 655C                   EXTU.B      R5,R5
    00001492 6753                   MOV         R5,R7
    00001494 2F56                   MOV.L       R5,@-R15
    00001496 2F56                   MOV.L       R5,@-R15
    00001498 E623                   MOV         #35,R6     ; H'00000023
    0000149A 2F66                   MOV.L       R6,@-R15
    0000149C 2F56                   MOV.L       R5,@-R15
    0000149E E60D                   MOV         #13,R6     ; H'0000000D
    000014A0 E50C                   MOV         #12,R5     ; H'0000000C
    000014A2 D257                   MOV.L       L1366,R2   ; _mbx_send
    000014A4 420B                   JSR         @R2
    000014A6 E405                   MOV         #5,R4      ; H'00000005
    000014A8 7F18                   ADD         #24,R15
    000014AA              L299:
    000014AA 7F04                   ADD         #4,R15
    000014AC 4F26                   LDS.L       @R15+,PR
             tskcmd.c       2067      }
             tskcmd.c       2068    }
    000014AE 006B                   RTS/N
             tskcmd.c       2069    
             tskcmd.c       2070    /***********************************************************************
             tskcmd.c       2071    *
             tskcmd.c       2072    * [概要]  HELLO   起動通知
             tskcmd.c       2073    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2074    * [戻値]  -
             tskcmd.c       2075    * 
             tskcmd.c       2076    ***********************************************************************/
             tskcmd.c       2077    static void CmdHELLO  ( T_CMD_MSG* mrcv, UB anum, const char** args )
             tskcmd.c       2078    {
             tskcmd.c       2079      // 応答メッセージ作成
             tskcmd.c       2080      CmdMakeResponseStr(     &stCtl,
             tskcmd.c       2081                              PARAM4,
             tskcmd.c       2082                              STRTBL_MSG[ID_MSG_HELLO],
             tskcmd.c       2083                              MnetStatus,
             tskcmd.c       2084                              (char*)&FIRMWARE,
             tskcmd.c       2085                              (char*)&VER_INFO
             tskcmd.c       2086                          );
             tskcmd.c       2087    
             tskcmd.c       2088      // レスポンスデータ送信
             tskcmd.c       2089      SendResponse( &stCtl );
             tskcmd.c       2090    }
             tskcmd.c       2091    
             tskcmd.c       2092    /***********************************************************************
             tskcmd.c       2093    *
             tskcmd.c       2094    * [概要]  VER     バージョン確認
             tskcmd.c       2095    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2096    * [戻値]  -
             tskcmd.c       2097    * 
             tskcmd.c       2098    ***********************************************************************/
             tskcmd.c       2099    static void CmdVER    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000014B0              __$CmdVER:                       ; function: __$CmdVER
                                                           ; frame size=12
    000014B0 4F22                   STS.L       PR,@-R15
             tskcmd.c       2100    {
             tskcmd.c       2101      // 応答メッセージ作成
             tskcmd.c       2102      CmdMakeResponseStr(     &stCtl,
             tskcmd.c       2103                              PARAM4, 
             tskcmd.c       2104                              args[0], 
             tskcmd.c       2105                              MnetStatus,
             tskcmd.c       2106                              (char*)&FIRMWARE, 
             tskcmd.c       2107                              (char*)&VER_INFO
             tskcmd.c       2108                          );
    000014B2 D157                   MOV.L       L1366+16,R1; _VER_INFO
    000014B4 2F16                   MOV.L       R1,@-R15
    000014B6 D557                   MOV.L       L1366+20,R5; _FIRMWARE
    000014B8 2F56                   MOV.L       R5,@-R15
    000014BA E504                   MOV         #4,R5      ; H'00000004
    000014BC D256                   MOV.L       L1366+24,R2; __$MnetStatus
    000014BE 6662                   MOV.L       @R6,R6     ; args[]
    000014C0 D456                   MOV.L       L1366+28,R4; __$stCtl
    000014C2 BE08                   BSR         _CmdMakeResponseStr
    000014C4 6722                   MOV.L       @R2,R7     ; MnetStatus
    000014C6 7F08                   ADD         #8,R15
             tskcmd.c       2109    
             tskcmd.c       2110        // 応答メッセージ送信
             tskcmd.c       2111      CmdSendResponse( &stCtl );
    000014C8 D454                   MOV.L       L1366+28,R4; __$stCtl
    000014CA A945                   BRA         _CmdSendResponse
    000014CC 4F26                   LDS.L       @R15+,PR
             tskcmd.c       2112    }
             tskcmd.c       2113    
             tskcmd.c       2114    /***********************************************************************
             tskcmd.c       2115    *
             tskcmd.c       2116    * [概要]  ALLIN   全I/O入力
             tskcmd.c       2117    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2118    * [戻値]  -
             tskcmd.c       2119    * 
             tskcmd.c       2120    ***********************************************************************/
             tskcmd.c       2121    static void CmdALLIN  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000014CE              __$CmdALLIN:                     ; function: __$CmdALLIN
                                                           ; frame size=48
    000014CE 4DF0                   MOVMU.L     R13,@-R15
    000014D0 7FF8                   ADD         #-8,R15
    000014D2 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
    000014D6 655C                   EXTU.B      R5,R5
             tskcmd.c       2122    {
             tskcmd.c       2123      ER  result = E_SUCCESS;
             tskcmd.c       2124      UB  allsts[INDAT_CNTRL_MAX];
             tskcmd.c       2125      UB  msg;
             tskcmd.c       2126    
             tskcmd.c       2127      msg = mrcv->msgdata.msgid;
             tskcmd.c       2128    
             tskcmd.c       2129      //  データチェック
             tskcmd.c       2130      result = ParamDataCheck( msg, anum, args );
    000014D8 BE72                   BSR         __$ParamDataCheck
    000014DA 6D63                   MOV         R6,R13
    000014DC E608                   MOV         #8,R6      ; H'00000008
    000014DE E500                   MOV         #0,R5      ; H'00000000
    000014E0 6E03                   MOV         R0,R14
             tskcmd.c       2131    
             tskcmd.c       2132      //  初期化
             tskcmd.c       2133      memset( &allsts, CLR,  sizeof( allsts ) );
    000014E2 D249                   MOV.L       L1366+8,R2 ; _memset
    000014E4 420B                   JSR         @R2
    000014E6 64F3                   MOV         R15,R4
             tskcmd.c       2134    
             tskcmd.c       2135      //  データ正常か
             tskcmd.c       2136      if( result == E_SUCCESS )
    000014E8 2EE8                   TST         R14,R14
    000014EA 8B02                   BF          L303
             tskcmd.c       2137      {
             tskcmd.c       2138          // 全入力ポート状態取得
             tskcmd.c       2139          pio_ALLIN( &allsts[0] );
    000014EC D24C                   MOV.L       L1366+32,R2; _pio_ALLIN
    000014EE 420B                   JSR         @R2
    000014F0 64F3                   MOV         R15,R4
    000014F2              L303:
             tskcmd.c       2140      }
             tskcmd.c       2141      // 応答メッセージ作成
             tskcmd.c       2142      CmdMakeResponseX(   &stCtl,
             tskcmd.c       2143                          PARAM6,
             tskcmd.c       2144                          args[0],
             tskcmd.c       2145                          result,
             tskcmd.c       2146    
             tskcmd.c       2147                          (allsts[7]*0x100 + allsts[6]),
             tskcmd.c       2148                          (allsts[5]*0x100 + allsts[4]),
             tskcmd.c       2149                          (allsts[3]*0x100 + allsts[2]),
             tskcmd.c       2150                          (allsts[1]*0x100 + allsts[0]),
             tskcmd.c       2151                          0,
             tskcmd.c       2152                          0,
             tskcmd.c       2153                          0
             tskcmd.c       2154                      );
    000014F2 E100                   MOV         #0,R1      ; H'00000000
    000014F4 2F16                   MOV.L       R1,@-R15
    000014F6 2F16                   MOV.L       R1,@-R15
    000014F8 2F16                   MOV.L       R1,@-R15
    000014FA 31F1800D               MOVU.B      @(13,R15),R1; allsts[]
    000014FE 34F1800C               MOVU.B      @(12,R15),R4; allsts[]
    00001502 4118                   SHLL8       R1
    00001504 314C                   ADD         R4,R1
    00001506 2F16                   MOV.L       R1,@-R15
    00001508 35F18013               MOVU.B      @(19,R15),R5; allsts[]
    0000150C 32F18012               MOVU.B      @(18,R15),R2; allsts[]
    00001510 4518                   SHLL8       R5
    00001512 352C                   ADD         R2,R5
    00001514 2F56                   MOV.L       R5,@-R15
    00001516 35F18019               MOVU.B      @(25,R15),R5; allsts[]
    0000151A 37F18018               MOVU.B      @(24,R15),R7; allsts[]
    0000151E 4518                   SHLL8       R5
    00001520 357C                   ADD         R7,R5
    00001522 2F56                   MOV.L       R5,@-R15
    00001524 36F1801F               MOVU.B      @(31,R15),R6; allsts[]
    00001528 32F1801E               MOVU.B      @(30,R15),R2; allsts[]
    0000152C 4618                   SHLL8       R6
    0000152E 362C                   ADD         R2,R6
    00001530 2F66                   MOV.L       R6,@-R15
    00001532 E506                   MOV         #6,R5      ; H'00000006
    00001534 66D2                   MOV.L       @R13,R6    ; args[]
    00001536 D439                   MOV.L       L1366+28,R4; __$stCtl
    00001538 BBFB                   BSR         _CmdMakeResponseX
    0000153A 67E3                   MOV         R14,R7
             tskcmd.c       2155    
             tskcmd.c       2156      // 応答メッセージ送信
             tskcmd.c       2157      CmdSendResponse( &stCtl );
    0000153C D437                   MOV.L       L1366+28,R4; __$stCtl
    0000153E B90B                   BSR         _CmdSendResponse
    00001540 7F1C                   ADD         #28,R15
    00001542 7F08                   ADD         #8,R15
    00001544 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       2158    }
    00001546 006B                   RTS/N
             tskcmd.c       2159    
             tskcmd.c       2160    /***********************************************************************
             tskcmd.c       2161    *
             tskcmd.c       2162    * [概要]  BIN     I/O入力
             tskcmd.c       2163    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2164    * [戻値]  -
             tskcmd.c       2165    * 
             tskcmd.c       2166    ***********************************************************************/
             tskcmd.c       2167    static void CmdBIN    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001548              __$CmdBIN:                       ; function: __$CmdBIN
                                                           ; frame size=60
    00001548 4BF0                   MOVMU.L     R11,@-R15
    0000154A 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2168    {
             tskcmd.c       2169      ER  result = E_SUCCESS;
             tskcmd.c       2170      UB  sts  = CLR;
             tskcmd.c       2171      INT par  = CLR;
             tskcmd.c       2172      UB  msg;
             tskcmd.c       2173    
             tskcmd.c       2174      msg = mrcv->msgdata.msgid;
             tskcmd.c       2175    
             tskcmd.c       2176      //  データチェック
             tskcmd.c       2177      result = ParamDataCheck( msg, anum, args );
    0000154E 655C                   EXTU.B      R5,R5
    00001550 EE00                   MOV         #0,R14     ; H'00000000
    00001552 BE35                   BSR         __$ParamDataCheck
    00001554 6C63                   MOV         R6,R12
             tskcmd.c       2178    
             tskcmd.c       2179      //  データ正常か
             tskcmd.c       2180      if( result == E_SUCCESS )
    00001556 2008                   TST         R0,R0
    00001558 6DE3                   MOV         R14,R13
    0000155A 8F0B                   BF/S        L306
    0000155C 6B03                   MOV         R0,R11
             tskcmd.c       2181      {
             tskcmd.c       2182          // パラメータ取得
             tskcmd.c       2183          par = Atoi( args[PARAM1], N_DEC, sizeof(INT), N_SIG );
    0000155E 54C1                   MOV.L       @(4,R12),R4; args[]
    00001560 E701                   MOV         #1,R7      ; H'00000001
    00001562 E604                   MOV         #4,R6      ; H'00000004
    00001564 D129                   MOV.L       L1366+12,R1; _Atoi
    00001566 410B                   JSR         @R1
    00001568 E50A                   MOV         #10,R5     ; H'0000000A
    0000156A 6D03                   MOV         R0,R13
             tskcmd.c       2184      
             tskcmd.c       2185          // 入力状態取得
             tskcmd.c       2186          sts = pio_BIN( par );   
    0000156C D22D                   MOV.L       L1366+36,R2; _pio_BIN
    0000156E 420B                   JSR         @R2
    00001570 6403                   MOV         R0,R4
    00001572 6E03                   MOV         R0,R14
    00001574              L306:
             tskcmd.c       2187      }
             tskcmd.c       2188    
             tskcmd.c       2189      // 応答メッセージ作成
             tskcmd.c       2190      CmdMakeResponse(    &stCtl,
             tskcmd.c       2191                          PARAM4,                                         //0  パラメータ数
             tskcmd.c       2192                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2193                          result,                                         //2  エラーコード
             tskcmd.c       2194    
             tskcmd.c       2195                          par,                                            //3  入力ｃｈ
             tskcmd.c       2196                          sts,                                            //4  入力状態取得
             tskcmd.c       2197                          0,                                              //5  
             tskcmd.c       2198                          0,                                              //6  
             tskcmd.c       2199                          0,                                              //7  
             tskcmd.c       2200    
             tskcmd.c       2201                          0,                                              //8  
             tskcmd.c       2202                          0,                                              //9  
             tskcmd.c       2203                          0,                                              //10 
             tskcmd.c       2204                          0,                                              //11 
             tskcmd.c       2205                          0                                               //12 
             tskcmd.c       2206                      );
    00001574 E500                   MOV         #0,R5      ; H'00000000
    00001576 2F56                   MOV.L       R5,@-R15
    00001578 2F56                   MOV.L       R5,@-R15
    0000157A 2F56                   MOV.L       R5,@-R15
    0000157C 2F56                   MOV.L       R5,@-R15
    0000157E 2F56                   MOV.L       R5,@-R15
    00001580 2F56                   MOV.L       R5,@-R15
    00001582 2F56                   MOV.L       R5,@-R15
    00001584 2F56                   MOV.L       R5,@-R15
    00001586 61EC                   EXTU.B      R14,R1
    00001588 2F16                   MOV.L       R1,@-R15
    0000158A 2FD6                   MOV.L       R13,@-R15
    0000158C E504                   MOV         #4,R5      ; H'00000004
    0000158E 66C2                   MOV.L       @R12,R6    ; args[]
    00001590 D422                   MOV.L       L1366+28,R4; __$stCtl
    00001592 BA17                   BSR         _CmdMakeResponse
    00001594 67B3                   MOV         R11,R7
    00001596 7F28                   ADD         #40,R15
             tskcmd.c       2207    
             tskcmd.c       2208    
             tskcmd.c       2209        // 応答メッセージ送信
             tskcmd.c       2210      CmdSendResponse( &stCtl );
    00001598 D420                   MOV.L       L1366+28,R4; __$stCtl
    0000159A 4BF4                   MOVMU.L     @R15+,R11
    0000159C A8DC                   BRA         _CmdSendResponse
    0000159E 0009                   NOP
             tskcmd.c       2211    }
             tskcmd.c       2212    
             tskcmd.c       2213    /***********************************************************************
             tskcmd.c       2214    *
             tskcmd.c       2215    * [概要]  BOUT    I/O出力
             tskcmd.c       2216    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2217    * [戻値]  -
             tskcmd.c       2218    * 
             tskcmd.c       2219    ***********************************************************************/
             tskcmd.c       2220    static void CmdBOUT   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000015A0              __$CmdBOUT:                      ; function: __$CmdBOUT
                                                           ; frame size=56
    000015A0 4CF0                   MOVMU.L     R12,@-R15
    000015A2 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2221    {
             tskcmd.c       2222      ER  result = E_SUCCESS;
             tskcmd.c       2223      INT ch  = CLR;
             tskcmd.c       2224      INT act = CLR;
             tskcmd.c       2225      UB  msg;
             tskcmd.c       2226    
             tskcmd.c       2227      msg = mrcv->msgdata.msgid;
             tskcmd.c       2228    
             tskcmd.c       2229      //  データチェック
             tskcmd.c       2230      result = ParamDataCheck( msg, anum, args );
    000015A6 655C                   EXTU.B      R5,R5
    000015A8 EE00                   MOV         #0,R14     ; H'00000000
    000015AA BE09                   BSR         __$ParamDataCheck
    000015AC 6D63                   MOV         R6,R13
             tskcmd.c       2231    
             tskcmd.c       2232      //  データ正常か
             tskcmd.c       2233      if( result == E_SUCCESS )
    000015AE 2008                   TST         R0,R0
    000015B0 8F11                   BF/S        L309
    000015B2 6C03                   MOV         R0,R12
             tskcmd.c       2234      {
             tskcmd.c       2235          // パラメータ取得
             tskcmd.c       2236          ch  = Atoi( args[PARAM1], N_DEC, sizeof(INT), N_SIG );
    000015B4 54D1                   MOV.L       @(4,R13),R4; args[]
    000015B6 E701                   MOV         #1,R7      ; H'00000001
    000015B8 E604                   MOV         #4,R6      ; H'00000004
    000015BA D214                   MOV.L       L1366+12,R2; _Atoi
    000015BC 420B                   JSR         @R2
    000015BE E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       2237          act = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    000015C0 54D2                   MOV.L       @(8,R13),R4; args[]
    000015C2 E701                   MOV         #1,R7      ; H'00000001
    000015C4 E604                   MOV         #4,R6      ; H'00000004
    000015C6 E50A                   MOV         #10,R5     ; H'0000000A
    000015C8 D110                   MOV.L       L1366+12,R1; _Atoi
    000015CA 410B                   JSR         @R1
    000015CC 6E03                   MOV         R0,R14
    000015CE 6503                   MOV         R0,R5
             tskcmd.c       2238    
             tskcmd.c       2239          // I/O出力
             tskcmd.c       2240          pio_BOUT( ch, act );
    000015D0 D115                   MOV.L       L1366+40,R1; _pio_BOUT
    000015D2 410B                   JSR         @R1
    000015D4 64E3                   MOV         R14,R4
    000015D6              L309:
             tskcmd.c       2241      }
             tskcmd.c       2242      // 応答メッセージ作成
             tskcmd.c       2243      CmdMakeResponse(    &stCtl,
             tskcmd.c       2244                          PARAM6,                                         //0  パラメータ数
             tskcmd.c       2245                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2246                          result,                                         //2  エラーコード
             tskcmd.c       2247    
             tskcmd.c       2248                          ch,                                             //3  入力ｃｈ
             tskcmd.c       2249                          0,                                              //4  
             tskcmd.c       2250                          0,                                              //5  
             tskcmd.c       2251                          0,                                              //6  
             tskcmd.c       2252                          0,                                              //7  
             tskcmd.c       2253    
             tskcmd.c       2254                          0,                                              //8  
             tskcmd.c       2255                          0,                                              //9  
             tskcmd.c       2256                          0,                                              //10 
             tskcmd.c       2257                          0,                                              //11 
             tskcmd.c       2258                          0                                               //12 
             tskcmd.c       2259                      );
    000015D6 E200                   MOV         #0,R2      ; H'00000000
    000015D8 2F26                   MOV.L       R2,@-R15
    000015DA 2F26                   MOV.L       R2,@-R15
    000015DC 2F26                   MOV.L       R2,@-R15
    000015DE 2F26                   MOV.L       R2,@-R15
    000015E0 2F26                   MOV.L       R2,@-R15
    000015E2 2F26                   MOV.L       R2,@-R15
    000015E4 2F26                   MOV.L       R2,@-R15
    000015E6 2F26                   MOV.L       R2,@-R15
    000015E8 2F26                   MOV.L       R2,@-R15
    000015EA 2FE6                   MOV.L       R14,@-R15
    000015EC E506                   MOV         #6,R5      ; H'00000006
    000015EE 66D2                   MOV.L       @R13,R6    ; args[]
    000015F0 D40A                   MOV.L       L1366+28,R4; __$stCtl
    000015F2 B9E7                   BSR         _CmdMakeResponse
    000015F4 67C3                   MOV         R12,R7
    000015F6 7F28                   ADD         #40,R15
             tskcmd.c       2260    
             tskcmd.c       2261      
             tskcmd.c       2262        // 応答メッセージ送信
             tskcmd.c       2263      CmdSendResponse( &stCtl );
    000015F8 D408                   MOV.L       L1366+28,R4; __$stCtl
    000015FA 4CF4                   MOVMU.L     @R15+,R12
    000015FC A8AC                   BRA         _CmdSendResponse
    000015FE 0009                   NOP
    00001600              L1366:
    00001600 <00000000>             .DATA.L     _mbx_send
    00001604 <00000000>             .DATA.L     __$vout
    00001608 <00000000>             .DATA.L     _memset
    0000160C <00000000>             .DATA.L     _Atoi
    00001610 <00000000>             .DATA.L     _VER_INFO
    00001614 <00000000>             .DATA.L     _FIRMWARE
    00001618 <00000000>             .DATA.L     __$MnetStatus
    0000161C <00000000>             .DATA.L     __$stCtl
    00001620 <00000000>             .DATA.L     _pio_ALLIN
    00001624 <00000000>             .DATA.L     _pio_BIN
    00001628 <00000000>             .DATA.L     _pio_BOUT
             tskcmd.c       2264    }
             tskcmd.c       2265    
             tskcmd.c       2266    /***********************************************************************
             tskcmd.c       2267    *
             tskcmd.c       2268    * [概要]  CINIT   入力カウンタの設定
             tskcmd.c       2269    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2270    * [戻値]  -
             tskcmd.c       2271    * 
             tskcmd.c       2272    ***********************************************************************/
             tskcmd.c       2273    static void CmdCINIT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    0000162C              __$CmdCINIT:                     ; function: __$CmdCINIT
                                                           ; frame size=56
    0000162C 4CF0                   MOVMU.L     R12,@-R15
    0000162E 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2274    {
             tskcmd.c       2275      ER  result = E_SUCCESS;
             tskcmd.c       2276      UB  nn  = CLR;
             tskcmd.c       2277      UB  f   = CLR;
             tskcmd.c       2278      UB  msg;
             tskcmd.c       2279    
             tskcmd.c       2280      msg = mrcv->msgdata.msgid;
             tskcmd.c       2281    
             tskcmd.c       2282      //  データチェック
             tskcmd.c       2283      result = ParamDataCheck( msg, anum, args );
    00001632 655C                   EXTU.B      R5,R5
    00001634 EE00                   MOV         #0,R14     ; H'00000000
    00001636 BDC3                   BSR         __$ParamDataCheck
    00001638 6D63                   MOV         R6,R13
             tskcmd.c       2284    
             tskcmd.c       2285      //  データ正常か
             tskcmd.c       2286      if( result == E_SUCCESS )
    0000163A 2008                   TST         R0,R0
    0000163C 8F38                   BF/S        L312
    0000163E 6C03                   MOV         R0,R12
             tskcmd.c       2287      {
             tskcmd.c       2288          // パラメータ取得
             tskcmd.c       2289          nn  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001640 54D1                   MOV.L       @(4,R13),R4; args[]
    00001642 E701                   MOV         #1,R7      ; H'00000001
    00001644 E50A                   MOV         #10,R5     ; H'0000000A
    00001646 D2B5                   MOV.L       L1367,R2   ; _Atoi
    00001648 420B                   JSR         @R2
    0000164A 6673                   MOV         R7,R6
             tskcmd.c       2290          f   = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    0000164C 54D2                   MOV.L       @(8,R13),R4; args[]
    0000164E E701                   MOV         #1,R7      ; H'00000001
    00001650 E50A                   MOV         #10,R5     ; H'0000000A
    00001652 6E03                   MOV         R0,R14
    00001654 D1B1                   MOV.L       L1367,R1   ; _Atoi
    00001656 410B                   JSR         @R1
    00001658 6673                   MOV         R7,R6
    0000165A 610C                   EXTU.B      R0,R1
             tskcmd.c       2291    
             tskcmd.c       2292          // カウント開始
             tskcmd.c       2293          if( f )
    0000165C 2118                   TST         R1,R1
    0000165E 8913                   BT          L314
             tskcmd.c       2294          {
             tskcmd.c       2295              mbx_send( ID_TSK_CMD, 
             tskcmd.c       2296                        ID_MPF_IO, 
             tskcmd.c       2297                        ID_MBX_IO, 
             tskcmd.c       2298                        NO_DATA, 
             tskcmd.c       2299                        NO_DATA, 
             tskcmd.c       2300                        ID_MSG_CNT_START, 
             tskcmd.c       2301                        (UB)nn, 
             tskcmd.c       2302                        0, 
             tskcmd.c       2303                        &bufwk[0], 
             tskcmd.c       2304                        0 );
    00001660 0429                   MOVT        R4
    00001662 2F46                   MOV.L       R4,@-R15
    00001664 D5AE                   MOV.L       L1367+4,R5 ; __$bufwk
    00001666 2F56                   MOV.L       R5,@-R15
    00001668 E600                   MOV         #0,R6      ; H'00000000
    0000166A 2F66                   MOV.L       R6,@-R15
    0000166C 6EEC                   EXTU.B      R14,R14
    0000166E 2FE6                   MOV.L       R14,@-R15
    00001670 2F66                   MOV.L       R6,@-R15
    00001672 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    00001674 611C                   EXTU.B      R1,R1
    00001676 6713                   MOV         R1,R7
    00001678 2F16                   MOV.L       R1,@-R15
    0000167A E607                   MOV         #7,R6      ; H'00000007
    0000167C E506                   MOV         #6,R5      ; H'00000006
    0000167E D2A9                   MOV.L       L1367+8,R2 ; _mbx_send
    00001680 420B                   JSR         @R2
    00001682 E405                   MOV         #5,R4      ; H'00000005
    00001684 A014                   BRA         L312
    00001686 7F18                   ADD         #24,R15
    00001688              L314:
             tskcmd.c       2305          }
             tskcmd.c       2306          // カウント停止
             tskcmd.c       2307          else
             tskcmd.c       2308          {
             tskcmd.c       2309              mbx_send( ID_TSK_CMD, 
             tskcmd.c       2310                        ID_MPF_IO, 
             tskcmd.c       2311                        ID_MBX_IO, 
             tskcmd.c       2312                        NO_DATA, 
             tskcmd.c       2313                        NO_DATA, 
             tskcmd.c       2314                        ID_MSG_CNT_STOP, 
             tskcmd.c       2315                        (UB)nn, 
             tskcmd.c       2316                        0, 
             tskcmd.c       2317                        &bufwk[0], 
             tskcmd.c       2318                        0 );
    00001688 0439                   MOVRT       R4
    0000168A 2F46                   MOV.L       R4,@-R15
    0000168C D5A4                   MOV.L       L1367+4,R5 ; __$bufwk
    0000168E 2F56                   MOV.L       R5,@-R15
    00001690 E600                   MOV         #0,R6      ; H'00000000
    00001692 2F66                   MOV.L       R6,@-R15
    00001694 6EEC                   EXTU.B      R14,R14
    00001696 2FE6                   MOV.L       R14,@-R15
    00001698 E701                   MOV         #1,R7      ; H'00000001
    0000169A 2F76                   MOV.L       R7,@-R15
    0000169C E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    0000169E 611C                   EXTU.B      R1,R1
    000016A0 6713                   MOV         R1,R7
    000016A2 2F16                   MOV.L       R1,@-R15
    000016A4 E607                   MOV         #7,R6      ; H'00000007
    000016A6 E506                   MOV         #6,R5      ; H'00000006
    000016A8 D29E                   MOV.L       L1367+8,R2 ; _mbx_send
    000016AA 420B                   JSR         @R2
    000016AC E405                   MOV         #5,R4      ; H'00000005
    000016AE 7F18                   ADD         #24,R15
    000016B0              L312:
             tskcmd.c       2319          }
             tskcmd.c       2320      }
             tskcmd.c       2321      // 応答メッセージ作成
             tskcmd.c       2322      CmdMakeResponse(    &stCtl,
             tskcmd.c       2323                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2324                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2325                          result,                                         //2  エラーコード
             tskcmd.c       2326    
             tskcmd.c       2327                          nn,                                             //3  入力ｃｈ
             tskcmd.c       2328                          0,                                              //4  
             tskcmd.c       2329                          0,                                              //5  
             tskcmd.c       2330                          0,                                              //6  
             tskcmd.c       2331                          0,                                              //7  
             tskcmd.c       2332    
             tskcmd.c       2333                          0,                                              //8  
             tskcmd.c       2334                          0,                                              //9  
             tskcmd.c       2335                          0,                                              //10 
             tskcmd.c       2336                          0,                                              //11 
             tskcmd.c       2337                          0                                               //12 
             tskcmd.c       2338                      );
    000016B0 E200                   MOV         #0,R2      ; H'00000000
    000016B2 2F26                   MOV.L       R2,@-R15
    000016B4 2F26                   MOV.L       R2,@-R15
    000016B6 2F26                   MOV.L       R2,@-R15
    000016B8 2F26                   MOV.L       R2,@-R15
    000016BA 2F26                   MOV.L       R2,@-R15
    000016BC 2F26                   MOV.L       R2,@-R15
    000016BE 2F26                   MOV.L       R2,@-R15
    000016C0 2F26                   MOV.L       R2,@-R15
    000016C2 2F26                   MOV.L       R2,@-R15
    000016C4 2FE6                   MOV.L       R14,@-R15
    000016C6 E503                   MOV         #3,R5      ; H'00000003
    000016C8 66D2                   MOV.L       @R13,R6    ; args[]
    000016CA D497                   MOV.L       L1367+12,R4; __$stCtl
    000016CC B97A                   BSR         _CmdMakeResponse
    000016CE 67C3                   MOV         R12,R7
    000016D0 7F28                   ADD         #40,R15
             tskcmd.c       2339    
             tskcmd.c       2340        // 応答メッセージ送信
             tskcmd.c       2341      CmdSendResponse( &stCtl );
    000016D2 D495                   MOV.L       L1367+12,R4; __$stCtl
    000016D4 4CF4                   MOVMU.L     @R15+,R12
    000016D6 A83F                   BRA         _CmdSendResponse
    000016D8 0009                   NOP
             tskcmd.c       2342    }
             tskcmd.c       2343    /***********************************************************************
             tskcmd.c       2344    *
             tskcmd.c       2345    * [概要]  COUNT   入力カウンタの読み出し
             tskcmd.c       2346    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2347    * [戻値]  -
             tskcmd.c       2348    * 
             tskcmd.c       2349    ***********************************************************************/
             tskcmd.c       2350    static void CmdCOUNT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000016DA              __$CmdCOUNT:                     ; function: __$CmdCOUNT
                                                           ; frame size=28
    000016DA 4BF0                   MOVMU.L     R11,@-R15
    000016DC 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2351    {
             tskcmd.c       2352      ER  result = E_SUCCESS;
             tskcmd.c       2353      UB  nn  = CLR;
             tskcmd.c       2354      UINT    cccc = CLR;
             tskcmd.c       2355      UB  msg;
             tskcmd.c       2356    
             tskcmd.c       2357      msg = mrcv->msgdata.msgid;
             tskcmd.c       2358    
             tskcmd.c       2359      //  データチェック
             tskcmd.c       2360      result = ParamDataCheck( msg, anum, args );
    000016E0 655C                   EXTU.B      R5,R5
    000016E2 ED00                   MOV         #0,R13     ; H'00000000
    000016E4 BD6C                   BSR         __$ParamDataCheck
    000016E6 6C63                   MOV         R6,R12
             tskcmd.c       2361    
             tskcmd.c       2362      //  データ正常か
             tskcmd.c       2363      if( result == E_SUCCESS )
    000016E8 2008                   TST         R0,R0
    000016EA 6ED3                   MOV         R13,R14
    000016EC 8F0B                   BF/S        L317
    000016EE 6B03                   MOV         R0,R11
             tskcmd.c       2364      {
             tskcmd.c       2365          // パラメータ取得
             tskcmd.c       2366          nn  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000016F0 54C1                   MOV.L       @(4,R12),R4; args[]
    000016F2 E701                   MOV         #1,R7      ; H'00000001
    000016F4 E50A                   MOV         #10,R5     ; H'0000000A
    000016F6 D189                   MOV.L       L1367,R1   ; _Atoi
    000016F8 410B                   JSR         @R1
    000016FA 6673                   MOV         R7,R6
             tskcmd.c       2367          
             tskcmd.c       2368          // カウント取得
             tskcmd.c       2369          cccc = GetCount(nn);
    000016FC 640C                   EXTU.B      R0,R4
    000016FE D28B                   MOV.L       L1367+16,R2; _GetCount
    00001700 420B                   JSR         @R2
    00001702 6D03                   MOV         R0,R13
    00001704 6E03                   MOV         R0,R14
    00001706              L317:
             tskcmd.c       2370      }
             tskcmd.c       2371      // 応答メッセージ作成
             tskcmd.c       2372      CmdMakeResponseCount(   &stCtl,
             tskcmd.c       2373                              PARAM4,                                     //0  パラメータ数
             tskcmd.c       2374                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2375                              result,                                     //2  エラーコード
             tskcmd.c       2376    
             tskcmd.c       2377                              nn,                                         //3  入力ｃｈ
             tskcmd.c       2378                              cccc                                        //4  カウント値
             tskcmd.c       2379                          );
    00001706 2FE6                   MOV.L       R14,@-R15
    00001708 62DC                   EXTU.B      R13,R2
    0000170A 2F26                   MOV.L       R2,@-R15
    0000170C E504                   MOV         #4,R5      ; H'00000004
    0000170E 66C2                   MOV.L       @R12,R6    ; args[]
    00001710 D485                   MOV.L       L1367+12,R4; __$stCtl
    00001712 BC99                   BSR         _CmdMakeResponseCount
    00001714 67B3                   MOV         R11,R7
    00001716 7F08                   ADD         #8,R15
             tskcmd.c       2380    
             tskcmd.c       2381        // 応答メッセージ送信
             tskcmd.c       2382      CmdSendResponse( &stCtl );
    00001718 D483                   MOV.L       L1367+12,R4; __$stCtl
    0000171A 4BF4                   MOVMU.L     @R15+,R11
    0000171C A81C                   BRA         _CmdSendResponse
    0000171E 0009                   NOP
             tskcmd.c       2383    }
             tskcmd.c       2384    
             tskcmd.c       2385    /***********************************************************************
             tskcmd.c       2386    *
             tskcmd.c       2387    * [概要]  INT     割り込み設定
             tskcmd.c       2388    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2389    * [戻値]  -
             tskcmd.c       2390    * 
             tskcmd.c       2391    ***********************************************************************/
             tskcmd.c       2392    static void CmdINT    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001720              __$CmdINT:                       ; function: __$CmdINT
                                                           ; frame size=92
    00001720 4BF0                   MOVMU.L     R11,@-R15
    00001722 7FE0                   ADD         #-32,R15
             tskcmd.c       2393    {
             tskcmd.c       2394      ER      result = E_SUCCESS;
             tskcmd.c       2395      ST_INTINF           Intinf;                         // 
             tskcmd.c       2396      UB  msg;
             tskcmd.c       2397    
             tskcmd.c       2398      msg = mrcv->msgdata.msgid;
    00001724 6D63                   MOV         R6,R13
    00001726 E63C                   MOV         #60,R6     ; H'0000003C
    00001728 6E53                   MOV         R5,R14
    0000172A 3C41801B               MOVU.B      @(27,R4),R12; (mrcv)->msgid
             tskcmd.c       2399    
             tskcmd.c       2400      // 初期化
             tskcmd.c       2401      memset( &bufwk,  CLR, sizeof( bufwk ) );
    0000172E D47C                   MOV.L       L1367+4,R4 ; __$bufwk
    00001730 D17F                   MOV.L       L1367+20,R1; _memset
    00001732 410B                   JSR         @R1
    00001734 E500                   MOV         #0,R5      ; H'00000000
    00001736 E620                   MOV         #32,R6     ; H'00000020
    00001738 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2402      memset( &Intinf, CLR, sizeof( ST_INTINF ) );
    0000173A DB7D                   MOV.L       L1367+20,R11; _memset
    0000173C 4B0B                   JSR         @R11
    0000173E 64F3                   MOV         R15,R4
             tskcmd.c       2403    
             tskcmd.c       2404      //  データチェック
             tskcmd.c       2405      result = ParamDataCheck( msg, anum, args );
    00001740 65EC                   EXTU.B      R14,R5
    00001742 66D3                   MOV         R13,R6
    00001744 BD3C                   BSR         __$ParamDataCheck
    00001746 64C3                   MOV         R12,R4
             tskcmd.c       2406      
             tskcmd.c       2407      //  データ正常か
             tskcmd.c       2408      if( result == E_SUCCESS )
    00001748 2008                   TST         R0,R0
    0000174A 8F38                   BF/S        L320
    0000174C 6703                   MOV         R0,R7
             tskcmd.c       2409      {
             tskcmd.c       2410          // パラメータ取得
             tskcmd.c       2411          Intinf.nn   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    0000174E 54D1                   MOV.L       @(4,R13),R4; args[]
    00001750 E701                   MOV         #1,R7      ; H'00000001
    00001752 E50A                   MOV         #10,R5     ; H'0000000A
    00001754 DB71                   MOV.L       L1367,R11  ; _Atoi
    00001756 4B0B                   JSR         @R11
    00001758 6673                   MOV         R7,R6
    0000175A 3F010000               MOV.B       R0,@(0:12,R15); Intinf.nn
             tskcmd.c       2412          Intinf.trg  = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    0000175E 54D2                   MOV.L       @(8,R13),R4; args[]
    00001760 E701                   MOV         #1,R7      ; H'00000001
    00001762 E50A                   MOV         #10,R5     ; H'0000000A
    00001764 4B0B                   JSR         @R11
    00001766 6673                   MOV         R7,R6
    00001768 3F010001               MOV.B       R0,@(1:12,R15); Intinf.trg
    0000176C 54D3                   MOV.L       @(12,R13),R4; args[]
             tskcmd.c       2413          
             tskcmd.c       2414          // 一時停止するモータ指定
             tskcmd.c       2415          SetByteArray( args[PARAM3],&Intinf.mmm[0]);
    0000176E 65F3                   MOV         R15,R5
    00001770 7504                   ADD         #4,R5
             tskcmd.c       2416          
             tskcmd.c       2417          // 出力チャネルへ出力する値
             tskcmd.c       2418          SetByteArray( args[PARAM4],&Intinf.dat[0]);
             tskcmd.c       2419    
             tskcmd.c       2420          // 割り込み発生時に出力するチャネル指定
             tskcmd.c       2421          SetByteArray( args[PARAM5],&Intinf.msk[0]);
             tskcmd.c       2422    
             tskcmd.c       2423          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       2424          memcpy( &bufwk[0], (B*)&Intinf, sizeof( ST_INTINF ) );
             tskcmd.c       2425    
             tskcmd.c       2426          // 待ちタスクへ通知
             tskcmd.c       2427          result = mbx_send( ID_TSK_CMD,  
             tskcmd.c       2428                             ID_MPF_INT, 
             tskcmd.c       2429                             ID_MBX_INT, 
             tskcmd.c       2430                             NO_DATA, 
             tskcmd.c       2431                             NO_DATA, 
             tskcmd.c       2432                             msg, 
             tskcmd.c       2433                             Intinf.nn, 
             tskcmd.c       2434                             DEFDAT, 
             tskcmd.c       2435                             &bufwk[0], 
             tskcmd.c       2436                             CMD_BUFSIZ );
    00001772 DE70                   MOV.L       L1367+24,R14; _SetByteArray
    00001774 4E0B                   JSR         @R14
    00001776 EB3C                   MOV         #60,R11    ; H'0000003C
    00001778 54D4                   MOV.L       @(16,R13),R4; args[]
    0000177A 65F3                   MOV         R15,R5
    0000177C D16D                   MOV.L       L1367+24,R1; _SetByteArray
    0000177E 410B                   JSR         @R1
    00001780 750C                   ADD         #12,R5
    00001782 54D5                   MOV.L       @(20,R13),R4; args[]
    00001784 65F3                   MOV         R15,R5
    00001786 D66B                   MOV.L       L1367+24,R6; _SetByteArray
    00001788 460B                   JSR         @R6
    0000178A 7514                   ADD         #20,R5
    0000178C E620                   MOV         #32,R6     ; H'00000020
    0000178E D464                   MOV.L       L1367+4,R4 ; __$bufwk
    00001790 D769                   MOV.L       L1367+28,R7; _memcpy
    00001792 470B                   JSR         @R7
    00001794 65F3                   MOV         R15,R5
    00001796 2FB6                   MOV.L       R11,@-R15
    00001798 D161                   MOV.L       L1367+4,R1 ; __$bufwk
    0000179A 2F16                   MOV.L       R1,@-R15
    0000179C EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    0000179E 6EEC                   EXTU.B      R14,R14
    000017A0 67E3                   MOV         R14,R7
    000017A2 2FE6                   MOV.L       R14,@-R15
    000017A4 7FFC                   ADD         #-4,R15
    000017A6 32F18010               MOVU.B      @(16,R15),R2; Intinf.nn
    000017AA 2F22                   MOV.L       R2,@R15
    000017AC 2FC6                   MOV.L       R12,@-R15
    000017AE 2FE6                   MOV.L       R14,@-R15
    000017B0 E60B                   MOV         #11,R6     ; H'0000000B
    000017B2 E50A                   MOV         #10,R5     ; H'0000000A
    000017B4 DC5B                   MOV.L       L1367+8,R12; _mbx_send
    000017B6 4C0B                   JSR         @R12
    000017B8 E405                   MOV         #5,R4      ; H'00000005
    000017BA 6703                   MOV         R0,R7
    000017BC 7F18                   ADD         #24,R15
    000017BE              L320:
             tskcmd.c       2437      }
             tskcmd.c       2438    
             tskcmd.c       2439      // 応答メッセージ作成
             tskcmd.c       2440      CmdMakeResponse(    &stCtl,
             tskcmd.c       2441                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2442                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2443                          result,                                         //2  エラーコード
             tskcmd.c       2444    
             tskcmd.c       2445                          Intinf.nn,                                      //3  入力ｃｈ
             tskcmd.c       2446                          0,                                              //4  
             tskcmd.c       2447                          0,                                              //5  
             tskcmd.c       2448                          0,                                              //6  
             tskcmd.c       2449                          0,                                              //7  
             tskcmd.c       2450    
             tskcmd.c       2451                          0,                                              //8  
             tskcmd.c       2452                          0,                                              //9  
             tskcmd.c       2453                          0,                                              //10 
             tskcmd.c       2454                          0,                                              //11 
             tskcmd.c       2455                          0                                               //12 
             tskcmd.c       2456                      );
    000017BE E200                   MOV         #0,R2      ; H'00000000
    000017C0 2F26                   MOV.L       R2,@-R15
    000017C2 2F26                   MOV.L       R2,@-R15
    000017C4 2F26                   MOV.L       R2,@-R15
    000017C6 2F26                   MOV.L       R2,@-R15
    000017C8 2F26                   MOV.L       R2,@-R15
    000017CA 2F26                   MOV.L       R2,@-R15
    000017CC 2F26                   MOV.L       R2,@-R15
    000017CE 2F26                   MOV.L       R2,@-R15
    000017D0 2F26                   MOV.L       R2,@-R15
    000017D2 3EF18024               MOVU.B      @(36,R15),R14; Intinf.nn
    000017D6 2FE6                   MOV.L       R14,@-R15
    000017D8 E503                   MOV         #3,R5      ; H'00000003
    000017DA D453                   MOV.L       L1367+12,R4; __$stCtl
    000017DC B8F2                   BSR         _CmdMakeResponse
    000017DE 66D2                   MOV.L       @R13,R6    ; args[]
             tskcmd.c       2457    
             tskcmd.c       2458        // 応答メッセージ送信
             tskcmd.c       2459      CmdSendResponse( &stCtl );
    000017E0 D451                   MOV.L       L1367+12,R4; __$stCtl
    000017E2 D356                   MOV.L       L1367+32,R3; _CmdSendResponse
    000017E4 430B                   JSR         @R3
    000017E6 7F28                   ADD         #40,R15
    000017E8 7F20                   ADD         #32,R15
    000017EA 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       2460    }
    000017EC 006B                   RTS/N
             tskcmd.c       2461    
             tskcmd.c       2462    /***********************************************************************
             tskcmd.c       2463    *
             tskcmd.c       2464    * [概要]  ABSMV   パルスモータ移動(絶対位置)
             tskcmd.c       2465    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2466    * [戻値]  -
             tskcmd.c       2467    * 
             tskcmd.c       2468    ***********************************************************************/
             tskcmd.c       2469    static void CmdABSMV  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000017EE              __$CmdABSMV:                     ; function: __$CmdABSMV
                                                           ; frame size=64
    000017EE 4CF0                   MOVMU.L     R12,@-R15
    000017F0 7FF8                   ADD         #-8,R15
             tskcmd.c       2470    {
             tskcmd.c       2471      ER result = E_SUCCESS;
             tskcmd.c       2472      ST_ABSMV absmv;
             tskcmd.c       2473      UB  msg;
             tskcmd.c       2474    
             tskcmd.c       2475      msg = mrcv->msgdata.msgid;
    000017F2 6C63                   MOV         R6,R12
    000017F4 E63C                   MOV         #60,R6     ; H'0000003C
    000017F6 6E53                   MOV         R5,R14
    000017F8 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       2476      
             tskcmd.c       2477      // 初期化
             tskcmd.c       2478      memset( &bufwk, 0, sizeof( bufwk ) );
    000017FC D448                   MOV.L       L1367+4,R4 ; __$bufwk
    000017FE D14C                   MOV.L       L1367+20,R1; _memset
    00001800 410B                   JSR         @R1
    00001802 E500                   MOV         #0,R5      ; H'00000000
    00001804 E608                   MOV         #8,R6      ; H'00000008
    00001806 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2479      memset( &absmv,  0,  sizeof( ST_ABSMV ) );
    00001808 D249                   MOV.L       L1367+20,R2; _memset
    0000180A 420B                   JSR         @R2
    0000180C 64F3                   MOV         R15,R4
             tskcmd.c       2480    
             tskcmd.c       2481      //  データチェック
             tskcmd.c       2482      result = ParamDataCheck( msg, anum, args );
    0000180E 65EC                   EXTU.B      R14,R5
    00001810 66C3                   MOV         R12,R6
    00001812 BCD5                   BSR         __$ParamDataCheck
    00001814 64D3                   MOV         R13,R4
             tskcmd.c       2483    
             tskcmd.c       2484      //  データ正常か
             tskcmd.c       2485      if( result == E_SUCCESS )
    00001816 2008                   TST         R0,R0
    00001818 8F2E                   BF/S        L323
    0000181A 6703                   MOV         R0,R7
             tskcmd.c       2486      {
             tskcmd.c       2487          // パラメータ取得
             tskcmd.c       2488          absmv.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    0000181C 54C1                   MOV.L       @(4,R12),R4; args[]
    0000181E E701                   MOV         #1,R7      ; H'00000001
    00001820 E50A                   MOV         #10,R5     ; H'0000000A
    00001822 D23E                   MOV.L       L1367,R2   ; _Atoi
    00001824 420B                   JSR         @R2
    00001826 6673                   MOV         R7,R6
    00001828 3F010000               MOV.B       R0,@(0:12,R15); absmv.mm
             tskcmd.c       2489          absmv.pppp = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    0000182C 54C2                   MOV.L       @(8,R12),R4; args[]
    0000182E E701                   MOV         #1,R7      ; H'00000001
    00001830 E604                   MOV         #4,R6      ; H'00000004
    00001832 DE3A                   MOV.L       L1367,R14  ; _Atoi
    00001834 4E0B                   JSR         @R14
    00001836 E50A                   MOV         #10,R5     ; H'0000000A
    00001838 1F01                   MOV.L       R0,@(4,R15); absmv.pppp
    0000183A E701                   MOV         #1,R7      ; H'00000001
    0000183C E50A                   MOV         #10,R5     ; H'0000000A
    0000183E 6673                   MOV         R7,R6
             tskcmd.c       2490          absmv.st   = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    00001840 D136                   MOV.L       L1367,R1   ; _Atoi
    00001842 410B                   JSR         @R1
    00001844 54C3                   MOV.L       @(12,R12),R4; args[]
             tskcmd.c       2491    
             tskcmd.c       2492          // デバイス動作状態確認
             tskcmd.c       2493          result = GetDeviceActionChk( msg, NO_DATA, absmv.mm );
    00001846 36F14000               MOV.B       @(0:12,R15),R6; absmv.mm
    0000184A 3F010001               MOV.B       R0,@(1:12,R15); absmv.st
    0000184E E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001850 B68F                   BSR         __$GetDeviceActionChk
    00001852 64D3                   MOV         R13,R4
             tskcmd.c       2494    
             tskcmd.c       2495          if( result == E_SUCCESS )
    00001854 2008                   TST         R0,R0
    00001856 8F0F                   BF/S        L323
    00001858 6703                   MOV         R0,R7
             tskcmd.c       2496          {
             tskcmd.c       2497              result = AbsmvAction( NO_DATA, NO_DATA, absmv.mm, absmv.st, absmv.pppp );
    0000185A 7FFC                   ADD         #-4,R15
    0000185C E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    0000185E 52F2                   MOV.L       @(8,R15),R2; absmv.pppp
    00001860 655C                   EXTU.B      R5,R5
    00001862 36F14004               MOV.B       @(4:12,R15),R6; absmv.mm
    00001866 37F14005               MOV.B       @(5:12,R15),R7; absmv.st
    0000186A 2F22                   MOV.L       R2,@R15
    0000186C B712                   BSR         __$AbsmvAction
    0000186E 6453                   MOV         R5,R4
    00001870 7F04                   ADD         #4,R15
             tskcmd.c       2498          }
             tskcmd.c       2499      }
             tskcmd.c       2500    
             tskcmd.c       2501      if( result != E_SUCCESS )
    00001872 2008                   TST         R0,R0
    00001874 8D15                   BT/S        L325
    00001876 6703                   MOV         R0,R7
    00001878              L323:
             tskcmd.c       2502      {
             tskcmd.c       2503          // 応答メッセージ作成
             tskcmd.c       2504          CmdMakeResponse(    &stCtl,
             tskcmd.c       2505                              PARAM7,                                     //0  パラメータ数
             tskcmd.c       2506                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2507                              result,                                     //2  エラーコード
             tskcmd.c       2508    
             tskcmd.c       2509                              (INT)absmv.mm,                              //3  モータ１番号
             tskcmd.c       2510                              0,                                          //4  パルスカウント１
             tskcmd.c       2511                              0,                                          //5  エンコーダ１
             tskcmd.c       2512                              0,                                          //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2513                              0,                                          //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2514    
             tskcmd.c       2515                              0,                                          //8  
             tskcmd.c       2516                              0,                                          //9  
             tskcmd.c       2517                              0,                                          //10 
             tskcmd.c       2518                              0,                                          //11 
             tskcmd.c       2519                              0                                           //12 
             tskcmd.c       2520                          );
    00001878 E200                   MOV         #0,R2      ; H'00000000
    0000187A 2F26                   MOV.L       R2,@-R15
    0000187C 2F26                   MOV.L       R2,@-R15
    0000187E 2F26                   MOV.L       R2,@-R15
    00001880 2F26                   MOV.L       R2,@-R15
    00001882 2F26                   MOV.L       R2,@-R15
    00001884 2F26                   MOV.L       R2,@-R15
    00001886 2F26                   MOV.L       R2,@-R15
    00001888 2F26                   MOV.L       R2,@-R15
    0000188A 2F26                   MOV.L       R2,@-R15
    0000188C 31F18024               MOVU.B      @(36,R15),R1; absmv.mm
    00001890 2F16                   MOV.L       R1,@-R15
    00001892 E507                   MOV         #7,R5      ; H'00000007
    00001894 D424                   MOV.L       L1367+12,R4; __$stCtl
    00001896 B895                   BSR         _CmdMakeResponse
    00001898 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2521    
             tskcmd.c       2522          // 応答メッセージ送信
             tskcmd.c       2523          CmdSendResponse( &stCtl );
    0000189A D423                   MOV.L       L1367+12,R4; __$stCtl
    0000189C D327                   MOV.L       L1367+32,R3; _CmdSendResponse
    0000189E 430B                   JSR         @R3
    000018A0 7F28                   ADD         #40,R15
    000018A2              L325:
    000018A2 7F08                   ADD         #8,R15
    000018A4 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       2524      }
             tskcmd.c       2525    }
    000018A6 006B                   RTS/N
             tskcmd.c       2526    
             tskcmd.c       2527    /***********************************************************************
             tskcmd.c       2528    *
             tskcmd.c       2529    * [概要]  ABORT   パルスモータ即停止
             tskcmd.c       2530    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2531    * [戻値]  -
             tskcmd.c       2532    * 
             tskcmd.c       2533    ***********************************************************************/
             tskcmd.c       2534    static void CmdABORT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    000018A8              __$CmdABORT:                     ; function: __$CmdABORT
                                                           ; frame size=52
    000018A8 4EF0                   MOVMU.L     R14,@-R15
    000018AA 7FFC                   ADD         #-4,R15
    000018AC 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
    000018B0 655C                   EXTU.B      R5,R5
             tskcmd.c       2535    {
             tskcmd.c       2536      ER result = E_SUCCESS;
             tskcmd.c       2537      ST_STOP abort;
             tskcmd.c       2538      UB  msg;
             tskcmd.c       2539    
             tskcmd.c       2540      msg = mrcv->msgdata.msgid;
             tskcmd.c       2541    
             tskcmd.c       2542      //  データチェック
             tskcmd.c       2543      result = ParamDataCheck( msg, anum, args );
    000018B2 BC85                   BSR         __$ParamDataCheck
    000018B4 6E63                   MOV         R6,R14
             tskcmd.c       2544    
             tskcmd.c       2545      //  データ正常か
             tskcmd.c       2546      if( result == E_SUCCESS )
    000018B6 2008                   TST         R0,R0
    000018B8 8F44                   BF/S        L328
    000018BA 6703                   MOV         R0,R7
             tskcmd.c       2547      {
             tskcmd.c       2548          // パラメータ取得
             tskcmd.c       2549          abort.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000018BC 54E1                   MOV.L       @(4,R14),R4; args[]
    000018BE E701                   MOV         #1,R7      ; H'00000001
    000018C0 E50A                   MOV         #10,R5     ; H'0000000A
    000018C2 D116                   MOV.L       L1367,R1   ; _Atoi
    000018C4 410B                   JSR         @R1
    000018C6 6673                   MOV         R7,R6
    000018C8 3F010000               MOV.B       R0,@(0:12,R15); abort.mm
    000018CC E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       2550    
             tskcmd.c       2551          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       2552          memcpy( &bufwk[0], (B*)&abort, sizeof( ST_STOP ) );
    000018CE D414                   MOV.L       L1367+4,R4 ; __$bufwk
    000018D0 D719                   MOV.L       L1367+28,R7; _memcpy
    000018D2 470B                   JSR         @R7
    000018D4 65F3                   MOV         R15,R5
    000018D6 32F18000               MOVU.B      @(0,R15),R2; abort.mm
             tskcmd.c       2553    
             tskcmd.c       2554          // 既に励磁ONの場合は、実行タスクへ
             tskcmd.c       2555          if( power[abort.mm].sw == SET)
    000018DA D419                   MOV.L       L1367+36,R4; H'00000001+__$power
    000018DC 6023                   MOV         R2,R0
    000018DE EE3C                   MOV         #60,R14    ; H'0000003C
    000018E0 4000                   SHLL        R0
    000018E2 004C                   MOV.B       @(R0,R4),R0; power[].sw
    000018E4 8801                   CMP/EQ      #1,R0
    000018E6 2FE6                   MOV.L       R14,@-R15
    000018E8 D10D                   MOV.L       L1367+4,R1 ; __$bufwk
    000018EA 2F16                   MOV.L       R1,@-R15
    000018EC E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    000018EE 611C                   EXTU.B      R1,R1
    000018F0 6713                   MOV         R1,R7
    000018F2 2F16                   MOV.L       R1,@-R15
    000018F4 2F26                   MOV.L       R2,@-R15
    000018F6 E20A                   MOV         #10,R2     ; H'0000000A
    000018F8 2F26                   MOV.L       R2,@-R15
    000018FA D20A                   MOV.L       L1367+8,R2 ; _mbx_send
    000018FC 8F03                   BF/S        L330
    000018FE 2F16                   MOV.L       R1,@-R15
             tskcmd.c       2556          {
             tskcmd.c       2557              result = mbx_send   (
             tskcmd.c       2558                                      ID_TSK_CMD,
             tskcmd.c       2559                                      ID_MPF_MOTACT,
             tskcmd.c       2560                                      ID_MBX_MOTACT,
             tskcmd.c       2561                                      NO_DATA,
             tskcmd.c       2562                                      NO_DATA,
             tskcmd.c       2563                                      ID_MSG_ABORT,
             tskcmd.c       2564                                      abort.mm,
             tskcmd.c       2565                                      DEFDAT,
             tskcmd.c       2566                                      &bufwk[0],
             tskcmd.c       2567                                      CMD_BUFSIZ
             tskcmd.c       2568                                  );
    00001900 E609                   MOV         #9,R6      ; H'00000009
    00001902 A002                   BRA         L331
    00001904 E508                   MOV         #8,R5      ; H'00000008
    00001906              L330:
             tskcmd.c       2569          }
             tskcmd.c       2570          else
             tskcmd.c       2571          {
             tskcmd.c       2572              result = mbx_send   (
             tskcmd.c       2573                                      ID_TSK_CMD,
             tskcmd.c       2574                                      ID_MPF_MOTWAIT,
             tskcmd.c       2575                                      ID_MBX_MOTWAIT,
             tskcmd.c       2576                                      NO_DATA,
             tskcmd.c       2577                                      NO_DATA,
             tskcmd.c       2578                                      ID_MSG_ABORT,
             tskcmd.c       2579                                      abort.mm,
             tskcmd.c       2580                                      DEFDAT,
             tskcmd.c       2581                                      &bufwk[0],
             tskcmd.c       2582                                      CMD_BUFSIZ
             tskcmd.c       2583                                  );
    00001906 E608                   MOV         #8,R6      ; H'00000008
    00001908 E507                   MOV         #7,R5      ; H'00000007
    0000190A              L331:
             tskcmd.c       2584          }
             tskcmd.c       2585          ClrDevice( abort.mm );
    0000190A 420B                   JSR         @R2
    0000190C E405                   MOV         #5,R4      ; H'00000005
    0000190E 7F18                   ADD         #24,R15
    00001910 34F14000               MOV.B       @(0:12,R15),R4; abort.mm
    00001914 B620                   BSR         __$ClrDevice
    00001916 0009                   NOP
    00001918 A027                   BRA         L332
    0000191A 0009                   NOP
    0000191C              L1367:
    0000191C <00000000>             .DATA.L     _Atoi
    00001920 <00000000>             .DATA.L     __$bufwk
    00001924 <00000000>             .DATA.L     _mbx_send
    00001928 <00000000>             .DATA.L     __$stCtl
    0000192C <00000000>             .DATA.L     _GetCount
    00001930 <00000000>             .DATA.L     _memset
    00001934 <00000000>             .DATA.L     _SetByteArray
    00001938 <00000000>             .DATA.L     _memcpy
    0000193C <00000000>             .DATA.L     _CmdSendResponse
    00001940 <00000001>             .DATA.L     H'00000001+__$power
    00001944              L328:
             tskcmd.c       2586      }
             tskcmd.c       2587      else
             tskcmd.c       2588      {
             tskcmd.c       2589          // 応答メッセージ作成
             tskcmd.c       2590          CmdMakeResponse(    &stCtl,
             tskcmd.c       2591                              PARAM2,                                         //0  パラメータ数
             tskcmd.c       2592                              args[0],                                        //1  コマンド文字列
             tskcmd.c       2593                              result,                                         //2  エラーコード
             tskcmd.c       2594    
             tskcmd.c       2595                              0,                                              //3  モータ１番号
             tskcmd.c       2596                              0,                                              //4  パルスカウント１
             tskcmd.c       2597                              0,                                              //5  エンコーダ１
             tskcmd.c       2598                              0,                                              //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2599                              0,                                              //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2600    
             tskcmd.c       2601                              0,                                              //8  
             tskcmd.c       2602                              0,                                              //9  
             tskcmd.c       2603                              0,                                              //10 
             tskcmd.c       2604                              0,                                              //11 
             tskcmd.c       2605                              0                                               //12 
             tskcmd.c       2606                          );
    00001944 0229                   MOVT        R2
    00001946 2F26                   MOV.L       R2,@-R15
    00001948 2F26                   MOV.L       R2,@-R15
    0000194A 2F26                   MOV.L       R2,@-R15
    0000194C 2F26                   MOV.L       R2,@-R15
    0000194E 2F26                   MOV.L       R2,@-R15
    00001950 2F26                   MOV.L       R2,@-R15
    00001952 2F26                   MOV.L       R2,@-R15
    00001954 2F26                   MOV.L       R2,@-R15
    00001956 2F26                   MOV.L       R2,@-R15
    00001958 2F26                   MOV.L       R2,@-R15
    0000195A E502                   MOV         #2,R5      ; H'00000002
    0000195C D4A5                   MOV.L       L1368+2,R4 ; __$stCtl
    0000195E B831                   BSR         _CmdMakeResponse
    00001960 66E2                   MOV.L       @R14,R6    ; args[]
             tskcmd.c       2607    
             tskcmd.c       2608          // 応答メッセージ送信
             tskcmd.c       2609          CmdSendResponse( &stCtl );
    00001962 D4A4                   MOV.L       L1368+2,R4 ; __$stCtl
    00001964 D3A4                   MOV.L       L1368+6,R3 ; _CmdSendResponse
    00001966 430B                   JSR         @R3
    00001968 7F28                   ADD         #40,R15
    0000196A              L332:
    0000196A 7F04                   ADD         #4,R15
    0000196C 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       2610      }
             tskcmd.c       2611    }
    0000196E 006B                   RTS/N
             tskcmd.c       2612    
             tskcmd.c       2613    /***********************************************************************
             tskcmd.c       2614    *
             tskcmd.c       2615    * [概要]  ENCODER エンコーダの設定
             tskcmd.c       2616    * [引数]  メッセージ、引数の数、ｺﾏﾝﾄﾞ電文
             tskcmd.c       2617    * [戻値]  エラー
             tskcmd.c       2618    * 
             tskcmd.c       2619    ***********************************************************************/
             tskcmd.c       2620    static void CmdENCODER( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001970              __$CmdENCODER:                   ; function: __$CmdENCODER
                                                           ; frame size=68
    00001970 49F0                   MOVMU.L     R9,@-R15
    00001972 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
             tskcmd.c       2621    {
             tskcmd.c       2622      ER  result = E_SUCCESS;
             tskcmd.c       2623      UB  mm   = CLR;
             tskcmd.c       2624      UB  ec   = CLR;
             tskcmd.c       2625      UB  dtyp = CLR;
             tskcmd.c       2626      UB  dv   = CLR;
             tskcmd.c       2627      INT so   = CLR;
             tskcmd.c       2628      UB  msg;
             tskcmd.c       2629    
             tskcmd.c       2630      msg = mrcv->msgdata.msgid;
             tskcmd.c       2631    
             tskcmd.c       2632      //  データチェック
             tskcmd.c       2633      result = ParamDataCheck( msg, anum, args );
    00001976 655C                   EXTU.B      R5,R5
    00001978 ED00                   MOV         #0,R13     ; H'00000000
    0000197A BC21                   BSR         __$ParamDataCheck
    0000197C 6E63                   MOV         R6,R14
             tskcmd.c       2634    
             tskcmd.c       2635      //  データ正常か
             tskcmd.c       2636      if( result == E_SUCCESS )
    0000197E 2008                   TST         R0,R0
    00001980 8F27                   BF/S        L335
    00001982 6703                   MOV         R0,R7
             tskcmd.c       2637      {
             tskcmd.c       2638          // パラメータ取得
             tskcmd.c       2639          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001984 54E1                   MOV.L       @(4,R14),R4; args[]
    00001986 E701                   MOV         #1,R7      ; H'00000001
    00001988 E50A                   MOV         #10,R5     ; H'0000000A
    0000198A DB9C                   MOV.L       L1368+10,R11; _Atoi
    0000198C 4B0B                   JSR         @R11
    0000198E 6673                   MOV         R7,R6
             tskcmd.c       2640          ec   = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    00001990 54E2                   MOV.L       @(8,R14),R4; args[]
    00001992 E701                   MOV         #1,R7      ; H'00000001
    00001994 E50A                   MOV         #10,R5     ; H'0000000A
    00001996 6D03                   MOV         R0,R13
    00001998 4B0B                   JSR         @R11
    0000199A 6673                   MOV         R7,R6
             tskcmd.c       2641          dtyp = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    0000199C 54E3                   MOV.L       @(12,R14),R4; args[]
    0000199E E701                   MOV         #1,R7      ; H'00000001
    000019A0 E50A                   MOV         #10,R5     ; H'0000000A
    000019A2 6A03                   MOV         R0,R10
    000019A4 4B0B                   JSR         @R11
    000019A6 6673                   MOV         R7,R6
             tskcmd.c       2642          dv   = Atoi( args[PARAM4], N_DEC, sizeof(UB), N_SIG );
    000019A8 54E4                   MOV.L       @(16,R14),R4; args[]
    000019AA E701                   MOV         #1,R7      ; H'00000001
    000019AC E50A                   MOV         #10,R5     ; H'0000000A
    000019AE 6C03                   MOV         R0,R12
    000019B0 4B0B                   JSR         @R11
    000019B2 6673                   MOV         R7,R6
             tskcmd.c       2643          so   = Atoi( args[PARAM5], N_DEC, sizeof(INT), N_SIG );
    000019B4 54E5                   MOV.L       @(20,R14),R4; args[]
    000019B6 E701                   MOV         #1,R7      ; H'00000001
    000019B8 E604                   MOV         #4,R6      ; H'00000004
    000019BA E50A                   MOV         #10,R5     ; H'0000000A
    000019BC 4B0B                   JSR         @R11
    000019BE 6903                   MOV         R0,R9
             tskcmd.c       2644          
             tskcmd.c       2645          result = motor_ENCODER( mm, ec, dtyp, dv, so );
    000019C0 2F06                   MOV.L       R0,@-R15
    000019C2 679C                   EXTU.B      R9,R7
    000019C4 66CC                   EXTU.B      R12,R6
    000019C6 65AC                   EXTU.B      R10,R5
    000019C8 D28D                   MOV.L       L1368+14,R2; _motor_ENCODER
    000019CA 420B                   JSR         @R2
    000019CC 64DC                   EXTU.B      R13,R4
    000019CE 6703                   MOV         R0,R7
    000019D0 7F04                   ADD         #4,R15
    000019D2              L335:
             tskcmd.c       2646      }
             tskcmd.c       2647    
             tskcmd.c       2648      // 応答メッセージ作成
             tskcmd.c       2649      CmdMakeResponse(    &stCtl,
             tskcmd.c       2650                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2651                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2652                          result,                                         //2  エラーコード
             tskcmd.c       2653    
             tskcmd.c       2654                          mm,                                             //3  モータ番号
             tskcmd.c       2655                          0,                                              //4  
             tskcmd.c       2656                          0,                                              //5  
             tskcmd.c       2657                          0,                                              //6  
             tskcmd.c       2658                          0,                                              //7  
             tskcmd.c       2659    
             tskcmd.c       2660                          0,                                              //8  
             tskcmd.c       2661                          0,                                              //9  
             tskcmd.c       2662                          0,                                              //10 
             tskcmd.c       2663                          0,                                              //11 
             tskcmd.c       2664                          0                                               //12 
             tskcmd.c       2665                      );
    000019D2 E100                   MOV         #0,R1      ; H'00000000
    000019D4 2F16                   MOV.L       R1,@-R15
    000019D6 2F16                   MOV.L       R1,@-R15
    000019D8 2F16                   MOV.L       R1,@-R15
    000019DA 2F16                   MOV.L       R1,@-R15
    000019DC 2F16                   MOV.L       R1,@-R15
    000019DE 2F16                   MOV.L       R1,@-R15
    000019E0 2F16                   MOV.L       R1,@-R15
    000019E2 2F16                   MOV.L       R1,@-R15
    000019E4 2F16                   MOV.L       R1,@-R15
    000019E6 69DC                   EXTU.B      R13,R9
    000019E8 2F96                   MOV.L       R9,@-R15
    000019EA E503                   MOV         #3,R5      ; H'00000003
    000019EC D481                   MOV.L       L1368+2,R4 ; __$stCtl
    000019EE D385                   MOV.L       L1368+18,R3; _CmdMakeResponse
    000019F0 430B                   JSR         @R3
    000019F2 66E2                   MOV.L       @R14,R6    ; args[]
    000019F4 7F28                   ADD         #40,R15
             tskcmd.c       2666    
             tskcmd.c       2667        // 応答メッセージ送信
             tskcmd.c       2668      CmdSendResponse( &stCtl );
    000019F6 D47F                   MOV.L       L1368+2,R4 ; __$stCtl
    000019F8 49F4                   MOVMU.L     @R15+,R9
    000019FA D37F                   MOV.L       L1368+6,R3 ; _CmdSendResponse
    000019FC 432B                   JMP         @R3
    000019FE 0009                   NOP
             tskcmd.c       2669    }
             tskcmd.c       2670    
             tskcmd.c       2671    /***********************************************************************
             tskcmd.c       2672    *
             tskcmd.c       2673    * [概要]  LIMIT   パルスモータ原点復帰
             tskcmd.c       2674    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2675    * [戻値]  -
             tskcmd.c       2676    * 
             tskcmd.c       2677    ***********************************************************************/
             tskcmd.c       2678    static void CmdLIMIT  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001A00              __$CmdLIMIT:                     ; function: __$CmdLIMIT
                                                           ; frame size=64
    00001A00 4CF0                   MOVMU.L     R12,@-R15
    00001A02 7FF8                   ADD         #-8,R15
             tskcmd.c       2679    {
             tskcmd.c       2680      ER       result = E_SUCCESS;
             tskcmd.c       2681      ST_LIMIT limit;
             tskcmd.c       2682      UB       msg;
             tskcmd.c       2683    
             tskcmd.c       2684      msg = mrcv->msgdata.msgid;
    00001A04 6C63                   MOV         R6,R12
    00001A06 E63C                   MOV         #60,R6     ; H'0000003C
    00001A08 6E53                   MOV         R5,R14
    00001A0A 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       2685    
             tskcmd.c       2686      // 初期化
             tskcmd.c       2687      memset( &bufwk, 0, sizeof( bufwk ) );
    00001A0E D47E                   MOV.L       L1368+22,R4; __$bufwk
    00001A10 D17E                   MOV.L       L1368+26,R1; _memset
    00001A12 410B                   JSR         @R1
    00001A14 E500                   MOV         #0,R5      ; H'00000000
    00001A16 E608                   MOV         #8,R6      ; H'00000008
    00001A18 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2688      memset( &limit,  0,  sizeof( ST_LIMIT ) );
    00001A1A D27C                   MOV.L       L1368+26,R2; _memset
    00001A1C 420B                   JSR         @R2
    00001A1E 64F3                   MOV         R15,R4
             tskcmd.c       2689    
             tskcmd.c       2690      //  データチェック
             tskcmd.c       2691      result = ParamDataCheck( msg, anum, args );
    00001A20 65EC                   EXTU.B      R14,R5
    00001A22 66C3                   MOV         R12,R6
    00001A24 BBCC                   BSR         __$ParamDataCheck
    00001A26 64D3                   MOV         R13,R4
             tskcmd.c       2692    
             tskcmd.c       2693      //  データ正常か
             tskcmd.c       2694      if( result == E_SUCCESS )
    00001A28 2008                   TST         R0,R0
    00001A2A 8F36                   BF/S        L338
    00001A2C 6703                   MOV         R0,R7
             tskcmd.c       2695      {
             tskcmd.c       2696          // パラメータ取得
             tskcmd.c       2697          limit.mm  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001A2E 54C1                   MOV.L       @(4,R12),R4; args[]
    00001A30 E701                   MOV         #1,R7      ; H'00000001
    00001A32 E50A                   MOV         #10,R5     ; H'0000000A
    00001A34 D271                   MOV.L       L1368+10,R2; _Atoi
    00001A36 420B                   JSR         @R2
    00001A38 6673                   MOV         R7,R6
    00001A3A 3F010000               MOV.B       R0,@(0:12,R15); limit.mm
             tskcmd.c       2698          limit.dr = GetCwInfo( args[PARAM2 ] );                      // 移動方向     CW : 正転方向, CCW : 逆転方向
    00001A3E D174                   MOV.L       L1368+30,R1; _GetCwInfo
    00001A40 410B                   JSR         @R1
    00001A42 54C2                   MOV.L       @(8,R12),R4; args[]
    00001A44 E701                   MOV         #1,R7      ; H'00000001
    00001A46 6E03                   MOV         R0,R14
    00001A48 6073                   MOV         R7,R0
    00001A4A 0FE4                   MOV.B       R14,@(R0,R15); limit.dr
    00001A4C E604                   MOV         #4,R6      ; H'00000004
    00001A4E E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       2699          limit.sp = Atoi( args[PARAM3], N_DEC, sizeof(INT), N_SIG );
    00001A50 DE6A                   MOV.L       L1368+10,R14; _Atoi
    00001A52 4E0B                   JSR         @R14
    00001A54 54C3                   MOV.L       @(12,R12),R4; args[]
    00001A56 1F01                   MOV.L       R0,@(4,R15); limit.sp
    00001A58 E701                   MOV         #1,R7      ; H'00000001
    00001A5A E50A                   MOV         #10,R5     ; H'0000000A
    00001A5C 6673                   MOV         R7,R6
             tskcmd.c       2700          limit.md = Atoi( args[PARAM4], N_DEC, sizeof(UB), N_SIG );
    00001A5E D167                   MOV.L       L1368+10,R1; _Atoi
    00001A60 410B                   JSR         @R1
    00001A62 54C4                   MOV.L       @(16,R12),R4; args[]
             tskcmd.c       2701    
             tskcmd.c       2702          // デバイス動作状態確認
             tskcmd.c       2703          result = GetDeviceActionChk( msg, NO_DATA, limit.mm );
    00001A64 36F14000               MOV.B       @(0:12,R15),R6; limit.mm
    00001A68 3F010002               MOV.B       R0,@(2:12,R15); limit.md
    00001A6C E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001A6E B580                   BSR         __$GetDeviceActionChk
    00001A70 64D3                   MOV         R13,R4
             tskcmd.c       2704    
             tskcmd.c       2705          if( result == E_SUCCESS )
    00001A72 2008                   TST         R0,R0
    00001A74 8F11                   BF/S        L338
    00001A76 6703                   MOV         R0,R7
             tskcmd.c       2706          {
             tskcmd.c       2707              // デバイス動作中にセット
             tskcmd.c       2708              result = LimitAction(   
             tskcmd.c       2709                              NO_DATA,
             tskcmd.c       2710                              NO_DATA,
             tskcmd.c       2711                              limit.mm,
             tskcmd.c       2712                              limit.dr, 
             tskcmd.c       2713                              GENTEN_POS,
             tskcmd.c       2714                              limit.sp
             tskcmd.c       2715                          );                                              // リミット位置動作
    00001A78 7FFC                   ADD         #-4,R15
    00001A7A ED00                   MOV         #0,R13     ; H'00000000
    00001A7C 51F2                   MOV.L       @(8,R15),R1; limit.sp
    00001A7E 2F12                   MOV.L       R1,@R15
    00001A80 2FD6                   MOV.L       R13,@-R15
    00001A82 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001A84 36F14008               MOV.B       @(8:12,R15),R6; limit.mm
    00001A88 37F14009               MOV.B       @(9:12,R15),R7; limit.dr
    00001A8C 655C                   EXTU.B      R5,R5
    00001A8E B582                   BSR         __$LimitAction
    00001A90 6453                   MOV         R5,R4
    00001A92 7F08                   ADD         #8,R15
             tskcmd.c       2716          }
             tskcmd.c       2717      }
             tskcmd.c       2718    
             tskcmd.c       2719      if( result != E_SUCCESS )
    00001A94 2008                   TST         R0,R0
    00001A96 8D16                   BT/S        L340
    00001A98 6703                   MOV         R0,R7
    00001A9A              L338:
             tskcmd.c       2720      {
             tskcmd.c       2721          // 応答メッセージ作成
             tskcmd.c       2722          CmdMakeResponse(    &stCtl,
             tskcmd.c       2723                              PARAM3,                                     //0  パラメータ数
             tskcmd.c       2724                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2725                              result,                                     //2  エラーコード
             tskcmd.c       2726    
             tskcmd.c       2727                              (INT)limit.mm,                              //3  モータ１番号
             tskcmd.c       2728                              0,                                          //4  パルスカウント１
             tskcmd.c       2729                              0,                                          //5  エンコーダ１
             tskcmd.c       2730                              0,                                          //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2731                              0,                                          //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2732    
             tskcmd.c       2733                              0,                                          //8  
             tskcmd.c       2734                              0,                                          //9  
             tskcmd.c       2735                              0,                                          //10 
             tskcmd.c       2736                              0,                                          //11 
             tskcmd.c       2737                              0                                           //12 
             tskcmd.c       2738                          );
    00001A9A E200                   MOV         #0,R2      ; H'00000000
    00001A9C 2F26                   MOV.L       R2,@-R15
    00001A9E 2F26                   MOV.L       R2,@-R15
    00001AA0 2F26                   MOV.L       R2,@-R15
    00001AA2 2F26                   MOV.L       R2,@-R15
    00001AA4 2F26                   MOV.L       R2,@-R15
    00001AA6 2F26                   MOV.L       R2,@-R15
    00001AA8 2F26                   MOV.L       R2,@-R15
    00001AAA 2F26                   MOV.L       R2,@-R15
    00001AAC 2F26                   MOV.L       R2,@-R15
    00001AAE 3EF18024               MOVU.B      @(36,R15),R14; limit.mm
    00001AB2 2FE6                   MOV.L       R14,@-R15
    00001AB4 E503                   MOV         #3,R5      ; H'00000003
    00001AB6 D44F                   MOV.L       L1368+2,R4 ; __$stCtl
    00001AB8 D352                   MOV.L       L1368+18,R3; _CmdMakeResponse
    00001ABA 430B                   JSR         @R3
    00001ABC 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2739    
             tskcmd.c       2740          // 応答メッセージ送信
             tskcmd.c       2741          CmdSendResponse( &stCtl );
    00001ABE D44D                   MOV.L       L1368+2,R4 ; __$stCtl
    00001AC0 D34D                   MOV.L       L1368+6,R3 ; _CmdSendResponse
    00001AC2 430B                   JSR         @R3
    00001AC4 7F28                   ADD         #40,R15
    00001AC6              L340:
    00001AC6 7F08                   ADD         #8,R15
    00001AC8 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       2742      }
             tskcmd.c       2743    }
    00001ACA 006B                   RTS/N
             tskcmd.c       2744    /***********************************************************************
             tskcmd.c       2745    *
             tskcmd.c       2746    * [概要]  MAP     ２軸のパルスモータ移動
             tskcmd.c       2747    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2748    * [戻値]  -
             tskcmd.c       2749    * 
             tskcmd.c       2750    ***********************************************************************/
             tskcmd.c       2751    static void CmdMAP    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001ACC              __$CmdMAP:                       ; function: __$CmdMAP
                                                           ; frame size=124
    00001ACC 4BF0                   MOVMU.L     R11,@-R15
    00001ACE 7FC0                   ADD         #-64,R15
             tskcmd.c       2752    {
             tskcmd.c       2753      ER result  = E_SUCCESS;
             tskcmd.c       2754      UB  msg;
             tskcmd.c       2755      ST_ABSMV absmv;
             tskcmd.c       2756      ST_ABSMV absmv2;
             tskcmd.c       2757      ST_MOTOR_STATUS     sts1;                                       // 
             tskcmd.c       2758      ST_MOTOR_STATUS     sts2;                                       // 
             tskcmd.c       2759    
             tskcmd.c       2760      msg = mrcv->msgdata.msgid;
    00001AD0 6C63                   MOV         R6,R12
    00001AD2 E63C                   MOV         #60,R6     ; H'0000003C
    00001AD4 6D53                   MOV         R5,R13
    00001AD6 3B41801B               MOVU.B      @(27,R4),R11; (mrcv)->msgid
             tskcmd.c       2761      
             tskcmd.c       2762      // 初期化
             tskcmd.c       2763      memset( &bufwk,  CLR, sizeof( bufwk ) );
    00001ADA D44B                   MOV.L       L1368+22,R4; __$bufwk
    00001ADC DE4B                   MOV.L       L1368+26,R14; _memset
    00001ADE 4E0B                   JSR         @R14
    00001AE0 E500                   MOV         #0,R5      ; H'00000000
    00001AE2 E618                   MOV         #24,R6     ; H'00000018
    00001AE4 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2764      memset( &sts1,   CLR, sizeof( ST_MOTOR_STATUS ) );
    00001AE6 4E0B                   JSR         @R14
    00001AE8 64F3                   MOV         R15,R4
             tskcmd.c       2765      memset( &sts2,   CLR, sizeof( ST_MOTOR_STATUS ) );
    00001AEA 64F3                   MOV         R15,R4
    00001AEC 7418                   ADD         #24,R4
    00001AEE E618                   MOV         #24,R6     ; H'00000018
    00001AF0 4E0B                   JSR         @R14
    00001AF2 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2766      memset( &absmv,  CLR, sizeof( ST_ABSMV ) );
    00001AF4 64F3                   MOV         R15,R4
    00001AF6 7430                   ADD         #48,R4
    00001AF8 E608                   MOV         #8,R6      ; H'00000008
    00001AFA 4E0B                   JSR         @R14
    00001AFC E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2767      memset( &absmv2, CLR, sizeof( ST_ABSMV ) );
    00001AFE 64F3                   MOV         R15,R4
    00001B00 7438                   ADD         #56,R4
    00001B02 E608                   MOV         #8,R6      ; H'00000008
    00001B04 4E0B                   JSR         @R14
    00001B06 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2768      
             tskcmd.c       2769      //  データチェック
             tskcmd.c       2770      result = ParamDataCheck( msg, anum, args );
    00001B08 65DC                   EXTU.B      R13,R5
    00001B0A 66C3                   MOV         R12,R6
    00001B0C BB58                   BSR         __$ParamDataCheck
    00001B0E 64B3                   MOV         R11,R4
             tskcmd.c       2771    
             tskcmd.c       2772      //  データ正常か
             tskcmd.c       2773      if( result == E_SUCCESS )
    00001B10 2008                   TST         R0,R0
    00001B12 8F44                   BF/S        L343
    00001B14 6703                   MOV         R0,R7
             tskcmd.c       2774      {
             tskcmd.c       2775          // パラメータ取得
             tskcmd.c       2776          absmv.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001B16 54C1                   MOV.L       @(4,R12),R4; args[]
    00001B18 E701                   MOV         #1,R7      ; H'00000001
    00001B1A E50A                   MOV         #10,R5     ; H'0000000A
    00001B1C DE37                   MOV.L       L1368+10,R14; _Atoi
    00001B1E 4E0B                   JSR         @R14
    00001B20 6673                   MOV         R7,R6
    00001B22 3F010030               MOV.B       R0,@(48:12,R15); absmv.mm
             tskcmd.c       2777          absmv.pppp = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001B26 54C2                   MOV.L       @(8,R12),R4; args[]
    00001B28 E701                   MOV         #1,R7      ; H'00000001
    00001B2A E604                   MOV         #4,R6      ; H'00000004
    00001B2C 4E0B                   JSR         @R14
    00001B2E E50A                   MOV         #10,R5     ; H'0000000A
    00001B30 1F0D                   MOV.L       R0,@(52,R15); absmv.pppp
    00001B32 E701                   MOV         #1,R7      ; H'00000001
    00001B34 E50A                   MOV         #10,R5     ; H'0000000A
    00001B36 6673                   MOV         R7,R6
             tskcmd.c       2778          absmv.st   = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    00001B38 4E0B                   JSR         @R14
    00001B3A 54C3                   MOV.L       @(12,R12),R4; args[]
    00001B3C 3F010031               MOV.B       R0,@(49:12,R15); absmv.st
             tskcmd.c       2779    
             tskcmd.c       2780          // パラメータ取得
             tskcmd.c       2781          absmv2.mm   = Atoi( args[PARAM4], N_DEC, sizeof(UB), N_SIG );
    00001B40 54C4                   MOV.L       @(16,R12),R4; args[]
    00001B42 E701                   MOV         #1,R7      ; H'00000001
    00001B44 E50A                   MOV         #10,R5     ; H'0000000A
    00001B46 4E0B                   JSR         @R14
    00001B48 6673                   MOV         R7,R6
    00001B4A 3F010038               MOV.B       R0,@(56:12,R15); absmv2.mm
             tskcmd.c       2782          absmv2.pppp = Atoi( args[PARAM5], N_DEC, sizeof(INT), N_SIG );
    00001B4E 54C5                   MOV.L       @(20,R12),R4; args[]
    00001B50 E701                   MOV         #1,R7      ; H'00000001
    00001B52 E604                   MOV         #4,R6      ; H'00000004
    00001B54 4E0B                   JSR         @R14
    00001B56 E50A                   MOV         #10,R5     ; H'0000000A
    00001B58 1F0F                   MOV.L       R0,@(60,R15); absmv2.pppp
    00001B5A E701                   MOV         #1,R7      ; H'00000001
    00001B5C E50A                   MOV         #10,R5     ; H'0000000A
    00001B5E 6673                   MOV         R7,R6
             tskcmd.c       2783          absmv2.st   = Atoi( args[PARAM6], N_DEC, sizeof(UB), N_SIG );
    00001B60 4E0B                   JSR         @R14
    00001B62 54C6                   MOV.L       @(24,R12),R4; args[]
             tskcmd.c       2784    
             tskcmd.c       2785          // デバイス動作状態確認
             tskcmd.c       2786          result = GetDeviceActionChk( msg, NO_DATA, absmv.mm );
    00001B64 36F14030               MOV.B       @(48:12,R15),R6; absmv.mm
    00001B68 3F010039               MOV.B       R0,@(57:12,R15); absmv2.st
    00001B6C E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001B6E B500                   BSR         __$GetDeviceActionChk
    00001B70 64B3                   MOV         R11,R4
             tskcmd.c       2787    
             tskcmd.c       2788          if( result == E_SUCCESS )
    00001B72 2008                   TST         R0,R0
    00001B74 8F13                   BF/S        L343
    00001B76 6703                   MOV         R0,R7
             tskcmd.c       2789          {
             tskcmd.c       2790              result = MapAction( NO_DATA, NO_DATA, absmv.mm, absmv2.mm, absmv.pppp, absmv2.pppp );
    00001B78 7FFC                   ADD         #-4,R15
    00001B7A 31F16010               MOV.L       @(64:12,R15),R1; absmv2.pppp
    00001B7E 2F12                   MOV.L       R1,@R15
    00001B80 7FFC                   ADD         #-4,R15
    00001B82 5BFF                   MOV.L       @(60,R15),R11; absmv.pppp
    00001B84 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001B86 36F14038               MOV.B       @(56:12,R15),R6; absmv.mm
    00001B8A 37F14040               MOV.B       @(64:12,R15),R7; absmv2.mm
    00001B8E 2FB2                   MOV.L       R11,@R15
    00001B90 655C                   EXTU.B      R5,R5
    00001B92 B5E1                   BSR         __$MapAction
    00001B94 6453                   MOV         R5,R4
    00001B96 7F08                   ADD         #8,R15
             tskcmd.c       2791          }
             tskcmd.c       2792      }
             tskcmd.c       2793    
             tskcmd.c       2794      if( result != E_SUCCESS )
    00001B98 2008                   TST         R0,R0
    00001B9A 8D27                   BT/S        L345
    00001B9C 6703                   MOV         R0,R7
    00001B9E              L343:
             tskcmd.c       2795      {
             tskcmd.c       2796          // 応答メッセージ作成
             tskcmd.c       2797          CmdMakeResponse(    &stCtl,
             tskcmd.c       2798                              PARAM12,                                    //0  パラメータ数
             tskcmd.c       2799                              args[0],                                    //1  コマンド文字列
             tskcmd.c       2800                              result,                                     //2  エラーコード
             tskcmd.c       2801    
             tskcmd.c       2802                              absmv.mm,                                   //3  モータ１番号
             tskcmd.c       2803                              sts1.pos,                                   //4  パルスカウント
             tskcmd.c       2804                              sts1.enc,                                   //5  エンコーダ
             tskcmd.c       2805                              sts1.cw_limit,                              //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2806                              sts1.ccw_limit,                             //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2807    
             tskcmd.c       2808                              absmv2.mm,                                  //8  モータ２番号
             tskcmd.c       2809                              sts2.pos,                                   //9  パルスカウント
             tskcmd.c       2810                              sts2.enc,                                   //10 エンコーダ
             tskcmd.c       2811                              sts2.cw_limit,                              //11 CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2812                              sts2.ccw_limit                              //12 CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2813                          );
    00001B9E 7FFC                   ADD         #-4,R15
    00001BA0 5DFC                   MOV.L       @(48,R15),R13; sts2.ccw_limit
    00001BA2 2FD2                   MOV.L       R13,@R15
    00001BA4 7FFC                   ADD         #-4,R15
    00001BA6 5EFC                   MOV.L       @(48,R15),R14; sts2.cw_limit
    00001BA8 2FE2                   MOV.L       R14,@R15
    00001BAA 7FFC                   ADD         #-4,R15
    00001BAC 51FA                   MOV.L       @(40,R15),R1; sts2.enc
    00001BAE 2F12                   MOV.L       R1,@R15
    00001BB0 7FFC                   ADD         #-4,R15
    00001BB2 54FA                   MOV.L       @(40,R15),R4; sts2.pos
    00001BB4 3EF18048               MOVU.B      @(72,R15),R14; absmv2.mm
    00001BB8 2F42                   MOV.L       R4,@R15
    00001BBA 2FE6                   MOV.L       R14,@-R15
    00001BBC 7FFC                   ADD         #-4,R15
    00001BBE 55FB                   MOV.L       @(44,R15),R5; sts1.ccw_limit
    00001BC0 2F52                   MOV.L       R5,@R15
    00001BC2 7FFC                   ADD         #-4,R15
    00001BC4 5BFB                   MOV.L       @(44,R15),R11; sts1.cw_limit
    00001BC6 2FB2                   MOV.L       R11,@R15
    00001BC8 7FFC                   ADD         #-4,R15
    00001BCA 5DF9                   MOV.L       @(36,R15),R13; sts1.enc
    00001BCC 2FD2                   MOV.L       R13,@R15
    00001BCE 7FFC                   ADD         #-4,R15
    00001BD0 52F9                   MOV.L       @(36,R15),R2; sts1.pos
    00001BD2 31F18054               MOVU.B      @(84,R15),R1; absmv.mm
    00001BD6 2F22                   MOV.L       R2,@R15
    00001BD8 2F16                   MOV.L       R1,@-R15
    00001BDA E50C                   MOV         #12,R5     ; H'0000000C
    00001BDC D405                   MOV.L       L1368+2,R4 ; __$stCtl
    00001BDE D309                   MOV.L       L1368+18,R3; _CmdMakeResponse
    00001BE0 430B                   JSR         @R3
    00001BE2 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2814    
             tskcmd.c       2815          // 応答メッセージ送信
             tskcmd.c       2816          CmdSendResponse( &stCtl );
    00001BE4 D403                   MOV.L       L1368+2,R4 ; __$stCtl
    00001BE6 D304                   MOV.L       L1368+6,R3 ; _CmdSendResponse
    00001BE8 430B                   JSR         @R3
    00001BEA 7F28                   ADD         #40,R15
    00001BEC              L345:
    00001BEC 7F40                   ADD         #64,R15
    00001BEE 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       2817      }
             tskcmd.c       2818    }
    00001BF0 006B                   RTS/N
    00001BF2              L1368:
    00001BF2 00000002               .RES.W      1
    00001BF4 <00000000>             .DATA.L     __$stCtl
    00001BF8 <00000000>             .DATA.L     _CmdSendResponse
    00001BFC <00000000>             .DATA.L     _Atoi
    00001C00 <00000000>             .DATA.L     _motor_ENCODER
    00001C04 <00000000>             .DATA.L     _CmdMakeResponse
    00001C08 <00000000>             .DATA.L     __$bufwk
    00001C0C <00000000>             .DATA.L     _memset
    00001C10 <00000000>             .DATA.L     _GetCwInfo
             tskcmd.c       2819    
             tskcmd.c       2820    /***********************************************************************
             tskcmd.c       2821    *
             tskcmd.c       2822    * [概要]  PDELAY  パルスモータのパワー制御待ち時間設定
             tskcmd.c       2823    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2824    * [戻値]  -
             tskcmd.c       2825    * 
             tskcmd.c       2826    ***********************************************************************/
             tskcmd.c       2827    static void CmdPDELAY ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001C14              __$CmdPDELAY:                    ; function: __$CmdPDELAY
                                                           ; frame size=72
    00001C14 4BF0                   MOVMU.L     R11,@-R15
    00001C16 7FF4                   ADD         #-12,R15
             tskcmd.c       2828    {
             tskcmd.c       2829      ER result = E_SUCCESS;
             tskcmd.c       2830      ST_PDELAY   pdelay;
             tskcmd.c       2831      UB msg;
             tskcmd.c       2832    
             tskcmd.c       2833      msg = mrcv->msgdata.msgid;
    00001C18 6C63                   MOV         R6,R12
    00001C1A E63C                   MOV         #60,R6     ; H'0000003C
    00001C1C 6E53                   MOV         R5,R14
    00001C1E 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       2834    
             tskcmd.c       2835      // 初期化
             tskcmd.c       2836      memset( &bufwk, 0, sizeof( bufwk ) );
    00001C22 D4AB                   MOV.L       L1369,R4   ; __$bufwk
    00001C24 D2AB                   MOV.L       L1369+4,R2 ; _memset
    00001C26 420B                   JSR         @R2
    00001C28 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       2837      
             tskcmd.c       2838      //  データチェック
             tskcmd.c       2839      result = ParamDataCheck( msg, anum, args );
    00001C2A 65EC                   EXTU.B      R14,R5
    00001C2C 66C3                   MOV         R12,R6
    00001C2E BAC7                   BSR         __$ParamDataCheck
    00001C30 64D3                   MOV         R13,R4
             tskcmd.c       2840    
             tskcmd.c       2841      //  データ正常か
             tskcmd.c       2842      if( result == E_SUCCESS )
    00001C32 2008                   TST         R0,R0
    00001C34 8F47                   BF/S        L348
    00001C36 6703                   MOV         R0,R7
             tskcmd.c       2843      {
             tskcmd.c       2844          // パラメータ取得
             tskcmd.c       2845          pdelay.mm    = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001C38 54C1                   MOV.L       @(4,R12),R4; args[]
    00001C3A E701                   MOV         #1,R7      ; H'00000001
    00001C3C E50A                   MOV         #10,R5     ; H'0000000A
    00001C3E D2A6                   MOV.L       L1369+8,R2 ; _Atoi
    00001C40 420B                   JSR         @R2
    00001C42 6673                   MOV         R7,R6
    00001C44 3F010000               MOV.B       R0,@(0:12,R15); pdelay.mm
             tskcmd.c       2846          pdelay.tttt  = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001C48 54C2                   MOV.L       @(8,R12),R4; args[]
    00001C4A E701                   MOV         #1,R7      ; H'00000001
    00001C4C E604                   MOV         #4,R6      ; H'00000004
    00001C4E DBA2                   MOV.L       L1369+8,R11; _Atoi
    00001C50 4B0B                   JSR         @R11
    00001C52 E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       2847    
             tskcmd.c       2848          // デバイス動作状態確認
             tskcmd.c       2849          result = GetDeviceActionChk( msg, NO_DATA, pdelay.mm );
    00001C54 36F14000               MOV.B       @(0:12,R15),R6; pdelay.mm
    00001C58 1F01                   MOV.L       R0,@(4,R15); pdelay.tttt
    00001C5A E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001C5C B489                   BSR         __$GetDeviceActionChk
    00001C5E 64D3                   MOV         R13,R4
             tskcmd.c       2850    
             tskcmd.c       2851          if( result == E_SUCCESS )
    00001C60 2008                   TST         R0,R0
    00001C62 8F30                   BF/S        L348
    00001C64 6703                   MOV         R0,R7
    00001C66 E608                   MOV         #8,R6      ; H'00000008
             tskcmd.c       2852          {
             tskcmd.c       2853              // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       2854              memcpy( &bufwk[0], (B*)&pdelay, sizeof( ST_PDELAY ) );
             tskcmd.c       2855    
             tskcmd.c       2856              // 待ちタスクへ通知
             tskcmd.c       2857              result = mbx_send( ID_TSK_CMD,  
             tskcmd.c       2858                                 ID_MPF_MOTWAIT, 
             tskcmd.c       2859                                 ID_MBX_MOTWAIT, 
             tskcmd.c       2860                                 NO_DATA, 
             tskcmd.c       2861                                 NO_DATA, 
             tskcmd.c       2862                                 msg, 
             tskcmd.c       2863                                 pdelay.mm, 
             tskcmd.c       2864                                 DEFDAT, 
             tskcmd.c       2865                                 &bufwk[0], 
             tskcmd.c       2866                                 CMD_BUFSIZ);
    00001C68 EE3C                   MOV         #60,R14    ; H'0000003C
    00001C6A D499                   MOV.L       L1369,R4   ; __$bufwk
    00001C6C D19B                   MOV.L       L1369+12,R1; _memcpy
    00001C6E 410B                   JSR         @R1
    00001C70 65F3                   MOV         R15,R5
    00001C72 2FE6                   MOV.L       R14,@-R15
    00001C74 DE96                   MOV.L       L1369,R14  ; __$bufwk
    00001C76 2FE6                   MOV.L       R14,@-R15
    00001C78 EBFF                   MOV         #-1,R11    ; H'FFFFFFFF
    00001C7A 6BBC                   EXTU.B      R11,R11
    00001C7C E010                   MOV         #16,R0     ; H'00000010
    00001C7E 67B3                   MOV         R11,R7
    00001C80 0FB4                   MOV.B       R11,@(R0,R15)
    00001C82 2FB6                   MOV.L       R11,@-R15
    00001C84 7FFC                   ADD         #-4,R15
    00001C86 0EFC                   MOV.B       @(R0,R15),R14; pdelay.mm
    00001C88 6EEC                   EXTU.B      R14,R14
    00001C8A 2FE2                   MOV.L       R14,@R15
    00001C8C 2FD6                   MOV.L       R13,@-R15
    00001C8E 2FB6                   MOV.L       R11,@-R15
    00001C90 E608                   MOV         #8,R6      ; H'00000008
    00001C92 E507                   MOV         #7,R5      ; H'00000007
    00001C94 DE92                   MOV.L       L1369+16,R14; _mbx_send
    00001C96 4E0B                   JSR         @R14
    00001C98 E405                   MOV         #5,R4      ; H'00000005
    00001C9A 7F18                   ADD         #24,R15
             tskcmd.c       2867    
             tskcmd.c       2868              result = mbx_send( ID_TSK_CMD,  
             tskcmd.c       2869                                 ID_MPF_MOTEND,  
             tskcmd.c       2870                                 ID_MBX_MOTEND,  
             tskcmd.c       2871                                 NO_DATA, 
             tskcmd.c       2872                                 NO_DATA, 
             tskcmd.c       2873                                 msg, 
             tskcmd.c       2874                                 pdelay.mm, 
             tskcmd.c       2875                                 DEFDAT, 
             tskcmd.c       2876                                 &bufwk[0], 
             tskcmd.c       2877                                 CMD_BUFSIZ);
    00001C9C EB3C                   MOV         #60,R11    ; H'0000003C
    00001C9E 2FB6                   MOV.L       R11,@-R15
    00001CA0 D18B                   MOV.L       L1369,R1   ; __$bufwk
    00001CA2 2F16                   MOV.L       R1,@-R15
    00001CA4 7FFC                   ADD         #-4,R15
    00001CA6 37F18014               MOVU.B      @(20,R15),R7
    00001CAA 2F72                   MOV.L       R7,@R15
    00001CAC 7FFC                   ADD         #-4,R15
    00001CAE 32F18010               MOVU.B      @(16,R15),R2; pdelay.mm
    00001CB2 2F22                   MOV.L       R2,@R15
    00001CB4 2FD6                   MOV.L       R13,@-R15
    00001CB6 2F76                   MOV.L       R7,@-R15
    00001CB8 E60A                   MOV         #10,R6     ; H'0000000A
    00001CBA E509                   MOV         #9,R5      ; H'00000009
    00001CBC DD88                   MOV.L       L1369+16,R13; _mbx_send
    00001CBE 4D0B                   JSR         @R13
    00001CC0 E405                   MOV         #5,R4      ; H'00000005
    00001CC2 6703                   MOV         R0,R7
    00001CC4 7F18                   ADD         #24,R15
    00001CC6              L348:
             tskcmd.c       2878              
             tskcmd.c       2879          }
             tskcmd.c       2880      }
             tskcmd.c       2881    
             tskcmd.c       2882      // 応答メッセージ作成
             tskcmd.c       2883      CmdMakeResponse(    &stCtl,
             tskcmd.c       2884                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2885                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2886                          result,                                         //2  エラーコード
             tskcmd.c       2887    
             tskcmd.c       2888                          (INT)pdelay.mm,                                 //3  モータ１番号
             tskcmd.c       2889                          0,                                              //4  パルスカウント１
             tskcmd.c       2890                          0,                                              //5  エンコーダ１
             tskcmd.c       2891                          0,                                              //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2892                          0,                                              //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       2893    
             tskcmd.c       2894                          0,                                              //8  
             tskcmd.c       2895                          0,                                              //9  
             tskcmd.c       2896                          0,                                              //10 
             tskcmd.c       2897                          0,                                              //11 
             tskcmd.c       2898                          0                                               //12 
             tskcmd.c       2899                      );
    00001CC6 E200                   MOV         #0,R2      ; H'00000000
    00001CC8 2F26                   MOV.L       R2,@-R15
    00001CCA 2F26                   MOV.L       R2,@-R15
    00001CCC 2F26                   MOV.L       R2,@-R15
    00001CCE 2F26                   MOV.L       R2,@-R15
    00001CD0 2F26                   MOV.L       R2,@-R15
    00001CD2 2F26                   MOV.L       R2,@-R15
    00001CD4 2F26                   MOV.L       R2,@-R15
    00001CD6 2F26                   MOV.L       R2,@-R15
    00001CD8 2F26                   MOV.L       R2,@-R15
    00001CDA 3EF18024               MOVU.B      @(36,R15),R14; pdelay.mm
    00001CDE 2FE6                   MOV.L       R14,@-R15
    00001CE0 E503                   MOV         #3,R5      ; H'00000003
    00001CE2 D480                   MOV.L       L1369+20,R4; __$stCtl
    00001CE4 D380                   MOV.L       L1369+24,R3; _CmdMakeResponse
    00001CE6 430B                   JSR         @R3
    00001CE8 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       2900    
             tskcmd.c       2901        // 応答メッセージ送信
             tskcmd.c       2902      CmdSendResponse( &stCtl );
    00001CEA D47E                   MOV.L       L1369+20,R4; __$stCtl
    00001CEC D37F                   MOV.L       L1369+28,R3; _CmdSendResponse
    00001CEE 430B                   JSR         @R3
    00001CF0 7F28                   ADD         #40,R15
    00001CF2 7F0C                   ADD         #12,R15
    00001CF4 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       2903    }
    00001CF6 006B                   RTS/N
             tskcmd.c       2904    
             tskcmd.c       2905    /***********************************************************************
             tskcmd.c       2906    *
             tskcmd.c       2907    * [概要]  POWER   パルスモータの励磁制御
             tskcmd.c       2908    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2909    * [戻値]  -
             tskcmd.c       2910    * 
             tskcmd.c       2911    ***********************************************************************/
             tskcmd.c       2912    static void CmdPOWER  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001CF8              __$CmdPOWER:                     ; function: __$CmdPOWER
                                                           ; frame size=60
    00001CF8 4BF0                   MOVMU.L     R11,@-R15
             tskcmd.c       2913    {
             tskcmd.c       2914      ER result = E_SUCCESS;
             tskcmd.c       2915      UB mm     = CLR;
             tskcmd.c       2916      UB sw;
             tskcmd.c       2917      UB msg;
             tskcmd.c       2918    
             tskcmd.c       2919      msg = mrcv->msgdata.msgid;
    00001CFA 3441801B               MOVU.B      @(27,R4),R4; (mrcv)->msgid
             tskcmd.c       2920    
             tskcmd.c       2921      //  データチェック
             tskcmd.c       2922      result = ParamDataCheck( msg, anum, args );
    00001CFE 655C                   EXTU.B      R5,R5
    00001D00 ED00                   MOV         #0,R13     ; H'00000000
    00001D02 6C63                   MOV         R6,R12
    00001D04 BA5C                   BSR         __$ParamDataCheck
    00001D06 6E43                   MOV         R4,R14
             tskcmd.c       2923    
             tskcmd.c       2924      //  データ正常か
             tskcmd.c       2925      if( result == E_SUCCESS )
    00001D08 2008                   TST         R0,R0
    00001D0A 8F22                   BF/S        L352
    00001D0C 6703                   MOV         R0,R7
             tskcmd.c       2926      {
             tskcmd.c       2927          // パラメータ取得
             tskcmd.c       2928          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001D0E 54C1                   MOV.L       @(4,R12),R4; args[]
    00001D10 E701                   MOV         #1,R7      ; H'00000001
    00001D12 E50A                   MOV         #10,R5     ; H'0000000A
    00001D14 D270                   MOV.L       L1369+8,R2 ; _Atoi
    00001D16 420B                   JSR         @R2
    00001D18 6673                   MOV         R7,R6
             tskcmd.c       2929          sw   = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    00001D1A 54C2                   MOV.L       @(8,R12),R4; args[]
    00001D1C E701                   MOV         #1,R7      ; H'00000001
    00001D1E E50A                   MOV         #10,R5     ; H'0000000A
    00001D20 6D03                   MOV         R0,R13
    00001D22 D16D                   MOV.L       L1369+8,R1 ; _Atoi
    00001D24 410B                   JSR         @R1
    00001D26 6673                   MOV         R7,R6
             tskcmd.c       2930    
             tskcmd.c       2931          // デバイス動作状態確認
             tskcmd.c       2932          result = GetDeviceActionChk( msg, NO_DATA, mm );
    00001D28 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001D2A 6B03                   MOV         R0,R11
    00001D2C 66D3                   MOV         R13,R6
    00001D2E B420                   BSR         __$GetDeviceActionChk
    00001D30 64E3                   MOV         R14,R4
             tskcmd.c       2933    
             tskcmd.c       2934          if( result == E_SUCCESS )
    00001D32 2008                   TST         R0,R0
    00001D34 8F0D                   BF/S        L352
    00001D36 6703                   MOV         R0,R7
             tskcmd.c       2935          {
             tskcmd.c       2936              // 励磁
             tskcmd.c       2937              result = motor_POWER( mm, sw );
    00001D38 65BC                   EXTU.B      R11,R5
    00001D3A 64DC                   EXTU.B      R13,R4
             tskcmd.c       2938    
             tskcmd.c       2939              // POWER状態登録
             tskcmd.c       2940              power[mm].mm = mm;
    00001D3C D66C                   MOV.L       L1369+32,R6; _motor_POWER
    00001D3E 460B                   JSR         @R6
    00001D40 6DDC                   EXTU.B      R13,R13
    00001D42 62D3                   MOV         R13,R2
    00001D44 4200                   SHLL        R2
    00001D46 DE6B                   MOV.L       L1369+36,R14; __$power
    00001D48 32EC                   ADD         R14,R2
    00001D4A 6703                   MOV         R0,R7
    00001D4C 22D0                   MOV.B       R13,@R2    ; power[].mm
             tskcmd.c       2941              power[mm].sw = sw;
    00001D4E 60B3                   MOV         R11,R0
    00001D50 8021                   MOV.B       R0,@(1,R2) ; power[].sw
    00001D52              L352:
             tskcmd.c       2942          }
             tskcmd.c       2943      }
             tskcmd.c       2944    
             tskcmd.c       2945      // 応答メッセージ作成
             tskcmd.c       2946      CmdMakeResponse(    &stCtl,
             tskcmd.c       2947                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       2948                          args[0],                                        //1  コマンド文字列
             tskcmd.c       2949                          result,                                         //2  エラーコード
             tskcmd.c       2950    
             tskcmd.c       2951                          (INT)mm,                                        //3  モータ１番号
             tskcmd.c       2952                          0,                                              //4  
             tskcmd.c       2953                          0,                                              //5  
             tskcmd.c       2954                          0,                                              //6  
             tskcmd.c       2955                          0,                                              //7  
             tskcmd.c       2956    
             tskcmd.c       2957                          0,                                              //8  
             tskcmd.c       2958                          0,                                              //9  
             tskcmd.c       2959                          0,                                              //10 
             tskcmd.c       2960                          0,                                              //11 
             tskcmd.c       2961                          0                                               //12 
             tskcmd.c       2962                      );
    00001D52 E100                   MOV         #0,R1      ; H'00000000
    00001D54 2F16                   MOV.L       R1,@-R15
    00001D56 2F16                   MOV.L       R1,@-R15
    00001D58 2F16                   MOV.L       R1,@-R15
    00001D5A 2F16                   MOV.L       R1,@-R15
    00001D5C 2F16                   MOV.L       R1,@-R15
    00001D5E 2F16                   MOV.L       R1,@-R15
    00001D60 2F16                   MOV.L       R1,@-R15
    00001D62 2F16                   MOV.L       R1,@-R15
    00001D64 2F16                   MOV.L       R1,@-R15
    00001D66 6BDC                   EXTU.B      R13,R11
    00001D68 2FB6                   MOV.L       R11,@-R15
    00001D6A E503                   MOV         #3,R5      ; H'00000003
    00001D6C D45D                   MOV.L       L1369+20,R4; __$stCtl
    00001D6E D35E                   MOV.L       L1369+24,R3; _CmdMakeResponse
    00001D70 430B                   JSR         @R3
    00001D72 66C2                   MOV.L       @R12,R6    ; args[]
    00001D74 7F28                   ADD         #40,R15
             tskcmd.c       2963    
             tskcmd.c       2964        // 応答メッセージ送信
             tskcmd.c       2965      CmdSendResponse( &stCtl );
    00001D76 D45B                   MOV.L       L1369+20,R4; __$stCtl
    00001D78 4BF4                   MOVMU.L     @R15+,R11
    00001D7A D35C                   MOV.L       L1369+28,R3; _CmdSendResponse
    00001D7C 432B                   JMP         @R3
    00001D7E 0009                   NOP
             tskcmd.c       2966    }
             tskcmd.c       2967    
             tskcmd.c       2968    /***********************************************************************
             tskcmd.c       2969    *
             tskcmd.c       2970    * [概要]  PSET    パルスモータのカウンタリセット
             tskcmd.c       2971    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       2972    * [戻値]  -
             tskcmd.c       2973    * 
             tskcmd.c       2974    ***********************************************************************/
             tskcmd.c       2975    static void CmdPSET   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001D80              __$CmdPSET:                      ; function: __$CmdPSET
                                                           ; frame size=72
    00001D80 48F0                   MOVMU.L     R8,@-R15
             tskcmd.c       2976    {
             tskcmd.c       2977      ER      result = E_SUCCESS;
             tskcmd.c       2978      UB      mm     = CLR;       // 
             tskcmd.c       2979      INT     cnt;                // 
             tskcmd.c       2980      INT     enc    = CLR;       // 
             tskcmd.c       2981      INT     def    = CLR;       // 
             tskcmd.c       2982      UB  msg;
             tskcmd.c       2983    
             tskcmd.c       2984      msg = mrcv->msgdata.msgid;
    00001D82 3441801B               MOVU.B      @(27,R4),R4; (mrcv)->msgid
             tskcmd.c       2985    
             tskcmd.c       2986      
             tskcmd.c       2987      //  データチェック
             tskcmd.c       2988      result = ParamDataCheck( msg, anum, args );
    00001D86 655C                   EXTU.B      R5,R5
    00001D88 EC00                   MOV         #0,R12     ; H'00000000
    00001D8A 6D63                   MOV         R6,R13
    00001D8C BA18                   BSR         __$ParamDataCheck
    00001D8E 6E43                   MOV         R4,R14
             tskcmd.c       2989    
             tskcmd.c       2990      //  データ正常か
             tskcmd.c       2991      if( result == E_SUCCESS )
    00001D90 2008                   TST         R0,R0
    00001D92 8F28                   BF/S        L356
    00001D94 6703                   MOV         R0,R7
             tskcmd.c       2992      {
             tskcmd.c       2993          // パラメータ取得
             tskcmd.c       2994          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001D96 54D1                   MOV.L       @(4,R13),R4; args[]
    00001D98 E701                   MOV         #1,R7      ; H'00000001
    00001D9A E50A                   MOV         #10,R5     ; H'0000000A
    00001D9C DB4E                   MOV.L       L1369+8,R11; _Atoi
    00001D9E 4B0B                   JSR         @R11
    00001DA0 6673                   MOV         R7,R6
             tskcmd.c       2995          cnt  = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001DA2 54D2                   MOV.L       @(8,R13),R4; args[]
    00001DA4 E701                   MOV         #1,R7      ; H'00000001
    00001DA6 E604                   MOV         #4,R6      ; H'00000004
    00001DA8 E50A                   MOV         #10,R5     ; H'0000000A
    00001DAA 6A03                   MOV         R0,R10
    00001DAC 4B0B                   JSR         @R11
    00001DAE 6C03                   MOV         R0,R12
             tskcmd.c       2996          enc  = Atoi( args[PARAM3], N_DEC, sizeof(INT), N_SIG );
    00001DB0 54D3                   MOV.L       @(12,R13),R4; args[]
    00001DB2 E701                   MOV         #1,R7      ; H'00000001
    00001DB4 E604                   MOV         #4,R6      ; H'00000004
    00001DB6 E50A                   MOV         #10,R5     ; H'0000000A
    00001DB8 4B0B                   JSR         @R11
    00001DBA 6803                   MOV         R0,R8
             tskcmd.c       2997          def  = Atoi( args[PARAM4], N_DEC, sizeof(INT), N_SIG );
    00001DBC 54D4                   MOV.L       @(16,R13),R4; args[]
    00001DBE E701                   MOV         #1,R7      ; H'00000001
    00001DC0 E604                   MOV         #4,R6      ; H'00000004
    00001DC2 E50A                   MOV         #10,R5     ; H'0000000A
    00001DC4 4B0B                   JSR         @R11
    00001DC6 6903                   MOV         R0,R9
             tskcmd.c       2998    
             tskcmd.c       2999          // デバイス動作状態確認
             tskcmd.c       3000          result = GetDeviceActionChk( msg, NO_DATA, mm );
    00001DC8 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001DCA 6B03                   MOV         R0,R11
    00001DCC 64E3                   MOV         R14,R4
    00001DCE B3D0                   BSR         __$GetDeviceActionChk
    00001DD0 66A3                   MOV         R10,R6
             tskcmd.c       3001    
             tskcmd.c       3002          if( result == E_SUCCESS )
    00001DD2 2008                   TST         R0,R0
    00001DD4 8F07                   BF/S        L356
    00001DD6 6703                   MOV         R0,R7
             tskcmd.c       3003          {
             tskcmd.c       3004              // パルスモータのカウンタリセット
             tskcmd.c       3005              result = motor_PSET( mm, cnt, enc, def );
    00001DD8 64CC                   EXTU.B      R12,R4
    00001DDA 6583                   MOV         R8,R5
    00001DDC 6693                   MOV         R9,R6
    00001DDE D246                   MOV.L       L1369+40,R2; _motor_PSET
    00001DE0 420B                   JSR         @R2
    00001DE2 67B3                   MOV         R11,R7
    00001DE4 6703                   MOV         R0,R7
    00001DE6              L356:
             tskcmd.c       3006          }
             tskcmd.c       3007      }
             tskcmd.c       3008    
             tskcmd.c       3009      // 応答メッセージ作成
             tskcmd.c       3010      CmdMakeResponse(    &stCtl,
             tskcmd.c       3011                          PARAM4,                                         //0  パラメータ数
             tskcmd.c       3012                          args[0],                                        //1  コマンド文字列
             tskcmd.c       3013                          result,                                         //2  エラーコード
             tskcmd.c       3014    
             tskcmd.c       3015                          (INT)mm,                                        //3  モータ１番号
             tskcmd.c       3016                          0,                                              //4  
             tskcmd.c       3017                          0,                                              //5  
             tskcmd.c       3018                          0,                                              //6  
             tskcmd.c       3019                          0,                                              //7  
             tskcmd.c       3020    
             tskcmd.c       3021                          0,                                              //8  
             tskcmd.c       3022                          0,                                              //9  
             tskcmd.c       3023                          0,                                              //10 
             tskcmd.c       3024                          0,                                              //11 
             tskcmd.c       3025                          0                                               //12 
             tskcmd.c       3026                      );
    00001DE6 E100                   MOV         #0,R1      ; H'00000000
    00001DE8 2F16                   MOV.L       R1,@-R15
    00001DEA 2F16                   MOV.L       R1,@-R15
    00001DEC 2F16                   MOV.L       R1,@-R15
    00001DEE 2F16                   MOV.L       R1,@-R15
    00001DF0 2F16                   MOV.L       R1,@-R15
    00001DF2 2F16                   MOV.L       R1,@-R15
    00001DF4 2F16                   MOV.L       R1,@-R15
    00001DF6 2F16                   MOV.L       R1,@-R15
    00001DF8 2F16                   MOV.L       R1,@-R15
    00001DFA 68CC                   EXTU.B      R12,R8
    00001DFC 2F86                   MOV.L       R8,@-R15
    00001DFE E504                   MOV         #4,R5      ; H'00000004
    00001E00 D438                   MOV.L       L1369+20,R4; __$stCtl
    00001E02 D339                   MOV.L       L1369+24,R3; _CmdMakeResponse
    00001E04 430B                   JSR         @R3
    00001E06 66D2                   MOV.L       @R13,R6    ; args[]
    00001E08 7F28                   ADD         #40,R15
             tskcmd.c       3027      
             tskcmd.c       3028        // 応答メッセージ送信
             tskcmd.c       3029      CmdSendResponse( &stCtl );
    00001E0A D436                   MOV.L       L1369+20,R4; __$stCtl
    00001E0C 48F4                   MOVMU.L     @R15+,R8
    00001E0E D337                   MOV.L       L1369+28,R3; _CmdSendResponse
    00001E10 432B                   JMP         @R3
    00001E12 0009                   NOP
             tskcmd.c       3030    }
             tskcmd.c       3031    /***********************************************************************
             tskcmd.c       3032    *
             tskcmd.c       3033    * [概要]  RELMV   パルスモータ移動(相対位置)
             tskcmd.c       3034    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3035    * [戻値]  -
             tskcmd.c       3036    * 
             tskcmd.c       3037    ***********************************************************************/
             tskcmd.c       3038    static void CmdRELMV  ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001E14              __$CmdRELMV:                     ; function: __$CmdRELMV
                                                           ; frame size=64
    00001E14 4CF0                   MOVMU.L     R12,@-R15
    00001E16 7FF8                   ADD         #-8,R15
             tskcmd.c       3039    {
             tskcmd.c       3040      ST_RELMV relmv;
             tskcmd.c       3041      ER result = E_SUCCESS;
             tskcmd.c       3042      UB msg;
             tskcmd.c       3043    
             tskcmd.c       3044      msg = mrcv->msgdata.msgid;
    00001E18 6C63                   MOV         R6,R12
    00001E1A E63C                   MOV         #60,R6     ; H'0000003C
    00001E1C 6E53                   MOV         R5,R14
    00001E1E 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       3045      
             tskcmd.c       3046      // 初期化
             tskcmd.c       3047      memset( &bufwk,CLR, sizeof( bufwk ) );
    00001E22 D42B                   MOV.L       L1369,R4   ; __$bufwk
    00001E24 D12B                   MOV.L       L1369+4,R1 ; _memset
    00001E26 410B                   JSR         @R1
    00001E28 E500                   MOV         #0,R5      ; H'00000000
    00001E2A E608                   MOV         #8,R6      ; H'00000008
    00001E2C E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       3048      memset( &relmv,CLR, sizeof( ST_RELMV ) );
    00001E2E D229                   MOV.L       L1369+4,R2 ; _memset
    00001E30 420B                   JSR         @R2
    00001E32 64F3                   MOV         R15,R4
             tskcmd.c       3049    
             tskcmd.c       3050      //  データチェック
             tskcmd.c       3051      result = ParamDataCheck( msg, anum, args );
    00001E34 65EC                   EXTU.B      R14,R5
    00001E36 66C3                   MOV         R12,R6
    00001E38 B9C2                   BSR         __$ParamDataCheck
    00001E3A 64D3                   MOV         R13,R4
             tskcmd.c       3052    
             tskcmd.c       3053      //  データ正常か
             tskcmd.c       3054      if( result == E_SUCCESS )
    00001E3C 2008                   TST         R0,R0
    00001E3E 8F2E                   BF/S        L360
    00001E40 6703                   MOV         R0,R7
             tskcmd.c       3055      {
             tskcmd.c       3056          // パラメータ取得
             tskcmd.c       3057          relmv.mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001E42 54C1                   MOV.L       @(4,R12),R4; args[]
    00001E44 E701                   MOV         #1,R7      ; H'00000001
    00001E46 E50A                   MOV         #10,R5     ; H'0000000A
    00001E48 D223                   MOV.L       L1369+8,R2 ; _Atoi
    00001E4A 420B                   JSR         @R2
    00001E4C 6673                   MOV         R7,R6
    00001E4E 3F010000               MOV.B       R0,@(0:12,R15); relmv.mm
             tskcmd.c       3058          relmv.pppp = Atoi( args[PARAM2], N_DEC, sizeof(INT), N_SIG );
    00001E52 54C2                   MOV.L       @(8,R12),R4; args[]
    00001E54 E701                   MOV         #1,R7      ; H'00000001
    00001E56 E604                   MOV         #4,R6      ; H'00000004
    00001E58 DE1F                   MOV.L       L1369+8,R14; _Atoi
    00001E5A 4E0B                   JSR         @R14
    00001E5C E50A                   MOV         #10,R5     ; H'0000000A
    00001E5E 1F01                   MOV.L       R0,@(4,R15); relmv.pppp
    00001E60 E701                   MOV         #1,R7      ; H'00000001
    00001E62 E50A                   MOV         #10,R5     ; H'0000000A
    00001E64 6673                   MOV         R7,R6
             tskcmd.c       3059          relmv.st   = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    00001E66 D11C                   MOV.L       L1369+8,R1 ; _Atoi
    00001E68 410B                   JSR         @R1
    00001E6A 54C3                   MOV.L       @(12,R12),R4; args[]
             tskcmd.c       3060    
             tskcmd.c       3061          // デバイス動作状態確認
             tskcmd.c       3062          result = GetDeviceActionChk( msg, NO_DATA, relmv.mm );
    00001E6C 36F14000               MOV.B       @(0:12,R15),R6; relmv.mm
    00001E70 3F010001               MOV.B       R0,@(1:12,R15); relmv.st
    00001E74 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001E76 B37C                   BSR         __$GetDeviceActionChk
    00001E78 64D3                   MOV         R13,R4
             tskcmd.c       3063    
             tskcmd.c       3064          if( result == E_SUCCESS )
    00001E7A 2008                   TST         R0,R0
    00001E7C 8F0F                   BF/S        L360
    00001E7E 6703                   MOV         R0,R7
             tskcmd.c       3065          {
             tskcmd.c       3066              result = RelmvAction( NO_DATA, NO_DATA, relmv.mm, relmv.st, relmv.pppp );
    00001E80 7FFC                   ADD         #-4,R15
    00001E82 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001E84 52F2                   MOV.L       @(8,R15),R2; relmv.pppp
    00001E86 655C                   EXTU.B      R5,R5
    00001E88 36F14004               MOV.B       @(4:12,R15),R6; relmv.mm
    00001E8C 37F14005               MOV.B       @(5:12,R15),R7; relmv.st
    00001E90 2F22                   MOV.L       R2,@R15
    00001E92 B3BB                   BSR         __$RelmvAction
    00001E94 6453                   MOV         R5,R4
    00001E96 7F04                   ADD         #4,R15
             tskcmd.c       3067          }
             tskcmd.c       3068      }
             tskcmd.c       3069    
             tskcmd.c       3070      if( result != E_SUCCESS )
    00001E98 2008                   TST         R0,R0
    00001E9A 8D16                   BT/S        L362
    00001E9C 6703                   MOV         R0,R7
    00001E9E              L360:
             tskcmd.c       3071      {
             tskcmd.c       3072          // 応答メッセージ作成
             tskcmd.c       3073          CmdMakeResponse(    &stCtl,
             tskcmd.c       3074                              PARAM7,                                     //0  パラメータ数
             tskcmd.c       3075                              args[0],                                    //1  コマンド文字列
             tskcmd.c       3076                              result,                                     //2  エラーコード
             tskcmd.c       3077    
             tskcmd.c       3078                              (INT)relmv.mm,                              //3  モータ１番号
             tskcmd.c       3079                              0,                                          //4  パルスカウント
             tskcmd.c       3080                              0,                                          //5  エンコーダ
             tskcmd.c       3081                              0,                                          //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3082                              0,                                          //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3083    
             tskcmd.c       3084                              0,                                          //8  
             tskcmd.c       3085                              0,                                          //9  
             tskcmd.c       3086                              0,                                          //10 
             tskcmd.c       3087                              0,                                          //11 
             tskcmd.c       3088                              0                                           //12 
             tskcmd.c       3089                          );
    00001E9E E200                   MOV         #0,R2      ; H'00000000
    00001EA0 2F26                   MOV.L       R2,@-R15
    00001EA2 2F26                   MOV.L       R2,@-R15
    00001EA4 2F26                   MOV.L       R2,@-R15
    00001EA6 2F26                   MOV.L       R2,@-R15
    00001EA8 2F26                   MOV.L       R2,@-R15
    00001EAA 2F26                   MOV.L       R2,@-R15
    00001EAC 2F26                   MOV.L       R2,@-R15
    00001EAE 2F26                   MOV.L       R2,@-R15
    00001EB0 2F26                   MOV.L       R2,@-R15
    00001EB2 31F18024               MOVU.B      @(36,R15),R1; relmv.mm
    00001EB6 2F16                   MOV.L       R1,@-R15
    00001EB8 E507                   MOV         #7,R5      ; H'00000007
    00001EBA D40A                   MOV.L       L1369+20,R4; __$stCtl
    00001EBC D30A                   MOV.L       L1369+24,R3; _CmdMakeResponse
    00001EBE 430B                   JSR         @R3
    00001EC0 66C2                   MOV.L       @R12,R6    ; args[]
             tskcmd.c       3090    
             tskcmd.c       3091          // 応答メッセージ送信
             tskcmd.c       3092          CmdSendResponse( &stCtl );
    00001EC2 D408                   MOV.L       L1369+20,R4; __$stCtl
    00001EC4 D309                   MOV.L       L1369+28,R3; _CmdSendResponse
    00001EC6 430B                   JSR         @R3
    00001EC8 7F28                   ADD         #40,R15
    00001ECA              L362:
    00001ECA 7F08                   ADD         #8,R15
    00001ECC 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       3093      }
             tskcmd.c       3094    }
    00001ECE 006B                   RTS/N
    00001ED0              L1369:
    00001ED0 <00000000>             .DATA.L     __$bufwk
    00001ED4 <00000000>             .DATA.L     _memset
    00001ED8 <00000000>             .DATA.L     _Atoi
    00001EDC <00000000>             .DATA.L     _memcpy
    00001EE0 <00000000>             .DATA.L     _mbx_send
    00001EE4 <00000000>             .DATA.L     __$stCtl
    00001EE8 <00000000>             .DATA.L     _CmdMakeResponse
    00001EEC <00000000>             .DATA.L     _CmdSendResponse
    00001EF0 <00000000>             .DATA.L     _motor_POWER
    00001EF4 <00000000>             .DATA.L     __$power
    00001EF8 <00000000>             .DATA.L     _motor_PSET
             tskcmd.c       3095    
             tskcmd.c       3096    /***********************************************************************
             tskcmd.c       3097    *
             tskcmd.c       3098    * [概要]  SET     パルスモータ速度設定
             tskcmd.c       3099    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3100    * [戻値]  -
             tskcmd.c       3101    * 
             tskcmd.c       3102    ***********************************************************************/
             tskcmd.c       3103    static void CmdSET    ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00001EFC              __$CmdSET:                       ; function: __$CmdSET
                                                           ; frame size=96
    00001EFC 4AF0                   MOVMU.L     R10,@-R15
    00001EFE 7FE0                   ADD         #-32,R15
             tskcmd.c       3104    {
             tskcmd.c       3105      ER      result = E_SUCCESS;
             tskcmd.c       3106      UB      mm     = CLR;       // モータ番号
             tskcmd.c       3107        ST_MOTOR_PARAM        mp;     // 
             tskcmd.c       3108      UB  msg;
             tskcmd.c       3109    
             tskcmd.c       3110      msg = mrcv->msgdata.msgid;
    00001F00 3441801B               MOVU.B      @(27,R4),R4; (mrcv)->msgid
             tskcmd.c       3111    
             tskcmd.c       3112      //  データチェック
             tskcmd.c       3113      result = ParamDataCheck( msg, anum, args );
    00001F04 655C                   EXTU.B      R5,R5
    00001F06 EB00                   MOV         #0,R11     ; H'00000000
    00001F08 6D63                   MOV         R6,R13
    00001F0A B959                   BSR         __$ParamDataCheck
    00001F0C 6C43                   MOV         R4,R12
             tskcmd.c       3114    
             tskcmd.c       3115      //  データ正常か
             tskcmd.c       3116      if( result == E_SUCCESS )
    00001F0E 2008                   TST         R0,R0
    00001F10 8F5E                   BF/S        L365
    00001F12 6E03                   MOV         R0,R14
             tskcmd.c       3117      {
             tskcmd.c       3118          // パラメータ取得   sample: SET,1,1,3,500,7500,500,500
             tskcmd.c       3119          mm            = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00001F14 54D1                   MOV.L       @(4,R13),R4; args[]
    00001F16 E701                   MOV         #1,R7      ; H'00000001
    00001F18 E50A                   MOV         #10,R5     ; H'0000000A
    00001F1A DA95                   MOV.L       L1370+2,R10; _Atoi
    00001F1C 4A0B                   JSR         @R10
    00001F1E 6673                   MOV         R7,R6
             tskcmd.c       3120          mp.accel_type = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG ); // 駆動タイプ(０：台形、１：Ｓ字)
    00001F20 54D2                   MOV.L       @(8,R13),R4; args[]
    00001F22 E701                   MOV         #1,R7      ; H'00000001
    00001F24 E50A                   MOV         #10,R5     ; H'0000000A
    00001F26 6E03                   MOV         R0,R14
    00001F28 6B03                   MOV         R0,R11
    00001F2A 4A0B                   JSR         @R10
    00001F2C 6673                   MOV         R7,R6
    00001F2E 3F011002               MOV.W       R0,@(4:12,R15); mp.accel_type
    00001F32 D190                   MOV.L       L1370+6,R1 ; _MNET_DRV_TYPE
    00001F34 60EC                   EXTU.B      R14,R0
             tskcmd.c       3121          // デバイス:PCD4611
             tskcmd.c       3122          if( MNET_DRV_TYPE[mm] == PCD4611 )
    00001F36 001C                   MOV.B       @(R0,R1),R0; MNET_DRV_TYPE[]
    00001F38 8809                   CMP/EQ      #9,R0
    00001F3A 8F09                   BF/S        L367
    00001F3C 54D3                   MOV.L       @(12,R13),R4; args[]
             tskcmd.c       3123          {
             tskcmd.c       3124              mp.factor     = GetFactorPCD4611( Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG ) );    // モータ倍率
    00001F3E 0729                   MOVT        R7
    00001F40 E50A                   MOV         #10,R5     ; H'0000000A
    00001F42 4A0B                   JSR         @R10
    00001F44 6673                   MOV         R7,R6
    00001F46 D28C                   MOV.L       L1370+10,R2; _GetFactorPCD4611
    00001F48 420B                   JSR         @R2
    00001F4A 6403                   MOV         R0,R4
    00001F4C A007                   BRA         L368
    00001F4E 0009                   NOP
    00001F50              L367:
             tskcmd.c       3125          }
             tskcmd.c       3126          else
             tskcmd.c       3127          {
             tskcmd.c       3128              mp.factor     = GetFactor( Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG ) );    // モータ倍率
    00001F50 0739                   MOVRT       R7
    00001F52 E50A                   MOV         #10,R5     ; H'0000000A
    00001F54 4A0B                   JSR         @R10
    00001F56 6673                   MOV         R7,R6
    00001F58 D288                   MOV.L       L1370+14,R2; _GetFactor
    00001F5A 420B                   JSR         @R2
    00001F5C 6403                   MOV         R0,R4
    00001F5E              L368:
    00001F5E 54D4                   MOV.L       @(16,R13),R4; args[]
    00001F60 E701                   MOV         #1,R7      ; H'00000001
    00001F62 E604                   MOV         #4,R6      ; H'00000004
    00001F64 E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       3129          }
             tskcmd.c       3130          mp.FL         = Atoi( args[PARAM4], N_DEC, sizeof(INT), N_SIG );// 初速[pls](0〜100,000)
    00001F66 4A0B                   JSR         @R10
    00001F68 2F02                   MOV.L       R0,@R15    ; mp.factor
             tskcmd.c       3131          mp.FH         = Atoi( args[PARAM5], N_DEC, sizeof(INT), N_SIG );// 最高速[pls](0〜100,000)
    00001F6A 54D5                   MOV.L       @(20,R13),R4; args[]
    00001F6C E701                   MOV         #1,R7      ; H'00000001
    00001F6E E604                   MOV         #4,R6      ; H'00000004
    00001F70 E50A                   MOV         #10,R5     ; H'0000000A
    00001F72 4A0B                   JSR         @R10
    00001F74 1F02                   MOV.L       R0,@(8,R15); mp.FL
             tskcmd.c       3132          mp.utime      = Atoi( args[PARAM6], N_DEC, sizeof(INT), N_SIG );// 加速時間[ms](１〜65535)
    00001F76 54D6                   MOV.L       @(24,R13),R4; args[]
    00001F78 E701                   MOV         #1,R7      ; H'00000001
    00001F7A E604                   MOV         #4,R6      ; H'00000004
    00001F7C E50A                   MOV         #10,R5     ; H'0000000A
    00001F7E 4A0B                   JSR         @R10
    00001F80 1F03                   MOV.L       R0,@(12,R15); mp.FH
             tskcmd.c       3133          mp.dtime      = mp.utime;                                       // 減速時間[ms](１〜65535)
             tskcmd.c       3134          mp.us         = Atoi( args[PARAM7], N_DEC, sizeof(INT), N_SIG );// 加速時Ｓ字範囲
    00001F82 54D7                   MOV.L       @(28,R13),R4; args[]
    00001F84 E701                   MOV         #1,R7      ; H'00000001
    00001F86 E604                   MOV         #4,R6      ; H'00000004
    00001F88 E50A                   MOV         #10,R5     ; H'0000000A
    00001F8A 1F04                   MOV.L       R0,@(16,R15); mp.utime
    00001F8C 4A0B                   JSR         @R10
    00001F8E 1F05                   MOV.L       R0,@(20,R15); mp.dtime
             tskcmd.c       3135          mp.ds         = mp.us;                                          // 減速時Ｓ字範囲
             tskcmd.c       3136    
             tskcmd.c       3137          // デバイス動作状態確認
             tskcmd.c       3138          result = GetDeviceActionChk( msg, NO_DATA, mm );
    00001F90 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00001F92 1F06                   MOV.L       R0,@(24,R15); mp.us
    00001F94 1F07                   MOV.L       R0,@(28,R15); mp.ds
    00001F96 66B3                   MOV         R11,R6
    00001F98 B2EB                   BSR         __$GetDeviceActionChk
    00001F9A 64C3                   MOV         R12,R4
             tskcmd.c       3139    
             tskcmd.c       3140          if( result == E_SUCCESS )
    00001F9C 2008                   TST         R0,R0
    00001F9E 8F17                   BF/S        L365
    00001FA0 6E03                   MOV         R0,R14
             tskcmd.c       3141          {
             tskcmd.c       3142              // 設定
             tskcmd.c       3143              motor_SET( mm, mp );
    00001FA2 7FE0                   ADD         #-32,R15
    00001FA4 65F3                   MOV         R15,R5
    00001FA6 7520                   ADD         #32,R5
    00001FA8 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    00001FAA 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    00001FAC 6252                   MOV.L       @R5,R2     ; (part of)mp
    00001FAE 1F41                   MOV.L       R4,@(4,R15)
    00001FB0 5453                   MOV.L       @(12,R5),R4; (part of)mp
    00001FB2 1F72                   MOV.L       R7,@(8,R15)
    00001FB4 5A54                   MOV.L       @(16,R5),R10; (part of)mp
    00001FB6 5755                   MOV.L       @(20,R5),R7; (part of)mp
    00001FB8 5C56                   MOV.L       @(24,R5),R12; (part of)mp
    00001FBA 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00001FBC 2F22                   MOV.L       R2,@R15
    00001FBE 1F43                   MOV.L       R4,@(12,R15)
    00001FC0 64BC                   EXTU.B      R11,R4
    00001FC2 1FA4                   MOV.L       R10,@(16,R15)
    00001FC4 1F75                   MOV.L       R7,@(20,R15)
    00001FC6 1FC6                   MOV.L       R12,@(24,R15)
    00001FC8 D16D                   MOV.L       L1370+18,R1; _motor_SET
    00001FCA 410B                   JSR         @R1
    00001FCC 1F67                   MOV.L       R6,@(28,R15)
    00001FCE 7F20                   ADD         #32,R15
    00001FD0              L365:
             tskcmd.c       3144          }
             tskcmd.c       3145      }
             tskcmd.c       3146    
             tskcmd.c       3147      CmdMakeResponse(    &stCtl,
             tskcmd.c       3148                          PARAM3,                                         //0  パラメータ数
             tskcmd.c       3149                          args[0],                                        //1  コマンド文字列
             tskcmd.c       3150                          result,                                         //2  エラーコード
             tskcmd.c       3151    
             tskcmd.c       3152                          mm,                                             //3  モータ１番号
             tskcmd.c       3153                          0,                                              //4  
             tskcmd.c       3154                          0,                                              //5  
             tskcmd.c       3155                          0,                                              //6  
             tskcmd.c       3156                          0,                                              //7  
             tskcmd.c       3157    
             tskcmd.c       3158                          0,                                              //8  
             tskcmd.c       3159                          0,                                              //9  
             tskcmd.c       3160                          0,                                              //10 
             tskcmd.c       3161                          0,                                              //11 
             tskcmd.c       3162                          0                                               //12 
             tskcmd.c       3163                      );
    00001FD0 EA00                   MOV         #0,R10     ; H'00000000
    00001FD2 2FA6                   MOV.L       R10,@-R15
    00001FD4 2FA6                   MOV.L       R10,@-R15
    00001FD6 2FA6                   MOV.L       R10,@-R15
    00001FD8 2FA6                   MOV.L       R10,@-R15
    00001FDA 2FA6                   MOV.L       R10,@-R15
    00001FDC 2FA6                   MOV.L       R10,@-R15
    00001FDE 2FA6                   MOV.L       R10,@-R15
    00001FE0 2FA6                   MOV.L       R10,@-R15
    00001FE2 2FA6                   MOV.L       R10,@-R15
    00001FE4 6CBC                   EXTU.B      R11,R12
    00001FE6 2FC6                   MOV.L       R12,@-R15
    00001FE8 E503                   MOV         #3,R5      ; H'00000003
    00001FEA 66D2                   MOV.L       @R13,R6    ; args[]
    00001FEC D465                   MOV.L       L1370+22,R4; __$stCtl
    00001FEE D366                   MOV.L       L1370+26,R3; _CmdMakeResponse
    00001FF0 430B                   JSR         @R3
    00001FF2 67E3                   MOV         R14,R7
    00001FF4 7F28                   ADD         #40,R15
             tskcmd.c       3164    
             tskcmd.c       3165        // 応答メッセージ送信
             tskcmd.c       3166      CmdSendResponse( &stCtl );
    00001FF6 D463                   MOV.L       L1370+22,R4; __$stCtl
    00001FF8 7F20                   ADD         #32,R15
    00001FFA 4AF4                   MOVMU.L     @R15+,R10
    00001FFC D363                   MOV.L       L1370+30,R3; _CmdSendResponse
    00001FFE 432B                   JMP         @R3
    00002000 0009                   NOP
             tskcmd.c       3167    
             tskcmd.c       3168    }
             tskcmd.c       3169    
             tskcmd.c       3170    /***********************************************************************
             tskcmd.c       3171    *
             tskcmd.c       3172    * [概要]  STATUS  パルスモータ状態読み出し
             tskcmd.c       3173    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3174    * [戻値]  -
             tskcmd.c       3175    * 
             tskcmd.c       3176    ***********************************************************************/
             tskcmd.c       3177    static void CmdSTATUS ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002002              __$CmdSTATUS:                    ; function: __$CmdSTATUS
                                                           ; frame size=84
    00002002 4BF0                   MOVMU.L     R11,@-R15
    00002004 7FE8                   ADD         #-24,R15
             tskcmd.c       3178    {
             tskcmd.c       3179      ER      result = E_SUCCESS; // エラー情報
             tskcmd.c       3180      UB      mm     = CLR;       // モータ番号
    00002006 6B63                   MOV         R6,R11
    00002008 EC00                   MOV         #0,R12     ; H'00000000
             tskcmd.c       3181      ST_MOTOR_STATUS sts;        // モータ状態
             tskcmd.c       3182      UB  msg;
             tskcmd.c       3183    
             tskcmd.c       3184      msg = mrcv->msgdata.msgid;
    0000200A 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
    0000200E E618                   MOV         #24,R6     ; H'00000018
    00002010 6D53                   MOV         R5,R13
             tskcmd.c       3185    
             tskcmd.c       3186      // 初期化
             tskcmd.c       3187      memset( &sts,  CLR,  sizeof( ST_MOTOR_STATUS ) );
    00002012 64F3                   MOV         R15,R4
    00002014 D25E                   MOV.L       L1370+34,R2; _memset
    00002016 420B                   JSR         @R2
    00002018 65C3                   MOV         R12,R5
             tskcmd.c       3188    
             tskcmd.c       3189    
             tskcmd.c       3190      //  データチェック
             tskcmd.c       3191      result = ParamDataCheck( msg, anum, args );
    0000201A 65DC                   EXTU.B      R13,R5
    0000201C 66B3                   MOV         R11,R6
    0000201E B8CF                   BSR         __$ParamDataCheck
    00002020 64E3                   MOV         R14,R4
             tskcmd.c       3192    
             tskcmd.c       3193      //  データ正常か
             tskcmd.c       3194      if( result == E_SUCCESS )
    00002022 2008                   TST         R0,R0
    00002024 8F0C                   BF/S        L372
    00002026 6703                   MOV         R0,R7
             tskcmd.c       3195      {
             tskcmd.c       3196    
             tskcmd.c       3197          // パラメータ取得
             tskcmd.c       3198          mm   = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00002028 54B1                   MOV.L       @(4,R11),R4; args[]
    0000202A E701                   MOV         #1,R7      ; H'00000001
    0000202C E50A                   MOV         #10,R5     ; H'0000000A
    0000202E D150                   MOV.L       L1370+2,R1 ; _Atoi
    00002030 410B                   JSR         @R1
    00002032 6673                   MOV         R7,R6
    00002034 640C                   EXTU.B      R0,R4
    00002036 6C03                   MOV         R0,R12
             tskcmd.c       3199    
             tskcmd.c       3200          // 状態取得
             tskcmd.c       3201          result  = motor_STATUS( mm, &sts );
    00002038 DD56                   MOV.L       L1370+38,R13; _motor_STATUS
    0000203A 4D0B                   JSR         @R13
    0000203C 65F3                   MOV         R15,R5
    0000203E 6703                   MOV         R0,R7
    00002040              L372:
             tskcmd.c       3202      }
             tskcmd.c       3203    
             tskcmd.c       3204      // 応答メッセージ作成
             tskcmd.c       3205      CmdMakeResponse(    &stCtl,
             tskcmd.c       3206                          PARAM9,                                         //0  パラメータ数
             tskcmd.c       3207                          args[0],                                        //1  コマンド文字列
             tskcmd.c       3208                          result,                                         //2  エラーコード
             tskcmd.c       3209    
             tskcmd.c       3210                          mm,                                             //3  モータ１番号
             tskcmd.c       3211                          (INT)sts.busy,                                  //4  動作状態
             tskcmd.c       3212                          sts.pos,                                        //5  パルスカウンタ値
             tskcmd.c       3213                          sts.enc,                                        //6  エンコーダ値
             tskcmd.c       3214                          sts.dev,                                        //7  偏差カウンタ値
             tskcmd.c       3215    
             tskcmd.c       3216                          sts.cw_limit,                                   //8  CWリミットセンサ値(0:OFF,1:ON)
             tskcmd.c       3217                          sts.ccw_limit,                                  //9  CCWリミットセンサ値(0:OFF,1:ON)
             tskcmd.c       3218                          0,                                              //10 
             tskcmd.c       3219                          0,                                              //11 
             tskcmd.c       3220                          0                                               //12 
             tskcmd.c       3221                      );
    00002040 EE00                   MOV         #0,R14     ; H'00000000
    00002042 2FE6                   MOV.L       R14,@-R15
    00002044 2FE6                   MOV.L       R14,@-R15
    00002046 2FE6                   MOV.L       R14,@-R15
    00002048 7FFC                   ADD         #-4,R15
    0000204A 51F9                   MOV.L       @(36,R15),R1; sts.ccw_limit
    0000204C 2F12                   MOV.L       R1,@R15
    0000204E 7FFC                   ADD         #-4,R15
    00002050 54F9                   MOV.L       @(36,R15),R4; sts.cw_limit
    00002052 2F42                   MOV.L       R4,@R15
    00002054 7FFC                   ADD         #-4,R15
    00002056 55F8                   MOV.L       @(32,R15),R5; sts.dev
    00002058 2F52                   MOV.L       R5,@R15
    0000205A 7FFC                   ADD         #-4,R15
    0000205C 56F8                   MOV.L       @(32,R15),R6; sts.enc
    0000205E 2F62                   MOV.L       R6,@R15
    00002060 7FFC                   ADD         #-4,R15
    00002062 5DF8                   MOV.L       @(32,R15),R13; sts.pos
    00002064 2FD2                   MOV.L       R13,@R15
    00002066 7FFC                   ADD         #-4,R15
    00002068 5EFC                   MOV.L       @(48,R15),R14; sts.busy
    0000206A 62CC                   EXTU.B      R12,R2
    0000206C 2FE2                   MOV.L       R14,@R15
    0000206E 2F26                   MOV.L       R2,@-R15
    00002070 E509                   MOV         #9,R5      ; H'00000009
    00002072 D444                   MOV.L       L1370+22,R4; __$stCtl
    00002074 D344                   MOV.L       L1370+26,R3; _CmdMakeResponse
    00002076 430B                   JSR         @R3
    00002078 66B2                   MOV.L       @R11,R6    ; args[]
             tskcmd.c       3222    
             tskcmd.c       3223        // 応答メッセージ送信
             tskcmd.c       3224      CmdSendResponse( &stCtl );
    0000207A D442                   MOV.L       L1370+22,R4; __$stCtl
    0000207C D343                   MOV.L       L1370+30,R3; _CmdSendResponse
    0000207E 430B                   JSR         @R3
    00002080 7F28                   ADD         #40,R15
    00002082 7F18                   ADD         #24,R15
    00002084 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       3225    }
    00002086 006B                   RTS/N
             tskcmd.c       3226    
             tskcmd.c       3227    
             tskcmd.c       3228    /***********************************************************************
             tskcmd.c       3229    *
             tskcmd.c       3230    * [概要]  STOP    パルスモータ減速停止
             tskcmd.c       3231    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3232    * [戻値]  -
             tskcmd.c       3233    * 
             tskcmd.c       3234    ***********************************************************************/
             tskcmd.c       3235    static void CmdSTOP   ( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002088              __$CmdSTOP:                      ; function: __$CmdSTOP
                                                           ; frame size=88
    00002088 4BF0                   MOVMU.L     R11,@-R15
    0000208A 7FE4                   ADD         #-28,R15
             tskcmd.c       3236    {
             tskcmd.c       3237      ER result = E_SUCCESS;
             tskcmd.c       3238      ST_MOTOR_STATUS sts;
             tskcmd.c       3239      ST_STOP stop;
             tskcmd.c       3240      UB msg;
             tskcmd.c       3241    
             tskcmd.c       3242      msg = mrcv->msgdata.msgid;
    0000208C 6B63                   MOV         R6,R11
    0000208E E618                   MOV         #24,R6     ; H'00000018
    00002090 6C53                   MOV         R5,R12
    00002092 E500                   MOV         #0,R5      ; H'00000000
    00002094 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
             tskcmd.c       3243    
             tskcmd.c       3244      // 初期化
             tskcmd.c       3245      memset( &sts,   CLR, sizeof( ST_MOTOR_STATUS ) );
    00002098 DD3D                   MOV.L       L1370+34,R13; _memset
    0000209A 4D0B                   JSR         @R13
    0000209C 64F3                   MOV         R15,R4
    0000209E E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       3246      memset( &bufwk, CLR, sizeof( bufwk ) );
    000020A0 D43D                   MOV.L       L1370+42,R4; __$bufwk
    000020A2 4D0B                   JSR         @R13
    000020A4 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       3247      memset( &stop,  CLR, sizeof( ST_STOP ) );
    000020A6 64F3                   MOV         R15,R4
    000020A8 7418                   ADD         #24,R4
    000020AA E604                   MOV         #4,R6      ; H'00000004
    000020AC 4D0B                   JSR         @R13
    000020AE E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       3248    
             tskcmd.c       3249      //  データチェック
             tskcmd.c       3250      result = ParamDataCheck( msg, anum, args );
    000020B0 65CC                   EXTU.B      R12,R5
    000020B2 66B3                   MOV         R11,R6
    000020B4 B884                   BSR         __$ParamDataCheck
    000020B6 64E3                   MOV         R14,R4
             tskcmd.c       3251    
             tskcmd.c       3252      //  データ正常か
             tskcmd.c       3253      if( result == E_SUCCESS )
    000020B8 2008                   TST         R0,R0
    000020BA 8F2E                   BF/S        L375
    000020BC 6E03                   MOV         R0,R14
             tskcmd.c       3254      {
             tskcmd.c       3255          // パラメータ取得
             tskcmd.c       3256          stop.mm  = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000020BE 54B1                   MOV.L       @(4,R11),R4; args[]
    000020C0 E701                   MOV         #1,R7      ; H'00000001
    000020C2 E50A                   MOV         #10,R5     ; H'0000000A
    000020C4 D12A                   MOV.L       L1370+2,R1 ; _Atoi
    000020C6 410B                   JSR         @R1
    000020C8 6673                   MOV         R7,R6
    000020CA 3F010018               MOV.B       R0,@(24:12,R15); stop.mm
             tskcmd.c       3257    
             tskcmd.c       3258          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       3259          memcpy( &bufwk[0], (B*)&stop, sizeof( ST_STOP ) );
    000020CE 65F3                   MOV         R15,R5
    000020D0 7518                   ADD         #24,R5
    000020D2 E604                   MOV         #4,R6      ; H'00000004
    000020D4 D430                   MOV.L       L1370+42,R4; __$bufwk
    000020D6 D731                   MOV.L       L1370+46,R7; _memcpy
    000020D8 470B                   JSR         @R7
    000020DA EB3C                   MOV         #60,R11    ; H'0000003C
    000020DC 3EF18018               MOVU.B      @(24,R15),R14; stop.mm
             tskcmd.c       3260    
             tskcmd.c       3261          // 既に励磁ONの場合は、実行タスクへ
             tskcmd.c       3262          if( power[stop.mm].sw == SET)
    000020E0 D12F                   MOV.L       L1370+50,R1; H'00000001+__$power
    000020E2 60E3                   MOV         R14,R0
    000020E4 4000                   SHLL        R0
    000020E6 001C                   MOV.B       @(R0,R1),R0; power[].sw
    000020E8 8801                   CMP/EQ      #1,R0
    000020EA 2FB6                   MOV.L       R11,@-R15
    000020EC D12A                   MOV.L       L1370+42,R1; __$bufwk
    000020EE 2F16                   MOV.L       R1,@-R15
    000020F0 ECFF                   MOV         #-1,R12    ; H'FFFFFFFF
    000020F2 6CCC                   EXTU.B      R12,R12
    000020F4 67C3                   MOV         R12,R7
    000020F6 2FC6                   MOV.L       R12,@-R15
    000020F8 2FE6                   MOV.L       R14,@-R15
    000020FA ED14                   MOV         #20,R13    ; H'00000014
    000020FC 2FD6                   MOV.L       R13,@-R15
    000020FE D229                   MOV.L       L1370+54,R2; _mbx_send
    00002100 8D03                   BT/S        L377
    00002102 2FC6                   MOV.L       R12,@-R15
             tskcmd.c       3263          {
             tskcmd.c       3264              result = mbx_send   (
             tskcmd.c       3265                                      ID_TSK_CMD,
             tskcmd.c       3266                                      ID_MPF_MOTACT,
             tskcmd.c       3267                                      ID_MBX_MOTACT,
             tskcmd.c       3268                                      NO_DATA,
             tskcmd.c       3269                                      NO_DATA,
             tskcmd.c       3270                                      ID_MSG_STOP,
             tskcmd.c       3271                                      stop.mm,
             tskcmd.c       3272                                      DEFDAT,
             tskcmd.c       3273                                      &bufwk[0],
             tskcmd.c       3274                                      CMD_BUFSIZ
             tskcmd.c       3275                                  );
             tskcmd.c       3276          }
             tskcmd.c       3277          else
             tskcmd.c       3278          {
             tskcmd.c       3279              result = mbx_send   (
             tskcmd.c       3280                                      ID_TSK_CMD,
             tskcmd.c       3281                                      ID_MPF_MOTWAIT,
             tskcmd.c       3282                                      ID_MBX_MOTWAIT,
             tskcmd.c       3283                                      NO_DATA,
             tskcmd.c       3284                                      NO_DATA,
             tskcmd.c       3285                                      ID_MSG_STOP,
             tskcmd.c       3286                                      stop.mm,
             tskcmd.c       3287                                      DEFDAT,
             tskcmd.c       3288                                      &bufwk[0],
             tskcmd.c       3289                                      CMD_BUFSIZ
             tskcmd.c       3290                                  );
    00002104 E608                   MOV         #8,R6      ; H'00000008
    00002106 A002                   BRA         L378
    00002108 E507                   MOV         #7,R5      ; H'00000007
    0000210A              L377:
    0000210A E609                   MOV         #9,R6      ; H'00000009
    0000210C E508                   MOV         #8,R5      ; H'00000008
    0000210E              L378:
             tskcmd.c       3291          }
             tskcmd.c       3292      }
             tskcmd.c       3293    
             tskcmd.c       3294      if( result != E_SUCCESS )
    0000210E 420B                   JSR         @R2
    00002110 E405                   MOV         #5,R4      ; H'00000005
    00002112 7F18                   ADD         #24,R15
    00002114 2008                   TST         R0,R0
    00002116 8D27                   BT/S        L379
    00002118 6E03                   MOV         R0,R14
    0000211A              L375:
    0000211A 34F18018               MOVU.B      @(24,R15),R4; stop.mm
             tskcmd.c       3295      {
             tskcmd.c       3296          motor_STATUS( stop.mm, &sts );
    0000211E D61D                   MOV.L       L1370+38,R6; _motor_STATUS
    00002120 460B                   JSR         @R6
    00002122 65F3                   MOV         R15,R5
             tskcmd.c       3297    
             tskcmd.c       3298          // 応答メッセージ作成
             tskcmd.c       3299          CmdMakeResponse(    &stCtl,
             tskcmd.c       3300                              PARAM7,                                     //0  パラメータ数
             tskcmd.c       3301                              STRTBL_MSG[ID_MSG_STOP],                    //1  コマンド文字列
             tskcmd.c       3302                              result,                                     //2  エラーコード
             tskcmd.c       3303    
             tskcmd.c       3304                              (INT)stop.mm,                               //3  モータ１番号
             tskcmd.c       3305                              sts.pos,                                    //4  パルスカウント１
             tskcmd.c       3306                              sts.pos,                                    //5  エンコーダ１
             tskcmd.c       3307                              sts.cw_limit,                               //6  CWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3308                              sts.ccw_limit,                              //7  CCWリミットセンサ(0:OFF,1:ON)
             tskcmd.c       3309    
             tskcmd.c       3310                              0,                                          //8  
             tskcmd.c       3311                              0,                                          //9  
             tskcmd.c       3312                              0,                                          //10 
             tskcmd.c       3313                              0,                                          //11 
             tskcmd.c       3314                              0                                           //12 
             tskcmd.c       3315                          );
    00002124 E700                   MOV         #0,R7      ; H'00000000
    00002126 2F76                   MOV.L       R7,@-R15
    00002128 2F76                   MOV.L       R7,@-R15
    0000212A 2F76                   MOV.L       R7,@-R15
    0000212C 2F76                   MOV.L       R7,@-R15
    0000212E 2F76                   MOV.L       R7,@-R15
    00002130 7FFC                   ADD         #-4,R15
    00002132 5BFB                   MOV.L       @(44,R15),R11; sts.ccw_limit
    00002134 2FB2                   MOV.L       R11,@R15
    00002136 7FFC                   ADD         #-4,R15
    00002138 5CFB                   MOV.L       @(44,R15),R12; sts.cw_limit
    0000213A 2FC2                   MOV.L       R12,@R15
    0000213C 7FFC                   ADD         #-4,R15
    0000213E 5DF8                   MOV.L       @(32,R15),R13; sts.pos
    00002140 2FD2                   MOV.L       R13,@R15
    00002142 2FD6                   MOV.L       R13,@-R15
    00002144 32F1803C               MOVU.B      @(60,R15),R2; stop.mm
    00002148 2F26                   MOV.L       R2,@-R15
    0000214A E507                   MOV         #7,R5      ; H'00000007
    0000214C D116                   MOV.L       L1370+58,R1; H'00000050+_STRTBL_MSG
    0000214E 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
    00002150 D40C                   MOV.L       L1370+22,R4; __$stCtl
    00002152 D30D                   MOV.L       L1370+26,R3; _CmdMakeResponse
    00002154 430B                   JSR         @R3
    00002156 67E3                   MOV         R14,R7
             tskcmd.c       3316    
             tskcmd.c       3317          // 応答メッセージ送信
             tskcmd.c       3318          CmdSendResponse( &stCtl );
    00002158 D40A                   MOV.L       L1370+22,R4; __$stCtl
    0000215A D30C                   MOV.L       L1370+30,R3; _CmdSendResponse
    0000215C 430B                   JSR         @R3
    0000215E 7F28                   ADD         #40,R15
             tskcmd.c       3319    
             tskcmd.c       3320          ClrDevice( stop.mm );
    00002160 34F14018               MOV.B       @(24:12,R15),R4; stop.mm
    00002164 B1F8                   BSR         __$ClrDevice
    00002166 0009                   NOP
    00002168              L379:
    00002168 7F1C                   ADD         #28,R15
    0000216A 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       3321      }
             tskcmd.c       3322    }
    0000216C 006B                   RTS/N
    0000216E              L1370:
    0000216E 00000002               .RES.W      1
    00002170 <00000000>             .DATA.L     _Atoi
    00002174 <00000000>             .DATA.L     _MNET_DRV_TYPE
    00002178 <00000000>             .DATA.L     _GetFactorPCD4611
    0000217C <00000000>             .DATA.L     _GetFactor
    00002180 <00000000>             .DATA.L     _motor_SET
    00002184 <00000000>             .DATA.L     __$stCtl
    00002188 <00000000>             .DATA.L     _CmdMakeResponse
    0000218C <00000000>             .DATA.L     _CmdSendResponse
    00002190 <00000000>             .DATA.L     _memset
    00002194 <00000000>             .DATA.L     _motor_STATUS
    00002198 <00000000>             .DATA.L     __$bufwk
    0000219C <00000000>             .DATA.L     _memcpy
    000021A0 <00000001>             .DATA.L     H'00000001+__$power
    000021A4 <00000000>             .DATA.L     _mbx_send
    000021A8 <00000050>             .DATA.L     H'00000050+_STRTBL_MSG
             tskcmd.c       3323    
             tskcmd.c       3324    /***********************************************************************
             tskcmd.c       3325    *
             tskcmd.c       3326    * [概要]  
             tskcmd.c       3327    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3328    * [戻値]  -
             tskcmd.c       3329    * 
             tskcmd.c       3330    ***********************************************************************/
             tskcmd.c       3331    static void CmdBZCNT( T_CMD_MSG* mrcv, UB anum, const char** args )
    000021AC              __$CmdBZCNT:                     ; function: __$CmdBZCNT
                                                           ; frame size=60
    000021AC 4CF0                   MOVMU.L     R12,@-R15
    000021AE 7FFC                   ADD         #-4,R15
    000021B0 6D43                   MOV         R4,R13
    000021B2 3441401B               MOV.B       @(27:12,R4),R4; (mrcv)->msgid
    000021B6 655C                   EXTU.B      R5,R5
             tskcmd.c       3332    {
             tskcmd.c       3333      ER  result = E_SUCCESS;
             tskcmd.c       3334    
             tskcmd.c       3335      ST_BZCNT bzcnt;
             tskcmd.c       3336      UB  msg;
             tskcmd.c       3337    
             tskcmd.c       3338      msg = mrcv->msgdata.msgid;
             tskcmd.c       3339    
             tskcmd.c       3340      //  データチェック
             tskcmd.c       3341      result = ParamDataCheck( msg, anum, args );
    000021B8 B802                   BSR         __$ParamDataCheck
    000021BA 6E63                   MOV         R6,R14
             tskcmd.c       3342    
             tskcmd.c       3343      //  データ正常か
             tskcmd.c       3344      if( result == E_SUCCESS )
    000021BC 2008                   TST         R0,R0
    000021BE 8F32                   BF/S        L382
    000021C0 6C03                   MOV         R0,R12
             tskcmd.c       3345      {
             tskcmd.c       3346          // パラメータ取得
             tskcmd.c       3347          bzcnt.Act    = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    000021C2 54E1                   MOV.L       @(4,R14),R4; args[]
    000021C4 E701                   MOV         #1,R7      ; H'00000001
    000021C6 E50A                   MOV         #10,R5     ; H'0000000A
    000021C8 D1A8                   MOV.L       L1371+2,R1 ; _Atoi
    000021CA 410B                   JSR         @R1
    000021CC 6673                   MOV         R7,R6
    000021CE 3F010000               MOV.B       R0,@(0:12,R15); bzcnt.Act
             tskcmd.c       3348          bzcnt.Colptn = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    000021D2 54E2                   MOV.L       @(8,R14),R4; args[]
    000021D4 E701                   MOV         #1,R7      ; H'00000001
    000021D6 E50A                   MOV         #10,R5     ; H'0000000A
    000021D8 D1A4                   MOV.L       L1371+2,R1 ; _Atoi
    000021DA 410B                   JSR         @R1
    000021DC 6673                   MOV         R7,R6
    000021DE E701                   MOV         #1,R7      ; H'00000001
    000021E0 6103                   MOV         R0,R1
    000021E2 6073                   MOV         R7,R0
    000021E4 0F14                   MOV.B       R1,@(R0,R15); bzcnt.Colptn
    000021E6 E50A                   MOV         #10,R5     ; H'0000000A
             tskcmd.c       3349          bzcnt.Buzptn = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    000021E8 54E3                   MOV.L       @(12,R14),R4; args[]
    000021EA DEA0                   MOV.L       L1371+2,R14; _Atoi
    000021EC 4E0B                   JSR         @R14
    000021EE 6673                   MOV         R7,R6
    000021F0 3F010002               MOV.B       R0,@(2:12,R15); bzcnt.Buzptn
    000021F4 E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       3350    
             tskcmd.c       3351          // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       3352          memcpy( &bufwk[0], (B*)&bzcnt, sizeof( ST_BZCNT ) );
    000021F6 D49E                   MOV.L       L1371+6,R4 ; __$bufwk
    000021F8 DE9E                   MOV.L       L1371+10,R14; _memcpy
    000021FA 4E0B                   JSR         @R14
    000021FC 65F3                   MOV         R15,R5
             tskcmd.c       3353    
             tskcmd.c       3354          // タスク通知
             tskcmd.c       3355          mbx_send(
             tskcmd.c       3356                          ID_TSK_CMD,                                     // 送信元ﾀｽｸID
             tskcmd.c       3357                          ID_MPF_LED,                                     // ﾒﾓﾘﾌﾟｰﾙID
             tskcmd.c       3358                          ID_MBX_LED,                                     // ﾒｰﾙﾎﾞｯｸｽID
             tskcmd.c       3359                          ID_TPL_PTLMP,                                   // PROCID
             tskcmd.c       3360                          mrcv->msgdata.bcid,                             // BCID
             tskcmd.c       3361                          ID_MSG_CBZCNT,                                  // message
             tskcmd.c       3362                          NO_DATA,                                        // 情報1(汎用)
             tskcmd.c       3363                          NO_DATA,                                        // 情報2(汎用)
             tskcmd.c       3364                          &bufwk[0],                                      // ﾃﾞｰﾀ
             tskcmd.c       3365                          sizeof( bufwk )                                 // ﾃﾞｰﾀｻｲｽﾞ
             tskcmd.c       3366                      );
    000021FE EE3C                   MOV         #60,R14    ; H'0000003C
    00002200 2FE6                   MOV.L       R14,@-R15
    00002202 D79B                   MOV.L       L1371+6,R7 ; __$bufwk
    00002204 2F76                   MOV.L       R7,@-R15
    00002206 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    00002208 6EEC                   EXTU.B      R14,R14
    0000220A 2FE6                   MOV.L       R14,@-R15
    0000220C 2FE6                   MOV.L       R14,@-R15
    0000220E E232                   MOV         #50,R2     ; H'00000032
    00002210 2F26                   MOV.L       R2,@-R15
    00002212 32D1801A               MOVU.B      @(26,R13),R2; (mrcv)->bcid
    00002216 2F26                   MOV.L       R2,@-R15
    00002218 E60C                   MOV         #12,R6     ; H'0000000C
    0000221A E50B                   MOV         #11,R5     ; H'0000000B
    0000221C E405                   MOV         #5,R4      ; H'00000005
    0000221E DD96                   MOV.L       L1371+14,R13; _mbx_send
    00002220 4D0B                   JSR         @R13
    00002222 E762                   MOV         #98,R7     ; H'00000062
    00002224 7F18                   ADD         #24,R15
    00002226              L382:
             tskcmd.c       3367          
             tskcmd.c       3368      }
             tskcmd.c       3369    
             tskcmd.c       3370      CmdMakeResponse(    &stCtl,
             tskcmd.c       3371                          PARAM2,                                         //0  パラメータ数
             tskcmd.c       3372                          STRTBL_MSG[ID_MSG_CBZCNT],                      //1  コマンド文字列
             tskcmd.c       3373                          result,                                         //2  エラーコード
             tskcmd.c       3374    
             tskcmd.c       3375                          0,                                              //3  
             tskcmd.c       3376                          0,                                              //4  
             tskcmd.c       3377                          0,                                              //5  
             tskcmd.c       3378                          0,                                              //6  
             tskcmd.c       3379                          0,                                              //7  
             tskcmd.c       3380    
             tskcmd.c       3381                          0,                                              //8  
             tskcmd.c       3382                          0,                                              //9  
             tskcmd.c       3383                          0,                                              //10 
             tskcmd.c       3384                          0,                                              //11 
             tskcmd.c       3385                          0                                               //12 
             tskcmd.c       3386                      );
    00002226 E100                   MOV         #0,R1      ; H'00000000
    00002228 2F16                   MOV.L       R1,@-R15
    0000222A 2F16                   MOV.L       R1,@-R15
    0000222C 2F16                   MOV.L       R1,@-R15
    0000222E 2F16                   MOV.L       R1,@-R15
    00002230 2F16                   MOV.L       R1,@-R15
    00002232 2F16                   MOV.L       R1,@-R15
    00002234 2F16                   MOV.L       R1,@-R15
    00002236 2F16                   MOV.L       R1,@-R15
    00002238 2F16                   MOV.L       R1,@-R15
    0000223A 2F16                   MOV.L       R1,@-R15
    0000223C E502                   MOV         #2,R5      ; H'00000002
    0000223E DD8F                   MOV.L       L1371+18,R13; H'000000C8+_STRTBL_MSG
    00002240 66D2                   MOV.L       @R13,R6    ; STRTBL_MSG[]
    00002242 D48F                   MOV.L       L1371+22,R4; __$stCtl
    00002244 D38F                   MOV.L       L1371+26,R3; _CmdMakeResponse
    00002246 430B                   JSR         @R3
    00002248 67C3                   MOV         R12,R7
             tskcmd.c       3387    
             tskcmd.c       3388        // 応答メッセージ送信
             tskcmd.c       3389      CmdSendResponse( &stCtl );
    0000224A D48D                   MOV.L       L1371+22,R4; __$stCtl
    0000224C D38E                   MOV.L       L1371+30,R3; _CmdSendResponse
    0000224E 430B                   JSR         @R3
    00002250 7F28                   ADD         #40,R15
    00002252 7F04                   ADD         #4,R15
    00002254 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       3390    
             tskcmd.c       3391    }
    00002256 006B                   RTS/N
             tskcmd.c       3392    
             tskcmd.c       3393    /***********************************************************************
             tskcmd.c       3394    *
             tskcmd.c       3395    * [概要]  EEPROM 指定ページの１ページ(128byte)データを読み込む
             tskcmd.c       3396    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3397    * [戻値]  -
             tskcmd.c       3398    * 
             tskcmd.c       3399    ***********************************************************************/
             tskcmd.c       3400    static void CmdEEPREAD( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002258              __$CmdEEPREAD:                   ; function: __$CmdEEPREAD
                                                           ; frame size=56
    00002258 4CF0                   MOVMU.L     R12,@-R15
             tskcmd.c       3401    {
             tskcmd.c       3402      ER      result = E_SUCCESS;
             tskcmd.c       3403      UB  msg;
             tskcmd.c       3404      msg = mrcv->msgdata.msgid;
    0000225A 6E63                   MOV         R6,R14
    0000225C E680                   MOV         #-128,R6   ; H'FFFFFF80
    0000225E E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00002260 666C                   EXTU.B      R6,R6
    00002262 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       3405    
             tskcmd.c       3406      // 初期化
             tskcmd.c       3407      memset( &eepb,  0xff, sizeof( ST_EEPBUF ) );
    00002266 D489                   MOV.L       L1371+34,R4; __$eepb
    00002268 D189                   MOV.L       L1371+38,R1; _memset
    0000226A 410B                   JSR         @R1
    0000226C 655C                   EXTU.B      R5,R5
             tskcmd.c       3408    
             tskcmd.c       3409      //  データチェック
             tskcmd.c       3410    //    result = ParamDataCheck( msg, anum, args );
             tskcmd.c       3411    
             tskcmd.c       3412      //  データ正常か
             tskcmd.c       3413    //    if( result == E_SUCCESS )
             tskcmd.c       3414      {
             tskcmd.c       3415          // パラメータ取得
             tskcmd.c       3416          eepb.no = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    0000226E 54E1                   MOV.L       @(4,R14),R4; args[]
    00002270 E701                   MOV         #1,R7      ; H'00000001
    00002272 E50A                   MOV         #10,R5     ; H'0000000A
    00002274 DC7D                   MOV.L       L1371+2,R12; _Atoi
    00002276 4C0B                   JSR         @R12
    00002278 6673                   MOV         R7,R6
    0000227A DE84                   MOV.L       L1371+34,R14; __$eepb
             tskcmd.c       3417          eepb.siz = EEP_RWSIZE;
    0000227C E178                   MOV         #120,R1    ; H'00000078
    0000227E E680                   MOV         #-128,R6   ; H'FFFFFF80
    00002280 2E02                   MOV.L       R0,@R14    ; eepb.no
    00002282 666C                   EXTU.B      R6,R6
    00002284 1E11                   MOV.L       R1,@(4,R14); eepb.siz
             tskcmd.c       3418          
             tskcmd.c       3419          // 書込みデータ配列化
             tskcmd.c       3420          memcpy( &bufwk[0], (B*)&eepb, sizeof( ST_EEPBUF ) );
    00002286 D47A                   MOV.L       L1371+6,R4 ; __$bufwk
    00002288 D17A                   MOV.L       L1371+10,R1; _memcpy
    0000228A 410B                   JSR         @R1
    0000228C 65E3                   MOV         R14,R5
             tskcmd.c       3421    
             tskcmd.c       3422          result = mbx_send   (
             tskcmd.c       3423                                  ID_TSK_CMD,// tskid      ---->   msg->msgdata.tskid
             tskcmd.c       3424                                  ID_MPF_EEP,// memory     ---->   -
             tskcmd.c       3425                                  ID_MBX_EEP,// mailbox    ---->   -
             tskcmd.c       3426                                  NO_DATA,   // procid     ---->   msg->msgdata.procid
             tskcmd.c       3427                                  NO_DATA,   // bcid       ---->   msg->msgdata.bcid
             tskcmd.c       3428                                  msg,       // msg        ---->   msg->msgdata.msgid
             tskcmd.c       3429                                  eepb.no,   // sts        ---->   msg->msgdata.inf
             tskcmd.c       3430                                  DEFDAT,    // sts2       ---->   msg->msgdata.inf2
             tskcmd.c       3431                                  &bufwk[0], // data       ---->   msg->msgdata.data[]
             tskcmd.c       3432                                  CMD_BUFSIZ // data siz   ---->   msg->msgdata.siz
             tskcmd.c       3433                              );
    0000228E E13C                   MOV         #60,R1     ; H'0000003C
    00002290 2F16                   MOV.L       R1,@-R15
    00002292 D277                   MOV.L       L1371+6,R2 ; __$bufwk
    00002294 2F26                   MOV.L       R2,@-R15
    00002296 ECFF                   MOV         #-1,R12    ; H'FFFFFFFF
    00002298 6CCC                   EXTU.B      R12,R12
    0000229A 67C3                   MOV         R12,R7
    0000229C 2FC6                   MOV.L       R12,@-R15
    0000229E 32E18003               MOVU.B      @(3,R14),R2; eepb.no
    000022A2 2F26                   MOV.L       R2,@-R15
    000022A4 2FD6                   MOV.L       R13,@-R15
    000022A6 2FC6                   MOV.L       R12,@-R15
    000022A8 E606                   MOV         #6,R6      ; H'00000006
    000022AA E505                   MOV         #5,R5      ; H'00000005
    000022AC DD72                   MOV.L       L1371+14,R13; _mbx_send
    000022AE 4D0B                   JSR         @R13
    000022B0 6453                   MOV         R5,R4
    000022B2 6703                   MOV         R0,R7
             tskcmd.c       3434      }
             tskcmd.c       3435    
             tskcmd.c       3436      if( result != E_SUCCESS )
    000022B4 2008                   TST         R0,R0
    000022B6 8D17                   BT/S        L385
    000022B8 7F18                   ADD         #24,R15
             tskcmd.c       3437      {
             tskcmd.c       3438          // 応答メッセージ作成
             tskcmd.c       3439          CmdMakeResponse(    &stCtl,
             tskcmd.c       3440                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3441                              STRTBL_MSG[ID_MSG_EEPREAD],                 //1  コマンド文字列
             tskcmd.c       3442                              result,                                     //2  エラーコード
             tskcmd.c       3443    
             tskcmd.c       3444                              0,                                          //3  
             tskcmd.c       3445                              0,                                          //4  
             tskcmd.c       3446                              0,                                          //5  
             tskcmd.c       3447                              0,                                          //6  
             tskcmd.c       3448                              0,                                          //7  
             tskcmd.c       3449    
             tskcmd.c       3450                              0,                                          //8  
             tskcmd.c       3451                              0,                                          //9  
             tskcmd.c       3452                              0,                                          //10 
             tskcmd.c       3453                              0,                                          //11 
             tskcmd.c       3454                              0                                           //12 
             tskcmd.c       3455                          );
    000022BA E500                   MOV         #0,R5      ; H'00000000
    000022BC 2F56                   MOV.L       R5,@-R15
    000022BE 2F56                   MOV.L       R5,@-R15
    000022C0 2F56                   MOV.L       R5,@-R15
    000022C2 2F56                   MOV.L       R5,@-R15
    000022C4 2F56                   MOV.L       R5,@-R15
    000022C6 2F56                   MOV.L       R5,@-R15
    000022C8 2F56                   MOV.L       R5,@-R15
    000022CA 2F56                   MOV.L       R5,@-R15
    000022CC 2F56                   MOV.L       R5,@-R15
    000022CE 2F56                   MOV.L       R5,@-R15
    000022D0 E502                   MOV         #2,R5      ; H'00000002
    000022D2 DC70                   MOV.L       L1371+42,R12; H'00000058+_STRTBL_MSG
    000022D4 D46A                   MOV.L       L1371+22,R4; __$stCtl
    000022D6 D36B                   MOV.L       L1371+26,R3; _CmdMakeResponse
    000022D8 430B                   JSR         @R3
    000022DA 66C2                   MOV.L       @R12,R6    ; STRTBL_MSG[]
    000022DC 7F28                   ADD         #40,R15
             tskcmd.c       3456    
             tskcmd.c       3457          // 応答メッセージ送信
             tskcmd.c       3458          CmdSendResponse( &stCtl );
    000022DE D468                   MOV.L       L1371+22,R4; __$stCtl
    000022E0 4CF4                   MOVMU.L     @R15+,R12
    000022E2 D369                   MOV.L       L1371+30,R3; _CmdSendResponse
    000022E4 432B                   JMP         @R3
    000022E6 0009                   NOP
    000022E8              L385:
    000022E8 4CF4                   MOVMU.L     @R15+,R12
    000022EA 006B                   RTS/N
             tskcmd.c       3459      }
             tskcmd.c       3460    }
             tskcmd.c       3461    
             tskcmd.c       3462    /***********************************************************************
             tskcmd.c       3463    *
             tskcmd.c       3464    * [概要]  EEPROM 指定ページに１ページ(128byte)データを書き込む
             tskcmd.c       3465    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
             tskcmd.c       3466    * [戻値]  -
             tskcmd.c       3467    * 
             tskcmd.c       3468    ***********************************************************************/
             tskcmd.c       3469    static void CmdEEPWRIT( T_CMD_MSG* mrcv, UB anum, const char** args )
    000022EC              __$CmdEEPWRIT:                   ; function: __$CmdEEPWRIT
                                                           ; frame size=60
    000022EC 4BF0                   MOVMU.L     R11,@-R15
             tskcmd.c       3470    {
             tskcmd.c       3471      ER      result = E_SUCCESS;
             tskcmd.c       3472      UB  msg;
             tskcmd.c       3473      msg = mrcv->msgdata.msgid;
    000022EE 6E63                   MOV         R6,R14
    000022F0 E680                   MOV         #-128,R6   ; H'FFFFFF80
    000022F2 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    000022F4 666C                   EXTU.B      R6,R6
    000022F6 3D41801B               MOVU.B      @(27,R4),R13; (mrcv)->msgid
             tskcmd.c       3474    
             tskcmd.c       3475      // 初期化
             tskcmd.c       3476      memset( &eepb,  0xff, sizeof( ST_EEPBUF ) );
    000022FA D464                   MOV.L       L1371+34,R4; __$eepb
    000022FC D164                   MOV.L       L1371+38,R1; _memset
    000022FE 410B                   JSR         @R1
    00002300 655C                   EXTU.B      R5,R5
             tskcmd.c       3477    
             tskcmd.c       3478      //  データチェック
             tskcmd.c       3479    //    result = ParamDataCheck( msg, anum, args );
             tskcmd.c       3480    
             tskcmd.c       3481      //  データ正常か
             tskcmd.c       3482    //    if( result == E_SUCCESS )
             tskcmd.c       3483      {
             tskcmd.c       3484          // パラメータ取得
             tskcmd.c       3485          eepb.no = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00002302 54E1                   MOV.L       @(4,R14),R4; args[]
    00002304 E701                   MOV         #1,R7      ; H'00000001
    00002306 E50A                   MOV         #10,R5     ; H'0000000A
    00002308 DB58                   MOV.L       L1371+2,R11; _Atoi
    0000230A 4B0B                   JSR         @R11
    0000230C 6673                   MOV         R7,R6
    0000230E DC5F                   MOV.L       L1371+34,R12; __$eepb
             tskcmd.c       3486          eepb.siz = EEP_RWSIZE;
    00002310 E178                   MOV         #120,R1    ; H'00000078
    00002312 2C02                   MOV.L       R0,@R12    ; eepb.no
    00002314 1C11                   MOV.L       R1,@(4,R12); eepb.siz
             tskcmd.c       3487          
             tskcmd.c       3488          // 書込みデータ配列化
             tskcmd.c       3489          SetByteArray( args[PARAM2],&eepb.buf[0]);
    00002316 D560                   MOV.L       L1371+46,R5; H'00000008+__$eepb
    00002318 DB60                   MOV.L       L1371+50,R11; _SetByteArray
    0000231A 4B0B                   JSR         @R11
    0000231C 54E2                   MOV.L       @(8,R14),R4; args[]
    0000231E E680                   MOV         #-128,R6   ; H'FFFFFF80
             tskcmd.c       3490          memcpy( &bufwk[0], (B*)&eepb, sizeof( ST_EEPBUF ) );
    00002320 65C3                   MOV         R12,R5
    00002322 D453                   MOV.L       L1371+6,R4 ; __$bufwk
    00002324 D153                   MOV.L       L1371+10,R1; _memcpy
    00002326 410B                   JSR         @R1
    00002328 666C                   EXTU.B      R6,R6
             tskcmd.c       3491    
             tskcmd.c       3492          result = mbx_send   (
             tskcmd.c       3493                                  ID_TSK_CMD,// tskid
             tskcmd.c       3494                                  ID_MPF_EEP,// memory
             tskcmd.c       3495                                  ID_MBX_EEP,// mailbox
             tskcmd.c       3496                                  NO_DATA,   // procid
             tskcmd.c       3497                                  NO_DATA,   // bcid
             tskcmd.c       3498                                  msg,       // msg
             tskcmd.c       3499                                  eepb.no,   // sts
             tskcmd.c       3500                                  DEFDAT,    // sts2
             tskcmd.c       3501                                  &bufwk[0], // data
             tskcmd.c       3502                                  CMD_BUFSIZ // data siz
             tskcmd.c       3503                              );
    0000232A E13C                   MOV         #60,R1     ; H'0000003C
    0000232C 2F16                   MOV.L       R1,@-R15
    0000232E DE50                   MOV.L       L1371+6,R14; __$bufwk
    00002330 2FE6                   MOV.L       R14,@-R15
    00002332 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    00002334 6EEC                   EXTU.B      R14,R14
    00002336 67E3                   MOV         R14,R7
    00002338 2FE6                   MOV.L       R14,@-R15
    0000233A 32C18003               MOVU.B      @(3,R12),R2; eepb.no
    0000233E 2F26                   MOV.L       R2,@-R15
    00002340 2FD6                   MOV.L       R13,@-R15
    00002342 2FE6                   MOV.L       R14,@-R15
    00002344 E606                   MOV         #6,R6      ; H'00000006
    00002346 E505                   MOV         #5,R5      ; H'00000005
    00002348 D24B                   MOV.L       L1371+14,R2; _mbx_send
    0000234A 420B                   JSR         @R2
    0000234C 6453                   MOV         R5,R4
    0000234E 6703                   MOV         R0,R7
             tskcmd.c       3504      }
             tskcmd.c       3505    
             tskcmd.c       3506      if( result != E_SUCCESS )
    00002350 2008                   TST         R0,R0
    00002352 8D17                   BT/S        L388
    00002354 7F18                   ADD         #24,R15
             tskcmd.c       3507      {
             tskcmd.c       3508          // 応答メッセージ作成
             tskcmd.c       3509          CmdMakeResponse(    &stCtl,
             tskcmd.c       3510                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3511                              STRTBL_MSG[ID_MSG_EEPWRIT],                 //1  コマンド文字列
             tskcmd.c       3512                              result,                                     //2  エラーコード
             tskcmd.c       3513    
             tskcmd.c       3514                              0,                                          //3  
             tskcmd.c       3515                              0,                                          //4  
             tskcmd.c       3516                              0,                                          //5  
             tskcmd.c       3517                              0,                                          //6  
             tskcmd.c       3518                              0,                                          //7  
             tskcmd.c       3519    
             tskcmd.c       3520                              0,                                          //8  
             tskcmd.c       3521                              0,                                          //9  
             tskcmd.c       3522                              0,                                          //10 
             tskcmd.c       3523                              0,                                          //11 
             tskcmd.c       3524                              0                                           //12 
             tskcmd.c       3525                          );
    00002356 E100                   MOV         #0,R1      ; H'00000000
    00002358 2F16                   MOV.L       R1,@-R15
    0000235A 2F16                   MOV.L       R1,@-R15
    0000235C 2F16                   MOV.L       R1,@-R15
    0000235E 2F16                   MOV.L       R1,@-R15
    00002360 2F16                   MOV.L       R1,@-R15
    00002362 2F16                   MOV.L       R1,@-R15
    00002364 2F16                   MOV.L       R1,@-R15
    00002366 2F16                   MOV.L       R1,@-R15
    00002368 2F16                   MOV.L       R1,@-R15
    0000236A 2F16                   MOV.L       R1,@-R15
    0000236C E502                   MOV         #2,R5      ; H'00000002
    0000236E DB4C                   MOV.L       L1371+54,R11; H'0000005C+_STRTBL_MSG
    00002370 D443                   MOV.L       L1371+22,R4; __$stCtl
    00002372 D344                   MOV.L       L1371+26,R3; _CmdMakeResponse
    00002374 430B                   JSR         @R3
    00002376 66B2                   MOV.L       @R11,R6    ; STRTBL_MSG[]
    00002378 7F28                   ADD         #40,R15
             tskcmd.c       3526    
             tskcmd.c       3527          // 応答メッセージ送信
             tskcmd.c       3528          CmdSendResponse( &stCtl );
    0000237A D441                   MOV.L       L1371+22,R4; __$stCtl
    0000237C 4BF4                   MOVMU.L     @R15+,R11
    0000237E D342                   MOV.L       L1371+30,R3; _CmdSendResponse
    00002380 432B                   JMP         @R3
    00002382 0009                   NOP
    00002384              L388:
    00002384 4BF4                   MOVMU.L     @R15+,R11
    00002386 006B                   RTS/N
             tskcmd.c       3529      }
             tskcmd.c       3530    }
             tskcmd.c       3531    
             tskcmd.c       3532    /***********************************************************************
             tskcmd.c       3533    *
             tskcmd.c       3534    * [概要]  
             tskcmd.c       3535    * [引数]  
             tskcmd.c       3536    * [戻値]  -
             tskcmd.c       3537    * 
             tskcmd.c       3538    ***********************************************************************/
             tskcmd.c       3539    static void CmdImpPdat( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002388              __$CmdImpPdat:                   ; function: __$CmdImpPdat
                                                           ; frame size=48
    00002388 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       3540    {
             tskcmd.c       3541      ER  result = E_SUCCESS;
             tskcmd.c       3542      UB  msg;
             tskcmd.c       3543      UB  pno;
             tskcmd.c       3544      UB bcc;
             tskcmd.c       3545      UB bcch;
             tskcmd.c       3546      UB bccl;
             tskcmd.c       3547      INT  len;
             tskcmd.c       3548      unsigned char *pnt;
             tskcmd.c       3549    
             tskcmd.c       3550      msg = mrcv->msgdata.msgid;
    0000238A 3E41801B               MOVU.B      @(27,R4),R14; (mrcv)->msgid
             tskcmd.c       3551    
             tskcmd.c       3552      // タッチパネルへそのままデータ通知
             tskcmd.c       3553      TplRpDataSend();
    0000238E B6FE                   BSR         _TplRpDataSend
    00002390 0009                   NOP
             tskcmd.c       3554      TplRidDataSend ( &tp.rsp.buf[0] , ID_TPL_PRINF );
    00002392 D444                   MOV.L       L1371+58,R4; H'0000009C+__$tp
    00002394 B7B9                   BSR         __$TplRidDataSend
    00002396 E56E                   MOV         #110,R5    ; H'0000006E
             tskcmd.c       3555    
             tskcmd.c       3556      // EEPへ書込み指示
             tskcmd.c       3557      pno = Get_pno();
    00002398 D143                   MOV.L       L1371+62,R1; _Get_pno
    0000239A 414B                   JSR/N       @R1
    0000239C 620C                   EXTU.B      R0,R2
             tskcmd.c       3558      
             tskcmd.c       3559      if(( pno > 0 )&&( pno <= PROTMAX ))
    0000239E 2228                   TST         R2,R2
    000023A0 8902                   BT          L390
    000023A2 E514                   MOV         #20,R5     ; H'00000014
    000023A4 3257                   CMP/GT      R5,R2
    000023A6 8B02                   BF          L392
    000023A8              L390:
             tskcmd.c       3560      {
             tskcmd.c       3561          result = mbx_send   (
             tskcmd.c       3562                                  ID_TSK_CMD,// tskid
             tskcmd.c       3563                                  ID_MPF_EEP,// memory
             tskcmd.c       3564                                  ID_MBX_EEP,// mailbox
             tskcmd.c       3565                                  NO_DATA,   // procid
             tskcmd.c       3566                                  NO_DATA,   // bcid
             tskcmd.c       3567                                  msg,       // msg
             tskcmd.c       3568                                  DEFDAT,    // sts
             tskcmd.c       3569                                  pno,       // sts2
             tskcmd.c       3570                                  &bufwk[0], // data
             tskcmd.c       3571                                  CMD_BUFSIZ // data siz
             tskcmd.c       3572                              );
             tskcmd.c       3573      }
             tskcmd.c       3574      else
             tskcmd.c       3575      {
             tskcmd.c       3576          result = E_PAR_OUTRNG;
    000023A8 E708                   MOV         #8,R7      ; H'00000008
    000023AA A014                   BRA         L393
    000023AC 4718                   SHLL8       R7
    000023AE              L392:
    000023AE E13C                   MOV         #60,R1     ; H'0000003C
    000023B0 2F16                   MOV.L       R1,@-R15
    000023B2 D52F                   MOV.L       L1371+6,R5 ; __$bufwk
    000023B4 2F56                   MOV.L       R5,@-R15
    000023B6 2F26                   MOV.L       R2,@-R15
    000023B8 E4FF                   MOV         #-1,R4     ; H'FFFFFFFF
    000023BA 644C                   EXTU.B      R4,R4
    000023BC 6743                   MOV         R4,R7
    000023BE 2F46                   MOV.L       R4,@-R15
    000023C0 2FE6                   MOV.L       R14,@-R15
    000023C2 2F46                   MOV.L       R4,@-R15
    000023C4 E606                   MOV         #6,R6      ; H'00000006
    000023C6 E505                   MOV         #5,R5      ; H'00000005
    000023C8 DE2B                   MOV.L       L1371+14,R14; _mbx_send
    000023CA 4E0B                   JSR         @R14
    000023CC 6453                   MOV         R5,R4
    000023CE 6703                   MOV         R0,R7
             tskcmd.c       3577      }
             tskcmd.c       3578      
             tskcmd.c       3579      if( result != E_SUCCESS )
    000023D0 2008                   TST         R0,R0
    000023D2 8D17                   BT/S        L394
    000023D4 7F18                   ADD         #24,R15
    000023D6              L393:
             tskcmd.c       3580      {
             tskcmd.c       3581          // 応答メッセージ作成
             tskcmd.c       3582          CmdMakeResponse(    &stCtl,
             tskcmd.c       3583                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3584                              STRTBL_MSG[ID_MSG_IMPPDAT],                 //1  コマンド文字列
             tskcmd.c       3585                              result,                                     //2  エラーコード
             tskcmd.c       3586    
             tskcmd.c       3587                              0,                                          //3  
             tskcmd.c       3588                              0,                                          //4  
             tskcmd.c       3589                              0,                                          //5  
             tskcmd.c       3590                              0,                                          //6  
             tskcmd.c       3591                              0,                                          //7  
             tskcmd.c       3592    
             tskcmd.c       3593                              0,                                          //8  
             tskcmd.c       3594                              0,                                          //9  
             tskcmd.c       3595                              0,                                          //10 
             tskcmd.c       3596                              0,                                          //11 
             tskcmd.c       3597                              0                                           //12 
             tskcmd.c       3598                          );
    000023D6 E600                   MOV         #0,R6      ; H'00000000
    000023D8 2F66                   MOV.L       R6,@-R15
    000023DA 2F66                   MOV.L       R6,@-R15
    000023DC 2F66                   MOV.L       R6,@-R15
    000023DE 2F66                   MOV.L       R6,@-R15
    000023E0 2F66                   MOV.L       R6,@-R15
    000023E2 2F66                   MOV.L       R6,@-R15
    000023E4 2F66                   MOV.L       R6,@-R15
    000023E6 2F66                   MOV.L       R6,@-R15
    000023E8 2F66                   MOV.L       R6,@-R15
    000023EA 2F66                   MOV.L       R6,@-R15
    000023EC E502                   MOV         #2,R5      ; H'00000002
    000023EE DE2F                   MOV.L       L1371+66,R14; H'00000090+_STRTBL_MSG
    000023F0 D423                   MOV.L       L1371+22,R4; __$stCtl
    000023F2 D324                   MOV.L       L1371+26,R3; _CmdMakeResponse
    000023F4 430B                   JSR         @R3
    000023F6 66E2                   MOV.L       @R14,R6    ; STRTBL_MSG[]
    000023F8 7F28                   ADD         #40,R15
             tskcmd.c       3599    
             tskcmd.c       3600          // 応答メッセージ送信
             tskcmd.c       3601          CmdSendResponse( &stCtl );
    000023FA D421                   MOV.L       L1371+22,R4; __$stCtl
    000023FC 4EF4                   MOVMU.L     @R15+,R14
    000023FE D322                   MOV.L       L1371+30,R3; _CmdSendResponse
    00002400 432B                   JMP         @R3
    00002402 0009                   NOP
    00002404              L394:
    00002404 4EF4                   MOVMU.L     @R15+,R14
    00002406 006B                   RTS/N
             tskcmd.c       3602      }
             tskcmd.c       3603    }
             tskcmd.c       3604    
             tskcmd.c       3605    /***********************************************************************
             tskcmd.c       3606    *
             tskcmd.c       3607    * [概要]  
             tskcmd.c       3608    * [引数]  
             tskcmd.c       3609    * [戻値]  -
             tskcmd.c       3610    * 
             tskcmd.c       3611    ***********************************************************************/
             tskcmd.c       3612    static void CmdImpSped( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002408              __$CmdImpSped:                   ; function: __$CmdImpSped
                                                           ; frame size=48
    00002408 4F22                   STS.L       PR,@-R15
    0000240A 7FFC                   ADD         #-4,R15
             tskcmd.c       3613    {
             tskcmd.c       3614      ER  result = E_SUCCESS;
             tskcmd.c       3615      UB  dummy;
             tskcmd.c       3616      UB  msg;
             tskcmd.c       3617      
             tskcmd.c       3618      msg = mrcv->msgdata.msgid;
             tskcmd.c       3619      
             tskcmd.c       3620      result = mbx_send   (
             tskcmd.c       3621                              ID_TSK_CMD,// tskid
             tskcmd.c       3622                              ID_MPF_EEP,// memory
             tskcmd.c       3623                              ID_MBX_EEP,// mailbox
             tskcmd.c       3624                              NO_DATA,   // procid
             tskcmd.c       3625                              NO_DATA,   // bcid
             tskcmd.c       3626                              msg,       // msg
             tskcmd.c       3627                              DEFDAT,    // sts
             tskcmd.c       3628                              DEFDAT,    // sts2
             tskcmd.c       3629                              &dummy,    // data
             tskcmd.c       3630                              sizeof(dummy) // data siz
             tskcmd.c       3631                          );
    0000240C E101                   MOV         #1,R1      ; H'00000001
    0000240E 2F16                   MOV.L       R1,@-R15
    00002410 65F3                   MOV         R15,R5
    00002412 7504                   ADD         #4,R5
    00002414 2F56                   MOV.L       R5,@-R15
    00002416 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00002418 666C                   EXTU.B      R6,R6
    0000241A 6763                   MOV         R6,R7
    0000241C 2F66                   MOV.L       R6,@-R15
    0000241E 2F66                   MOV.L       R6,@-R15
    00002420 3141801B               MOVU.B      @(27,R4),R1; (mrcv)->msgid
    00002424 2F16                   MOV.L       R1,@-R15
    00002426 2F66                   MOV.L       R6,@-R15
    00002428 E606                   MOV         #6,R6      ; H'00000006
    0000242A E505                   MOV         #5,R5      ; H'00000005
    0000242C D212                   MOV.L       L1371+14,R2; _mbx_send
    0000242E 420B                   JSR         @R2
    00002430 6453                   MOV         R5,R4
    00002432 6703                   MOV         R0,R7
             tskcmd.c       3632    
             tskcmd.c       3633      if( result != E_SUCCESS )
    00002434 2008                   TST         R0,R0
    00002436 8D15                   BT/S        L397
    00002438 7F18                   ADD         #24,R15
             tskcmd.c       3634      {
             tskcmd.c       3635          // 応答メッセージ作成
             tskcmd.c       3636          CmdMakeResponse(    &stCtl,
             tskcmd.c       3637                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3638                              STRTBL_MSG[ID_MSG_IMPSPED],                 //1  コマンド文字列
             tskcmd.c       3639                              result,                                     //2  エラーコード
             tskcmd.c       3640    
             tskcmd.c       3641                              0,                                          //3  
             tskcmd.c       3642                              0,                                          //4  
             tskcmd.c       3643                              0,                                          //5  
             tskcmd.c       3644                              0,                                          //6  
             tskcmd.c       3645                              0,                                          //7  
             tskcmd.c       3646    
             tskcmd.c       3647                              0,                                          //8  
             tskcmd.c       3648                              0,                                          //9  
             tskcmd.c       3649                              0,                                          //10 
             tskcmd.c       3650                              0,                                          //11 
             tskcmd.c       3651                              0                                           //12 
             tskcmd.c       3652                          );
    0000243A E500                   MOV         #0,R5      ; H'00000000
    0000243C 2F56                   MOV.L       R5,@-R15
    0000243E 2F56                   MOV.L       R5,@-R15
    00002440 2F56                   MOV.L       R5,@-R15
    00002442 2F56                   MOV.L       R5,@-R15
    00002444 2F56                   MOV.L       R5,@-R15
    00002446 2F56                   MOV.L       R5,@-R15
    00002448 2F56                   MOV.L       R5,@-R15
    0000244A 2F56                   MOV.L       R5,@-R15
    0000244C 2F56                   MOV.L       R5,@-R15
    0000244E 2F56                   MOV.L       R5,@-R15
    00002450 E502                   MOV         #2,R5      ; H'00000002
    00002452 D117                   MOV.L       L1371+70,R1; H'00000094+_STRTBL_MSG
    00002454 D40A                   MOV.L       L1371+22,R4; __$stCtl
    00002456 D30B                   MOV.L       L1371+26,R3; _CmdMakeResponse
    00002458 430B                   JSR         @R3
    0000245A 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
             tskcmd.c       3653    
             tskcmd.c       3654          // 応答メッセージ送信
             tskcmd.c       3655          CmdSendResponse( &stCtl );
    0000245C D408                   MOV.L       L1371+22,R4; __$stCtl
    0000245E D30A                   MOV.L       L1371+30,R3; _CmdSendResponse
    00002460 430B                   JSR         @R3
    00002462 7F28                   ADD         #40,R15
    00002464              L397:
    00002464 7F04                   ADD         #4,R15
    00002466 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3656      }
             tskcmd.c       3657    }
    00002468 006B                   RTS/N
    0000246A              L1371:
    0000246A 00000002               .RES.W      1
    0000246C <00000000>             .DATA.L     _Atoi
    00002470 <00000000>             .DATA.L     __$bufwk
    00002474 <00000000>             .DATA.L     _memcpy
    00002478 <00000000>             .DATA.L     _mbx_send
    0000247C <000000C8>             .DATA.L     H'000000C8+_STRTBL_MSG
    00002480 <00000000>             .DATA.L     __$stCtl
    00002484 <00000000>             .DATA.L     _CmdMakeResponse
    00002488 <00000000>             .DATA.L     _CmdSendResponse
    0000248C <00000000>             .DATA.L     __$eepb
    00002490 <00000000>             .DATA.L     _memset
    00002494 <00000058>             .DATA.L     H'00000058+_STRTBL_MSG
    00002498 <00000008>             .DATA.L     H'00000008+__$eepb
    0000249C <00000000>             .DATA.L     _SetByteArray
    000024A0 <0000005C>             .DATA.L     H'0000005C+_STRTBL_MSG
    000024A4 <0000009C>             .DATA.L     H'0000009C+__$tp
    000024A8 <00000000>             .DATA.L     _Get_pno
    000024AC <00000090>             .DATA.L     H'00000090+_STRTBL_MSG
    000024B0 <00000094>             .DATA.L     H'00000094+_STRTBL_MSG
             tskcmd.c       3658    
             tskcmd.c       3659    
             tskcmd.c       3660    /***********************************************************************
             tskcmd.c       3661    *
             tskcmd.c       3662    * [概要]  
             tskcmd.c       3663    * [引数]  
             tskcmd.c       3664    * [戻値]  -
             tskcmd.c       3665    * 
             tskcmd.c       3666    ***********************************************************************/
             tskcmd.c       3667    static void CmdImpPosi( T_CMD_MSG* mrcv, UB anum, const char** args )
    000024B4              __$CmdImpPosi:                   ; function: __$CmdImpPosi
                                                           ; frame size=48
    000024B4 4F22                   STS.L       PR,@-R15
    000024B6 7FFC                   ADD         #-4,R15
             tskcmd.c       3668    {
             tskcmd.c       3669      ER  result = E_SUCCESS;
             tskcmd.c       3670      UB  dummy;
             tskcmd.c       3671      UB  msg;
             tskcmd.c       3672      
             tskcmd.c       3673      msg = mrcv->msgdata.msgid;
             tskcmd.c       3674      
             tskcmd.c       3675      result = mbx_send   (
             tskcmd.c       3676                              ID_TSK_CMD,// tskid
             tskcmd.c       3677                              ID_MPF_EEP,// memory
             tskcmd.c       3678                              ID_MBX_EEP,// mailbox
             tskcmd.c       3679                              NO_DATA,   // procid
             tskcmd.c       3680                              NO_DATA,   // bcid
             tskcmd.c       3681                              msg,       // msg
             tskcmd.c       3682                              DEFDAT,    // sts
             tskcmd.c       3683                              DEFDAT,    // sts2
             tskcmd.c       3684                              &dummy,    // data
             tskcmd.c       3685                              sizeof(dummy) // data siz
             tskcmd.c       3686                          );
    000024B8 E101                   MOV         #1,R1      ; H'00000001
    000024BA 2F16                   MOV.L       R1,@-R15
    000024BC 65F3                   MOV         R15,R5
    000024BE 7504                   ADD         #4,R5
    000024C0 2F56                   MOV.L       R5,@-R15
    000024C2 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    000024C4 666C                   EXTU.B      R6,R6
    000024C6 6763                   MOV         R6,R7
    000024C8 2F66                   MOV.L       R6,@-R15
    000024CA 2F66                   MOV.L       R6,@-R15
    000024CC 3141801B               MOVU.B      @(27,R4),R1; (mrcv)->msgid
    000024D0 2F16                   MOV.L       R1,@-R15
    000024D2 2F66                   MOV.L       R6,@-R15
    000024D4 E606                   MOV         #6,R6      ; H'00000006
    000024D6 E505                   MOV         #5,R5      ; H'00000005
    000024D8 D290                   MOV.L       L1372,R2   ; _mbx_send
    000024DA 420B                   JSR         @R2
    000024DC 6453                   MOV         R5,R4
    000024DE 6703                   MOV         R0,R7
             tskcmd.c       3687    
             tskcmd.c       3688      if( result != E_SUCCESS )
    000024E0 2008                   TST         R0,R0
    000024E2 8D15                   BT/S        L400
    000024E4 7F18                   ADD         #24,R15
             tskcmd.c       3689      {
             tskcmd.c       3690          // 応答メッセージ作成
             tskcmd.c       3691          CmdMakeResponse(    &stCtl,
             tskcmd.c       3692                              PARAM2,                                     //0  パラメータ数
             tskcmd.c       3693                              STRTBL_MSG[ID_MSG_IMPPOSI],                 //1  コマンド文字列
             tskcmd.c       3694                              result,                                     //2  エラーコード
             tskcmd.c       3695    
             tskcmd.c       3696                              0,                                          //3  
             tskcmd.c       3697                              0,                                          //4  
             tskcmd.c       3698                              0,                                          //5  
             tskcmd.c       3699                              0,                                          //6  
             tskcmd.c       3700                              0,                                          //7  
             tskcmd.c       3701    
             tskcmd.c       3702                              0,                                          //8  
             tskcmd.c       3703                              0,                                          //9  
             tskcmd.c       3704                              0,                                          //10 
             tskcmd.c       3705                              0,                                          //11 
             tskcmd.c       3706                              0                                           //12 
             tskcmd.c       3707                          );
    000024E6 E500                   MOV         #0,R5      ; H'00000000
    000024E8 2F56                   MOV.L       R5,@-R15
    000024EA 2F56                   MOV.L       R5,@-R15
    000024EC 2F56                   MOV.L       R5,@-R15
    000024EE 2F56                   MOV.L       R5,@-R15
    000024F0 2F56                   MOV.L       R5,@-R15
    000024F2 2F56                   MOV.L       R5,@-R15
    000024F4 2F56                   MOV.L       R5,@-R15
    000024F6 2F56                   MOV.L       R5,@-R15
    000024F8 2F56                   MOV.L       R5,@-R15
    000024FA 2F56                   MOV.L       R5,@-R15
    000024FC E502                   MOV         #2,R5      ; H'00000002
    000024FE D188                   MOV.L       L1372+4,R1 ; H'00000098+_STRTBL_MSG
    00002500 D488                   MOV.L       L1372+8,R4 ; __$stCtl
    00002502 D389                   MOV.L       L1372+12,R3; _CmdMakeResponse
    00002504 430B                   JSR         @R3
    00002506 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
             tskcmd.c       3708    
             tskcmd.c       3709          // 応答メッセージ送信
             tskcmd.c       3710          CmdSendResponse( &stCtl );
    00002508 D486                   MOV.L       L1372+8,R4 ; __$stCtl
    0000250A D388                   MOV.L       L1372+16,R3; _CmdSendResponse
    0000250C 430B                   JSR         @R3
    0000250E 7F28                   ADD         #40,R15
    00002510              L400:
    00002510 7F04                   ADD         #4,R15
    00002512 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3711      }
             tskcmd.c       3712    }
    00002514 006B                   RTS/N
             tskcmd.c       3713    
             tskcmd.c       3714    
             tskcmd.c       3715    /***********************************************************************
             tskcmd.c       3716    *
             tskcmd.c       3717    * [概要]  
             tskcmd.c       3718    * [引数]  
             tskcmd.c       3719    * [戻値]  -
             tskcmd.c       3720    * 
             tskcmd.c       3721    ***********************************************************************/
             tskcmd.c       3722    static void CmdImpOptn( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002516              __$CmdImpOptn:                   ; function: __$CmdImpOptn
                                                           ; frame size=0
             tskcmd.c       3723    {
             tskcmd.c       3724    }
    00002516 006B                   RTS/N
             tskcmd.c       3725    
             tskcmd.c       3726    
             tskcmd.c       3727    /***********************************************************************
             tskcmd.c       3728    *
             tskcmd.c       3729    * [概要]  
             tskcmd.c       3730    * [引数]  
             tskcmd.c       3731    * [戻値]  -
             tskcmd.c       3732    * 
             tskcmd.c       3733    ***********************************************************************/
             tskcmd.c       3734    static void CmdExpRunl( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002518              __$CmdExpRunl:                   ; function: __$CmdExpRunl
                                                           ; frame size=4
    00002518 4F22                   STS.L       PR,@-R15
             tskcmd.c       3735    {
             tskcmd.c       3736      ExpRunlSeqno = 1;
    0000251A E101                   MOV         #1,R1      ; H'00000001
             tskcmd.c       3737      ExpRunlRetry = 0;
    0000251C E700                   MOV         #0,R7      ; H'00000000
    0000251E D284                   MOV.L       L1372+20,R2; __$ExpRunlSeqno
    00002520 D684                   MOV.L       L1372+24,R6; __$ExpRunlRetry
    00002522 2210                   MOV.B       R1,@R2     ; ExpRunlSeqno
             tskcmd.c       3738      TplExRunSend();
    00002524 B5F8                   BSR         _TplExRunSend
    00002526 2670                   MOV.B       R7,@R6     ; ExpRunlRetry
    00002528 E56B                   MOV         #107,R5    ; H'0000006B
             tskcmd.c       3739      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_EXRUN );
    0000252A D483                   MOV.L       L1372+28,R4; H'0000009C+__$tp
    0000252C A6ED                   BRA         __$TplRidDataSend
    0000252E 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3740    }
             tskcmd.c       3741    
             tskcmd.c       3742    
             tskcmd.c       3743    /***********************************************************************
             tskcmd.c       3744    *
             tskcmd.c       3745    * [概要]  
             tskcmd.c       3746    * [引数]  
             tskcmd.c       3747    * [戻値]  -
             tskcmd.c       3748    * 
             tskcmd.c       3749    ***********************************************************************/
             tskcmd.c       3750    static void CmdExpComl( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002530              __$CmdExpComl:                   ; function: __$CmdExpComl
                                                           ; frame size=0
             tskcmd.c       3751    {
             tskcmd.c       3752    }
    00002530 006B                   RTS/N
             tskcmd.c       3753    
             tskcmd.c       3754    
             tskcmd.c       3755    /***********************************************************************
             tskcmd.c       3756    *
             tskcmd.c       3757    * [概要]  
             tskcmd.c       3758    * [引数]  
             tskcmd.c       3759    * [戻値]  -
             tskcmd.c       3760    * 
             tskcmd.c       3761    ***********************************************************************/
             tskcmd.c       3762    static void CmdExpClog( T_CMD_MSG* mrcv, UB anum, const char** args )
             tskcmd.c       3763    {
             tskcmd.c       3764      // タッチパネルへそのままデータ通知
             tskcmd.c       3765      TplRpDataSend();
             tskcmd.c       3766      TplRidDataSend ( &tp.rsp.buf[0] , ID_TPL_PRINF );
             tskcmd.c       3767      
             tskcmd.c       3768      
             tskcmd.c       3769      
             tskcmd.c       3770      
             tskcmd.c       3771      
             tskcmd.c       3772    }
             tskcmd.c       3773    
             tskcmd.c       3774    
             tskcmd.c       3775    
             tskcmd.c       3776    
             tskcmd.c       3777    
             tskcmd.c       3778    
             tskcmd.c       3779    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       3780    /*  基本コマンド   ここまで                                                                                                                                                                                     基本コマンド   */
             tskcmd.c       3781    /*=============================================================================================================================================================================================================================*/
             tskcmd.c       3782    //
             tskcmd.c       3783    //
             tskcmd.c       3784    //
             tskcmd.c       3785    //
             tskcmd.c       3786    //
             tskcmd.c       3787    //
             tskcmd.c       3788    //
             tskcmd.c       3789    //
             tskcmd.c       3790    //
             tskcmd.c       3791    //
             tskcmd.c       3792    //
             tskcmd.c       3793    //
             tskcmd.c       3794    //
             tskcmd.c       3795    //
             tskcmd.c       3796    //
             tskcmd.c       3797    //
             tskcmd.c       3798    /***********************************************************************
             tskcmd.c       3799    *
             tskcmd.c       3800    * [概要]  デバイス動作中セット
             tskcmd.c       3801    * [引数]  
             tskcmd.c       3802    * [戻値]  -
             tskcmd.c       3803    * 
             tskcmd.c       3804    ***********************************************************************/
             tskcmd.c       3805    static void SetDevice( UB DevNo )
    00002532              __$SetDevice:                    ; function: __$SetDevice
                                                           ; frame size=0
             tskcmd.c       3806    {
             tskcmd.c       3807      // 未登録・規定外
             tskcmd.c       3808      if( DevNo == NO_DATA )  return;
             tskcmd.c       3809      if( DevNo > DVMAX )     return;
             tskcmd.c       3810    
             tskcmd.c       3811      
             tskcmd.c       3812      return;//debug
             tskcmd.c       3813      
             tskcmd.c       3814      BitSet_INT( DevNo, &DeviceStatus[0] );
             tskcmd.c       3815    }
    00002532 006B                   RTS/N
             tskcmd.c       3816    
             tskcmd.c       3817    /***********************************************************************
             tskcmd.c       3818    *
             tskcmd.c       3819    * [概要]  デバイス動作状態取得
             tskcmd.c       3820    * [引数]  
             tskcmd.c       3821    * [戻値]  TRUE:動作中、FALSE:待機中
             tskcmd.c       3822    * 
             tskcmd.c       3823    ***********************************************************************/
             tskcmd.c       3824    static BOOL GetDeviceStatus( UB DevNo )
    00002534              __$GetDeviceStatus:              ; function: __$GetDeviceStatus
                                                           ; frame size=4
    00002534 4F22                   STS.L       PR,@-R15
    00002536 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c       3825    {
             tskcmd.c       3826      // 未登録や規定外は動作中扱いとする
             tskcmd.c       3827      if( DevNo == NO_DATA )  return( TRUE );
    00002538 644C                   EXTU.B      R4,R4
    0000253A 622C                   EXTU.B      R2,R2
    0000253C 3420                   CMP/EQ      R2,R4
    0000253E 8908                   BT          L407
             tskcmd.c       3828      if( DevNo > DVMAX )     return( TRUE );
    00002540 E207                   MOV         #7,R2      ; H'00000007
    00002542 3427                   CMP/GT      R2,R4
    00002544 8905                   BT          L407
             tskcmd.c       3829    
             tskcmd.c       3830      return(( BitGet_INT( DevNo, &DeviceStatus[0] ) > 0 ? TRUE : FALSE ));
    00002546 D57D                   MOV.L       L1372+32,R5; __$DeviceStatus
    00002548 D27D                   MOV.L       L1372+36,R2; _BitGet_INT
    0000254A 424B                   JSR/N       @R2
    0000254C 4015                   CMP/PL      R0
    0000254E A001                   BRA         L409
    00002550 0029                   MOVT        R0
    00002552              L407:
    00002552 E001                   MOV         #1,R0      ; H'00000001
    00002554              L409:
    00002554 4F26                   LDS.L       @R15+,PR
             tskcmd.c       3831    }
    00002556 006B                   RTS/N
             tskcmd.c       3832    
             tskcmd.c       3833    /***********************************************************************
             tskcmd.c       3834    *
             tskcmd.c       3835    * [概要]  デバイス動作中クリア
             tskcmd.c       3836    * [引数]  
             tskcmd.c       3837    * [戻値]  -
             tskcmd.c       3838    * 
             tskcmd.c       3839    ***********************************************************************/
             tskcmd.c       3840    static void ClrDevice( UB DevNo )
    00002558              __$ClrDevice:                    ; function: __$ClrDevice
                                                           ; frame size=0
    00002558 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c       3841    {
             tskcmd.c       3842      if( DevNo == NO_DATA )  return;
    0000255A 644C                   EXTU.B      R4,R4
    0000255C 622C                   EXTU.B      R2,R2
    0000255E 3420                   CMP/EQ      R2,R4
    00002560 8906                   BT          L412
             tskcmd.c       3843      if( DevNo > DVMAX )     return;
    00002562 E207                   MOV         #7,R2      ; H'00000007
    00002564 3427                   CMP/GT      R2,R4
    00002566 8903                   BT          L412
             tskcmd.c       3844    
             tskcmd.c       3845      BitClr_INT( DevNo, &DeviceStatus[0] );
    00002568 D574                   MOV.L       L1372+32,R5; __$DeviceStatus
    0000256A D276                   MOV.L       L1372+40,R2; _BitClr_INT
    0000256C 422B                   JMP         @R2
    0000256E 0009                   NOP
    00002570              L412:
    00002570 006B                   RTS/N
             tskcmd.c       3846    }
             tskcmd.c       3847    
             tskcmd.c       3848    /******************************************************************************
             tskcmd.c       3849    * 
             tskcmd.c       3850    * [概要]  パルスモータを励磁
             tskcmd.c       3851    * [引数]  モーター番号、励磁動作指示
             tskcmd.c       3852    * [戻値]  TRUE:成功、FALSE:失敗
             tskcmd.c       3853    * 
             tskcmd.c       3854    * 
             tskcmd.c       3855    ***********************************************************************/
             tskcmd.c       3856    static ER GetDeviceActionChk ( UB msg, UB bcid, UB mm )
    00002572              __$GetDeviceActionChk:           ; function: __$GetDeviceActionChk
                                                           ; frame size=0
             tskcmd.c       3857    {
             tskcmd.c       3858      ER result = E_SUCCESS;
             tskcmd.c       3859    #if 0 // ★
             tskcmd.c       3860      INT AsnDevice[2];
             tskcmd.c       3861      INT CmpDevice[2];
             tskcmd.c       3862      INT TargetDevice;
             tskcmd.c       3863      UB devnowk;
             tskcmd.c       3864    
             tskcmd.c       3865      // **************************************************************
             tskcmd.c       3866      // 現在、動作中のデバイスとかぶらないか確認
             tskcmd.c       3867      // ※基本コマンドはbcctrlに登録されていないので動作中フラグで確認
             tskcmd.c       3868      // **************************************************************
             tskcmd.c       3869      memset( &CmpDevice,  CLR,  sizeof( CmpDevice ) );
             tskcmd.c       3870      GetBCDevice( msg,    mm,     &CmpDevice[0] );
             tskcmd.c       3871      
             tskcmd.c       3872      TargetDevice = ( DeviceStatus[0] & CmpDevice[0] );
             tskcmd.c       3873      if( TargetDevice )
             tskcmd.c       3874      {
             tskcmd.c       3875          devnowk = GetFirstCh( &TargetDevice );
             tskcmd.c       3876          return( (E_BUSY + devnowk) );
             tskcmd.c       3877      }
             tskcmd.c       3878      
             tskcmd.c       3879      TargetDevice = ( DeviceStatus[1] & CmpDevice[1] );
             tskcmd.c       3880      if( TargetDevice )
             tskcmd.c       3881      {
             tskcmd.c       3882          devnowk = GetFirstCh( &TargetDevice );
             tskcmd.c       3883          return( (E_BUSY + devnowk + 32) );
             tskcmd.c       3884      }
             tskcmd.c       3885    #endif
             tskcmd.c       3886      return( result );
             tskcmd.c       3887    }
    00002572 000B                   RTS
    00002574 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       3888    
             tskcmd.c       3889    /******************************************************************************
             tskcmd.c       3890    * 
             tskcmd.c       3891    * [概要]  パルスモータを励磁
             tskcmd.c       3892    * [引数]  モーター番号、励磁動作指示
             tskcmd.c       3893    * [戻値]  TRUE:成功、FALSE:失敗
             tskcmd.c       3894    * 
             tskcmd.c       3895    ******************************************************************************/
             tskcmd.c       3896    BOOL GetPowerSts(UB pm)
    00002576              _GetPowerSts:                    ; function: GetPowerSts
                                                           ; frame size=0
             tskcmd.c       3897    {
             tskcmd.c       3898      BOOL result;// port状態 H = TRUE、L = FALSE
             tskcmd.c       3899    
             tskcmd.c       3900      if( power[pm].mm == pm )
    00002576 644C                   EXTU.B      R4,R4
    00002578 6543                   MOV         R4,R5
    0000257A 4500                   SHLL        R5
    0000257C D672                   MOV.L       L1372+44,R6; __$power
    0000257E 356C                   ADD         R6,R5
    00002580 32518000               MOVU.B      @(0,R5),R2 ; power[].mm
    00002584 3240                   CMP/EQ      R4,R2
    00002586 8B02                   BF          L417
             tskcmd.c       3901      {
             tskcmd.c       3902          if( power[pm].sw )
    00002588 8451                   MOV.B       @(1,R5),R0 ; power[].sw
    0000258A 2008                   TST         R0,R0
    0000258C 8B01                   BF          L418
    0000258E              L417:
    0000258E E200                   MOV         #0,R2      ; H'00000000
    00002590 027B                   RTV/N       R2
    00002592              L418:
             tskcmd.c       3903          {
             tskcmd.c       3904              result = TRUE;
    00002592 0239                   MOVRT       R2
    00002594 027B                   RTV/N       R2
             tskcmd.c       3905          }
             tskcmd.c       3906          else
             tskcmd.c       3907          {
             tskcmd.c       3908              result = FALSE;
             tskcmd.c       3909          }
             tskcmd.c       3910    
             tskcmd.c       3911      }
             tskcmd.c       3912      else
             tskcmd.c       3913      {
             tskcmd.c       3914          result = FALSE;
             tskcmd.c       3915      }
             tskcmd.c       3916      
             tskcmd.c       3917      return( result );
             tskcmd.c       3918    }
             tskcmd.c       3919    /******************************************************************************
             tskcmd.c       3920    * 
             tskcmd.c       3921    * [概要]  リミット動作
             tskcmd.c       3922    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       3923    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       3924    *           dr   : 方向
             tskcmd.c       3925    *           md   : 動作ﾓｰﾄﾞ
             tskcmd.c       3926    *           sp   : 速度
             tskcmd.c       3927    * [戻値]  エラーコード
             tskcmd.c       3928    * 
             tskcmd.c       3929    ******************************************************************************/
             tskcmd.c       3930    static ER LimitAction( UB prid1, UB bcid, UB mm, UB dr, UB md, INT sp )
    00002596              __$LimitAction:                  ; function: __$LimitAction
                                                           ; frame size=52
    00002596 4BF0                   MOVMU.L     R11,@-R15
    00002598 7FF8                   ADD         #-8,R15
             tskcmd.c       3931    {
             tskcmd.c       3932      ER result = E_SUCCESS;
             tskcmd.c       3933      ID mpfid;
             tskcmd.c       3934      ID mbxid;
             tskcmd.c       3935      ST_LIMIT lmt;
             tskcmd.c       3936    
             tskcmd.c       3937      // LIMITデータコピー
             tskcmd.c       3938      lmt.mm = mm;
    0000259A 6B43                   MOV         R4,R11
    0000259C 51F7                   MOV.L       @(28,R15),R1
             tskcmd.c       3939      lmt.dr = dr;
             tskcmd.c       3940      lmt.md = md;
             tskcmd.c       3941      lmt.sp = sp;
    0000259E 54F8                   MOV.L       @(32,R15),R4
    000025A0 6E63                   MOV         R6,R14
    000025A2 3F610000               MOV.B       R6,@(0:12,R15); lmt.mm
    000025A6 3F710001               MOV.B       R7,@(1:12,R15); lmt.dr
    000025AA 3F110002               MOV.B       R1,@(2:12,R15); lmt.md
    000025AE 1F41                   MOV.L       R4,@(4,R15); lmt.sp
    000025B0 E608                   MOV         #8,R6      ; H'00000008
    000025B2 6EEC                   EXTU.B      R14,R14
    000025B4 6C53                   MOV         R5,R12
             tskcmd.c       3942      
             tskcmd.c       3943      memcpy( &bufwk[0], &lmt, sizeof( ST_LIMIT )); 
    000025B6 D465                   MOV.L       L1372+48,R4; __$bufwk
    000025B8 D765                   MOV.L       L1372+52,R7; _memcpy
    000025BA 470B                   JSR         @R7
    000025BC 65F3                   MOV         R15,R5
             tskcmd.c       3944      
             tskcmd.c       3945      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       3946      if(power[mm].sw == SET)
    000025BE DD65                   MOV.L       L1372+56,R13; H'00000001+__$power
    000025C0 62E3                   MOV         R14,R2
    000025C2 4200                   SHLL        R2
    000025C4 6023                   MOV         R2,R0
    000025C6 00DC                   MOV.B       @(R0,R13),R0; power[].sw
    000025C8 8801                   CMP/EQ      #1,R0
    000025CA 8B02                   BF          L422
             tskcmd.c       3947      {
             tskcmd.c       3948          mpfid = ID_MPF_MOTACT;
    000025CC E508                   MOV         #8,R5      ; H'00000008
             tskcmd.c       3949          mbxid = ID_MBX_MOTACT;
    000025CE A002                   BRA         L423
    000025D0 E609                   MOV         #9,R6      ; H'00000009
    000025D2              L422:
             tskcmd.c       3950      }
             tskcmd.c       3951      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       3952      else
             tskcmd.c       3953      {
             tskcmd.c       3954          mpfid = ID_MPF_MOTWAIT;
    000025D2 E507                   MOV         #7,R5      ; H'00000007
             tskcmd.c       3955          mbxid = ID_MBX_MOTWAIT;
    000025D4 E608                   MOV         #8,R6      ; H'00000008
    000025D6              L423:
    000025D6 E108                   MOV         #8,R1      ; H'00000008
             tskcmd.c       3956      }
             tskcmd.c       3957    
             tskcmd.c       3958      // メッセージ通知
             tskcmd.c       3959      result = mbx_send(
             tskcmd.c       3960                          ID_TSK_CMD,
             tskcmd.c       3961                          mpfid,
             tskcmd.c       3962                          mbxid,
             tskcmd.c       3963                          prid1,   
             tskcmd.c       3964                          bcid,
             tskcmd.c       3965                          ID_MSG_LIMIT,
             tskcmd.c       3966                          mm,
             tskcmd.c       3967                          NO_DATA,
             tskcmd.c       3968                          &bufwk[0],
             tskcmd.c       3969                          sizeof( ST_LIMIT )
             tskcmd.c       3970                      );
    000025D8 6DE3                   MOV         R14,R13
    000025DA 2F16                   MOV.L       R1,@-R15
    000025DC D15B                   MOV.L       L1372+48,R1; __$bufwk
    000025DE 2F16                   MOV.L       R1,@-R15
    000025E0 E4FF                   MOV         #-1,R4     ; H'FFFFFFFF
    000025E2 644C                   EXTU.B      R4,R4
    000025E4 2F46                   MOV.L       R4,@-R15
    000025E6 2FE6                   MOV.L       R14,@-R15
    000025E8 E70C                   MOV         #12,R7     ; H'0000000C
    000025EA 2F76                   MOV.L       R7,@-R15
    000025EC 62CC                   EXTU.B      R12,R2
    000025EE 2F26                   MOV.L       R2,@-R15
    000025F0 67BC                   EXTU.B      R11,R7
    000025F2 DB4A                   MOV.L       L1372,R11  ; _mbx_send
    000025F4 4B0B                   JSR         @R11
    000025F6 E405                   MOV         #5,R4      ; H'00000005
    000025F8 6E03                   MOV         R0,R14
             tskcmd.c       3971    
             tskcmd.c       3972      if( result == E_SUCCESS )
    000025FA 2008                   TST         R0,R0
    000025FC 8F02                   BF/S        L425
    000025FE 7F18                   ADD         #24,R15
             tskcmd.c       3973      {
             tskcmd.c       3974          SetDevice( mm );
    00002600 BF97                   BSR         __$SetDevice
    00002602 64D3                   MOV         R13,R4
    00002604              L425:
             tskcmd.c       3975      }
             tskcmd.c       3976      return( result );
    00002604 60E3                   MOV         R14,R0
    00002606 7F08                   ADD         #8,R15
    00002608 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       3977    }
    0000260A 006B                   RTS/N
             tskcmd.c       3978    /******************************************************************************
             tskcmd.c       3979    * 
             tskcmd.c       3980    * [概要]  相対位置移動動作
             tskcmd.c       3981    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       3982    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       3983    *           pppp : mm移動量
             tskcmd.c       3984    * [戻値]  エラーコード
             tskcmd.c       3985    * 
             tskcmd.c       3986    ******************************************************************************/
             tskcmd.c       3987    static ER RelmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp )
    0000260C              __$RelmvAction:                  ; function: __$RelmvAction
                                                           ; frame size=52
    0000260C 4BF0                   MOVMU.L     R11,@-R15
    0000260E 7FF8                   ADD         #-8,R15
    00002610 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00002612 6B5C                   EXTU.B      R5,R11
    00002614 622C                   EXTU.B      R2,R2
    00002616 3B20                   CMP/EQ      R2,R11
             tskcmd.c       3988    {
             tskcmd.c       3989      ER result = E_SUCCESS;
             tskcmd.c       3990      ID mpfid;
             tskcmd.c       3991      ID mbxid;
             tskcmd.c       3992      ST_RELMV rel;
             tskcmd.c       3993    
             tskcmd.c       3994      // 基本コマンドはデバイス状態を確認
             tskcmd.c       3995      if( bcid == NO_DATA )
    00002618 6D43                   MOV         R4,R13
    0000261A 6E63                   MOV         R6,R14
    0000261C 8F09                   BF/S        L428
    0000261E 6C6C                   EXTU.B      R6,R12
             tskcmd.c       3996      {
             tskcmd.c       3997          if( GetDeviceStatus(mm) ==TRUE )
    00002620 BF88                   BSR         __$GetDeviceStatus
    00002622 64C3                   MOV         R12,R4
    00002624 8801                   CMP/EQ      #1,R0
    00002626 8B04                   BF          L428
             tskcmd.c       3998          {
             tskcmd.c       3999              return( (E_BUSY + mm) );
    00002628 E601                   MOV         #1,R6      ; H'00000001
    0000262A 60EC                   EXTU.B      R14,R0
    0000262C 4618                   SHLL8       R6
    0000262E A02E                   BRA         L430
    00002630 306C                   ADD         R6,R0
    00002632              L428:
             tskcmd.c       4000          }
             tskcmd.c       4001      }
             tskcmd.c       4002    
             tskcmd.c       4003      // RELMVデータコピー
             tskcmd.c       4004      rel.mm = mm;
    00002632 E100                   MOV         #0,R1      ; H'00000000
    00002634 E608                   MOV         #8,R6      ; H'00000008
    00002636 6013                   MOV         R1,R0
    00002638 0FE4                   MOV.B       R14,@(R0,R15); rel.mm
             tskcmd.c       4005      rel.st = 0;
             tskcmd.c       4006      rel.pppp = pppp;
    0000263A 54F7                   MOV.L       @(28,R15),R4
    0000263C 6EEC                   EXTU.B      R14,R14
    0000263E 3F110001               MOV.B       R1,@(1:12,R15); rel.st
    00002642 1F41                   MOV.L       R4,@(4,R15); rel.pppp
             tskcmd.c       4007      
             tskcmd.c       4008      memcpy( &bufwk[0], &rel, sizeof( ST_RELMV )); 
    00002644 D441                   MOV.L       L1372+48,R4; __$bufwk
    00002646 D742                   MOV.L       L1372+52,R7; _memcpy
    00002648 470B                   JSR         @R7
    0000264A 65F3                   MOV         R15,R5
             tskcmd.c       4009      
             tskcmd.c       4010      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       4011      if(power[mm].sw == SET)
    0000264C D141                   MOV.L       L1372+56,R1; H'00000001+__$power
    0000264E 4E00                   SHLL        R14
    00002650 60E3                   MOV         R14,R0
    00002652 001C                   MOV.B       @(R0,R1),R0; power[].sw
    00002654 8801                   CMP/EQ      #1,R0
    00002656 8B02                   BF          L432
             tskcmd.c       4012      {
             tskcmd.c       4013          mpfid = ID_MPF_MOTACT;
    00002658 E508                   MOV         #8,R5      ; H'00000008
             tskcmd.c       4014          mbxid = ID_MBX_MOTACT;
    0000265A A002                   BRA         L433
    0000265C E609                   MOV         #9,R6      ; H'00000009
    0000265E              L432:
             tskcmd.c       4015      }
             tskcmd.c       4016      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       4017      else
             tskcmd.c       4018      {
             tskcmd.c       4019          mpfid = ID_MPF_MOTWAIT;
    0000265E E507                   MOV         #7,R5      ; H'00000007
             tskcmd.c       4020          mbxid = ID_MBX_MOTWAIT;
    00002660 E608                   MOV         #8,R6      ; H'00000008
    00002662              L433:
             tskcmd.c       4021      }
             tskcmd.c       4022    
             tskcmd.c       4023      // メッセージ通知
             tskcmd.c       4024      result = mbx_send(
             tskcmd.c       4025                          ID_TSK_CMD,                                 // tskid
             tskcmd.c       4026                          mpfid,                                      // mpfid
             tskcmd.c       4027                          mbxid,                                      // mbxid
             tskcmd.c       4028                          prid1,                                      // prid1
             tskcmd.c       4029                          bcid,                                       // bcid
             tskcmd.c       4030                          ID_MSG_RELMV,                               // msgid
             tskcmd.c       4031                          mm,                                         // sts
             tskcmd.c       4032                          NO_DATA,                                    // sts2
             tskcmd.c       4033                          &bufwk[0],                                  // data
             tskcmd.c       4034                          sizeof( ST_RELMV )                          // siz
             tskcmd.c       4035                      );
    00002662 E408                   MOV         #8,R4      ; H'00000008
    00002664 2F46                   MOV.L       R4,@-R15
    00002666 D139                   MOV.L       L1372+48,R1; __$bufwk
    00002668 2F16                   MOV.L       R1,@-R15
    0000266A E7FF                   MOV         #-1,R7     ; H'FFFFFFFF
    0000266C 677C                   EXTU.B      R7,R7
    0000266E 2F76                   MOV.L       R7,@-R15
    00002670 2FC6                   MOV.L       R12,@-R15
    00002672 EE11                   MOV         #17,R14    ; H'00000011
    00002674 2FE6                   MOV.L       R14,@-R15
    00002676 2FB6                   MOV.L       R11,@-R15
    00002678 67DC                   EXTU.B      R13,R7
    0000267A D228                   MOV.L       L1372,R2   ; _mbx_send
    0000267C 420B                   JSR         @R2
    0000267E E405                   MOV         #5,R4      ; H'00000005
    00002680 6E03                   MOV         R0,R14
             tskcmd.c       4036    
             tskcmd.c       4037      if( result == E_SUCCESS )
    00002682 2008                   TST         R0,R0
    00002684 8F02                   BF/S        L435
    00002686 7F18                   ADD         #24,R15
             tskcmd.c       4038      {
             tskcmd.c       4039          SetDevice( mm );
    00002688 BF53                   BSR         __$SetDevice
    0000268A 64C3                   MOV         R12,R4
    0000268C              L435:
             tskcmd.c       4040      }
             tskcmd.c       4041    
             tskcmd.c       4042      return( result );
    0000268C 60E3                   MOV         R14,R0
    0000268E              L430:
    0000268E 7F08                   ADD         #8,R15
    00002690 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       4043    }
    00002692 006B                   RTS/N
             tskcmd.c       4044    /******************************************************************************
             tskcmd.c       4045    * 
             tskcmd.c       4046    * [概要]  絶対位置移動動作
             tskcmd.c       4047    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       4048    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4049    *           pppp : mm移動量
             tskcmd.c       4050    * [戻値]  エラーコード
             tskcmd.c       4051    * 
             tskcmd.c       4052    ******************************************************************************/
             tskcmd.c       4053    static ER AbsmvAction( UB prid1, UB bcid, UB mm, UB st, INT pppp )
    00002694              __$AbsmvAction:                  ; function: __$AbsmvAction
                                                           ; frame size=56
    00002694 4AF0                   MOVMU.L     R10,@-R15
    00002696 7FF8                   ADD         #-8,R15
    00002698 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    0000269A 6A5C                   EXTU.B      R5,R10
    0000269C 622C                   EXTU.B      R2,R2
    0000269E 3A20                   CMP/EQ      R2,R10
             tskcmd.c       4054    {
             tskcmd.c       4055      ER result = E_SUCCESS;
             tskcmd.c       4056      ID mpfid;
             tskcmd.c       4057      ID mbxid;
             tskcmd.c       4058      ST_ABSMV abs;
             tskcmd.c       4059    
             tskcmd.c       4060      // 基本コマンドはデバイス状態を確認
             tskcmd.c       4061      if( bcid == NO_DATA )
    000026A0 6C43                   MOV         R4,R12
    000026A2 6E63                   MOV         R6,R14
    000026A4 6D73                   MOV         R7,R13
    000026A6 8F09                   BF/S        L438
    000026A8 6B6C                   EXTU.B      R6,R11
             tskcmd.c       4062      {
             tskcmd.c       4063          if( GetDeviceStatus(mm) ==TRUE )
    000026AA BF43                   BSR         __$GetDeviceStatus
    000026AC 64B3                   MOV         R11,R4
    000026AE 8801                   CMP/EQ      #1,R0
    000026B0 8B04                   BF          L438
             tskcmd.c       4064          {
             tskcmd.c       4065              return( (E_BUSY + mm) );
    000026B2 E601                   MOV         #1,R6      ; H'00000001
    000026B4 60EC                   EXTU.B      R14,R0
    000026B6 4618                   SHLL8       R6
    000026B8 A02D                   BRA         L440
    000026BA 306C                   ADD         R6,R0
    000026BC              L438:
             tskcmd.c       4066          }
             tskcmd.c       4067      }
             tskcmd.c       4068    
             tskcmd.c       4069      // ABSMVデータコピー
             tskcmd.c       4070      abs.mm = mm;
             tskcmd.c       4071      abs.st = st;
             tskcmd.c       4072      abs.pppp = pppp;
    000026BC 51F8                   MOV.L       @(32,R15),R1
    000026BE E608                   MOV         #8,R6      ; H'00000008
    000026C0 3FE10000               MOV.B       R14,@(0:12,R15); abs.mm
    000026C4 3FD10001               MOV.B       R13,@(1:12,R15); abs.st
    000026C8 1F11                   MOV.L       R1,@(4,R15); abs.pppp
    000026CA 6EEC                   EXTU.B      R14,R14
             tskcmd.c       4073      
             tskcmd.c       4074      memcpy( &bufwk[0], &abs, sizeof( ST_ABSMV )); 
    000026CC D41F                   MOV.L       L1372+48,R4; __$bufwk
    000026CE D720                   MOV.L       L1372+52,R7; _memcpy
    000026D0 470B                   JSR         @R7
    000026D2 65F3                   MOV         R15,R5
             tskcmd.c       4075      
             tskcmd.c       4076      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       4077      if(power[mm].sw == SET)
    000026D4 DD1F                   MOV.L       L1372+56,R13; H'00000001+__$power
    000026D6 4E00                   SHLL        R14
    000026D8 60E3                   MOV         R14,R0
    000026DA 00DC                   MOV.B       @(R0,R13),R0; power[].sw
    000026DC 8801                   CMP/EQ      #1,R0
    000026DE 8B02                   BF          L442
             tskcmd.c       4078      {
             tskcmd.c       4079          mpfid = ID_MPF_MOTACT;
    000026E0 E508                   MOV         #8,R5      ; H'00000008
             tskcmd.c       4080          mbxid = ID_MBX_MOTACT;
    000026E2 A002                   BRA         L443
    000026E4 E609                   MOV         #9,R6      ; H'00000009
    000026E6              L442:
             tskcmd.c       4081      }
             tskcmd.c       4082      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       4083      else
             tskcmd.c       4084      {
             tskcmd.c       4085          mpfid = ID_MPF_MOTWAIT;
    000026E6 E507                   MOV         #7,R5      ; H'00000007
             tskcmd.c       4086          mbxid = ID_MBX_MOTWAIT;
    000026E8 E608                   MOV         #8,R6      ; H'00000008
    000026EA              L443:
             tskcmd.c       4087      }
             tskcmd.c       4088    
             tskcmd.c       4089      // メッセージ通知
             tskcmd.c       4090      result = mbx_send(                                              
             tskcmd.c       4091                          ID_TSK_CMD,                                 // tskid
             tskcmd.c       4092                          mpfid,                                      // mpfid
             tskcmd.c       4093                          mbxid,                                      // mbxid
             tskcmd.c       4094                          prid1,                                      // prid1
             tskcmd.c       4095                          bcid,                                       // bcid
             tskcmd.c       4096                          ID_MSG_ABSMV,                               // msgid
             tskcmd.c       4097                          mm,                                         // sts
             tskcmd.c       4098                          NO_DATA,                                    // sts2
             tskcmd.c       4099                          &bufwk[0],                                  // data
             tskcmd.c       4100                          sizeof( ST_ABSMV )                          // siz
             tskcmd.c       4101                      );
    000026EA EE08                   MOV         #8,R14     ; H'00000008
    000026EC 2FE6                   MOV.L       R14,@-R15
    000026EE D117                   MOV.L       L1372+48,R1; __$bufwk
    000026F0 2F16                   MOV.L       R1,@-R15
    000026F2 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    000026F4 611C                   EXTU.B      R1,R1
    000026F6 2F16                   MOV.L       R1,@-R15
    000026F8 2FB6                   MOV.L       R11,@-R15
    000026FA E409                   MOV         #9,R4      ; H'00000009
    000026FC 2F46                   MOV.L       R4,@-R15
    000026FE 2FA6                   MOV.L       R10,@-R15
    00002700 67CC                   EXTU.B      R12,R7
    00002702 DD06                   MOV.L       L1372,R13  ; _mbx_send
    00002704 4D0B                   JSR         @R13
    00002706 E405                   MOV         #5,R4      ; H'00000005
    00002708 6E03                   MOV         R0,R14
             tskcmd.c       4102    
             tskcmd.c       4103      if( result == E_SUCCESS )
    0000270A 2008                   TST         R0,R0
    0000270C 8F02                   BF/S        L445
    0000270E 7F18                   ADD         #24,R15
             tskcmd.c       4104      {
             tskcmd.c       4105          SetDevice( mm );
    00002710 BF0F                   BSR         __$SetDevice
    00002712 64B3                   MOV         R11,R4
    00002714              L445:
             tskcmd.c       4106      }
             tskcmd.c       4107      return( result );
    00002714 60E3                   MOV         R14,R0
    00002716              L440:
    00002716 7F08                   ADD         #8,R15
    00002718 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       4108    }
    0000271A 006B                   RTS/N
    0000271C              L1372:
    0000271C <00000000>             .DATA.L     _mbx_send
    00002720 <00000098>             .DATA.L     H'00000098+_STRTBL_MSG
    00002724 <00000000>             .DATA.L     __$stCtl
    00002728 <00000000>             .DATA.L     _CmdMakeResponse
    0000272C <00000000>             .DATA.L     _CmdSendResponse
    00002730 <00000000>             .DATA.L     __$ExpRunlSeqno
    00002734 <00000000>             .DATA.L     __$ExpRunlRetry
    00002738 <0000009C>             .DATA.L     H'0000009C+__$tp
    0000273C <00000000>             .DATA.L     __$DeviceStatus
    00002740 <00000000>             .DATA.L     _BitGet_INT
    00002744 <00000000>             .DATA.L     _BitClr_INT
    00002748 <00000000>             .DATA.L     __$power
    0000274C <00000000>             .DATA.L     __$bufwk
    00002750 <00000000>             .DATA.L     _memcpy
    00002754 <00000001>             .DATA.L     H'00000001+__$power
             tskcmd.c       4109    /******************************************************************************
             tskcmd.c       4110    * 
             tskcmd.c       4111    * [概要]  MAP移動動作
             tskcmd.c       4112    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       4113    *           mm1  : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4114    *           mm2  : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4115    *           pppp1: mm1移動量
             tskcmd.c       4116    *           pppp2: mm2移動量
             tskcmd.c       4117    * [戻値]  エラーコード
             tskcmd.c       4118    * 
             tskcmd.c       4119    ******************************************************************************/
             tskcmd.c       4120    static ER MapAction( UB prid1, UB bcid, UB mm1, UB mm2, INT pppp1, INT pppp2 )
    00002758              __$MapAction:                    ; function: __$MapAction
                                                           ; frame size=80
    00002758 48F0                   MOVMU.L     R8,@-R15
    0000275A 7FE8                   ADD         #-24,R15
    0000275C E9FF                   MOV         #-1,R9     ; H'FFFFFFFF
             tskcmd.c       4121    {
             tskcmd.c       4122      ID mpfid;
             tskcmd.c       4123      ID mbxid;
             tskcmd.c       4124      ER result  = E_SUCCESS;
             tskcmd.c       4125      ER result1 = E_SUCCESS;
             tskcmd.c       4126      ER result2 = E_SUCCESS;
             tskcmd.c       4127      ST_ABSMV absmv;
             tskcmd.c       4128      ST_ABSMV absmv2;
             tskcmd.c       4129      
             tskcmd.c       4130      // 基本コマンドはデバイス状態を確認
             tskcmd.c       4131      if( bcid == NO_DATA )
    0000275E 685C                   EXTU.B      R5,R8
    00002760 699C                   EXTU.B      R9,R9
    00002762 EC00                   MOV         #0,R12     ; H'00000000
    00002764 616C                   EXTU.B      R6,R1
    00002766 3890                   CMP/EQ      R9,R8
    00002768 6B43                   MOV         R4,R11
    0000276A 1F14                   MOV.L       R1,@(16,R15)
    0000276C 6E63                   MOV         R6,R14
    0000276E 8F12                   BF/S        L448
    00002770 6D73                   MOV         R7,R13
             tskcmd.c       4132      {
             tskcmd.c       4133          if( GetDeviceStatus(mm1) ==TRUE )
    00002772 BEDF                   BSR         __$GetDeviceStatus
    00002774 54F4                   MOV.L       @(16,R15),R4
    00002776 8801                   CMP/EQ      #1,R0
    00002778 8B04                   BF          L450
             tskcmd.c       4134          {
             tskcmd.c       4135              return( (E_BUSY + mm1) );
    0000277A E601                   MOV         #1,R6      ; H'00000001
    0000277C 60EC                   EXTU.B      R14,R0
    0000277E 4618                   SHLL8       R6
    00002780 A071                   BRA         L451
    00002782 306C                   ADD         R6,R0
    00002784              L450:
             tskcmd.c       4136          }
             tskcmd.c       4137          if( GetDeviceStatus(mm2) ==TRUE )
    00002784 BED6                   BSR         __$GetDeviceStatus
    00002786 64DC                   EXTU.B      R13,R4
    00002788 8801                   CMP/EQ      #1,R0
    0000278A 8B04                   BF          L448
             tskcmd.c       4138          {
             tskcmd.c       4139              return( (E_BUSY + mm2) );
    0000278C E601                   MOV         #1,R6      ; H'00000001
    0000278E 60DC                   EXTU.B      R13,R0
    00002790 4618                   SHLL8       R6
    00002792 A068                   BRA         L451
    00002794 306C                   ADD         R6,R0
    00002796              L448:
             tskcmd.c       4140          }
             tskcmd.c       4141      }
             tskcmd.c       4142    
             tskcmd.c       4143      // 初期化
             tskcmd.c       4144      memset( &bufwk,  CLR, sizeof( bufwk ) );
    00002796 D99D                   MOV.L       L1373,R9   ; __$bufwk
    00002798 E63C                   MOV         #60,R6     ; H'0000003C
    0000279A E500                   MOV         #0,R5      ; H'00000000
    0000279C DA9C                   MOV.L       L1373+4,R10; _memset
    0000279E 4A0B                   JSR         @R10
    000027A0 6493                   MOV         R9,R4
             tskcmd.c       4145    
             tskcmd.c       4146        absmv.mm   = mm1; 
    000027A2 E100                   MOV         #0,R1      ; H'00000000
             tskcmd.c       4147        absmv.st   = 0;
             tskcmd.c       4148        absmv.pppp = pppp1;
             tskcmd.c       4149    
             tskcmd.c       4150      absmv2.mm   = mm2; 
             tskcmd.c       4151        absmv2.st   = 0;
    000027A4 E500                   MOV         #0,R5      ; H'00000000
    000027A6 6013                   MOV         R1,R0
    000027A8 0FE4                   MOV.B       R14,@(R0,R15); absmv.mm
    000027AA 54FE                   MOV.L       @(56,R15),R4
    000027AC 6EEC                   EXTU.B      R14,R14
    000027AE 4E00                   SHLL        R14
             tskcmd.c       4152        absmv2.pppp = pppp2;
    000027B0 56FF                   MOV.L       @(60,R15),R6
    000027B2 1F41                   MOV.L       R4,@(4,R15); absmv.pppp
    000027B4 60E3                   MOV         R14,R0
    000027B6 D497                   MOV.L       L1373+8,R4 ; H'00000001+__$power
    000027B8 004C                   MOV.B       @(R0,R4),R0; power[].sw
             tskcmd.c       4153    
             tskcmd.c       4154      // 励磁ＯＮ中であれば実行タスクへ通知
             tskcmd.c       4155      if(
    000027BA 67DC                   EXTU.B      R13,R7
    000027BC 3F110001               MOV.B       R1,@(1:12,R15); absmv.st
    000027C0 8801                   CMP/EQ      #1,R0
    000027C2 1F63                   MOV.L       R6,@(12,R15); absmv2.pppp
    000027C4 3FD10008               MOV.B       R13,@(8:12,R15); absmv2.mm
    000027C8 3F510009               MOV.B       R5,@(9:12,R15); absmv2.st
    000027CC 8F08                   BF/S        L454
    000027CE 1F75                   MOV.L       R7,@(20,R15)
    000027D0 60DC                   EXTU.B      R13,R0
    000027D2 4000                   SHLL        R0
    000027D4 004C                   MOV.B       @(R0,R4),R0; power[].sw
    000027D6 8801                   CMP/EQ      #1,R0
    000027D8 8B02                   BF          L454
             tskcmd.c       4156          (power[absmv.mm].sw == SET)&&
             tskcmd.c       4157          (power[absmv2.mm].sw == SET)
             tskcmd.c       4158      )
             tskcmd.c       4159      {
             tskcmd.c       4160          mpfid = ID_MPF_MOTACT;
    000027DA ED08                   MOV         #8,R13     ; H'00000008
             tskcmd.c       4161          mbxid = ID_MBX_MOTACT;
    000027DC A002                   BRA         L456
    000027DE EE09                   MOV         #9,R14     ; H'00000009
    000027E0              L454:
             tskcmd.c       4162      }
             tskcmd.c       4163      // 励磁ＯＦＦであればウェイトタスクへ通知
             tskcmd.c       4164      else
             tskcmd.c       4165      {
             tskcmd.c       4166          mpfid = ID_MPF_MOTWAIT;
    000027E0 ED07                   MOV         #7,R13     ; H'00000007
             tskcmd.c       4167          mbxid = ID_MBX_MOTWAIT;
    000027E2 EE08                   MOV         #8,R14     ; H'00000008
    000027E4              L456:
    000027E4 E608                   MOV         #8,R6      ; H'00000008
             tskcmd.c       4168      }
             tskcmd.c       4169    
             tskcmd.c       4170      // -------------------
             tskcmd.c       4171      // １つ目のデバイス
             tskcmd.c       4172      // -------------------
             tskcmd.c       4173      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       4174      memcpy( &bufwk[0], (B*)&absmv, sizeof( ST_ABSMV ) );
    000027E6 65F3                   MOV         R15,R5
    000027E8 DA8B                   MOV.L       L1373+12,R10; _memcpy
    000027EA 4A0B                   JSR         @R10
    000027EC 6493                   MOV         R9,R4
             tskcmd.c       4175      
             tskcmd.c       4176      // メッセージ通知
             tskcmd.c       4177      result1 = mbx_send(
             tskcmd.c       4178                          ID_TSK_CMD,                      // tskid
             tskcmd.c       4179                          mpfid,                           // mpfid
             tskcmd.c       4180                          mbxid,                           // mbxid
             tskcmd.c       4181                          prid1,                           // prid1
             tskcmd.c       4182                          bcid,                            // bcid
             tskcmd.c       4183                          ID_MSG_MAP,                      // msgid
             tskcmd.c       4184                          mm1,                             // sts
             tskcmd.c       4185                          mm2,                             // sts2
             tskcmd.c       4186                          &bufwk[0],                       // data
             tskcmd.c       4187                          sizeof( ST_ABSMV )               // siz
             tskcmd.c       4188                      );
    000027EE 6ABC                   EXTU.B      R11,R10
    000027F0 EB08                   MOV         #8,R11     ; H'00000008
    000027F2 2FB6                   MOV.L       R11,@-R15
    000027F4 2F96                   MOV.L       R9,@-R15
    000027F6 7FFC                   ADD         #-4,R15
    000027F8 51F8                   MOV.L       @(32,R15),R1
    000027FA 2F12                   MOV.L       R1,@R15
    000027FC 7FFC                   ADD         #-4,R15
    000027FE 52F8                   MOV.L       @(32,R15),R2
    00002800 E40D                   MOV         #13,R4     ; H'0000000D
    00002802 2F22                   MOV.L       R2,@R15
    00002804 2F46                   MOV.L       R4,@-R15
    00002806 2F86                   MOV.L       R8,@-R15
    00002808 E405                   MOV         #5,R4      ; H'00000005
    0000280A 65D3                   MOV         R13,R5
    0000280C 66E3                   MOV         R14,R6
    0000280E D283                   MOV.L       L1373+16,R2; _mbx_send
    00002810 420B                   JSR         @R2
    00002812 67A3                   MOV         R10,R7
    00002814 6B03                   MOV         R0,R11
    00002816 7F18                   ADD         #24,R15
             tskcmd.c       4189      
             tskcmd.c       4190      
             tskcmd.c       4191      // -------------------
             tskcmd.c       4192      // ２つ目のデバイス
             tskcmd.c       4193      // -------------------
             tskcmd.c       4194      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       4195      memcpy( &bufwk[0], (B*)&absmv2, sizeof( ST_ABSMV ) );
    00002818 65F3                   MOV         R15,R5
    0000281A 7508                   ADD         #8,R5
    0000281C E608                   MOV         #8,R6      ; H'00000008
    0000281E D17E                   MOV.L       L1373+12,R1; _memcpy
    00002820 410B                   JSR         @R1
    00002822 6493                   MOV         R9,R4
             tskcmd.c       4196    
             tskcmd.c       4197      // メッセージ通知
             tskcmd.c       4198      result2 = mbx_send(
             tskcmd.c       4199                          ID_TSK_CMD,                      // tskid
             tskcmd.c       4200                          mpfid,                           // mpfid
             tskcmd.c       4201                          mbxid,                           // mbxid
             tskcmd.c       4202                          prid1,                           // prid1
             tskcmd.c       4203                          bcid,                            // bcid
             tskcmd.c       4204                          ID_MSG_MAP,                      // msgid
             tskcmd.c       4205                          mm2,                             // sts
             tskcmd.c       4206                          mm1,                             // sts2
             tskcmd.c       4207                          &bufwk[0],                       // data
             tskcmd.c       4208                          sizeof( ST_ABSMV )               // siz
             tskcmd.c       4209                      );
    00002824 E208                   MOV         #8,R2      ; H'00000008
    00002826 2F26                   MOV.L       R2,@-R15
    00002828 2F96                   MOV.L       R9,@-R15
    0000282A 7FFC                   ADD         #-4,R15
    0000282C 55F7                   MOV.L       @(28,R15),R5
    0000282E 2F52                   MOV.L       R5,@R15
    00002830 7FFC                   ADD         #-4,R15
    00002832 59F9                   MOV.L       @(36,R15),R9
    00002834 2F92                   MOV.L       R9,@R15
    00002836 E90D                   MOV         #13,R9     ; H'0000000D
    00002838 2F96                   MOV.L       R9,@-R15
    0000283A 2F86                   MOV.L       R8,@-R15
    0000283C E405                   MOV         #5,R4      ; H'00000005
    0000283E 65D3                   MOV         R13,R5
    00002840 66E3                   MOV         R14,R6
    00002842 D176                   MOV.L       L1373+16,R1; _mbx_send
    00002844 410B                   JSR         @R1
    00002846 67A3                   MOV         R10,R7
    00002848 6203                   MOV         R0,R2
             tskcmd.c       4210      
             tskcmd.c       4211      // エラーチェック(エラー時は、「1」側優先でログに出力)
             tskcmd.c       4212      if( result2 != E_SUCCESS )      result = result2;
    0000284A 2008                   TST         R0,R0
    0000284C 8D01                   BT/S        L458
    0000284E 7F18                   ADD         #24,R15
    00002850 6C23                   MOV         R2,R12
    00002852              L458:
             tskcmd.c       4213      if( result1 != E_SUCCESS )      result = result1;
    00002852 2BB8                   TST         R11,R11
    00002854 8900                   BT          L460
    00002856 6CB3                   MOV         R11,R12
    00002858              L460:
             tskcmd.c       4214    
             tskcmd.c       4215      if( result == E_SUCCESS )
    00002858 2CC8                   TST         R12,R12
    0000285A 8B03                   BF          L462
             tskcmd.c       4216      {
             tskcmd.c       4217          SetDevice( mm1 );
    0000285C BE69                   BSR         __$SetDevice
    0000285E 54F4                   MOV.L       @(16,R15),R4
             tskcmd.c       4218          SetDevice( mm2 );
    00002860 BE67                   BSR         __$SetDevice
    00002862 54F5                   MOV.L       @(20,R15),R4
    00002864              L462:
             tskcmd.c       4219      }
             tskcmd.c       4220      return( result );
    00002864 60C3                   MOV         R12,R0
    00002866              L451:
    00002866 7F18                   ADD         #24,R15
    00002868 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       4221    }
    0000286A 006B                   RTS/N
             tskcmd.c       4222    
             tskcmd.c       4223    /******************************************************************************
             tskcmd.c       4224    * 
             tskcmd.c       4225    * [概要]  ＷＡＩＴ動作
             tskcmd.c       4226    * [引数]  id   : ﾌﾞﾛｯｸｺﾏﾝﾄﾞID
             tskcmd.c       4227    *           mm   : ﾃﾞﾊﾞｲｽNO
             tskcmd.c       4228    *           pppp : mm移動量
             tskcmd.c       4229    * [戻値]  エラーコード
             tskcmd.c       4230    * 
             tskcmd.c       4231    ******************************************************************************/
             tskcmd.c       4232    static ER WaitAction( UB prid1, UB bcid, INT waittim )
    0000286C              __$WaitAction:                   ; function: __$WaitAction
                                                           ; frame size=40
    0000286C 4DF0                   MOVMU.L     R13,@-R15
    0000286E 7FFC                   ADD         #-4,R15
             tskcmd.c       4233    {
             tskcmd.c       4234      ER result = E_SUCCESS;
             tskcmd.c       4235    
             tskcmd.c       4236      memcpy( &bufwk[0], &waittim, sizeof( INT )); 
    00002870 2F62                   MOV.L       R6,@R15
    00002872 E604                   MOV         #4,R6      ; H'00000004
    00002874 6D43                   MOV         R4,R13
    00002876 6E53                   MOV         R5,R14
    00002878 D464                   MOV.L       L1373,R4   ; __$bufwk
    0000287A D167                   MOV.L       L1373+12,R1; _memcpy
    0000287C 410B                   JSR         @R1
    0000287E 65F3                   MOV         R15,R5
             tskcmd.c       4237    
             tskcmd.c       4238      // メッセージ通知
             tskcmd.c       4239      result = mbx_send(
             tskcmd.c       4240                          ID_TSK_CMD,             // tskid
             tskcmd.c       4241                          ID_MPF_MOTWAIT,         // mpfid
             tskcmd.c       4242                          ID_MBX_MOTWAIT,         // mbxid
             tskcmd.c       4243                          prid1,                  // prid1
             tskcmd.c       4244                          bcid,                   // bcid
             tskcmd.c       4245                          ID_MSG_TIMWAIT,         // msgid
             tskcmd.c       4246                          NO_DATA,                // sts
             tskcmd.c       4247                          NO_DATA,                // sts2
             tskcmd.c       4248                          &bufwk[0],              // data
             tskcmd.c       4249                          sizeof( INT )           // siz
             tskcmd.c       4250                      );
    00002880 E104                   MOV         #4,R1      ; H'00000004
    00002882 2F16                   MOV.L       R1,@-R15
    00002884 D161                   MOV.L       L1373,R1   ; __$bufwk
    00002886 2F16                   MOV.L       R1,@-R15
    00002888 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    0000288A 622C                   EXTU.B      R2,R2
    0000288C 2F26                   MOV.L       R2,@-R15
    0000288E 2F26                   MOV.L       R2,@-R15
    00002890 72C9                   ADD         #-55,R2
    00002892 672C                   EXTU.B      R2,R7
    00002894 2F76                   MOV.L       R7,@-R15
    00002896 62EC                   EXTU.B      R14,R2
    00002898 2F26                   MOV.L       R2,@-R15
    0000289A 67DC                   EXTU.B      R13,R7
    0000289C E608                   MOV         #8,R6      ; H'00000008
    0000289E E507                   MOV         #7,R5      ; H'00000007
    000028A0 DD5E                   MOV.L       L1373+16,R13; _mbx_send
    000028A2 4D0B                   JSR         @R13
    000028A4 E405                   MOV         #5,R4      ; H'00000005
    000028A6 7F1C                   ADD         #28,R15
    000028A8 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       4251    
             tskcmd.c       4252      return( result );
             tskcmd.c       4253    }
    000028AA 006B                   RTS/N
             tskcmd.c       4254    /***********************************************************************
             tskcmd.c       4255    *
             tskcmd.c       4256    * [概要]  ＢＣで利用されるデバイス情報の取得
             tskcmd.c       4257    * [引数]  msg:メッセージＩＤ，mm:デバイス番号，*data:格納先
             tskcmd.c       4258    * [戻値]  −
             tskcmd.c       4259    * 
             tskcmd.c       4260    ***********************************************************************/
             tskcmd.c       4261    static void GetBCDevice( UB msg, UB mm, INT *data )
             tskcmd.c       4262    {
             tskcmd.c       4263      if( mm != NO_DATA )
             tskcmd.c       4264      {
             tskcmd.c       4265          BitSet_INT( mm, &data[0] );
             tskcmd.c       4266      }
             tskcmd.c       4267    }
             tskcmd.c       4268    
             tskcmd.c       4269    
             tskcmd.c       4270    //-------------------------------------------------------------------------------------------------------------------------
             tskcmd.c       4271    //        タッチパネル通信
             tskcmd.c       4272    //-------------------------------------------------------------------------------------------------------------------------
             tskcmd.c       4273    
             tskcmd.c       4274    /***********************************************************************
             tskcmd.c       4275    * 
             tskcmd.c       4276    * [概要]  コマンドの解析
             tskcmd.c       4277    * [引数]  data:コマンドリクエスト電文
             tskcmd.c       4278    * [戻値]  −
             tskcmd.c       4279    * 
             tskcmd.c       4280    ***********************************************************************/
             tskcmd.c       4281    void TpAnalyze( T_CMD_MSG* mrcv )
    000028AC              _TpAnalyze:                      ; function: TpAnalyze
                                                           ; frame size=12
    000028AC 4DF0                   MOVMU.L     R13,@-R15
             tskcmd.c       4282    {
             tskcmd.c       4283      UB bcid;
             tskcmd.c       4284      UB anum;
             tskcmd.c       4285      UB wkbcid;
             tskcmd.c       4286      UB procid;
             tskcmd.c       4287    
             tskcmd.c       4288      wkbcid = 0;
             tskcmd.c       4289      procid = mrcv->msgdata.prid1;
    000028AE 6D43                   MOV         R4,R13
    000028B0 34418018               MOVU.B      @(24,R4),R4; (mrcv)->prid1
             tskcmd.c       4290      
             tskcmd.c       4291      if( IsQgProcList( procid ) == FALSE )               // 重複なし
    000028B4 D35A                   MOV.L       L1373+20,R3; __$IsQgProcList
    000028B6 430B                   JSR         @R3
    000028B8 6E43                   MOV         R4,R14
    000028BA 2008                   TST         R0,R0
    000028BC 8B04                   BF          L466
             tskcmd.c       4292      {
             tskcmd.c       4293          mrcv->msgdata.bcid = GetQgProcList( procid ) ;  // コマンドリスト空きindex取得
    000028BE D359                   MOV.L       L1373+24,R3; __$GetQgProcList
    000028C0 430B                   JSR         @R3
    000028C2 64E3                   MOV         R14,R4
    000028C4 A001                   BRA         L467
    000028C6 6203                   MOV         R0,R2
    000028C8              L466:
             tskcmd.c       4294      }
             tskcmd.c       4295      else
             tskcmd.c       4296      {
             tskcmd.c       4297          mrcv->msgdata.bcid = NO_DATA;                   // 重複あり
    000028C8 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    000028CA              L467:
    000028CA 60E3                   MOV         R14,R0
             tskcmd.c       4298      }
             tskcmd.c       4299      
             tskcmd.c       4300      if( procid == ID_TPL_EXRUN )                        // 運転履歴受信
    000028CC 886B                   CMP/EQ      #107,R0
    000028CE 3D21001A               MOV.B       R2,@(26:12,R13); (mrcv)->bcid
    000028D2 8915                   BT          L468
    000028D4 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4301      {
             tskcmd.c       4302          
             tskcmd.c       4303          
             tskcmd.c       4304          
             tskcmd.c       4305      }
             tskcmd.c       4306      else
             tskcmd.c       4307      {
             tskcmd.c       4308          memset( &TpRecvData,    CLR,  sizeof( TpRecvData ) );
    000028D6 D454                   MOV.L       L1373+28,R4; __$TpRecvData
    000028D8 D14D                   MOV.L       L1373+4,R1 ; _memset
    000028DA 410B                   JSR         @R1
    000028DC E500                   MOV         #0,R5      ; H'00000000
    000028DE E664                   MOV         #100,R6    ; H'00000064
    000028E0 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4309          memset( &TpRecvArgs,    CLR,  sizeof( TpRecvArgs ) );
    000028E2 D452                   MOV.L       L1373+32,R4; __$TpRecvArgs
    000028E4 D74A                   MOV.L       L1373+4,R7 ; _memset
    000028E6 470B                   JSR         @R7
    000028E8 4608                   SHLL2       R6
             tskcmd.c       4310    
             tskcmd.c       4311          // コマンド電文コピー
             tskcmd.c       4312          memcpy( &TpRecvData[0],     &mrcv->msgdata.data[0],CMD_BUFSIZ );
    000028EA 65D3                   MOV         R13,R5
    000028EC 7524                   ADD         #36,R5
    000028EE D44E                   MOV.L       L1373+28,R4; __$TpRecvData
    000028F0 D149                   MOV.L       L1373+12,R1; _memcpy
    000028F2 410B                   JSR         @R1
    000028F4 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4313    
             tskcmd.c       4314          // 大文字
             tskcmd.c       4315    //    ToUpper( (char*)&TpRecvData );
             tskcmd.c       4316    
             tskcmd.c       4317          // 分解 ＆ パラメータ数取得
             tskcmd.c       4318          anum = SplitSpace( &TpRecvData[0], TpRecvArgs );
    000028F6 D54D                   MOV.L       L1373+32,R5; __$TpRecvArgs
    000028F8 D44B                   MOV.L       L1373+28,R4; __$TpRecvData
    000028FA D24D                   MOV.L       L1373+36,R2; _SplitSpace
    000028FC 424B                   JSR/N       @R2
    000028FE 6503                   MOV         R0,R5
    00002900              L468:
             tskcmd.c       4319      }
             tskcmd.c       4320    
             tskcmd.c       4321      // コールファンクション
             tskcmd.c       4322      (*TpFuncTbl[procid])( mrcv, anum, TpRecvArgs  );
    00002900 D24C                   MOV.L       L1373+40,R2; _TpFuncTbl
    00002902 4E08                   SHLL2       R14
    00002904 60E3                   MOV         R14,R0
    00002906 012E                   MOV.L       @(R0,R2),R1; TpFuncTbl[]
    00002908 D648                   MOV.L       L1373+32,R6; __$TpRecvArgs
    0000290A 64D3                   MOV         R13,R4
    0000290C 4DF4                   MOVMU.L     @R15+,R13
    0000290E 412B                   JMP         @R1
    00002910 0009                   NOP
             tskcmd.c       4323    }
             tskcmd.c       4324    
             tskcmd.c       4325    
             tskcmd.c       4326    /***********************************************************************
             tskcmd.c       4327    *     
             tskcmd.c       4328    * [概要]  
             tskcmd.c       4329    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4330    * [戻値]  −
             tskcmd.c       4331    *     
             tskcmd.c       4332    ***********************************************************************/
             tskcmd.c       4333    static void TplDummy( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002912              __$TplDummy:                     ; function: __$TplDummy
                                                           ; frame size=0
             tskcmd.c       4334    { 
             tskcmd.c       4335      
             tskcmd.c       4336    
             tskcmd.c       4337    
             tskcmd.c       4338    
             tskcmd.c       4339    
             tskcmd.c       4340    
             tskcmd.c       4341    
             tskcmd.c       4342    
             tskcmd.c       4343    
             tskcmd.c       4344    }
    00002912 006B                   RTS/N
             tskcmd.c       4345    
             tskcmd.c       4346    /***********************************************************************
             tskcmd.c       4347    *     
             tskcmd.c       4348    * [概要]  01 FWバージョン情報
             tskcmd.c       4349    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4350    * [戻値]  −
             tskcmd.c       4351    *     
             tskcmd.c       4352    ***********************************************************************/
             tskcmd.c       4353    static void TplFwver( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002914              __$TplFwver:                     ; function: __$TplFwver
                                                           ; frame size=32
    00002914 4EF0                   MOVMU.L     R14,@-R15
    00002916 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4354    { 
             tskcmd.c       4355      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    00002918 6E43                   MOV         R4,R14
    0000291A D43C                   MOV.L       L1373,R4   ; __$bufwk
    0000291C D13C                   MOV.L       L1373+4,R1 ; _memset
    0000291E 410B                   JSR         @R1
    00002920 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4356    
             tskcmd.c       4357      mrcv->msgdata.inf2 = (EEPROM_SPED_PTRN+EEPROM_POSI_INFO);
    00002922 E606                   MOV         #6,R6      ; H'00000006
             tskcmd.c       4358    
             tskcmd.c       4359      // EEPROM データ取得指示
             tskcmd.c       4360      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4361                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4362                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4363                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4364                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4365                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4366                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4367                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4368                   &bufwk[0],          // data
             tskcmd.c       4369                   CMD_BUFSIZ          // siz
             tskcmd.c       4370                 );
    00002924 E13C                   MOV         #60,R1     ; H'0000003C
    00002926 3E61001D               MOV.B       R6,@(29:12,R14); (mrcv)->inf2
    0000292A 2F16                   MOV.L       R1,@-R15
    0000292C D137                   MOV.L       L1373,R1   ; __$bufwk
    0000292E 2F16                   MOV.L       R1,@-R15
    00002930 2F66                   MOV.L       R6,@-R15
    00002932 34E1801C               MOVU.B      @(28,R14),R4; (mrcv)->inf
    00002936 2F46                   MOV.L       R4,@-R15
    00002938 E716                   MOV         #22,R7     ; H'00000016
    0000293A 2F76                   MOV.L       R7,@-R15
    0000293C 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    00002940 2F26                   MOV.L       R2,@-R15
    00002942 E505                   MOV         #5,R5      ; H'00000005
    00002944 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    00002948 DE34                   MOV.L       L1373+16,R14; _mbx_send
    0000294A 4E0B                   JSR         @R14
    0000294C 6453                   MOV         R5,R4
    0000294E 7F18                   ADD         #24,R15
    00002950 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4371    
             tskcmd.c       4372    }
    00002952 006B                   RTS/N
             tskcmd.c       4373    
             tskcmd.c       4374    /***********************************************************************
             tskcmd.c       4375    *     
             tskcmd.c       4376    * [概要]  02 オプション情報
             tskcmd.c       4377    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4378    * [戻値]  −
             tskcmd.c       4379    *     
             tskcmd.c       4380    
             tskcmd.c       4381      // 固定値
             tskcmd.c       4382      tp.rsp.buf[8] = '0';
             tskcmd.c       4383    ***********************************************************************/
             tskcmd.c       4384    static void TplOptif( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002954              __$TplOptif:                     ; function: __$TplOptif
                                                           ; frame size=32
    00002954 4EF0                   MOVMU.L     R14,@-R15
    00002956 E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4385    { 
             tskcmd.c       4386      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    00002958 6E43                   MOV         R4,R14
    0000295A D42C                   MOV.L       L1373,R4   ; __$bufwk
    0000295C D12C                   MOV.L       L1373+4,R1 ; _memset
    0000295E 410B                   JSR         @R1
    00002960 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4387    
             tskcmd.c       4388      mrcv->msgdata.inf2 = CLR;
    00002962 E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       4389    
             tskcmd.c       4390      // EEPROM データ取得指示
             tskcmd.c       4391      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4392                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4393                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4394                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4395                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4396                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4397                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4398                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4399                   &bufwk[0],          // data
             tskcmd.c       4400                   CMD_BUFSIZ          // siz
             tskcmd.c       4401                 );
    00002964 E13C                   MOV         #60,R1     ; H'0000003C
    00002966 3E21001D               MOV.B       R2,@(29:12,R14); (mrcv)->inf2
    0000296A 2F16                   MOV.L       R1,@-R15
    0000296C D127                   MOV.L       L1373,R1   ; __$bufwk
    0000296E 2F16                   MOV.L       R1,@-R15
    00002970 2F26                   MOV.L       R2,@-R15
    00002972 34E1801C               MOVU.B      @(28,R14),R4; (mrcv)->inf
    00002976 2F46                   MOV.L       R4,@-R15
    00002978 E716                   MOV         #22,R7     ; H'00000016
    0000297A 2F76                   MOV.L       R7,@-R15
    0000297C 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    00002980 2F26                   MOV.L       R2,@-R15
    00002982 E606                   MOV         #6,R6      ; H'00000006
    00002984 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    00002988 E505                   MOV         #5,R5      ; H'00000005
    0000298A DE24                   MOV.L       L1373+16,R14; _mbx_send
    0000298C 4E0B                   JSR         @R14
    0000298E 6453                   MOV         R5,R4
    00002990 7F18                   ADD         #24,R15
    00002992 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4402    }
    00002994 006B                   RTS/N
             tskcmd.c       4403    
             tskcmd.c       4404    /***********************************************************************
             tskcmd.c       4405    *     
             tskcmd.c       4406    * [概要]  03 ログイン認証1
             tskcmd.c       4407    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4408    * [戻値]  −
             tskcmd.c       4409    *     
             tskcmd.c       4410    ***********************************************************************/
             tskcmd.c       4411    static void TplLgin1( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002996              __$TplLgin1:                     ; function: __$TplLgin1
                                                           ; frame size=44
    00002996 4EF0                   MOVMU.L     R14,@-R15
    00002998 7FF4                   ADD         #-12,R15
    0000299A E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4412    { 
             tskcmd.c       4413      ST_USERINFO Userwk;
             tskcmd.c       4414    
             tskcmd.c       4415      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    0000299C 6E43                   MOV         R4,R14
    0000299E D41B                   MOV.L       L1373,R4   ; __$bufwk
    000029A0 D11B                   MOV.L       L1373+4,R1 ; _memset
    000029A2 410B                   JSR         @R1
    000029A4 E500                   MOV         #0,R5      ; H'00000000
    000029A6 E60C                   MOV         #12,R6     ; H'0000000C
    000029A8 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4416      memset( &Userwk.Id[0], CLR,  sizeof(ST_USERINFO) );
    000029AA D719                   MOV.L       L1373+4,R7 ; _memset
    000029AC 470B                   JSR         @R7
    000029AE 64F3                   MOV         R15,R4
             tskcmd.c       4417    
             tskcmd.c       4418      Strcpy( (char*)&Userwk.Id[0] , TpRecvArgs[1]  );
    000029B0 D121                   MOV.L       L1373+44,R1; H'00000004+__$TpRecvArgs
    000029B2 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    000029B4 D121                   MOV.L       L1373+48,R1; _Strcpy
    000029B6 410B                   JSR         @R1
    000029B8 64F3                   MOV         R15,R4
             tskcmd.c       4419      Strcpy( (char*)&Userwk.Pw[0] , TpRecvArgs[2]  );
    000029BA D221                   MOV.L       L1373+52,R2; H'00000008+__$TpRecvArgs
    000029BC 6522                   MOV.L       @R2,R5     ; TpRecvArgs[]
    000029BE 64F3                   MOV         R15,R4
    000029C0 D61E                   MOV.L       L1373+48,R6; _Strcpy
    000029C2 460B                   JSR         @R6
    000029C4 7408                   ADD         #8,R4
    000029C6 E60C                   MOV         #12,R6     ; H'0000000C
             tskcmd.c       4420    
             tskcmd.c       4421      memcpy( &bufwk[0], &Userwk.Id[0], sizeof(ST_USERINFO) );
    000029C8 D410                   MOV.L       L1373,R4   ; __$bufwk
    000029CA D713                   MOV.L       L1373+12,R7; _memcpy
    000029CC 470B                   JSR         @R7
    000029CE 65F3                   MOV         R15,R5
             tskcmd.c       4422      SetUserInfoSorce( (ST_USERINFO *) &Userwk.Id[0] );
    000029D0 D31C                   MOV.L       L1373+56,R3; __$SetUserInfoSorce
    000029D2 430B                   JSR         @R3
    000029D4 64F3                   MOV         R15,R4
             tskcmd.c       4423    
             tskcmd.c       4424      mrcv->msgdata.inf2 = CLR;
    000029D6 E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       4425    
             tskcmd.c       4426      // EEPROM データ取得指示
             tskcmd.c       4427      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4428                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4429                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4430                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4431                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4432                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4433                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4434                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4435                   &Userwk.Id[0],      // data
             tskcmd.c       4436                   sizeof(ST_USERINFO) // siz
             tskcmd.c       4437                 );
    000029D8 E10C                   MOV         #12,R1     ; H'0000000C
    000029DA 3E21001D               MOV.B       R2,@(29:12,R14); (mrcv)->inf2
    000029DE 2F16                   MOV.L       R1,@-R15
    000029E0 67F3                   MOV         R15,R7
    000029E2 7704                   ADD         #4,R7
    000029E4 2F76                   MOV.L       R7,@-R15
    000029E6 2F26                   MOV.L       R2,@-R15
    000029E8 31E1801C               MOVU.B      @(28,R14),R1; (mrcv)->inf
    000029EC 2F16                   MOV.L       R1,@-R15
    000029EE E216                   MOV         #22,R2     ; H'00000016
    000029F0 2F26                   MOV.L       R2,@-R15
    000029F2 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    000029F6 2F26                   MOV.L       R2,@-R15
    000029F8 E606                   MOV         #6,R6      ; H'00000006
    000029FA 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    000029FE E505                   MOV         #5,R5      ; H'00000005
    00002A00 DE06                   MOV.L       L1373+16,R14; _mbx_send
    00002A02 4E0B                   JSR         @R14
    00002A04 6453                   MOV         R5,R4
    00002A06 7F24                   ADD         #36,R15
    00002A08 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4438    }
    00002A0A 006B                   RTS/N
    00002A0C              L1373:
    00002A0C <00000000>             .DATA.L     __$bufwk
    00002A10 <00000000>             .DATA.L     _memset
    00002A14 <00000001>             .DATA.L     H'00000001+__$power
    00002A18 <00000000>             .DATA.L     _memcpy
    00002A1C <00000000>             .DATA.L     _mbx_send
    00002A20 <00000000>             .DATA.L     __$IsQgProcList
    00002A24 <00000000>             .DATA.L     __$GetQgProcList
    00002A28 <00000000>             .DATA.L     __$TpRecvData
    00002A2C <00000000>             .DATA.L     __$TpRecvArgs
    00002A30 <00000000>             .DATA.L     _SplitSpace
    00002A34 <00000000>             .DATA.L     _TpFuncTbl
    00002A38 <00000004>             .DATA.L     H'00000004+__$TpRecvArgs
    00002A3C <00000000>             .DATA.L     _Strcpy
    00002A40 <00000008>             .DATA.L     H'00000008+__$TpRecvArgs
    00002A44 <00000000>             .DATA.L     __$SetUserInfoSorce
             tskcmd.c       4439    
             tskcmd.c       4440    /***********************************************************************
             tskcmd.c       4441    *     
             tskcmd.c       4442    * [概要]  04 ログイン認証2
             tskcmd.c       4443    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4444    * [戻値]  −
             tskcmd.c       4445    *     
             tskcmd.c       4446    ***********************************************************************/
             tskcmd.c       4447    static void TplLgin2( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002A48              __$TplLgin2:                     ; function: __$TplLgin2
                                                           ; frame size=48
    00002A48 4DF0                   MOVMU.L     R13,@-R15
    00002A4A 7FF4                   ADD         #-12,R15
    00002A4C DD91                   MOV.L       L1374+2,R13; __$bufwk
    00002A4E E63C                   MOV         #60,R6     ; H'0000003C
    00002A50 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4448    { 
             tskcmd.c       4449      ST_USERINFO Userwk;
             tskcmd.c       4450    
             tskcmd.c       4451      memset( &bufwk[0],     CLR,  CMD_BUFSIZ );
    00002A52 6E43                   MOV         R4,R14
    00002A54 D190                   MOV.L       L1374+6,R1 ; _memset
    00002A56 410B                   JSR         @R1
    00002A58 64D3                   MOV         R13,R4
    00002A5A E60C                   MOV         #12,R6     ; H'0000000C
    00002A5C E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4452      memset( &Userwk.Id[0], CLR,  sizeof(ST_USERINFO) );
    00002A5E D78E                   MOV.L       L1374+6,R7 ; _memset
    00002A60 470B                   JSR         @R7
    00002A62 64F3                   MOV         R15,R4
             tskcmd.c       4453    
             tskcmd.c       4454      Strcpy( (char*)&Userwk.Id[0] , TpRecvArgs[1]  );
    00002A64 D18D                   MOV.L       L1374+10,R1; H'00000004+__$TpRecvArgs
    00002A66 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002A68 D18D                   MOV.L       L1374+14,R1; _Strcpy
    00002A6A 410B                   JSR         @R1
    00002A6C 64F3                   MOV         R15,R4
             tskcmd.c       4455      Strcpy( (char*)&Userwk.Pw[0] , TpRecvArgs[2]  );
    00002A6E D28D                   MOV.L       L1374+18,R2; H'00000008+__$TpRecvArgs
    00002A70 6522                   MOV.L       @R2,R5     ; TpRecvArgs[]
    00002A72 64F3                   MOV         R15,R4
    00002A74 D78A                   MOV.L       L1374+14,R7; _Strcpy
    00002A76 470B                   JSR         @R7
    00002A78 7408                   ADD         #8,R4
    00002A7A E60C                   MOV         #12,R6     ; H'0000000C
             tskcmd.c       4456    
             tskcmd.c       4457      memcpy( &bufwk[0], &Userwk.Id[0], sizeof(ST_USERINFO) );
    00002A7C 65F3                   MOV         R15,R5
    00002A7E D18A                   MOV.L       L1374+22,R1; _memcpy
    00002A80 410B                   JSR         @R1
    00002A82 64D3                   MOV         R13,R4
             tskcmd.c       4458    
             tskcmd.c       4459      mrcv->msgdata.inf2 = CLR;
    00002A84 E100                   MOV         #0,R1      ; H'00000000
             tskcmd.c       4460    
             tskcmd.c       4461      mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       4462                   ID_MPF_EEP,         // mpfid
             tskcmd.c       4463                   ID_MBX_EEP,         // mbxid
             tskcmd.c       4464                   mrcv->msgdata.prid1,// prid1
             tskcmd.c       4465                   mrcv->msgdata.bcid, // bcid
             tskcmd.c       4466                   ID_MSG_EEPREAD,     // msgid
             tskcmd.c       4467                   mrcv->msgdata.inf,  // sts
             tskcmd.c       4468                   mrcv->msgdata.inf2, // sts2
             tskcmd.c       4469                   &bufwk[0],          // data
             tskcmd.c       4470                   CMD_BUFSIZ          // siz
             tskcmd.c       4471                 );
    00002A86 E73C                   MOV         #60,R7     ; H'0000003C
    00002A88 3E11001D               MOV.B       R1,@(29:12,R14); (mrcv)->inf2
    00002A8C 2F76                   MOV.L       R7,@-R15
    00002A8E 2FD6                   MOV.L       R13,@-R15
    00002A90 2F16                   MOV.L       R1,@-R15
    00002A92 3DE1801C               MOVU.B      @(28,R14),R13; (mrcv)->inf
    00002A96 2FD6                   MOV.L       R13,@-R15
    00002A98 ED16                   MOV         #22,R13    ; H'00000016
    00002A9A 2FD6                   MOV.L       R13,@-R15
    00002A9C 32E1801A               MOVU.B      @(26,R14),R2; (mrcv)->bcid
    00002AA0 2F26                   MOV.L       R2,@-R15
    00002AA2 E606                   MOV         #6,R6      ; H'00000006
    00002AA4 37E14018               MOV.B       @(24:12,R14),R7; (mrcv)->prid1
    00002AA8 E505                   MOV         #5,R5      ; H'00000005
    00002AAA DE80                   MOV.L       L1374+26,R14; _mbx_send
    00002AAC 4E0B                   JSR         @R14
    00002AAE 6453                   MOV         R5,R4
    00002AB0 7F24                   ADD         #36,R15
    00002AB2 4DF4                   MOVMU.L     @R15+,R13
             tskcmd.c       4472    }
    00002AB4 006B                   RTS/N
             tskcmd.c       4473    
             tskcmd.c       4474    /***********************************************************************
             tskcmd.c       4475    *     
             tskcmd.c       4476    * [概要]  05 初期化指示
             tskcmd.c       4477    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4478    * [戻値]  −
             tskcmd.c       4479    *     
             tskcmd.c       4480    ***********************************************************************/
             tskcmd.c       4481    static void TplInita( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002AB6              __$TplInita:                     ; function: __$TplInita
                                                           ; frame size=24
    00002AB6 4EF0                   MOVMU.L     R14,@-R15
    00002AB8 7FFC                   ADD         #-4,R15
    00002ABA E63C                   MOV         #60,R6     ; H'0000003C
             tskcmd.c       4482    { 
             tskcmd.c       4483      UB  bcid;
             tskcmd.c       4484      UB  inf;
             tskcmd.c       4485      UB  axsis;
             tskcmd.c       4486    
             tskcmd.c       4487      memset( &bufwk[0], CLR,  CMD_BUFSIZ );
    00002ABC 6E43                   MOV         R4,R14
    00002ABE D475                   MOV.L       L1374+2,R4 ; __$bufwk
    00002AC0 D175                   MOV.L       L1374+6,R1 ; _memset
    00002AC2 410B                   JSR         @R1
    00002AC4 E500                   MOV         #0,R5      ; H'00000000
    00002AC6 E601                   MOV         #1,R6      ; H'00000001
    00002AC8 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       4488      memset( &axsis   , CLR,  sizeof(axsis) );
    00002ACA D773                   MOV.L       L1374+6,R7 ; _memset
    00002ACC 470B                   JSR         @R7
    00002ACE 64F3                   MOV         R15,R4
             tskcmd.c       4489    
             tskcmd.c       4490      Strcpy( (char*)&axsis , TpRecvArgs[1]  );
    00002AD0 D172                   MOV.L       L1374+10,R1; H'00000004+__$TpRecvArgs
    00002AD2 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002AD4 D772                   MOV.L       L1374+14,R7; _Strcpy
    00002AD6 470B                   JSR         @R7
    00002AD8 64F3                   MOV         R15,R4
             tskcmd.c       4491      axsis = AsctoHex(axsis);
    00002ADA D275                   MOV.L       L1374+30,R2; _AsctoHex
    00002ADC 420B                   JSR         @R2
    00002ADE 64F0                   MOV.B       @R15,R4    ; axsis
    00002AE0 610C                   EXTU.B      R0,R1
    00002AE2 604C                   EXTU.B      R4,R0
    00002AE4 2F10                   MOV.B       R1,@R15    ; axsis
             tskcmd.c       4492      bcctrl[bcid].inf = axsis;
    00002AE6 D673                   MOV.L       L1374+34,R6; __$bcctrl
    00002AE8 4008                   SHLL2       R0
    00002AEA 4000                   SHLL        R0
    00002AEC 6263                   MOV         R6,R2
    00002AEE 7204                   ADD         #4,R2
    00002AF0 0214                   MOV.B       R1,@(R0,R2); bcctrl[].inf
             tskcmd.c       4493      
             tskcmd.c       4494      bcid = mrcv->msgdata.bcid;
             tskcmd.c       4495      if( bcid == NO_DATA )
    00002AF2 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00002AF4 34E1801A               MOVU.B      @(26,R14),R4; (mrcv)->bcid
    00002AF8 622C                   EXTU.B      R2,R2
    00002AFA 3420                   CMP/EQ      R2,R4
    00002AFC 8B02                   BF          L477
             tskcmd.c       4496      {
             tskcmd.c       4497          TpRspINITA( E_BUSY );
    00002AFE E401                   MOV         #1,R4      ; H'00000001
    00002B00 A004                   BRA         L478
    00002B02 4418                   SHLL8       R4
    00002B04              L477:
             tskcmd.c       4498          return;
             tskcmd.c       4499      }
             tskcmd.c       4500    
             tskcmd.c       4501      
             tskcmd.c       4502      if( axsis == 0 )
    00002B04 2118                   TST         R1,R1
    00002B06 8B05                   BF          L480
             tskcmd.c       4503      {
             tskcmd.c       4504          TpRspINITA( E_PAR_OUTRNG );
    00002B08 E408                   MOV         #8,R4      ; H'00000008
    00002B0A 4418                   SHLL8       R4
    00002B0C              L478:
    00002B0C B29C                   BSR         __$TpRspINITA
    00002B0E 0009                   NOP
    00002B10 A02A                   BRA         L481
    00002B12 0009                   NOP
    00002B14              L480:
             tskcmd.c       4505          return;
             tskcmd.c       4506      }
             tskcmd.c       4507      
             tskcmd.c       4508    //axsis =0x1f;// ★デバック
             tskcmd.c       4509      
             tskcmd.c       4510      
             tskcmd.c       4511      if( (axsis & BIT1) )        bcctrl[bcid].devno = MT_Z0;
    00002B14 6543                   MOV         R4,R5
    00002B16 4508                   SHLL2       R5
    00002B18 4500                   SHLL        R5
    00002B1A 8719                   BLD         #1,R1
    00002B1C 8F03                   BF/S        L483
    00002B1E 356C                   ADD         R6,R5
    00002B20 E002                   MOV         #2,R0      ; H'00000002
    00002B22 A013                   BRA         L484
    00002B24 8051                   MOV.B       R0,@(1,R5) ; bcctrl[].devno
    00002B26              L483:
             tskcmd.c       4512      else if( (axsis & BIT2) )   bcctrl[bcid].devno = MT_P0;
    00002B26 871A                   BLD         #2,R1
    00002B28 8B02                   BF          L486
    00002B2A E003                   MOV         #3,R0      ; H'00000003
    00002B2C A00E                   BRA         L484
    00002B2E 8051                   MOV.B       R0,@(1,R5) ; bcctrl[].devno
    00002B30              L486:
             tskcmd.c       4513      else if( (axsis & BIT0) )   bcctrl[bcid].devno = MT_Y0;
    00002B30 8718                   BLD         #0,R1
    00002B32 8B02                   BF          L488
    00002B34 E001                   MOV         #1,R0      ; H'00000001
    00002B36 A009                   BRA         L484
    00002B38 8051                   MOV.B       R0,@(1,R5) ; bcctrl[].devno
    00002B3A              L488:
             tskcmd.c       4514      else if( (axsis & BIT4) )   bcctrl[bcid].devno = MT_Y1;
    00002B3A 871C                   BLD         #4,R1
    00002B3C 8B02                   BF          L490
    00002B3E E005                   MOV         #5,R0      ; H'00000005
    00002B40 A004                   BRA         L484
    00002B42 8051                   MOV.B       R0,@(1,R5) ; bcctrl[].devno
    00002B44              L490:
             tskcmd.c       4515      else if( (axsis & BIT3) )   bcctrl[bcid].devno = MT_F0;
    00002B44 871B                   BLD         #3,R1
    00002B46 8B01                   BF          L484
    00002B48 E004                   MOV         #4,R0      ; H'00000004
    00002B4A 8051                   MOV.B       R0,@(1,R5) ; bcctrl[].devno
    00002B4C              L484:
             tskcmd.c       4516    
             tskcmd.c       4517      StaQgProcList( bcid,               // bcid
             tskcmd.c       4518                     ID_MSG_LIMIT,       // msgid
             tskcmd.c       4519                     bcctrl[bcid].devno, // devno
             tskcmd.c       4520                     1,                  // actstp
             tskcmd.c       4521                     ID_TPL_INITA,       // prid1
             tskcmd.c       4522                     axsis,              // inf
             tskcmd.c       4523                     mrcv->msgdata.inf2  // inf2
             tskcmd.c       4524      );
    00002B4C 36E1801D               MOVU.B      @(29,R14),R6; (mrcv)->inf2
    00002B50 2F66                   MOV.L       R6,@-R15
    00002B52 2F16                   MOV.L       R1,@-R15
    00002B54 E205                   MOV         #5,R2      ; H'00000005
    00002B56 2F26                   MOV.L       R2,@-R15
    00002B58 E701                   MOV         #1,R7      ; H'00000001
    00002B5A 8451                   MOV.B       @(1,R5),R0 ; bcctrl[].devno
    00002B5C E50C                   MOV         #12,R5     ; H'0000000C
    00002B5E B6A7                   BSR         __$StaQgProcList
    00002B60 6603                   MOV         R0,R6
    00002B62 7F0C                   ADD         #12,R15
             tskcmd.c       4525      
             tskcmd.c       4526      QgProcList_INITA( mrcv );
    00002B64 B4BB                   BSR         __$QgProcList_INITA
    00002B66 64E3                   MOV         R14,R4
    00002B68              L481:
    00002B68 7F04                   ADD         #4,R15
    00002B6A 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       4527    }
    00002B6C 006B                   RTS/N
             tskcmd.c       4528    /***********************************************************************
             tskcmd.c       4529    *     
             tskcmd.c       4530    * [概要]  08 ユーザー情報全取得
             tskcmd.c       4531    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4532    * [戻値]  −
             tskcmd.c       4533    *     
             tskcmd.c       4534    ***********************************************************************/
             tskcmd.c       4535    static void TplUsral( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B6E              __$TplUsral:                     ; function: __$TplUsral
                                                           ; frame size=0
             tskcmd.c       4536    { 
             tskcmd.c       4537      
             tskcmd.c       4538    } 
    00002B6E 006B                   RTS/N
             tskcmd.c       4539    
             tskcmd.c       4540    /***********************************************************************
             tskcmd.c       4541    *     
             tskcmd.c       4542    * [概要]  11 ユーザー1情報
             tskcmd.c       4543    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4544    * [戻値]  −
             tskcmd.c       4545    *     
             tskcmd.c       4546    ***********************************************************************/
             tskcmd.c       4547    static void TplInf01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B70              __$TplInf01:                     ; function: __$TplInf01
                                                           ; frame size=0
             tskcmd.c       4548    { 
             tskcmd.c       4549      
             tskcmd.c       4550    } 
    00002B70 006B                   RTS/N
             tskcmd.c       4551      
             tskcmd.c       4552    /***********************************************************************
             tskcmd.c       4553    *     
             tskcmd.c       4554    * [概要]  12 ユーザー2情報
             tskcmd.c       4555    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4556    * [戻値]  −
             tskcmd.c       4557    *     
             tskcmd.c       4558    ***********************************************************************/
             tskcmd.c       4559    static void TplInf02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B72              __$TplInf02:                     ; function: __$TplInf02
                                                           ; frame size=0
             tskcmd.c       4560    { 
             tskcmd.c       4561      
             tskcmd.c       4562    } 
    00002B72 006B                   RTS/N
             tskcmd.c       4563      
             tskcmd.c       4564    /***********************************************************************
             tskcmd.c       4565    *     
             tskcmd.c       4566    * [概要]  13 ユーザー3情報
             tskcmd.c       4567    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4568    * [戻値]  −
             tskcmd.c       4569    *     
             tskcmd.c       4570    ***********************************************************************/
             tskcmd.c       4571    static void TplInf03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B74              __$TplInf03:                     ; function: __$TplInf03
                                                           ; frame size=0
             tskcmd.c       4572    { 
             tskcmd.c       4573      
             tskcmd.c       4574    } 
    00002B74 006B                   RTS/N
             tskcmd.c       4575      
             tskcmd.c       4576    /***********************************************************************
             tskcmd.c       4577    *     
             tskcmd.c       4578    * [概要]   14 ユーザー4情報
             tskcmd.c       4579    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4580    * [戻値]  −
             tskcmd.c       4581    *     
             tskcmd.c       4582    ***********************************************************************/
             tskcmd.c       4583    static void TplInf04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B76              __$TplInf04:                     ; function: __$TplInf04
                                                           ; frame size=0
             tskcmd.c       4584    { 
             tskcmd.c       4585      
             tskcmd.c       4586    } 
    00002B76 006B                   RTS/N
             tskcmd.c       4587      
             tskcmd.c       4588    /***********************************************************************
             tskcmd.c       4589    *     
             tskcmd.c       4590    * [概要]  15 ユーザー5情報
             tskcmd.c       4591    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4592    * [戻値]  −
             tskcmd.c       4593    *     
             tskcmd.c       4594    ***********************************************************************/
             tskcmd.c       4595    static void TplInf05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B78              __$TplInf05:                     ; function: __$TplInf05
                                                           ; frame size=0
             tskcmd.c       4596    { 
             tskcmd.c       4597      
             tskcmd.c       4598    } 
    00002B78 006B                   RTS/N
             tskcmd.c       4599      
             tskcmd.c       4600    /***********************************************************************
             tskcmd.c       4601    *     
             tskcmd.c       4602    * [概要]  16 ユーザー6情報
             tskcmd.c       4603    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4604    * [戻値]  −
             tskcmd.c       4605    *     
             tskcmd.c       4606    ***********************************************************************/
             tskcmd.c       4607    static void TplInf06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B7A              __$TplInf06:                     ; function: __$TplInf06
                                                           ; frame size=0
             tskcmd.c       4608    { 
             tskcmd.c       4609      
             tskcmd.c       4610    } 
    00002B7A 006B                   RTS/N
             tskcmd.c       4611      
             tskcmd.c       4612    /***********************************************************************
             tskcmd.c       4613    *     
             tskcmd.c       4614    * [概要]  17 ユーザー7情報
             tskcmd.c       4615    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4616    * [戻値]  −
             tskcmd.c       4617    *     
             tskcmd.c       4618    ***********************************************************************/
             tskcmd.c       4619    static void TplInf07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B7C              __$TplInf07:                     ; function: __$TplInf07
                                                           ; frame size=0
             tskcmd.c       4620    { 
             tskcmd.c       4621      
             tskcmd.c       4622    } 
    00002B7C 006B                   RTS/N
             tskcmd.c       4623      
             tskcmd.c       4624    /***********************************************************************
             tskcmd.c       4625    *     
             tskcmd.c       4626    * [概要]  18 ユーザー8情報
             tskcmd.c       4627    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4628    * [戻値]  −
             tskcmd.c       4629    *     
             tskcmd.c       4630    ***********************************************************************/
             tskcmd.c       4631    static void TplInf08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B7E              __$TplInf08:                     ; function: __$TplInf08
                                                           ; frame size=0
             tskcmd.c       4632    { 
             tskcmd.c       4633      
             tskcmd.c       4634    } 
    00002B7E 006B                   RTS/N
             tskcmd.c       4635      
             tskcmd.c       4636    /***********************************************************************
             tskcmd.c       4637    *     
             tskcmd.c       4638    * [概要]  19 ユーザー9情報
             tskcmd.c       4639    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4640    * [戻値]  −
             tskcmd.c       4641    *     
             tskcmd.c       4642    ***********************************************************************/
             tskcmd.c       4643    static void TplInf09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B80              __$TplInf09:                     ; function: __$TplInf09
                                                           ; frame size=0
             tskcmd.c       4644    { 
             tskcmd.c       4645      
             tskcmd.c       4646    } 
    00002B80 006B                   RTS/N
             tskcmd.c       4647      
             tskcmd.c       4648    /***********************************************************************
             tskcmd.c       4649    *     
             tskcmd.c       4650    * [概要]  1A ユーザー10情報
             tskcmd.c       4651    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4652    * [戻値]  −
             tskcmd.c       4653    *     
             tskcmd.c       4654    ***********************************************************************/
             tskcmd.c       4655    static void TplInf10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B82              __$TplInf10:                     ; function: __$TplInf10
                                                           ; frame size=0
             tskcmd.c       4656    { 
             tskcmd.c       4657      
             tskcmd.c       4658    } 
    00002B82 006B                   RTS/N
             tskcmd.c       4659      
             tskcmd.c       4660    /***********************************************************************
             tskcmd.c       4661    *     
             tskcmd.c       4662    * [概要]  21 ユーザー1登録
             tskcmd.c       4663    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4664    * [戻値]  −
             tskcmd.c       4665    *     
             tskcmd.c       4666    ***********************************************************************/
             tskcmd.c       4667    static void TplRec01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B84              __$TplRec01:                     ; function: __$TplRec01
                                                           ; frame size=0
             tskcmd.c       4668    { 
             tskcmd.c       4669      
             tskcmd.c       4670    } 
    00002B84 006B                   RTS/N
             tskcmd.c       4671      
             tskcmd.c       4672    /***********************************************************************
             tskcmd.c       4673    *     
             tskcmd.c       4674    * [概要]  22 ユーザー2登録
             tskcmd.c       4675    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4676    * [戻値]  −
             tskcmd.c       4677    *     
             tskcmd.c       4678    ***********************************************************************/
             tskcmd.c       4679    static void TplRec02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B86              __$TplRec02:                     ; function: __$TplRec02
                                                           ; frame size=0
             tskcmd.c       4680    { 
             tskcmd.c       4681      
             tskcmd.c       4682    } 
    00002B86 006B                   RTS/N
             tskcmd.c       4683      
             tskcmd.c       4684    /***********************************************************************
             tskcmd.c       4685    *     
             tskcmd.c       4686    * [概要]  23 ユーザー3登録
             tskcmd.c       4687    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4688    * [戻値]  −
             tskcmd.c       4689    *     
             tskcmd.c       4690    ***********************************************************************/
             tskcmd.c       4691    static void TplRec03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B88              __$TplRec03:                     ; function: __$TplRec03
                                                           ; frame size=0
             tskcmd.c       4692    { 
             tskcmd.c       4693      
             tskcmd.c       4694    } 
    00002B88 006B                   RTS/N
             tskcmd.c       4695      
             tskcmd.c       4696    /***********************************************************************
             tskcmd.c       4697    *     
             tskcmd.c       4698    * [概要]  24 ユーザー4登録
             tskcmd.c       4699    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4700    * [戻値]  −
             tskcmd.c       4701    *     
             tskcmd.c       4702    ***********************************************************************/
             tskcmd.c       4703    static void TplRec04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B8A              __$TplRec04:                     ; function: __$TplRec04
                                                           ; frame size=0
             tskcmd.c       4704    { 
             tskcmd.c       4705      
             tskcmd.c       4706    } 
    00002B8A 006B                   RTS/N
             tskcmd.c       4707      
             tskcmd.c       4708    /***********************************************************************
             tskcmd.c       4709    *     
             tskcmd.c       4710    * [概要]  25 ユーザー5登録
             tskcmd.c       4711    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4712    * [戻値]  −
             tskcmd.c       4713    *     
             tskcmd.c       4714    ***********************************************************************/
             tskcmd.c       4715    static void TplRec05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B8C              __$TplRec05:                     ; function: __$TplRec05
                                                           ; frame size=0
             tskcmd.c       4716    { 
             tskcmd.c       4717      
             tskcmd.c       4718    } 
    00002B8C 006B                   RTS/N
             tskcmd.c       4719      
             tskcmd.c       4720    /***********************************************************************
             tskcmd.c       4721    *     
             tskcmd.c       4722    * [概要]  26 ユーザー6登録
             tskcmd.c       4723    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4724    * [戻値]  −
             tskcmd.c       4725    *     
             tskcmd.c       4726    ***********************************************************************/
             tskcmd.c       4727    static void TplRec06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B8E              __$TplRec06:                     ; function: __$TplRec06
                                                           ; frame size=0
             tskcmd.c       4728    { 
             tskcmd.c       4729      
             tskcmd.c       4730    } 
    00002B8E 006B                   RTS/N
             tskcmd.c       4731      
             tskcmd.c       4732    /***********************************************************************
             tskcmd.c       4733    *     
             tskcmd.c       4734    * [概要]  27 ユーザー7登録
             tskcmd.c       4735    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4736    * [戻値]  −
             tskcmd.c       4737    *     
             tskcmd.c       4738    ***********************************************************************/
             tskcmd.c       4739    static void TplRec07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B90              __$TplRec07:                     ; function: __$TplRec07
                                                           ; frame size=0
             tskcmd.c       4740    { 
             tskcmd.c       4741      
             tskcmd.c       4742    } 
    00002B90 006B                   RTS/N
             tskcmd.c       4743      
             tskcmd.c       4744    /***********************************************************************
             tskcmd.c       4745    *     
             tskcmd.c       4746    * [概要]  28 ユーザー8登録
             tskcmd.c       4747    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4748    * [戻値]  −
             tskcmd.c       4749    *     
             tskcmd.c       4750    ***********************************************************************/
             tskcmd.c       4751    static void TplRec08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B92              __$TplRec08:                     ; function: __$TplRec08
                                                           ; frame size=0
             tskcmd.c       4752    { 
             tskcmd.c       4753      
             tskcmd.c       4754    } 
    00002B92 006B                   RTS/N
             tskcmd.c       4755      
             tskcmd.c       4756    /***********************************************************************
             tskcmd.c       4757    *     
             tskcmd.c       4758    * [概要]  29 ユーザー9登録
             tskcmd.c       4759    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4760    * [戻値]  −
             tskcmd.c       4761    *     
             tskcmd.c       4762    ***********************************************************************/
             tskcmd.c       4763    static void TplRec09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B94              __$TplRec09:                     ; function: __$TplRec09
                                                           ; frame size=0
             tskcmd.c       4764    { 
             tskcmd.c       4765      
             tskcmd.c       4766    } 
    00002B94 006B                   RTS/N
             tskcmd.c       4767      
             tskcmd.c       4768    /***********************************************************************
             tskcmd.c       4769    *     
             tskcmd.c       4770    * [概要]  2A ユーザー10登録
             tskcmd.c       4771    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4772    * [戻値]  −
             tskcmd.c       4773    *     
             tskcmd.c       4774    ***********************************************************************/
             tskcmd.c       4775    static void TplRec10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B96              __$TplRec10:                     ; function: __$TplRec10
                                                           ; frame size=0
             tskcmd.c       4776    { 
             tskcmd.c       4777      
             tskcmd.c       4778    } 
    00002B96 006B                   RTS/N
             tskcmd.c       4779      
             tskcmd.c       4780    /***********************************************************************
             tskcmd.c       4781    *     
             tskcmd.c       4782    * [概要]  31 ユーザー1変更
             tskcmd.c       4783    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4784    * [戻値]  −
             tskcmd.c       4785    *     
             tskcmd.c       4786    ***********************************************************************/
             tskcmd.c       4787    static void TplChg01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B98              __$TplChg01:                     ; function: __$TplChg01
                                                           ; frame size=0
             tskcmd.c       4788    { 
             tskcmd.c       4789      
             tskcmd.c       4790    } 
    00002B98 006B                   RTS/N
             tskcmd.c       4791      
             tskcmd.c       4792    /***********************************************************************
             tskcmd.c       4793    *     
             tskcmd.c       4794    * [概要]  32 ユーザー2変更
             tskcmd.c       4795    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4796    * [戻値]  −
             tskcmd.c       4797    *     
             tskcmd.c       4798    ***********************************************************************/
             tskcmd.c       4799    static void TplChg02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B9A              __$TplChg02:                     ; function: __$TplChg02
                                                           ; frame size=0
             tskcmd.c       4800    { 
             tskcmd.c       4801      
             tskcmd.c       4802    } 
    00002B9A 006B                   RTS/N
             tskcmd.c       4803      
             tskcmd.c       4804    /***********************************************************************
             tskcmd.c       4805    *     
             tskcmd.c       4806    * [概要]  33 ユーザー3変更
             tskcmd.c       4807    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4808    * [戻値]  −
             tskcmd.c       4809    *     
             tskcmd.c       4810    ***********************************************************************/
             tskcmd.c       4811    static void TplChg03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B9C              __$TplChg03:                     ; function: __$TplChg03
                                                           ; frame size=0
             tskcmd.c       4812    { 
             tskcmd.c       4813      
             tskcmd.c       4814    } 
    00002B9C 006B                   RTS/N
             tskcmd.c       4815      
             tskcmd.c       4816    /***********************************************************************
             tskcmd.c       4817    *     
             tskcmd.c       4818    * [概要]  34 ユーザー4変更
             tskcmd.c       4819    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4820    * [戻値]  −
             tskcmd.c       4821    *     
             tskcmd.c       4822    ***********************************************************************/
             tskcmd.c       4823    static void TplChg04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002B9E              __$TplChg04:                     ; function: __$TplChg04
                                                           ; frame size=0
             tskcmd.c       4824    { 
             tskcmd.c       4825      
             tskcmd.c       4826    } 
    00002B9E 006B                   RTS/N
             tskcmd.c       4827      
             tskcmd.c       4828    /***********************************************************************
             tskcmd.c       4829    *     
             tskcmd.c       4830    * [概要]  35 ユーザー5変更
             tskcmd.c       4831    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4832    * [戻値]  −
             tskcmd.c       4833    *     
             tskcmd.c       4834    ***********************************************************************/
             tskcmd.c       4835    static void TplChg05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BA0              __$TplChg05:                     ; function: __$TplChg05
                                                           ; frame size=0
             tskcmd.c       4836    { 
             tskcmd.c       4837      
             tskcmd.c       4838    } 
    00002BA0 006B                   RTS/N
             tskcmd.c       4839      
             tskcmd.c       4840    /***********************************************************************
             tskcmd.c       4841    *     
             tskcmd.c       4842    * [概要]  36 ユーザー6変更
             tskcmd.c       4843    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4844    * [戻値]  −
             tskcmd.c       4845    *     
             tskcmd.c       4846    ***********************************************************************/
             tskcmd.c       4847    static void TplChg06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BA2              __$TplChg06:                     ; function: __$TplChg06
                                                           ; frame size=0
             tskcmd.c       4848    { 
             tskcmd.c       4849      
             tskcmd.c       4850    } 
    00002BA2 006B                   RTS/N
             tskcmd.c       4851      
             tskcmd.c       4852    /***********************************************************************
             tskcmd.c       4853    *     
             tskcmd.c       4854    * [概要]  37 ユーザー7変更
             tskcmd.c       4855    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4856    * [戻値]  −
             tskcmd.c       4857    *     
             tskcmd.c       4858    ***********************************************************************/
             tskcmd.c       4859    static void TplChg07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BA4              __$TplChg07:                     ; function: __$TplChg07
                                                           ; frame size=0
             tskcmd.c       4860    { 
             tskcmd.c       4861      
             tskcmd.c       4862    } 
    00002BA4 006B                   RTS/N
             tskcmd.c       4863      
             tskcmd.c       4864    /***********************************************************************
             tskcmd.c       4865    *     
             tskcmd.c       4866    * [概要]  38 ユーザー8変更
             tskcmd.c       4867    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4868    * [戻値]  −
             tskcmd.c       4869    *     
             tskcmd.c       4870    ***********************************************************************/
             tskcmd.c       4871    static void TplChg08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BA6              __$TplChg08:                     ; function: __$TplChg08
                                                           ; frame size=0
             tskcmd.c       4872    { 
             tskcmd.c       4873      
             tskcmd.c       4874    } 
    00002BA6 006B                   RTS/N
             tskcmd.c       4875      
             tskcmd.c       4876    /***********************************************************************
             tskcmd.c       4877    *     
             tskcmd.c       4878    * [概要]  39 ユーザー9変更
             tskcmd.c       4879    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4880    * [戻値]  −
             tskcmd.c       4881    *     
             tskcmd.c       4882    ***********************************************************************/
             tskcmd.c       4883    static void TplChg09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BA8              __$TplChg09:                     ; function: __$TplChg09
                                                           ; frame size=0
             tskcmd.c       4884    { 
             tskcmd.c       4885      
             tskcmd.c       4886    } 
    00002BA8 006B                   RTS/N
             tskcmd.c       4887      
             tskcmd.c       4888    /***********************************************************************
             tskcmd.c       4889    *     
             tskcmd.c       4890    * [概要]  3A ユーザー10変更
             tskcmd.c       4891    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4892    * [戻値]  −
             tskcmd.c       4893    *     
             tskcmd.c       4894    ***********************************************************************/
             tskcmd.c       4895    static void TplChg10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BAA              __$TplChg10:                     ; function: __$TplChg10
                                                           ; frame size=0
             tskcmd.c       4896    { 
             tskcmd.c       4897      
             tskcmd.c       4898    } 
    00002BAA 006B                   RTS/N
             tskcmd.c       4899      
             tskcmd.c       4900    /***********************************************************************
             tskcmd.c       4901    *     
             tskcmd.c       4902    * [概要]  41 ユーザー1削除
             tskcmd.c       4903    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4904    * [戻値]  −
             tskcmd.c       4905    *     
             tskcmd.c       4906    ***********************************************************************/
             tskcmd.c       4907    static void TplDel01( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BAC              __$TplDel01:                     ; function: __$TplDel01
                                                           ; frame size=0
             tskcmd.c       4908    { 
             tskcmd.c       4909      
             tskcmd.c       4910    } 
    00002BAC 006B                   RTS/N
             tskcmd.c       4911      
             tskcmd.c       4912    /***********************************************************************
             tskcmd.c       4913    *     
             tskcmd.c       4914    * [概要]  42 ユーザー2削除
             tskcmd.c       4915    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4916    * [戻値]  −
             tskcmd.c       4917    *     
             tskcmd.c       4918    ***********************************************************************/
             tskcmd.c       4919    static void TplDel02( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BAE              __$TplDel02:                     ; function: __$TplDel02
                                                           ; frame size=0
             tskcmd.c       4920    { 
             tskcmd.c       4921      
             tskcmd.c       4922    } 
    00002BAE 006B                   RTS/N
             tskcmd.c       4923      
             tskcmd.c       4924    /***********************************************************************
             tskcmd.c       4925    *     
             tskcmd.c       4926    * [概要]  43 ユーザー3削除
             tskcmd.c       4927    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4928    * [戻値]  −
             tskcmd.c       4929    *     
             tskcmd.c       4930    ***********************************************************************/
             tskcmd.c       4931    static void TplDel03( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BB0              __$TplDel03:                     ; function: __$TplDel03
                                                           ; frame size=0
             tskcmd.c       4932    { 
             tskcmd.c       4933      
             tskcmd.c       4934    } 
    00002BB0 006B                   RTS/N
             tskcmd.c       4935      
             tskcmd.c       4936    /***********************************************************************
             tskcmd.c       4937    *     
             tskcmd.c       4938    * [概要]  44 ユーザー4削除
             tskcmd.c       4939    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4940    * [戻値]  −
             tskcmd.c       4941    *     
             tskcmd.c       4942    ***********************************************************************/
             tskcmd.c       4943    static void TplDel04( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BB2              __$TplDel04:                     ; function: __$TplDel04
                                                           ; frame size=0
             tskcmd.c       4944    { 
             tskcmd.c       4945      
             tskcmd.c       4946    } 
    00002BB2 006B                   RTS/N
             tskcmd.c       4947      
             tskcmd.c       4948    /***********************************************************************
             tskcmd.c       4949    *     
             tskcmd.c       4950    * [概要]  45 ユーザー5削除
             tskcmd.c       4951    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4952    * [戻値]  −
             tskcmd.c       4953    *     
             tskcmd.c       4954    ***********************************************************************/
             tskcmd.c       4955    static void TplDel05( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BB4              __$TplDel05:                     ; function: __$TplDel05
                                                           ; frame size=0
             tskcmd.c       4956    { 
             tskcmd.c       4957      
             tskcmd.c       4958    } 
    00002BB4 006B                   RTS/N
             tskcmd.c       4959      
             tskcmd.c       4960    /***********************************************************************
             tskcmd.c       4961    *     
             tskcmd.c       4962    * [概要]  46 ユーザー6削除
             tskcmd.c       4963    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4964    * [戻値]  −
             tskcmd.c       4965    *     
             tskcmd.c       4966    ***********************************************************************/
             tskcmd.c       4967    static void TplDel06( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BB6              __$TplDel06:                     ; function: __$TplDel06
                                                           ; frame size=0
             tskcmd.c       4968    { 
             tskcmd.c       4969      
             tskcmd.c       4970    } 
    00002BB6 006B                   RTS/N
             tskcmd.c       4971      
             tskcmd.c       4972    /***********************************************************************
             tskcmd.c       4973    *     
             tskcmd.c       4974    * [概要]  47 ユーザー7削除
             tskcmd.c       4975    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4976    * [戻値]  −
             tskcmd.c       4977    *     
             tskcmd.c       4978    ***********************************************************************/
             tskcmd.c       4979    static void TplDel07( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BB8              __$TplDel07:                     ; function: __$TplDel07
                                                           ; frame size=0
             tskcmd.c       4980    { 
             tskcmd.c       4981      
             tskcmd.c       4982    } 
    00002BB8 006B                   RTS/N
             tskcmd.c       4983      
             tskcmd.c       4984    /***********************************************************************
             tskcmd.c       4985    *     
             tskcmd.c       4986    * [概要]  48 ユーザー8削除
             tskcmd.c       4987    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       4988    * [戻値]  −
             tskcmd.c       4989    *     
             tskcmd.c       4990    ***********************************************************************/
             tskcmd.c       4991    static void TplDel08( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BBA              __$TplDel08:                     ; function: __$TplDel08
                                                           ; frame size=0
             tskcmd.c       4992    { 
             tskcmd.c       4993      
             tskcmd.c       4994    } 
    00002BBA 006B                   RTS/N
             tskcmd.c       4995      
             tskcmd.c       4996    /***********************************************************************
             tskcmd.c       4997    *     
             tskcmd.c       4998    * [概要]  49 ユーザー9削除
             tskcmd.c       4999    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5000    * [戻値]  −
             tskcmd.c       5001    *     
             tskcmd.c       5002    ***********************************************************************/
             tskcmd.c       5003    static void TplDel09( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BBC              __$TplDel09:                     ; function: __$TplDel09
                                                           ; frame size=0
             tskcmd.c       5004    { 
             tskcmd.c       5005      
             tskcmd.c       5006    } 
    00002BBC 006B                   RTS/N
             tskcmd.c       5007      
             tskcmd.c       5008    /***********************************************************************
             tskcmd.c       5009    *     
             tskcmd.c       5010    * [概要]  4A ユーザー10削除
             tskcmd.c       5011    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5012    * [戻値]  −
             tskcmd.c       5013    *     
             tskcmd.c       5014    ***********************************************************************/
             tskcmd.c       5015    static void TplDel10( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BBE              __$TplDel10:                     ; function: __$TplDel10
                                                           ; frame size=0
             tskcmd.c       5016    { 
             tskcmd.c       5017      
             tskcmd.c       5018    } 
    00002BBE 006B                   RTS/N
             tskcmd.c       5019      
             tskcmd.c       5020    /***********************************************************************
             tskcmd.c       5021    *     
             tskcmd.c       5022    * [概要]  50 FW状態（ポーリング）
             tskcmd.c       5023    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5024    * [戻値]  −
             tskcmd.c       5025    *     
             tskcmd.c       5026    ***********************************************************************/
             tskcmd.c       5027    static void TplFwpol( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BC0              __$TplFwpol:                     ; function: __$TplFwpol
                                                           ; frame size=0
             tskcmd.c       5028    {
             tskcmd.c       5029      TpRspFWPOL();
    00002BC0 A254                   BRA         __$TpRspFWPOL
    00002BC2 0009                   NOP
             tskcmd.c       5030    }
             tskcmd.c       5031    
             tskcmd.c       5032    /***********************************************************************
             tskcmd.c       5033    *     
             tskcmd.c       5034    * [概要]  51 プロトコル実行
             tskcmd.c       5035    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5036    * [戻値]  −
             tskcmd.c       5037    * [備考]
             tskcmd.c       5038    *         
             tskcmd.c       5039    *         tskid     ID_TSK_CMD
             tskcmd.c       5040    *         mpfid     ID_MPF_EEP
             tskcmd.c       5041    *         mbxid     ID_MBX_EEP
             tskcmd.c       5042    *         prid1
             tskcmd.c       5043    *         bcid
             tskcmd.c       5044    *         msgid     ID_MSG_EEPREAD
             tskcmd.c       5045    *         inf 
             tskcmd.c       5046    *         inf2
             tskcmd.c       5047    *         data
             tskcmd.c       5048    *         siz
             tskcmd.c       5049    * 
             tskcmd.c       5050    ***********************************************************************/
             tskcmd.c       5051    static void TplPrtcl( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002BC4              __$TplPrtcl:                     ; function: __$TplPrtcl
                                                           ; frame size=44
    00002BC4 4BF0                   MOVMU.L     R11,@-R15
             tskcmd.c       5052    { 
             tskcmd.c       5053      UB  procno;
             tskcmd.c       5054    
             tskcmd.c       5055      memset( &bufwk[0], CLR,  CMD_BUFSIZ );
    00002BC6 6E63                   MOV         R6,R14
    00002BC8 E63C                   MOV         #60,R6     ; H'0000003C
    00002BCA 6C43                   MOV         R4,R12
    00002BCC D431                   MOV.L       L1374+2,R4 ; __$bufwk
    00002BCE D132                   MOV.L       L1374+6,R1 ; _memset
    00002BD0 410B                   JSR         @R1
    00002BD2 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       5056    
             tskcmd.c       5057      psel.pno = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
    00002BD4 54E1                   MOV.L       @(4,R14),R4; args[]
    00002BD6 E701                   MOV         #1,R7      ; H'00000001
    00002BD8 E50A                   MOV         #10,R5     ; H'0000000A
    00002BDA DD37                   MOV.L       L1374+38,R13; _Atoi
    00002BDC 4D0B                   JSR         @R13
    00002BDE 6673                   MOV         R7,R6
    00002BE0 DB36                   MOV.L       L1374+42,R11; __$psel
    00002BE2 2B00                   MOV.B       R0,@R11    ; psel.pno
    00002BE4 E701                   MOV         #1,R7      ; H'00000001
    00002BE6 E50A                   MOV         #10,R5     ; H'0000000A
    00002BE8 6673                   MOV         R7,R6
             tskcmd.c       5058      psel.smp = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
    00002BEA 4D0B                   JSR         @R13
    00002BEC 54E2                   MOV.L       @(8,R14),R4; args[]
    00002BEE 80B1                   MOV.B       R0,@(1,R11); psel.smp
    00002BF0 E701                   MOV         #1,R7      ; H'00000001
    00002BF2 E50A                   MOV         #10,R5     ; H'0000000A
    00002BF4 6673                   MOV         R7,R6
             tskcmd.c       5059      psel.val = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
    00002BF6 4D0B                   JSR         @R13
    00002BF8 54E3                   MOV.L       @(12,R14),R4; args[]
             tskcmd.c       5060      
             tskcmd.c       5061      mrcv->msgdata.prid1 = ID_TPL_PRTCL;
    00002BFA ED51                   MOV         #81,R13    ; H'00000051
    00002BFC 80B2                   MOV.B       R0,@(2,R11); psel.val
    00002BFE 3CD10018               MOV.B       R13,@(24:12,R12); (mrcv)->prid1
             tskcmd.c       5062      mrcv->msgdata.inf2   = psel.pno;
    00002C02 6EB0                   MOV.B       @R11,R14   ; psel.pno
    00002C04 3CE1001D               MOV.B       R14,@(29:12,R12); (mrcv)->inf2
    00002C08 D22D                   MOV.L       L1374+46,R2; _DeviceStatusGet
    00002C0A 424B                   JSR/N       @R2
    00002C0C 2008                   TST         R0,R0
    00002C0E 8B1A                   BF          L536
             tskcmd.c       5063      
             tskcmd.c       5064      if( DeviceStatusGet() == E_IDLING )
             tskcmd.c       5065      {
             tskcmd.c       5066          // EEPROM データ取得指示
             tskcmd.c       5067          mbx_send( ID_TSK_CMD,          // tskid
             tskcmd.c       5068                     ID_MPF_EEP,         // mpfid
             tskcmd.c       5069                     ID_MBX_EEP,         // mbxid
             tskcmd.c       5070                     mrcv->msgdata.prid1,// prid1  タッチパネル指示
             tskcmd.c       5071                     mrcv->msgdata.bcid, // bcid
             tskcmd.c       5072                     ID_MSG_EEPREAD,     // msgid
             tskcmd.c       5073                     mrcv->msgdata.inf,  // sts
             tskcmd.c       5074                     mrcv->msgdata.inf2, // sts2   プロトコル番号
             tskcmd.c       5075                     &bufwk[0],          // data   null
             tskcmd.c       5076                     CMD_BUFSIZ          // siz
             tskcmd.c       5077                   );
    00002C10 E13C                   MOV         #60,R1     ; H'0000003C
    00002C12 2F16                   MOV.L       R1,@-R15
    00002C14 D11F                   MOV.L       L1374+2,R1 ; __$bufwk
    00002C16 2F16                   MOV.L       R1,@-R15
    00002C18 34C1801D               MOVU.B      @(29,R12),R4; (mrcv)->inf2
    00002C1C 2F46                   MOV.L       R4,@-R15
    00002C1E 35C1801C               MOVU.B      @(28,R12),R5; (mrcv)->inf
    00002C22 2F56                   MOV.L       R5,@-R15
    00002C24 E616                   MOV         #22,R6     ; H'00000016
    00002C26 2F66                   MOV.L       R6,@-R15
    00002C28 37C1801A               MOVU.B      @(26,R12),R7; (mrcv)->bcid
    00002C2C 2F76                   MOV.L       R7,@-R15
    00002C2E E606                   MOV         #6,R6      ; H'00000006
    00002C30 37C14018               MOV.B       @(24:12,R12),R7; (mrcv)->prid1
    00002C34 E505                   MOV         #5,R5      ; H'00000005
    00002C36 DB1D                   MOV.L       L1374+26,R11; _mbx_send
    00002C38 4B0B                   JSR         @R11
    00002C3A 6453                   MOV         R5,R4
    00002C3C 7F18                   ADD         #24,R15
             tskcmd.c       5078    
             tskcmd.c       5079          // プロトコル応答
             tskcmd.c       5080          TpRspPRCTL( E_SUCCESS );
    00002C3E E400                   MOV         #0,R4      ; H'00000000
    00002C40 4BF4                   MOVMU.L     @R15+,R11
    00002C42 A20A                   BRA         __$TpRspPRCTL
    00002C44 0009                   NOP
    00002C46              L536:
    00002C46 4BF4                   MOVMU.L     @R15+,R11
    00002C48 006B                   RTS/N
             tskcmd.c       5081      }
             tskcmd.c       5082    }
             tskcmd.c       5083    
             tskcmd.c       5084    /***********************************************************************
             tskcmd.c       5085    *     
             tskcmd.c       5086    * [概要]  52 リスタート実行
             tskcmd.c       5087    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5088    * [戻値]  −
             tskcmd.c       5089    *     
             tskcmd.c       5090    ***********************************************************************/
             tskcmd.c       5091    static void TplResta( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C4A              __$TplResta:                     ; function: __$TplResta
                                                           ; frame size=0
             tskcmd.c       5092    { 
             tskcmd.c       5093      
             tskcmd.c       5094    } 
    00002C4A 006B                   RTS/N
             tskcmd.c       5095      
             tskcmd.c       5096    /***********************************************************************
             tskcmd.c       5097    *     
             tskcmd.c       5098    * [概要]  53 一時停止
             tskcmd.c       5099    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5100    * [戻値]  −
             tskcmd.c       5101    *     
             tskcmd.c       5102    ***********************************************************************/
             tskcmd.c       5103    static void TplPause( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C4C              __$TplPause:                     ; function: __$TplPause
                                                           ; frame size=4
    00002C4C 4F22                   STS.L       PR,@-R15
             tskcmd.c       5104    { 
             tskcmd.c       5105      SetPauseStop( PAUS_STS );
    00002C4E D31D                   MOV.L       L1374+50,R3; __$SetPauseStop
    00002C50 430B                   JSR         @R3
    00002C52 E402                   MOV         #2,R4      ; H'00000002
             tskcmd.c       5106      TplRpMakeSend( PARAM1, OK );
    00002C54 E500                   MOV         #0,R5      ; H'00000000
    00002C56 B21D                   BSR         _TplRpMakeSend
    00002C58 E401                   MOV         #1,R4      ; H'00000001
    00002C5A E553                   MOV         #83,R5     ; H'00000053
             tskcmd.c       5107      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_PAUSE );
    00002C5C D41A                   MOV.L       L1374+54,R4; H'0000009C+__$tp
    00002C5E A354                   BRA         __$TplRidDataSend
    00002C60 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5108    } 
             tskcmd.c       5109    /***********************************************************************
             tskcmd.c       5110    *     
             tskcmd.c       5111    * [概要]  54 再開
             tskcmd.c       5112    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5113    * [戻値]  −
             tskcmd.c       5114    *     
             tskcmd.c       5115    ***********************************************************************/
             tskcmd.c       5116    static void TplResum( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C62              __$TplResum:                     ; function: __$TplResum
                                                           ; frame size=4
    00002C62 4F22                   STS.L       PR,@-R15
             tskcmd.c       5117    { 
             tskcmd.c       5118      SetPauseStop( IDLE_STS );
    00002C64 D317                   MOV.L       L1374+50,R3; __$SetPauseStop
    00002C66 430B                   JSR         @R3
    00002C68 E400                   MOV         #0,R4      ; H'00000000
             tskcmd.c       5119      TplRpMakeSend( PARAM1, OK );
    00002C6A E500                   MOV         #0,R5      ; H'00000000
    00002C6C B212                   BSR         _TplRpMakeSend
    00002C6E E401                   MOV         #1,R4      ; H'00000001
    00002C70 E554                   MOV         #84,R5     ; H'00000054
             tskcmd.c       5120      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_RESUM );
    00002C72 D415                   MOV.L       L1374+54,R4; H'0000009C+__$tp
    00002C74 A349                   BRA         __$TplRidDataSend
    00002C76 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5121    } 
             tskcmd.c       5122    /***********************************************************************
             tskcmd.c       5123    *     
             tskcmd.c       5124    * [概要]  55 中断
             tskcmd.c       5125    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5126    * [戻値]  −
             tskcmd.c       5127    *     
             tskcmd.c       5128    ***********************************************************************/
             tskcmd.c       5129    static void TplAbort( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C78              __$TplAbort:                     ; function: __$TplAbort
                                                           ; frame size=4
    00002C78 4F22                   STS.L       PR,@-R15
             tskcmd.c       5130    { 
             tskcmd.c       5131      SetPauseStop( STOP_STS );
    00002C7A D312                   MOV.L       L1374+50,R3; __$SetPauseStop
    00002C7C 430B                   JSR         @R3
    00002C7E E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5132      TplRpMakeSend( PARAM1, OK );
    00002C80 E500                   MOV         #0,R5      ; H'00000000
    00002C82 B207                   BSR         _TplRpMakeSend
    00002C84 E401                   MOV         #1,R4      ; H'00000001
    00002C86 E555                   MOV         #85,R5     ; H'00000055
             tskcmd.c       5133      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_ABORT );
    00002C88 D40F                   MOV.L       L1374+54,R4; H'0000009C+__$tp
    00002C8A A33E                   BRA         __$TplRidDataSend
    00002C8C 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5134    }
             tskcmd.c       5135    /***********************************************************************
             tskcmd.c       5136    *     
             tskcmd.c       5137    * [概要]   58 オプションバーコード実行
             tskcmd.c       5138    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5139    * [戻値]  −
             tskcmd.c       5140    *     
             tskcmd.c       5141    ***********************************************************************/
             tskcmd.c       5142    static void TplOptcd( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C8E              __$TplOptcd:                     ; function: __$TplOptcd
                                                           ; frame size=0
             tskcmd.c       5143    { 
             tskcmd.c       5144      
             tskcmd.c       5145    } 
    00002C8E 006B                   RTS/N
             tskcmd.c       5146      
             tskcmd.c       5147    /***********************************************************************
             tskcmd.c       5148    *     
             tskcmd.c       5149    * [概要]  59 サンプルチューブQRコード
             tskcmd.c       5150    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5151    * [戻値]  −
             tskcmd.c       5152    *     
             tskcmd.c       5153    ***********************************************************************/
             tskcmd.c       5154    static void TplSmbar( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002C90              __$TplSmbar:                     ; function: __$TplSmbar
                                                           ; frame size=0
             tskcmd.c       5155    { 
             tskcmd.c       5156      
             tskcmd.c       5157    } 
    00002C90 006B                   RTS/N
    00002C92              L1374:
    00002C92 00000002               .RES.W      1
    00002C94 <00000000>             .DATA.L     __$bufwk
    00002C98 <00000000>             .DATA.L     _memset
    00002C9C <00000004>             .DATA.L     H'00000004+__$TpRecvArgs
    00002CA0 <00000000>             .DATA.L     _Strcpy
    00002CA4 <00000008>             .DATA.L     H'00000008+__$TpRecvArgs
    00002CA8 <00000000>             .DATA.L     _memcpy
    00002CAC <00000000>             .DATA.L     _mbx_send
    00002CB0 <00000000>             .DATA.L     _AsctoHex
    00002CB4 <00000000>             .DATA.L     __$bcctrl
    00002CB8 <00000000>             .DATA.L     _Atoi
    00002CBC <00000000>             .DATA.L     __$psel
    00002CC0 <00000000>             .DATA.L     _DeviceStatusGet
    00002CC4 <00000000>             .DATA.L     __$SetPauseStop
    00002CC8 <0000009C>             .DATA.L     H'0000009C+__$tp
             tskcmd.c       5158      
             tskcmd.c       5159    /***********************************************************************
             tskcmd.c       5160    *     
             tskcmd.c       5161    * [概要]  5A サンプルチューブ有無確認（単）
             tskcmd.c       5162    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5163    * [戻値]  −
             tskcmd.c       5164    *     
             tskcmd.c       5165    ***********************************************************************/
             tskcmd.c       5166    static void TplSmsgl( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002CCC              __$TplSmsgl:                     ; function: __$TplSmsgl
                                                           ; frame size=12
    00002CCC 4EF0                   MOVMU.L     R14,@-R15
    00002CCE 7FFC                   ADD         #-4,R15
             tskcmd.c       5167    { 
             tskcmd.c       5168      UB  result = NG;
             tskcmd.c       5169      UB  param1;
             tskcmd.c       5170    
             tskcmd.c       5171      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      param1 = AsctoHex(param1);
    00002CD0 D19E                   MOV.L       L1375,R1   ; H'00000004+__$TpRecvArgs
    00002CD2 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002CD4 D69E                   MOV.L       L1375+4,R6 ; _Strcpy
    00002CD6 460B                   JSR         @R6
    00002CD8 64F3                   MOV         R15,R4
    00002CDA 64F0                   MOV.B       @R15,R4    ; param1
    00002CDC D79D                   MOV.L       L1375+8,R7 ; _AsctoHex
    00002CDE 470B                   JSR         @R7
    00002CE0 EE01                   MOV         #1,R14     ; H'00000001
    00002CE2 620C                   EXTU.B      R0,R2
             tskcmd.c       5172    
             tskcmd.c       5173      if(( param1 >= 1 )&&( param1 <= 12 ))
    00002CE4 32E3                   CMP/GE      R14,R2
    00002CE6 8F04                   BF/S        L545
    00002CE8 2F20                   MOV.B       R2,@R15    ; param1
    00002CEA E60C                   MOV         #12,R6     ; H'0000000C
    00002CEC 3267                   CMP/GT      R6,R2
    00002CEE 8900                   BT          L545
             tskcmd.c       5174      {
             tskcmd.c       5175          result = OK;//あり
    00002CF0 EE00                   MOV         #0,R14     ; H'00000000
    00002CF2              L545:
    00002CF2 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5176      }
             tskcmd.c       5177      
             tskcmd.c       5178      TplRpMakeSend( PARAM1, result );
    00002CF4 B1CE                   BSR         _TplRpMakeSend
    00002CF6 65E3                   MOV         R14,R5
             tskcmd.c       5179      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_SMSGL );
    00002CF8 D497                   MOV.L       L1375+12,R4; H'0000009C+__$tp
    00002CFA B306                   BSR         __$TplRidDataSend
    00002CFC E558                   MOV         #88,R5     ; H'00000058
    00002CFE 7F04                   ADD         #4,R15
    00002D00 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5180    }
    00002D02 006B                   RTS/N
             tskcmd.c       5181    
             tskcmd.c       5182    /***********************************************************************
             tskcmd.c       5183    *     
             tskcmd.c       5184    * [概要]  5B サンプルチューブ有無確認（全）
             tskcmd.c       5185    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5186    * [戻値]  −
             tskcmd.c       5187    *     
             tskcmd.c       5188    ***********************************************************************/
             tskcmd.c       5189    static void TplSmall( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D04              __$TplSmall:                     ; function: __$TplSmall
                                                           ; frame size=16
    00002D04 4EF0                   MOVMU.L     R14,@-R15
    00002D06 7FF8                   ADD         #-8,R15
             tskcmd.c       5190    { 
             tskcmd.c       5191      UB  result = NG;
             tskcmd.c       5192      UB  allsts[INDAT_CNTRL_MAX];
             tskcmd.c       5193    
             tskcmd.c       5194      // 全入力ポート状態取得
             tskcmd.c       5195      pio_ALLIN( &allsts[0] );
    00002D08 64F3                   MOV         R15,R4
    00002D0A D194                   MOV.L       L1375+16,R1; _pio_ALLIN
    00002D0C 410B                   JSR         @R1
    00002D0E EE01                   MOV         #1,R14     ; H'00000001
             tskcmd.c       5196    
             tskcmd.c       5197      if(( allsts[0] == 0xff )&&( allsts[1] == 0xc0 ))
    00002D10 65F0                   MOV.B       @R15,R5    ; allsts[]
    00002D12 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    00002D14 3560                   CMP/EQ      R6,R5
    00002D16 8B04                   BF          L549
    00002D18 84F1                   MOV.B       @(1,R15),R0; allsts[]
    00002D1A E2C0                   MOV         #-64,R2    ; H'FFFFFFC0
    00002D1C 3020                   CMP/EQ      R2,R0
    00002D1E 8B00                   BF          L549
             tskcmd.c       5198      {
             tskcmd.c       5199          result = OK;//あり
    00002D20 EE00                   MOV         #0,R14     ; H'00000000
    00002D22              L549:
    00002D22 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5200      }
             tskcmd.c       5201      TplRpMakeSend( PARAM1, result );
    00002D24 B1B6                   BSR         _TplRpMakeSend
    00002D26 65E3                   MOV         R14,R5
             tskcmd.c       5202      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_SMALL );
    00002D28 D48B                   MOV.L       L1375+12,R4; H'0000009C+__$tp
    00002D2A B2EE                   BSR         __$TplRidDataSend
    00002D2C E559                   MOV         #89,R5     ; H'00000059
    00002D2E 7F08                   ADD         #8,R15
    00002D30 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5203    }
    00002D32 006B                   RTS/N
             tskcmd.c       5204    
             tskcmd.c       5205    /***********************************************************************
             tskcmd.c       5206    *     
             tskcmd.c       5207    * [概要]  5C 回収チューブレーンQRコード
             tskcmd.c       5208    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5209    * [戻値]  −
             tskcmd.c       5210    *     
             tskcmd.c       5211    ***********************************************************************/
             tskcmd.c       5212    static void TplCllne( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D34              __$TplCllne:                     ; function: __$TplCllne
                                                           ; frame size=0
             tskcmd.c       5213    { 
             tskcmd.c       5214      
             tskcmd.c       5215    } 
    00002D34 006B                   RTS/N
             tskcmd.c       5216      
             tskcmd.c       5217    /***********************************************************************
             tskcmd.c       5218    *     
             tskcmd.c       5219    * [概要]  5D 回収チューブQRコード
             tskcmd.c       5220    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5221    * [戻値]  −
             tskcmd.c       5222    *     
             tskcmd.c       5223    ***********************************************************************/
             tskcmd.c       5224    static void TplClqrc( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D36              __$TplClqrc:                     ; function: __$TplClqrc
                                                           ; frame size=0
             tskcmd.c       5225    { 
             tskcmd.c       5226      
             tskcmd.c       5227    } 
    00002D36 006B                   RTS/N
             tskcmd.c       5228      
             tskcmd.c       5229    /***********************************************************************
             tskcmd.c       5230    *     
             tskcmd.c       5231    * [概要]  5E 回収チューブ有無（単）
             tskcmd.c       5232    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5233    * [戻値]  −
             tskcmd.c       5234    *     
             tskcmd.c       5235    ***********************************************************************/
             tskcmd.c       5236    static void TplClsgl( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D38              __$TplClsgl:                     ; function: __$TplClsgl
                                                           ; frame size=0
             tskcmd.c       5237    { 
             tskcmd.c       5238      
             tskcmd.c       5239    } 
    00002D38 006B                   RTS/N
             tskcmd.c       5240      
             tskcmd.c       5241    /***********************************************************************
             tskcmd.c       5242    *     
             tskcmd.c       5243    * [概要]  5F 回収チューブ有無（全）
             tskcmd.c       5244    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5245    * [戻値]  −
             tskcmd.c       5246    *     
             tskcmd.c       5247    ***********************************************************************/
             tskcmd.c       5248    static void TplClall( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D3A              __$TplClall:                     ; function: __$TplClall
                                                           ; frame size=0
             tskcmd.c       5249    { 
             tskcmd.c       5250      
             tskcmd.c       5251    } 
    00002D3A 006B                   RTS/N
             tskcmd.c       5252      
             tskcmd.c       5253    /***********************************************************************
             tskcmd.c       5254    *     
             tskcmd.c       5255    * [概要]  60 LED
             tskcmd.c       5256    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5257    * [戻値]  −
             tskcmd.c       5258    *     
             tskcmd.c       5259    ***********************************************************************/
             tskcmd.c       5260    static void TplLdlmp( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D3C              __$TplLdlmp:                     ; function: __$TplLdlmp
                                                           ; frame size=12
    00002D3C 4EF0                   MOVMU.L     R14,@-R15
    00002D3E 7FFC                   ADD         #-4,R15
             tskcmd.c       5261    { 
             tskcmd.c       5262      UB  param1;
             tskcmd.c       5263      UB  result = NG;
             tskcmd.c       5264    
             tskcmd.c       5265      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      param1 = AsctoHex(param1);
    00002D40 D182                   MOV.L       L1375,R1   ; H'00000004+__$TpRecvArgs
    00002D42 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002D44 D682                   MOV.L       L1375+4,R6 ; _Strcpy
    00002D46 460B                   JSR         @R6
    00002D48 64F3                   MOV         R15,R4
    00002D4A 64F0                   MOV.B       @R15,R4    ; param1
    00002D4C D781                   MOV.L       L1375+8,R7 ; _AsctoHex
    00002D4E 470B                   JSR         @R7
    00002D50 EE01                   MOV         #1,R14     ; H'00000001
    00002D52 650C                   EXTU.B      R0,R5
             tskcmd.c       5266    
             tskcmd.c       5267      if(( param1 >= LED_OFF )&&( param1 <= LED_ON ))
    00002D54 35E7                   CMP/GT      R14,R5
    00002D56 8D04                   BT/S        L557
    00002D58 2F50                   MOV.B       R5,@R15    ; param1
    00002D5A E402                   MOV         #2,R4      ; H'00000002
             tskcmd.c       5268      {
             tskcmd.c       5269          pio_BOUT( O_LIGHLED, param1 );
    00002D5C D280                   MOV.L       L1375+20,R2; _pio_BOUT
    00002D5E 420B                   JSR         @R2
    00002D60 EE00                   MOV         #0,R14     ; H'00000000
    00002D62              L557:
    00002D62 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5270          result = OK;
             tskcmd.c       5271      }
             tskcmd.c       5272      
             tskcmd.c       5273      TplRpMakeSend( PARAM1, result );
    00002D64 B196                   BSR         _TplRpMakeSend
    00002D66 65E3                   MOV         R14,R5
             tskcmd.c       5274      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_LDLMP );
    00002D68 D47B                   MOV.L       L1375+12,R4; H'0000009C+__$tp
    00002D6A B2CE                   BSR         __$TplRidDataSend
    00002D6C E560                   MOV         #96,R5     ; H'00000060
    00002D6E 7F04                   ADD         #4,R15
    00002D70 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5275    }
    00002D72 006B                   RTS/N
             tskcmd.c       5276    
             tskcmd.c       5277    /***********************************************************************
             tskcmd.c       5278    *     
             tskcmd.c       5279    * [概要]  61 UV点灯
             tskcmd.c       5280    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5281    * [戻値]  −
             tskcmd.c       5282    *     
             tskcmd.c       5283    ***********************************************************************/
             tskcmd.c       5284    static void TplUvlmp( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002D74              __$TplUvlmp:                     ; function: __$TplUvlmp
                                                           ; frame size=12
    00002D74 4EF0                   MOVMU.L     R14,@-R15
    00002D76 7FFC                   ADD         #-4,R15
             tskcmd.c       5285    { 
             tskcmd.c       5286      UB  param1;
             tskcmd.c       5287      UB  result = NG;
             tskcmd.c       5288    
             tskcmd.c       5289      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      param1 = AsctoHex(param1);
    00002D78 D174                   MOV.L       L1375,R1   ; H'00000004+__$TpRecvArgs
    00002D7A 6512                   MOV.L       @R1,R5     ; TpRecvArgs[]
    00002D7C D674                   MOV.L       L1375+4,R6 ; _Strcpy
    00002D7E 460B                   JSR         @R6
    00002D80 64F3                   MOV         R15,R4
    00002D82 64F0                   MOV.B       @R15,R4    ; param1
    00002D84 D773                   MOV.L       L1375+8,R7 ; _AsctoHex
    00002D86 470B                   JSR         @R7
    00002D88 EE01                   MOV         #1,R14     ; H'00000001
    00002D8A 650C                   EXTU.B      R0,R5
             tskcmd.c       5290    
             tskcmd.c       5291      if(( param1 >= LED_OFF )&&( param1 <= LED_ON ))
    00002D8C 35E7                   CMP/GT      R14,R5
    00002D8E 8D04                   BT/S        L560
    00002D90 2F50                   MOV.B       R5,@R15    ; param1
    00002D92 E403                   MOV         #3,R4      ; H'00000003
             tskcmd.c       5292      {
             tskcmd.c       5293          pio_BOUT( O_UVLAMP1, param1 );
    00002D94 D272                   MOV.L       L1375+20,R2; _pio_BOUT
    00002D96 420B                   JSR         @R2
    00002D98 EE00                   MOV         #0,R14     ; H'00000000
    00002D9A              L560:
    00002D9A E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5294          result = OK;
             tskcmd.c       5295      }
             tskcmd.c       5296      
             tskcmd.c       5297      TplRpMakeSend( PARAM1, result );
    00002D9C B17A                   BSR         _TplRpMakeSend
    00002D9E 65E3                   MOV         R14,R5
             tskcmd.c       5298      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_UVLMP );
    00002DA0 D46D                   MOV.L       L1375+12,R4; H'0000009C+__$tp
    00002DA2 B2B2                   BSR         __$TplRidDataSend
    00002DA4 E561                   MOV         #97,R5     ; H'00000061
    00002DA6 7F04                   ADD         #4,R15
    00002DA8 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5299      
             tskcmd.c       5300    }
    00002DAA 006B                   RTS/N
             tskcmd.c       5301    
             tskcmd.c       5302    /***********************************************************************
             tskcmd.c       5303    *     
             tskcmd.c       5304    * [概要]  62 パトランプ
             tskcmd.c       5305    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5306    * [戻値]  −
             tskcmd.c       5307    *     
             tskcmd.c       5308    ***********************************************************************/
             tskcmd.c       5309    static void TplPtlmp( T_CMD_MSG* mrcv, UB anum, const char** args )   
    00002DAC              __$TplPtlmp:                     ; function: __$TplPtlmp
                                                           ; frame size=60
    00002DAC 4AF0                   MOVMU.L     R10,@-R15
    00002DAE 7FF4                   ADD         #-12,R15
    00002DB0 DC6C                   MOV.L       L1375+24,R12; __$TpRecvArgs
    00002DB2 55C1                   MOV.L       @(4,R12),R5; TpRecvArgs[]
             tskcmd.c       5310    {
             tskcmd.c       5311      UB param1;
             tskcmd.c       5312      UB param2;
             tskcmd.c       5313      UB param3;
             tskcmd.c       5314      UB result;
             tskcmd.c       5315    
             tskcmd.c       5316      // データ取得
             tskcmd.c       5317      Strcpy( (char*)&param1 , TpRecvArgs[1]  );      bzcnt.Act    = AsctoHex(param1);
    00002DB4 6B43                   MOV         R4,R11
    00002DB6 DD66                   MOV.L       L1375+4,R13; _Strcpy
    00002DB8 4D0B                   JSR         @R13
    00002DBA 64F3                   MOV         R15,R4
    00002DBC 34F14000               MOV.B       @(0:12,R15),R4; param1
    00002DC0 DE64                   MOV.L       L1375+8,R14; _AsctoHex
    00002DC2 4E4B                   JSR/N       @R14
    00002DC4 DA68                   MOV.L       L1375+28,R10; __$bzcnt
             tskcmd.c       5318      Strcpy( (char*)&param2 , TpRecvArgs[2]  );      bzcnt.Colptn = AsctoHex(param2);
    00002DC6 55C2                   MOV.L       @(8,R12),R5; TpRecvArgs[]
    00002DC8 64F3                   MOV         R15,R4
    00002DCA 2A00                   MOV.B       R0,@R10    ; bzcnt.Act
    00002DCC 4D0B                   JSR         @R13
    00002DCE 7404                   ADD         #4,R4
    00002DD0 34F14004               MOV.B       @(4:12,R15),R4; param2
    00002DD4 4E4B                   JSR/N       @R14
             tskcmd.c       5319      Strcpy( (char*)&param3 , TpRecvArgs[3]  );      bzcnt.Buzptn = AsctoHex(param3);
    00002DD6 55C3                   MOV.L       @(12,R12),R5; TpRecvArgs[]
    00002DD8 64F3                   MOV         R15,R4
    00002DDA 80A1                   MOV.B       R0,@(1,R10); bzcnt.Colptn
    00002DDC 4D0B                   JSR         @R13
    00002DDE 7408                   ADD         #8,R4
    00002DE0 34F14008               MOV.B       @(8:12,R15),R4; param3
    00002DE4 4E4B                   JSR/N       @R14
             tskcmd.c       5320    
             tskcmd.c       5321      // データチェック
             tskcmd.c       5322      if(
    00002DE6 66A0                   MOV.B       @R10,R6    ; bzcnt.Act
    00002DE8 E502                   MOV         #2,R5      ; H'00000002
    00002DEA 620C                   EXTU.B      R0,R2
    00002DEC 3656                   CMP/HI      R5,R6
    00002DEE 6023                   MOV         R2,R0
    00002DF0 8D05                   BT/S        L563
    00002DF2 80A2                   MOV.B       R0,@(2,R10); bzcnt.Buzptn
    00002DF4 30A18001               MOVU.B      @(1,R10),R0; bzcnt.Colptn
    00002DF8 3057                   CMP/GT      R5,R0
    00002DFA 8900                   BT          L563
    00002DFC 3257                   CMP/GT      R5,R2
    00002DFE              L563:
             tskcmd.c       5323          (( bzcnt.Act    >= PATOF   )&&( bzcnt.Act  <= PATBL1))&&
             tskcmd.c       5324          (( bzcnt.Colptn >= C_GRN )&&( bzcnt.Colptn <= C_RED ))&&
             tskcmd.c       5325          (( bzcnt.Buzptn >= LEDOF )&&( bzcnt.Buzptn <= LEDBL ))
             tskcmd.c       5326      )
             tskcmd.c       5327      {
             tskcmd.c       5328          result = OK;
    00002DFE 0529                   MOVT        R5
             tskcmd.c       5329      }
             tskcmd.c       5330      else
             tskcmd.c       5331      {
             tskcmd.c       5332          result = NG;
             tskcmd.c       5333      }
             tskcmd.c       5334    
             tskcmd.c       5335      // タッチパネルへ返信
             tskcmd.c       5336      TplRpMakeSend( PARAM1, result );
    00002E00 B148                   BSR         _TplRpMakeSend
    00002E02 E401                   MOV         #1,R4      ; H'00000001
    00002E04 E562                   MOV         #98,R5     ; H'00000062
             tskcmd.c       5337      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_PTLMP );
    00002E06 D454                   MOV.L       L1375+12,R4; H'0000009C+__$tp
    00002E08 B27F                   BSR         __$TplRidDataSend
    00002E0A ED3C                   MOV         #60,R13    ; H'0000003C
             tskcmd.c       5338    
             tskcmd.c       5339      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       5340      memcpy( &bufwk[0], (B*)&bzcnt, sizeof( ST_BZCNT ) );
    00002E0C D556                   MOV.L       L1375+28,R5; __$bzcnt
    00002E0E D457                   MOV.L       L1375+32,R4; __$bufwk
    00002E10 D157                   MOV.L       L1375+36,R1; _memcpy
    00002E12 410B                   JSR         @R1
    00002E14 E604                   MOV         #4,R6      ; H'00000004
    00002E16 2FD6                   MOV.L       R13,@-R15
    00002E18 D154                   MOV.L       L1375+32,R1; __$bufwk
    00002E1A 2F16                   MOV.L       R1,@-R15
    00002E1C EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    00002E1E 6EEC                   EXTU.B      R14,R14
    00002E20 2FE6                   MOV.L       R14,@-R15
    00002E22 2FE6                   MOV.L       R14,@-R15
    00002E24 E733                   MOV         #51,R7     ; H'00000033
    00002E26 2F76                   MOV.L       R7,@-R15
    00002E28 3AB1801A               MOVU.B      @(26,R11),R10; (mrcv)->bcid
    00002E2C 2FA6                   MOV.L       R10,@-R15
    00002E2E E60C                   MOV         #12,R6     ; H'0000000C
    00002E30 E50B                   MOV         #11,R5     ; H'0000000B
    00002E32 E405                   MOV         #5,R4      ; H'00000005
    00002E34 DC4F                   MOV.L       L1375+40,R12; _mbx_send
    00002E36 4C0B                   JSR         @R12
    00002E38 E762                   MOV         #98,R7     ; H'00000062
    00002E3A 7F24                   ADD         #36,R15
    00002E3C 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       5341    
             tskcmd.c       5342      // タスク通知
             tskcmd.c       5343      mbx_send(
             tskcmd.c       5344                      ID_TSK_CMD,                                     // 送信元ﾀｽｸID
             tskcmd.c       5345                      ID_MPF_LED,                                     // ﾒﾓﾘﾌﾟｰﾙID
             tskcmd.c       5346                      ID_MBX_LED,                                     // ﾒｰﾙﾎﾞｯｸｽID
             tskcmd.c       5347                      ID_TPL_PTLMP,                                   // PROCID
             tskcmd.c       5348                      mrcv->msgdata.bcid,                             // BCID
             tskcmd.c       5349                      ID_MSG_CLEDON,                                  // message
             tskcmd.c       5350                      NO_DATA,                                        // 情報1(汎用)
             tskcmd.c       5351                      NO_DATA,                                        // 情報2(汎用)
             tskcmd.c       5352                      &bufwk[0],                                      // ﾃﾞｰﾀ
             tskcmd.c       5353                      sizeof( bufwk )                                 // ﾃﾞｰﾀｻｲｽﾞ
             tskcmd.c       5354                  );
             tskcmd.c       5355    }
    00002E3E 006B                   RTS/N
             tskcmd.c       5356    /***********************************************************************
             tskcmd.c       5357    *     
             tskcmd.c       5358    * [概要]  63 電源OFF
             tskcmd.c       5359    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5360    * [戻値]  −
             tskcmd.c       5361    *     
             tskcmd.c       5362    ***********************************************************************/
             tskcmd.c       5363    static void TplPowof( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002E40              __$TplPowof:                     ; function: __$TplPowof
                                                           ; frame size=4
    00002E40 4F22                   STS.L       PR,@-R15
    00002E42 E501                   MOV         #1,R5      ; H'00000001
             tskcmd.c       5364    {
             tskcmd.c       5365      UB result = OK;
             tskcmd.c       5366    
             tskcmd.c       5367      pio_BOUT( O_POWERDW, ON );
    00002E44 D246                   MOV.L       L1375+20,R2; _pio_BOUT
    00002E46 420B                   JSR         @R2
    00002E48 E405                   MOV         #5,R4      ; H'00000005
             tskcmd.c       5368    
             tskcmd.c       5369      // タッチパネルへ返信
             tskcmd.c       5370      TplRpMakeSend( PARAM1, result );
    00002E4A E500                   MOV         #0,R5      ; H'00000000
    00002E4C B122                   BSR         _TplRpMakeSend
    00002E4E E401                   MOV         #1,R4      ; H'00000001
    00002E50 E563                   MOV         #99,R5     ; H'00000063
             tskcmd.c       5371      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_POWOF );
    00002E52 D441                   MOV.L       L1375+12,R4; H'0000009C+__$tp
    00002E54 A259                   BRA         __$TplRidDataSend
    00002E56 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5372    
             tskcmd.c       5373    }
             tskcmd.c       5374    /***********************************************************************
             tskcmd.c       5375    *     
             tskcmd.c       5376    * [概要]  6B 運転履歴（タッチパネルより運転履歴受信）
             tskcmd.c       5377    * [引数]  電文、パラメータ数、アドレス
             tskcmd.c       5378    * [戻値]  −
             tskcmd.c       5379    *     
             tskcmd.c       5380    ***********************************************************************/
             tskcmd.c       5381    static void TplExRun( T_CMD_MSG* mrcv, UB anum, const char** args )
    00002E58              __$TplExRun:                     ; function: __$TplExRun
                                                           ; frame size=48
    00002E58 4F22                   STS.L       PR,@-R15
    00002E5A 7FFC                   ADD         #-4,R15
             tskcmd.c       5382    {
             tskcmd.c       5383      ER err;
             tskcmd.c       5384      INT siz;
             tskcmd.c       5385      
             tskcmd.c       5386      siz = sizeof( err );
             tskcmd.c       5387    
             tskcmd.c       5388      if( mrcv->msgdata.siz == siz )// error
    00002E5C 5048                   MOV.L       @(32,R4),R0; (mrcv)->siz
    00002E5E 8804                   CMP/EQ      #4,R0
    00002E60 8B28                   BF          L569
             tskcmd.c       5389      {
             tskcmd.c       5390          ExpRunlRetry++;
    00002E62 D145                   MOV.L       L1375+44,R1; __$ExpRunlRetry
    00002E64 6710                   MOV.B       @R1,R7     ; ExpRunlRetry
    00002E66 E203                   MOV         #3,R2      ; H'00000003
    00002E68 7701                   ADD         #1,R7
             tskcmd.c       5391          if( ExpRunlRetry > 3 )
    00002E6A 657C                   EXTU.B      R7,R5
    00002E6C 3527                   CMP/GT      R2,R5
    00002E6E 8F19                   BF/S        L571
    00002E70 2170                   MOV.B       R7,@R1     ; ExpRunlRetry
             tskcmd.c       5392          {
             tskcmd.c       5393              // エラー応答メッセージ作成
             tskcmd.c       5394              CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c       5395                                  PARAM2,                                         // パラメータ数
             tskcmd.c       5396                                  STRTBL_MSG[ID_MSG_EXPRUNL],                     // コマンド文字列
             tskcmd.c       5397                                  E_RECV_FAIL,                                    // エラーコード
             tskcmd.c       5398    
             tskcmd.c       5399                                  0,                                              // 
             tskcmd.c       5400                                  0,                                              // 
             tskcmd.c       5401                                  0,                                              // 
             tskcmd.c       5402                                  0,                                              // 
             tskcmd.c       5403                                  0,                                              // 
             tskcmd.c       5404    
             tskcmd.c       5405                                  0,                                              // 
             tskcmd.c       5406                                  0,                                              // 
             tskcmd.c       5407                                  0,                                              // 
             tskcmd.c       5408                                  0,                                              // 
             tskcmd.c       5409                                  0                                               // 
             tskcmd.c       5410                              );
    00002E72 E600                   MOV         #0,R6      ; H'00000000
    00002E74 2F66                   MOV.L       R6,@-R15
    00002E76 2F66                   MOV.L       R6,@-R15
    00002E78 2F66                   MOV.L       R6,@-R15
    00002E7A 2F66                   MOV.L       R6,@-R15
    00002E7C 2F66                   MOV.L       R6,@-R15
    00002E7E 2F66                   MOV.L       R6,@-R15
    00002E80 2F66                   MOV.L       R6,@-R15
    00002E82 2F66                   MOV.L       R6,@-R15
    00002E84 2F66                   MOV.L       R6,@-R15
    00002E86 2F66                   MOV.L       R6,@-R15
    00002E88 E732                   MOV         #50,R7     ; H'00000032
    00002E8A D13C                   MOV.L       L1375+48,R1; H'000000A0+_STRTBL_MSG
    00002E8C 6612                   MOV.L       @R1,R6     ; STRTBL_MSG[]
    00002E8E D43C                   MOV.L       L1375+52,R4; __$stCtl
    00002E90 D33C                   MOV.L       L1375+56,R3; _CmdMakeResponse
    00002E92 430B                   JSR         @R3
    00002E94 E502                   MOV         #2,R5      ; H'00000002
    00002E96 7F28                   ADD         #40,R15
             tskcmd.c       5411              CmdSendResponseEtc( &stCtl, ID_MSG_RUNLOGERR );
    00002E98 D439                   MOV.L       L1375+52,R4; __$stCtl
    00002E9A D33B                   MOV.L       L1375+60,R3; _CmdSendResponseEtc
    00002E9C 430B                   JSR         @R3
    00002E9E E568                   MOV         #104,R5    ; H'00000068
    00002EA0 A028                   BRA         L572
    00002EA2 0009                   NOP
    00002EA4              L571:
             tskcmd.c       5412          }
             tskcmd.c       5413          else
             tskcmd.c       5414          {
             tskcmd.c       5415              // タッチパネルへリトライ
             tskcmd.c       5416              memcpy( &err, &mrcv->msgdata.data[0], siz );
    00002EA4 7424                   ADD         #36,R4
    00002EA6 E604                   MOV         #4,R6      ; H'00000004
    00002EA8 6543                   MOV         R4,R5
    00002EAA D231                   MOV.L       L1375+36,R2; _memcpy
    00002EAC 420B                   JSR         @R2
    00002EAE 64F3                   MOV         R15,R4
    00002EB0 A01B                   BRA         L573
    00002EB2 0009                   NOP
    00002EB4              L569:
             tskcmd.c       5417    
             tskcmd.c       5418              TplExRunSend();
             tskcmd.c       5419              TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_EXRUN );
             tskcmd.c       5420          }
             tskcmd.c       5421      }
             tskcmd.c       5422      else
             tskcmd.c       5423      {
             tskcmd.c       5424          // 応答メッセージ作成
             tskcmd.c       5425          CmdMakeResponse(    &stCtl,                                         // 
             tskcmd.c       5426                              PARAM2,                                         // パラメータ数
             tskcmd.c       5427                              STRTBL_MSG[ID_MSG_EXPRUNL],                     // コマンド文字列
             tskcmd.c       5428                              E_SUCCESS,                                      // エラーコード
             tskcmd.c       5429    
             tskcmd.c       5430                              0,                                              // 
             tskcmd.c       5431                              0,                                              // 
             tskcmd.c       5432                              0,                                              // 
             tskcmd.c       5433                              0,                                              // 
             tskcmd.c       5434                              0,                                              // 
             tskcmd.c       5435    
             tskcmd.c       5436                              0,                                              // 
             tskcmd.c       5437                              0,                                              // 
             tskcmd.c       5438                              0,                                              // 
             tskcmd.c       5439                              0,                                              // 
             tskcmd.c       5440                              0                                               // 
             tskcmd.c       5441                          );
    00002EB4 E400                   MOV         #0,R4      ; H'00000000
    00002EB6 2F46                   MOV.L       R4,@-R15
    00002EB8 2F46                   MOV.L       R4,@-R15
    00002EBA 2F46                   MOV.L       R4,@-R15
    00002EBC 2F46                   MOV.L       R4,@-R15
    00002EBE 2F46                   MOV.L       R4,@-R15
    00002EC0 2F46                   MOV.L       R4,@-R15
    00002EC2 2F46                   MOV.L       R4,@-R15
    00002EC4 2F46                   MOV.L       R4,@-R15
    00002EC6 2F46                   MOV.L       R4,@-R15
    00002EC8 2F46                   MOV.L       R4,@-R15
    00002ECA E502                   MOV         #2,R5      ; H'00000002
    00002ECC D72B                   MOV.L       L1375+48,R7; H'000000A0+_STRTBL_MSG
    00002ECE 6672                   MOV.L       @R7,R6     ; STRTBL_MSG[]
    00002ED0 D42B                   MOV.L       L1375+52,R4; __$stCtl
    00002ED2 D32C                   MOV.L       L1375+56,R3; _CmdMakeResponse
    00002ED4 430B                   JSR         @R3
    00002ED6 E700                   MOV         #0,R7      ; H'00000000
    00002ED8 7F28                   ADD         #40,R15
             tskcmd.c       5442          // 応答メッセージ送信
             tskcmd.c       5443          CmdSendResponseEtc( &stCtl, ID_MSG_EXPRUNL );
    00002EDA D429                   MOV.L       L1375+52,R4; __$stCtl
    00002EDC D32A                   MOV.L       L1375+60,R3; _CmdSendResponseEtc
    00002EDE 430B                   JSR         @R3
    00002EE0 E528                   MOV         #40,R5     ; H'00000028
             tskcmd.c       5444          
             tskcmd.c       5445          
             tskcmd.c       5446          // タッチパネルへ次レコードを依頼
             tskcmd.c       5447          ExpRunlSeqno++;
    00002EE2 D22A                   MOV.L       L1375+64,R2; __$ExpRunlSeqno
    00002EE4 6120                   MOV.B       @R2,R1     ; ExpRunlSeqno
    00002EE6 7101                   ADD         #1,R1
    00002EE8 2210                   MOV.B       R1,@R2     ; ExpRunlSeqno
    00002EEA              L573:
    00002EEA B115                   BSR         _TplExRunSend
    00002EEC 0009                   NOP
    00002EEE D41A                   MOV.L       L1375+12,R4; H'0000009C+__$tp
    00002EF0 B20B                   BSR         __$TplRidDataSend
    00002EF2 E56B                   MOV         #107,R5    ; H'0000006B
    00002EF4              L572:
    00002EF4 7F04                   ADD         #4,R15
    00002EF6 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5448          TplExRunSend();
             tskcmd.c       5449          TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_EXRUN );
             tskcmd.c       5450      }
             tskcmd.c       5451    }
    00002EF8 006B                   RTS/N
             tskcmd.c       5452    
             tskcmd.c       5453    /***********************************************************************
             tskcmd.c       5454    * 
             tskcmd.c       5455    * [概要]  
             tskcmd.c       5456    * [引数]  メッセージデータ
             tskcmd.c       5457    * [戻値]  −
             tskcmd.c       5458    * 
             tskcmd.c       5459    ***********************************************************************/
             tskcmd.c       5460    static void TpRspFWVER()
    00002EFA              __$TpRspFWVER:                   ; function: __$TpRspFWVER
                                                           ; frame size=12
    00002EFA 4DF0                   MOVMU.L     R13,@-R15
    00002EFC DD16                   MOV.L       L1375+12,R13; H'0000009C+__$tp
    00002EFE E610                   MOV         #16,R6     ; H'00000010
             tskcmd.c       5461    {
             tskcmd.c       5462      UB  bcccal;
             tskcmd.c       5463      UB  datsiz;
             tskcmd.c       5464      UB  calsiz;
             tskcmd.c       5465      UB  comsiz;
             tskcmd.c       5466      char *pnter;
             tskcmd.c       5467    
             tskcmd.c       5468      pnter = &TP_RP1_SEND_FORM04[0];
             tskcmd.c       5469      
             tskcmd.c       5470      // パラメータフォーム
             tskcmd.c       5471      datsiz = sizeof(TP_RP1_SEND_FORM04) - 3;
             tskcmd.c       5472      calsiz = sizeof(TP_RP1_SEND_FORM04) - 5;
             tskcmd.c       5473      comsiz = sizeof(TP_RP1_SEND_FORM04);
             tskcmd.c       5474    
             tskcmd.c       5475      memcpy( &tp.rsp.buf[0],&TP_RP1_SEND_FORM04[0],comsiz );
    00002F00 D523                   MOV.L       L1375+68,R5; __$TP_RP1_SEND_FORM04
    00002F02 D11B                   MOV.L       L1375+36,R1; _memcpy
    00002F04 410B                   JSR         @R1
    00002F06 64D3                   MOV         R13,R4
    00002F08 64D3                   MOV         R13,R4
    00002F0A 7408                   ADD         #8,R4
             tskcmd.c       5476      memcpy( &tp.rsp.buf[8],&VER_INFO_TO_TP[0]  , 4 );
    00002F0C D521                   MOV.L       L1375+72,R5; _VER_INFO_TO_TP
    00002F0E D718                   MOV.L       L1375+36,R7; _memcpy
    00002F10 470B                   JSR         @R7
    00002F12 E604                   MOV         #4,R6      ; H'00000004
             tskcmd.c       5477    
             tskcmd.c       5478      bcccal = CalcBCC( &tp.rsp.buf[1], calsiz );
    00002F14 64D3                   MOV         R13,R4
    00002F16 7401                   ADD         #1,R4
    00002F18 DE1F                   MOV.L       L1375+76,R14; _CalcBCC
    00002F1A 4E0B                   JSR         @R14
    00002F1C E50B                   MOV         #11,R5     ; H'0000000B
    00002F1E 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5479      tp.rsp.buf[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    00002F20 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00002F22 60E3                   MOV         R14,R0
    00002F24 402C                   SHAD        R2,R0
    00002F26 C90F                   AND         #15,R0
    00002F28 D11C                   MOV.L       L1375+80,R1; _HextoAsc
    00002F2A 410B                   JSR         @R1
    00002F2C 6403                   MOV         R0,R4
    00002F2E 80DD                   MOV.B       R0,@(13,R13); tp.rsp.buf[]
             tskcmd.c       5480      tp.rsp.buf[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    00002F30 60E3                   MOV         R14,R0
    00002F32 C90F                   AND         #15,R0
    00002F34 D219                   MOV.L       L1375+80,R2; _HextoAsc
    00002F36 420B                   JSR         @R2
    00002F38 6403                   MOV         R0,R4
    00002F3A 80DE                   MOV.B       R0,@(14,R13); tp.rsp.buf[]
    00002F3C E510                   MOV         #16,R5     ; H'00000010
             tskcmd.c       5481    
             tskcmd.c       5482      TplCommDataSend( &tp.rsp.buf[0] , comsiz );
    00002F3E B228                   BSR         __$TplCommDataSend
    00002F40 64D3                   MOV         R13,R4
    00002F42 E501                   MOV         #1,R5      ; H'00000001
             tskcmd.c       5483      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_FWVER );
    00002F44 64D3                   MOV         R13,R4
    00002F46 4DF4                   MOVMU.L     @R15+,R13
    00002F48 A1DF                   BRA         __$TplRidDataSend
    00002F4A 0009                   NOP
    00002F4C              L1375:
    00002F4C <00000004>             .DATA.L     H'00000004+__$TpRecvArgs
    00002F50 <00000000>             .DATA.L     _Strcpy
    00002F54 <00000000>             .DATA.L     _AsctoHex
    00002F58 <0000009C>             .DATA.L     H'0000009C+__$tp
    00002F5C <00000000>             .DATA.L     _pio_ALLIN
    00002F60 <00000000>             .DATA.L     _pio_BOUT
    00002F64 <00000000>             .DATA.L     __$TpRecvArgs
    00002F68 <00000000>             .DATA.L     __$bzcnt
    00002F6C <00000000>             .DATA.L     __$bufwk
    00002F70 <00000000>             .DATA.L     _memcpy
    00002F74 <00000000>             .DATA.L     _mbx_send
    00002F78 <00000000>             .DATA.L     __$ExpRunlRetry
    00002F7C <000000A0>             .DATA.L     H'000000A0+_STRTBL_MSG
    00002F80 <00000000>             .DATA.L     __$stCtl
    00002F84 <00000000>             .DATA.L     _CmdMakeResponse
    00002F88 <00000000>             .DATA.L     _CmdSendResponseEtc
    00002F8C <00000000>             .DATA.L     __$ExpRunlSeqno
    00002F90 <00000000>             .DATA.L     __$TP_RP1_SEND_FORM04
    00002F94 <00000000>             .DATA.L     _VER_INFO_TO_TP
    00002F98 <00000000>             .DATA.L     _CalcBCC
    00002F9C <00000000>             .DATA.L     _HextoAsc
             tskcmd.c       5484    }
             tskcmd.c       5485    
             tskcmd.c       5486    /***********************************************************************
             tskcmd.c       5487    * 
             tskcmd.c       5488    * [概要]  
             tskcmd.c       5489    * [引数]  メッセージデータ
             tskcmd.c       5490    * [戻値]  −
             tskcmd.c       5491    * 
             tskcmd.c       5492    ***********************************************************************/
             tskcmd.c       5493    static void TpRspLGIN1()
    00002FA0              __$TpRspLGIN1:                   ; function: __$TpRspLGIN1
                                                           ; frame size=12
    00002FA0 4DF0                   MOVMU.L     R13,@-R15
    00002FA2 DDA0                   MOV.L       L1376+2,R13; H'0000009C+__$tp
    00002FA4 E60E                   MOV         #14,R6     ; H'0000000E
             tskcmd.c       5494    {
             tskcmd.c       5495      UB  result;
             tskcmd.c       5496      UB  bcccal;
             tskcmd.c       5497      UB  datsiz;
             tskcmd.c       5498      UB  calsiz;
             tskcmd.c       5499      UB  comsiz;
             tskcmd.c       5500      char *pnter;
             tskcmd.c       5501    
             tskcmd.c       5502      pnter = &TP_RP1_SEND_FORM02[0];
             tskcmd.c       5503      
             tskcmd.c       5504      datsiz = sizeof(TP_RP1_SEND_FORM02) - 3;
             tskcmd.c       5505      calsiz = sizeof(TP_RP1_SEND_FORM02) - 5;
             tskcmd.c       5506      comsiz = sizeof(TP_RP1_SEND_FORM02);
             tskcmd.c       5507    
             tskcmd.c       5508      memcpy( &tp.rsp.buf[0],pnter,comsiz );
    00002FA6 D5A0                   MOV.L       L1376+6,R5 ; __$TP_RP1_SEND_FORM02
    00002FA8 D1A0                   MOV.L       L1376+10,R1; _memcpy
    00002FAA 410B                   JSR         @R1
    00002FAC 64D3                   MOV         R13,R4
             tskcmd.c       5509      result = ChkUserInfo();
    00002FAE B4D4                   BSR         __$ChkUserInfo
    00002FB0 0009                   NOP
    00002FB2 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5510    
             tskcmd.c       5511      tp.rsp.buf[8] = DectoAscH(result);
    00002FB4 D69E                   MOV.L       L1376+14,R6; _DectoAscH
    00002FB6 460B                   JSR         @R6
    00002FB8 64E3                   MOV         R14,R4
    00002FBA 80D8                   MOV.B       R0,@(8,R13); tp.rsp.buf[]
             tskcmd.c       5512      tp.rsp.buf[9] = DectoAscL(result);
    00002FBC D79D                   MOV.L       L1376+18,R7; _DectoAscL
    00002FBE 470B                   JSR         @R7
    00002FC0 64E3                   MOV         R14,R4
    00002FC2 80D9                   MOV.B       R0,@(9,R13); tp.rsp.buf[]
             tskcmd.c       5513      
             tskcmd.c       5514      bcccal = CalcBCC( &tp.rsp.buf[1], calsiz );
    00002FC4 64D3                   MOV         R13,R4
    00002FC6 7401                   ADD         #1,R4
    00002FC8 D19B                   MOV.L       L1376+22,R1; _CalcBCC
    00002FCA 410B                   JSR         @R1
    00002FCC E509                   MOV         #9,R5      ; H'00000009
    00002FCE 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5515      tp.rsp.buf[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    00002FD0 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00002FD2 60E3                   MOV         R14,R0
    00002FD4 402C                   SHAD        R2,R0
    00002FD6 C90F                   AND         #15,R0
    00002FD8 D298                   MOV.L       L1376+26,R2; _HextoAsc
    00002FDA 420B                   JSR         @R2
    00002FDC 6403                   MOV         R0,R4
    00002FDE 80DB                   MOV.B       R0,@(11,R13); tp.rsp.buf[]
             tskcmd.c       5516      tp.rsp.buf[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    00002FE0 60E3                   MOV         R14,R0
    00002FE2 C90F                   AND         #15,R0
    00002FE4 D795                   MOV.L       L1376+26,R7; _HextoAsc
    00002FE6 470B                   JSR         @R7
    00002FE8 6403                   MOV         R0,R4
    00002FEA 80DC                   MOV.B       R0,@(12,R13); tp.rsp.buf[]
    00002FEC E50E                   MOV         #14,R5     ; H'0000000E
             tskcmd.c       5517    
             tskcmd.c       5518      TplCommDataSend( &tp.rsp.buf[0] , comsiz );
    00002FEE B1D0                   BSR         __$TplCommDataSend
    00002FF0 64D3                   MOV         R13,R4
    00002FF2 E503                   MOV         #3,R5      ; H'00000003
             tskcmd.c       5519      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_LGIN1 );
    00002FF4 64D3                   MOV         R13,R4
    00002FF6 4DF4                   MOVMU.L     @R15+,R13
    00002FF8 A187                   BRA         __$TplRidDataSend
    00002FFA 0009                   NOP
             tskcmd.c       5520    }
             tskcmd.c       5521    
             tskcmd.c       5522    /***********************************************************************
             tskcmd.c       5523    * 
             tskcmd.c       5524    * [概要]  
             tskcmd.c       5525    * [引数]  メッセージデータ
             tskcmd.c       5526    * [戻値]  −
             tskcmd.c       5527    * 
             tskcmd.c       5528    ***********************************************************************/
             tskcmd.c       5529    static void TpRspLGIN2()
             tskcmd.c       5530    {
             tskcmd.c       5531    }
             tskcmd.c       5532    
             tskcmd.c       5533    /***********************************************************************
             tskcmd.c       5534    * 
             tskcmd.c       5535    * [概要]  
             tskcmd.c       5536    * [引数]  メッセージデータ
             tskcmd.c       5537    * [戻値]  −
             tskcmd.c       5538    * 
             tskcmd.c       5539    ***********************************************************************/
             tskcmd.c       5540    static void TpRspOPTIF()
    00002FFC              __$TpRspOPTIF:                   ; function: __$TpRspOPTIF
                                                           ; frame size=16
    00002FFC 4CF0                   MOVMU.L     R12,@-R15
    00002FFE DD89                   MOV.L       L1376+2,R13; H'0000009C+__$tp
    00003000 E60D                   MOV         #13,R6     ; H'0000000D
             tskcmd.c       5541    {
             tskcmd.c       5542      UB  bcccal;
             tskcmd.c       5543      UB  datsiz;
             tskcmd.c       5544      UB  calsiz;
             tskcmd.c       5545      UB  comsiz;
             tskcmd.c       5546      char *pnter;
             tskcmd.c       5547    
             tskcmd.c       5548      pnter = &TP_RP1_SEND_FORM01[0];
             tskcmd.c       5549      
             tskcmd.c       5550      datsiz = sizeof(TP_RP1_SEND_FORM01) - 3;
             tskcmd.c       5551      calsiz = sizeof(TP_RP1_SEND_FORM01) - 5;
             tskcmd.c       5552      comsiz = sizeof(TP_RP1_SEND_FORM01);
             tskcmd.c       5553    
             tskcmd.c       5554      memcpy( &tp.rsp.buf[0],pnter,comsiz );
    00003002 D58F                   MOV.L       L1376+30,R5; __$TP_RP1_SEND_FORM01
    00003004 D189                   MOV.L       L1376+10,R1; _memcpy
    00003006 410B                   JSR         @R1
    00003008 64D3                   MOV         R13,R4
    0000300A D68E                   MOV.L       L1376+34,R6; __$BkP10
             tskcmd.c       5555      tp.rsp.buf[8] = HextoAsc( BkP10.Login );
    0000300C DC8B                   MOV.L       L1376+26,R12; _HextoAsc
    0000300E 4C0B                   JSR         @R12
    00003010 6460                   MOV.B       @R6,R4     ; BkP10.Login
    00003012 80D8                   MOV.B       R0,@(8,R13); tp.rsp.buf[]
             tskcmd.c       5556      
             tskcmd.c       5557      bcccal = CalcBCC( &tp.rsp.buf[1], calsiz );
    00003014 64D3                   MOV         R13,R4
    00003016 7401                   ADD         #1,R4
    00003018 D787                   MOV.L       L1376+22,R7; _CalcBCC
    0000301A 470B                   JSR         @R7
    0000301C E508                   MOV         #8,R5      ; H'00000008
    0000301E 6E0C                   EXTU.B      R0,R14
             tskcmd.c       5558      tp.rsp.buf[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    00003020 E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00003022 60E3                   MOV         R14,R0
    00003024 402C                   SHAD        R2,R0
    00003026 C90F                   AND         #15,R0
    00003028 4C0B                   JSR         @R12
    0000302A 6403                   MOV         R0,R4
    0000302C 80DA                   MOV.B       R0,@(10,R13); tp.rsp.buf[]
             tskcmd.c       5559      tp.rsp.buf[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    0000302E 60E3                   MOV         R14,R0
    00003030 C90F                   AND         #15,R0
    00003032 4C0B                   JSR         @R12
    00003034 6403                   MOV         R0,R4
    00003036 80DB                   MOV.B       R0,@(11,R13); tp.rsp.buf[]
    00003038 E50D                   MOV         #13,R5     ; H'0000000D
             tskcmd.c       5560    
             tskcmd.c       5561      TplCommDataSend( &tp.rsp.buf[0] , comsiz );
    0000303A B1AA                   BSR         __$TplCommDataSend
    0000303C 64D3                   MOV         R13,R4
    0000303E E502                   MOV         #2,R5      ; H'00000002
             tskcmd.c       5562      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_OPTIF );
    00003040 64D3                   MOV         R13,R4
    00003042 4CF4                   MOVMU.L     @R15+,R12
    00003044 A161                   BRA         __$TplRidDataSend
    00003046 0009                   NOP
             tskcmd.c       5563    }
             tskcmd.c       5564    
             tskcmd.c       5565    /***********************************************************************
             tskcmd.c       5566    * 
             tskcmd.c       5567    * [概要]  
             tskcmd.c       5568    * [引数]  メッセージデータ
             tskcmd.c       5569    * [戻値]  −
             tskcmd.c       5570    * [備考]
             tskcmd.c       5571    *                        0   1    2    3    4    5    6    7    8     9    10     11    12
             tskcmd.c       5572    *  TP_RP_SEND_FORM[1]:  STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '*',  ETX,  0x30, 0x30, 0x0d
             tskcmd.c       5573    * 
             tskcmd.c       5574    ***********************************************************************/
             tskcmd.c       5575    static void TpRspINITA( ER result )
    00003048              __$TpRspINITA:                   ; function: __$TpRspINITA
                                                           ; frame size=4
    00003048 4F22                   STS.L       PR,@-R15
             tskcmd.c       5576    {
             tskcmd.c       5577      INT data;
             tskcmd.c       5578    
             tskcmd.c       5579      if( result == E_SUCCESS )       data = 0;   // 成功
    0000304A 2448                   TST         R4,R4
    0000304C 0539                   MOVRT       R5
             tskcmd.c       5580      else                            data = 1;   // 失敗
             tskcmd.c       5581      
             tskcmd.c       5582      TplRpMakeSend( 1, data );
    0000304E B021                   BSR         _TplRpMakeSend
    00003050 E401                   MOV         #1,R4      ; H'00000001
    00003052 E505                   MOV         #5,R5      ; H'00000005
             tskcmd.c       5583      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_INITA );
    00003054 D473                   MOV.L       L1376+2,R4 ; H'0000009C+__$tp
    00003056 A158                   BRA         __$TplRidDataSend
    00003058 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5584    }
             tskcmd.c       5585    /***********************************************************************
             tskcmd.c       5586    * 
             tskcmd.c       5587    * [概要]  
             tskcmd.c       5588    * [引数]  メッセージデータ
             tskcmd.c       5589    * [戻値]  −
             tskcmd.c       5590    * [備考]
             tskcmd.c       5591    *                        0   1    2    3    4    5    6    7    8     9    10     11    12
             tskcmd.c       5592    *  TP_RP_SEND_FORM[1]:  STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '*',  ETX,  0x30, 0x30, 0x0d
             tskcmd.c       5593    * 
             tskcmd.c       5594    ***********************************************************************/
             tskcmd.c       5595    static void TpRspPRCTL( ER result )
    0000305A              __$TpRspPRCTL:                   ; function: __$TpRspPRCTL
                                                           ; frame size=4
    0000305A 4F22                   STS.L       PR,@-R15
             tskcmd.c       5596    {
             tskcmd.c       5597      INT data;
             tskcmd.c       5598    
             tskcmd.c       5599      if( result == E_SUCCESS )       data = 0;   // 成功
    0000305C 2448                   TST         R4,R4
    0000305E 0539                   MOVRT       R5
             tskcmd.c       5600      else                            data = 1;   // 失敗
             tskcmd.c       5601    
             tskcmd.c       5602      TplRpMakeSend( 1, data );
    00003060 B018                   BSR         _TplRpMakeSend
    00003062 E401                   MOV         #1,R4      ; H'00000001
    00003064 E551                   MOV         #81,R5     ; H'00000051
             tskcmd.c       5603      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_PRTCL );
    00003066 D46F                   MOV.L       L1376+2,R4 ; H'0000009C+__$tp
    00003068 A14F                   BRA         __$TplRidDataSend
    0000306A 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5604    }
             tskcmd.c       5605    /***********************************************************************
             tskcmd.c       5606    * 
             tskcmd.c       5607    * [概要]  ポーリング
             tskcmd.c       5608    * [引数]  メッセージデータ
             tskcmd.c       5609    * [戻値]  −
             tskcmd.c       5610    * [備考]
             tskcmd.c       5611    *                        0   1    2    3    4    5    6    7    8     9    10     11    12
             tskcmd.c       5612    *  TP_RP_SEND_FORM[1]:  STX,'W', 'N', ' ', 'R', 'P', '1', ' ', '*',  ETX,  0x30, 0x30, 0x0d
             tskcmd.c       5613    * 
             tskcmd.c       5614    ***********************************************************************/
             tskcmd.c       5615    static void TpRspFWPOL()
    0000306C              __$TpRspFWPOL:                   ; function: __$TpRspFWPOL
                                                           ; frame size=4
    0000306C 4F22                   STS.L       PR,@-R15
             tskcmd.c       5616    {
             tskcmd.c       5617      TplRpMakeSend( 1, DeviceProtcolNoGet() );       // パラメータ１電文作成
    0000306E D176                   MOV.L       L1376+38,R1; _DeviceProtcolNoGet
    00003070 414B                   JSR/N       @R1
    00003072 650C                   EXTU.B      R0,R5
    00003074 B00E                   BSR         _TplRpMakeSend
    00003076 E401                   MOV         #1,R4      ; H'00000001
             tskcmd.c       5618      TplRpMakeSend( 2, DeviceStatusGet() );          // パラメータ２電文作成
    00003078 D674                   MOV.L       L1376+42,R6; _DeviceStatusGet
    0000307A 464B                   JSR/N       @R6
    0000307C E402                   MOV         #2,R4      ; H'00000002
    0000307E B009                   BSR         _TplRpMakeSend
    00003080 6503                   MOV         R0,R5
             tskcmd.c       5619      TplRpMakeSend( 3, (INT)DeviceStepGet() );       // パラメータ３電文作成
    00003082 D773                   MOV.L       L1376+46,R7; _DeviceStepGet
    00003084 474B                   JSR/N       @R7
    00003086 650C                   EXTU.B      R0,R5
    00003088 B004                   BSR         _TplRpMakeSend
    0000308A E403                   MOV         #3,R4      ; H'00000003
    0000308C E550                   MOV         #80,R5     ; H'00000050
             tskcmd.c       5620      
             tskcmd.c       5621      TplRidDataSend( &tp.rsp.buf[0] , ID_TPL_FWPOL );
    0000308E D465                   MOV.L       L1376+2,R4 ; H'0000009C+__$tp
    00003090 A13B                   BRA         __$TplRidDataSend
    00003092 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5622    }
             tskcmd.c       5623    /***********************************************************************
             tskcmd.c       5624    * 
             tskcmd.c       5625    * [概要]  LED点灯／消灯指示
             tskcmd.c       5626    * [引数]  メッセージデータ
             tskcmd.c       5627    * [戻値]  −
             tskcmd.c       5628    * 
             tskcmd.c       5629    ***********************************************************************/
             tskcmd.c       5630    static void TpRspLDLMP()
             tskcmd.c       5631    {
             tskcmd.c       5632    }
             tskcmd.c       5633    
             tskcmd.c       5634    /***********************************************************************
             tskcmd.c       5635    *     
             tskcmd.c       5636    * [概要]  タッチパネルパラメータ電文作成＆送信
             tskcmd.c       5637    * [引数]  パラメータ番号、パラメータデータ
             tskcmd.c       5638    * [戻値]  −
             tskcmd.c       5639    *     
             tskcmd.c       5640    ***********************************************************************/
             tskcmd.c       5641    void TplRpMakeSend( UB parno, INT pardat )
    00003094              _TplRpMakeSend:                  ; function: TplRpMakeSend
                                                           ; frame size=36
    00003094 4CF0                   MOVMU.L     R12,@-R15
    00003096 7FF8                   ADD         #-8,R15
             tskcmd.c       5642    {
             tskcmd.c       5643      UB bcc;
             tskcmd.c       5644      UB bcch;
             tskcmd.c       5645      UB bccl;
             tskcmd.c       5646      INT  len;
             tskcmd.c       5647    
             tskcmd.c       5648      memset( &rspbuf,  CLR,  sizeof( rspbuf ) );
    00003098 6D53                   MOV         R5,R13
    0000309A E63C                   MOV         #60,R6     ; H'0000003C
    0000309C DC6D                   MOV.L       L1376+50,R12; __$rspbuf
    0000309E E500                   MOV         #0,R5      ; H'00000000
    000030A0 6E43                   MOV         R4,R14
    000030A2 D16D                   MOV.L       L1376+54,R1; _memset
    000030A4 410B                   JSR         @R1
    000030A6 64C3                   MOV         R12,R4
             tskcmd.c       5649      
             tskcmd.c       5650      sprintf(rspbuf, "WN RP%0d &H%08X", parno, pardat );
    000030A8 2FD6                   MOV.L       R13,@-R15
    000030AA 64EC                   EXTU.B      R14,R4
    000030AC 2F46                   MOV.L       R4,@-R15
    000030AE D56B                   MOV.L       L1376+58,R5; L1627
    000030B0 2F56                   MOV.L       R5,@-R15
    000030B2 D66B                   MOV.L       L1376+62,R6; _sprintf
    000030B4 460B                   JSR         @R6
    000030B6 64C3                   MOV         R12,R4
    000030B8 7F0C                   ADD         #12,R15
             tskcmd.c       5651      bcc = bcch = bccl = CLR;
    000030BA E700                   MOV         #0,R7      ; H'00000000
    000030BC 2F70                   MOV.B       R7,@R15    ; bccl
             tskcmd.c       5652      
             tskcmd.c       5653      len = strlen(&rspbuf);
    000030BE 3F710004               MOV.B       R7,@(4:12,R15); bcch
    000030C2 DD68                   MOV.L       L1376+66,R13; _strlen
    000030C4 4D0B                   JSR         @R13
    000030C6 64C3                   MOV         R12,R4
    000030C8 65C3                   MOV         R12,R5
    000030CA DC56                   MOV.L       L1376+2,R12; H'0000009C+__$tp
    000030CC 6D03                   MOV         R0,R13
             tskcmd.c       5654      memcpy( &tp.rsp.buf[1], &rspbuf, (len+1) );
    000030CE 7001                   ADD         #1,R0
    000030D0 64C3                   MOV         R12,R4
    000030D2 7401                   ADD         #1,R4
    000030D4 DE55                   MOV.L       L1376+10,R14; _memcpy
    000030D6 4E0B                   JSR         @R14
    000030D8 6603                   MOV         R0,R6
             tskcmd.c       5655      tp.rsp.buf[0] = STX;
    000030DA E102                   MOV         #2,R1      ; H'00000002
             tskcmd.c       5656      tp.rsp.buf[(len+1)] = ETX;
    000030DC 6EC3                   MOV         R12,R14
    000030DE 3EDC                   ADD         R13,R14
    000030E0 E003                   MOV         #3,R0      ; H'00000003
    000030E2 2C10                   MOV.B       R1,@R12    ; tp.rsp.buf[]
             tskcmd.c       5657    
             tskcmd.c       5658      bcc = CalcBCC( &tp.rsp.buf[1], len );
    000030E4 64C3                   MOV         R12,R4
    000030E6 80E1                   MOV.B       R0,@(1,R14); tp.rsp.buf[]
    000030E8 7401                   ADD         #1,R4
    000030EA 65D3                   MOV         R13,R5
             tskcmd.c       5659      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       5660    
             tskcmd.c       5661      tp.rsp.buf[(len+2)] = bcch;
             tskcmd.c       5662      tp.rsp.buf[(len+3)] = bccl;
             tskcmd.c       5663      tp.rsp.buf[(len+4)] = CRCHR;
             tskcmd.c       5664      
             tskcmd.c       5665      TplCommDataSend( &tp.rsp.buf[0] , (len+5) );
    000030EC D752                   MOV.L       L1376+22,R7; _CalcBCC
    000030EE 470B                   JSR         @R7
    000030F0 7D05                   ADD         #5,R13
    000030F2 65F3                   MOV         R15,R5
    000030F4 7504                   ADD         #4,R5
    000030F6 6403                   MOV         R0,R4
    000030F8 D25B                   MOV.L       L1376+70,R2; _DectoHexASC
    000030FA 420B                   JSR         @R2
    000030FC 66F3                   MOV         R15,R6
    000030FE 30F14004               MOV.B       @(4:12,R15),R0; bcch
    00003102 65D3                   MOV         R13,R5
    00003104 80E2                   MOV.B       R0,@(2,R14); tp.rsp.buf[]
    00003106 64C3                   MOV         R12,R4
    00003108 60F0                   MOV.B       @R15,R0    ; bccl
    0000310A 80E3                   MOV.B       R0,@(3,R14); tp.rsp.buf[]
    0000310C E00D                   MOV         #13,R0     ; H'0000000D
    0000310E B140                   BSR         __$TplCommDataSend
    00003110 80E4                   MOV.B       R0,@(4,R14); tp.rsp.buf[]
    00003112 7F08                   ADD         #8,R15
    00003114 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       5666    }
    00003116 006B                   RTS/N
             tskcmd.c       5667    /***********************************************************************
             tskcmd.c       5668    *     
             tskcmd.c       5669    * [概要]  タッチパネルへ運転履歴要求電文作成＆送信
             tskcmd.c       5670    * [引数]  
             tskcmd.c       5671    * [戻値]  −
             tskcmd.c       5672    * [備考]  2WN RP1 XX3XXD
             tskcmd.c       5673    *             12345678901234
             tskcmd.c       5674    ***********************************************************************/
             tskcmd.c       5675    void TplExRunSend()
    00003118              _TplExRunSend:                   ; function: TplExRunSend
                                                           ; frame size=40
    00003118 4EF0                   MOVMU.L     R14,@-R15
    0000311A 7FF8                   ADD         #-8,R15
             tskcmd.c       5676    {
             tskcmd.c       5677      UB bcc  = CLR;
             tskcmd.c       5678      UB bcch = CLR;
    0000311C E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       5679      UB bccl = CLR;
             tskcmd.c       5680      INT len = 9;
             tskcmd.c       5681      
             tskcmd.c       5682      sprintf( ( char * )&MentePcSendbuf[1], "WN RP1 %02d", &ExpRunlSeqno );
    0000311E D153                   MOV.L       L1376+74,R1; __$ExpRunlSeqno
    00003120 3F010004               MOV.B       R0,@(4:12,R15); bcch
    00003124 0F04                   MOV.B       R0,@(R0,R15); bccl
    00003126 2F16                   MOV.L       R1,@-R15
    00003128 D451                   MOV.L       L1376+78,R4; L1628
    0000312A 2F46                   MOV.L       R4,@-R15
    0000312C DE51                   MOV.L       L1376+82,R14; _MentePcSendbuf
    0000312E 64E3                   MOV         R14,R4
    00003130 D54B                   MOV.L       L1376+62,R5; _sprintf
    00003132 450B                   JSR         @R5
    00003134 7401                   ADD         #1,R4
    00003136 7F08                   ADD         #8,R15
             tskcmd.c       5683    
             tskcmd.c       5684      MentePcSendbuf[0] = STX;
    00003138 E602                   MOV         #2,R6      ; H'00000002
             tskcmd.c       5685      MentePcSendbuf[(len+1)] = ETX;
    0000313A E003                   MOV         #3,R0      ; H'00000003
    0000313C 2E60                   MOV.B       R6,@R14    ; MentePcSendbuf[]
    0000313E 80EA                   MOV.B       R0,@(10,R14); MentePcSendbuf[]
             tskcmd.c       5686    
             tskcmd.c       5687      bcc = CalcBCC( &MentePcSendbuf[1], len );
    00003140 64E3                   MOV         R14,R4
    00003142 7401                   ADD         #1,R4
    00003144 D73C                   MOV.L       L1376+22,R7; _CalcBCC
    00003146 470B                   JSR         @R7
    00003148 E509                   MOV         #9,R5      ; H'00000009
    0000314A 65F3                   MOV         R15,R5
    0000314C 7504                   ADD         #4,R5
    0000314E 6403                   MOV         R0,R4
             tskcmd.c       5688      DectoHexASC( bcc, &bcch, &bccl );
    00003150 D145                   MOV.L       L1376+70,R1; _DectoHexASC
    00003152 410B                   JSR         @R1
    00003154 66F3                   MOV         R15,R6
             tskcmd.c       5689    
             tskcmd.c       5690      MentePcSendbuf[(len+2)] = bcch;
    00003156 30F14004               MOV.B       @(4:12,R15),R0; bcch
             tskcmd.c       5691      MentePcSendbuf[(len+3)] = bccl;
             tskcmd.c       5692      MentePcSendbuf[(len+4)] = CRCHR;
             tskcmd.c       5693    
             tskcmd.c       5694      mbx_send    (
             tskcmd.c       5695                  ID_TSK_CMD,
             tskcmd.c       5696                  ID_MPF_TXEX,
             tskcmd.c       5697                  ID_MBX_TXEX,
             tskcmd.c       5698                    NO_DATA,
             tskcmd.c       5699                  NO_DATA,
             tskcmd.c       5700                  ID_MSG_EXPRUNL,
             tskcmd.c       5701                  0,
             tskcmd.c       5702                  0,
             tskcmd.c       5703                  &MentePcSendbuf[0],
             tskcmd.c       5704                  (len+5)
             tskcmd.c       5705              );
    0000315A E50E                   MOV         #14,R5     ; H'0000000E
    0000315C 80EB                   MOV.B       R0,@(11,R14); MentePcSendbuf[]
    0000315E 30F14000               MOV.B       @(0:12,R15),R0; bccl
    00003162 80EC                   MOV.B       R0,@(12,R14); MentePcSendbuf[]
    00003164 E00D                   MOV         #13,R0     ; H'0000000D
    00003166 80ED                   MOV.B       R0,@(13,R14); MentePcSendbuf[]
    00003168 2F56                   MOV.L       R5,@-R15
    0000316A 2FE6                   MOV.L       R14,@-R15
    0000316C E600                   MOV         #0,R6      ; H'00000000
    0000316E 2F66                   MOV.L       R6,@-R15
    00003170 2F66                   MOV.L       R6,@-R15
    00003172 E728                   MOV         #40,R7     ; H'00000028
    00003174 2F76                   MOV.L       R7,@-R15
    00003176 EEFF                   MOV         #-1,R14    ; H'FFFFFFFF
    00003178 6EEC                   EXTU.B      R14,R14
    0000317A 67E3                   MOV         R14,R7
    0000317C 2FE6                   MOV.L       R14,@-R15
    0000317E E604                   MOV         #4,R6      ; H'00000004
    00003180 E503                   MOV         #3,R5      ; H'00000003
    00003182 D23D                   MOV.L       L1376+86,R2; _mbx_send
    00003184 420B                   JSR         @R2
    00003186 E405                   MOV         #5,R4      ; H'00000005
    00003188 7F20                   ADD         #32,R15
    0000318A 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       5706    }
    0000318C 006B                   RTS/N
             tskcmd.c       5707    static    INT  lendbg;
             tskcmd.c       5708    /***********************************************************************
             tskcmd.c       5709    *     
             tskcmd.c       5710    * [概要]  タッチパネルパラメータ電文作成＆送信
             tskcmd.c       5711    * [引数]  パラメータ番号、パラメータデータ
             tskcmd.c       5712    * [戻値]  −
             tskcmd.c       5713    *     
             tskcmd.c       5714    ***********************************************************************/
             tskcmd.c       5715    void TplRpDataSend()
    0000318E              _TplRpDataSend:                  ; function: TplRpDataSend
                                                           ; frame size=48
    0000318E 4CF0                   MOVMU.L     R12,@-R15
    00003190 7FF8                   ADD         #-8,R15
             tskcmd.c       5716    {
             tskcmd.c       5717      UB bcc;
             tskcmd.c       5718      UB bcch;
             tskcmd.c       5719      UB bccl;
             tskcmd.c       5720      INT  len;
             tskcmd.c       5721    
             tskcmd.c       5722      memset( &MentePcSendbuf[0], CLR, sizeof( MentePcSendbuf ) );
    00003192 DC38                   MOV.L       L1376+82,R12; _MentePcSendbuf
    00003194 E500                   MOV         #0,R5      ; H'00000000
    00003196 06000D48               MOVI20      #3400,R6   ; H'00000D48
    0000319A D12F                   MOV.L       L1376+54,R1; _memset
    0000319C 410B                   JSR         @R1
    0000319E 64C3                   MOV         R12,R4
             tskcmd.c       5723      sprintf( ( char * )&MentePcSendbuf[1], "WN RP100 %s", &ImpExpRcvData[0]);
    000031A0 D436                   MOV.L       L1376+90,R4; __$ImpExpRcvData
    000031A2 2F46                   MOV.L       R4,@-R15
    000031A4 D536                   MOV.L       L1376+94,R5; L1629
    000031A6 2F56                   MOV.L       R5,@-R15
    000031A8 64C3                   MOV         R12,R4
    000031AA D62D                   MOV.L       L1376+62,R6; _sprintf
    000031AC 460B                   JSR         @R6
    000031AE 7401                   ADD         #1,R4
    000031B0 7F08                   ADD         #8,R15
             tskcmd.c       5724      
             tskcmd.c       5725      bcc = bcch = bccl = CLR;
    000031B2 E000                   MOV         #0,R0      ; H'00000000
    000031B4 0F04                   MOV.B       R0,@(R0,R15); bccl
             tskcmd.c       5726    
             tskcmd.c       5727      len = strlen(&MentePcSendbuf[1]);
    000031B6 64C3                   MOV         R12,R4
    000031B8 3F010004               MOV.B       R0,@(4:12,R15); bcch
    000031BC D729                   MOV.L       L1376+66,R7; _strlen
    000031BE 470B                   JSR         @R7
    000031C0 7401                   ADD         #1,R4
             tskcmd.c       5728      lendbg = len;
    000031C2 DE30                   MOV.L       L1376+98,R14; __$lendbg
    000031C4 2E02                   MOV.L       R0,@R14    ; lendbg
             tskcmd.c       5729      
             tskcmd.c       5730      MentePcSendbuf[0] = STX;
    000031C6 EE02                   MOV         #2,R14     ; H'00000002
    000031C8 6D03                   MOV         R0,R13
    000031CA 2CE0                   MOV.B       R14,@R12   ; MentePcSendbuf[]
    000031CC 6503                   MOV         R0,R5
             tskcmd.c       5731      MentePcSendbuf[(len+1)] = ETX;
             tskcmd.c       5732    
             tskcmd.c       5733      bcc = CalcBCC( &MentePcSendbuf[1], len );
             tskcmd.c       5734      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       5735    
             tskcmd.c       5736      MentePcSendbuf[(len+2)] = bcch;
             tskcmd.c       5737      MentePcSendbuf[(len+3)] = bccl;
             tskcmd.c       5738      MentePcSendbuf[(len+4)] = CRCHR;
             tskcmd.c       5739    
             tskcmd.c       5740      mbx_send    (
             tskcmd.c       5741                  ID_TSK_CMD,
             tskcmd.c       5742                  ID_MPF_TXEX,
             tskcmd.c       5743                  ID_MBX_TXEX,
             tskcmd.c       5744                    NO_DATA,            // procid
             tskcmd.c       5745                  NO_DATA,
             tskcmd.c       5746                  ID_MSG_IMPPDAT,
             tskcmd.c       5747                  0,
             tskcmd.c       5748                  0,
             tskcmd.c       5749                  &MentePcSendbuf[0],
             tskcmd.c       5750                  (len+5)
             tskcmd.c       5751              );
    000031CE 7D05                   ADD         #5,R13
    000031D0 6EC3                   MOV         R12,R14
    000031D2 3E0C                   ADD         R0,R14
    000031D4 E003                   MOV         #3,R0      ; H'00000003
    000031D6 64C3                   MOV         R12,R4
    000031D8 80E1                   MOV.B       R0,@(1,R14); MentePcSendbuf[]
    000031DA D117                   MOV.L       L1376+22,R1; _CalcBCC
    000031DC 410B                   JSR         @R1
    000031DE 7401                   ADD         #1,R4
    000031E0 65F3                   MOV         R15,R5
    000031E2 7504                   ADD         #4,R5
    000031E4 6403                   MOV         R0,R4
    000031E6 D720                   MOV.L       L1376+70,R7; _DectoHexASC
    000031E8 470B                   JSR         @R7
    000031EA 66F3                   MOV         R15,R6
    000031EC 30F14004               MOV.B       @(4:12,R15),R0; bcch
    000031F0 80E2                   MOV.B       R0,@(2,R14); MentePcSendbuf[]
    000031F2 30F14000               MOV.B       @(0:12,R15),R0; bccl
    000031F6 80E3                   MOV.B       R0,@(3,R14); MentePcSendbuf[]
    000031F8 E00D                   MOV         #13,R0     ; H'0000000D
    000031FA 80E4                   MOV.B       R0,@(4,R14); MentePcSendbuf[]
    000031FC 2FD6                   MOV.L       R13,@-R15
    000031FE 2FC6                   MOV.L       R12,@-R15
    00003200 EC00                   MOV         #0,R12     ; H'00000000
    00003202 2FC6                   MOV.L       R12,@-R15
    00003204 2FC6                   MOV.L       R12,@-R15
    00003206 ED24                   MOV         #36,R13    ; H'00000024
    00003208 2FD6                   MOV.L       R13,@-R15
    0000320A E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    0000320C 611C                   EXTU.B      R1,R1
    0000320E 6713                   MOV         R1,R7
    00003210 2F16                   MOV.L       R1,@-R15
    00003212 E604                   MOV         #4,R6      ; H'00000004
    00003214 E503                   MOV         #3,R5      ; H'00000003
    00003216 D218                   MOV.L       L1376+86,R2; _mbx_send
    00003218 420B                   JSR         @R2
    0000321A E405                   MOV         #5,R4      ; H'00000005
    0000321C 7F20                   ADD         #32,R15
    0000321E 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       5752    }
    00003220 006B                   RTS/N
    00003222              L1376:
    00003222 00000002               .RES.W      1
    00003224 <0000009C>             .DATA.L     H'0000009C+__$tp
    00003228 <00000000>             .DATA.L     __$TP_RP1_SEND_FORM02
    0000322C <00000000>             .DATA.L     _memcpy
    00003230 <00000000>             .DATA.L     _DectoAscH
    00003234 <00000000>             .DATA.L     _DectoAscL
    00003238 <00000000>             .DATA.L     _CalcBCC
    0000323C <00000000>             .DATA.L     _HextoAsc
    00003240 <00000000>             .DATA.L     __$TP_RP1_SEND_FORM01
    00003244 <00000000>             .DATA.L     __$BkP10
    00003248 <00000000>             .DATA.L     _DeviceProtcolNoGet
    0000324C <00000000>             .DATA.L     _DeviceStatusGet
    00003250 <00000000>             .DATA.L     _DeviceStepGet
    00003254 <00000000>             .DATA.L     __$rspbuf
    00003258 <00000000>             .DATA.L     _memset
    0000325C <00000000>             .DATA.L     L1627
    00003260 <00000000>             .DATA.L     _sprintf
    00003264 <00000000>             .DATA.L     _strlen
    00003268 <00000000>             .DATA.L     _DectoHexASC
    0000326C <00000000>             .DATA.L     __$ExpRunlSeqno
    00003270 <00000000>             .DATA.L     L1628
    00003274 <00000000>             .DATA.L     _MentePcSendbuf
    00003278 <00000000>             .DATA.L     _mbx_send
    0000327C <00000000>             .DATA.L     __$ImpExpRcvData
    00003280 <00000000>             .DATA.L     L1629
    00003284 <00000000>             .DATA.L     __$lendbg
             tskcmd.c       5753    /***********************************************************************
             tskcmd.c       5754    *     
             tskcmd.c       5755    * [概要]  タッチパネルへエクスポート要求作成＆送信
             tskcmd.c       5756    * [引数]  
             tskcmd.c       5757    * [戻値]  −
             tskcmd.c       5758    *     
             tskcmd.c       5759    ***********************************************************************/
             tskcmd.c       5760    void TplRpExpReqSend()
    00003288              _TplRpExpReqSend:                ; function: TplRpExpReqSend
                                                           ; frame size=48
    00003288 4CF0                   MOVMU.L     R12,@-R15
    0000328A 7FF8                   ADD         #-8,R15
             tskcmd.c       5761    {
             tskcmd.c       5762      UB bcc;
             tskcmd.c       5763      UB bcch;
             tskcmd.c       5764      UB bccl;
             tskcmd.c       5765      INT  len;
             tskcmd.c       5766    
             tskcmd.c       5767      sprintf( ( char * )&MentePcSendbuf[1], "WN RP1 %s", &ImpExpRcvData[0] );
    0000328C D152                   MOV.L       L658,R1    ; __$ImpExpRcvData
    0000328E 2F16                   MOV.L       R1,@-R15
    00003290 DE52                   MOV.L       L658+4,R14 ; L1631
    00003292 2FE6                   MOV.L       R14,@-R15
    00003294 DC52                   MOV.L       L658+8,R12 ; _MentePcSendbuf
    00003296 64C3                   MOV         R12,R4
    00003298 D152                   MOV.L       L658+12,R1 ; _sprintf
    0000329A 410B                   JSR         @R1
    0000329C 7401                   ADD         #1,R4
    0000329E 7F08                   ADD         #8,R15
             tskcmd.c       5768      bcc = bcch = bccl = CLR;
    000032A0 E000                   MOV         #0,R0      ; H'00000000
    000032A2 0F04                   MOV.B       R0,@(R0,R15); bccl
             tskcmd.c       5769    
             tskcmd.c       5770      len = strlen(&ImpExpRcvData);
             tskcmd.c       5771      MentePcSendbuf[0] = STX;
             tskcmd.c       5772      MentePcSendbuf[(len+1)] = ETX;
    000032A4 3F010004               MOV.B       R0,@(4:12,R15); bcch
    000032A8 D44B                   MOV.L       L658,R4    ; __$ImpExpRcvData
    000032AA D54F                   MOV.L       L658+16,R5 ; _strlen
    000032AC 450B                   JSR         @R5
    000032AE 6EC3                   MOV         R12,R14
    000032B0 6D03                   MOV         R0,R13
    000032B2 E602                   MOV         #2,R6      ; H'00000002
    000032B4 6503                   MOV         R0,R5
    000032B6 3E0C                   ADD         R0,R14
    000032B8 E003                   MOV         #3,R0      ; H'00000003
    000032BA 2C60                   MOV.B       R6,@R12    ; MentePcSendbuf[]
    000032BC 80E1                   MOV.B       R0,@(1,R14); MentePcSendbuf[]
             tskcmd.c       5773    
             tskcmd.c       5774      bcc = CalcBCC( &MentePcSendbuf[1], len );
    000032BE 64C3                   MOV         R12,R4
    000032C0 7401                   ADD         #1,R4
             tskcmd.c       5775      DectoHexASC( bcc, &bcch, &bccl );
             tskcmd.c       5776    
             tskcmd.c       5777      MentePcSendbuf[(len+2)] = bcch;
             tskcmd.c       5778      MentePcSendbuf[(len+3)] = bccl;
             tskcmd.c       5779      MentePcSendbuf[(len+4)] = CRCHR;
             tskcmd.c       5780    
             tskcmd.c       5781      mbx_send    (
             tskcmd.c       5782                  ID_TSK_CMD,
             tskcmd.c       5783                  ID_MPF_TXEX,
             tskcmd.c       5784                  ID_MBX_TXEX,
             tskcmd.c       5785                    NO_DATA,            // procid
             tskcmd.c       5786                  NO_DATA,
             tskcmd.c       5787                  ID_MSG_IMPPDAT,
             tskcmd.c       5788                  0,
             tskcmd.c       5789                  0,
             tskcmd.c       5790                  &MentePcSendbuf[0],
             tskcmd.c       5791                  (len+5)
             tskcmd.c       5792              );
    000032C2 D74A                   MOV.L       L658+20,R7 ; _CalcBCC
    000032C4 470B                   JSR         @R7
    000032C6 7D05                   ADD         #5,R13
    000032C8 65F3                   MOV         R15,R5
    000032CA 7504                   ADD         #4,R5
    000032CC 6403                   MOV         R0,R4
    000032CE D148                   MOV.L       L658+24,R1 ; _DectoHexASC
    000032D0 410B                   JSR         @R1
    000032D2 66F3                   MOV         R15,R6
    000032D4 30F14004               MOV.B       @(4:12,R15),R0; bcch
    000032D8 80E2                   MOV.B       R0,@(2,R14); MentePcSendbuf[]
    000032DA 30F14000               MOV.B       @(0:12,R15),R0; bccl
    000032DE 80E3                   MOV.B       R0,@(3,R14); MentePcSendbuf[]
    000032E0 E00D                   MOV         #13,R0     ; H'0000000D
    000032E2 80E4                   MOV.B       R0,@(4,R14); MentePcSendbuf[]
    000032E4 2FD6                   MOV.L       R13,@-R15
    000032E6 2FC6                   MOV.L       R12,@-R15
    000032E8 E700                   MOV         #0,R7      ; H'00000000
    000032EA 2F76                   MOV.L       R7,@-R15
    000032EC 2F76                   MOV.L       R7,@-R15
    000032EE EC24                   MOV         #36,R12    ; H'00000024
    000032F0 2FC6                   MOV.L       R12,@-R15
    000032F2 EDFF                   MOV         #-1,R13    ; H'FFFFFFFF
    000032F4 6DDC                   EXTU.B      R13,R13
    000032F6 67D3                   MOV         R13,R7
    000032F8 2FD6                   MOV.L       R13,@-R15
    000032FA E604                   MOV         #4,R6      ; H'00000004
    000032FC E503                   MOV         #3,R5      ; H'00000003
    000032FE D23D                   MOV.L       L658+28,R2 ; _mbx_send
    00003300 420B                   JSR         @R2
    00003302 E405                   MOV         #5,R4      ; H'00000005
    00003304 7F20                   ADD         #32,R15
    00003306 4CF4                   MOVMU.L     @R15+,R12
             tskcmd.c       5793    }
    00003308 006B                   RTS/N
             tskcmd.c       5794    
             tskcmd.c       5795    /***********************************************************************
             tskcmd.c       5796    *     
             tskcmd.c       5797    * [概要]  タッチパネル識別ID電文作成
             tskcmd.c       5798    * [引数]  電文、識別ID
             tskcmd.c       5799    * [戻値]  −
             tskcmd.c       5800    *     
             tskcmd.c       5801    ***********************************************************************/
             tskcmd.c       5802    static void TplRidDataSend( UB *txdat, UB id )
    0000330A              __$TplRidDataSend:               ; function: __$TplRidDataSend
                                                           ; frame size=56
    0000330A 48F0                   MOVMU.L     R8,@-R15
    0000330C D13A                   MOV.L       L658+32,R1 ; __$TP_RID_SEND_FORM
             tskcmd.c       5803    {
             tskcmd.c       5804    // 識別01 コマンド                                        0    1    2    3    4    5    6    7    8    9   10
             tskcmd.c       5805    // static const TPN_REQ_DAT TP_RID_SEND_FORM   = { 11, STX, 'W', 'N', ' ', 'R', 'I', 'D', ' ', '*', '*', ETX, 0x30, 0x30, 0x0d };
             tskcmd.c       5806      UB  bcccal;
             tskcmd.c       5807      UB  bcccal_h;
             tskcmd.c       5808      UB  bcccal_l;
             tskcmd.c       5809      UB  datsiz;
             tskcmd.c       5810      UB  calsiz;
             tskcmd.c       5811      UB  comsiz;
             tskcmd.c       5812    
             tskcmd.c       5813      datsiz = TP_RID_SEND_FORM.siz;
    0000330E 6912                   MOV.L       @R1,R9     ; TP_RID_SEND_FORM.siz
    00003310 6C43                   MOV         R4,R12
    00003312 6A53                   MOV         R5,R10
             tskcmd.c       5814      calsiz = TP_RID_SEND_FORM.siz - 2;
             tskcmd.c       5815      comsiz = TP_RID_SEND_FORM.siz + 3;
             tskcmd.c       5816      memcpy( &txdat[0],&TP_RID_SEND_FORM.req[0], comsiz);
    00003314 6293                   MOV         R9,R2
    00003316 7203                   ADD         #3,R2
    00003318 682C                   EXTU.B      R2,R8
    0000331A D538                   MOV.L       L658+36,R5 ; H'00000004+__$TP_RID_SEND_FORM
    0000331C D738                   MOV.L       L658+40,R7 ; _memcpy
    0000331E 470B                   JSR         @R7
    00003320 6683                   MOV         R8,R6
             tskcmd.c       5817      txdat[10] = HextoAsc(  ((id >> 4) & 0x0f)  );
    00003322 6DAC                   EXTU.B      R10,R13
    00003324 E5FC                   MOV         #-4,R5     ; H'FFFFFFFC
    00003326 60D3                   MOV         R13,R0
    00003328 405C                   SHAD        R5,R0
    0000332A C90F                   AND         #15,R0
    0000332C 6B93                   MOV         R9,R11
    0000332E 6403                   MOV         R0,R4
    00003330 DA34                   MOV.L       L658+44,R10; _HextoAsc
    00003332 4A0B                   JSR         @R10
    00003334 7BFE                   ADD         #-2,R11
    00003336 80CA                   MOV.B       R0,@(10,R12); txdat[]
             tskcmd.c       5818      txdat[11] = HextoAsc(  ( id       & 0x0f)  );
    00003338 60D3                   MOV         R13,R0
    0000333A C90F                   AND         #15,R0
    0000333C 699C                   EXTU.B      R9,R9
    0000333E 4A0B                   JSR         @R10
    00003340 6403                   MOV         R0,R4
    00003342 80CB                   MOV.B       R0,@(11,R12); txdat[]
             tskcmd.c       5819      
             tskcmd.c       5820      
             tskcmd.c       5821      bcccal = CalcBCC( &txdat[1], calsiz );
    00003344 65BC                   EXTU.B      R11,R5
    00003346 64C3                   MOV         R12,R4
    00003348 DB28                   MOV.L       L658+20,R11; _CalcBCC
    0000334A 4B0B                   JSR         @R11
    0000334C 7401                   ADD         #1,R4
    0000334E 6D0C                   EXTU.B      R0,R13
             tskcmd.c       5822      txdat[(datsiz+0)] = HextoAsc(  ((bcccal >> 4) & 0x0f)  );
    00003350 E7FC                   MOV         #-4,R7     ; H'FFFFFFFC
    00003352 60D3                   MOV         R13,R0
    00003354 407C                   SHAD        R7,R0
    00003356 C90F                   AND         #15,R0
    00003358 6EC3                   MOV         R12,R14
    0000335A 6403                   MOV         R0,R4
    0000335C 4A0B                   JSR         @R10
    0000335E 3E9C                   ADD         R9,R14
    00003360 2E00                   MOV.B       R0,@R14    ; txdat[]
             tskcmd.c       5823      txdat[(datsiz+1)] = HextoAsc(  ( bcccal       & 0x0f)  );
    00003362 60D3                   MOV         R13,R0
    00003364 C90F                   AND         #15,R0
    00003366 4A0B                   JSR         @R10
    00003368 6403                   MOV         R0,R4
    0000336A 80E1                   MOV.B       R0,@(1,R14); txdat[]
             tskcmd.c       5824    
             tskcmd.c       5825      mbx_send    (
             tskcmd.c       5826                  ID_TSK_CMD,
             tskcmd.c       5827                  ID_MPF_TXEX,
             tskcmd.c       5828                  ID_MBX_TXEX,
             tskcmd.c       5829                    NO_DATA,            // procid
             tskcmd.c       5830                  NO_DATA,
             tskcmd.c       5831                  ID_MSG_CMD,
             tskcmd.c       5832                  0,
             tskcmd.c       5833                  0,
             tskcmd.c       5834                  txdat,
             tskcmd.c       5835                  comsiz
             tskcmd.c       5836              );
    0000336C 2F86                   MOV.L       R8,@-R15
    0000336E 2FC6                   MOV.L       R12,@-R15
    00003370 EC00                   MOV         #0,R12     ; H'00000000
    00003372 2FC6                   MOV.L       R12,@-R15
    00003374 2FC6                   MOV.L       R12,@-R15
    00003376 E164                   MOV         #100,R1    ; H'00000064
    00003378 2F16                   MOV.L       R1,@-R15
    0000337A E8FF                   MOV         #-1,R8     ; H'FFFFFFFF
    0000337C 688C                   EXTU.B      R8,R8
    0000337E 6783                   MOV         R8,R7
    00003380 2F86                   MOV.L       R8,@-R15
    00003382 E604                   MOV         #4,R6      ; H'00000004
    00003384 E503                   MOV         #3,R5      ; H'00000003
    00003386 D21B                   MOV.L       L658+28,R2 ; _mbx_send
    00003388 420B                   JSR         @R2
    0000338A E405                   MOV         #5,R4      ; H'00000005
    0000338C 7F18                   ADD         #24,R15
    0000338E 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       5837    }
    00003390 006B                   RTS/N
             tskcmd.c       5838    /***********************************************************************
             tskcmd.c       5839    *     
             tskcmd.c       5840    * [概要]  タッチパネル送信データを送信タスクへ通知
             tskcmd.c       5841    * [引数]  電文、識別ID
             tskcmd.c       5842    * [戻値]  −
             tskcmd.c       5843    *     
             tskcmd.c       5844    ***********************************************************************/
             tskcmd.c       5845    static void TplCommDataSend( UB *tpdat, INT tpsiz )
    00003392              __$TplCommDataSend:              ; function: __$TplCommDataSend
                                                           ; frame size=28
    00003392 4F22                   STS.L       PR,@-R15
             tskcmd.c       5846    {
             tskcmd.c       5847      mbx_send    (
             tskcmd.c       5848                  ID_TSK_CMD,
             tskcmd.c       5849                  ID_MPF_TXEX,
             tskcmd.c       5850                  ID_MBX_TXEX,
             tskcmd.c       5851                    NO_DATA,            // procid
             tskcmd.c       5852                  NO_DATA,
             tskcmd.c       5853                  ID_MSG_CMD,
             tskcmd.c       5854                  0,
             tskcmd.c       5855                  0,
             tskcmd.c       5856                  tpdat,
             tskcmd.c       5857                  tpsiz
             tskcmd.c       5858              );
    00003394 2F56                   MOV.L       R5,@-R15
    00003396 2F46                   MOV.L       R4,@-R15
    00003398 E100                   MOV         #0,R1      ; H'00000000
    0000339A 2F16                   MOV.L       R1,@-R15
    0000339C 2F16                   MOV.L       R1,@-R15
    0000339E E464                   MOV         #100,R4    ; H'00000064
    000033A0 2F46                   MOV.L       R4,@-R15
    000033A2 E6FF                   MOV         #-1,R6     ; H'FFFFFFFF
    000033A4 666C                   EXTU.B      R6,R6
    000033A6 6763                   MOV         R6,R7
    000033A8 2F66                   MOV.L       R6,@-R15
    000033AA E604                   MOV         #4,R6      ; H'00000004
    000033AC E503                   MOV         #3,R5      ; H'00000003
    000033AE D211                   MOV.L       L658+28,R2 ; _mbx_send
    000033B0 420B                   JSR         @R2
    000033B2 E405                   MOV         #5,R4      ; H'00000005
    000033B4 7F18                   ADD         #24,R15
    000033B6 4F26                   LDS.L       @R15+,PR
             tskcmd.c       5859    }
    000033B8 006B                   RTS/N
             tskcmd.c       5860    /***********************************************************************
             tskcmd.c       5861    *     
             tskcmd.c       5862    * [概要]  タッチパネル送信データを送信タスクへ通知
             tskcmd.c       5863    * [引数]  電文、識別ID
             tskcmd.c       5864    * [戻値]  −
             tskcmd.c       5865    *     
             tskcmd.c       5866    ***********************************************************************/
             tskcmd.c       5867    static void TplCommDataSendImp( UB *tpdat, INT tpsiz, UB msg )
             tskcmd.c       5868    {
             tskcmd.c       5869      mbx_send    (
             tskcmd.c       5870                  ID_TSK_CMD,
             tskcmd.c       5871                  ID_MPF_TXEX,
             tskcmd.c       5872                  ID_MBX_TXEX,
             tskcmd.c       5873                    NO_DATA,            // procid
             tskcmd.c       5874                  NO_DATA,
             tskcmd.c       5875                  msg,
             tskcmd.c       5876                  0,
             tskcmd.c       5877                  0,
             tskcmd.c       5878                  tpdat,
             tskcmd.c       5879                  tpsiz
             tskcmd.c       5880              );
             tskcmd.c       5881    }
             tskcmd.c       5882    
             tskcmd.c       5883    /***********************************************************************
             tskcmd.c       5884    * 
             tskcmd.c       5885    * [概要]  
             tskcmd.c       5886    * [引数]  
             tskcmd.c       5887    * [戻値]  0xff:電文異常
             tskcmd.c       5888    * 
             tskcmd.c       5889    ***********************************************************************/
             tskcmd.c       5890    static ER TpCmdCheck( T_CMD_MSG* mrcv )
             tskcmd.c       5891    {
             tskcmd.c       5892      ER  err = E_COM_CMDDEF;
             tskcmd.c       5893      UB  id;
             tskcmd.c       5894      UB  cmd1wk = 'A';
             tskcmd.c       5895      UB  cmd2wk = '$';
             tskcmd.c       5896    
             tskcmd.c       5897      
             tskcmd.c       5898      // TPコマンドチェック
             tskcmd.c       5899      if( 
             tskcmd.c       5900          ( mrcv->msgdata.data[0]  == cmd1wk  )&&
             tskcmd.c       5901          ( mrcv->msgdata.data[1]  == cmd2wk  ) 
             tskcmd.c       5902      )
             tskcmd.c       5903      {
             tskcmd.c       5904          id    = ((AsctoHex( mrcv->msgdata.data[2] ) << 4) & 0xf0);
             tskcmd.c       5905          id   |= ((AsctoHex( mrcv->msgdata.data[3] )     ) & 0x0f);
             tskcmd.c       5906    
             tskcmd.c       5907          // 識別IDチェック
             tskcmd.c       5908          if(
             tskcmd.c       5909              (( id >= ID_TPL_FWVER  )&&( id <= ID_TPL_INITA  ))||
             tskcmd.c       5910              (( id >= ID_TPL_INF01  )&&( id <= ID_TPL_INF10  ))||
             tskcmd.c       5911              (( id >= ID_TPL_REC01  )&&( id <= ID_TPL_REC10  ))||
             tskcmd.c       5912              (( id >= ID_TPL_CHG01  )&&( id <= ID_TPL_CHG10  ))||
             tskcmd.c       5913              (( id >= ID_TPL_DEL01  )&&( id <= ID_TPL_DEL10  ))||
             tskcmd.c       5914              (( id >= ID_TPL_FWPOL  )&&( id <= ID_TPL_ABORT  ))||
             tskcmd.c       5915              (( id >= ID_TPL_OPTCD  )&&( id <= ID_TPL_CLALL  ))||
             tskcmd.c       5916              (( id >= ID_TPL_LDLMP  )&&( id <= ID_TPL_PTLMP  ))
             tskcmd.c       5917          )
             tskcmd.c       5918          {
             tskcmd.c       5919              // 正常
             tskcmd.c       5920              err = E_SUCCESS;
             tskcmd.c       5921          }
             tskcmd.c       5922      }
             tskcmd.c       5923    
             tskcmd.c       5924      return( err );
             tskcmd.c       5925    }
             tskcmd.c       5926    /***********************************************************************
             tskcmd.c       5927    * 
             tskcmd.c       5928    * [概要]  QG12S処理リスト
             tskcmd.c       5929    * [引数]  
             tskcmd.c       5930    * [戻値]  NO_DATA：空き無し
             tskcmd.c       5931    * 
             tskcmd.c       5932    ***********************************************************************/
             tskcmd.c       5933    static ER QgProcList( T_CMD_MSG* mrcv )
    000033BA              __$QgProcList:                   ; function: __$QgProcList
                                                           ; frame size=4
    000033BA 4F22                   STS.L       PR,@-R15
             tskcmd.c       5934    {
             tskcmd.c       5935      ER  result = E_SUCCESS;
             tskcmd.c       5936      UB  prid1;
             tskcmd.c       5937      
             tskcmd.c       5938      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       5939    
             tskcmd.c       5940      switch( prid1 )
    000033BC 36418018               MOVU.B      @(24,R4),R6; (mrcv)->prid1
    000033C0 E161                   MOV         #97,R1     ; H'00000061
    000033C2 76FF                   ADD         #-1,R6
    000033C4 3616                   CMP/HI      R1,R6
    000033C6 8F02                   BF/S        L1396
    000033C8 E500                   MOV         #0,R5      ; H'00000000
    000033CA A086                   BRA         L657
    000033CC 0009                   NOP
    000033CE              L1396:
    000033CE 4600                   SHLL        R6
    000033D0 C70D                   MOVA        L659,R0
    000033D2 006D                   MOV.W       @(R0,R6),R0
    000033D4 0023                   BRAF        R0
    000033D6 0009                   NOP
    000033D8              L658:
    000033D8 <00000000>             .DATA.L     __$ImpExpRcvData
    000033DC <00000000>             .DATA.L     L1631
    000033E0 <00000000>             .DATA.L     _MentePcSendbuf
    000033E4 <00000000>             .DATA.L     _sprintf
    000033E8 <00000000>             .DATA.L     _strlen
    000033EC <00000000>             .DATA.L     _CalcBCC
    000033F0 <00000000>             .DATA.L     _DectoHexASC
    000033F4 <00000000>             .DATA.L     _mbx_send
    000033F8 <00000000>             .DATA.L     __$TP_RID_SEND_FORM
    000033FC <00000004>             .DATA.L     H'00000004+__$TP_RID_SEND_FORM
    00003400 <00000000>             .DATA.L     _memcpy
    00003404 <00000000>             .DATA.L     _HextoAsc
    00003408              L659:
    00003408 0102                   .DATA.W     L592-L658
    0000340A 0102                   .DATA.W     L593-L658
    0000340C 0102                   .DATA.W     L594-L658
    0000340E 0102                   .DATA.W     L595-L658
    00003410 00F4                   .DATA.W     L596-L658
    00003412 0102                   .DATA.W     L591-L658
    00003414 0102                   .DATA.W     L591-L658
    00003416 0102                   .DATA.W     L597-L658
    00003418 0102                   .DATA.W     L591-L658
    0000341A 0102                   .DATA.W     L591-L658
    0000341C 0102                   .DATA.W     L591-L658
    0000341E 0102                   .DATA.W     L591-L658
    00003420 0102                   .DATA.W     L591-L658
    00003422 0102                   .DATA.W     L591-L658
    00003424 0102                   .DATA.W     L591-L658
    00003426 0102                   .DATA.W     L591-L658
    00003428 0102                   .DATA.W     L598-L658
    0000342A 0102                   .DATA.W     L599-L658
    0000342C 0102                   .DATA.W     L600-L658
    0000342E 0102                   .DATA.W     L601-L658
    00003430 0102                   .DATA.W     L602-L658
    00003432 0102                   .DATA.W     L603-L658
    00003434 0102                   .DATA.W     L604-L658
    00003436 0102                   .DATA.W     L605-L658
    00003438 0102                   .DATA.W     L606-L658
    0000343A 0102                   .DATA.W     L607-L658
    0000343C 0102                   .DATA.W     L591-L658
    0000343E 0102                   .DATA.W     L591-L658
    00003440 0102                   .DATA.W     L591-L658
    00003442 0102                   .DATA.W     L591-L658
    00003444 0102                   .DATA.W     L591-L658
    00003446 0102                   .DATA.W     L591-L658
    00003448 0102                   .DATA.W     L608-L658
    0000344A 0102                   .DATA.W     L609-L658
    0000344C 0102                   .DATA.W     L610-L658
    0000344E 0102                   .DATA.W     L611-L658
    00003450 0102                   .DATA.W     L612-L658
    00003452 0102                   .DATA.W     L613-L658
    00003454 0102                   .DATA.W     L614-L658
    00003456 0102                   .DATA.W     L615-L658
    00003458 0102                   .DATA.W     L616-L658
    0000345A 0102                   .DATA.W     L617-L658
    0000345C 0102                   .DATA.W     L591-L658
    0000345E 0102                   .DATA.W     L591-L658
    00003460 0102                   .DATA.W     L591-L658
    00003462 0102                   .DATA.W     L591-L658
    00003464 0102                   .DATA.W     L591-L658
    00003466 0102                   .DATA.W     L591-L658
    00003468 0102                   .DATA.W     L618-L658
    0000346A 0102                   .DATA.W     L619-L658
    0000346C 0102                   .DATA.W     L620-L658
    0000346E 0102                   .DATA.W     L621-L658
    00003470 0102                   .DATA.W     L622-L658
    00003472 0102                   .DATA.W     L623-L658
    00003474 0102                   .DATA.W     L624-L658
    00003476 0102                   .DATA.W     L625-L658
    00003478 0102                   .DATA.W     L626-L658
    0000347A 0102                   .DATA.W     L627-L658
    0000347C 0102                   .DATA.W     L591-L658
    0000347E 0102                   .DATA.W     L591-L658
    00003480 0102                   .DATA.W     L591-L658
    00003482 0102                   .DATA.W     L591-L658
    00003484 0102                   .DATA.W     L591-L658
    00003486 0102                   .DATA.W     L591-L658
    00003488 0102                   .DATA.W     L628-L658
    0000348A 0102                   .DATA.W     L629-L658
    0000348C 0102                   .DATA.W     L630-L658
    0000348E 0102                   .DATA.W     L631-L658
    00003490 0102                   .DATA.W     L632-L658
    00003492 0102                   .DATA.W     L633-L658
    00003494 0102                   .DATA.W     L634-L658
    00003496 0102                   .DATA.W     L635-L658
    00003498 0102                   .DATA.W     L636-L658
    0000349A 0102                   .DATA.W     L637-L658
    0000349C 0102                   .DATA.W     L591-L658
    0000349E 0102                   .DATA.W     L591-L658
    000034A0 0102                   .DATA.W     L591-L658
    000034A2 0102                   .DATA.W     L591-L658
    000034A4 0102                   .DATA.W     L591-L658
    000034A6 0102                   .DATA.W     L638-L658
    000034A8 00FC                   .DATA.W     L639-L658
    000034AA 0102                   .DATA.W     L640-L658
    000034AC 0102                   .DATA.W     L641-L658
    000034AE 0102                   .DATA.W     L642-L658
    000034B0 0102                   .DATA.W     L643-L658
    000034B2 0102                   .DATA.W     L644-L658
    000034B4 0102                   .DATA.W     L645-L658
    000034B6 0102                   .DATA.W     L646-L658
    000034B8 0102                   .DATA.W     L647-L658
    000034BA 0102                   .DATA.W     L649-L658
    000034BC 0102                   .DATA.W     L650-L658
    000034BE 0102                   .DATA.W     L651-L658
    000034C0 0102                   .DATA.W     L648-L658
    000034C2 0102                   .DATA.W     L591-L658
    000034C4 0102                   .DATA.W     L591-L658
    000034C6 0102                   .DATA.W     L652-L658
    000034C8 0102                   .DATA.W     L653-L658
    000034CA 0102                   .DATA.W     L654-L658
    000034CC              L596:
             tskcmd.c       5941      {
             tskcmd.c       5942          case ID_TPL_FWVER:        /* FWバージョン情報                */
             tskcmd.c       5943              break;
             tskcmd.c       5944          case ID_TPL_OPTIF:        /* オプション情報                  */
             tskcmd.c       5945              break;
             tskcmd.c       5946          case ID_TPL_LGIN1:        /* ログイン認証1                   */
             tskcmd.c       5947          case ID_TPL_LGIN2:        /* ログイン認証2                   */
             tskcmd.c       5948              break;
             tskcmd.c       5949          case ID_TPL_INITA:        /* 初期化指示                      */
             tskcmd.c       5950              result = QgProcList_INITA( mrcv );
    000034CC B007                   BSR         __$QgProcList_INITA
    000034CE 0009                   NOP
    000034D0 A003                   BRA         L657
    000034D2 6503                   MOV         R0,R5
    000034D4              L639:
             tskcmd.c       5951              break;
             tskcmd.c       5952          case ID_TPL_USRAL:        /* ユーザー情報全取得              */
             tskcmd.c       5953              break;
             tskcmd.c       5954          case ID_TPL_INF01:        /* ユーザー1情報                   */
             tskcmd.c       5955          case ID_TPL_INF02:        /* ユーザー2情報                   */
             tskcmd.c       5956          case ID_TPL_INF03:        /* ユーザー3情報                   */
             tskcmd.c       5957          case ID_TPL_INF04:        /* ユーザー4情報                   */
             tskcmd.c       5958          case ID_TPL_INF05:        /* ユーザー5情報                   */
             tskcmd.c       5959          case ID_TPL_INF06:        /* ユーザー6情報                   */
             tskcmd.c       5960          case ID_TPL_INF07:        /* ユーザー7情報                   */
             tskcmd.c       5961          case ID_TPL_INF08:        /* ユーザー8情報                   */
             tskcmd.c       5962          case ID_TPL_INF09:        /* ユーザー9情報                   */
             tskcmd.c       5963          case ID_TPL_INF10:        /* ユーザー10情報                  */
             tskcmd.c       5964              break;
             tskcmd.c       5965          case ID_TPL_REC01:        /* ユーザー1登録                   */
             tskcmd.c       5966          case ID_TPL_REC02:        /* ユーザー2登録                   */
             tskcmd.c       5967          case ID_TPL_REC03:        /* ユーザー3登録                   */
             tskcmd.c       5968          case ID_TPL_REC04:        /* ユーザー4登録                   */
             tskcmd.c       5969          case ID_TPL_REC05:        /* ユーザー5登録                   */
             tskcmd.c       5970          case ID_TPL_REC06:        /* ユーザー6登録                   */
             tskcmd.c       5971          case ID_TPL_REC07:        /* ユーザー7登録                   */
             tskcmd.c       5972          case ID_TPL_REC08:        /* ユーザー8登録                   */
             tskcmd.c       5973          case ID_TPL_REC09:        /* ユーザー9登録                   */
             tskcmd.c       5974          case ID_TPL_REC10:        /* ユーザー10登録                  */
             tskcmd.c       5975              break;
             tskcmd.c       5976          case ID_TPL_CHG01:        /* ユーザー1変更                   */
             tskcmd.c       5977          case ID_TPL_CHG02:        /* ユーザー2変更                   */
             tskcmd.c       5978          case ID_TPL_CHG03:        /* ユーザー3変更                   */
             tskcmd.c       5979          case ID_TPL_CHG04:        /* ユーザー4変更                   */
             tskcmd.c       5980          case ID_TPL_CHG05:        /* ユーザー5変更                   */
             tskcmd.c       5981          case ID_TPL_CHG06:        /* ユーザー6変更                   */
             tskcmd.c       5982          case ID_TPL_CHG07:        /* ユーザー7変更                   */
             tskcmd.c       5983          case ID_TPL_CHG08:        /* ユーザー8変更                   */
             tskcmd.c       5984          case ID_TPL_CHG09:        /* ユーザー9変更                   */
             tskcmd.c       5985          case ID_TPL_CHG10:        /* ユーザー10変更                  */
             tskcmd.c       5986              break;
             tskcmd.c       5987          case ID_TPL_DEL01:        /* ユーザー1削除                   */
             tskcmd.c       5988          case ID_TPL_DEL02:        /* ユーザー2削除                   */
             tskcmd.c       5989          case ID_TPL_DEL03:        /* ユーザー3削除                   */
             tskcmd.c       5990          case ID_TPL_DEL04:        /* ユーザー4削除                   */
             tskcmd.c       5991          case ID_TPL_DEL05:        /* ユーザー5削除                   */
             tskcmd.c       5992          case ID_TPL_DEL06:        /* ユーザー6削除                   */
             tskcmd.c       5993          case ID_TPL_DEL07:        /* ユーザー7削除                   */
             tskcmd.c       5994          case ID_TPL_DEL08:        /* ユーザー8削除                   */
             tskcmd.c       5995          case ID_TPL_DEL09:        /* ユーザー9削除                   */
             tskcmd.c       5996          case ID_TPL_DEL10:        /* ユーザー10削除                  */
             tskcmd.c       5997              break;
             tskcmd.c       5998          case ID_TPL_FWPOL:        /* FW状態（ポーリング）            */
             tskcmd.c       5999              break;
             tskcmd.c       6000          case ID_TPL_PRTCL:        /* プロトコル実行                  */
             tskcmd.c       6001              result = QgProcList_PRTCL( mrcv );
    000034D4 B100                   BSR         __$QgProcList_PRTCL
    000034D6 0009                   NOP
    000034D8 6503                   MOV         R0,R5
    000034DA              L654:
    000034DA              L653:
    000034DA              L652:
    000034DA              L651:
    000034DA              L650:
    000034DA              L649:
    000034DA              L648:
    000034DA              L647:
    000034DA              L646:
    000034DA              L645:
    000034DA              L644:
    000034DA              L643:
    000034DA              L642:
    000034DA              L641:
    000034DA              L640:
    000034DA              L638:
    000034DA              L637:
    000034DA              L636:
    000034DA              L635:
    000034DA              L634:
    000034DA              L633:
    000034DA              L632:
    000034DA              L631:
    000034DA              L630:
    000034DA              L629:
    000034DA              L628:
    000034DA              L627:
    000034DA              L626:
    000034DA              L625:
    000034DA              L624:
    000034DA              L623:
    000034DA              L622:
    000034DA              L621:
    000034DA              L620:
    000034DA              L619:
    000034DA              L618:
    000034DA              L617:
    000034DA              L616:
    000034DA              L615:
    000034DA              L614:
    000034DA              L613:
    000034DA              L612:
    000034DA              L611:
    000034DA              L610:
    000034DA              L609:
    000034DA              L608:
    000034DA              L607:
    000034DA              L606:
    000034DA              L605:
    000034DA              L604:
    000034DA              L603:
    000034DA              L602:
    000034DA              L601:
    000034DA              L600:
    000034DA              L599:
    000034DA              L598:
    000034DA              L597:
    000034DA              L595:
    000034DA              L594:
    000034DA              L593:
    000034DA              L592:
    000034DA              L591:
    000034DA              L657:
    000034DA 4F26                   LDS.L       @R15+,PR
             tskcmd.c       6002              break;
             tskcmd.c       6003          case ID_TPL_RESTA:        /* リスタート実行                  */
             tskcmd.c       6004              break;
             tskcmd.c       6005          case ID_TPL_PAUSE:        /* 一時停止                        */
             tskcmd.c       6006              break;
             tskcmd.c       6007          case ID_TPL_RESUM:        /* 再開                            */
             tskcmd.c       6008              break;
             tskcmd.c       6009          case ID_TPL_ABORT:        /* 中断                            */
             tskcmd.c       6010              break;
             tskcmd.c       6011          case ID_TPL_OPTCD:        /* オプションバーコード実行        */
             tskcmd.c       6012              break;
             tskcmd.c       6013          case ID_TPL_SMBAR:        /* サンプルチューブQRコード        */
             tskcmd.c       6014              break;
             tskcmd.c       6015          case ID_TPL_SMSGL:        /* サンプルチューブ有無確認（単）  */
             tskcmd.c       6016          case ID_TPL_SMALL:        /* サンプルチューブ有無確認（全）  */
             tskcmd.c       6017              break;
             tskcmd.c       6018          case ID_TPL_CLLNE:        /* 回収チューブレーンQRコード      */
             tskcmd.c       6019              break;
             tskcmd.c       6020          case ID_TPL_CLQRC:        /* 回収チューブQRコード            */
             tskcmd.c       6021              break;
             tskcmd.c       6022          case ID_TPL_CLSGL:        /* 回収チューブ有無（単）          */
             tskcmd.c       6023          case ID_TPL_CLALL:        /* 回収チューブ有無（全）          */
             tskcmd.c       6024              break;
             tskcmd.c       6025          case ID_TPL_LDLMP:        /* LED                             */
             tskcmd.c       6026              break;
             tskcmd.c       6027          case ID_TPL_UVLMP:        /* UV点灯                          */
             tskcmd.c       6028              break;
             tskcmd.c       6029          case ID_TPL_PTLMP:        /* パトランプ                      */
             tskcmd.c       6030    //            result = QgProcList_PTLMP( mrcv );
             tskcmd.c       6031              break;
             tskcmd.c       6032      }
             tskcmd.c       6033      return( result );
             tskcmd.c       6034    }
    000034DC 057B                   RTV/N       R5
             tskcmd.c       6035    
             tskcmd.c       6036    /***********************************************************************
             tskcmd.c       6037    * 
             tskcmd.c       6038    * [概要]  初期化指示
             tskcmd.c       6039    * [引数]  
             tskcmd.c       6040    * [戻値]  NO_DATA：空き無し
             tskcmd.c       6041    * [備考]
             tskcmd.c       6042    *
             tskcmd.c       6043    * typedef struct {
             tskcmd.c       6044    *     UB  msgid;      ID_MSG_LIMIT
             tskcmd.c       6045    *     UB  devno;      軸
             tskcmd.c       6046    *     UB  actstp;     動作ステップ
             tskcmd.c       6047    *     UB  prid1;      プロセス番号（ID_TPL_INITA）
             tskcmd.c       6048    *     UB  inf;        次初期化軸
             tskcmd.c       6049    *     UB  inf2;       未使用
             tskcmd.c       6050    *     UB  inf3;       未使用
             tskcmd.c       6051    *     UB  inf4;       未使用
             tskcmd.c       6052    * }ST_BCCTRL;
             tskcmd.c       6053    *
             tskcmd.c       6054    ***********************************************************************/
             tskcmd.c       6055    static ER QgProcList_INITA( T_CMD_MSG* mrcv )
    000034DE              __$QgProcList_INITA:             ; function: __$QgProcList_INITA
                                                           ; frame size=100
    000034DE 49F0                   MOVMU.L     R9,@-R15
    000034E0 7FD8                   ADD         #-40,R15
             tskcmd.c       6056    {
             tskcmd.c       6057      ER result = E_CONTINUE;
             tskcmd.c       6058      UB  prid1;
             tskcmd.c       6059      UB  bcid;
             tskcmd.c       6060      UB  inf;
             tskcmd.c       6061      UB  spdptn;
             tskcmd.c       6062      UB  bcidwk;
             tskcmd.c       6063      UB  mm;
             tskcmd.c       6064      UB  *spdadr;
             tskcmd.c       6065      INT  offs;
             tskcmd.c       6066      INT  *posadr;
             tskcmd.c       6067    
             tskcmd.c       6068      prid1  = mrcv->msgdata.prid1;
             tskcmd.c       6069      bcid  = mrcv->msgdata.bcid;
    000034E2 3941801A               MOVU.B      @(26,R4),R9; (mrcv)->bcid
    000034E6 DC32                   MOV.L       L682+2,R12 ; __$bcctrl
             tskcmd.c       6070      bcidwk  = mrcv->msgdata.bcid;
             tskcmd.c       6071      mm   = bcctrl[bcid].devno;
    000034E8 6293                   MOV         R9,R2
    000034EA EBF1                   MOV         #-15,R11   ; H'FFFFFFF1
    000034EC 4208                   SHLL2       R2
    000034EE 4200                   SHLL        R2
    000034F0 32CC                   ADD         R12,R2
    000034F2 6BBC                   EXTU.B      R11,R11
    000034F4 37218001               MOVU.B      @(1,R2),R7 ; bcctrl[].devno
    000034F8 D02E                   MOV.L       L682+6,R0  ; __$SpPtn
    000034FA 6C73                   MOV         R7,R12
             tskcmd.c       6072      
             tskcmd.c       6073      
             tskcmd.c       6074      spdadr = &SpPtn.Y0_SpdIniPtn;
             tskcmd.c       6075      spdadr += (mm - 1);
             tskcmd.c       6076      spdptn = *spdadr;
    000034FC 77FF                   ADD         #-1,R7
    000034FE 31414018               MOV.B       @(24:12,R4),R1; (mrcv)->prid1
    00003502 047C                   MOV.B       @(R0,R7),R4; *(spdadr)
             tskcmd.c       6077      
             tskcmd.c       6078      MAC_SPEED_SET( mm, 
    00003504 E03C                   MOV         #60,R0     ; H'0000003C
    00003506 6DC3                   MOV         R12,R13
    00003508 1F29                   MOV.L       R2,@(36,R15)
    0000350A 6E4C                   EXTU.B      R4,R14
    0000350C E403                   MOV         #3,R4      ; H'00000003
    0000350E 4D80                   MULR        R0,R13
    00003510 E00C                   MOV         #12,R0     ; H'0000000C
    00003512 65E3                   MOV         R14,R5
    00003514 D628                   MOV.L       L682+10,R6 ; __$Sp
    00003516 4580                   MULR        R0,R5
    00003518 3F110020               MOV.B       R1,@(32:12,R15); prid1
    0000351C 3D5C                   ADD         R5,R13
    0000351E 3D6C                   ADD         R6,R13
    00003520 67D1                   MOV.W       @R13,R7    ; Sp[].ac
    00003522 3F711002               MOV.W       R7,@(4:12,R15); mp.accel_type
    00003526 D125                   MOV.L       L682+14,R1 ; _GetFactor
    00003528 410B                   JSR         @R1
    0000352A 6AB3                   MOV         R11,R10
    0000352C 2F02                   MOV.L       R0,@R15    ; mp.factor
    0000352E E700                   MOV         #0,R7      ; H'00000000
    00003530 54D1                   MOV.L       @(4,R13),R4; Sp[].fl
    00003532 55D2                   MOV.L       @(8,R13),R5; Sp[].fh
    00003534 30D19001               MOVU.W      @(2,R13),R0; Sp[].gl
    00003538 1F42                   MOV.L       R4,@(8,R15); mp.FL
    0000353A 1F53                   MOV.L       R5,@(12,R15); mp.FH
    0000353C 1F04                   MOV.L       R0,@(16,R15); mp.utime
    0000353E 1F05                   MOV.L       R0,@(20,R15); mp.dtime
    00003540 1F76                   MOV.L       R7,@(24,R15); mp.us
    00003542 1F77                   MOV.L       R7,@(28,R15); mp.ds
    00003544 7FE0                   ADD         #-32,R15
    00003546 65F3                   MOV         R15,R5
    00003548 7520                   ADD         #32,R5
    0000354A 5151                   MOV.L       @(4,R5),R1 ; (part of)mp
    0000354C 6252                   MOV.L       @R5,R2     ; (part of)mp
    0000354E 1F11                   MOV.L       R1,@(4,R15)
    00003550 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    00003552 5654                   MOV.L       @(16,R5),R6; (part of)mp
    00003554 2F22                   MOV.L       R2,@R15
    00003556 5753                   MOV.L       @(12,R5),R7; (part of)mp
    00003558 1F12                   MOV.L       R1,@(8,R15)
    0000355A 5155                   MOV.L       @(20,R5),R1; (part of)mp
    0000355C 1F64                   MOV.L       R6,@(16,R15)
    0000355E 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00003560 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00003562 1F73                   MOV.L       R7,@(12,R15)
    00003564 1F15                   MOV.L       R1,@(20,R15)
    00003566 1F66                   MOV.L       R6,@(24,R15)
    00003568 1F27                   MOV.L       R2,@(28,R15)
    0000356A D215                   MOV.L       L682+18,R2 ; _motor_SET
    0000356C 420B                   JSR         @R2
    0000356E 64C3                   MOV         R12,R4
             tskcmd.c       6079                     Sp[mm][spdptn].ac, 
             tskcmd.c       6080                     Sp[mm][spdptn].fl, 
             tskcmd.c       6081                     Sp[mm][spdptn].fh, 
             tskcmd.c       6082                     Sp[mm][spdptn].gl );
             tskcmd.c       6083      
             tskcmd.c       6084      if(( spdptn < 0 )||( spdptn > 6 ))
    00003570 E506                   MOV         #6,R5      ; H'00000006
    00003572 3E57                   CMP/GT      R5,R14
    00003574 8F0D                   BF/S        L678
    00003576 7F20                   ADD         #32,R15
             tskcmd.c       6085      {
             tskcmd.c       6086          TpRspINITA( E_CON_ERR);
    00003578 E404                   MOV         #4,R4      ; H'00000004
    0000357A BD65                   BSR         __$TpRspINITA
    0000357C 4418                   SHLL8       R4
             tskcmd.c       6087          memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );              // データ初期化
    0000357E 54F9                   MOV.L       @(36,R15),R4
    00003580 E608                   MOV         #8,R6      ; H'00000008
    00003582 D110                   MOV.L       L682+22,R1 ; _memset
    00003584 410B                   JSR         @R1
    00003586 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       6088          InitQgProcList(bcid);
    00003588 B17C                   BSR         __$InitQgProcList
    0000358A 6493                   MOV         R9,R4
             tskcmd.c       6089          return( E_CON_ERR );
    0000358C E004                   MOV         #4,R0      ; H'00000004
    0000358E A0A0                   BRA         L679
    00003590 4018                   SHLL8       R0
    00003592              L678:
             tskcmd.c       6090      }
             tskcmd.c       6091      
             tskcmd.c       6092      switch( bcctrl[bcid].actstp )
    00003592 5EF9                   MOV.L       @(36,R15),R14
    00003594 E509                   MOV         #9,R5      ; H'00000009
    00003596 36E18002               MOVU.B      @(2,R14),R6; bcctrl[].actstp
    0000359A 3656                   CMP/HI      R5,R6
    0000359C 8F02                   BF/S        L1397
    0000359E 6263                   MOV         R6,R2
    000035A0 A08C                   BRA         L681
    000035A2 0009                   NOP
    000035A4              L1397:
    000035A4 4600                   SHLL        R6
    000035A6 C708                   MOVA        L683,R0
    000035A8 006D                   MOV.W       @(R0,R6),R0
    000035AA 0023                   BRAF        R0
    000035AC 0009                   NOP
    000035AE              L682:
    000035AE 00000002               .RES.W      1
    000035B0 <00000000>             .DATA.L     __$bcctrl
    000035B4 <00000000>             .DATA.L     __$SpPtn
    000035B8 <00000000>             .DATA.L     __$Sp
    000035BC <00000000>             .DATA.L     _GetFactor
    000035C0 <00000000>             .DATA.L     _motor_SET
    000035C4 <00000000>             .DATA.L     _memset
    000035C8              L683:
    000035C8 0110                   .DATA.W     L664-L682
    000035CA 0038                   .DATA.W     L675-L682
    000035CC 002E                   .DATA.W     L666-L682
    000035CE 00CA                   .DATA.W     L667-L682
    000035D0 00DE                   .DATA.W     L674-L682
    000035D2 0038                   .DATA.W     L669-L682
    000035D4 00CA                   .DATA.W     L670-L682
    000035D6 00DE                   .DATA.W     L671-L682
    000035D8 0052                   .DATA.W     L672-L682
    000035DA 0066                   .DATA.W     L673-L682
    000035DC              L666:
    000035DC 5EF9                   MOV.L       @(36,R15),R14
             tskcmd.c       6093      {
             tskcmd.c       6094      case 0:// アイドリング
             tskcmd.c       6095          // −−−
             tskcmd.c       6096          // −−−  アイドリング中（動作指示なし）  −−−
             tskcmd.c       6097          // −−−
             tskcmd.c       6098          break;
             tskcmd.c       6099      
             tskcmd.c       6100      case 1:// 原点センサを踏むまで移動(早く)
             tskcmd.c       6101           result = LimitAction(
             tskcmd.c       6102                              prid1, 
             tskcmd.c       6103                              bcid, 
             tskcmd.c       6104                              mm,   
             tskcmd.c       6105                              CCW,  
             tskcmd.c       6106                              GENTEN_POS,
             tskcmd.c       6107    //                            NUKEDA_POS,
             tskcmd.c       6108                              Sp[mm][spdptn].fl );
             tskcmd.c       6109          
             tskcmd.c       6110          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6111          bcctrl[bcid].actstp++;
             tskcmd.c       6112          break;
             tskcmd.c       6113      
             tskcmd.c       6114      case 2:// 原点センサを抜けるまで移動
             tskcmd.c       6115    //        motor_PSET( mm, 0, 0, 0 );
             tskcmd.c       6116    //        result = LimitAction(   
             tskcmd.c       6117    //                            prid1, 
             tskcmd.c       6118    //                            bcid, 
             tskcmd.c       6119    //                            mm,
             tskcmd.c       6120    //                            CW, 
             tskcmd.c       6121    //                            NUKEDA_POS,
             tskcmd.c       6122    //                            Sp[mm][spdptn].fl );
             tskcmd.c       6123    //        
             tskcmd.c       6124    //        if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6125          bcctrl[bcid].actstp++;
    000035DE 7201                   ADD         #1,R2
    000035E0 6023                   MOV         R2,R0
    000035E2 A049                   BRA         L685
    000035E4 80E2                   MOV.B       R0,@(2,R14); bcctrl[].actstp
    000035E6              L669:
    000035E6              L675:
             tskcmd.c       6126    //        WaitAction( prid1, bcid, 10 );
             tskcmd.c       6127    //        break;
             tskcmd.c       6128    
             tskcmd.c       6129      case 3:// 内部カウンターリセット
             tskcmd.c       6130          motor_PSET( mm, 0, 0, 0 );
             tskcmd.c       6131          bcctrl[bcid].actstp++;
             tskcmd.c       6132          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6133    
             tskcmd.c       6134      case 4:// 仮想原点位置まで移動
             tskcmd.c       6135          posadr = &BkP7.Y0_Offset + mm - 1;
             tskcmd.c       6136          offs = *posadr;
             tskcmd.c       6137          
             tskcmd.c       6138          result = RelmvAction( prid1, bcid, mm, REQ_STAUD, offs );
             tskcmd.c       6139          
             tskcmd.c       6140          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6141          bcctrl[bcid].actstp++;
             tskcmd.c       6142          break;
             tskcmd.c       6143    
             tskcmd.c       6144      case 5:// 原点センサを踏むまで移動(ゆっくり)
             tskcmd.c       6145           result = LimitAction(  
             tskcmd.c       6146                              prid1, 
             tskcmd.c       6147                              bcid, 
             tskcmd.c       6148                              mm,
             tskcmd.c       6149                              CCW, 
             tskcmd.c       6150                              GENTEN_POS,
             tskcmd.c       6151                              Sp[mm][spdptn].fl );
    000035E6 52D1                   MOV.L       @(4,R13),R2; Sp[].fl
    000035E8 2F26                   MOV.L       R2,@-R15
    000035EA E600                   MOV         #0,R6      ; H'00000000
    000035EC 2F66                   MOV.L       R6,@-R15
    000035EE E702                   MOV         #2,R7      ; H'00000002
    000035F0 34F14028               MOV.B       @(40:12,R15),R4; prid1
    000035F4 6593                   MOV         R9,R5
    000035F6 D355                   MOV.L       L732,R3    ; __$LimitAction
    000035F8 430B                   JSR         @R3
    000035FA 66C3                   MOV         R12,R6
    000035FC A055                   BRA         L687
    000035FE 7F08                   ADD         #8,R15
    00003600              L672:
    00003600 E700                   MOV         #0,R7      ; H'00000000
             tskcmd.c       6152          
             tskcmd.c       6153          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6154          bcctrl[bcid].actstp++;
             tskcmd.c       6155          break;
             tskcmd.c       6156      
             tskcmd.c       6157      case 6:// 内部カウンターリセット
             tskcmd.c       6158          motor_PSET( mm, 0, 0, 0 );
             tskcmd.c       6159          bcctrl[bcid].actstp++;
             tskcmd.c       6160          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6161      
             tskcmd.c       6162      case 7:// 仮想原点位置まで移動
             tskcmd.c       6163          posadr = &BkP7.Y0_Offset + mm - 1;
             tskcmd.c       6164          offs = *posadr;
             tskcmd.c       6165          
             tskcmd.c       6166          result = RelmvAction( prid1, bcid, mm, REQ_STAUD, offs );
             tskcmd.c       6167          
             tskcmd.c       6168          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6169          bcctrl[bcid].actstp++;
             tskcmd.c       6170          break;
             tskcmd.c       6171      
             tskcmd.c       6172      case 8:// 内部カウンターリセット
             tskcmd.c       6173          motor_PSET( mm, 0, 0, 0 );
             tskcmd.c       6174          bcctrl[bcid].actstp++;
    00003602 5EF9                   MOV.L       @(36,R15),R14
    00003604 6673                   MOV         R7,R6
    00003606 6573                   MOV         R7,R5
    00003608 D251                   MOV.L       L732+4,R2  ; _motor_PSET
    0000360A 420B                   JSR         @R2
    0000360C 64C3                   MOV         R12,R4
    0000360E 84E2                   MOV.B       @(2,R14),R0; bcctrl[].actstp
    00003610 7001                   ADD         #1,R0
    00003612 80E2                   MOV.B       R0,@(2,R14); bcctrl[].actstp
    00003614              L673:
             tskcmd.c       6175          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6176      
             tskcmd.c       6177      case 9:// 終了判定
             tskcmd.c       6178    //        bcctrl[bcid].inf &= 0xC0;
             tskcmd.c       6179          BitClr( bcctrl[bcid].devno, &bcctrl[bcid].inf );
    00003614 5EF9                   MOV.L       @(36,R15),R14
    00003616 34E18001               MOVU.B      @(1,R14),R4; bcctrl[].devno
    0000361A 65E3                   MOV         R14,R5
    0000361C D74D                   MOV.L       L732+8,R7  ; _BitClr
    0000361E 470B                   JSR         @R7
    00003620 7504                   ADD         #4,R5
             tskcmd.c       6180    
             tskcmd.c       6181          if( bcctrl[bcid].inf == CLR )
    00003622 84E4                   MOV.B       @(4,R14),R0; bcctrl[].inf
    00003624 2008                   TST         R0,R0
    00003626 8D49                   BT/S        L681
    00003628 6203                   MOV         R0,R2
             tskcmd.c       6182          {
             tskcmd.c       6183              result = E_SUCCESS;
             tskcmd.c       6184          }
             tskcmd.c       6185          else
             tskcmd.c       6186          {
             tskcmd.c       6187              if( (bcctrl[bcid].inf & BIT1) )         bcctrl[bcid].devno = MT_Z0;
    0000362A 8729                   BLD         #1,R2
    0000362C 8B03                   BF          L692
    0000362E 5EF9                   MOV.L       @(36,R15),R14
    00003630 E002                   MOV         #2,R0      ; H'00000002
    00003632 A017                   BRA         L693
    00003634 80E1                   MOV.B       R0,@(1,R14); bcctrl[].devno
    00003636              L692:
             tskcmd.c       6188              else if( (bcctrl[bcid].inf & BIT2) )    bcctrl[bcid].devno = MT_P0;
    00003636 872A                   BLD         #2,R2
    00003638 8B03                   BF          L695
    0000363A 5EF9                   MOV.L       @(36,R15),R14
    0000363C E003                   MOV         #3,R0      ; H'00000003
    0000363E A011                   BRA         L693
    00003640 80E1                   MOV.B       R0,@(1,R14); bcctrl[].devno
    00003642              L695:
             tskcmd.c       6189              else if( (bcctrl[bcid].inf & BIT0) )    bcctrl[bcid].devno = MT_Y0;
    00003642 8728                   BLD         #0,R2
    00003644 8B03                   BF          L697
    00003646 5EF9                   MOV.L       @(36,R15),R14
    00003648 E001                   MOV         #1,R0      ; H'00000001
    0000364A A00B                   BRA         L693
    0000364C 80E1                   MOV.B       R0,@(1,R14); bcctrl[].devno
    0000364E              L697:
             tskcmd.c       6190              else if( (bcctrl[bcid].inf & BIT4) )    bcctrl[bcid].devno = MT_Y1;
    0000364E 872C                   BLD         #4,R2
    00003650 8B03                   BF          L699
    00003652 5EF9                   MOV.L       @(36,R15),R14
    00003654 E005                   MOV         #5,R0      ; H'00000005
    00003656 A005                   BRA         L693
    00003658 80E1                   MOV.B       R0,@(1,R14); bcctrl[].devno
    0000365A              L699:
             tskcmd.c       6191              else if( (bcctrl[bcid].inf & BIT3) )    bcctrl[bcid].devno = MT_F0;
    0000365A 872B                   BLD         #3,R2
    0000365C 8B02                   BF          L693
    0000365E 5EF9                   MOV.L       @(36,R15),R14
    00003660 E004                   MOV         #4,R0      ; H'00000004
    00003662 80E1                   MOV.B       R0,@(1,R14); bcctrl[].devno
    00003664              L693:
             tskcmd.c       6192    
             tskcmd.c       6193              bcctrl[bcid].actstp = 1 ;
    00003664 5EF9                   MOV.L       @(36,R15),R14
    00003666 E001                   MOV         #1,R0      ; H'00000001
    00003668 34F14020               MOV.B       @(32:12,R15),R4; prid1
    0000366C 80E2                   MOV.B       R0,@(2,R14); bcctrl[].actstp
             tskcmd.c       6194              WaitAction( prid1, bcid, 25 );
    0000366E E619                   MOV         #25,R6     ; H'00000019
    00003670 B8FC                   BSR         __$WaitAction
    00003672 6593                   MOV         R9,R5
    00003674 A023                   BRA         L701
    00003676 0009                   NOP
    00003678              L667:
    00003678              L670:
    00003678              L685:
    00003678 E700                   MOV         #0,R7      ; H'00000000
    0000367A 5EF9                   MOV.L       @(36,R15),R14
    0000367C 6673                   MOV         R7,R6
    0000367E 6573                   MOV         R7,R5
    00003680 D233                   MOV.L       L732+4,R2  ; _motor_PSET
    00003682 420B                   JSR         @R2
    00003684 64C3                   MOV         R12,R4
    00003686 84E2                   MOV.B       @(2,R14),R0; bcctrl[].actstp
    00003688 7001                   ADD         #1,R0
    0000368A 80E2                   MOV.B       R0,@(2,R14); bcctrl[].actstp
    0000368C              L671:
    0000368C              L674:
    0000368C 62C3                   MOV         R12,R2
    0000368E E0FC                   MOV         #-4,R0     ; H'FFFFFFFC
    00003690 4208                   SHLL2       R2
    00003692 DA31                   MOV.L       L732+12,R10; __$BkP7
    00003694 32AC                   ADD         R10,R2
    00003696 0D2E                   MOV.L       @(R0,R2),R13; *(posadr)
    00003698 2FD6                   MOV.L       R13,@-R15
    0000369A E700                   MOV         #0,R7      ; H'00000000
    0000369C 34F14024               MOV.B       @(36:12,R15),R4; prid1
    000036A0 6593                   MOV         R9,R5
    000036A2 D32E                   MOV.L       L732+16,R3 ; __$RelmvAction
    000036A4 430B                   JSR         @R3
    000036A6 66C3                   MOV         R12,R6
    000036A8 7F04                   ADD         #4,R15
    000036AA              L687:
    000036AA 2008                   TST         R0,R0
    000036AC 8F01                   BF/S        L704
    000036AE 6A03                   MOV         R0,R10
    000036B0 6AB3                   MOV         R11,R10
    000036B2              L704:
    000036B2 5EF9                   MOV.L       @(36,R15),R14
    000036B4 84E2                   MOV.B       @(2,R14),R0; bcctrl[].actstp
    000036B6 7001                   ADD         #1,R0
    000036B8 A001                   BRA         L701
    000036BA 80E2                   MOV.B       R0,@(2,R14); bcctrl[].actstp
    000036BC              L681:
    000036BC EA00                   MOV         #0,R10     ; H'00000000
    000036BE              L664:
    000036BE              L701:
             tskcmd.c       6195          }
             tskcmd.c       6196          break;
             tskcmd.c       6197      
             tskcmd.c       6198      default:// 終了処理
             tskcmd.c       6199          result = E_SUCCESS;
             tskcmd.c       6200          break;
             tskcmd.c       6201      }
             tskcmd.c       6202    
             tskcmd.c       6203      if( result != E_CONTINUE )
    000036BE 3AB0                   CMP/EQ      R11,R10
    000036C0 8906                   BT          L706
             tskcmd.c       6204      {
             tskcmd.c       6205          TpRspINITA( result );
    000036C2 BCC1                   BSR         __$TpRspINITA
    000036C4 64A3                   MOV         R10,R4
             tskcmd.c       6206          memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );              // データ初期化
    000036C6 54F9                   MOV.L       @(36,R15),R4
    000036C8 E608                   MOV         #8,R6      ; H'00000008
    000036CA D225                   MOV.L       L732+20,R2 ; _memset
    000036CC 420B                   JSR         @R2
    000036CE E500                   MOV         #0,R5      ; H'00000000
    000036D0              L706:
             tskcmd.c       6207      }
             tskcmd.c       6208    
             tskcmd.c       6209      return( result );   
    000036D0 60A3                   MOV         R10,R0
    000036D2              L679:
    000036D2 7F28                   ADD         #40,R15
    000036D4 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       6210    }
    000036D6 006B                   RTS/N
             tskcmd.c       6211    /***********************************************************************
             tskcmd.c       6212    * 
             tskcmd.c       6213    * [概要]  プロトコル動作
             tskcmd.c       6214    * [引数]  
             tskcmd.c       6215    * [戻値]  NO_DATA：空き無し
             tskcmd.c       6216    * [備考]
             tskcmd.c       6217    *
             tskcmd.c       6218    * typedef struct {
             tskcmd.c       6219    *     UB  msgid;      ID_MSG_LIMIT
             tskcmd.c       6220    *     UB  devno;      軸
             tskcmd.c       6221    *     UB  actstp;     動作ステップ
             tskcmd.c       6222    *     UB  prid1;      プロセス番号（ID_TPL_INITA）
             tskcmd.c       6223    *     UB  inf;        未使用
             tskcmd.c       6224    *     UB  inf2;       未使用
             tskcmd.c       6225    *     UB  inf3;       未使用
             tskcmd.c       6226    *     UB  inf4;       未使用
             tskcmd.c       6227    * }ST_BCCTRL;
             tskcmd.c       6228    *
             tskcmd.c       6229    ***********************************************************************/
             tskcmd.c       6230    static ER QgProcList_PRTCL( T_CMD_MSG* mrcv )
    000036D8              __$QgProcList_PRTCL:             ; function: __$QgProcList_PRTCL
                                                           ; frame size=32
    000036D8 49F0                   MOVMU.L     R9,@-R15
    000036DA 7FFC                   ADD         #-4,R15
             tskcmd.c       6231    {
             tskcmd.c       6232      ER result = E_CONTINUE;
             tskcmd.c       6233      UB  prid1;
             tskcmd.c       6234      UB  bcid;
             tskcmd.c       6235      UB  pno;
             tskcmd.c       6236      UB  Cmd;
             tskcmd.c       6237      UB  Sts;
             tskcmd.c       6238      
             tskcmd.c       6239      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       6240      bcid  = mrcv->msgdata.bcid;
    000036DC 3941801A               MOVU.B      @(26,R4),R9; (mrcv)->bcid
    000036E0 D620                   MOV.L       L732+24,R6 ; __$bcctrl
    000036E2 6D93                   MOV         R9,R13
    000036E4 ECF1                   MOV         #-15,R12   ; H'FFFFFFF1
             tskcmd.c       6241      pno   = mrcv->msgdata.inf2;// proc no
             tskcmd.c       6242      
             tskcmd.c       6243      if( bcctrl[bcid].actstp == CLR )
    000036E6 4908                   SHLL2       R9
    000036E8 4900                   SHLL        R9
    000036EA 396C                   ADD         R6,R9
    000036EC 6CCC                   EXTU.B      R12,R12
    000036EE 8492                   MOV.B       @(2,R9),R0 ; bcctrl[].actstp
    000036F0 6E43                   MOV         R4,R14
    000036F2 6BC3                   MOV         R12,R11
    000036F4 2008                   TST         R0,R0
    000036F6 3A418018               MOVU.B      @(24,R4),R10; (mrcv)->prid1
    000036FA 8F02                   BF/S        L1398
    000036FC 60C3                   MOV         R12,R0
    000036FE A0BE                   BRA         L727
    00003700 0009                   NOP
    00003702              L1398:
             tskcmd.c       6244      {
             tskcmd.c       6245          // −−−
             tskcmd.c       6246          // −−−  アイドリング中（動作指示なし）  −−−
             tskcmd.c       6247          // −−−
             tskcmd.c       6248          return( result );   
             tskcmd.c       6249      }
             tskcmd.c       6250    
             tskcmd.c       6251      // 中断確認
             tskcmd.c       6252      if( GetPauseStop() == STOP_STS )            return( E_PROTCOLSTOP );
    00003702 D319                   MOV.L       L732+28,R3 ; __$GetPauseStop
    00003704 434B                   JSR/N       @R3
    00003706 600C                   EXTU.B      R0,R0
    00003708 8801                   CMP/EQ      #1,R0
    0000370A 8F02                   BF/S        L1399
    0000370C E003                   MOV         #3,R0      ; H'00000003
    0000370E A0B6                   BRA         L727
    00003710 0009                   NOP
    00003712              L1399:
             tskcmd.c       6253    
             tskcmd.c       6254      // 一時停止確認
             tskcmd.c       6255      if( GetPauseStop() == PAUS_STS )            return( E_PROTCOLPAUSE );
    00003712 D315                   MOV.L       L732+28,R3 ; __$GetPauseStop
    00003714 434B                   JSR/N       @R3
    00003716 600C                   EXTU.B      R0,R0
    00003718 8802                   CMP/EQ      #2,R0
    0000371A 8F02                   BF/S        L1400
    0000371C E004                   MOV         #4,R0      ; H'00000004
    0000371E A0AE                   BRA         L727
    00003720 0009                   NOP
    00003722              L1400:
             tskcmd.c       6256    
             tskcmd.c       6257    //
             tskcmd.c       6258    #if 0
             tskcmd.c       6259      //  ★★★ デバック ★★★ 加圧
             tskcmd.c       6260      pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd = P_PRS;  // 状態
             tskcmd.c       6261      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par02 = 1;      // 加速パターン  ポンプ速度
             tskcmd.c       6262      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par03 = 1;      // ポジション
             tskcmd.c       6263      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par04 = 123;    // PEEK加圧             kPa
             tskcmd.c       6264      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par05 = 4;      // PEEK加圧タイムアウト sec
             tskcmd.c       6265      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par06 = 56;     // 減圧（00H〜FFH）     kPa
             tskcmd.c       6266      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par07 = 7;      // 減圧タイムアウト     sec
             tskcmd.c       6267      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par08 = 89;     // 減圧変化             kPa
             tskcmd.c       6268    
             tskcmd.c       6269    
             tskcmd.c       6270      // ★★★ デバック ★★★ 攪拌
             tskcmd.c       6271      pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd = P_MIX;
             tskcmd.c       6272      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par02 = 0x01;
             tskcmd.c       6273      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par03 = 0x13;
             tskcmd.c       6274      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par04 = 0x11;
             tskcmd.c       6275      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par05 = 0x11;
             tskcmd.c       6276      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par06 = 53;
             tskcmd.c       6277      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par07 = 54;
             tskcmd.c       6278      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par13 = 0x1f4;
             tskcmd.c       6279      pProcAdr->step[(bcctrl[bcid].actstp - 1)].par13 = 0x1f4;
             tskcmd.c       6280      pProcAdr->step[(bcctrl[bcid].actstp )].StCmd = P_NON;
             tskcmd.c       6281    #endif
             tskcmd.c       6282    //★★★ デバック ★★★
             tskcmd.c       6283      
             tskcmd.c       6284      // --- ここから動作開始 ----------------------------------------------------------------
             tskcmd.c       6285      Cmd = ( pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd & P_MSK );
             tskcmd.c       6286      Sts =   pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd;
    00003722 32918002               MOVU.B      @(2,R9),R2 ; bcctrl[].actstp
    00003726 E014                   MOV         #20,R0     ; H'00000014
    00003728 E40C                   MOV         #12,R4     ; H'0000000C
    0000372A 72FF                   ADD         #-1,R2
    0000372C 4280                   MULR        R0,R2
    0000372E D10F                   MOV.L       L732+32,R1 ; __$pProcAdr
    00003730 6512                   MOV.L       @R1,R5     ; pProcAdr
    00003732 6023                   MOV         R2,R0
    00003734 005C                   MOV.B       @(R0,R5),R0; pProcAdr->step[].StCmd
    00003736 2F00                   MOV.B       R0,@R15
             tskcmd.c       6287      
             tskcmd.c       6288      switch( Cmd )
    00003738 C90F                   AND         #15,R0
    0000373A 70FF                   ADD         #-1,R0
    0000373C 3046                   CMP/HI      R4,R0
    0000373E 8D5B                   BT/S        L731
    00003740 6603                   MOV         R0,R6
    00003742 4600                   SHLL        R6
    00003744 C70A                   MOVA        L733,R0
    00003746 006D                   MOV.W       @(R0,R6),R0
    00003748 0023                   BRAF        R0
    0000374A 0009                   NOP
    0000374C              L732:
    0000374C <00000000>             .DATA.L     __$LimitAction
    00003750 <00000000>             .DATA.L     _motor_PSET
    00003754 <00000000>             .DATA.L     _BitClr
    00003758 <00000000>             .DATA.L     __$BkP7
    0000375C <00000000>             .DATA.L     __$RelmvAction
    00003760 <00000000>             .DATA.L     _memset
    00003764 <00000000>             .DATA.L     __$bcctrl
    00003768 <00000000>             .DATA.L     __$GetPauseStop
    0000376C <00000000>             .DATA.L     __$pProcAdr
    00003770              L733:
    00003770 003E                   .DATA.W     L709-L732
    00003772 0046                   .DATA.W     L710-L732
    00003774 004E                   .DATA.W     L711-L732
    00003776 0056                   .DATA.W     L712-L732
    00003778 005E                   .DATA.W     L713-L732
    0000377A 0068                   .DATA.W     L714-L732
    0000377C 0072                   .DATA.W     L715-L732
    0000377E 007C                   .DATA.W     L716-L732
    00003780 00AC                   .DATA.W     L708-L732
    00003782 0086                   .DATA.W     L717-L732
    00003784 0090                   .DATA.W     L718-L732
    00003786 009A                   .DATA.W     L719-L732
    00003788 00A4                   .DATA.W     L720-L732
    0000378A              L709:
             tskcmd.c       6289      {
             tskcmd.c       6290          case P_TGT://チップ取得
             tskcmd.c       6291              result = CmdActionTipGet( mrcv );
    0000378A B131                   BSR         __$CmdActionTipGet
    0000378C 64E3                   MOV         R14,R4
    0000378E A033                   BRA         L731
    00003790 6C03                   MOV         R0,R12
    00003792              L710:
             tskcmd.c       6292              break;
             tskcmd.c       6293          case P_TDS://チップ廃棄
             tskcmd.c       6294              result = CmdActionTipDsp( mrcv );
    00003792 B2E8                   BSR         __$CmdActionTipDsp
    00003794 64E3                   MOV         R14,R4
    00003796 A02F                   BRA         L731
    00003798 6C03                   MOV         R0,R12
    0000379A              L711:
             tskcmd.c       6295              break;
             tskcmd.c       6296          case P_OPN://穴あけ
             tskcmd.c       6297              result = CmdActionStrOpn( mrcv );
    0000379A B4EB                   BSR         __$CmdActionStrOpn
    0000379C 64E3                   MOV         R14,R4
    0000379E A02B                   BRA         L731
    000037A0 6C03                   MOV         R0,R12
    000037A2              L712:
             tskcmd.c       6298              break;
             tskcmd.c       6299          case P_PRS://加圧
             tskcmd.c       6300              result = CmdActionPress( mrcv );
    000037A2 B6A6                   BSR         __$CmdActionPress
    000037A4 64E3                   MOV         R14,R4
    000037A6 A027                   BRA         L731
    000037A8 6C03                   MOV         R0,R12
    000037AA              L713:
             tskcmd.c       6301              break;
             tskcmd.c       6302          case P_WAI://ウェイト
             tskcmd.c       6303              result = CmdActionWait( mrcv );
    000037AA D37C                   MOV.L       L1377,R3   ; __$CmdActionWait
    000037AC 430B                   JSR         @R3
    000037AE 64E3                   MOV         R14,R4
    000037B0 A022                   BRA         L731
    000037B2 6C03                   MOV         R0,R12
    000037B4              L714:
             tskcmd.c       6304              break;
             tskcmd.c       6305          case P_MIX://攪拌
             tskcmd.c       6306              result = CmdActionMix( mrcv );
    000037B4 D37A                   MOV.L       L1377+4,R3 ; __$CmdActionMix
    000037B6 430B                   JSR         @R3
    000037B8 64E3                   MOV         R14,R4
    000037BA A01D                   BRA         L731
    000037BC 6C03                   MOV         R0,R12
    000037BE              L715:
             tskcmd.c       6307              break;
             tskcmd.c       6308          case P_SUC://吸引
             tskcmd.c       6309              result = CmdActionSuc( mrcv );
    000037BE D379                   MOV.L       L1377+8,R3 ; __$CmdActionSuc
    000037C0 430B                   JSR         @R3
    000037C2 64E3                   MOV         R14,R4
    000037C4 A018                   BRA         L731
    000037C6 6C03                   MOV         R0,R12
    000037C8              L716:
             tskcmd.c       6310              break;
             tskcmd.c       6311          case P_PUT://吐出
             tskcmd.c       6312              result = CmdActionPut( mrcv );
    000037C8 D377                   MOV.L       L1377+12,R3; __$CmdActionPut
    000037CA 430B                   JSR         @R3
    000037CC 64E3                   MOV         R14,R4
    000037CE A013                   BRA         L731
    000037D0 6C03                   MOV         R0,R12
    000037D2              L717:
             tskcmd.c       6313              break;
             tskcmd.c       6314          case P_PR1://分注１
             tskcmd.c       6315              result = CmdActionPrep1( mrcv );
    000037D2 D376                   MOV.L       L1377+16,R3; __$CmdActionPrep1
    000037D4 430B                   JSR         @R3
    000037D6 64E3                   MOV         R14,R4
    000037D8 A00E                   BRA         L731
    000037DA 6C03                   MOV         R0,R12
    000037DC              L718:
             tskcmd.c       6316              break;
             tskcmd.c       6317          case P_PR2://分注２
             tskcmd.c       6318              result = CmdActionPrep2( mrcv );
    000037DC D374                   MOV.L       L1377+20,R3; __$CmdActionPrep2
    000037DE 430B                   JSR         @R3
    000037E0 64E3                   MOV         R14,R4
    000037E2 A009                   BRA         L731
    000037E4 6C03                   MOV         R0,R12
    000037E6              L719:
             tskcmd.c       6319              break;
             tskcmd.c       6320          case P_INC://インキュベーション
             tskcmd.c       6321              result = CmdActionIncub( mrcv );
    000037E6 D373                   MOV.L       L1377+24,R3; __$CmdActionIncub
    000037E8 430B                   JSR         @R3
    000037EA 64E3                   MOV         R14,R4
    000037EC A004                   BRA         L731
    000037EE 6C03                   MOV         R0,R12
    000037F0              L720:
             tskcmd.c       6322              break;
             tskcmd.c       6323          case P_MOV://移動
             tskcmd.c       6324              result = CmdActionMove( mrcv );
    000037F0 D371                   MOV.L       L1377+28,R3; __$CmdActionMove
    000037F2 430B                   JSR         @R3
    000037F4 64E3                   MOV         R14,R4
    000037F6 6C03                   MOV         R0,R12
    000037F8              L708:
    000037F8              L731:
             tskcmd.c       6325              break;
             tskcmd.c       6326      }
             tskcmd.c       6327          
             tskcmd.c       6328      switch( result )
    000037F8 2CC8                   TST         R12,R12
    000037FA 8904                   BT          L747
    000037FC 60C3                   MOV         R12,R0
    000037FE 8820                   CMP/EQ      #32,R0
    00003800 891F                   BT          L748
    00003802 A028                   BRA         L749
    00003804 0009                   NOP
    00003806              L747:
             tskcmd.c       6329      {
             tskcmd.c       6330          case E_CONTINUE:
             tskcmd.c       6331              break;
             tskcmd.c       6332    
             tskcmd.c       6333          case E_SUCCESS:
             tskcmd.c       6334              pProcDat->Stp = CLR;
    00003806 DE6D                   MOV.L       L1377+32,R14; __$pProcDat
    00003808 66E2                   MOV.L       @R14,R6    ; pProcDat
    0000380A E000                   MOV         #0,R0      ; H'00000000
    0000380C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
             tskcmd.c       6335              bcctrl[bcid].actstp++;
    0000380E 8492                   MOV.B       @(2,R9),R0 ; bcctrl[].actstp
    00003810 67E2                   MOV.L       @R14,R7    ; pProcDat
    00003812 7001                   ADD         #1,R0
    00003814 8092                   MOV.B       R0,@(2,R9) ; bcctrl[].actstp
             tskcmd.c       6336    
             tskcmd.c       6337              if( bcctrl[bcid].actstp > pProcDat->Cnt )       // 全行程終了
    00003816 640C                   EXTU.B      R0,R4
    00003818 31718000               MOVU.B      @(0,R7),R1 ; (pProcDat)->Cnt
    0000381C 3417                   CMP/GT      R1,R4
    0000381E 8D15                   BT/S        L751
    00003820 6603                   MOV         R0,R6
             tskcmd.c       6338              {
             tskcmd.c       6339                  memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
             tskcmd.c       6340              }
             tskcmd.c       6341              else
             tskcmd.c       6342              {
             tskcmd.c       6343                  Cmd = ( pProcAdr->step[(bcctrl[bcid].actstp - 1)].StCmd & P_MSK );
             tskcmd.c       6344                  if( Cmd == P_NON )
    00003822 666C                   EXTU.B      R6,R6
    00003824 E014                   MOV         #20,R0     ; H'00000014
    00003826 76FF                   ADD         #-1,R6
    00003828 4680                   MULR        R0,R6
    0000382A D265                   MOV.L       L1377+36,R2; __$pProcAdr
    0000382C 6522                   MOV.L       @R2,R5     ; pProcAdr
    0000382E 6063                   MOV         R6,R0
    00003830 005C                   MOV.B       @(R0,R5),R0; pProcAdr->step[].StCmd
    00003832 C80F                   TST         #15,R0
    00003834 890A                   BT          L751
             tskcmd.c       6345                  {
             tskcmd.c       6346                      memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
             tskcmd.c       6347                  }
             tskcmd.c       6348                  else
             tskcmd.c       6349                  {
             tskcmd.c       6350                      WaitAction( prid1, bcid, 10 );
    00003836 E60A                   MOV         #10,R6     ; H'0000000A
    00003838 64A3                   MOV         R10,R4
    0000383A B817                   BSR         __$WaitAction
    0000383C 65D3                   MOV         R13,R5
             tskcmd.c       6351                      result = E_CONTINUE;
    0000383E A015                   BRA         L753
    00003840 6CB3                   MOV         R11,R12
    00003842              L748:
    00003842 E608                   MOV         #8,R6      ; H'00000008
    00003844 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       6352                  }
             tskcmd.c       6353              }
             tskcmd.c       6354              break;
             tskcmd.c       6355    
             tskcmd.c       6356          case E_PRES_FAIL:
             tskcmd.c       6357              memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
    00003846 D25F                   MOV.L       L1377+40,R2; _memset
    00003848 420B                   JSR         @R2
    0000384A 6493                   MOV         R9,R4
    0000384C              L751:
    0000384C E608                   MOV         #8,R6      ; H'00000008
    0000384E E500                   MOV         #0,R5      ; H'00000000
    00003850 D25C                   MOV.L       L1377+40,R2; _memset
    00003852 420B                   JSR         @R2
    00003854 6493                   MOV         R9,R4
    00003856              L749:
             tskcmd.c       6358              memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );
             tskcmd.c       6359              break;
             tskcmd.c       6360      }
             tskcmd.c       6361      
             tskcmd.c       6362      if( result != E_CONTINUE )
    00003856 3CB0                   CMP/EQ      R11,R12
    00003858 8908                   BT          L753
             tskcmd.c       6363      {
             tskcmd.c       6364          DeviceInfoClr();
    0000385A D45B                   MOV.L       L1377+44,R4; _DeviceInfoClr
    0000385C 444B                   JSR/N       @R4
    0000385E E608                   MOV         #8,R6      ; H'00000008
    00003860 E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       6365          memset( &bcctrl[bcid].msgid,  CLR,  sizeof( ST_BCCTRL ) );              // データ初期化
    00003862 D758                   MOV.L       L1377+40,R7; _memset
    00003864 470B                   JSR         @R7
    00003866 6493                   MOV         R9,R4
    00003868 A008                   BRA         L755
    0000386A 0009                   NOP
    0000386C              L753:
             tskcmd.c       6366      }
             tskcmd.c       6367      else
             tskcmd.c       6368      {
             tskcmd.c       6369          DeviceInfoSet( result, bcctrl[bcid].inf2, bcctrl[bcid].actstp, Sts );
    0000386C 8492                   MOV.B       @(2,R9),R0 ; bcctrl[].actstp
    0000386E 64C3                   MOV         R12,R4
    00003870 67F0                   MOV.B       @R15,R7
    00003872 6603                   MOV         R0,R6
    00003874 8495                   MOV.B       @(5,R9),R0 ; bcctrl[].inf2
    00003876 D255                   MOV.L       L1377+48,R2; _DeviceInfoSet
    00003878 420B                   JSR         @R2
    0000387A 6503                   MOV         R0,R5
    0000387C              L755:
             tskcmd.c       6370      }
             tskcmd.c       6371      
             tskcmd.c       6372      return( result );
    0000387C 60C3                   MOV         R12,R0
    0000387E              L727:
    0000387E 7F04                   ADD         #4,R15
    00003880 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       6373    }
    00003882 006B                   RTS/N
             tskcmd.c       6374    
             tskcmd.c       6375    /***********************************************************************
             tskcmd.c       6376    * 
             tskcmd.c       6377    * [概要]  
             tskcmd.c       6378    * [引数]  
             tskcmd.c       6379    * [戻値]  
             tskcmd.c       6380    * [備考]  
             tskcmd.c       6381    * 
             tskcmd.c       6382    ***********************************************************************/
             tskcmd.c       6383    static void InitQgProcList( UB bcid )
    00003884              __$InitQgProcList:               ; function: __$InitQgProcList
                                                           ; frame size=0
    00003884 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
             tskcmd.c       6384    {
             tskcmd.c       6385      if( ( bcid != NO_DATA )&&( bcid < BCCTRL_MAX ))
    00003886 624C                   EXTU.B      R4,R2
    00003888 655C                   EXTU.B      R5,R5
    0000388A 3250                   CMP/EQ      R5,R2
    0000388C 890F                   BT          L758
    0000388E E513                   MOV         #19,R5     ; H'00000013
    00003890 3253                   CMP/GE      R5,R2
    00003892 890C                   BT          L758
             tskcmd.c       6386      {
             tskcmd.c       6387          //  UB  msgid;
             tskcmd.c       6388          //  UB  devno;
             tskcmd.c       6389          //  UB  actstp;
             tskcmd.c       6390          //  UB  prid1;
             tskcmd.c       6391          //  UB  inf;
             tskcmd.c       6392          //  UB  inf2;
             tskcmd.c       6393          //  UB  inf3;
             tskcmd.c       6394          //  UB  inf4;
             tskcmd.c       6395          bcctrl[bcid].actstp = 0;
    00003894 664C                   EXTU.B      R4,R6
    00003896 E000                   MOV         #0,R0      ; H'00000000
    00003898 4608                   SHLL2       R6
    0000389A 4600                   SHLL        R6
    0000389C D24C                   MOV.L       L1377+52,R2; __$bcctrl
    0000389E 362C                   ADD         R2,R6
    000038A0 8062                   MOV.B       R0,@(2,R6) ; bcctrl[].actstp
             tskcmd.c       6396          bcctrl[bcid].msgid  = NO_DATA;
    000038A2 E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
    000038A4 2600                   MOV.B       R0,@R6     ; bcctrl[].msgid
             tskcmd.c       6397          bcctrl[bcid].devno  = NO_DATA;
    000038A6 8061                   MOV.B       R0,@(1,R6) ; bcctrl[].devno
             tskcmd.c       6398          bcctrl[bcid].prid1  = NO_DATA;
    000038A8 8063                   MOV.B       R0,@(3,R6) ; bcctrl[].prid1
             tskcmd.c       6399          bcctrl[bcid].inf    = NO_DATA;
    000038AA 8064                   MOV.B       R0,@(4,R6) ; bcctrl[].inf
             tskcmd.c       6400          bcctrl[bcid].inf2   = NO_DATA;
    000038AC 8065                   MOV.B       R0,@(5,R6) ; bcctrl[].inf2
    000038AE              L758:
             tskcmd.c       6401      }
             tskcmd.c       6402    }
    000038AE 006B                   RTS/N
             tskcmd.c       6403    /***********************************************************************
             tskcmd.c       6404    * 
             tskcmd.c       6405    * [概要]  
             tskcmd.c       6406    * [引数]  
             tskcmd.c       6407    * [戻値]  
             tskcmd.c       6408    * [備考]  
             tskcmd.c       6409    * 
             tskcmd.c       6410    ***********************************************************************/
             tskcmd.c       6411    static void StaQgProcList( UB bcid, UB msgid, UB devno, UB actstp, UB prid1, UB inf, UB inf2)
    000038B0              __$StaQgProcList:                ; function: __$StaQgProcList
                                                           ; frame size=12
    000038B0 2FC6                   MOV.L       R12,@-R15
    000038B2 2FD6                   MOV.L       R13,@-R15
    000038B4 2FE6                   MOV.L       R14,@-R15
    000038B6 ECFF                   MOV         #-1,R12    ; H'FFFFFFFF
             tskcmd.c       6412    {
             tskcmd.c       6413      if( ( bcid != NO_DATA )&&( bcid < BCCTRL_MAX ))
    000038B8 6143                   MOV         R4,R1
    000038BA 624C                   EXTU.B      R4,R2
    000038BC 54F3                   MOV.L       @(12,R15),R4
    000038BE 6CCC                   EXTU.B      R12,R12
    000038C0 5DF4                   MOV.L       @(16,R15),R13
    000038C2 32C0                   CMP/EQ      R12,R2
    000038C4 8D13                   BT/S        L762
    000038C6 5EF5                   MOV.L       @(20,R15),R14
    000038C8 EC13                   MOV         #19,R12    ; H'00000013
    000038CA 32C3                   CMP/GE      R12,R2
    000038CC 890F                   BT          L762
             tskcmd.c       6414      {
             tskcmd.c       6415          bcctrl[bcid].msgid  = msgid;
    000038CE 611C                   EXTU.B      R1,R1
    000038D0 4108                   SHLL2       R1
    000038D2 4100                   SHLL        R1
    000038D4 D23E                   MOV.L       L1377+52,R2; __$bcctrl
    000038D6 312C                   ADD         R2,R1
             tskcmd.c       6416          bcctrl[bcid].devno  = devno;
    000038D8 6063                   MOV         R6,R0
    000038DA 8011                   MOV.B       R0,@(1,R1) ; bcctrl[].devno
             tskcmd.c       6417          bcctrl[bcid].prid1  = prid1;
    000038DC 6043                   MOV         R4,R0
    000038DE 8013                   MOV.B       R0,@(3,R1) ; bcctrl[].prid1
             tskcmd.c       6418          bcctrl[bcid].actstp = actstp;
    000038E0 6073                   MOV         R7,R0
    000038E2 8012                   MOV.B       R0,@(2,R1) ; bcctrl[].actstp
             tskcmd.c       6419          bcctrl[bcid].inf    = inf;
    000038E4 60D3                   MOV         R13,R0
    000038E6 8014                   MOV.B       R0,@(4,R1) ; bcctrl[].inf
             tskcmd.c       6420          bcctrl[bcid].inf2   = inf2;// プロトコル実行時は、プロトコル番号
    000038E8 60E3                   MOV         R14,R0
    000038EA 8015                   MOV.B       R0,@(5,R1) ; bcctrl[].inf2
    000038EC 2150                   MOV.B       R5,@R1     ; bcctrl[].msgid
    000038EE              L762:
    000038EE 6EF6                   MOV.L       @R15+,R14
    000038F0 6DF6                   MOV.L       @R15+,R13
             tskcmd.c       6421      }
             tskcmd.c       6422    }
    000038F2 000B                   RTS
    000038F4 6CF6                   MOV.L       @R15+,R12
             tskcmd.c       6423    
             tskcmd.c       6424    /***********************************************************************
             tskcmd.c       6425    * 
             tskcmd.c       6426    * [概要]  QG12S処理リスト空き確認
             tskcmd.c       6427    * [引数]  
             tskcmd.c       6428    * [戻値]  NO_DATA：空き無し
             tskcmd.c       6429    * 
             tskcmd.c       6430    ***********************************************************************/
             tskcmd.c       6431    static UB GetQgProcList( UB procid )
    000038F6              __$GetQgProcList:                ; function: __$GetQgProcList
                                                           ; frame size=0
    000038F6 E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
             tskcmd.c       6432    {
             tskcmd.c       6433      UB   result = NO_DATA;
             tskcmd.c       6434      UB index;
             tskcmd.c       6435    
             tskcmd.c       6436      if(( procid != NO_DATA )&&( procid != CLR ))
    000038F8 624C                   EXTU.B      R4,R2
    000038FA 611C                   EXTU.B      R1,R1
    000038FC 3210                   CMP/EQ      R1,R2
    000038FE 890D                   BT          L766
    00003900 2228                   TST         R2,R2
    00003902 890B                   BT          L766
             tskcmd.c       6437      {
             tskcmd.c       6438          for( index = 0; index < BCCTRL_MAX; index++ )
    00003904 E400                   MOV         #0,R4      ; H'00000000
    00003906 E713                   MOV         #19,R7     ; H'00000013
    00003908 D532                   MOV.L       L1377+56,R5; H'00000003+__$bcctrl
    0000390A              L768:
             tskcmd.c       6439          {
             tskcmd.c       6440              if(( bcctrl[index].prid1 == NO_DATA )&&( result == NO_DATA ))
    0000390A 36518000               MOVU.B      @(0,R5),R6 ; bcctrl[].prid1
    0000390E 3610                   CMP/EQ      R1,R6
    00003910 8906                   BT          L770
    00003912 7401                   ADD         #1,R4
    00003914 624C                   EXTU.B      R4,R2
    00003916 3273                   CMP/GE      R7,R2
    00003918 8FF7                   BF/S        L768
    0000391A 7508                   ADD         #8,R5
    0000391C              L766:
             tskcmd.c       6441              {
             tskcmd.c       6442                  return( index );//最初にみつけた空き位置
             tskcmd.c       6443              }
             tskcmd.c       6444          }
             tskcmd.c       6445      }
             tskcmd.c       6446      else
             tskcmd.c       6447      {
             tskcmd.c       6448          result = NO_DATA;
             tskcmd.c       6449      }
             tskcmd.c       6450      
             tskcmd.c       6451      return( result );
    0000391C 000B                   RTS
    0000391E E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
    00003920              L770:
    00003920 000B                   RTS
    00003922 6043                   MOV         R4,R0
             tskcmd.c       6452    }
             tskcmd.c       6453    
             tskcmd.c       6454    /***********************************************************************
             tskcmd.c       6455    * 
             tskcmd.c       6456    * [概要]  QG12S処理リスト重複確認
             tskcmd.c       6457    * [引数]  
             tskcmd.c       6458    * [戻値]  TRUE：重複もしくはID規定外
             tskcmd.c       6459    * 
             tskcmd.c       6460    ***********************************************************************/
             tskcmd.c       6461    static BOOL IsQgProcList( UB procid )
    00003924              __$IsQgProcList:                 ; function: __$IsQgProcList
                                                           ; frame size=0
    00003924 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
             tskcmd.c       6462    {
             tskcmd.c       6463      BOOL  result = FALSE;
             tskcmd.c       6464      UB    index;
             tskcmd.c       6465    
             tskcmd.c       6466    //    if(( procid != NO_DATA )&&( procid != CLR )&&( procid < BCCTRL_MAX ))
             tskcmd.c       6467      if(( procid != NO_DATA )&&( procid != CLR ))
    00003926 674C                   EXTU.B      R4,R7
    00003928 622C                   EXTU.B      R2,R2
    0000392A 3720                   CMP/EQ      R2,R7
    0000392C 8D0D                   BT/S        L774
    0000392E E100                   MOV         #0,R1      ; H'00000000
    00003930 2778                   TST         R7,R7
    00003932 890A                   BT          L774
             tskcmd.c       6468      {
             tskcmd.c       6469          for( index = 0; index < BCCTRL_MAX; index++ )
    00003934 E413                   MOV         #19,R4     ; H'00000013
    00003936 D527                   MOV.L       L1377+56,R5; H'00000003+__$bcctrl
    00003938              L776:
             tskcmd.c       6470          {
             tskcmd.c       6471              if( bcctrl[index].prid1 == procid )
    00003938 36518000               MOVU.B      @(0,R5),R6 ; bcctrl[].prid1
    0000393C 3670                   CMP/EQ      R7,R6
    0000393E 8904                   BT          L774
    00003940 4410                   DT          R4
    00003942 8FF9                   BF/S        L776
    00003944 7508                   ADD         #8,R5
    00003946 A002                   BRA         L778
    00003948 0009                   NOP
    0000394A              L774:
    0000394A E101                   MOV         #1,R1      ; H'00000001
    0000394C 017B                   RTV/N       R1
    0000394E              L778:
    0000394E 017B                   RTV/N       R1
             tskcmd.c       6472              {
             tskcmd.c       6473                  result =  TRUE;
             tskcmd.c       6474                  break;
             tskcmd.c       6475              }
             tskcmd.c       6476          }
             tskcmd.c       6477      }
             tskcmd.c       6478      else
             tskcmd.c       6479      {
             tskcmd.c       6480          result =  TRUE;
             tskcmd.c       6481      }
             tskcmd.c       6482      
             tskcmd.c       6483      return( result );
             tskcmd.c       6484    }
             tskcmd.c       6485    /***********************************************************************
             tskcmd.c       6486    * 
             tskcmd.c       6487    * [概要]  
             tskcmd.c       6488    * [引数]  
             tskcmd.c       6489    * [戻値]  
             tskcmd.c       6490    * 
             tskcmd.c       6491    ***********************************************************************/
             tskcmd.c       6492    static void SetUserInfoSorce( ST_USERINFO *user )
    00003950              __$SetUserInfoSorce:             ; function: __$SetUserInfoSorce
                                                           ; frame size=0
             tskcmd.c       6493    {
             tskcmd.c       6494      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
             tskcmd.c       6495      memcpy( &RcvUserInfo.Id[0], user, sizeof(ST_USERINFO) );
    00003950 6543                   MOV         R4,R5
    00003952 D421                   MOV.L       L1377+60,R4; __$RcvUserInfo
    00003954 D221                   MOV.L       L1377+64,R2; _memcpy
    00003956 422B                   JMP         @R2
    00003958 E60C                   MOV         #12,R6     ; H'0000000C
             tskcmd.c       6496    }
             tskcmd.c       6497    /***********************************************************************
             tskcmd.c       6498    * 
             tskcmd.c       6499    * [概要]  
             tskcmd.c       6500    * [引数]  
             tskcmd.c       6501    * [戻値]  
             tskcmd.c       6502    * 
             tskcmd.c       6503    ***********************************************************************/
             tskcmd.c       6504    static void ClrUserInfoSorce()
             tskcmd.c       6505    {
             tskcmd.c       6506      memset( &RcvUserInfo.Id[0], CLR, sizeof( ST_USERINFO ) );
             tskcmd.c       6507    }
             tskcmd.c       6508    /***********************************************************************
             tskcmd.c       6509    * 
             tskcmd.c       6510    * [概要]  
             tskcmd.c       6511    * [引数]  
             tskcmd.c       6512    * [戻値]  
             tskcmd.c       6513    * 
             tskcmd.c       6514    ***********************************************************************/
             tskcmd.c       6515    static UB ChkUserInfo()
    0000395A              __$ChkUserInfo:                  ; function: __$ChkUserInfo
                                                           ; frame size=28
    0000395A 49F0                   MOVMU.L     R9,@-R15
    0000395C DE20                   MOV.L       L1377+68,R14; __$BkP1
    0000395E 64E3                   MOV         R14,R4
             tskcmd.c       6516    {
             tskcmd.c       6517      UB i = 0;
             tskcmd.c       6518      
             tskcmd.c       6519      eep_GetUserInfo  ( &BkP1.User[0].Id[0] );
             tskcmd.c       6520    
             tskcmd.c       6521      for( i = 0; i < USER_CT_MAX; i++ )
    00003960 D220                   MOV.L       L1377+72,R2; _eep_GetUserInfo
    00003962 420B                   JSR         @R2
    00003964 ED00                   MOV         #0,R13     ; H'00000000
    00003966 DA20                   MOV.L       L1377+76,R10; _Strncmp
    00003968 DC1B                   MOV.L       L1377+60,R12; __$RcvUserInfo
    0000396A DB20                   MOV.L       L1377+80,R11; H'00000008+__$RcvUserInfo
    0000396C E90A                   MOV         #10,R9     ; H'0000000A
    0000396E              L782:
    0000396E E608                   MOV         #8,R6      ; H'00000008
             tskcmd.c       6522      {
             tskcmd.c       6523          if(
    00003970 65E3                   MOV         R14,R5
    00003972 4A0B                   JSR         @R10
    00003974 64C3                   MOV         R12,R4
    00003976 2008                   TST         R0,R0
    00003978 8B08                   BF          L784
    0000397A 65E3                   MOV         R14,R5
    0000397C 7508                   ADD         #8,R5
    0000397E E604                   MOV         #4,R6      ; H'00000004
    00003980 4A0B                   JSR         @R10
    00003982 64B3                   MOV         R11,R4
    00003984 2008                   TST         R0,R0
    00003986 8B01                   BF          L784
             tskcmd.c       6524              ( Strncmp( &RcvUserInfo.Id[0], &BkP1.User[i].Id[0], USER_ID_MAX ) == 0 )&&
             tskcmd.c       6525              ( Strncmp( &RcvUserInfo.Pw[0], &BkP1.User[i].Pw[0], USER_PW_MAX ) == 0 )
             tskcmd.c       6526          )
             tskcmd.c       6527          {
             tskcmd.c       6528              i++;
    00003988 A005                   BRA         L786
    0000398A 7D01                   ADD         #1,R13
    0000398C              L784:
    0000398C 7D01                   ADD         #1,R13
    0000398E 62DC                   EXTU.B      R13,R2
    00003990 3293                   CMP/GE      R9,R2
    00003992 8FEC                   BF/S        L782
    00003994 7E0C                   ADD         #12,R14
    00003996              L786:
    00003996 60D3                   MOV         R13,R0
    00003998 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       6529              break;
             tskcmd.c       6530          }
             tskcmd.c       6531      }
             tskcmd.c       6532      
             tskcmd.c       6533      return(i);
             tskcmd.c       6534    }
    0000399A 006B                   RTS/N
    0000399C              L1377:
    0000399C <00000000>             .DATA.L     __$CmdActionWait
    000039A0 <00000000>             .DATA.L     __$CmdActionMix
    000039A4 <00000000>             .DATA.L     __$CmdActionSuc
    000039A8 <00000000>             .DATA.L     __$CmdActionPut
    000039AC <00000000>             .DATA.L     __$CmdActionPrep1
    000039B0 <00000000>             .DATA.L     __$CmdActionPrep2
    000039B4 <00000000>             .DATA.L     __$CmdActionIncub
    000039B8 <00000000>             .DATA.L     __$CmdActionMove
    000039BC <00000000>             .DATA.L     __$pProcDat
    000039C0 <00000000>             .DATA.L     __$pProcAdr
    000039C4 <00000000>             .DATA.L     _memset
    000039C8 <00000000>             .DATA.L     _DeviceInfoClr
    000039CC <00000000>             .DATA.L     _DeviceInfoSet
    000039D0 <00000000>             .DATA.L     __$bcctrl
    000039D4 <00000003>             .DATA.L     H'00000003+__$bcctrl
    000039D8 <00000000>             .DATA.L     __$RcvUserInfo
    000039DC <00000000>             .DATA.L     _memcpy
    000039E0 <00000000>             .DATA.L     __$BkP1
    000039E4 <00000000>             .DATA.L     _eep_GetUserInfo
    000039E8 <00000000>             .DATA.L     _Strncmp
    000039EC <00000008>             .DATA.L     H'00000008+__$RcvUserInfo
             tskcmd.c       6535    
             tskcmd.c       6536    /***********************************************************************
             tskcmd.c       6537    * 
             tskcmd.c       6538    * [概要]  
             tskcmd.c       6539    * [引数]  
             tskcmd.c       6540    * [戻値]  
             tskcmd.c       6541    * 
             tskcmd.c       6542    ***********************************************************************/
             tskcmd.c       6543    static UB GetProtocolStatus( UB dev, UB ptn )
             tskcmd.c       6544    {
             tskcmd.c       6545      UB result = E_OK;
             tskcmd.c       6546      
             tskcmd.c       6547      // ステップから状態読込み
             tskcmd.c       6548      
             tskcmd.c       6549      
             tskcmd.c       6550      
             tskcmd.c       6551      
             tskcmd.c       6552      return( result );
             tskcmd.c       6553    }
             tskcmd.c       6554    /***********************************************************************
             tskcmd.c       6555    * 
             tskcmd.c       6556    * [概要]  状態取得
             tskcmd.c       6557    * [引数]  
             tskcmd.c       6558    * [戻値]  
             tskcmd.c       6559    * 
             tskcmd.c       6560    ***********************************************************************/
             tskcmd.c       6561    static ER  CmdActionStatus( T_CMD_MSG* mrcv )
             tskcmd.c       6562    {
             tskcmd.c       6563      ER result = E_CONTINUE;
             tskcmd.c       6564      return( result );
             tskcmd.c       6565    }
             tskcmd.c       6566    
             tskcmd.c       6567    /***********************************************************************
             tskcmd.c       6568    * 
             tskcmd.c       6569    * [概要]  チップ取得
             tskcmd.c       6570    * [引数]  
             tskcmd.c       6571    * [戻値]  
             tskcmd.c       6572    * 
             tskcmd.c       6573    ***********************************************************************/
             tskcmd.c       6574    static ER  CmdActionTipGet( T_CMD_MSG* mrcv )
    000039F0              __$CmdActionTipGet:              ; function: __$CmdActionTipGet
                                                           ; frame size=228
    000039F0 4AF0                   MOVMU.L     R10,@-R15
    000039F2 03F0FF54               MOVI20      #-172,R3   ; H'FFFFFF54
    000039F6 3F3C                   ADD         R3,R15
             tskcmd.c       6575    {
             tskcmd.c       6576      ER result = E_CONTINUE;
    000039F8 6243                   MOV         R4,R2
    000039FA E4F1                   MOV         #-15,R4    ; H'FFFFFFF1
             tskcmd.c       6577      UB bcid;
             tskcmd.c       6578      UB prid1;
             tskcmd.c       6579      UB actstep;
             tskcmd.c       6580      UB spdptn;
             tskcmd.c       6581      UB movptn;
             tskcmd.c       6582      UB devno;
             tskcmd.c       6583      INT movval;
             tskcmd.c       6584    
             tskcmd.c       6585      UB spdptnwk;
             tskcmd.c       6586      bcid  = mrcv->msgdata.bcid;
    000039FC 3021801A               MOVU.B      @(26,R2),R0; (mrcv)->bcid
             tskcmd.c       6587      actstep = bcctrl[bcid].actstp -1 ;
    00003A00 D59F                   MOV.L       L1378,R5   ; H'00000002+__$bcctrl
    00003A02 6C03                   MOV         R0,R12
    00003A04 4008                   SHLL2       R0
    00003A06 4000                   SHLL        R0
    00003A08 015C                   MOV.B       @(R0,R5),R1; bcctrl[].actstp
    00003A0A 644C                   EXTU.B      R4,R4
             tskcmd.c       6588      
             tskcmd.c       6589      switch( pProcDat->Stp )
    00003A0C DA9D                   MOV.L       L1378+4,R10; __$pProcDat
    00003A0E 71FF                   ADD         #-1,R1
    00003A10 6E1C                   EXTU.B      R1,R14
    00003A12 61A2                   MOV.L       @R10,R1    ; pProcDat
    00003A14 32118002               MOVU.B      @(2,R1),R2 ; (pProcDat)->Stp
    00003A18 2228                   TST         R2,R2
    00003A1A 8D17                   BT/S        L798
    00003A1C 6B43                   MOV         R4,R11
    00003A1E 6023                   MOV         R2,R0
    00003A20 8801                   CMP/EQ      #1,R0
    00003A22 8916                   BT          L800
    00003A24 8802                   CMP/EQ      #2,R0
    00003A26 894C                   BT          L802
    00003A28 8803                   CMP/EQ      #3,R0
    00003A2A 8B01                   BF          L1401
    00003A2C A095                   BRA         L804
    00003A2E 0009                   NOP
    00003A30              L1401:
    00003A30 8804                   CMP/EQ      #4,R0
    00003A32 8B01                   BF          L1402
    00003A34 A0DD                   BRA         L806
    00003A36 0009                   NOP
    00003A38              L1402:
    00003A38 8805                   CMP/EQ      #5,R0
    00003A3A 8B01                   BF          L1403
    00003A3C A13A                   BRA         L808
    00003A3E 0009                   NOP
    00003A40              L1403:
    00003A40 8806                   CMP/EQ      #6,R0
    00003A42 8B01                   BF          L1404
    00003A44 A186                   BRA         L809
    00003A46 0009                   NOP
    00003A48              L1404:
    00003A48 A188                   BRA         L810
    00003A4A 0009                   NOP
    00003A4C              L798:
             tskcmd.c       6590      {
             tskcmd.c       6591      case 0: // チップ未装着確認（チップ装着済みの場合、チップ装着エラー通知し終了）
             tskcmd.c       6592          // ★チップ有無確認したいが、センサ無しのため、スルー
             tskcmd.c       6593          
             tskcmd.c       6594          
             tskcmd.c       6595          
             tskcmd.c       6596          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6597          pProcDat->Stp++;
    00003A4C 7201                   ADD         #1,R2
    00003A4E 6023                   MOV         R2,R0
    00003A50 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00003A52              L800:
             tskcmd.c       6598          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6599    
             tskcmd.c       6600    
             tskcmd.c       6601      case 1: // Z軸速度設定・退避位置移動
             tskcmd.c       6602          devno  = MT_Z0;
             tskcmd.c       6603          spdptn = SpPtn.Z0_SpdIniPtn;
    00003A52 D28D                   MOV.L       L1378+8,R2 ; H'00000001+__$SpPtn
    00003A54 6E20                   MOV.B       @R2,R14    ; SpPtn.Z0_SpdIniPtn
             tskcmd.c       6604          movval = GetPositionValue(POS_Z0_TAIHI);
    00003A56 D38D                   MOV.L       L1378+12,R3; __$GetPositionValue
    00003A58 430B                   JSR         @R3
    00003A5A E407                   MOV         #7,R4      ; H'00000007
    00003A5C 6D03                   MOV         R0,R13
             tskcmd.c       6605    
             tskcmd.c       6606          MAC_SPEED_SET( devno, 
    00003A5E E00C                   MOV         #12,R0     ; H'0000000C
    00003A60 6EEC                   EXTU.B      R14,R14
    00003A62 4E80                   MULR        R0,R14
    00003A64 D48A                   MOV.L       L1378+16,R4; __$Sp
    00003A66 3E4C                   ADD         R4,R14
    00003A68 31E1503C               MOV.W       @(120:12,R14),R1; Sp[].ac
    00003A6C 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
    00003A70 D588                   MOV.L       L1378+20,R5; _GetFactor
    00003A72 450B                   JSR         @R5
    00003A74 E403                   MOV         #3,R4      ; H'00000003
    00003A76 36E1601F               MOV.L       @(124:12,R14),R6; Sp[].fl
    00003A7A 37E16020               MOV.L       @(128:12,R14),R7; Sp[].fh
    00003A7E 31E1903D               MOVU.W      @(122,R14),R1; Sp[].gl
    00003A82 E400                   MOV         #0,R4      ; H'00000000
    00003A84 2F02                   MOV.L       R0,@R15    ; mp.factor
    00003A86 1F62                   MOV.L       R6,@(8,R15); mp.FL
    00003A88 1F73                   MOV.L       R7,@(12,R15); mp.FH
    00003A8A 1F14                   MOV.L       R1,@(16,R15); mp.utime
    00003A8C 1F15                   MOV.L       R1,@(20,R15); mp.dtime
    00003A8E 1F46                   MOV.L       R4,@(24,R15); mp.us
    00003A90 1F47                   MOV.L       R4,@(28,R15); mp.ds
    00003A92 7FE0                   ADD         #-32,R15
    00003A94 65F3                   MOV         R15,R5
    00003A96 7520                   ADD         #32,R5
    00003A98 6752                   MOV.L       @R5,R7     ; (part of)mp
    00003A9A 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    00003A9C 5153                   MOV.L       @(12,R5),R1; (part of)mp
    00003A9E 2F72                   MOV.L       R7,@R15
    00003AA0 1FE1                   MOV.L       R14,@(4,R15)
    00003AA2 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    00003AA4 1F13                   MOV.L       R1,@(12,R15)
    00003AA6 5754                   MOV.L       @(16,R5),R7; (part of)mp
    00003AA8 5155                   MOV.L       @(20,R5),R1; (part of)mp
    00003AAA 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00003AAC 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00003AAE 1FE2                   MOV.L       R14,@(8,R15)
    00003AB0 1F74                   MOV.L       R7,@(16,R15)
    00003AB2 1F15                   MOV.L       R1,@(20,R15)
    00003AB4 1F66                   MOV.L       R6,@(24,R15)
    00003AB6 1F27                   MOV.L       R2,@(28,R15)
    00003AB8 D277                   MOV.L       L1378+24,R2; _motor_SET
    00003ABA 420B                   JSR         @R2
    00003ABC E402                   MOV         #2,R4      ; H'00000002
    00003ABE A139                   BRA         L811
    00003AC0 7F20                   ADD         #32,R15
    00003AC2              L802:
             tskcmd.c       6607                         Sp[devno][spdptn].ac, 
             tskcmd.c       6608                         Sp[devno][spdptn].fl, 
             tskcmd.c       6609                         Sp[devno][spdptn].fh, 
             tskcmd.c       6610                         Sp[devno][spdptn].gl );
             tskcmd.c       6611    
             tskcmd.c       6612          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6613          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6614          pProcDat->Stp++;
             tskcmd.c       6615          break;
             tskcmd.c       6616    
             tskcmd.c       6617      case 2: // Y0軸速度設定・チップ装着位置移動
             tskcmd.c       6618          devno  = MT_Y0;
             tskcmd.c       6619          spdptn = SpPtn.Y0_SpdNmlPtn;
    00003AC2 D276                   MOV.L       L1378+28,R2; H'00000005+__$SpPtn
    00003AC4 6120                   MOV.B       @R2,R1     ; SpPtn.Y0_SpdNmlPtn
    00003AC6 E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6620          MAC_SPEED_SET( devno, 
    00003AC8 DD75                   MOV.L       L1378+32,R13; H'0000003C+__$Sp
    00003ACA 3F1100A8               MOV.B       R1,@(168:12,R15); spdptn
    00003ACE 611C                   EXTU.B      R1,R1
    00003AD0 4180                   MULR        R0,R1
    00003AD2 6013                   MOV         R1,R0
    00003AD4 02DD                   MOV.W       @(R0,R13),R2; Sp[].ac
    00003AD6 3F211012               MOV.W       R2,@(36:12,R15); mp.accel_type
    00003ADA D56E                   MOV.L       L1378+20,R5; _GetFactor
    00003ADC 450B                   JSR         @R5
    00003ADE E403                   MOV         #3,R4      ; H'00000003
    00003AE0 35F180A8               MOVU.B      @(168,R15),R5; spdptn
    00003AE4 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00003AE6 E00C                   MOV         #12,R0     ; H'0000000C
    00003AE8 4580                   MULR        R0,R5
    00003AEA D169                   MOV.L       L1378+16,R1; __$Sp
    00003AEC E400                   MOV         #0,R4      ; H'00000000
    00003AEE 1F4E                   MOV.L       R4,@(56,R15); mp.us
    00003AF0 351C                   ADD         R1,R5
    00003AF2 1F4F                   MOV.L       R4,@(60,R15); mp.ds
    00003AF4 37516010               MOV.L       @(64:12,R5),R7; Sp[].fl
    00003AF8 3D516011               MOV.L       @(68:12,R5),R13; Sp[].fh
    00003AFC 3151901F               MOVU.W      @(62,R5),R1; Sp[].gl
    00003B00 1F7A                   MOV.L       R7,@(40,R15); mp.FL
    00003B02 1FDB                   MOV.L       R13,@(44,R15); mp.FH
    00003B04 1F1C                   MOV.L       R1,@(48,R15); mp.utime
    00003B06 1F1D                   MOV.L       R1,@(52,R15); mp.dtime
    00003B08 7FE0                   ADD         #-32,R15
    00003B0A 61F3                   MOV         R15,R1
    00003B0C 7140                   ADD         #64,R1
    00003B0E 5613                   MOV.L       @(12,R1),R6; (part of)mp
    00003B10 6D12                   MOV.L       @R1,R13    ; (part of)mp
    00003B12 1F63                   MOV.L       R6,@(12,R15)
    00003B14 5214                   MOV.L       @(16,R1),R2; (part of)mp
    00003B16 5615                   MOV.L       @(20,R1),R6; (part of)mp
    00003B18 5711                   MOV.L       @(4,R1),R7 ; (part of)mp
    00003B1A 2FD2                   MOV.L       R13,@R15
    00003B1C 5D12                   MOV.L       @(8,R1),R13; (part of)mp
    00003B1E 1F24                   MOV.L       R2,@(16,R15)
    00003B20 1F65                   MOV.L       R6,@(20,R15)
    00003B22 5616                   MOV.L       @(24,R1),R6; (part of)mp
    00003B24 5217                   MOV.L       @(28,R1),R2; (part of)mp
    00003B26 1F71                   MOV.L       R7,@(4,R15)
    00003B28 1FD2                   MOV.L       R13,@(8,R15)
    00003B2A 1F66                   MOV.L       R6,@(24,R15)
    00003B2C 1F27                   MOV.L       R2,@(28,R15)
    00003B2E D25A                   MOV.L       L1378+24,R2; _motor_SET
    00003B30 420B                   JSR         @R2
    00003B32 E401                   MOV         #1,R4      ; H'00000001
    00003B34 7F20                   ADD         #32,R15
             tskcmd.c       6621                         Sp[devno][spdptn].ac, 
             tskcmd.c       6622                         Sp[devno][spdptn].fl, 
             tskcmd.c       6623                         Sp[devno][spdptn].fh, 
             tskcmd.c       6624                         Sp[devno][spdptn].gl );
             tskcmd.c       6625    
             tskcmd.c       6626          movptn = GetTipPatern( pProcAdr->step[actstep].par03 );
    00003B36 E014                   MOV         #20,R0     ; H'00000014
    00003B38 4E80                   MULR        R0,R14
    00003B3A D75A                   MOV.L       L1378+36,R7; __$pProcAdr
    00003B3C 6572                   MOV.L       @R7,R5     ; pProcAdr
    00003B3E 7502                   ADD         #2,R5
    00003B40 60E3                   MOV         R14,R0
    00003B42 D359                   MOV.L       L1378+40,R3; __$GetTipPatern
    00003B44 430B                   JSR         @R3
    00003B46 045C                   MOV.B       @(R0,R5),R4; pProcAdr->step[].par03
             tskcmd.c       6627          movval = GetPositionValue(movptn);
    00003B48 D350                   MOV.L       L1378+12,R3; __$GetPositionValue
    00003B4A 430B                   JSR         @R3
    00003B4C 6403                   MOV         R0,R4
             tskcmd.c       6628          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00003B4E 2F06                   MOV.L       R0,@-R15
    00003B50 E601                   MOV         #1,R6      ; H'00000001
    00003B52 65C3                   MOV         R12,R5
    00003B54 E700                   MOV         #0,R7      ; H'00000000
    00003B56 A0F2                   BRA         L812
    00003B58 E451                   MOV         #81,R4     ; H'00000051
    00003B5A              L804:
             tskcmd.c       6629          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6630          pProcDat->Stp++;
             tskcmd.c       6631          break;
             tskcmd.c       6632          
             tskcmd.c       6633      case 3: // Z軸チップ取得速度（1段目）設定・1段目位置移動
             tskcmd.c       6634          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
    00003B5A E014                   MOV         #20,R0     ; H'00000014
    00003B5C 64E3                   MOV         R14,R4
    00003B5E 4480                   MULR        R0,R4
    00003B60 D750                   MOV.L       L1378+36,R7; __$pProcAdr
    00003B62 6672                   MOV.L       @R7,R6     ; pProcAdr
    00003B64 EDFC                   MOV         #-4,R13    ; H'FFFFFFFC
    00003B66 7603                   ADD         #3,R6
    00003B68 6043                   MOV         R4,R0
    00003B6A 066C                   MOV.B       @(R0,R6),R6; pProcAdr->step[].par04
    00003B6C 606C                   EXTU.B      R6,R0
    00003B6E 40DC                   SHAD        R13,R0
    00003B70 C90F                   AND         #15,R0
             tskcmd.c       6635          
             tskcmd.c       6636          if( spdptn > 0 )
    00003B72 2008                   TST         R0,R0
    00003B74 8D3A                   BT/S        L814
    00003B76 6603                   MOV         R0,R6
             tskcmd.c       6637          {
             tskcmd.c       6638              devno  = MT_Z0;
             tskcmd.c       6639              MAC_SPEED_SET( devno, 
    00003B78 E00C                   MOV         #12,R0     ; H'0000000C
    00003B7A E403                   MOV         #3,R4      ; H'00000003
    00003B7C 4680                   MULR        R0,R6
    00003B7E DE44                   MOV.L       L1378+16,R14; __$Sp
    00003B80 36EC                   ADD         R14,R6
    00003B82 3F612028               MOV.L       R6,@(160:12,R15)
    00003B86 3161503C               MOV.W       @(120:12,R6),R1; Sp[].ac
    00003B8A 3F111022               MOV.W       R1,@(68:12,R15); mp.accel_type
    00003B8E D541                   MOV.L       L1378+20,R5; _GetFactor
    00003B90 450B                   JSR         @R5
    00003B92 6E63                   MOV         R6,R14
    00003B94 E340                   MOV         #64,R3     ; H'00000040
    00003B96 36E1601F               MOV.L       @(124:12,R14),R6; Sp[].fl
    00003B9A 37E16020               MOV.L       @(128:12,R14),R7; Sp[].fh
    00003B9E 3DE1903D               MOVU.W      @(122,R14),R13; Sp[].gl
    00003BA2 33FC                   ADD         R15,R3
    00003BA4 EE00                   MOV         #0,R14     ; H'00000000
    00003BA6 2302                   MOV.L       R0,@R3     ; mp.factor
    00003BA8 1362                   MOV.L       R6,@(8,R3) ; mp.FL
    00003BAA 1373                   MOV.L       R7,@(12,R3); mp.FH
    00003BAC 13D4                   MOV.L       R13,@(16,R3); mp.utime
    00003BAE 13D5                   MOV.L       R13,@(20,R3); mp.dtime
    00003BB0 13E6                   MOV.L       R14,@(24,R3); mp.us
    00003BB2 13E7                   MOV.L       R14,@(28,R3); mp.ds
    00003BB4 7FE0                   ADD         #-32,R15
    00003BB6 65F3                   MOV         R15,R5
    00003BB8 7560                   ADD         #96,R5
    00003BBA 6252                   MOV.L       @R5,R2     ; (part of)mp
    00003BBC 5151                   MOV.L       @(4,R5),R1 ; (part of)mp
    00003BBE 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    00003BC0 2F22                   MOV.L       R2,@R15
    00003BC2 1F11                   MOV.L       R1,@(4,R15)
    00003BC4 5453                   MOV.L       @(12,R5),R4; (part of)mp
    00003BC6 1F72                   MOV.L       R7,@(8,R15)
    00003BC8 5D54                   MOV.L       @(16,R5),R13; (part of)mp
    00003BCA 5755                   MOV.L       @(20,R5),R7; (part of)mp
    00003BCC 5156                   MOV.L       @(24,R5),R1; (part of)mp
    00003BCE 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00003BD0 1F43                   MOV.L       R4,@(12,R15)
    00003BD2 1FD4                   MOV.L       R13,@(16,R15)
    00003BD4 1F75                   MOV.L       R7,@(20,R15)
    00003BD6 1F16                   MOV.L       R1,@(24,R15)
    00003BD8 1F27                   MOV.L       R2,@(28,R15)
    00003BDA D22F                   MOV.L       L1378+24,R2; _motor_SET
    00003BDC 420B                   JSR         @R2
    00003BDE E402                   MOV         #2,R4      ; H'00000002
    00003BE0 7F20                   ADD         #32,R15
             tskcmd.c       6640                             Sp[devno][spdptn].ac, 
             tskcmd.c       6641                             Sp[devno][spdptn].fl, 
             tskcmd.c       6642                             Sp[devno][spdptn].fh, 
             tskcmd.c       6643                             Sp[devno][spdptn].gl );
             tskcmd.c       6644              movval = GetPositionValue(POS_Z0_TPGT1);
    00003BE2 D32A                   MOV.L       L1378+12,R3; __$GetPositionValue
    00003BE4 430B                   JSR         @R3
    00003BE6 E41B                   MOV         #27,R4     ; H'0000001B
    00003BE8 A0A4                   BRA         L811
    00003BEA 6D03                   MOV         R0,R13
    00003BEC              L814:
             tskcmd.c       6645              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6646              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6647              pProcDat->Stp++;
             tskcmd.c       6648              break;
             tskcmd.c       6649          }
             tskcmd.c       6650          else
             tskcmd.c       6651          {
             tskcmd.c       6652              pProcDat->Stp++;
    00003BEC 7201                   ADD         #1,R2
    00003BEE 6023                   MOV         R2,R0
    00003BF0 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00003BF2              L806:
             tskcmd.c       6653              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6654          }
             tskcmd.c       6655    
             tskcmd.c       6656    
             tskcmd.c       6657      case 4: // Z軸チップ取得速度（最終）設定・最終位置移動
             tskcmd.c       6658          spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
    00003BF2 E014                   MOV         #20,R0     ; H'00000014
    00003BF4 4E80                   MULR        R0,R14
    00003BF6 D72B                   MOV.L       L1378+36,R7; __$pProcAdr
    00003BF8 6272                   MOV.L       @R7,R2     ; pProcAdr
    00003BFA 7203                   ADD         #3,R2
    00003BFC 60E3                   MOV         R14,R0
    00003BFE 002C                   MOV.B       @(R0,R2),R0; pProcAdr->step[].par04
    00003C00 C90F                   AND         #15,R0
             tskcmd.c       6659    
             tskcmd.c       6660          if( spdptn > 0 )
    00003C02 2008                   TST         R0,R0
    00003C04 8D52                   BT/S        L816
    00003C06 6603                   MOV         R0,R6
             tskcmd.c       6661          {
             tskcmd.c       6662              devno  = MT_Z0;
             tskcmd.c       6663              MAC_SPEED_SET( devno, 
    00003C08 E00C                   MOV         #12,R0     ; H'0000000C
    00003C0A EE60                   MOV         #96,R14    ; H'00000060
    00003C0C 4680                   MULR        R0,R6
    00003C0E D420                   MOV.L       L1378+16,R4; __$Sp
    00003C10 3EFC                   ADD         R15,R14
    00003C12 364C                   ADD         R4,R6
    00003C14 E403                   MOV         #3,R4      ; H'00000003
    00003C16 3061503C               MOV.W       @(120:12,R6),R0; Sp[].ac
    00003C1A 3F612029               MOV.L       R6,@(164:12,R15)
    00003C1E D51D                   MOV.L       L1378+20,R5; _GetFactor
    00003C20 450B                   JSR         @R5
    00003C22 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    00003C24 32F16029               MOV.L       @(164:12,R15),R2
    00003C28 E100                   MOV         #0,R1      ; H'00000000
    00003C2A 2E02                   MOV.L       R0,@R14    ; mp.factor
    00003C2C 3621601F               MOV.L       @(124:12,R2),R6; Sp[].fl
    00003C30 37216020               MOV.L       @(128:12,R2),R7; Sp[].fh
    00003C34 3D21903D               MOVU.W      @(122,R2),R13; Sp[].gl
    00003C38 1E62                   MOV.L       R6,@(8,R14); mp.FL
    00003C3A 1E73                   MOV.L       R7,@(12,R14); mp.FH
    00003C3C 1ED4                   MOV.L       R13,@(16,R14); mp.utime
    00003C3E 1ED5                   MOV.L       R13,@(20,R14); mp.dtime
    00003C40 1E16                   MOV.L       R1,@(24,R14); mp.us
    00003C42 1E17                   MOV.L       R1,@(28,R14); mp.ds
    00003C44 7FE0                   ADD         #-32,R15
    00003C46 E480                   MOV         #-128,R4   ; H'FFFFFF80
    00003C48 65F3                   MOV         R15,R5
    00003C4A 644C                   EXTU.B      R4,R4
    00003C4C 354C                   ADD         R4,R5
    00003C4E 6752                   MOV.L       @R5,R7     ; (part of)mp
    00003C50 5D52                   MOV.L       @(8,R5),R13; (part of)mp
    00003C52 5E54                   MOV.L       @(16,R5),R14; (part of)mp
    00003C54 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    00003C56 2F72                   MOV.L       R7,@R15
    00003C58 5753                   MOV.L       @(12,R5),R7; (part of)mp
    00003C5A 1FD2                   MOV.L       R13,@(8,R15)
    00003C5C 5D55                   MOV.L       @(20,R5),R13; (part of)mp
    00003C5E 1FE4                   MOV.L       R14,@(16,R15)
    00003C60 5E56                   MOV.L       @(24,R5),R14; (part of)mp
    00003C62 5157                   MOV.L       @(28,R5),R1; (part of)mp
    00003C64 1F41                   MOV.L       R4,@(4,R15)
    00003C66 E402                   MOV         #2,R4      ; H'00000002
    00003C68 1F73                   MOV.L       R7,@(12,R15)
    00003C6A 1FD5                   MOV.L       R13,@(20,R15)
    00003C6C 1FE6                   MOV.L       R14,@(24,R15)
    00003C6E D20A                   MOV.L       L1378+24,R2; _motor_SET
    00003C70 420B                   JSR         @R2
    00003C72 1F17                   MOV.L       R1,@(28,R15)
    00003C74 7F20                   ADD         #32,R15
             tskcmd.c       6664                             Sp[devno][spdptn].ac, 
             tskcmd.c       6665                             Sp[devno][spdptn].fl, 
             tskcmd.c       6666                             Sp[devno][spdptn].fh, 
             tskcmd.c       6667                             Sp[devno][spdptn].gl );
             tskcmd.c       6668              movval = GetPositionValue(POS_Z0_TPGTE);
    00003C76 D305                   MOV.L       L1378+12,R3; __$GetPositionValue
    00003C78 430B                   JSR         @R3
    00003C7A E41A                   MOV         #26,R4     ; H'0000001A
    00003C7C A05A                   BRA         L811
    00003C7E 6D03                   MOV         R0,R13
    00003C80              L1378:
    00003C80 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00003C84 <00000000>             .DATA.L     __$pProcDat
    00003C88 <00000001>             .DATA.L     H'00000001+__$SpPtn
    00003C8C <00000000>             .DATA.L     __$GetPositionValue
    00003C90 <00000000>             .DATA.L     __$Sp
    00003C94 <00000000>             .DATA.L     _GetFactor
    00003C98 <00000000>             .DATA.L     _motor_SET
    00003C9C <00000005>             .DATA.L     H'00000005+__$SpPtn
    00003CA0 <0000003C>             .DATA.L     H'0000003C+__$Sp
    00003CA4 <00000000>             .DATA.L     __$pProcAdr
    00003CA8 <00000000>             .DATA.L     __$GetTipPatern
    00003CAC              L816:
             tskcmd.c       6669    
             tskcmd.c       6670              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6671              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6672              pProcDat->Stp++;
             tskcmd.c       6673              break;
             tskcmd.c       6674          }
             tskcmd.c       6675          else
             tskcmd.c       6676          {
             tskcmd.c       6677              pProcDat->Stp++;
    00003CAC 66A2                   MOV.L       @R10,R6    ; pProcDat
    00003CAE 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00003CB0 7001                   ADD         #1,R0
    00003CB2 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00003CB4              L808:
             tskcmd.c       6678              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6679          }
             tskcmd.c       6680    
             tskcmd.c       6681      case 5: // Z軸速度設定・退避位置移動
             tskcmd.c       6682          devno  = MT_Z0;
             tskcmd.c       6683          spdptn = SpPtn.Z0_SpdNmlPtn;
    00003CB4 D23C                   MOV.L       L833+2,R2  ; H'00000006+__$SpPtn
    00003CB6 6020                   MOV.B       @R2,R0     ; SpPtn.Z0_SpdNmlPtn
             tskcmd.c       6684          movval = GetPositionValue(POS_Z0_TAIHI);
    00003CB8 E407                   MOV         #7,R4      ; H'00000007
    00003CBA 3F0100A8               MOV.B       R0,@(168:12,R15); spdptn
    00003CBE D33B                   MOV.L       L833+6,R3  ; __$GetPositionValue
    00003CC0 430B                   JSR         @R3
    00003CC2 EE80                   MOV         #-128,R14  ; H'FFFFFF80
             tskcmd.c       6685    
             tskcmd.c       6686          MAC_SPEED_SET( devno, 
    00003CC4 31F180A8               MOVU.B      @(168,R15),R1; spdptn
    00003CC8 6D03                   MOV         R0,R13
    00003CCA E00C                   MOV         #12,R0     ; H'0000000C
    00003CCC 4180                   MULR        R0,R1
    00003CCE D438                   MOV.L       L833+10,R4 ; __$Sp
    00003CD0 6EEC                   EXTU.B      R14,R14
    00003CD2 3EFC                   ADD         R15,R14
    00003CD4 314C                   ADD         R4,R1
    00003CD6 E403                   MOV         #3,R4      ; H'00000003
    00003CD8 1E19                   MOV.L       R1,@(36,R14)
    00003CDA 3011503C               MOV.W       @(120:12,R1),R0; Sp[].ac
    00003CDE D535                   MOV.L       L833+14,R5 ; _GetFactor
    00003CE0 450B                   JSR         @R5
    00003CE2 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    00003CE4 55E9                   MOV.L       @(36,R14),R5
    00003CE6 E400                   MOV         #0,R4      ; H'00000000
    00003CE8 2E02                   MOV.L       R0,@R14    ; mp.factor
    00003CEA 3651601F               MOV.L       @(124:12,R5),R6; Sp[].fl
    00003CEE 37516020               MOV.L       @(128:12,R5),R7; Sp[].fh
    00003CF2 3151903D               MOVU.W      @(122,R5),R1; Sp[].gl
    00003CF6 1E62                   MOV.L       R6,@(8,R14); mp.FL
    00003CF8 1E73                   MOV.L       R7,@(12,R14); mp.FH
    00003CFA 1E14                   MOV.L       R1,@(16,R14); mp.utime
    00003CFC 1E15                   MOV.L       R1,@(20,R14); mp.dtime
    00003CFE 1E46                   MOV.L       R4,@(24,R14); mp.us
    00003D00 1E47                   MOV.L       R4,@(28,R14); mp.ds
    00003D02 7FE0                   ADD         #-32,R15
    00003D04 E7A0                   MOV         #-96,R7    ; H'FFFFFFA0
    00003D06 65F3                   MOV         R15,R5
    00003D08 677C                   EXTU.B      R7,R7
    00003D0A E402                   MOV         #2,R4      ; H'00000002
    00003D0C 357C                   ADD         R7,R5
    00003D0E 6E52                   MOV.L       @R5,R14    ; (part of)mp
    00003D10 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    00003D12 5654                   MOV.L       @(16,R5),R6; (part of)mp
    00003D14 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    00003D16 2FE2                   MOV.L       R14,@R15
    00003D18 5E53                   MOV.L       @(12,R5),R14; (part of)mp
    00003D1A 1F12                   MOV.L       R1,@(8,R15)
    00003D1C 5155                   MOV.L       @(20,R5),R1; (part of)mp
    00003D1E 1F64                   MOV.L       R6,@(16,R15)
    00003D20 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00003D22 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00003D24 1F71                   MOV.L       R7,@(4,R15)
    00003D26 1FE3                   MOV.L       R14,@(12,R15)
    00003D28 1F15                   MOV.L       R1,@(20,R15)
    00003D2A 1F26                   MOV.L       R2,@(24,R15)
    00003D2C D222                   MOV.L       L833+18,R2 ; _motor_SET
    00003D2E 420B                   JSR         @R2
    00003D30 1F67                   MOV.L       R6,@(28,R15)
    00003D32 7F20                   ADD         #32,R15
    00003D34              L811:
    00003D34 2FD6                   MOV.L       R13,@-R15
    00003D36 65C3                   MOV         R12,R5
    00003D38 E700                   MOV         #0,R7      ; H'00000000
    00003D3A E451                   MOV         #81,R4     ; H'00000051
    00003D3C E602                   MOV         #2,R6      ; H'00000002
    00003D3E              L812:
    00003D3E D31F                   MOV.L       L833+22,R3 ; __$AbsmvAction
    00003D40 434B                   JSR/N       @R3
    00003D42 6403                   MOV         R0,R4
    00003D44 7F04                   ADD         #4,R15
    00003D46 61A2                   MOV.L       @R10,R1    ; pProcDat
    00003D48 2008                   TST         R0,R0
    00003D4A 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00003D4C 8F03                   BF/S        L818
    00003D4E 6203                   MOV         R0,R2
    00003D50 A001                   BRA         L818
    00003D52 64B3                   MOV         R11,R4
    00003D54              L809:
             tskcmd.c       6687                         Sp[devno][spdptn].ac, 
             tskcmd.c       6688                         Sp[devno][spdptn].fl, 
             tskcmd.c       6689                         Sp[devno][spdptn].fh, 
             tskcmd.c       6690                         Sp[devno][spdptn].gl );
             tskcmd.c       6691    
             tskcmd.c       6692          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6693          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6694          pProcDat->Stp++;
             tskcmd.c       6695          break;
             tskcmd.c       6696    
             tskcmd.c       6697      case 6: // チップ装着確認（装着失敗時、チップ未装着エラー通知し終了）
             tskcmd.c       6698          // ★チップ有無確認
             tskcmd.c       6699    
             tskcmd.c       6700          result = E_SUCCESS;
    00003D54 E400                   MOV         #0,R4      ; H'00000000
    00003D56              L818:
    00003D56 7201                   ADD         #1,R2
    00003D58 6023                   MOV         R2,R0
    00003D5A 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    00003D5C              L810:
    00003D5C 030000AC               MOVI20      #172,R3    ; H'000000AC
    00003D60 3F3C                   ADD         R3,R15
    00003D62 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       6701          pProcDat->Stp++;
             tskcmd.c       6702          break;
             tskcmd.c       6703      }
             tskcmd.c       6704      return( result );
             tskcmd.c       6705    }
    00003D64 047B                   RTV/N       R4
             tskcmd.c       6706    /***********************************************************************
             tskcmd.c       6707    * 
             tskcmd.c       6708    * [概要]  チップ廃棄
             tskcmd.c       6709    * [引数]  
             tskcmd.c       6710    * [戻値]  
             tskcmd.c       6711    * [備考]  inf3：プランジャリトライカウンタに使用
             tskcmd.c       6712    * 
             tskcmd.c       6713    ***********************************************************************/
             tskcmd.c       6714    static ER  CmdActionTipDsp( T_CMD_MSG* mrcv )
    00003D66              __$CmdActionTipDsp:              ; function: __$CmdActionTipDsp
                                                           ; frame size=232
    00003D66 4AF0                   MOVMU.L     R10,@-R15
    00003D68 03F0FF50               MOVI20      #-176,R3   ; H'FFFFFF50
    00003D6C 3F3C                   ADD         R3,R15
             tskcmd.c       6715    {
             tskcmd.c       6716      ER result = E_CONTINUE;
             tskcmd.c       6717      UB bcid;
             tskcmd.c       6718      UB prid1;
             tskcmd.c       6719      UB actstep;
             tskcmd.c       6720      UB spdptn;
             tskcmd.c       6721      UB movptn;
             tskcmd.c       6722      UB devno;
             tskcmd.c       6723      INT movval;
             tskcmd.c       6724      UB rtycnt;
             tskcmd.c       6725    
             tskcmd.c       6726      bcid  = mrcv->msgdata.bcid;
    00003D6E 3D41801A               MOVU.B      @(26,R4),R13; (mrcv)->bcid
             tskcmd.c       6727      actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       6728      
             tskcmd.c       6729      switch( pProcDat->Stp )
    00003D72 DA13                   MOV.L       L833+26,R10; __$pProcDat
    00003D74 6CD3                   MOV         R13,R12
    00003D76 67A2                   MOV.L       @R10,R7    ; pProcDat
    00003D78 4D08                   SHLL2       R13
    00003D7A E5F1                   MOV         #-15,R5    ; H'FFFFFFF1
    00003D7C 4D00                   SHLL        R13
    00003D7E E108                   MOV         #8,R1      ; H'00000008
    00003D80 D210                   MOV.L       L833+30,R2 ; __$bcctrl
    00003D82 3D2C                   ADD         R2,R13
    00003D84 655C                   EXTU.B      R5,R5
    00003D86 84D2                   MOV.B       @(2,R13),R0; bcctrl[].actstp
    00003D88 6B53                   MOV         R5,R11
    00003D8A 36718002               MOVU.B      @(2,R7),R6 ; (pProcDat)->Stp
    00003D8E 70FF                   ADD         #-1,R0
    00003D90 3616                   CMP/HI      R1,R6
    00003D92 6E0C                   EXTU.B      R0,R14
    00003D94 8F02                   BF/S        L1405
    00003D96 6263                   MOV         R6,R2
    00003D98 A1E7                   BRA         L832
    00003D9A 0009                   NOP
    00003D9C              L1405:
    00003D9C 4600                   SHLL        R6
    00003D9E C70A                   MOVA        L834,R0
    00003DA0 006D                   MOV.W       @(R0,R6),R0
    00003DA2 0023                   BRAF        R0
    00003DA4 0009                   NOP
    00003DA6              L833:
    00003DA6 00000002               .RES.W      1
    00003DA8 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00003DAC <00000000>             .DATA.L     __$GetPositionValue
    00003DB0 <00000000>             .DATA.L     __$Sp
    00003DB4 <00000000>             .DATA.L     _GetFactor
    00003DB8 <00000000>             .DATA.L     _motor_SET
    00003DBC <00000000>             .DATA.L     __$AbsmvAction
    00003DC0 <00000000>             .DATA.L     __$pProcDat
    00003DC4 <00000000>             .DATA.L     __$bcctrl
    00003DC8              L834:
    00003DC8 0034                   .DATA.W     L821-L833
    00003DCA 003A                   .DATA.W     L822-L833
    00003DCC 00B8                   .DATA.W     L823-L833
    00003DCE 0150                   .DATA.W     L824-L833
    00003DD0 0156                   .DATA.W     L825-L833
    00003DD2 01DE                   .DATA.W     L826-L833
    00003DD4 0282                   .DATA.W     L827-L833
    00003DD6 02F2                   .DATA.W     L828-L833
    00003DD8 03BA                   .DATA.W     L829-L833
    00003DDA              L821:
             tskcmd.c       6730      {
             tskcmd.c       6731      case 0: // チップ未装着確認（チップ装着済みの場合、チップ装着エラー通知し終了）
             tskcmd.c       6732          // ★チップ有無確認したいが、センサ無しのため、スルー
             tskcmd.c       6733          
             tskcmd.c       6734          
             tskcmd.c       6735          
             tskcmd.c       6736          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6737          pProcDat->Stp++;
    00003DDA 7201                   ADD         #1,R2
    00003DDC 6023                   MOV         R2,R0
    00003DDE 8072                   MOV.B       R0,@(2,R7) ; (pProcDat)->Stp
    00003DE0              L822:
             tskcmd.c       6738          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6739    
             tskcmd.c       6740    
             tskcmd.c       6741      case 1: // Z軸速度設定・退避位置移動
             tskcmd.c       6742          devno  = MT_Z0;
             tskcmd.c       6743          spdptn = SpPtn.Z0_SpdIniPtn;
    00003DE0 D4D4                   MOV.L       L1379+2,R4 ; H'00000001+__$SpPtn
    00003DE2 6040                   MOV.B       @R4,R0     ; SpPtn.Z0_SpdIniPtn
    00003DE4 3F0100A0               MOV.B       R0,@(160:12,R15); spdptn
             tskcmd.c       6744          movval = GetPositionValue(POS_Z0_TAIHI);
    00003DE8 D3D3                   MOV.L       L1379+6,R3 ; __$GetPositionValue
    00003DEA 430B                   JSR         @R3
    00003DEC E407                   MOV         #7,R4      ; H'00000007
             tskcmd.c       6745    
             tskcmd.c       6746          MAC_SPEED_SET( devno, 
    00003DEE 32F180A0               MOVU.B      @(160,R15),R2; spdptn
    00003DF2 6E03                   MOV         R0,R14
    00003DF4 E00C                   MOV         #12,R0     ; H'0000000C
    00003DF6 4280                   MULR        R0,R2
    00003DF8 D4D0                   MOV.L       L1379+10,R4; __$Sp
    00003DFA 324C                   ADD         R4,R2
    00003DFC 3621503C               MOV.W       @(120:12,R2),R6; Sp[].ac
    00003E00 3F212029               MOV.L       R2,@(164:12,R15)
    00003E04 3F611002               MOV.W       R6,@(4:12,R15); mp.accel_type
    00003E08 D7CD                   MOV.L       L1379+14,R7; _GetFactor
    00003E0A 470B                   JSR         @R7
    00003E0C E403                   MOV         #3,R4      ; H'00000003
    00003E0E 35F16029               MOV.L       @(164:12,R15),R5
    00003E12 2F02                   MOV.L       R0,@R15    ; mp.factor
    00003E14 3D51601F               MOV.L       @(124:12,R5),R13; Sp[].fl
    00003E18 31516020               MOV.L       @(128:12,R5),R1; Sp[].fh
    00003E1C 3451903D               MOVU.W      @(122,R5),R4; Sp[].gl
    00003E20 E500                   MOV         #0,R5      ; H'00000000
    00003E22 1FD2                   MOV.L       R13,@(8,R15); mp.FL
    00003E24 1F13                   MOV.L       R1,@(12,R15); mp.FH
    00003E26 1F44                   MOV.L       R4,@(16,R15); mp.utime
    00003E28 1F45                   MOV.L       R4,@(20,R15); mp.dtime
    00003E2A 1F56                   MOV.L       R5,@(24,R15); mp.us
    00003E2C 1F57                   MOV.L       R5,@(28,R15); mp.ds
    00003E2E 7FE0                   ADD         #-32,R15
    00003E30 65F3                   MOV         R15,R5
    00003E32 7520                   ADD         #32,R5
    00003E34 6752                   MOV.L       @R5,R7     ; (part of)mp
    00003E36 5D51                   MOV.L       @(4,R5),R13; (part of)mp
    00003E38 5153                   MOV.L       @(12,R5),R1; (part of)mp
    00003E3A 2F72                   MOV.L       R7,@R15
    00003E3C 1FD1                   MOV.L       R13,@(4,R15)
    00003E3E 5D52                   MOV.L       @(8,R5),R13; (part of)mp
    00003E40 1F13                   MOV.L       R1,@(12,R15)
    00003E42 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00003E44 5755                   MOV.L       @(20,R5),R7; (part of)mp
    00003E46 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00003E48 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00003E4A 1FD2                   MOV.L       R13,@(8,R15)
    00003E4C 1F14                   MOV.L       R1,@(16,R15)
    00003E4E 1F75                   MOV.L       R7,@(20,R15)
    00003E50 1F66                   MOV.L       R6,@(24,R15)
    00003E52 1F27                   MOV.L       R2,@(28,R15)
    00003E54 D2BB                   MOV.L       L1379+18,R2; _motor_SET
    00003E56 420B                   JSR         @R2
    00003E58 E402                   MOV         #2,R4      ; H'00000002
    00003E5A A15D                   BRA         L837
    00003E5C 7F20                   ADD         #32,R15
    00003E5E              L823:
             tskcmd.c       6747                         Sp[devno][spdptn].ac, 
             tskcmd.c       6748                         Sp[devno][spdptn].fl, 
             tskcmd.c       6749                         Sp[devno][spdptn].fh, 
             tskcmd.c       6750                         Sp[devno][spdptn].gl );
             tskcmd.c       6751    
             tskcmd.c       6752          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6753          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6754          pProcDat->Stp++;
             tskcmd.c       6755          break;
             tskcmd.c       6756    
             tskcmd.c       6757      case 2: // Y0軸速度設定・チップ廃棄位置移動
             tskcmd.c       6758          devno  = MT_Y0;
             tskcmd.c       6759          spdptn = SpPtn.Y0_SpdNmlPtn;
    00003E5E DDBA                   MOV.L       L1379+22,R13; H'00000005+__$SpPtn
    00003E60 61D0                   MOV.B       @R13,R1    ; SpPtn.Y0_SpdNmlPtn
    00003E62 E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6760          MAC_SPEED_SET( devno, 
    00003E64 DDB9                   MOV.L       L1379+26,R13; H'0000003C+__$Sp
    00003E66 3F1100A0               MOV.B       R1,@(160:12,R15); spdptn
    00003E6A 611C                   EXTU.B      R1,R1
    00003E6C 4180                   MULR        R0,R1
    00003E6E 6013                   MOV         R1,R0
    00003E70 01DD                   MOV.W       @(R0,R13),R1; Sp[].ac
    00003E72 3F111012               MOV.W       R1,@(36:12,R15); mp.accel_type
    00003E76 D5B2                   MOV.L       L1379+14,R5; _GetFactor
    00003E78 450B                   JSR         @R5
    00003E7A E403                   MOV         #3,R4      ; H'00000003
    00003E7C 32F180A0               MOVU.B      @(160,R15),R2; spdptn
    00003E80 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00003E82 E00C                   MOV         #12,R0     ; H'0000000C
    00003E84 4280                   MULR        R0,R2
    00003E86 D1AD                   MOV.L       L1379+10,R1; __$Sp
    00003E88 E400                   MOV         #0,R4      ; H'00000000
    00003E8A 1F4E                   MOV.L       R4,@(56,R15); mp.us
    00003E8C 321C                   ADD         R1,R2
    00003E8E 1F4F                   MOV.L       R4,@(60,R15); mp.ds
    00003E90 37216010               MOV.L       @(64:12,R2),R7; Sp[].fl
    00003E94 3D216011               MOV.L       @(68:12,R2),R13; Sp[].fh
    00003E98 3121901F               MOVU.W      @(62,R2),R1; Sp[].gl
    00003E9C 1F7A                   MOV.L       R7,@(40,R15); mp.FL
    00003E9E 1FDB                   MOV.L       R13,@(44,R15); mp.FH
    00003EA0 1F1C                   MOV.L       R1,@(48,R15); mp.utime
    00003EA2 1F1D                   MOV.L       R1,@(52,R15); mp.dtime
    00003EA4 7FE0                   ADD         #-32,R15
    00003EA6 65F3                   MOV         R15,R5
    00003EA8 7540                   ADD         #64,R5
    00003EAA 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    00003EAC 6D52                   MOV.L       @R5,R13    ; (part of)mp
    00003EAE 1F62                   MOV.L       R6,@(8,R15)
    00003EB0 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00003EB2 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    00003EB4 2FD2                   MOV.L       R13,@R15
    00003EB6 5D53                   MOV.L       @(12,R5),R13; (part of)mp
    00003EB8 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00003EBA 1F65                   MOV.L       R6,@(20,R15)
    00003EBC 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00003EBE 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00003EC0 1F71                   MOV.L       R7,@(4,R15)
    00003EC2 1FD3                   MOV.L       R13,@(12,R15)
    00003EC4 1F14                   MOV.L       R1,@(16,R15)
    00003EC6 1F66                   MOV.L       R6,@(24,R15)
    00003EC8 1F27                   MOV.L       R2,@(28,R15)
    00003ECA D29E                   MOV.L       L1379+18,R2; _motor_SET
    00003ECC 420B                   JSR         @R2
    00003ECE E401                   MOV         #1,R4      ; H'00000001
    00003ED0 7F20                   ADD         #32,R15
             tskcmd.c       6761                         Sp[devno][spdptn].ac, 
             tskcmd.c       6762                         Sp[devno][spdptn].fl, 
             tskcmd.c       6763                         Sp[devno][spdptn].fh, 
             tskcmd.c       6764                         Sp[devno][spdptn].gl );
             tskcmd.c       6765    
             tskcmd.c       6766          movptn = GetTipPatern( pProcAdr->step[actstep].par03 );
    00003ED2 E014                   MOV         #20,R0     ; H'00000014
    00003ED4 4E80                   MULR        R0,R14
    00003ED6 D29E                   MOV.L       L1379+30,R2; __$pProcAdr
    00003ED8 6722                   MOV.L       @R2,R7     ; pProcAdr
    00003EDA 7702                   ADD         #2,R7
    00003EDC 60E3                   MOV         R14,R0
    00003EDE D39D                   MOV.L       L1379+34,R3; __$GetTipPatern
    00003EE0 430B                   JSR         @R3
    00003EE2 047C                   MOV.B       @(R0,R7),R4; pProcAdr->step[].par03
             tskcmd.c       6767          movval = GetPositionValue(movptn);
    00003EE4 D394                   MOV.L       L1379+6,R3 ; __$GetPositionValue
    00003EE6 430B                   JSR         @R3
    00003EE8 6403                   MOV         R0,R4
             tskcmd.c       6768          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00003EEA 2F06                   MOV.L       R0,@-R15
    00003EEC 65C3                   MOV         R12,R5
    00003EEE E601                   MOV         #1,R6      ; H'00000001
    00003EF0 E700                   MOV         #0,R7      ; H'00000000
    00003EF2 A116                   BRA         L839
    00003EF4 E451                   MOV         #81,R4     ; H'00000051
    00003EF6              L824:
             tskcmd.c       6769          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6770          pProcDat->Stp++;
             tskcmd.c       6771          break;
             tskcmd.c       6772    
             tskcmd.c       6773      case 3: // Z軸チップ廃棄速度（1段目）設定・1段目位置移動
             tskcmd.c       6774    //        spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
             tskcmd.c       6775    //        
             tskcmd.c       6776    //        if( spdptn >= 0 )
             tskcmd.c       6777    //        {
             tskcmd.c       6778    //            devno  = MT_Z0;
             tskcmd.c       6779    //            MAC_SPEED_SET( devno, 
             tskcmd.c       6780    //                           Sp[devno][spdptn].ac, 
             tskcmd.c       6781    //                           Sp[devno][spdptn].fl, 
             tskcmd.c       6782    //                           Sp[devno][spdptn].fh, 
             tskcmd.c       6783    //                           Sp[devno][spdptn].gl );
             tskcmd.c       6784    //            movval = GetPositionValue(POS_Z0_TPDL1);
             tskcmd.c       6785    //            result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6786    //            if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6787    //            pProcDat->Stp++;
             tskcmd.c       6788    //            break;
             tskcmd.c       6789    //        }
             tskcmd.c       6790    //        else
             tskcmd.c       6791    //        {
             tskcmd.c       6792              pProcDat->Stp++;
    00003EF6 7201                   ADD         #1,R2
    00003EF8 6023                   MOV         R2,R0
    00003EFA 8072                   MOV.B       R0,@(2,R7) ; (pProcDat)->Stp
    00003EFC              L825:
             tskcmd.c       6793              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6794    //        }
             tskcmd.c       6795    
             tskcmd.c       6796    
             tskcmd.c       6797      case 4: // Z軸チップ廃棄速度（最終）設定・最終位置移動
             tskcmd.c       6798          spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
             tskcmd.c       6799    
             tskcmd.c       6800          if( spdptn >= 0 )
             tskcmd.c       6801          {
             tskcmd.c       6802              devno  = MT_Z0;
             tskcmd.c       6803              MAC_SPEED_SET( devno, 
    00003EFC E014                   MOV         #20,R0     ; H'00000014
    00003EFE E50C                   MOV         #12,R5     ; H'0000000C
    00003F00 4E80                   MULR        R0,R14
    00003F02 D293                   MOV.L       L1379+30,R2; __$pProcAdr
    00003F04 6122                   MOV.L       @R2,R1     ; pProcAdr
    00003F06 D48D                   MOV.L       L1379+10,R4; __$Sp
    00003F08 7103                   ADD         #3,R1
    00003F0A 60E3                   MOV         R14,R0
    00003F0C 001C                   MOV.B       @(R0,R1),R0; pProcAdr->step[].par04
    00003F0E C90F                   AND         #15,R0
    00003F10 6D03                   MOV         R0,R13
    00003F12 6053                   MOV         R5,R0
    00003F14 4D80                   MULR        R0,R13
    00003F16 3D4C                   ADD         R4,R13
    00003F18 35D1503C               MOV.W       @(120:12,R13),R5; Sp[].ac
    00003F1C 3FD12029               MOV.L       R13,@(164:12,R15)
    00003F20 3F511022               MOV.W       R5,@(68:12,R15); mp.accel_type
    00003F24 D686                   MOV.L       L1379+14,R6; _GetFactor
    00003F26 460B                   JSR         @R6
    00003F28 E403                   MOV         #3,R4      ; H'00000003
    00003F2A 61D3                   MOV         R13,R1
    00003F2C E340                   MOV         #64,R3     ; H'00000040
    00003F2E 37D1601F               MOV.L       @(124:12,R13),R7; Sp[].fl
    00003F32 3DD16020               MOV.L       @(128:12,R13),R13; Sp[].fh
    00003F36 3E11903D               MOVU.W      @(122,R1),R14; Sp[].gl
    00003F3A 33FC                   ADD         R15,R3
    00003F3C E100                   MOV         #0,R1      ; H'00000000
    00003F3E 2302                   MOV.L       R0,@R3     ; mp.factor
    00003F40 1372                   MOV.L       R7,@(8,R3) ; mp.FL
    00003F42 13D3                   MOV.L       R13,@(12,R3); mp.FH
    00003F44 13E4                   MOV.L       R14,@(16,R3); mp.utime
    00003F46 13E5                   MOV.L       R14,@(20,R3); mp.dtime
    00003F48 1316                   MOV.L       R1,@(24,R3); mp.us
    00003F4A 1317                   MOV.L       R1,@(28,R3); mp.ds
    00003F4C 7FE0                   ADD         #-32,R15
    00003F4E 65F3                   MOV         R15,R5
    00003F50 7560                   ADD         #96,R5
    00003F52 6252                   MOV.L       @R5,R2     ; (part of)mp
    00003F54 5D52                   MOV.L       @(8,R5),R13; (part of)mp
    00003F56 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00003F58 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    00003F5A 2F22                   MOV.L       R2,@R15
    00003F5C 5753                   MOV.L       @(12,R5),R7; (part of)mp
    00003F5E 1FD2                   MOV.L       R13,@(8,R15)
    00003F60 5D54                   MOV.L       @(16,R5),R13; (part of)mp
    00003F62 1F65                   MOV.L       R6,@(20,R15)
    00003F64 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00003F66 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00003F68 1F41                   MOV.L       R4,@(4,R15)
    00003F6A E402                   MOV         #2,R4      ; H'00000002
    00003F6C 1F73                   MOV.L       R7,@(12,R15)
    00003F6E 1FD4                   MOV.L       R13,@(16,R15)
    00003F70 1F26                   MOV.L       R2,@(24,R15)
    00003F72 D274                   MOV.L       L1379+18,R2; _motor_SET
    00003F74 420B                   JSR         @R2
    00003F76 1F67                   MOV.L       R6,@(28,R15)
    00003F78 7F20                   ADD         #32,R15
             tskcmd.c       6804                             Sp[devno][spdptn].ac, 
             tskcmd.c       6805                             Sp[devno][spdptn].fl, 
             tskcmd.c       6806                             Sp[devno][spdptn].fh, 
             tskcmd.c       6807                             Sp[devno][spdptn].gl );
             tskcmd.c       6808              movval = GetPositionValue(POS_Z0_TPDLE);
    00003F7A D36F                   MOV.L       L1379+6,R3 ; __$GetPositionValue
    00003F7C 430B                   JSR         @R3
    00003F7E E41C                   MOV         #28,R4     ; H'0000001C
    00003F80 A0CA                   BRA         L837
    00003F82 6E03                   MOV         R0,R14
    00003F84              L826:
             tskcmd.c       6809    
             tskcmd.c       6810              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6811              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6812              pProcDat->Stp++;
             tskcmd.c       6813              break;
             tskcmd.c       6814          }
             tskcmd.c       6815          else
             tskcmd.c       6816          {
             tskcmd.c       6817              pProcDat->Stp++;
             tskcmd.c       6818              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6819          }
             tskcmd.c       6820          
             tskcmd.c       6821          
             tskcmd.c       6822      case 5: // 廃棄動作 プランジャを下へ動作
             tskcmd.c       6823          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
    00003F84 E014                   MOV         #20,R0     ; H'00000014
    00003F86 64E3                   MOV         R14,R4
    00003F88 4480                   MULR        R0,R4
    00003F8A D571                   MOV.L       L1379+30,R5; __$pProcAdr
    00003F8C 6152                   MOV.L       @R5,R1     ; pProcAdr
    00003F8E E5FC                   MOV         #-4,R5     ; H'FFFFFFFC
    00003F90 7103                   ADD         #3,R1
    00003F92 6043                   MOV         R4,R0
    00003F94 011C                   MOV.B       @(R0,R1),R1; pProcAdr->step[].par04
    00003F96 601C                   EXTU.B      R1,R0
    00003F98 405C                   SHAD        R5,R0
    00003F9A C90F                   AND         #15,R0
             tskcmd.c       6824    
             tskcmd.c       6825          if( spdptn > 0 )
    00003F9C 2008                   TST         R0,R0
    00003F9E 8D40                   BT/S        L844
    00003FA0 6603                   MOV         R0,R6
             tskcmd.c       6826          {
             tskcmd.c       6827              devno  = MT_P0;
             tskcmd.c       6828              MAC_SPEED_SET( devno, 
    00003FA2 E00C                   MOV         #12,R0     ; H'0000000C
    00003FA4 ED60                   MOV         #96,R13    ; H'00000060
    00003FA6 4680                   MULR        R0,R6
    00003FA8 D764                   MOV.L       L1379+10,R7; __$Sp
    00003FAA 3DFC                   ADD         R15,R13
    00003FAC E403                   MOV         #3,R4      ; H'00000003
    00003FAE 367C                   ADD         R7,R6
    00003FB0 3061505A               MOV.W       @(180:12,R6),R0; Sp[].ac
    00003FB4 3F61202A               MOV.L       R6,@(168:12,R15)
    00003FB8 DE61                   MOV.L       L1379+14,R14; _GetFactor
    00003FBA 4E0B                   JSR         @R14
    00003FBC 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    00003FBE 3EF1602A               MOV.L       @(168:12,R15),R14
    00003FC2 E700                   MOV         #0,R7      ; H'00000000
    00003FC4 2D02                   MOV.L       R0,@R13    ; mp.factor
    00003FC6 31E1602E               MOV.L       @(184:12,R14),R1; Sp[].fl
    00003FCA 34E1602F               MOV.L       @(188:12,R14),R4; Sp[].fh
    00003FCE 36E1905B               MOVU.W      @(182,R14),R6; Sp[].gl
    00003FD2 1D12                   MOV.L       R1,@(8,R13); mp.FL
    00003FD4 1D43                   MOV.L       R4,@(12,R13); mp.FH
    00003FD6 1D64                   MOV.L       R6,@(16,R13); mp.utime
    00003FD8 1D65                   MOV.L       R6,@(20,R13); mp.dtime
    00003FDA 1D76                   MOV.L       R7,@(24,R13); mp.us
    00003FDC 1D77                   MOV.L       R7,@(28,R13); mp.ds
    00003FDE 7FE0                   ADD         #-32,R15
    00003FE0 ED80                   MOV         #-128,R13  ; H'FFFFFF80
    00003FE2 65F3                   MOV         R15,R5
    00003FE4 6DDC                   EXTU.B      R13,R13
    00003FE6 35DC                   ADD         R13,R5
    00003FE8 6152                   MOV.L       @R5,R1     ; (part of)mp
    00003FEA 5253                   MOV.L       @(12,R5),R2; (part of)mp
    00003FEC 5D54                   MOV.L       @(16,R5),R13; (part of)mp
    00003FEE 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    00003FF0 2F12                   MOV.L       R1,@R15
    00003FF2 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    00003FF4 1F23                   MOV.L       R2,@(12,R15)
    00003FF6 5755                   MOV.L       @(20,R5),R7; (part of)mp
    00003FF8 1FD4                   MOV.L       R13,@(16,R15)
    00003FFA 5D56                   MOV.L       @(24,R5),R13; (part of)mp
    00003FFC 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00003FFE 1FE1                   MOV.L       R14,@(4,R15)
    00004000 1F12                   MOV.L       R1,@(8,R15)
    00004002 1F75                   MOV.L       R7,@(20,R15)
    00004004 1FD6                   MOV.L       R13,@(24,R15)
    00004006 1F27                   MOV.L       R2,@(28,R15)
    00004008 D24E                   MOV.L       L1379+18,R2; _motor_SET
    0000400A 420B                   JSR         @R2
    0000400C E403                   MOV         #3,R4      ; H'00000003
    0000400E 7F20                   ADD         #32,R15
             tskcmd.c       6829                             Sp[devno][spdptn].ac, 
             tskcmd.c       6830                             Sp[devno][spdptn].fl, 
             tskcmd.c       6831                             Sp[devno][spdptn].fh, 
             tskcmd.c       6832                             Sp[devno][spdptn].gl );
             tskcmd.c       6833              movval = GetPositionValue(POS_P0_TIPDL);
    00004010 D349                   MOV.L       L1379+6,R3 ; __$GetPositionValue
    00004012 430B                   JSR         @R3
    00004014 E437                   MOV         #55,R4     ; H'00000037
             tskcmd.c       6834              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00004016 2F06                   MOV.L       R0,@-R15
    00004018 65C3                   MOV         R12,R5
    0000401A E603                   MOV         #3,R6      ; H'00000003
    0000401C E700                   MOV         #0,R7      ; H'00000000
    0000401E A080                   BRA         L839
    00004020 E451                   MOV         #81,R4     ; H'00000051
    00004022              L844:
             tskcmd.c       6835              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6836              pProcDat->Stp++;
             tskcmd.c       6837              break;
             tskcmd.c       6838          }
             tskcmd.c       6839          else
             tskcmd.c       6840          {
             tskcmd.c       6841              pProcDat->Stp++;
    00004022 7201                   ADD         #1,R2
    00004024 6023                   MOV         R2,R0
    00004026 8072                   MOV.B       R0,@(2,R7) ; (pProcDat)->Stp
    00004028              L827:
             tskcmd.c       6842              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6843          }
             tskcmd.c       6844    
             tskcmd.c       6845    
             tskcmd.c       6846      case 6: // 廃棄動作 プランジャを上へ動作
             tskcmd.c       6847          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
             tskcmd.c       6848    
             tskcmd.c       6849          if( spdptn > 0 )
    00004028 E014                   MOV         #20,R0     ; H'00000014
    0000402A E4FC                   MOV         #-4,R4     ; H'FFFFFFFC
    0000402C 4E80                   MULR        R0,R14
    0000402E D248                   MOV.L       L1379+30,R2; __$pProcAdr
    00004030 6122                   MOV.L       @R2,R1     ; pProcAdr
    00004032 7103                   ADD         #3,R1
    00004034 60E3                   MOV         R14,R0
    00004036 011C                   MOV.B       @(R0,R1),R1; pProcAdr->step[].par04
    00004038 3FE1202B               MOV.L       R14,@(172:12,R15)
    0000403C 601C                   EXTU.B      R1,R0
    0000403E 404C                   SHAD        R4,R0
    00004040 C90F                   AND         #15,R0
    00004042 2008                   TST         R0,R0
    00004044 8924                   BT          L847
             tskcmd.c       6850          {
             tskcmd.c       6851              devno  = MT_P0;
             tskcmd.c       6852              movval = GetPositionValue(POS_P0_TIPDL)*(-1);
    00004046 D33C                   MOV.L       L1379+6,R3 ; __$GetPositionValue
    00004048 430B                   JSR         @R3
    0000404A E437                   MOV         #55,R4     ; H'00000037
    0000404C 620B                   NEG         R0,R2
             tskcmd.c       6853    
             tskcmd.c       6854              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    0000404E 2F26                   MOV.L       R2,@-R15
    00004050 E700                   MOV         #0,R7      ; H'00000000
    00004052 E451                   MOV         #81,R4     ; H'00000051
    00004054 E603                   MOV         #3,R6      ; H'00000003
    00004056 D340                   MOV.L       L1379+38,R3; __$AbsmvAction
    00004058 430B                   JSR         @R3
    0000405A 65C3                   MOV         R12,R5
    0000405C 6503                   MOV         R0,R5
             tskcmd.c       6855              if( result == E_SUCCESS ) result = E_CONTINUE;
    0000405E 2008                   TST         R0,R0
    00004060 8F01                   BF/S        L849
    00004062 7F04                   ADD         #4,R15
    00004064 65B3                   MOV         R11,R5
    00004066              L849:
    00004066 D23A                   MOV.L       L1379+30,R2; __$pProcAdr
    00004068 6722                   MOV.L       @R2,R7     ; pProcAdr
    0000406A EBFC                   MOV         #-4,R11    ; H'FFFFFFFC
    0000406C 30F1602B               MOV.L       @(172:12,R15),R0
    00004070 7702                   ADD         #2,R7
    00004072 077C                   MOV.B       @(R0,R7),R7; pProcAdr->step[].par03
             tskcmd.c       6856    
             tskcmd.c       6857              rtycnt = ( ( pProcAdr->step[actstep].par03 >> 4 ) & 0x03 );
             tskcmd.c       6858    
             tskcmd.c       6859              if( bcctrl[bcid].inf3 >= rtycnt )
    00004074 34D18006               MOVU.B      @(6,R13),R4; bcctrl[].inf3
    00004078 607C                   EXTU.B      R7,R0
    0000407A 40BC                   SHAD        R11,R0
    0000407C C903                   AND         #3,R0
    0000407E 3403                   CMP/GE      R0,R4
    00004080 896F                   BT          L851
             tskcmd.c       6860              {
             tskcmd.c       6861                  pProcDat->Stp++;
             tskcmd.c       6862              }
             tskcmd.c       6863              else
             tskcmd.c       6864              {
             tskcmd.c       6865                  pProcDat->Stp = 5;
    00004082 66A2                   MOV.L       @R10,R6    ; pProcDat
    00004084 E005                   MOV         #5,R0      ; H'00000005
    00004086 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
             tskcmd.c       6866                  bcctrl[bcid].inf3++;
    00004088 84D6                   MOV.B       @(6,R13),R0; bcctrl[].inf3
    0000408A 7001                   ADD         #1,R0
    0000408C A06D                   BRA         L832
    0000408E 80D6                   MOV.B       R0,@(6,R13); bcctrl[].inf3
    00004090              L847:
             tskcmd.c       6867              }
             tskcmd.c       6868              break;
             tskcmd.c       6869          }
             tskcmd.c       6870          else
             tskcmd.c       6871          {
             tskcmd.c       6872              pProcDat->Stp++;
    00004090 66A2                   MOV.L       @R10,R6    ; pProcDat
    00004092 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004094 7001                   ADD         #1,R0
    00004096 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004098              L828:
             tskcmd.c       6873              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6874          }
             tskcmd.c       6875    
             tskcmd.c       6876    
             tskcmd.c       6877      case 7: // Z軸速度設定・退避位置移動
             tskcmd.c       6878          devno  = MT_Z0;
             tskcmd.c       6879          spdptn = SpPtn.Z0_SpdNmlPtn;
    00004098 D430                   MOV.L       L1379+42,R4; H'00000006+__$SpPtn
    0000409A 6040                   MOV.B       @R4,R0     ; SpPtn.Z0_SpdNmlPtn
             tskcmd.c       6880          movval = GetPositionValue(POS_Z0_TAIHI);
    0000409C E407                   MOV         #7,R4      ; H'00000007
    0000409E 3F0100A0               MOV.B       R0,@(160:12,R15); spdptn
    000040A2 D325                   MOV.L       L1379+6,R3 ; __$GetPositionValue
    000040A4 430B                   JSR         @R3
    000040A6 ED80                   MOV         #-128,R13  ; H'FFFFFF80
             tskcmd.c       6881    
             tskcmd.c       6882          MAC_SPEED_SET( devno, 
    000040A8 31F180A0               MOVU.B      @(160,R15),R1; spdptn
    000040AC 6E03                   MOV         R0,R14
    000040AE E00C                   MOV         #12,R0     ; H'0000000C
    000040B0 4180                   MULR        R0,R1
    000040B2 D522                   MOV.L       L1379+10,R5; __$Sp
    000040B4 6DDC                   EXTU.B      R13,R13
    000040B6 E403                   MOV         #3,R4      ; H'00000003
    000040B8 3DFC                   ADD         R15,R13
    000040BA 315C                   ADD         R5,R1
    000040BC 1D19                   MOV.L       R1,@(36,R13)
    000040BE 3011503C               MOV.W       @(120:12,R1),R0; Sp[].ac
    000040C2 D51F                   MOV.L       L1379+14,R5; _GetFactor
    000040C4 450B                   JSR         @R5
    000040C6 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    000040C8 52D9                   MOV.L       @(36,R13),R2
    000040CA E400                   MOV         #0,R4      ; H'00000000
    000040CC 2D02                   MOV.L       R0,@R13    ; mp.factor
    000040CE 3621601F               MOV.L       @(124:12,R2),R6; Sp[].fl
    000040D2 37216020               MOV.L       @(128:12,R2),R7; Sp[].fh
    000040D6 3121903D               MOVU.W      @(122,R2),R1; Sp[].gl
    000040DA 1D62                   MOV.L       R6,@(8,R13); mp.FL
    000040DC 1D73                   MOV.L       R7,@(12,R13); mp.FH
    000040DE 1D14                   MOV.L       R1,@(16,R13); mp.utime
    000040E0 1D15                   MOV.L       R1,@(20,R13); mp.dtime
    000040E2 1D46                   MOV.L       R4,@(24,R13); mp.us
    000040E4 1D47                   MOV.L       R4,@(28,R13); mp.ds
    000040E6 7FE0                   ADD         #-32,R15
    000040E8 E7A0                   MOV         #-96,R7    ; H'FFFFFFA0
    000040EA 65F3                   MOV         R15,R5
    000040EC 677C                   EXTU.B      R7,R7
    000040EE E402                   MOV         #2,R4      ; H'00000002
    000040F0 357C                   ADD         R7,R5
    000040F2 6D52                   MOV.L       @R5,R13    ; (part of)mp
    000040F4 5153                   MOV.L       @(12,R5),R1; (part of)mp
    000040F6 5655                   MOV.L       @(20,R5),R6; (part of)mp
    000040F8 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    000040FA 2FD2                   MOV.L       R13,@R15
    000040FC 5D52                   MOV.L       @(8,R5),R13; (part of)mp
    000040FE 1F13                   MOV.L       R1,@(12,R15)
    00004100 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00004102 1F65                   MOV.L       R6,@(20,R15)
    00004104 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00004106 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00004108 1F71                   MOV.L       R7,@(4,R15)
    0000410A 1FD2                   MOV.L       R13,@(8,R15)
    0000410C 1F14                   MOV.L       R1,@(16,R15)
    0000410E 1F26                   MOV.L       R2,@(24,R15)
    00004110 D20C                   MOV.L       L1379+18,R2; _motor_SET
    00004112 420B                   JSR         @R2
    00004114 1F67                   MOV.L       R6,@(28,R15)
    00004116 7F20                   ADD         #32,R15
    00004118              L837:
    00004118 2FE6                   MOV.L       R14,@-R15
    0000411A 65C3                   MOV         R12,R5
    0000411C E700                   MOV         #0,R7      ; H'00000000
    0000411E E451                   MOV         #81,R4     ; H'00000051
    00004120 E602                   MOV         #2,R6      ; H'00000002
    00004122              L839:
    00004122 D30D                   MOV.L       L1379+38,R3; __$AbsmvAction
    00004124 434B                   JSR/N       @R3
    00004126 6503                   MOV         R0,R5
    00004128 2008                   TST         R0,R0
    0000412A 8F1A                   BF/S        L851
    0000412C 7F04                   ADD         #4,R15
    0000412E A018                   BRA         L851
    00004130 65B3                   MOV         R11,R5
    00004132              L1379:
    00004132 00000002               .RES.W      1
    00004134 <00000001>             .DATA.L     H'00000001+__$SpPtn
    00004138 <00000000>             .DATA.L     __$GetPositionValue
    0000413C <00000000>             .DATA.L     __$Sp
    00004140 <00000000>             .DATA.L     _GetFactor
    00004144 <00000000>             .DATA.L     _motor_SET
    00004148 <00000005>             .DATA.L     H'00000005+__$SpPtn
    0000414C <0000003C>             .DATA.L     H'0000003C+__$Sp
    00004150 <00000000>             .DATA.L     __$pProcAdr
    00004154 <00000000>             .DATA.L     __$GetTipPatern
    00004158 <00000000>             .DATA.L     __$AbsmvAction
    0000415C <00000006>             .DATA.L     H'00000006+__$SpPtn
    00004160              L829:
             tskcmd.c       6883                         Sp[devno][spdptn].ac, 
             tskcmd.c       6884                         Sp[devno][spdptn].fl, 
             tskcmd.c       6885                         Sp[devno][spdptn].fh, 
             tskcmd.c       6886                         Sp[devno][spdptn].gl );
             tskcmd.c       6887    
             tskcmd.c       6888          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6889          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6890          pProcDat->Stp++;
             tskcmd.c       6891          break;
             tskcmd.c       6892    
             tskcmd.c       6893      case 8: // チップ装着確認（装着失敗時、チップ未装着エラー通知し終了）
             tskcmd.c       6894          // ★チップ有無確認
             tskcmd.c       6895    
             tskcmd.c       6896          result = E_SUCCESS;
    00004160 E500                   MOV         #0,R5      ; H'00000000
    00004162              L851:
    00004162 66A2                   MOV.L       @R10,R6    ; pProcDat
    00004164 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004166 7001                   ADD         #1,R0
    00004168 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000416A              L832:
    0000416A 030000B0               MOVI20      #176,R3    ; H'000000B0
    0000416E 3F3C                   ADD         R3,R15
    00004170 4AF4                   MOVMU.L     @R15+,R10
             tskcmd.c       6897          pProcDat->Stp++;
             tskcmd.c       6898          break;
             tskcmd.c       6899      }
             tskcmd.c       6900      return( result );
             tskcmd.c       6901    }
    00004172 057B                   RTV/N       R5
             tskcmd.c       6902    /***********************************************************************
             tskcmd.c       6903    * 
             tskcmd.c       6904    * [概要]  穴あけ
             tskcmd.c       6905    * [引数]  
             tskcmd.c       6906    * [戻値]  
             tskcmd.c       6907    * [備考]  
             tskcmd.c       6908    *         pProcAdr->step[actstep].par03 == STRIP_S1 ) // ショート１
             tskcmd.c       6909    *
             tskcmd.c       6910    ***********************************************************************/
             tskcmd.c       6911    static ER  CmdActionStrOpn( T_CMD_MSG* mrcv )
    00004174              __$CmdActionStrOpn:              ; function: __$CmdActionStrOpn
                                                           ; frame size=228
    00004174 4BF0                   MOVMU.L     R11,@-R15
    00004176 03F0FF50               MOVI20      #-176,R3   ; H'FFFFFF50
    0000417A 3F3C                   ADD         R3,R15
             tskcmd.c       6912    {
             tskcmd.c       6913      ER result = E_CONTINUE;
    0000417C 6243                   MOV         R4,R2
    0000417E E4F1                   MOV         #-15,R4    ; H'FFFFFFF1
             tskcmd.c       6914      UB bcid;
             tskcmd.c       6915      UB prid1;
             tskcmd.c       6916      UB actstep;
             tskcmd.c       6917      UB spdptn;
             tskcmd.c       6918      UB movptn;
             tskcmd.c       6919      UB devno;
             tskcmd.c       6920      INT movval;
             tskcmd.c       6921    
             tskcmd.c       6922      bcid  = mrcv->msgdata.bcid;
    00004180 3021801A               MOVU.B      @(26,R2),R0; (mrcv)->bcid
             tskcmd.c       6923      actstep = bcctrl[bcid].actstp - 1 ;
    00004184 D5CA                   MOV.L       L1380,R5   ; H'00000002+__$bcctrl
    00004186 6D03                   MOV         R0,R13
    00004188 4008                   SHLL2       R0
    0000418A 4000                   SHLL        R0
    0000418C 015C                   MOV.B       @(R0,R5),R1; bcctrl[].actstp
    0000418E 644C                   EXTU.B      R4,R4
             tskcmd.c       6924    
             tskcmd.c       6925      switch( pProcDat->Stp )
    00004190 DBC8                   MOV.L       L1380+4,R11; __$pProcDat
    00004192 71FF                   ADD         #-1,R1
    00004194 6E1C                   EXTU.B      R1,R14
    00004196 61B2                   MOV.L       @R11,R1    ; pProcDat
    00004198 32118002               MOVU.B      @(2,R1),R2 ; (pProcDat)->Stp
    0000419C 2228                   TST         R2,R2
    0000419E 8D17                   BT/S        L866
    000041A0 6C43                   MOV         R4,R12
    000041A2 6023                   MOV         R2,R0
    000041A4 8801                   CMP/EQ      #1,R0
    000041A6 8916                   BT          L868
    000041A8 8802                   CMP/EQ      #2,R0
    000041AA 894D                   BT          L870
    000041AC 8803                   CMP/EQ      #3,R0
    000041AE 8B01                   BF          L1406
    000041B0 A093                   BRA         L872
    000041B2 0009                   NOP
    000041B4              L1406:
    000041B4 8804                   CMP/EQ      #4,R0
    000041B6 8B01                   BF          L1407
    000041B8 A0D9                   BRA         L874
    000041BA 0009                   NOP
    000041BC              L1407:
    000041BC 8805                   CMP/EQ      #5,R0
    000041BE 8B01                   BF          L1408
    000041C0 A124                   BRA         L876
    000041C2 0009                   NOP
    000041C4              L1408:
    000041C4 8806                   CMP/EQ      #6,R0
    000041C6 8B01                   BF          L1409
    000041C8 A18A                   BRA         L877
    000041CA 0009                   NOP
    000041CC              L1409:
    000041CC A18C                   BRA         L878
    000041CE 0009                   NOP
    000041D0              L866:
             tskcmd.c       6926      {
             tskcmd.c       6927      case 0: // 試薬ストリッバ有無確認
             tskcmd.c       6928          
             tskcmd.c       6929          // ★試薬ストリッバ有無確認
             tskcmd.c       6930          
             tskcmd.c       6931          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6932          pProcDat->Stp++;
    000041D0 7201                   ADD         #1,R2
    000041D2 6023                   MOV         R2,R0
    000041D4 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    000041D6              L868:
             tskcmd.c       6933          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6934    
             tskcmd.c       6935    
             tskcmd.c       6936      case 1: // Z軸速度設定・退避位置移動
             tskcmd.c       6937          devno  = MT_Z0;
             tskcmd.c       6938          spdptn = SpPtn.Z0_SpdNmlPtn;
    000041D6 D2B8                   MOV.L       L1380+8,R2 ; H'00000006+__$SpPtn
    000041D8 6E20                   MOV.B       @R2,R14    ; SpPtn.Z0_SpdNmlPtn
    000041DA E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6939          MAC_SPEED_SET( devno, 
    000041DC D7B7                   MOV.L       L1380+12,R7; H'00000078+__$Sp
    000041DE 61EC                   EXTU.B      R14,R1
    000041E0 4180                   MULR        R0,R1
    000041E2 6EEC                   EXTU.B      R14,R14
    000041E4 6013                   MOV         R1,R0
    000041E6 047D                   MOV.W       @(R0,R7),R4; Sp[].ac
    000041E8 3F411002               MOV.W       R4,@(4:12,R15); mp.accel_type
    000041EC D5B4                   MOV.L       L1380+16,R5; _GetFactor
    000041EE 450B                   JSR         @R5
    000041F0 E403                   MOV         #3,R4      ; H'00000003
    000041F2 2F02                   MOV.L       R0,@R15    ; mp.factor
    000041F4 E00C                   MOV         #12,R0     ; H'0000000C
    000041F6 4E80                   MULR        R0,R14
    000041F8 D1B2                   MOV.L       L1380+20,R1; __$Sp
    000041FA E400                   MOV         #0,R4      ; H'00000000
    000041FC 1F46                   MOV.L       R4,@(24,R15); mp.us
    000041FE 3E1C                   ADD         R1,R14
    00004200 1F47                   MOV.L       R4,@(28,R15); mp.ds
    00004202 36E1601F               MOV.L       @(124:12,R14),R6; Sp[].fl
    00004206 37E16020               MOV.L       @(128:12,R14),R7; Sp[].fh
    0000420A 31E1903D               MOVU.W      @(122,R14),R1; Sp[].gl
    0000420E 1F62                   MOV.L       R6,@(8,R15); mp.FL
    00004210 1F73                   MOV.L       R7,@(12,R15); mp.FH
    00004212 1F14                   MOV.L       R1,@(16,R15); mp.utime
    00004214 1F15                   MOV.L       R1,@(20,R15); mp.dtime
    00004216 7FE0                   ADD         #-32,R15
    00004218 65F3                   MOV         R15,R5
    0000421A 7520                   ADD         #32,R5
    0000421C 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    0000421E E402                   MOV         #2,R4      ; H'00000002
    00004220 5654                   MOV.L       @(16,R5),R6; (part of)mp
    00004222 1FE1                   MOV.L       R14,@(4,R15)
    00004224 5E53                   MOV.L       @(12,R5),R14; (part of)mp
    00004226 6752                   MOV.L       @R5,R7     ; (part of)mp
    00004228 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    0000422A 1FE3                   MOV.L       R14,@(12,R15)
    0000422C 5E55                   MOV.L       @(20,R5),R14; (part of)mp
    0000422E 1F64                   MOV.L       R6,@(16,R15)
    00004230 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00004232 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00004234 2F72                   MOV.L       R7,@R15
    00004236 1F12                   MOV.L       R1,@(8,R15)
    00004238 1FE5                   MOV.L       R14,@(20,R15)
    0000423A 1F26                   MOV.L       R2,@(24,R15)
    0000423C D2A2                   MOV.L       L1380+24,R2; _motor_SET
    0000423E 420B                   JSR         @R2
    00004240 1F67                   MOV.L       R6,@(28,R15)
    00004242 7F20                   ADD         #32,R15
             tskcmd.c       6940                         Sp[devno][spdptn].ac, 
             tskcmd.c       6941                         Sp[devno][spdptn].fl, 
             tskcmd.c       6942                         Sp[devno][spdptn].fh, 
             tskcmd.c       6943                         Sp[devno][spdptn].gl );
             tskcmd.c       6944          movval = GetPositionValue(POS_Z0_TAIHI);
    00004244 A0D6                   BRA         L879
    00004246 E407                   MOV         #7,R4      ; H'00000007
    00004248              L870:
             tskcmd.c       6945          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6946          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6947          pProcDat->Stp++;
             tskcmd.c       6948          break;
             tskcmd.c       6949    
             tskcmd.c       6950      case 2: // Y0軸速度設定後、試薬ストリッパブレーク位置に移動
             tskcmd.c       6951          devno  = MT_Y0;
             tskcmd.c       6952          spdptn = SpPtn.Y0_SpdNmlPtn;
    00004248 D2A0                   MOV.L       L1380+28,R2; H'00000005+__$SpPtn
    0000424A 6420                   MOV.B       @R2,R4     ; SpPtn.Y0_SpdNmlPtn
    0000424C E00C                   MOV         #12,R0     ; H'0000000C
             tskcmd.c       6953          MAC_SPEED_SET( devno, 
    0000424E D1A0                   MOV.L       L1380+32,R1; H'0000003C+__$Sp
    00004250 3F4100A8               MOV.B       R4,@(168:12,R15); spdptn
    00004254 644C                   EXTU.B      R4,R4
    00004256 4480                   MULR        R0,R4
    00004258 6043                   MOV         R4,R0
    0000425A 051D                   MOV.W       @(R0,R1),R5; Sp[].ac
    0000425C 3F511012               MOV.W       R5,@(36:12,R15); mp.accel_type
    00004260 D697                   MOV.L       L1380+16,R6; _GetFactor
    00004262 460B                   JSR         @R6
    00004264 E403                   MOV         #3,R4      ; H'00000003
    00004266 32F180A8               MOVU.B      @(168,R15),R2; spdptn
    0000426A 1F08                   MOV.L       R0,@(32,R15); mp.factor
    0000426C E00C                   MOV         #12,R0     ; H'0000000C
    0000426E 4280                   MULR        R0,R2
    00004270 D194                   MOV.L       L1380+20,R1; __$Sp
    00004272 E500                   MOV         #0,R5      ; H'00000000
    00004274 1F5E                   MOV.L       R5,@(56,R15); mp.us
    00004276 321C                   ADD         R1,R2
    00004278 1F5F                   MOV.L       R5,@(60,R15); mp.ds
    0000427A 37216010               MOV.L       @(64:12,R2),R7; Sp[].fl
    0000427E 31216011               MOV.L       @(68:12,R2),R1; Sp[].fh
    00004282 3421901F               MOVU.W      @(62,R2),R4; Sp[].gl
    00004286 1F7A                   MOV.L       R7,@(40,R15); mp.FL
    00004288 1F1B                   MOV.L       R1,@(44,R15); mp.FH
    0000428A 1F4C                   MOV.L       R4,@(48,R15); mp.utime
    0000428C 1F4D                   MOV.L       R4,@(52,R15); mp.dtime
    0000428E 7FE0                   ADD         #-32,R15
    00004290 65F3                   MOV         R15,R5
    00004292 7540                   ADD         #64,R5
    00004294 6752                   MOV.L       @R5,R7     ; (part of)mp
    00004296 E401                   MOV         #1,R4      ; H'00000001
    00004298 5151                   MOV.L       @(4,R5),R1 ; (part of)mp
    0000429A 5254                   MOV.L       @(16,R5),R2; (part of)mp
    0000429C 5655                   MOV.L       @(20,R5),R6; (part of)mp
    0000429E 2F72                   MOV.L       R7,@R15
    000042A0 1F11                   MOV.L       R1,@(4,R15)
    000042A2 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    000042A4 5753                   MOV.L       @(12,R5),R7; (part of)mp
    000042A6 1F24                   MOV.L       R2,@(16,R15)
    000042A8 1F65                   MOV.L       R6,@(20,R15)
    000042AA 5256                   MOV.L       @(24,R5),R2; (part of)mp
    000042AC 5657                   MOV.L       @(28,R5),R6; (part of)mp
    000042AE 1F12                   MOV.L       R1,@(8,R15)
    000042B0 1F73                   MOV.L       R7,@(12,R15)
    000042B2 1F26                   MOV.L       R2,@(24,R15)
    000042B4 D284                   MOV.L       L1380+24,R2; _motor_SET
    000042B6 420B                   JSR         @R2
    000042B8 1F67                   MOV.L       R6,@(28,R15)
    000042BA 7F20                   ADD         #32,R15
             tskcmd.c       6954                         Sp[devno][spdptn].ac, 
             tskcmd.c       6955                         Sp[devno][spdptn].fl, 
             tskcmd.c       6956                         Sp[devno][spdptn].fh, 
             tskcmd.c       6957                         Sp[devno][spdptn].gl );
             tskcmd.c       6958          movptn = pProcAdr->step[actstep].par05;
             tskcmd.c       6959          movval = GetPositionValue(movptn);
    000042BC E014                   MOV         #20,R0     ; H'00000014
    000042BE 4E80                   MULR        R0,R14
    000042C0 D584                   MOV.L       L1380+36,R5; __$pProcAdr
    000042C2 6152                   MOV.L       @R5,R1     ; pProcAdr
    000042C4 7104                   ADD         #4,R1
    000042C6 60E3                   MOV         R14,R0
    000042C8 D383                   MOV.L       L1380+40,R3; __$GetPositionValue
    000042CA 430B                   JSR         @R3
    000042CC 041C                   MOV.B       @(R0,R1),R4; pProcAdr->step[].par05
             tskcmd.c       6960          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    000042CE 2F06                   MOV.L       R0,@-R15
    000042D0 E700                   MOV         #0,R7      ; H'00000000
    000042D2 E601                   MOV         #1,R6      ; H'00000001
    000042D4 65D3                   MOV         R13,R5
    000042D6 A0E0                   BRA         L880
    000042D8 E451                   MOV         #81,R4     ; H'00000051
    000042DA              L872:
             tskcmd.c       6961          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6962          pProcDat->Stp++;
             tskcmd.c       6963          break;
             tskcmd.c       6964    
             tskcmd.c       6965      case 3: // Z軸シールブレーク1段位置（現在位置から1段目まで）
             tskcmd.c       6966          spdptn = (( pProcAdr->step[actstep].par04 >> 4 ) & 0x0f );
    000042DA E014                   MOV         #20,R0     ; H'00000014
    000042DC 64E3                   MOV         R14,R4
    000042DE 4480                   MULR        R0,R4
    000042E0 D77C                   MOV.L       L1380+36,R7; __$pProcAdr
    000042E2 6672                   MOV.L       @R7,R6     ; pProcAdr
    000042E4 E5FC                   MOV         #-4,R5     ; H'FFFFFFFC
    000042E6 7603                   ADD         #3,R6
    000042E8 6043                   MOV         R4,R0
    000042EA 066C                   MOV.B       @(R0,R6),R6; pProcAdr->step[].par04
    000042EC 606C                   EXTU.B      R6,R0
    000042EE 405C                   SHAD        R5,R0
    000042F0 C90F                   AND         #15,R0
             tskcmd.c       6967          
             tskcmd.c       6968          if( spdptn > 0 )
    000042F2 2008                   TST         R0,R0
    000042F4 8D38                   BT/S        L882
    000042F6 6603                   MOV         R0,R6
             tskcmd.c       6969          {
             tskcmd.c       6970              devno  = MT_Z0;
             tskcmd.c       6971              MAC_SPEED_SET( devno, 
    000042F8 E00C                   MOV         #12,R0     ; H'0000000C
    000042FA 4680                   MULR        R0,R6
    000042FC D771                   MOV.L       L1380+20,R7; __$Sp
    000042FE 367C                   ADD         R7,R6
    00004300 3F612028               MOV.L       R6,@(160:12,R15)
    00004304 3E61503C               MOV.W       @(120:12,R6),R14; Sp[].ac
    00004308 D16D                   MOV.L       L1380+16,R1; _GetFactor
    0000430A 410B                   JSR         @R1
    0000430C E403                   MOV         #3,R4      ; H'00000003
    0000430E 35F16028               MOV.L       @(160:12,R15),R5
    00004312 E340                   MOV         #64,R3     ; H'00000040
    00004314 3451601F               MOV.L       @(124:12,R5),R4; Sp[].fl
    00004318 36516020               MOV.L       @(128:12,R5),R6; Sp[].fh
    0000431C 3751903D               MOVU.W      @(122,R5),R7; Sp[].gl
    00004320 3FE11022               MOV.W       R14,@(68:12,R15); mp.accel_type
    00004324 33FC                   ADD         R15,R3
    00004326 EE00                   MOV         #0,R14     ; H'00000000
    00004328 2302                   MOV.L       R0,@R3     ; mp.factor
    0000432A 1342                   MOV.L       R4,@(8,R3) ; mp.FL
    0000432C 1363                   MOV.L       R6,@(12,R3); mp.FH
    0000432E 1374                   MOV.L       R7,@(16,R3); mp.utime
    00004330 1375                   MOV.L       R7,@(20,R3); mp.dtime
    00004332 13E6                   MOV.L       R14,@(24,R3); mp.us
    00004334 13E7                   MOV.L       R14,@(28,R3); mp.ds
    00004336 7FE0                   ADD         #-32,R15
    00004338 65F3                   MOV         R15,R5
    0000433A 7560                   ADD         #96,R5
    0000433C 6152                   MOV.L       @R5,R1     ; (part of)mp
    0000433E 5251                   MOV.L       @(4,R5),R2 ; (part of)mp
    00004340 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    00004342 2F12                   MOV.L       R1,@R15
    00004344 1F21                   MOV.L       R2,@(4,R15)
    00004346 5453                   MOV.L       @(12,R5),R4; (part of)mp
    00004348 1F72                   MOV.L       R7,@(8,R15)
    0000434A 5E54                   MOV.L       @(16,R5),R14; (part of)mp
    0000434C 5755                   MOV.L       @(20,R5),R7; (part of)mp
    0000434E 5156                   MOV.L       @(24,R5),R1; (part of)mp
    00004350 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00004352 1F43                   MOV.L       R4,@(12,R15)
    00004354 1FE4                   MOV.L       R14,@(16,R15)
    00004356 1F75                   MOV.L       R7,@(20,R15)
    00004358 1F16                   MOV.L       R1,@(24,R15)
    0000435A 1F27                   MOV.L       R2,@(28,R15)
    0000435C D25A                   MOV.L       L1380+24,R2; _motor_SET
    0000435E 420B                   JSR         @R2
    00004360 E402                   MOV         #2,R4      ; H'00000002
    00004362 7F20                   ADD         #32,R15
             tskcmd.c       6972                             Sp[devno][spdptn].ac, 
             tskcmd.c       6973                             Sp[devno][spdptn].fl, 
             tskcmd.c       6974                             Sp[devno][spdptn].fh, 
             tskcmd.c       6975                             Sp[devno][spdptn].gl );
             tskcmd.c       6976              movval = GetPositionValue(POS_Z0_TPGT1);
    00004364 A046                   BRA         L879
    00004366 E41B                   MOV         #27,R4     ; H'0000001B
    00004368              L882:
             tskcmd.c       6977              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       6978              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       6979              pProcDat->Stp++;
             tskcmd.c       6980              break;
             tskcmd.c       6981          }
             tskcmd.c       6982          else
             tskcmd.c       6983          {
             tskcmd.c       6984              pProcDat->Stp++;
    00004368 7201                   ADD         #1,R2
    0000436A 6023                   MOV         R2,R0
    0000436C 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    0000436E              L874:
             tskcmd.c       6985              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       6986          }
             tskcmd.c       6987          
             tskcmd.c       6988          
             tskcmd.c       6989      case 4: // Z軸シールブレーク最終位置（1段目から最終位置まで）
             tskcmd.c       6990          spdptn = ( pProcAdr->step[actstep].par04 & 0x0f );
    0000436E E014                   MOV         #20,R0     ; H'00000014
    00004370 4E80                   MULR        R0,R14
    00004372 D758                   MOV.L       L1380+36,R7; __$pProcAdr
    00004374 6472                   MOV.L       @R7,R4     ; pProcAdr
    00004376 7403                   ADD         #3,R4
    00004378 60E3                   MOV         R14,R0
    0000437A 004C                   MOV.B       @(R0,R4),R0; pProcAdr->step[].par04
    0000437C C90F                   AND         #15,R0
             tskcmd.c       6991          
             tskcmd.c       6992          if( spdptn )
    0000437E 2008                   TST         R0,R0
    00004380 8D40                   BT/S        L884
    00004382 6203                   MOV         R0,R2
             tskcmd.c       6993          {
             tskcmd.c       6994              devno  = MT_Z0;
             tskcmd.c       6995              MAC_SPEED_SET( MT_Z0, 
    00004384 E00C                   MOV         #12,R0     ; H'0000000C
    00004386 EE60                   MOV         #96,R14    ; H'00000060
    00004388 4280                   MULR        R0,R2
    0000438A D54E                   MOV.L       L1380+20,R5; __$Sp
    0000438C 3EFC                   ADD         R15,R14
    0000438E 325C                   ADD         R5,R2
    00004390 3021503C               MOV.W       @(120:12,R2),R0; Sp[].ac
    00004394 3F212029               MOV.L       R2,@(164:12,R15)
    00004398 E403                   MOV         #3,R4      ; H'00000003
    0000439A D649                   MOV.L       L1380+16,R6; _GetFactor
    0000439C 460B                   JSR         @R6
    0000439E 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    000043A0 35F16029               MOV.L       @(164:12,R15),R5
    000043A4 2E02                   MOV.L       R0,@R14    ; mp.factor
    000043A6 3751601F               MOV.L       @(124:12,R5),R7; Sp[].fl
    000043AA 31516020               MOV.L       @(128:12,R5),R1; Sp[].fh
    000043AE 3451903D               MOVU.W      @(122,R5),R4; Sp[].gl
    000043B2 E500                   MOV         #0,R5      ; H'00000000
    000043B4 1E72                   MOV.L       R7,@(8,R14); mp.FL
    000043B6 1E13                   MOV.L       R1,@(12,R14); mp.FH
    000043B8 1E44                   MOV.L       R4,@(16,R14); mp.utime
    000043BA 1E45                   MOV.L       R4,@(20,R14); mp.dtime
    000043BC 1E56                   MOV.L       R5,@(24,R14); mp.us
    000043BE 1E57                   MOV.L       R5,@(28,R14); mp.ds
    000043C0 7FE0                   ADD         #-32,R15
    000043C2 E780                   MOV         #-128,R7   ; H'FFFFFF80
    000043C4 62F3                   MOV         R15,R2
    000043C6 677C                   EXTU.B      R7,R7
    000043C8 E402                   MOV         #2,R4      ; H'00000002
    000043CA 327C                   ADD         R7,R2
    000043CC 6E22                   MOV.L       @R2,R14    ; (part of)mp
    000043CE 5721                   MOV.L       @(4,R2),R7 ; (part of)mp
    000043D0 2FE2                   MOV.L       R14,@R15
    000043D2 5122                   MOV.L       @(8,R2),R1 ; (part of)mp
    000043D4 5E23                   MOV.L       @(12,R2),R14; (part of)mp
    000043D6 1F71                   MOV.L       R7,@(4,R15)
    000043D8 1F12                   MOV.L       R1,@(8,R15)
    000043DA 1FE3                   MOV.L       R14,@(12,R15)
    000043DC 5724                   MOV.L       @(16,R2),R7; (part of)mp
    000043DE 5125                   MOV.L       @(20,R2),R1; (part of)mp
    000043E0 5E26                   MOV.L       @(24,R2),R14; (part of)mp
    000043E2 5627                   MOV.L       @(28,R2),R6; (part of)mp
    000043E4 1F74                   MOV.L       R7,@(16,R15)
    000043E6 1F15                   MOV.L       R1,@(20,R15)
    000043E8 1FE6                   MOV.L       R14,@(24,R15)
    000043EA D237                   MOV.L       L1380+24,R2; _motor_SET
    000043EC 420B                   JSR         @R2
    000043EE 1F67                   MOV.L       R6,@(28,R15)
    000043F0 7F20                   ADD         #32,R15
             tskcmd.c       6996                             Sp[MT_Z0][spdptn].ac, 
             tskcmd.c       6997                             Sp[MT_Z0][spdptn].fl, 
             tskcmd.c       6998                             Sp[MT_Z0][spdptn].fh, 
             tskcmd.c       6999                             Sp[MT_Z0][spdptn].gl );
             tskcmd.c       7000              movval = GetPositionValue(POS_Z0_STOPE);
    000043F2 E417                   MOV         #23,R4     ; H'00000017
    000043F4              L879:
    000043F4 D338                   MOV.L       L1380+40,R3; __$GetPositionValue
    000043F6 434B                   JSR/N       @R3
    000043F8 2F06                   MOV.L       R0,@-R15
    000043FA 65D3                   MOV         R13,R5
    000043FC E700                   MOV         #0,R7      ; H'00000000
    000043FE E602                   MOV         #2,R6      ; H'00000002
    00004400 A04B                   BRA         L880
    00004402 E451                   MOV         #81,R4     ; H'00000051
    00004404              L884:
             tskcmd.c       7001              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD,  movval );
             tskcmd.c       7002              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7003              pProcDat->Stp++;
             tskcmd.c       7004              break;
             tskcmd.c       7005          }
             tskcmd.c       7006          else
             tskcmd.c       7007          {
             tskcmd.c       7008              pProcDat->Stp++;
    00004404 66B2                   MOV.L       @R11,R6    ; pProcDat
    00004406 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004408 7001                   ADD         #1,R0
    0000440A 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000440C              L876:
             tskcmd.c       7009              // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7010          }
             tskcmd.c       7011    
             tskcmd.c       7012    
             tskcmd.c       7013      case 5: // Z軸速度設定・退避位置移動
             tskcmd.c       7014          devno  = MT_Z0;
             tskcmd.c       7015          spdptn = SpPtn.Z0_SpdNmlPtn;
    0000440C D22A                   MOV.L       L1380+8,R2 ; H'00000006+__$SpPtn
    0000440E 6020                   MOV.B       @R2,R0     ; SpPtn.Z0_SpdNmlPtn
    00004410 EE80                   MOV         #-128,R14  ; H'FFFFFF80
             tskcmd.c       7016          movval = GetPositionValue(POS_Z0_TAIHI);
    00004412 E407                   MOV         #7,R4      ; H'00000007
    00004414 3F0100A8               MOV.B       R0,@(168:12,R15); spdptn
    00004418 D32F                   MOV.L       L1380+40,R3; __$GetPositionValue
    0000441A 430B                   JSR         @R3
    0000441C 6EEC                   EXTU.B      R14,R14
    0000441E 3EFC                   ADD         R15,R14
             tskcmd.c       7017    
             tskcmd.c       7018          MAC_SPEED_SET( devno, 
    00004420 34F180A8               MOVU.B      @(168,R15),R4; spdptn
    00004424 1E0B                   MOV.L       R0,@(44,R14); movval
    00004426 E00C                   MOV         #12,R0     ; H'0000000C
    00004428 4480                   MULR        R0,R4
    0000442A D526                   MOV.L       L1380+20,R5; __$Sp
    0000442C 345C                   ADD         R5,R4
    0000442E 1E49                   MOV.L       R4,@(36,R14)
    00004430 3041503C               MOV.W       @(120:12,R4),R0; Sp[].ac
    00004434 E403                   MOV         #3,R4      ; H'00000003
    00004436 D522                   MOV.L       L1380+16,R5; _GetFactor
    00004438 450B                   JSR         @R5
    0000443A 81E2                   MOV.W       R0,@(4,R14); mp.accel_type
    0000443C 52E9                   MOV.L       @(36,R14),R2
    0000443E E400                   MOV         #0,R4      ; H'00000000
    00004440 2E02                   MOV.L       R0,@R14    ; mp.factor
    00004442 3621601F               MOV.L       @(124:12,R2),R6; Sp[].fl
    00004446 37216020               MOV.L       @(128:12,R2),R7; Sp[].fh
    0000444A 3121903D               MOVU.W      @(122,R2),R1; Sp[].gl
    0000444E 1E62                   MOV.L       R6,@(8,R14); mp.FL
    00004450 1E73                   MOV.L       R7,@(12,R14); mp.FH
    00004452 1E14                   MOV.L       R1,@(16,R14); mp.utime
    00004454 1E15                   MOV.L       R1,@(20,R14); mp.dtime
    00004456 1E46                   MOV.L       R4,@(24,R14); mp.us
    00004458 1E47                   MOV.L       R4,@(28,R14); mp.ds
    0000445A 7FE0                   ADD         #-32,R15
    0000445C E7A0                   MOV         #-96,R7    ; H'FFFFFFA0
    0000445E 65F3                   MOV         R15,R5
    00004460 677C                   EXTU.B      R7,R7
    00004462 357C                   ADD         R7,R5
    00004464 6E52                   MOV.L       @R5,R14    ; (part of)mp
    00004466 5153                   MOV.L       @(12,R5),R1; (part of)mp
    00004468 2FE2                   MOV.L       R14,@R15
    0000446A 5E52                   MOV.L       @(8,R5),R14; (part of)mp
    0000446C 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    0000446E 1FE2                   MOV.L       R14,@(8,R15)
    00004470 1F13                   MOV.L       R1,@(12,R15)
    00004472 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00004474 5E55                   MOV.L       @(20,R5),R14; (part of)mp
    00004476 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00004478 5257                   MOV.L       @(28,R5),R2; (part of)mp
    0000447A 1F71                   MOV.L       R7,@(4,R15)
    0000447C 1F14                   MOV.L       R1,@(16,R15)
    0000447E 1FE5                   MOV.L       R14,@(20,R15)
    00004480 1F66                   MOV.L       R6,@(24,R15)
    00004482 1F27                   MOV.L       R2,@(28,R15)
    00004484 D210                   MOV.L       L1380+24,R2; _motor_SET
    00004486 420B                   JSR         @R2
    00004488 E402                   MOV         #2,R4      ; H'00000002
    0000448A 7F1C                   ADD         #28,R15
    0000448C 65D3                   MOV         R13,R5
             tskcmd.c       7019                         Sp[devno][spdptn].ac, 
             tskcmd.c       7020                         Sp[devno][spdptn].fl, 
             tskcmd.c       7021                         Sp[devno][spdptn].fh, 
             tskcmd.c       7022                         Sp[devno][spdptn].gl );
             tskcmd.c       7023    
             tskcmd.c       7024          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, movval );
    0000448E 31F1602C               MOV.L       @(176:12,R15),R1; movval
    00004492 E700                   MOV         #0,R7      ; H'00000000
    00004494 E602                   MOV         #2,R6      ; H'00000002
    00004496 2F12                   MOV.L       R1,@R15
    00004498 E451                   MOV         #81,R4     ; H'00000051
    0000449A              L880:
    0000449A D310                   MOV.L       L1380+44,R3; __$AbsmvAction
    0000449C 434B                   JSR/N       @R3
    0000449E 6403                   MOV         R0,R4
    000044A0 7F04                   ADD         #4,R15
    000044A2 61B2                   MOV.L       @R11,R1    ; pProcDat
    000044A4 2008                   TST         R0,R0
    000044A6 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    000044A8 8F1B                   BF/S        L886
    000044AA 6203                   MOV         R0,R2
    000044AC A019                   BRA         L886
    000044AE 64C3                   MOV         R12,R4
    000044B0              L1380:
    000044B0 <00000002>             .DATA.L     H'00000002+__$bcctrl
    000044B4 <00000000>             .DATA.L     __$pProcDat
    000044B8 <00000006>             .DATA.L     H'00000006+__$SpPtn
    000044BC <00000078>             .DATA.L     H'00000078+__$Sp
    000044C0 <00000000>             .DATA.L     _GetFactor
    000044C4 <00000000>             .DATA.L     __$Sp
    000044C8 <00000000>             .DATA.L     _motor_SET
    000044CC <00000005>             .DATA.L     H'00000005+__$SpPtn
    000044D0 <0000003C>             .DATA.L     H'0000003C+__$Sp
    000044D4 <00000000>             .DATA.L     __$pProcAdr
    000044D8 <00000000>             .DATA.L     __$GetPositionValue
    000044DC <00000000>             .DATA.L     __$AbsmvAction
    000044E0              L877:
             tskcmd.c       7025          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7026          pProcDat->Stp++;
             tskcmd.c       7027          break;
             tskcmd.c       7028    
             tskcmd.c       7029      case 6: // 
             tskcmd.c       7030          result = E_SUCCESS;
    000044E0 E400                   MOV         #0,R4      ; H'00000000
    000044E2              L886:
    000044E2 7201                   ADD         #1,R2
    000044E4 6023                   MOV         R2,R0
    000044E6 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    000044E8              L878:
    000044E8 030000B0               MOVI20      #176,R3    ; H'000000B0
    000044EC 3F3C                   ADD         R3,R15
    000044EE 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       7031          pProcDat->Stp++;
             tskcmd.c       7032          break;
             tskcmd.c       7033      }
             tskcmd.c       7034      return( result );
             tskcmd.c       7035    }
    000044F0 047B                   RTV/N       R4
             tskcmd.c       7036    /***********************************************************************
             tskcmd.c       7037    * 
             tskcmd.c       7038    * [概要]  加圧
             tskcmd.c       7039    * [引数]  
             tskcmd.c       7040    * [戻値]  
             tskcmd.c       7041    * 
             tskcmd.c       7042    ***********************************************************************/
             tskcmd.c       7043    static ER  CmdActionPress( T_CMD_MSG* mrcv )
    000044F2              __$CmdActionPress:               ; function: __$CmdActionPress
                                                           ; frame size=60
    000044F2 48F0                   MOVMU.L     R8,@-R15
    000044F4 7FFC                   ADD         #-4,R15
             tskcmd.c       7044    {
             tskcmd.c       7045      ER result = E_CONTINUE;
             tskcmd.c       7046      UB nzl;
             tskcmd.c       7047      UB prid1;
             tskcmd.c       7048      UB bcid;
             tskcmd.c       7049      UB inf1;
             tskcmd.c       7050      UB inf2;
             tskcmd.c       7051      UB actstep;
             tskcmd.c       7052      UB dummy;
             tskcmd.c       7053      
             tskcmd.c       7054      unsigned short sftbit = 0x0001;
             tskcmd.c       7055      unsigned short wkA = 0x0000;
             tskcmd.c       7056      unsigned short wkB = 0x0000;
             tskcmd.c       7057      unsigned short wkC = 0x0000;
             tskcmd.c       7058      
             tskcmd.c       7059      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       7060      bcid  = mrcv->msgdata.bcid;
    000044F6 3C41801A               MOVU.B      @(26,R4),R12; (mrcv)->bcid
             tskcmd.c       7061      inf1  = mrcv->msgdata.inf;
             tskcmd.c       7062      inf2  = mrcv->msgdata.inf2;
             tskcmd.c       7063      actstep = bcctrl[bcid].actstp - 1 ;
             tskcmd.c       7064      
             tskcmd.c       7065      switch( pProcDat->Stp )
    000044FA D88C                   MOV.L       L1381+2,R8 ; __$pProcDat
    000044FC 60C3                   MOV         R12,R0
    000044FE 6582                   MOV.L       @R8,R5     ; pProcDat
    00004500 4008                   SHLL2       R0
    00004502 E9F1                   MOV         #-15,R9    ; H'FFFFFFF1
    00004504 D68A                   MOV.L       L1381+6,R6 ; H'00000002+__$bcctrl
    00004506 4000                   SHLL        R0
    00004508 026C                   MOV.B       @(R0,R6),R2; bcctrl[].actstp
    0000450A 699C                   EXTU.B      R9,R9
    0000450C 30518002               MOVU.B      @(2,R5),R0 ; (pProcDat)->Stp
    00004510 6B93                   MOV         R9,R11
    00004512 2008                   TST         R0,R0
    00004514 3A418018               MOVU.B      @(24,R4),R10; (mrcv)->prid1
    00004518 3D41801C               MOVU.B      @(28,R4),R13; (mrcv)->inf
    0000451C 3E41801D               MOVU.B      @(29,R4),R14; (mrcv)->inf2
    00004520 8D14                   BT/S        L899
    00004522 72FF                   ADD         #-1,R2
    00004524 8801                   CMP/EQ      #1,R0
    00004526 892F                   BT          L901
    00004528 8802                   CMP/EQ      #2,R0
    0000452A 893D                   BT          L903
    0000452C 8803                   CMP/EQ      #3,R0
    0000452E 8946                   BT          L905
    00004530 8804                   CMP/EQ      #4,R0
    00004532 8964                   BT          L907
    00004534 8805                   CMP/EQ      #5,R0
    00004536 8972                   BT          L909
    00004538 8806                   CMP/EQ      #6,R0
    0000453A 8B01                   BF          L1410
    0000453C A08B                   BRA         L911
    0000453E 0009                   NOP
    00004540              L1410:
    00004540 8807                   CMP/EQ      #7,R0
    00004542 8B01                   BF          L1411
    00004544 A0AE                   BRA         L912
    00004546 0009                   NOP
    00004548              L1411:
    00004548 A0C3                   BRA         L913
    0000454A 0009                   NOP
    0000454C              L899:
    0000454C DB79                   MOV.L       L1381+10,R11; H'00000001+__$psel
             tskcmd.c       7066      {
             tskcmd.c       7067      case 0: // ポンプ速度設定、加圧前圧力取得指示
             tskcmd.c       7068          psns.suc  = 0;
    0000454E E000                   MOV         #0,R0      ; H'00000000
    00004550 64B0                   MOV.B       @R11,R4    ; psel.smp
    00004552 D579                   MOV.L       L1381+14,R5; H'00000002+__$psns
             tskcmd.c       7069          psns.idl  = IdleBitSet(psel.smp);
    00004554 D179                   MOV.L       L1381+18,R1; _IdleBitSet
    00004556 410B                   JSR         @R1
    00004558 2501                   MOV.W       R0,@R5     ; psns.suc
    0000455A DB79                   MOV.L       L1381+22,R11; __$psns
    0000455C 2B01                   MOV.W       R0,@R11    ; psns.idl
             tskcmd.c       7070          psns.tcnt = 0;
    0000455E E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       7071    
             tskcmd.c       7072          mbx_send    (
             tskcmd.c       7073                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7074                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7075                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7076                          prid1,               // prid1
             tskcmd.c       7077                          bcid,                // bcid
             tskcmd.c       7078                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7079                          inf1,                // sts
             tskcmd.c       7080                          inf2,                // sts2
             tskcmd.c       7081                          &dummy,              // data
             tskcmd.c       7082                          sizeof( dummy )      // siz
             tskcmd.c       7083                      );
    00004560 E401                   MOV         #1,R4      ; H'00000001
    00004562 81B3                   MOV.W       R0,@(6,R11); psns.tcnt
    00004564 2F46                   MOV.L       R4,@-R15
    00004566 67F3                   MOV         R15,R7
    00004568 7704                   ADD         #4,R7
    0000456A 2F76                   MOV.L       R7,@-R15
    0000456C 2FE6                   MOV.L       R14,@-R15
    0000456E 2FD6                   MOV.L       R13,@-R15
    00004570 ED99                   MOV         #-103,R13  ; H'FFFFFF99
    00004572 6DDC                   EXTU.B      R13,R13
    00004574 2FD6                   MOV.L       R13,@-R15
    00004576 2FC6                   MOV.L       R12,@-R15
    00004578 E60D                   MOV         #13,R6     ; H'0000000D
    0000457A E50C                   MOV         #12,R5     ; H'0000000C
    0000457C 6463                   MOV         R6,R4
    0000457E D271                   MOV.L       L1381+26,R2; _mbx_send
    00004580 420B                   JSR         @R2
    00004582 67A3                   MOV         R10,R7
    00004584 A014                   BRA         L914
    00004586 7F18                   ADD         #24,R15
    00004588              L901:
             tskcmd.c       7084          WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7085          pProcDat->Stp++;
             tskcmd.c       7086          break;
             tskcmd.c       7087    
             tskcmd.c       7088      case 1: // 正常ノズルのみ電磁弁を流路側に指示
             tskcmd.c       7089          // typedef struct {
             tskcmd.c       7090          //  unsigned short  idl;
             tskcmd.c       7091          //  unsigned short  suc;
             tskcmd.c       7092          //  unsigned short  err;
             tskcmd.c       7093          //  unsigned short  tcnt;
             tskcmd.c       7094          //  unsigned short  pre[NOZZLE_MAX+1];//加圧前
             tskcmd.c       7095          //  unsigned short  now[NOZZLE_MAX+1];//現在
             tskcmd.c       7096          //  unsigned short  pek[NOZZLE_MAX+1];//Peek
             tskcmd.c       7097          //  unsigned short  dat[NOZZLE_MAX+1][PRESSMP_MAX];//履歴
             tskcmd.c       7098          // } ST_PSNS;
             tskcmd.c       7099    
             tskcmd.c       7100          PressDataGet( &psns.pre[0] );
    00004588 D46F                   MOV.L       L1381+30,R4; H'00000008+__$psns
    0000458A D170                   MOV.L       L1381+34,R1; _PressDataGet
    0000458C 414B                   JSR/N       @R1
             tskcmd.c       7101    
             tskcmd.c       7102          vout.target = psns.idl | 0x01fff;
    0000458E D16C                   MOV.L       L1381+22,R1; __$psns
    00004590 6511                   MOV.W       @R1,R5     ; psns.idl
             tskcmd.c       7103          vout.valout = ( ( psns.err ^ 0x1fff ) & psns.idl ) | 0x01fff;
    00004592 8512                   MOV.W       @(4,R1),R0 ; psns.err
    00004594 06001FFF               MOVI20      #8191,R6   ; H'00001FFF
    00004598 6753                   MOV         R5,R7
    0000459A 276B                   OR          R6,R7
    0000459C D46C                   MOV.L       L1381+38,R4; __$vout
    0000459E 206A                   XOR         R6,R0
    000045A0 2471                   MOV.W       R7,@R4     ; vout.target
    000045A2 2059                   AND         R5,R0
    000045A4 A040                   BRA         L915
    000045A6 206B                   OR          R6,R0
    000045A8              L903:
    000045A8 E505                   MOV         #5,R5      ; H'00000005
             tskcmd.c       7104          
             tskcmd.c       7105          mbx_send    (
             tskcmd.c       7106                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7107                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7108                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7109                          prid1,               // prid1
             tskcmd.c       7110                          bcid,                // bcid
             tskcmd.c       7111                          ID_MSG_VALVEOUT,     // msgid
             tskcmd.c       7112                          inf1,                // sts
             tskcmd.c       7113                          inf2,                // sts2
             tskcmd.c       7114                          (UB *)&vout.target,        // data
             tskcmd.c       7115                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7116                      );
             tskcmd.c       7117          pProcDat->Stp++;
             tskcmd.c       7118          break;
             tskcmd.c       7119    
             tskcmd.c       7120      case 2: // ポンプ駆動（加圧開始）
             tskcmd.c       7121          pio_BOUT( O_DAIAPMP, 5 );// ★速度パターンいれる
    000045AA D26A                   MOV.L       L1381+42,R2; _pio_BOUT
    000045AC 420B                   JSR         @R2
    000045AE E401                   MOV         #1,R4      ; H'00000001
    000045B0              L914:
    000045B0 E614                   MOV         #20,R6     ; H'00000014
    000045B2 64A3                   MOV         R10,R4
    000045B4 D368                   MOV.L       L1381+46,R3; __$WaitAction
    000045B6 430B                   JSR         @R3
    000045B8 65C3                   MOV         R12,R5
    000045BA A047                   BRA         L916
    000045BC 0009                   NOP
    000045BE              L905:
             tskcmd.c       7122          WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7123          pProcDat->Stp++;
             tskcmd.c       7124          break;
             tskcmd.c       7125    
             tskcmd.c       7126      case 3: // 圧力値取得
             tskcmd.c       7127          mbx_send    (
             tskcmd.c       7128                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7129                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7130                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7131                          prid1,               // prid1
             tskcmd.c       7132                          bcid,                // bcid
             tskcmd.c       7133                          ID_MSG_PRESSREN, // msgid
             tskcmd.c       7134                          inf1,                // sts
             tskcmd.c       7135                          inf2,                // sts2
             tskcmd.c       7136                          &dummy,              // data
             tskcmd.c       7137                          sizeof( dummy )      // siz
             tskcmd.c       7138                      );
    000045BE E401                   MOV         #1,R4      ; H'00000001
    000045C0 2F46                   MOV.L       R4,@-R15
    000045C2 67F3                   MOV         R15,R7
    000045C4 7704                   ADD         #4,R7
    000045C6 2F76                   MOV.L       R7,@-R15
    000045C8 2FE6                   MOV.L       R14,@-R15
    000045CA 2FD6                   MOV.L       R13,@-R15
    000045CC ED98                   MOV         #-104,R13  ; H'FFFFFF98
    000045CE 6DDC                   EXTU.B      R13,R13
    000045D0 2FD6                   MOV.L       R13,@-R15
    000045D2 2FC6                   MOV.L       R12,@-R15
    000045D4 E60D                   MOV         #13,R6     ; H'0000000D
    000045D6 E50C                   MOV         #12,R5     ; H'0000000C
    000045D8 6463                   MOV         R6,R4
    000045DA DB5A                   MOV.L       L1381+26,R11; _mbx_send
    000045DC 4B0B                   JSR         @R11
    000045DE 67A3                   MOV         R10,R7
    000045E0 7F18                   ADD         #24,R15
             tskcmd.c       7139          WaitAction( prid1, bcid, PRESSMP_WAIT );
    000045E2 E614                   MOV         #20,R6     ; H'00000014
    000045E4 64A3                   MOV         R10,R4
    000045E6 D35C                   MOV.L       L1381+46,R3; __$WaitAction
    000045E8 430B                   JSR         @R3
    000045EA 65C3                   MOV         R12,R5
             tskcmd.c       7140          
             tskcmd.c       7141          pProcDat->Stp++;
    000045EC 6E82                   MOV.L       @R8,R14    ; pProcDat
             tskcmd.c       7142          psns.tcnt++;
    000045EE D154                   MOV.L       L1381+22,R1; __$psns
    000045F0 84E2                   MOV.B       @(2,R14),R0; (pProcDat)->Stp
    000045F2 7001                   ADD         #1,R0
    000045F4 80E2                   MOV.B       R0,@(2,R14); (pProcDat)->Stp
    000045F6 8513                   MOV.W       @(6,R1),R0 ; psns.tcnt
    000045F8 7001                   ADD         #1,R0
    000045FA A06A                   BRA         L913
    000045FC 8113                   MOV.W       R0,@(6,R1) ; psns.tcnt
    000045FE              L907:
             tskcmd.c       7143          break;
             tskcmd.c       7144    
             tskcmd.c       7145      case 4: // 加圧判定
             tskcmd.c       7146          result = PressureChk();
    000045FE B06C                   BSR         __$PressureChk
    00004600 0009                   NOP
             tskcmd.c       7147    
             tskcmd.c       7148          if( result == E_CONTINUE )
    00004602 30B0                   CMP/EQ      R11,R0
    00004604 8F02                   BF/S        L918
    00004606 6903                   MOV         R0,R9
             tskcmd.c       7149          {
             tskcmd.c       7150              pProcDat->Stp = 3;
    00004608 A02F                   BRA         L919
    0000460A E003                   MOV         #3,R0      ; H'00000003
    0000460C              L918:
             tskcmd.c       7151              WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7152          }
             tskcmd.c       7153          else if( result == E_SUCCESS )
    0000460C 2998                   TST         R9,R9
    0000460E 8B60                   BF          L913
             tskcmd.c       7154          {
             tskcmd.c       7155              memcpy( &psns.pek[0], &psns.now[0], (NOZZLE_MAX*2) );
    00004610 D552                   MOV.L       L1381+50,R5; H'00000022+__$psns
    00004612 D453                   MOV.L       L1381+54,R4; H'0000003C+__$psns
    00004614 D253                   MOV.L       L1381+58,R2; _memcpy
    00004616 420B                   JSR         @R2
    00004618 E618                   MOV         #24,R6     ; H'00000018
    0000461A A031                   BRA         L921
    0000461C 0009                   NOP
    0000461E              L909:
             tskcmd.c       7156              pio_BOUT( O_DAIAPMP, 0 );
             tskcmd.c       7157              WaitAction( prid1, bcid, POMPAFT_WAIT );
             tskcmd.c       7158              pProcDat->Stp++;
             tskcmd.c       7159              psns.tcnt = 0;
             tskcmd.c       7160              result = E_CONTINUE;
             tskcmd.c       7161          }
             tskcmd.c       7162          break;
             tskcmd.c       7163    
             tskcmd.c       7164      case 5: // 圧力値取得 減圧
             tskcmd.c       7165    //        vout.target = ( 0x0fff ^ vout.valout);
             tskcmd.c       7166    //        vout.valout = vout.target;
             tskcmd.c       7167          vout.target = 0x1fff;
    0000461E 02001FFF               MOVI20      #8191,R2   ; H'00001FFF
    00004622 D44B                   MOV.L       L1381+38,R4; __$vout
    00004624 2421                   MOV.W       R2,@R4     ; vout.target
             tskcmd.c       7168          vout.valout = 0x0000;
    00004626 E000                   MOV         #0,R0      ; H'00000000
    00004628              L915:
    00004628 EB04                   MOV         #4,R11     ; H'00000004
    0000462A 8141                   MOV.W       R0,@(2,R4) ; vout.valout
    0000462C 2FB6                   MOV.L       R11,@-R15
    0000462E D148                   MOV.L       L1381+38,R1; __$vout
    00004630 2F16                   MOV.L       R1,@-R15
    00004632 2FE6                   MOV.L       R14,@-R15
    00004634 2FD6                   MOV.L       R13,@-R15
    00004636 E29B                   MOV         #-101,R2   ; H'FFFFFF9B
    00004638 622C                   EXTU.B      R2,R2
    0000463A 2F26                   MOV.L       R2,@-R15
    0000463C 2FC6                   MOV.L       R12,@-R15
    0000463E E60D                   MOV         #13,R6     ; H'0000000D
    00004640 E50C                   MOV         #12,R5     ; H'0000000C
    00004642 6463                   MOV         R6,R4
    00004644 D23F                   MOV.L       L1381+26,R2; _mbx_send
    00004646 420B                   JSR         @R2
    00004648 67A3                   MOV         R10,R7
    0000464A 7F18                   ADD         #24,R15
    0000464C              L916:
    0000464C 6682                   MOV.L       @R8,R6     ; pProcDat
    0000464E 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004650 7001                   ADD         #1,R0
    00004652 A03E                   BRA         L913
    00004654 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004656              L911:
             tskcmd.c       7169    
             tskcmd.c       7170          mbx_send    (
             tskcmd.c       7171                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7172                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7173                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7174                          prid1,               // prid1
             tskcmd.c       7175                          bcid,                // bcid
             tskcmd.c       7176                          ID_MSG_VALVEOUT,     // msgid
             tskcmd.c       7177                          inf1,                // sts
             tskcmd.c       7178                          inf2,                // sts2
             tskcmd.c       7179                          (UB *)&vout.target,        // data
             tskcmd.c       7180                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7181                      );
             tskcmd.c       7182    
             tskcmd.c       7183          pProcDat->Stp++;
             tskcmd.c       7184          break;
             tskcmd.c       7185    
             tskcmd.c       7186      case 6: // 減圧判定
             tskcmd.c       7187          result = RePressureChk();
    00004656 B0C8                   BSR         __$RePressureChk
    00004658 0009                   NOP
             tskcmd.c       7188    
             tskcmd.c       7189          psns.tcnt++;
    0000465A D139                   MOV.L       L1381+22,R1; __$psns
             tskcmd.c       7190          if( result == E_CONTINUE )
    0000465C 30B0                   CMP/EQ      R11,R0
    0000465E 6903                   MOV         R0,R9
    00004660 8513                   MOV.W       @(6,R1),R0 ; psns.tcnt
    00004662 7001                   ADD         #1,R0
    00004664 8F0A                   BF/S        L923
    00004666 8113                   MOV.W       R0,@(6,R1) ; psns.tcnt
             tskcmd.c       7191          {
             tskcmd.c       7192              pProcDat->Stp = 5;
    00004668 E005                   MOV         #5,R0      ; H'00000005
    0000466A              L919:
    0000466A 6282                   MOV.L       @R8,R2     ; pProcDat
    0000466C E614                   MOV         #20,R6     ; H'00000014
    0000466E 64A3                   MOV         R10,R4
    00004670 8022                   MOV.B       R0,@(2,R2) ; (pProcDat)->Stp
    00004672 D339                   MOV.L       L1381+46,R3; __$WaitAction
    00004674 430B                   JSR         @R3
    00004676 65C3                   MOV         R12,R5
    00004678 A02B                   BRA         L913
    0000467A 0009                   NOP
    0000467C              L923:
             tskcmd.c       7193              WaitAction( prid1, bcid, PRESSMP_WAIT );
             tskcmd.c       7194          }
             tskcmd.c       7195          else if( result == E_SUCCESS )
    0000467C 2998                   TST         R9,R9
    0000467E 8B28                   BF          L913
    00004680              L921:
    00004680 E500                   MOV         #0,R5      ; H'00000000
    00004682 D234                   MOV.L       L1381+42,R2; _pio_BOUT
    00004684 420B                   JSR         @R2
    00004686 E401                   MOV         #1,R4      ; H'00000001
    00004688 E605                   MOV         #5,R6      ; H'00000005
    0000468A 64A3                   MOV         R10,R4
    0000468C D332                   MOV.L       L1381+46,R3; __$WaitAction
    0000468E 430B                   JSR         @R3
    00004690 65C3                   MOV         R12,R5
    00004692 6182                   MOV.L       @R8,R1     ; pProcDat
    00004694 69B3                   MOV         R11,R9
    00004696 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00004698 7001                   ADD         #1,R0
    0000469A 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    0000469C E000                   MOV         #0,R0      ; H'00000000
    0000469E D132                   MOV.L       L1381+62,R1; H'00000006+__$psns
    000046A0 A017                   BRA         L913
    000046A2 2101                   MOV.W       R0,@R1     ; psns.tcnt
    000046A4              L912:
             tskcmd.c       7196          {
             tskcmd.c       7197              pio_BOUT( O_DAIAPMP, 0 );
             tskcmd.c       7198              WaitAction( prid1, bcid, POMPAFT_WAIT );
             tskcmd.c       7199              pProcDat->Stp++;
             tskcmd.c       7200              psns.tcnt = 0;
             tskcmd.c       7201              result = E_CONTINUE;
             tskcmd.c       7202          }
             tskcmd.c       7203          else
             tskcmd.c       7204          {
             tskcmd.c       7205          }
             tskcmd.c       7206          break;
             tskcmd.c       7207          
             tskcmd.c       7208          
             tskcmd.c       7209      case 7: // 
             tskcmd.c       7210          if( PressStatus(&pProcAdr->step[actstep].par03) != E_SUCCESS )//★
    000046A4 662C                   EXTU.B      R2,R6
    000046A6 E014                   MOV         #20,R0     ; H'00000014
    000046A8 4680                   MULR        R0,R6
    000046AA D530                   MOV.L       L1381+66,R5; __$pProcAdr
    000046AC 6452                   MOV.L       @R5,R4     ; pProcAdr
    000046AE 7402                   ADD         #2,R4
    000046B0 D32F                   MOV.L       L1381+70,R3; __$PressStatus
    000046B2 430B                   JSR         @R3
    000046B4 346C                   ADD         R6,R4
    000046B6 2008                   TST         R0,R0
    000046B8 8906                   BT          L925
             tskcmd.c       7211          {
             tskcmd.c       7212              result = E_CONTINUE;
             tskcmd.c       7213              WaitAction( prid1, bcid, 25 );
    000046BA E619                   MOV         #25,R6     ; H'00000019
    000046BC 64A3                   MOV         R10,R4
    000046BE D326                   MOV.L       L1381+46,R3; __$WaitAction
    000046C0 430B                   JSR         @R3
    000046C2 65C3                   MOV         R12,R5
    000046C4 A005                   BRA         L913
    000046C6 69B3                   MOV         R11,R9
    000046C8              L925:
             tskcmd.c       7214              break;
             tskcmd.c       7215          }
             tskcmd.c       7216          else
             tskcmd.c       7217          {
             tskcmd.c       7218              pProcDat->Stp++;
    000046C8 6682                   MOV.L       @R8,R6     ; pProcDat
             tskcmd.c       7219              result = E_SUCCESS;
    000046CA E900                   MOV         #0,R9      ; H'00000000
    000046CC 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000046CE 7001                   ADD         #1,R0
    000046D0 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000046D2              L913:
             tskcmd.c       7220          }
             tskcmd.c       7221          break;
             tskcmd.c       7222      }
             tskcmd.c       7223      return( result );
    000046D2 6093                   MOV         R9,R0
    000046D4 7F04                   ADD         #4,R15
    000046D6 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       7224    }
    000046D8 006B                   RTS/N
             tskcmd.c       7225    
             tskcmd.c       7226    /***********************************************************************
             tskcmd.c       7227    * 
             tskcmd.c       7228    * [概要]  
             tskcmd.c       7229    * [引数]  
             tskcmd.c       7230    * [戻値]  
             tskcmd.c       7231    * 
             tskcmd.c       7232    ***********************************************************************/
             tskcmd.c       7233    static ER  PressureChk()
    000046DA              __$PressureChk:                  ; function: __$PressureChk
                                                           ; frame size=32
    000046DA 48F0                   MOVMU.L     R8,@-R15
             tskcmd.c       7234    {
             tskcmd.c       7235      ER result = E_CONTINUE;
             tskcmd.c       7236      UB nzl;
             tskcmd.c       7237      UB actstep;
             tskcmd.c       7238      UB spdptn;
             tskcmd.c       7239      unsigned short sftbit = 0x0001;
             tskcmd.c       7240      unsigned short wkA = 0x0000;
             tskcmd.c       7241      unsigned short wkB = 0x0000;
             tskcmd.c       7242      unsigned short wkC = 0x0000;
             tskcmd.c       7243    
             tskcmd.c       7244      if( psns.tcnt >= ( 5 * pProcAdr->step[actstep].par05 ))//  Timeout時間(msec) : Tsec * 1000、Interval:200msec、タイムアウトカウント：1000T/200 = 5T
    000046DC E014                   MOV         #20,R0     ; H'00000014
    000046DE EAF1                   MOV         #-15,R10   ; H'FFFFFFF1
    000046E0 4680                   MULR        R0,R6
    000046E2 DB22                   MOV.L       L1381+66,R11; __$pProcAdr
    000046E4 64B2                   MOV.L       @R11,R4    ; pProcAdr
    000046E6 6AAC                   EXTU.B      R10,R10
    000046E8 D11F                   MOV.L       L1381+62,R1; H'00000006+__$psns
    000046EA 7404                   ADD         #4,R4
    000046EC 6C63                   MOV         R6,R12
    000046EE 6063                   MOV         R6,R0
    000046F0 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par05
    000046F2 E005                   MOV         #5,R0      ; H'00000005
    000046F4 624C                   EXTU.B      R4,R2
    000046F6 4280                   MULR        R0,R2
    000046F8 35119000               MOVU.W      @(0,R1),R5 ; psns.tcnt
    000046FC 3523                   CMP/GE      R2,R5
    000046FE 8F3B                   BF/S        L928
    00004700 EE01                   MOV         #1,R14     ; H'00000001
             tskcmd.c       7245      {
             tskcmd.c       7246          // タイムアウトした場合は、非対象ch・成功ch以外エラー
             tskcmd.c       7247          wkA = ( psns.idl | psns.suc );
             tskcmd.c       7248          wkB = ( wkA      ^ 0x0fff   );
             tskcmd.c       7249          wkC = ( wkB      ^ psns.err );
    00004702 D40F                   MOV.L       L1381+22,R4; __$psns
    00004704 6241                   MOV.W       @R4,R2     ; psns.idl
    00004706 8541                   MOV.W       @(2,R4),R0 ; psns.suc
    00004708 06000FFF               MOVI20      #4095,R6   ; H'00000FFF
    0000470C 220B                   OR          R0,R2
    0000470E 8542                   MOV.W       @(4,R4),R0 ; psns.err
    00004710 226A                   XOR         R6,R2
    00004712 220A                   XOR         R0,R2
             tskcmd.c       7250          psns.err = wkC;
    00004714 6023                   MOV         R2,R0
             tskcmd.c       7251          
             tskcmd.c       7252          if( ( wkC & 0x0fff ) == 0x0fff )    // 全てエラーは終了
    00004716 2269                   AND         R6,R2
    00004718 622D                   EXTU.W      R2,R2
    0000471A 3260                   CMP/EQ      R6,R2
    0000471C 8F5E                   BF/S        L930
    0000471E 8142                   MOV.W       R0,@(4,R4) ; psns.err
             tskcmd.c       7253          {
             tskcmd.c       7254              result = E_PRES_FAIL;
             tskcmd.c       7255    debug1_flg=0;
    00004720 E200                   MOV         #0,R2      ; H'00000000
    00004722 EA20                   MOV         #32,R10    ; H'00000020
    00004724 D613                   MOV.L       L1381+74,R6; __$debug1_flg
    00004726 A05D                   BRA         L931
    00004728 2622                   MOV.L       R2,@R6     ; debug1_flg
    0000472A              L1381:
    0000472A 00000002               .RES.W      1
    0000472C <00000000>             .DATA.L     __$pProcDat
    00004730 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00004734 <00000001>             .DATA.L     H'00000001+__$psel
    00004738 <00000002>             .DATA.L     H'00000002+__$psns
    0000473C <00000000>             .DATA.L     _IdleBitSet
    00004740 <00000000>             .DATA.L     __$psns
    00004744 <00000000>             .DATA.L     _mbx_send
    00004748 <00000008>             .DATA.L     H'00000008+__$psns
    0000474C <00000000>             .DATA.L     _PressDataGet
    00004750 <00000000>             .DATA.L     __$vout
    00004754 <00000000>             .DATA.L     _pio_BOUT
    00004758 <00000000>             .DATA.L     __$WaitAction
    0000475C <00000022>             .DATA.L     H'00000022+__$psns
    00004760 <0000003C>             .DATA.L     H'0000003C+__$psns
    00004764 <00000000>             .DATA.L     _memcpy
    00004768 <00000006>             .DATA.L     H'00000006+__$psns
    0000476C <00000000>             .DATA.L     __$pProcAdr
    00004770 <00000000>             .DATA.L     __$PressStatus
    00004774 <00000000>             .DATA.L     __$debug1_flg
    00004778              L928:
             tskcmd.c       7256          }
             tskcmd.c       7257          else
             tskcmd.c       7258          {
             tskcmd.c       7259              result = E_SUCCESS;
             tskcmd.c       7260    
             tskcmd.c       7261    debug1_flg=1;
             tskcmd.c       7262          }
             tskcmd.c       7263      }
             tskcmd.c       7264      else
             tskcmd.c       7265      {
             tskcmd.c       7266          PressDataGet( &psns.now[0] );
    00004778 D484                   MOV.L       L992+2,R4  ; H'00000022+__$psns
    0000477A D285                   MOV.L       L992+6,R2  ; _PressDataGet
    0000477C 424B                   JSR/N       @R2
             tskcmd.c       7267    
             tskcmd.c       7268          for( nzl = 0; nzl < NOZZLE_MAX ; nzl++ )
    0000477E D685                   MOV.L       L992+10,R6 ; __$psns
    00004780 6BB2                   MOV.L       @R11,R11   ; pProcAdr
    00004782 E10C                   MOV         #12,R1     ; H'0000000C
    00004784 8561                   MOV.W       @(2,R6),R0 ; psns.suc
    00004786 3BCC                   ADD         R12,R11
    00004788 6861                   MOV.W       @R6,R8     ; psns.idl
    0000478A 6C03                   MOV         R0,R12
    0000478C 8562                   MOV.W       @(4,R6),R0 ; psns.err
    0000478E D782                   MOV.L       L992+14,R7 ; H'0000003C+__$psns
    00004790 7B03                   ADD         #3,R11
    00004792 6903                   MOV         R0,R9
    00004794 DD7D                   MOV.L       L992+2,R13 ; H'00000022+__$psns
    00004796              L932:
             tskcmd.c       7269          {
             tskcmd.c       7270              if( (psns.idl & sftbit) )
    00004796 62ED                   EXTU.W      R14,R2
    00004798 2828                   TST         R2,R8
    0000479A 890F                   BT          L934
             tskcmd.c       7271              {
             tskcmd.c       7272                  wkA = (psns.suc | psns.err);
             tskcmd.c       7273    
             tskcmd.c       7274                  if(( wkA & sftbit))
    0000479C 66C3                   MOV         R12,R6
    0000479E 269B                   OR          R9,R6
    000047A0 2628                   TST         R2,R6
    000047A2 8B0B                   BF          L934
             tskcmd.c       7275                  {
             tskcmd.c       7276                      // エラーもしくは成功済みの場合は、判定不要
             tskcmd.c       7277                  }
             tskcmd.c       7278                  else
             tskcmd.c       7279                  {
             tskcmd.c       7280                      peekdat = psns.now[nzl];
    000047A4 34D19000               MOVU.W      @(0,R13),R4; psns.now[]
    000047A8 D57C                   MOV.L       L992+18,R5 ; __$peekdat
    000047AA 2542                   MOV.L       R4,@R5     ; peekdat
             tskcmd.c       7281                      if( peekdat >= pProcAdr->step[actstep].par04 )  // 加圧ピーク越え
    000047AC 36B18000               MOVU.B      @(0,R11),R6; pProcAdr->step[].par04
    000047B0 3463                   CMP/GE      R6,R4
    000047B2 8B03                   BF          L934
             tskcmd.c       7282                      {
             tskcmd.c       7283                          psns.suc |= sftbit;
    000047B4 2CEB                   OR          R14,R12
             tskcmd.c       7284                          psns.pek[nzl] = peekdat;// 加圧ピーク登録
    000047B6 2741                   MOV.W       R4,@R7     ; psns.pek[]
    000047B8 D579                   MOV.L       L992+22,R5 ; H'00000002+__$psns
    000047BA 25C1                   MOV.W       R12,@R5    ; psns.suc
    000047BC              L934:
             tskcmd.c       7285                      }
             tskcmd.c       7286                  }
             tskcmd.c       7287              }
             tskcmd.c       7288              sftbit = ( sftbit << 1 );
    000047BC 4220                   SHAL        R2
    000047BE 4110                   DT          R1
    000047C0 6E23                   MOV         R2,R14
    000047C2 7702                   ADD         #2,R7
    000047C4 8FE7                   BF/S        L932
    000047C6 7D02                   ADD         #2,R13
             tskcmd.c       7289          }
             tskcmd.c       7290          
             tskcmd.c       7291          wkA = (psns.idl | psns.suc | psns.err);
             tskcmd.c       7292          
             tskcmd.c       7293          if( ( wkA & 0x0fff ) == 0x0fff )    // 全て終了
    000047C8 D772                   MOV.L       L992+10,R7 ; __$psns
    000047CA 6671                   MOV.W       @R7,R6     ; psns.idl
    000047CC 08000FFF               MOVI20      #4095,R8   ; H'00000FFF
    000047D0 26CB                   OR          R12,R6
    000047D2 269B                   OR          R9,R6
    000047D4 2689                   AND         R8,R6
    000047D6 626D                   EXTU.W      R6,R2
    000047D8 3280                   CMP/EQ      R8,R2
    000047DA 8B03                   BF          L931
    000047DC              L930:
    000047DC E201                   MOV         #1,R2      ; H'00000001
    000047DE EA00                   MOV         #0,R10     ; H'00000000
    000047E0 D670                   MOV.L       L992+26,R6 ; __$debug1_flg
    000047E2 2622                   MOV.L       R2,@R6     ; debug1_flg
    000047E4              L931:
             tskcmd.c       7294          {
             tskcmd.c       7295              result = E_SUCCESS;
             tskcmd.c       7296    debug1_flg=1;
             tskcmd.c       7297          }
             tskcmd.c       7298      }
             tskcmd.c       7299      return( result );
    000047E4 60A3                   MOV         R10,R0
    000047E6 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       7300    }
    000047E8 006B                   RTS/N
             tskcmd.c       7301    /***********************************************************************
             tskcmd.c       7302    * 
             tskcmd.c       7303    * [概要]  
             tskcmd.c       7304    * [引数]  
             tskcmd.c       7305    * [戻値]  
             tskcmd.c       7306    * 
             tskcmd.c       7307    ***********************************************************************/
             tskcmd.c       7308    static ER RePressureChk()
    000047EA              __$RePressureChk:                ; function: __$RePressureChk
                                                           ; frame size=44
    000047EA 48F0                   MOVMU.L     R8,@-R15
    000047EC 7FF4                   ADD         #-12,R15
             tskcmd.c       7309    {
             tskcmd.c       7310      ER result = E_CONTINUE;
             tskcmd.c       7311      UB nzl;
             tskcmd.c       7312      UB actstep;
             tskcmd.c       7313      UB spdptn;
             tskcmd.c       7314      unsigned short sftbit = 0x0001;
             tskcmd.c       7315      unsigned short wkA = 0x0000;
             tskcmd.c       7316      unsigned short wkB = 0x0000;
             tskcmd.c       7317      unsigned short wkC = 0x0000;
             tskcmd.c       7318    
             tskcmd.c       7319      if( psns.tcnt >= ( 5 * pProcAdr->step[actstep].par07 ))//  Timeout時間(msec) : Tsec * 1000、Interval:200msec、タイムアウトカウント：1000T/200 = 5T
    000047EE E014                   MOV         #20,R0     ; H'00000014
    000047F0 EAF1                   MOV         #-15,R10   ; H'FFFFFFF1
    000047F2 D16D                   MOV.L       L992+30,R1 ; H'00000006+__$psns
    000047F4 4680                   MULR        R0,R6
    000047F6 35119000               MOVU.W      @(0,R1),R5 ; psns.tcnt
    000047FA D16C                   MOV.L       L992+34,R1 ; __$pProcAdr
    000047FC 6212                   MOV.L       @R1,R2     ; pProcAdr
    000047FE 6AAC                   EXTU.B      R10,R10
    00004800 6B63                   MOV         R6,R11
    00004802 7206                   ADD         #6,R2
    00004804 6063                   MOV         R6,R0
    00004806 022C                   MOV.B       @(R0,R2),R2; pProcAdr->step[].par07
    00004808 E005                   MOV         #5,R0      ; H'00000005
    0000480A 622C                   EXTU.B      R2,R2
    0000480C 4280                   MULR        R0,R2
    0000480E 3523                   CMP/GE      R2,R5
    00004810 8F11                   BF/S        L940
    00004812 EC01                   MOV         #1,R12     ; H'00000001
             tskcmd.c       7320      {
             tskcmd.c       7321          // タイムアウトした場合は、非対象ch・成功ch以外エラー
             tskcmd.c       7322          wkA = ( psns.idl | psns.suc );
             tskcmd.c       7323          wkB = ( wkA      ^ 0x0fff   );
             tskcmd.c       7324          wkC = ( wkB      ^ psns.err );
    00004814 D45F                   MOV.L       L992+10,R4 ; __$psns
    00004816 6241                   MOV.W       @R4,R2     ; psns.idl
    00004818 8541                   MOV.W       @(2,R4),R0 ; psns.suc
    0000481A 06000FFF               MOVI20      #4095,R6   ; H'00000FFF
    0000481E 220B                   OR          R0,R2
    00004820 8542                   MOV.W       @(4,R4),R0 ; psns.err
    00004822 226A                   XOR         R6,R2
    00004824 220A                   XOR         R0,R2
             tskcmd.c       7325          psns.err = wkC;
    00004826 6023                   MOV         R2,R0
             tskcmd.c       7326          
             tskcmd.c       7327          if( ( wkC & 0x0fff ) == 0x0fff )    // 全てエラーは終了
    00004828 2269                   AND         R6,R2
    0000482A 622D                   EXTU.W      R2,R2
    0000482C 3260                   CMP/EQ      R6,R2
    0000482E 8F4E                   BF/S        L942
    00004830 8142                   MOV.W       R0,@(4,R4) ; psns.err
             tskcmd.c       7328          {
             tskcmd.c       7329              result = E_PRES_FAIL;
    00004832 A04D                   BRA         L943
    00004834 EA20                   MOV         #32,R10    ; H'00000020
    00004836              L940:
             tskcmd.c       7330          }
             tskcmd.c       7331          else
             tskcmd.c       7332          {
             tskcmd.c       7333              result = E_SUCCESS;
             tskcmd.c       7334          }
             tskcmd.c       7335      }
             tskcmd.c       7336      else
             tskcmd.c       7337      {
             tskcmd.c       7338          PressDataGet( &psns.now[0] );
    00004836 D455                   MOV.L       L992+2,R4  ; H'00000022+__$psns
    00004838 D555                   MOV.L       L992+6,R5  ; _PressDataGet
    0000483A 454B                   JSR/N       @R5
    0000483C D15B                   MOV.L       L992+34,R1 ; __$pProcAdr
    0000483E 6812                   MOV.L       @R1,R8     ; pProcAdr
    00004840 E70C                   MOV         #12,R7     ; H'0000000C
             tskcmd.c       7339    
             tskcmd.c       7340          for( nzl = 0; nzl < NOZZLE_MAX ; nzl++ )
    00004842 D454                   MOV.L       L992+10,R4 ; __$psns
    00004844 38BC                   ADD         R11,R8
    00004846 8541                   MOV.W       @(2,R4),R0 ; psns.suc
    00004848 6983                   MOV         R8,R9
    0000484A 7905                   ADD         #5,R9
    0000484C 36419000               MOVU.W      @(0,R4),R6 ; psns.idl
    00004850 1F92                   MOV.L       R9,@(8,R15)
    00004852 6903                   MOV         R0,R9
    00004854 8542                   MOV.W       @(4,R4),R0 ; psns.err
    00004856 7807                   ADD         #7,R8
    00004858 2FA2                   MOV.L       R10,@R15
    0000485A 6A63                   MOV         R6,R10
    0000485C 6B03                   MOV         R0,R11
    0000485E 1F61                   MOV.L       R6,@(4,R15)
    00004860 E201                   MOV         #1,R2      ; H'00000001
    00004862 DD4A                   MOV.L       L992+2,R13 ; H'00000022+__$psns
    00004864 DE4C                   MOV.L       L992+14,R14; H'0000003C+__$psns
    00004866              L944:
             tskcmd.c       7341          {
             tskcmd.c       7342              if( (psns.idl & sftbit) )
    00004866 2A28                   TST         R2,R10
    00004868 891C                   BT          L946
             tskcmd.c       7343              {
             tskcmd.c       7344                  wkA = (psns.suc | psns.err);
             tskcmd.c       7345    
             tskcmd.c       7346                  if(!( wkA & sftbit))
    0000486A 64CD                   EXTU.W      R12,R4
    0000486C 6293                   MOV         R9,R2
    0000486E 22BB                   OR          R11,R2
    00004870 2248                   TST         R4,R2
    00004872 8B14                   BF          L948
    00004874 52F2                   MOV.L       @(8,R15),R2
             tskcmd.c       7347                  {
             tskcmd.c       7348                      if( psns.now[nzl] <= pProcAdr->step[actstep].par06 )    // 減圧したか
    00004876 66D1                   MOV.W       @R13,R6    ; psns.now[]
    00004878 35218000               MOVU.B      @(0,R2),R5 ; pProcAdr->step[].par06
    0000487C 3656                   CMP/HI      R5,R6
    0000487E 8903                   BT          L950
             tskcmd.c       7349                      {
             tskcmd.c       7350                          psns.suc |= sftbit;
    00004880 29CB                   OR          R12,R9
    00004882 D247                   MOV.L       L992+22,R2 ; H'00000002+__$psns
    00004884 A00B                   BRA         L948
    00004886 2291                   MOV.W       R9,@R2     ; psns.suc
    00004888              L950:
             tskcmd.c       7351                      }
             tskcmd.c       7352                      else if( (psns.pek[nzl]-psns.now[nzl]) >= pProcAdr->step[actstep].par08 )   // 急激に減圧したか
    00004888 32E19000               MOVU.W      @(0,R14),R2; psns.pek[]
    0000488C 666D                   EXTU.W      R6,R6
    0000488E 35818000               MOVU.B      @(0,R8),R5 ; pProcAdr->step[].par08
    00004892 3268                   SUB         R6,R2
    00004894 3253                   CMP/GE      R5,R2
    00004896 8B02                   BF          L948
             tskcmd.c       7353                      {
             tskcmd.c       7354                          psns.err |= sftbit;
    00004898 2BCB                   OR          R12,R11
    0000489A D245                   MOV.L       L992+38,R2 ; H'00000004+__$psns
    0000489C 22B1                   MOV.W       R11,@R2    ; psns.err
    0000489E              L948:
             tskcmd.c       7355                      }
             tskcmd.c       7356                  }
             tskcmd.c       7357                  sftbit = ( sftbit << 1 );
    0000489E 4420                   SHAL        R4
    000048A0 6C43                   MOV         R4,R12
    000048A2 624D                   EXTU.W      R4,R2
    000048A4              L946:
    000048A4 4710                   DT          R7
    000048A6 7E02                   ADD         #2,R14
    000048A8 8FDD                   BF/S        L944
    000048AA 7D02                   ADD         #2,R13
    000048AC 06000FFF               MOVI20      #4095,R6   ; H'00000FFF
             tskcmd.c       7358              }
             tskcmd.c       7359          }
             tskcmd.c       7360    
             tskcmd.c       7361          if( ( psns.err & 0x0fff ) == 0x0fff )   // 全てエラーは終了
    000048B0 62B3                   MOV         R11,R2
    000048B2 2269                   AND         R6,R2
    000048B4 622D                   EXTU.W      R2,R2
    000048B6 3260                   CMP/EQ      R6,R2
    000048B8 8F01                   BF/S        L954
    000048BA 6AF2                   MOV.L       @R15,R10
             tskcmd.c       7362          {
             tskcmd.c       7363              result = E_SUCCESS;
    000048BC EA00                   MOV         #0,R10     ; H'00000000
    000048BE              L954:
             tskcmd.c       7364          }
             tskcmd.c       7365          
             tskcmd.c       7366          wkA = (psns.idl | psns.suc | psns.err);
             tskcmd.c       7367          if( ( wkA & 0x0fff ) == 0x0fff )        // 全て終了
    000048BE D735                   MOV.L       L992+10,R7 ; __$psns
    000048C0 6571                   MOV.W       @R7,R5     ; psns.idl
    000048C2 259B                   OR          R9,R5
    000048C4 25BB                   OR          R11,R5
    000048C6 2569                   AND         R6,R5
    000048C8 685D                   EXTU.W      R5,R8
    000048CA 3860                   CMP/EQ      R6,R8
    000048CC 8B00                   BF          L943
    000048CE              L942:
    000048CE EA00                   MOV         #0,R10     ; H'00000000
    000048D0              L943:
             tskcmd.c       7368          {
             tskcmd.c       7369              result = E_SUCCESS;
             tskcmd.c       7370          }
             tskcmd.c       7371      }
             tskcmd.c       7372      return( result );
    000048D0 60A3                   MOV         R10,R0
    000048D2 7F0C                   ADD         #12,R15
    000048D4 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       7373    }
    000048D6 006B                   RTS/N
             tskcmd.c       7374    
             tskcmd.c       7375    /***********************************************************************
             tskcmd.c       7376    * 
             tskcmd.c       7377    * [概要]  ウェイト
             tskcmd.c       7378    * [引数]  
             tskcmd.c       7379    * [戻値]  
             tskcmd.c       7380    * 
             tskcmd.c       7381    ***********************************************************************/
             tskcmd.c       7382    static ER  CmdActionWait( T_CMD_MSG* mrcv )
    000048D8              __$CmdActionWait:                ; function: __$CmdActionWait
                                                           ; frame size=8
    000048D8 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       7383    {
             tskcmd.c       7384      ER result = E_CONTINUE;
             tskcmd.c       7385      UB bcid;
             tskcmd.c       7386      UB prid1;
             tskcmd.c       7387      UB actstep;
             tskcmd.c       7388      INT waittim;
             tskcmd.c       7389    
             tskcmd.c       7390      switch( pProcDat->Stp )
    000048DA D736                   MOV.L       L992+42,R7 ; __$pProcDat
    000048DC 6672                   MOV.L       @R7,R6     ; pProcDat
    000048DE EEF1                   MOV         #-15,R14   ; H'FFFFFFF1
    000048E0 30618002               MOVU.B      @(2,R6),R0 ; (pProcDat)->Stp
    000048E4 2008                   TST         R0,R0
    000048E6 8D04                   BT/S        L961
    000048E8 6EEC                   EXTU.B      R14,R14
    000048EA 8801                   CMP/EQ      #1,R0
    000048EC 891F                   BT          L962
    000048EE A01F                   BRA         L963
    000048F0 0009                   NOP
    000048F2              L961:
             tskcmd.c       7391      {
             tskcmd.c       7392      case 0: // 1. ウェイト時間設定後、タイマスタート
             tskcmd.c       7393          bcid    = mrcv->msgdata.bcid;
    000048F2 3541801A               MOVU.B      @(26,R4),R5; (mrcv)->bcid
             tskcmd.c       7394          prid1   = mrcv->msgdata.prid1;
             tskcmd.c       7395          actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       7396          waittim = ( pProcAdr->step[actstep].par03 * 60 * 1000 ) / DLY_10M ;// 10msec周期
             tskcmd.c       7397    
             tskcmd.c       7398          WaitAction( prid1, bcid, waittim );
    000048F6 D230                   MOV.L       L992+46,R2 ; H'00000002+__$bcctrl
    000048F8 6053                   MOV         R5,R0
    000048FA 4008                   SHLL2       R0
    000048FC 4000                   SHLL        R0
    000048FE 012C                   MOV.B       @(R0,R2),R1; bcctrl[].actstp
    00004900 E014                   MOV         #20,R0     ; H'00000014
    00004902 D72A                   MOV.L       L992+34,R7 ; __$pProcAdr
    00004904 71FF                   ADD         #-1,R1
    00004906 6272                   MOV.L       @R7,R2     ; pProcAdr
    00004908 611C                   EXTU.B      R1,R1
    0000490A 4180                   MULR        R0,R1
    0000490C 7202                   ADD         #2,R2
    0000490E 34414018               MOV.B       @(24:12,R4),R4; (mrcv)->prid1
    00004912 6013                   MOV         R1,R0
    00004914 022C                   MOV.B       @(R0,R2),R2; pProcAdr->step[].par03
    00004916 00001770               MOVI20      #6000,R0   ; H'00001770
    0000491A 662C                   EXTU.B      R2,R6
    0000491C D327                   MOV.L       L992+50,R3 ; __$WaitAction
    0000491E 430B                   JSR         @R3
    00004920 4680                   MULR        R0,R6
             tskcmd.c       7399          pProcDat->Stp++;
    00004922 D424                   MOV.L       L992+42,R4 ; __$pProcDat
    00004924 6142                   MOV.L       @R4,R1     ; pProcDat
    00004926 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00004928 7001                   ADD         #1,R0
    0000492A A001                   BRA         L963
    0000492C 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    0000492E              L962:
             tskcmd.c       7400          break;
             tskcmd.c       7401    
             tskcmd.c       7402      case 1: // 2. ウェイト終了待ち
             tskcmd.c       7403          result = E_SUCCESS;
    0000492E EE00                   MOV         #0,R14     ; H'00000000
    00004930              L963:
             tskcmd.c       7404          break;
             tskcmd.c       7405      }
             tskcmd.c       7406      return( result );
    00004930 60E3                   MOV         R14,R0
    00004932 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       7407    }
    00004934 006B                   RTS/N
             tskcmd.c       7408    /***********************************************************************
             tskcmd.c       7409    * 
             tskcmd.c       7410    * [概要]  攪拌
             tskcmd.c       7411    * [引数]  
             tskcmd.c       7412    * [戻値]  
             tskcmd.c       7413    * 
             tskcmd.c       7414    
             tskcmd.c       7415    
             tskcmd.c       7416    // 3．分注Z軸｢撹拌吸引高さ｣位置移動
             tskcmd.c       7417    // 4．撹拌容量＋余剰量分（初回のみ）を吸引と同時に分注Z軸を下降させる。
             tskcmd.c       7418    // 5．吸引後ウェイト
             tskcmd.c       7419    // 6．現在の分注Z軸位置から撹拌容量を吐出と同時に分注Z軸上昇させる。
             tskcmd.c       7420    // 7．撹拌容量を吐出　※攪拌最終回の吐出時のみ余剰量分も含め吐出
             tskcmd.c       7421    // 8．吐出後ウェイト
             tskcmd.c       7422    // 9．｢4〜8｣を設定回数繰り返す
             tskcmd.c       7423    // 10．分注Z軸ブローアウト高さ位置移動
             tskcmd.c       7424    // 11．ポンプリセット
             tskcmd.c       7425    // 12．分注Z軸チップタッチ位置移動  (チップタッチ有り)
             tskcmd.c       7426    // 13．分注Z軸ホームポジション移動
             tskcmd.c       7427    //***********************************************************************/
             tskcmd.c       7428    
             tskcmd.c       7429    static ER  CmdActionMix( T_CMD_MSG* mrcv )
    00004936              __$CmdActionMix:                 ; function: __$CmdActionMix
                                                           ; frame size=400
    00004936 49F0                   MOVMU.L     R9,@-R15
    00004938 03F0FEAC               MOVI20      #-340,R3   ; H'FFFFFEAC
    0000493C 3F3C                   ADD         R3,R15
             tskcmd.c       7430    {
             tskcmd.c       7431      ST_HOSEI_PTN *adr;
             tskcmd.c       7432      ER result = E_CONTINUE;
    0000493E E149                   MOV         #73,R1     ; H'00000049
    00004940 EDF1                   MOV         #-15,R13   ; H'FFFFFFF1
    00004942 4108                   SHLL2       R1
    00004944 E70F                   MOV         #15,R7     ; H'0000000F
             tskcmd.c       7433      INT tskid;
             tskcmd.c       7434      UB prid1;
             tskcmd.c       7435      UB bcid;
             tskcmd.c       7436      UB msgid;
             tskcmd.c       7437      UB inf1;
             tskcmd.c       7438      UB inf2;
             tskcmd.c       7439      UB actstep;
             tskcmd.c       7440      UB spdptn;
             tskcmd.c       7441      UB devno;
             tskcmd.c       7442      UB movptn;
             tskcmd.c       7443      UB dummy;
             tskcmd.c       7444      unsigned short cntwk;
             tskcmd.c       7445      INT movval;
             tskcmd.c       7446      INT value;
             tskcmd.c       7447    
             tskcmd.c       7448      UB  z_sucdn;// par4  bit7〜bit4：[Z]吸引下降速度パターン
             tskcmd.c       7449      UB  p_sucsp;// par4  bit3〜bit0：[P]吸引速度パターン
             tskcmd.c       7450      UB  z_sucup;// par5  bit7〜bit4：[Z]吐出上昇速度パターン
             tskcmd.c       7451      UB  p_putsp;// par5  bit3〜bit0：[P]吐出速度パターン
             tskcmd.c       7452      UB  staposi;// par6  [Z]攪拌開始位置ポジション番号
             tskcmd.c       7453      UB  endposi;// par7  [Z]攪拌終了位置ポジション番号
             tskcmd.c       7454      INT mixcnt; // par1  bit5〜bit0：攪拌回数
             tskcmd.c       7455      INT zancnt;
             tskcmd.c       7456      INT stahei;// par6   [Z]攪拌開始位置
             tskcmd.c       7457      INT endhei;// par7   [Z]攪拌終了位置
             tskcmd.c       7458      INT sucval;// par13  [P}吸引量
             tskcmd.c       7459      INT putval;// par14  [P}吐出量
             tskcmd.c       7460      
             tskcmd.c       7461      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       7462      bcid  = mrcv->msgdata.bcid;
    00004946 3541801A               MOVU.B      @(26,R4),R5; (mrcv)->bcid
    0000494A 31FC                   ADD         R15,R1
    0000494C 6DDC                   EXTU.B      R13,R13
    0000494E 6053                   MOV         R5,R0
    00004950 8018                   MOV.B       R0,@(8,R1) ; bcid
    00004952 4008                   SHLL2       R0
    00004954 2142                   MOV.L       R4,@R1     ; mrcv
             tskcmd.c       7463      inf1  = mrcv->msgdata.inf;
             tskcmd.c       7464      inf2  = mrcv->msgdata.inf2;
             tskcmd.c       7465      actstep = bcctrl[bcid].actstp - 1 ;
    00004956 D918                   MOV.L       L992+46,R9 ; H'00000002+__$bcctrl
    00004958 4000                   SHLL        R0
    0000495A 11D1                   MOV.L       R13,@(4,R1); result
    0000495C 019C                   MOV.B       @(R0,R9),R1; bcctrl[].actstp
             tskcmd.c       7466      
             tskcmd.c       7467      switch( pProcDat->Stp )
    0000495E D915                   MOV.L       L992+42,R9 ; __$pProcDat
    00004960 6692                   MOV.L       @R9,R6     ; pProcDat
    00004962 71FF                   ADD         #-1,R1
    00004964 3A418018               MOVU.B      @(24,R4),R10; (mrcv)->prid1
    00004968 36618002               MOVU.B      @(2,R6),R6 ; (pProcDat)->Stp
    0000496C 3B41801C               MOVU.B      @(28,R4),R11; (mrcv)->inf
    00004970 3676                   CMP/HI      R7,R6
    00004972 6E1C                   EXTU.B      R1,R14
    00004974 3C41801D               MOVU.B      @(29,R4),R12; (mrcv)->inf2
    00004978 8F02                   BF/S        L1412
    0000497A 6263                   MOV         R6,R2
    0000497C A47A                   BRA         L991
    0000497E 0009                   NOP
    00004980              L1412:
    00004980 4600                   SHLL        R6
    00004982 C70F                   MOVA        L993,R0
    00004984 006D                   MOV.W       @(R0,R6),R0
    00004986 0023                   BRAF        R0
    00004988 0009                   NOP
    0000498A              L992:
    0000498A 00000002               .RES.W      1
    0000498C <00000022>             .DATA.L     H'00000022+__$psns
    00004990 <00000000>             .DATA.L     _PressDataGet
    00004994 <00000000>             .DATA.L     __$psns
    00004998 <0000003C>             .DATA.L     H'0000003C+__$psns
    0000499C <00000000>             .DATA.L     __$peekdat
    000049A0 <00000002>             .DATA.L     H'00000002+__$psns
    000049A4 <00000000>             .DATA.L     __$debug1_flg
    000049A8 <00000006>             .DATA.L     H'00000006+__$psns
    000049AC <00000000>             .DATA.L     __$pProcAdr
    000049B0 <00000004>             .DATA.L     H'00000004+__$psns
    000049B4 <00000000>             .DATA.L     __$pProcDat
    000049B8 <00000002>             .DATA.L     H'00000002+__$bcctrl
    000049BC <00000000>             .DATA.L     __$WaitAction
    000049C0              L993:
    000049C0 0056                   .DATA.W     L966-L992
    000049C2 0082                   .DATA.W     L967-L992
    000049C4 0124                   .DATA.W     L968-L992
    000049C6 0188                   .DATA.W     L969-L992
    000049C8 0260                   .DATA.W     L970-L992
    000049CA 03A6                   .DATA.W     L971-L992
    000049CC 0532                   .DATA.W     L972-L992
    000049CE 0570                   .DATA.W     L973-L992
    000049D0 0702                   .DATA.W     L974-L992
    000049D2 0742                   .DATA.W     L975-L992
    000049D4 0838                   .DATA.W     L982-L992
    000049D6 07A4                   .DATA.W     L983-L992
    000049D8 078E                   .DATA.W     L984-L992
    000049DA 0798                   .DATA.W     L985-L992
    000049DC 08BA                   .DATA.W     L986-L992
    000049DE 0784                   .DATA.W     L987-L992
    000049E0              L966:
             tskcmd.c       7468      {
             tskcmd.c       7469      case 0: // [攪拌処理] 
             tskcmd.c       7470          z_sucdn = ((pProcAdr->step[actstep].par05 >> 4) & 0x0f);
             tskcmd.c       7471          p_sucsp = ((pProcAdr->step[actstep].par05 >> 0) & 0x0f);
             tskcmd.c       7472          z_sucup = ((pProcAdr->step[actstep].par05 >> 4) & 0x0f);
             tskcmd.c       7473          p_putsp = ((pProcAdr->step[actstep].par05 >> 0) & 0x0f);
             tskcmd.c       7474          stahei  = GetPosiData( pProcAdr->step[actstep].par07 );
    000049E0 E014                   MOV         #20,R0     ; H'00000014
    000049E2 4E80                   MULR        R0,R14
    000049E4 DABC                   MOV.L       L1382,R10  ; __$pProcAdr
    000049E6 64A2                   MOV.L       @R10,R4    ; pProcAdr
             tskcmd.c       7475          endhei  = GetPosiData( pProcAdr->step[actstep].par08 );
    000049E8 DBBB                   MOV.L       L1382,R11  ; __$pProcAdr
    000049EA 7406                   ADD         #6,R4
    000049EC 60E3                   MOV         R14,R0
    000049EE 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par07
    000049F0 3FE1204C               MOV.L       R14,@(304:12,R15)
    000049F4 D3B9                   MOV.L       L1382+4,R3 ; __$GetPosiData
    000049F6 434B                   JSR/N       @R3
    000049F8 64B2                   MOV.L       @R11,R4    ; pProcAdr
    000049FA 60E3                   MOV         R14,R0
    000049FC 7407                   ADD         #7,R4
    000049FE D3B7                   MOV.L       L1382+4,R3 ; __$GetPosiData
    00004A00 430B                   JSR         @R3
    00004A02 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par08
             tskcmd.c       7476          sucval  = pProcAdr->step[actstep].par13;
             tskcmd.c       7477          putval  = pProcAdr->step[actstep].par14;
             tskcmd.c       7478          
             tskcmd.c       7479          pProcDat->Stp++;
    00004A04 6692                   MOV.L       @R9,R6     ; pProcDat
    00004A06 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004A08 7001                   ADD         #1,R0
    00004A0A 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004A0C              L967:
    00004A0C DEB4                   MOV.L       L1382+8,R14; H'00000006+__$SpPtn
    00004A0E 31E18000               MOVU.B      @(0,R14),R1; SpPtn.Z0_SpdNmlPtn
    00004A12 E00C                   MOV         #12,R0     ; H'0000000C
    00004A14 4180                   MULR        R0,R1
             tskcmd.c       7480          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7481          
             tskcmd.c       7482          
             tskcmd.c       7483      case 1:// [攪拌処理] 1．ブローアウトエア高さ（退避高さ）移動
             tskcmd.c       7484          MAC_SPEED_SET( MT_Z0, 
    00004A16 DCB3                   MOV.L       L1382+12,R12; H'00000078+__$Sp
    00004A18 DEB3                   MOV.L       L1382+16,R14; __$Sp
    00004A1A 6013                   MOV         R1,R0
    00004A1C 04CD                   MOV.W       @(R0,R12),R4; Sp[].ac
    00004A1E EC00                   MOV         #0,R12     ; H'00000000
    00004A20 3F411002               MOV.W       R4,@(4:12,R15); mp.accel_type
    00004A24 E403                   MOV         #3,R4      ; H'00000003
    00004A26 D5B1                   MOV.L       L1382+20,R5; _GetFactor
    00004A28 450B                   JSR         @R5
    00004A2A 1FC6                   MOV.L       R12,@(24,R15); mp.us
    00004A2C D1AC                   MOV.L       L1382+8,R1 ; H'00000006+__$SpPtn
    00004A2E 32118000               MOVU.B      @(0,R1),R2 ; SpPtn.Z0_SpdNmlPtn
    00004A32 2F02                   MOV.L       R0,@R15    ; mp.factor
    00004A34 E00C                   MOV         #12,R0     ; H'0000000C
    00004A36 4280                   MULR        R0,R2
    00004A38 1FC7                   MOV.L       R12,@(28,R15); mp.ds
    00004A3A 32EC                   ADD         R14,R2
    00004A3C 3721601F               MOV.L       @(124:12,R2),R7; Sp[].fl
    00004A40 3A216020               MOV.L       @(128:12,R2),R10; Sp[].fh
    00004A44 3B21903D               MOVU.W      @(122,R2),R11; Sp[].gl
    00004A48 1F72                   MOV.L       R7,@(8,R15); mp.FL
    00004A4A 1FA3                   MOV.L       R10,@(12,R15); mp.FH
    00004A4C 1FB4                   MOV.L       R11,@(16,R15); mp.utime
    00004A4E 1FB5                   MOV.L       R11,@(20,R15); mp.dtime
    00004A50 7FE0                   ADD         #-32,R15
    00004A52 6CF3                   MOV         R15,R12
    00004A54 7C20                   ADD         #32,R12
    00004A56 55C2                   MOV.L       @(8,R12),R5; (part of)mp
    00004A58 57C4                   MOV.L       @(16,R12),R7; (part of)mp
    00004A5A 6EC2                   MOV.L       @R12,R14   ; (part of)mp
    00004A5C 54C1                   MOV.L       @(4,R12),R4; (part of)mp
    00004A5E 51C3                   MOV.L       @(12,R12),R1; (part of)mp
    00004A60 1F52                   MOV.L       R5,@(8,R15)
    00004A62 55C5                   MOV.L       @(20,R12),R5; (part of)mp
    00004A64 1F74                   MOV.L       R7,@(16,R15)
    00004A66 57C6                   MOV.L       @(24,R12),R7; (part of)mp
    00004A68 5AC7                   MOV.L       @(28,R12),R10; (part of)mp
    00004A6A 2FE2                   MOV.L       R14,@R15
    00004A6C 1F41                   MOV.L       R4,@(4,R15)
    00004A6E 1F13                   MOV.L       R1,@(12,R15)
    00004A70 1F55                   MOV.L       R5,@(20,R15)
    00004A72 1F76                   MOV.L       R7,@(24,R15)
    00004A74 1FA7                   MOV.L       R10,@(28,R15)
    00004A76 DA9E                   MOV.L       L1382+24,R10; _motor_SET
    00004A78 4A0B                   JSR         @R10
    00004A7A E402                   MOV         #2,R4      ; H'00000002
    00004A7C 7F20                   ADD         #32,R15
             tskcmd.c       7485                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].ac, 
             tskcmd.c       7486                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fl, 
             tskcmd.c       7487                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fh, 
             tskcmd.c       7488                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].gl );
             tskcmd.c       7489    
             tskcmd.c       7490          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, BkP7.Z0_Taihi );
    00004A7E D29D                   MOV.L       L1382+28,R2; H'00000018+__$BkP7
    00004A80 6B22                   MOV.L       @R2,R11    ; BkP7.Z0_Taihi
    00004A82 2FB6                   MOV.L       R11,@-R15
    00004A84 E700                   MOV         #0,R7      ; H'00000000
    00004A86 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00004A8A E602                   MOV         #2,R6      ; H'00000002
    00004A8C D39A                   MOV.L       L1382+32,R3; __$AbsmvAction
    00004A8E 430B                   JSR         @R3
    00004A90 E451                   MOV         #81,R4     ; H'00000051
    00004A92 6203                   MOV         R0,R2
    00004A94 7F04                   ADD         #4,R15
    00004A96 6603                   MOV         R0,R6
    00004A98 E04A                   MOV         #74,R0     ; H'0000004A
    00004A9A 4008                   SHLL2       R0
             tskcmd.c       7491          if( result == E_SUCCESS ) result = E_CONTINUE;
    00004A9C 2228                   TST         R2,R2
    00004A9E 8F01                   BF/S        L997
    00004AA0 0F66                   MOV.L       R6,@(R0,R15); result
    00004AA2 0FD6                   MOV.L       R13,@(R0,R15); result
    00004AA4              L997:
             tskcmd.c       7492          pProcDat->Stp++;
    00004AA4 6692                   MOV.L       @R9,R6     ; pProcDat
    00004AA6 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004AA8 7001                   ADD         #1,R0
    00004AAA A3E3                   BRA         L991
    00004AAC 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004AAE              L968:
    00004AAE D593                   MOV.L       L1382+36,R5; H'00000001+__$psel
             tskcmd.c       7493          break;
             tskcmd.c       7494    
             tskcmd.c       7495      case 2:// [攪拌処理] 2．圧力基板制御：未指定のノズルチャンネルの電磁弁をONにする
             tskcmd.c       7496          psns.suc  = 0;
    00004AB0 E000                   MOV         #0,R0      ; H'00000000
    00004AB2 6450                   MOV.B       @R5,R4     ; psel.smp
    00004AB4 D792                   MOV.L       L1382+40,R7; H'00000002+__$psns
             tskcmd.c       7497          psns.idl  = IdleBitSet(psel.smp);
    00004AB6 DE93                   MOV.L       L1382+44,R14; _IdleBitSet
    00004AB8 4E0B                   JSR         @R14
    00004ABA 2701                   MOV.W       R0,@R7     ; psns.suc
    00004ABC DD92                   MOV.L       L1382+48,R13; __$psns
    00004ABE 2D01                   MOV.W       R0,@R13    ; psns.idl
             tskcmd.c       7498          psns.tcnt = 0;
    00004AC0 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       7499    
             tskcmd.c       7500    //        memcpy( &psns.pre[0], &psns.now[0], (NOZZLE_MAX*2) );
             tskcmd.c       7501          vout.target = 0x0fff;
    00004AC2 01000FFF               MOVI20      #4095,R1   ; H'00000FFF
    00004AC6 DE91                   MOV.L       L1382+52,R14; __$vout
    00004AC8 81D3                   MOV.W       R0,@(6,R13); psns.tcnt
    00004ACA 2E11                   MOV.W       R1,@R14    ; vout.target
    00004ACC 3F11109A               MOV.W       R1,@(308:12,R15)
             tskcmd.c       7502          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
    00004AD0 D38F                   MOV.L       L1382+56,R3; __$NzlTargetGet
    00004AD2 434B                   JSR/N       @R3
    00004AD4 6403                   MOV         R0,R4
             tskcmd.c       7503          
             tskcmd.c       7504          mbx_send    (
             tskcmd.c       7505                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7506                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7507                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7508                          prid1,               // prid1
             tskcmd.c       7509                          bcid,                // bcid
             tskcmd.c       7510                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       7511                          inf1,                // sts
             tskcmd.c       7512                          inf2,                // sts2
             tskcmd.c       7513                          (UB *)&vout.target,  // data
             tskcmd.c       7514                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7515                      );
    00004AD6 E704                   MOV         #4,R7      ; H'00000004
    00004AD8 30F1509A               MOV.W       @(308:12,R15),R0
    00004ADC D18D                   MOV.L       L1382+60,R1; H'00000002+__$vout
    00004ADE 204A                   XOR         R4,R0
    00004AE0 2101                   MOV.W       R0,@R1     ; vout.valout
    00004AE2 2F76                   MOV.L       R7,@-R15
    00004AE4 DD89                   MOV.L       L1382+52,R13; __$vout
    00004AE6 2FD6                   MOV.L       R13,@-R15
    00004AE8 2FC6                   MOV.L       R12,@-R15
    00004AEA 2FB6                   MOV.L       R11,@-R15
    00004AEC EB9B                   MOV         #-101,R11  ; H'FFFFFF9B
    00004AEE 6BBC                   EXTU.B      R11,R11
    00004AF0 2FB6                   MOV.L       R11,@-R15
    00004AF2 7FFC                   ADD         #-4,R15
    00004AF4 E60D                   MOV         #13,R6     ; H'0000000D
    00004AF6 32F18144               MOVU.B      @(324,R15),R2; bcid
    00004AFA E50C                   MOV         #12,R5     ; H'0000000C
    00004AFC 6463                   MOV         R6,R4
    00004AFE 2F22                   MOV.L       R2,@R15
    00004B00 D285                   MOV.L       L1382+64,R2; _mbx_send
    00004B02 420B                   JSR         @R2
    00004B04 67A3                   MOV         R10,R7
    00004B06 7F18                   ADD         #24,R15
             tskcmd.c       7516          pProcDat->Stp++;
    00004B08 6C92                   MOV.L       @R9,R12    ; pProcDat
    00004B0A 84C2                   MOV.B       @(2,R12),R0; (pProcDat)->Stp
    00004B0C 7001                   ADD         #1,R0
    00004B0E A3B1                   BRA         L991
    00004B10 80C2                   MOV.B       R0,@(2,R12); (pProcDat)->Stp
    00004B12              L969:
             tskcmd.c       7517          break;
             tskcmd.c       7518          
             tskcmd.c       7519      case 3:// [攪拌処理] 3．P軸ブローアウトエア吸引速度設定
             tskcmd.c       7520          // ブローアウトエア吸引
             tskcmd.c       7521          devno  = MT_P0;
             tskcmd.c       7522          spdptn = SpPtn.P0_SpdMovAirS;
    00004B12 D782                   MOV.L       L1382+68,R7; H'0000000A+__$SpPtn
    00004B14 6070                   MOV.B       @R7,R0     ; SpPtn.P0_SpdMovAirS
    00004B16 3F010138               MOV.B       R0,@(312:12,R15); spdptn
             tskcmd.c       7523          MAC_SPEED_SET( devno, 
    00004B1A 610C                   EXTU.B      R0,R1
    00004B1C E00C                   MOV         #12,R0     ; H'0000000C
    00004B1E 4180                   MULR        R0,R1
    00004B20 6013                   MOV         R1,R0
    00004B22 D17F                   MOV.L       L1382+72,R1; H'000000B4+__$Sp
    00004B24 041D                   MOV.W       @(R0,R1),R4; Sp[].ac
    00004B26 3F411012               MOV.W       R4,@(36:12,R15); mp.accel_type
    00004B2A D570                   MOV.L       L1382+20,R5; _GetFactor
    00004B2C 450B                   JSR         @R5
    00004B2E E403                   MOV         #3,R4      ; H'00000003
    00004B30 35F18138               MOVU.B      @(312,R15),R5; spdptn
    00004B34 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00004B36 E00C                   MOV         #12,R0     ; H'0000000C
    00004B38 4580                   MULR        R0,R5
    00004B3A D16B                   MOV.L       L1382+16,R1; __$Sp
    00004B3C 351C                   ADD         R1,R5
    00004B3E 3651602E               MOV.L       @(184:12,R5),R6; Sp[].fl
    00004B42 3151602F               MOV.L       @(188:12,R5),R1; Sp[].fh
    00004B46 3451905B               MOVU.W      @(182,R5),R4; Sp[].gl
    00004B4A E500                   MOV         #0,R5      ; H'00000000
    00004B4C 1F6A                   MOV.L       R6,@(40,R15); mp.FL
    00004B4E 1F1B                   MOV.L       R1,@(44,R15); mp.FH
    00004B50 1F4C                   MOV.L       R4,@(48,R15); mp.utime
    00004B52 1F4D                   MOV.L       R4,@(52,R15); mp.dtime
    00004B54 1F5E                   MOV.L       R5,@(56,R15); mp.us
    00004B56 1F5F                   MOV.L       R5,@(60,R15); mp.ds
    00004B58 7FE0                   ADD         #-32,R15
    00004B5A 65F3                   MOV         R15,R5
    00004B5C 7540                   ADD         #64,R5
    00004B5E 6752                   MOV.L       @R5,R7     ; (part of)mp
    00004B60 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00004B62 2F72                   MOV.L       R7,@R15
    00004B64 5752                   MOV.L       @(8,R5),R7 ; (part of)mp
    00004B66 5451                   MOV.L       @(4,R5),R4 ; (part of)mp
    00004B68 5153                   MOV.L       @(12,R5),R1; (part of)mp
    00004B6A 1F72                   MOV.L       R7,@(8,R15)
    00004B6C 5755                   MOV.L       @(20,R5),R7; (part of)mp
    00004B6E 1F24                   MOV.L       R2,@(16,R15)
    00004B70 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00004B72 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00004B74 1F41                   MOV.L       R4,@(4,R15)
    00004B76 1F13                   MOV.L       R1,@(12,R15)
    00004B78 1F75                   MOV.L       R7,@(20,R15)
    00004B7A 1F66                   MOV.L       R6,@(24,R15)
    00004B7C 1F27                   MOV.L       R2,@(28,R15)
    00004B7E D25C                   MOV.L       L1382+24,R2; _motor_SET
    00004B80 420B                   JSR         @R2
    00004B82 E403                   MOV         #3,R4      ; H'00000003
    00004B84 7F20                   ADD         #32,R15
             tskcmd.c       7524                         Sp[devno][spdptn].ac, 
             tskcmd.c       7525                         Sp[devno][spdptn].fl, 
             tskcmd.c       7526                         Sp[devno][spdptn].fh, 
             tskcmd.c       7527                         Sp[devno][spdptn].gl );
             tskcmd.c       7528          value = BlowoutAirValue( (ST_HOSEI_PTN *)&pProcAdr->step[actstep] );
    00004B86 E014                   MOV         #20,R0     ; H'00000014
    00004B88 4E80                   MULR        R0,R14
    00004B8A D253                   MOV.L       L1382,R2   ; __$pProcAdr
    00004B8C 6422                   MOV.L       @R2,R4     ; pProcAdr
    00004B8E D365                   MOV.L       L1382+76,R3; __$BlowoutAirValue
    00004B90 430B                   JSR         @R3
    00004B92 34EC                   ADD         R14,R4
             tskcmd.c       7529          result = RelmvAction( ID_TPL_PRTCL, bcid, MT_P0, REQ_STAUD, value );
    00004B94 2F06                   MOV.L       R0,@-R15
    00004B96 E700                   MOV         #0,R7      ; H'00000000
    00004B98 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00004B9C E451                   MOV         #81,R4     ; H'00000051
    00004B9E D362                   MOV.L       L1382+80,R3; __$RelmvAction
    00004BA0 430B                   JSR         @R3
    00004BA2 E603                   MOV         #3,R6      ; H'00000003
    00004BA4 6E03                   MOV         R0,R14
    00004BA6 7F04                   ADD         #4,R15
    00004BA8 6603                   MOV         R0,R6
    00004BAA E04A                   MOV         #74,R0     ; H'0000004A
    00004BAC 4008                   SHLL2       R0
             tskcmd.c       7530          if( result == E_SUCCESS ) result = E_CONTINUE;
    00004BAE 2EE8                   TST         R14,R14
    00004BB0 8F01                   BF/S        L1001
    00004BB2 0F66                   MOV.L       R6,@(R0,R15); result
    00004BB4 0FD6                   MOV.L       R13,@(R0,R15); result
    00004BB6              L1001:
             tskcmd.c       7531    
             tskcmd.c       7532          mbx_send    (
             tskcmd.c       7533                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7534                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7535                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7536                          prid1,               // prid1
             tskcmd.c       7537                          bcid,                // bcid
             tskcmd.c       7538                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7539                          inf1,                // sts
             tskcmd.c       7540                          inf2,                // sts2
             tskcmd.c       7541                          &dummy,              // data
             tskcmd.c       7542                          sizeof( dummy )      // siz
             tskcmd.c       7543                      );
    00004BB6 E701                   MOV         #1,R7      ; H'00000001
    00004BB8 2F76                   MOV.L       R7,@-R15
    00004BBA 6DF3                   MOV         R15,R13
    00004BBC 7D44                   ADD         #68,R13
    00004BBE 2FD6                   MOV.L       R13,@-R15
    00004BC0 2FC6                   MOV.L       R12,@-R15
    00004BC2 2FB6                   MOV.L       R11,@-R15
    00004BC4 E299                   MOV         #-103,R2   ; H'FFFFFF99
    00004BC6 622C                   EXTU.B      R2,R2
    00004BC8 2F26                   MOV.L       R2,@-R15
    00004BCA 7FFC                   ADD         #-4,R15
    00004BCC E60D                   MOV         #13,R6     ; H'0000000D
    00004BCE 31F18144               MOVU.B      @(324,R15),R1; bcid
    00004BD2 E50C                   MOV         #12,R5     ; H'0000000C
    00004BD4 6463                   MOV         R6,R4
    00004BD6 2F12                   MOV.L       R1,@R15
    00004BD8 DE4F                   MOV.L       L1382+64,R14; _mbx_send
    00004BDA 4E0B                   JSR         @R14
    00004BDC 67A3                   MOV         R10,R7
    00004BDE 7F18                   ADD         #24,R15
             tskcmd.c       7544          pProcDat->Stp++;
    00004BE0 6492                   MOV.L       @R9,R4     ; pProcDat
    00004BE2 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    00004BE4 7001                   ADD         #1,R0
    00004BE6 A345                   BRA         L991
    00004BE8 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00004BEA              L970:
             tskcmd.c       7545          break;
             tskcmd.c       7546          
             tskcmd.c       7547      case 4: // [攪拌処理]  4．分注Z軸｢撹拌吸引高さ｣位置移動
             tskcmd.c       7548          if( tskid == ID_TSK_PUNIT )
    00004BEA 6063                   MOV         R6,R0
    00004BEC 880D                   CMP/EQ      #13,R0
    00004BEE 8B12                   BF          L1004
             tskcmd.c       7549          {
             tskcmd.c       7550              // ★圧力監視記述
             tskcmd.c       7551              
             tskcmd.c       7552              
             tskcmd.c       7553              mbx_send    (
             tskcmd.c       7554                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7555                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7556                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7557                              prid1,               // prid1
             tskcmd.c       7558                              bcid,                // bcid
             tskcmd.c       7559                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7560                              inf1,                // sts
             tskcmd.c       7561                              inf2,                // sts2
             tskcmd.c       7562                              &dummy,              // data
             tskcmd.c       7563                              sizeof( dummy )      // siz
             tskcmd.c       7564                          );
    00004BF0 E601                   MOV         #1,R6      ; H'00000001
    00004BF2 2F66                   MOV.L       R6,@-R15
    00004BF4 67F3                   MOV         R15,R7
    00004BF6 7744                   ADD         #68,R7
    00004BF8 2F76                   MOV.L       R7,@-R15
    00004BFA 2FC6                   MOV.L       R12,@-R15
    00004BFC 2FB6                   MOV.L       R11,@-R15
    00004BFE EB99                   MOV         #-103,R11  ; H'FFFFFF99
    00004C00 6BBC                   EXTU.B      R11,R11
    00004C02 2FB6                   MOV.L       R11,@-R15
    00004C04 2F56                   MOV.L       R5,@-R15
    00004C06 E60D                   MOV         #13,R6     ; H'0000000D
    00004C08 E50C                   MOV         #12,R5     ; H'0000000C
    00004C0A 6463                   MOV         R6,R4
    00004C0C D942                   MOV.L       L1382+64,R9; _mbx_send
    00004C0E 490B                   JSR         @R9
    00004C10 67A3                   MOV         R10,R7
    00004C12 A32F                   BRA         L991
    00004C14 7F18                   ADD         #24,R15
    00004C16              L1004:
             tskcmd.c       7565          }
             tskcmd.c       7566          else
             tskcmd.c       7567          {
             tskcmd.c       7568              devno  = MT_Z0;
             tskcmd.c       7569              spdptn = (pProcAdr->step[actstep].par04 >> 4);
    00004C16 E014                   MOV         #20,R0     ; H'00000014
    00004C18 E403                   MOV         #3,R4      ; H'00000003
    00004C1A 4E80                   MULR        R0,R14
             tskcmd.c       7570              MAC_SPEED_SET( devno, 
    00004C1C D72E                   MOV.L       L1382,R7   ; __$pProcAdr
    00004C1E 6B72                   MOV.L       @R7,R11    ; pProcAdr
    00004C20 D131                   MOV.L       L1382+16,R1; __$Sp
    00004C22 7B03                   ADD         #3,R11
    00004C24 60E3                   MOV         R14,R0
    00004C26 0BBC                   MOV.B       @(R0,R11),R11; pProcAdr->step[].par04
    00004C28 E00C                   MOV         #12,R0     ; H'0000000C
    00004C2A 3FE1204C               MOV.L       R14,@(304:12,R15)
    00004C2E 6CBC                   EXTU.B      R11,R12
    00004C30 EEFC                   MOV         #-4,R14    ; H'FFFFFFFC
    00004C32 4CEC                   SHAD        R14,R12
    00004C34 6CCC                   EXTU.B      R12,R12
    00004C36 4C80                   MULR        R0,R12
    00004C38 3C1C                   ADD         R1,R12
    00004C3A 3FC1204F               MOV.L       R12,@(316:12,R15)
    00004C3E 3CC1503C               MOV.W       @(120:12,R12),R12; Sp[].ac
    00004C42 DE2A                   MOV.L       L1382+20,R14; _GetFactor
    00004C44 4E0B                   JSR         @R14
    00004C46 EA00                   MOV         #0,R10     ; H'00000000
    00004C48 31F1604F               MOV.L       @(316:12,R15),R1
    00004C4C E344                   MOV         #68,R3     ; H'00000044
    00004C4E 3411601F               MOV.L       @(124:12,R1),R4; Sp[].fl
    00004C52 35116020               MOV.L       @(128:12,R1),R5; Sp[].fh
    00004C56 3711903D               MOVU.W      @(122,R1),R7; Sp[].gl
    00004C5A 33FC                   ADD         R15,R3
    00004C5C 3FC11024               MOV.W       R12,@(72:12,R15); mp.accel_type
    00004C60 2302                   MOV.L       R0,@R3     ; mp.factor
    00004C62 1342                   MOV.L       R4,@(8,R3) ; mp.FL
    00004C64 1353                   MOV.L       R5,@(12,R3); mp.FH
    00004C66 1374                   MOV.L       R7,@(16,R3); mp.utime
    00004C68 1375                   MOV.L       R7,@(20,R3); mp.dtime
    00004C6A 13A6                   MOV.L       R10,@(24,R3); mp.us
    00004C6C 13A7                   MOV.L       R10,@(28,R3); mp.ds
    00004C6E 7FE0                   ADD         #-32,R15
    00004C70 62F3                   MOV         R15,R2
    00004C72 7264                   ADD         #100,R2
    00004C74 6422                   MOV.L       @R2,R4     ; (part of)mp
    00004C76 5B21                   MOV.L       @(4,R2),R11; (part of)mp
    00004C78 5C22                   MOV.L       @(8,R2),R12; (part of)mp
    00004C7A 5523                   MOV.L       @(12,R2),R5; (part of)mp
    00004C7C 5724                   MOV.L       @(16,R2),R7; (part of)mp
    00004C7E 5E25                   MOV.L       @(20,R2),R14; (part of)mp
    00004C80 5A26                   MOV.L       @(24,R2),R10; (part of)mp
    00004C82 5127                   MOV.L       @(28,R2),R1; (part of)mp
    00004C84 2F42                   MOV.L       R4,@R15
    00004C86 E402                   MOV         #2,R4      ; H'00000002
    00004C88 1FB1                   MOV.L       R11,@(4,R15)
    00004C8A 1FC2                   MOV.L       R12,@(8,R15)
    00004C8C 1F53                   MOV.L       R5,@(12,R15)
    00004C8E 1F74                   MOV.L       R7,@(16,R15)
    00004C90 1FE5                   MOV.L       R14,@(20,R15)
    00004C92 1FA6                   MOV.L       R10,@(24,R15)
    00004C94 DA16                   MOV.L       L1382+24,R10; _motor_SET
    00004C96 4A0B                   JSR         @R10
    00004C98 1F17                   MOV.L       R1,@(28,R15)
    00004C9A 7F20                   ADD         #32,R15
             tskcmd.c       7571                             Sp[devno][spdptn].ac, 
             tskcmd.c       7572                             Sp[devno][spdptn].fl, 
             tskcmd.c       7573                             Sp[devno][spdptn].fh, 
             tskcmd.c       7574                             Sp[devno][spdptn].gl );
             tskcmd.c       7575    
             tskcmd.c       7576              movptn = pProcAdr->step[actstep].par06;
             tskcmd.c       7577              movval = GetPositionValue(movptn);
    00004C9C DA0E                   MOV.L       L1382,R10  ; __$pProcAdr
    00004C9E 6BA2                   MOV.L       @R10,R11   ; pProcAdr
    00004CA0 30F1604C               MOV.L       @(304:12,R15),R0
    00004CA4 7B05                   ADD         #5,R11
    00004CA6 D321                   MOV.L       L1382+84,R3; __$GetPositionValue
    00004CA8 430B                   JSR         @R3
    00004CAA 04BC                   MOV.B       @(R0,R11),R4; pProcAdr->step[].par06
             tskcmd.c       7578              
             tskcmd.c       7579              result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00004CAC 2F06                   MOV.L       R0,@-R15
    00004CAE E700                   MOV         #0,R7      ; H'00000000
    00004CB0 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00004CB4 E602                   MOV         #2,R6      ; H'00000002
    00004CB6 D310                   MOV.L       L1382+32,R3; __$AbsmvAction
    00004CB8 430B                   JSR         @R3
    00004CBA E451                   MOV         #81,R4     ; H'00000051
    00004CBC 6203                   MOV         R0,R2
    00004CBE 7F04                   ADD         #4,R15
    00004CC0 6603                   MOV         R0,R6
    00004CC2 E04A                   MOV         #74,R0     ; H'0000004A
    00004CC4 4008                   SHLL2       R0
             tskcmd.c       7580              if( result == E_SUCCESS ) result = E_CONTINUE;
    00004CC6 2228                   TST         R2,R2
    00004CC8 8F01                   BF/S        L1006
    00004CCA 0F66                   MOV.L       R6,@(R0,R15); result
    00004CCC 0FD6                   MOV.L       R13,@(R0,R15); result
    00004CCE              L1006:
             tskcmd.c       7581              pProcDat->Stp++;
    00004CCE 6692                   MOV.L       @R9,R6     ; pProcDat
    00004CD0 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00004CD2 7001                   ADD         #1,R0
    00004CD4 A2CE                   BRA         L991
    00004CD6 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00004CD8              L1382:
    00004CD8 <00000000>             .DATA.L     __$pProcAdr
    00004CDC <00000000>             .DATA.L     __$GetPosiData
    00004CE0 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00004CE4 <00000078>             .DATA.L     H'00000078+__$Sp
    00004CE8 <00000000>             .DATA.L     __$Sp
    00004CEC <00000000>             .DATA.L     _GetFactor
    00004CF0 <00000000>             .DATA.L     _motor_SET
    00004CF4 <00000018>             .DATA.L     H'00000018+__$BkP7
    00004CF8 <00000000>             .DATA.L     __$AbsmvAction
    00004CFC <00000001>             .DATA.L     H'00000001+__$psel
    00004D00 <00000002>             .DATA.L     H'00000002+__$psns
    00004D04 <00000000>             .DATA.L     _IdleBitSet
    00004D08 <00000000>             .DATA.L     __$psns
    00004D0C <00000000>             .DATA.L     __$vout
    00004D10 <00000000>             .DATA.L     __$NzlTargetGet
    00004D14 <00000002>             .DATA.L     H'00000002+__$vout
    00004D18 <00000000>             .DATA.L     _mbx_send
    00004D1C <0000000A>             .DATA.L     H'0000000A+__$SpPtn
    00004D20 <000000B4>             .DATA.L     H'000000B4+__$Sp
    00004D24 <00000000>             .DATA.L     __$BlowoutAirValue
    00004D28 <00000000>             .DATA.L     __$RelmvAction
    00004D2C <00000000>             .DATA.L     __$GetPositionValue
    00004D30              L971:
             tskcmd.c       7582          }
             tskcmd.c       7583          break;
             tskcmd.c       7584          
             tskcmd.c       7585      case 5 :    // [攪拌処理]  5 ．撹拌容量＋余剰量分（初回のみ）を吸引と同時に分注Z軸を下降させる。& 吸引中圧力監視
             tskcmd.c       7586          if( tskid == ID_TSK_PUNIT )
    00004D30 6063                   MOV         R6,R0
    00004D32 880D                   CMP/EQ      #13,R0
    00004D34 8B01                   BF          L1413
    00004D36 A29D                   BRA         L991
    00004D38 0009                   NOP
    00004D3A              L1413:
             tskcmd.c       7587          {
             tskcmd.c       7588              // 読み捨て
             tskcmd.c       7589          }
             tskcmd.c       7590          else
             tskcmd.c       7591          {
             tskcmd.c       7592              devno  = MT_Z0;
             tskcmd.c       7593              spdptn = (pProcAdr->step[actstep].par05 >> 4);
    00004D3A E014                   MOV         #20,R0     ; H'00000014
    00004D3C E2FC                   MOV         #-4,R2     ; H'FFFFFFFC
    00004D3E 4E80                   MULR        R0,R14
    00004D40 DDDA                   MOV.L       L1383+2,R13; __$pProcAdr
    00004D42 61D2                   MOV.L       @R13,R1    ; pProcAdr
    00004D44 31EC                   ADD         R14,R1
    00004D46 30118004               MOVU.B      @(4,R1),R0 ; pProcAdr->step[].par05
    00004D4A 3FE1204C               MOV.L       R14,@(304:12,R15)
    00004D4E 402C                   SHAD        R2,R0
    00004D50 3F010140               MOV.B       R0,@(320:12,R15)
             tskcmd.c       7594              movptn = pProcAdr->step[actstep].par07;             // 吸引終了高さ
             tskcmd.c       7595              movval = GetPositionValue(movptn);
    00004D54 8416                   MOV.B       @(6,R1),R0 ; pProcAdr->step[].par07
    00004D56 DED6                   MOV.L       L1383+6,R14; __$Sp
    00004D58 D3D6                   MOV.L       L1383+10,R3; __$GetPositionValue
    00004D5A 430B                   JSR         @R3
    00004D5C 6403                   MOV         R0,R4
             tskcmd.c       7596    
             tskcmd.c       7597              MAC_SPEED_SET( devno, 
    00004D5E 34F18140               MOVU.B      @(320,R15),R4
    00004D62 3F012054               MOV.L       R0,@(336:12,R15); movval
    00004D66 E00C                   MOV         #12,R0     ; H'0000000C
    00004D68 4480                   MULR        R0,R4
    00004D6A 34EC                   ADD         R14,R4
    00004D6C 3141503C               MOV.W       @(120:12,R4),R1; Sp[].ac
    00004D70 3F41204F               MOV.L       R4,@(316:12,R15)
    00004D74 3F111034               MOV.W       R1,@(104:12,R15); mp.accel_type
    00004D78 D5CF                   MOV.L       L1383+14,R5; _GetFactor
    00004D7A 450B                   JSR         @R5
    00004D7C E403                   MOV         #3,R4      ; H'00000003
    00004D7E 35F1604F               MOV.L       @(316:12,R15),R5
    00004D82 E400                   MOV         #0,R4      ; H'00000000
    00004D84 3751601F               MOV.L       @(124:12,R5),R7; Sp[].fl
    00004D88 3E516020               MOV.L       @(128:12,R5),R14; Sp[].fh
    00004D8C 3151903D               MOVU.W      @(122,R5),R1; Sp[].gl
    00004D90 3F012019               MOV.L       R0,@(100:12,R15); mp.factor
    00004D94 3F71201B               MOV.L       R7,@(108:12,R15); mp.FL
    00004D98 3FE1201C               MOV.L       R14,@(112:12,R15); mp.FH
    00004D9C 3F11201D               MOV.L       R1,@(116:12,R15); mp.utime
    00004DA0 3F11201E               MOV.L       R1,@(120:12,R15); mp.dtime
    00004DA4 3F41201F               MOV.L       R4,@(124:12,R15); mp.us
    00004DA8 3F412020               MOV.L       R4,@(128:12,R15); mp.ds
    00004DAC 7FE0                   ADD         #-32,R15
    00004DAE E584                   MOV         #-124,R5   ; H'FFFFFF84
    00004DB0 655C                   EXTU.B      R5,R5
    00004DB2 62F3                   MOV         R15,R2
    00004DB4 325C                   ADD         R5,R2
    00004DB6 6722                   MOV.L       @R2,R7     ; (part of)mp
    00004DB8 5E21                   MOV.L       @(4,R2),R14; (part of)mp
    00004DBA 5123                   MOV.L       @(12,R2),R1; (part of)mp
    00004DBC 2F72                   MOV.L       R7,@R15
    00004DBE 1FE1                   MOV.L       R14,@(4,R15)
    00004DC0 5E22                   MOV.L       @(8,R2),R14; (part of)mp
    00004DC2 1F13                   MOV.L       R1,@(12,R15)
    00004DC4 5124                   MOV.L       @(16,R2),R1; (part of)mp
    00004DC6 5425                   MOV.L       @(20,R2),R4; (part of)mp
    00004DC8 5526                   MOV.L       @(24,R2),R5; (part of)mp
    00004DCA 5727                   MOV.L       @(28,R2),R7; (part of)mp
    00004DCC 1FE2                   MOV.L       R14,@(8,R15)
    00004DCE 1F14                   MOV.L       R1,@(16,R15)
    00004DD0 1F45                   MOV.L       R4,@(20,R15)
    00004DD2 E402                   MOV         #2,R4      ; H'00000002
    00004DD4 1F56                   MOV.L       R5,@(24,R15)
    00004DD6 DEB9                   MOV.L       L1383+18,R14; _motor_SET
    00004DD8 4E0B                   JSR         @R14
    00004DDA 1F77                   MOV.L       R7,@(28,R15)
    00004DDC 7F20                   ADD         #32,R15
             tskcmd.c       7598                             Sp[devno][spdptn].ac, 
             tskcmd.c       7599                             Sp[devno][spdptn].fl, 
             tskcmd.c       7600                             Sp[devno][spdptn].fh, 
             tskcmd.c       7601                             Sp[devno][spdptn].gl );
             tskcmd.c       7602    
             tskcmd.c       7603              devno  = MT_P0;
             tskcmd.c       7604              spdptn = (pProcAdr->step[actstep].par05 & 0x0f);
             tskcmd.c       7605              MAC_SPEED_SET( devno, 
    00004DDE 67D2                   MOV.L       @R13,R7    ; pProcAdr
    00004DE0 30F1604C               MOV.L       @(304:12,R15),R0
    00004DE4 7704                   ADD         #4,R7
    00004DE6 E403                   MOV         #3,R4      ; H'00000003
    00004DE8 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].par05
    00004DEA DEB1                   MOV.L       L1383+6,R14; __$Sp
    00004DEC C90F                   AND         #15,R0
    00004DEE 6203                   MOV         R0,R2
    00004DF0 E00C                   MOV         #12,R0     ; H'0000000C
    00004DF2 4280                   MULR        R0,R2
    00004DF4 32EC                   ADD         R14,R2
    00004DF6 3F212053               MOV.L       R2,@(332:12,R15)
    00004DFA 3121505A               MOV.W       @(180:12,R2),R1; Sp[].ac
    00004DFE 3F111044               MOV.W       R1,@(136:12,R15); mp.accel_type
    00004E02 D5AD                   MOV.L       L1383+14,R5; _GetFactor
    00004E04 450B                   JSR         @R5
    00004E06 6E23                   MOV         R2,R14
    00004E08 37E1602E               MOV.L       @(184:12,R14),R7; Sp[].fl
    00004E0C 31E1602F               MOV.L       @(188:12,R14),R1; Sp[].fh
    00004E10 35E1905B               MOVU.W      @(182,R14),R5; Sp[].gl
    00004E14 3F712023               MOV.L       R7,@(140:12,R15); mp.FL
    00004E18 E700                   MOV         #0,R7      ; H'00000000
    00004E1A 3F012021               MOV.L       R0,@(132:12,R15); mp.factor
    00004E1E 3F112024               MOV.L       R1,@(144:12,R15); mp.FH
    00004E22 3F512025               MOV.L       R5,@(148:12,R15); mp.utime
    00004E26 3F512026               MOV.L       R5,@(152:12,R15); mp.dtime
    00004E2A 3F712027               MOV.L       R7,@(156:12,R15); mp.us
    00004E2E 3F712028               MOV.L       R7,@(160:12,R15); mp.ds
    00004E32 7FE0                   ADD         #-32,R15
    00004E34 E5A4                   MOV         #-92,R5    ; H'FFFFFFA4
    00004E36 655C                   EXTU.B      R5,R5
    00004E38 64F3                   MOV         R15,R4
    00004E3A 345C                   ADD         R5,R4
    00004E3C 5241                   MOV.L       @(4,R4),R2 ; (part of)mp
    00004E3E 5644                   MOV.L       @(16,R4),R6; (part of)mp
    00004E40 1F21                   MOV.L       R2,@(4,R15)
    00004E42 5242                   MOV.L       @(8,R4),R2 ; (part of)mp
    00004E44 6E42                   MOV.L       @R4,R14    ; (part of)mp
    00004E46 1F22                   MOV.L       R2,@(8,R15)
    00004E48 5245                   MOV.L       @(20,R4),R2; (part of)mp
    00004E4A 5143                   MOV.L       @(12,R4),R1; (part of)mp
    00004E4C 1F64                   MOV.L       R6,@(16,R15)
    00004E4E 1F25                   MOV.L       R2,@(20,R15)
    00004E50 5646                   MOV.L       @(24,R4),R6; (part of)mp
    00004E52 5247                   MOV.L       @(28,R4),R2; (part of)mp
    00004E54 2FE2                   MOV.L       R14,@R15
    00004E56 1F13                   MOV.L       R1,@(12,R15)
    00004E58 1F66                   MOV.L       R6,@(24,R15)
    00004E5A 1F27                   MOV.L       R2,@(28,R15)
    00004E5C D297                   MOV.L       L1383+18,R2; _motor_SET
    00004E5E 420B                   JSR         @R2
    00004E60 E403                   MOV         #3,R4      ; H'00000003
    00004E62 7F20                   ADD         #32,R15
             tskcmd.c       7606                             Sp[devno][spdptn].ac, 
             tskcmd.c       7607                             Sp[devno][spdptn].fl, 
             tskcmd.c       7608                             Sp[devno][spdptn].fh, 
             tskcmd.c       7609                             Sp[devno][spdptn].gl );
             tskcmd.c       7610              
             tskcmd.c       7611              MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
    00004E64 66D2                   MOV.L       @R13,R6    ; pProcAdr
    00004E66 30F1604C               MOV.L       @(304:12,R15),R0
    00004E6A 760C                   ADD         #12,R6
    00004E6C 066E                   MOV.L       @(R0,R6),R6; pProcAdr->step[].par13
    00004E6E 2F66                   MOV.L       R6,@-R15
    00004E70 7FFC                   ADD         #-4,R15
    00004E72 E602                   MOV         #2,R6      ; H'00000002
    00004E74 3DF16056               MOV.L       @(344:12,R15),R13; movval
    00004E78 35F14134               MOV.B       @(308:12,R15),R5; bcid
    00004E7C 2FD2                   MOV.L       R13,@R15
    00004E7E E703                   MOV         #3,R7      ; H'00000003
    00004E80 D38F                   MOV.L       L1383+22,R3; __$MapAction
    00004E82 430B                   JSR         @R3
    00004E84 64A3                   MOV         R10,R4
    00004E86 7F08                   ADD         #8,R15
             tskcmd.c       7612              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7613    
             tskcmd.c       7614              mbx_send    (
             tskcmd.c       7615                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7616                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7617                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7618                              prid1,               // prid1
             tskcmd.c       7619                              bcid,                // bcid
             tskcmd.c       7620                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7621                              inf1,                // sts
             tskcmd.c       7622                              inf2,                // sts2
             tskcmd.c       7623                              &dummy,              // data
             tskcmd.c       7624                              sizeof( dummy )      // siz
             tskcmd.c       7625                          );
    00004E88 ED01                   MOV         #1,R13     ; H'00000001
    00004E8A 2FD6                   MOV.L       R13,@-R15
    00004E8C 6DF3                   MOV         R15,R13
    00004E8E 7D44                   ADD         #68,R13
    00004E90 2FD6                   MOV.L       R13,@-R15
    00004E92 2FC6                   MOV.L       R12,@-R15
    00004E94 2FB6                   MOV.L       R11,@-R15
    00004E96 EB99                   MOV         #-103,R11  ; H'FFFFFF99
    00004E98 6BBC                   EXTU.B      R11,R11
    00004E9A 2FB6                   MOV.L       R11,@-R15
    00004E9C 7FFC                   ADD         #-4,R15
    00004E9E E60D                   MOV         #13,R6     ; H'0000000D
    00004EA0 31F18144               MOVU.B      @(324,R15),R1; bcid
    00004EA4 E50C                   MOV         #12,R5     ; H'0000000C
    00004EA6 6463                   MOV         R6,R4
    00004EA8 2F12                   MOV.L       R1,@R15
    00004EAA DB86                   MOV.L       L1383+26,R11; _mbx_send
    00004EAC 4B0B                   JSR         @R11
    00004EAE 67A3                   MOV         R10,R7
    00004EB0 7F18                   ADD         #24,R15
             tskcmd.c       7626              
             tskcmd.c       7627              pProcDat->Stp++;
    00004EB2 6C92                   MOV.L       @R9,R12    ; pProcDat
    00004EB4 84C2                   MOV.B       @(2,R12),R0; (pProcDat)->Stp
    00004EB6 7001                   ADD         #1,R0
    00004EB8 A1DC                   BRA         L991
    00004EBA 80C2                   MOV.B       R0,@(2,R12); (pProcDat)->Stp
    00004EBC              L972:
             tskcmd.c       7628          }
             tskcmd.c       7629          break;
             tskcmd.c       7630          
             tskcmd.c       7631      case 6 :    // [攪拌処理]  6 ．吸引後ウェイト
             tskcmd.c       7632          if( tskid == ID_TSK_PUNIT )
    00004EBC 6063                   MOV         R6,R0
    00004EBE 880D                   CMP/EQ      #13,R0
    00004EC0 8B12                   BF          L1011
             tskcmd.c       7633          {
             tskcmd.c       7634              // ★圧力監視記述
             tskcmd.c       7635              
             tskcmd.c       7636              
             tskcmd.c       7637              
             tskcmd.c       7638              mbx_send    (
             tskcmd.c       7639                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7640                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7641                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7642                              prid1,               // prid1
             tskcmd.c       7643                              bcid,                // bcid
             tskcmd.c       7644                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7645                              inf1,                // sts
             tskcmd.c       7646                              inf2,                // sts2
             tskcmd.c       7647                              &dummy,              // data
             tskcmd.c       7648                              sizeof( dummy )      // siz
             tskcmd.c       7649                          );
    00004EC2 E401                   MOV         #1,R4      ; H'00000001
    00004EC4 2F46                   MOV.L       R4,@-R15
    00004EC6 67F3                   MOV         R15,R7
    00004EC8 7744                   ADD         #68,R7
    00004ECA 2F76                   MOV.L       R7,@-R15
    00004ECC 2FC6                   MOV.L       R12,@-R15
    00004ECE 2FB6                   MOV.L       R11,@-R15
    00004ED0 EB99                   MOV         #-103,R11  ; H'FFFFFF99
    00004ED2 6BBC                   EXTU.B      R11,R11
    00004ED4 2FB6                   MOV.L       R11,@-R15
    00004ED6 2F56                   MOV.L       R5,@-R15
    00004ED8 E60D                   MOV         #13,R6     ; H'0000000D
    00004EDA E50C                   MOV         #12,R5     ; H'0000000C
    00004EDC 6463                   MOV         R6,R4
    00004EDE D979                   MOV.L       L1383+26,R9; _mbx_send
    00004EE0 490B                   JSR         @R9
    00004EE2 67A3                   MOV         R10,R7
    00004EE4 A1C6                   BRA         L991
    00004EE6 7F18                   ADD         #24,R15
    00004EE8              L1011:
             tskcmd.c       7650          }
             tskcmd.c       7651          else
             tskcmd.c       7652          {
             tskcmd.c       7653              WaitAction( prid1, bcid, 10 );
    00004EE8 E60A                   MOV         #10,R6     ; H'0000000A
    00004EEA D377                   MOV.L       L1383+30,R3; __$WaitAction
    00004EEC 430B                   JSR         @R3
    00004EEE 64A3                   MOV         R10,R4
             tskcmd.c       7654              pProcDat->Stp++;
    00004EF0 6C92                   MOV.L       @R9,R12    ; pProcDat
    00004EF2 84C2                   MOV.B       @(2,R12),R0; (pProcDat)->Stp
    00004EF4 7001                   ADD         #1,R0
    00004EF6 A1BD                   BRA         L991
    00004EF8 80C2                   MOV.B       R0,@(2,R12); (pProcDat)->Stp
    00004EFA              L973:
             tskcmd.c       7655          }
             tskcmd.c       7656          break;
             tskcmd.c       7657          
             tskcmd.c       7658      case 7 :    // [攪拌処理]  7 ．現在の分注Z軸位置から撹拌容量を吐出と同時に分注Z軸上昇させる。
             tskcmd.c       7659          if( tskid == ID_TSK_PUNIT )
    00004EFA 6063                   MOV         R6,R0
    00004EFC 880D                   CMP/EQ      #13,R0
    00004EFE 8B01                   BF          L1414
    00004F00 A1B8                   BRA         L991
    00004F02 0009                   NOP
    00004F04              L1414:
             tskcmd.c       7660          {
             tskcmd.c       7661              // 読み捨て
             tskcmd.c       7662          }
             tskcmd.c       7663          else
             tskcmd.c       7664          {
             tskcmd.c       7665              devno  = MT_Z0;
             tskcmd.c       7666              spdptn = (pProcAdr->step[actstep].par05 >> 4);// 吐出上昇速度パターン
    00004F04 E014                   MOV         #20,R0     ; H'00000014
    00004F06 4E80                   MULR        R0,R14
    00004F08 DD68                   MOV.L       L1383+2,R13; __$pProcAdr
    00004F0A 65D2                   MOV.L       @R13,R5    ; pProcAdr
    00004F0C 35EC                   ADD         R14,R5
    00004F0E 30518004               MOVU.B      @(4,R5),R0 ; pProcAdr->step[].par05
    00004F12 3FE1204C               MOV.L       R14,@(304:12,R15)
    00004F16 EEFC                   MOV         #-4,R14    ; H'FFFFFFFC
    00004F18 40EC                   SHAD        R14,R0
    00004F1A 3F010144               MOV.B       R0,@(324:12,R15)
             tskcmd.c       7667              movptn = pProcAdr->step[actstep].par06;       // 攪拌開始高さ
             tskcmd.c       7668              movval = GetPositionValue(movptn);
    00004F1E 8455                   MOV.B       @(5,R5),R0 ; pProcAdr->step[].par06
    00004F20 D364                   MOV.L       L1383+10,R3; __$GetPositionValue
    00004F22 430B                   JSR         @R3
    00004F24 6403                   MOV         R0,R4
             tskcmd.c       7669    
             tskcmd.c       7670              MAC_SPEED_SET( devno, 
    00004F26 31F18144               MOVU.B      @(324,R15),R1
    00004F2A 3F012054               MOV.L       R0,@(336:12,R15); movval
    00004F2E E00C                   MOV         #12,R0     ; H'0000000C
    00004F30 4180                   MULR        R0,R1
    00004F32 D75F                   MOV.L       L1383+6,R7 ; __$Sp
    00004F34 317C                   ADD         R7,R1
    00004F36 3F112052               MOV.L       R1,@(328:12,R15)
    00004F3A 3E11503C               MOV.W       @(120:12,R1),R14; Sp[].ac
    00004F3E D15E                   MOV.L       L1383+14,R1; _GetFactor
    00004F40 410B                   JSR         @R1
    00004F42 E403                   MOV         #3,R4      ; H'00000003
    00004F44 32F16052               MOV.L       @(328:12,R15),R2
    00004F48 3FE11054               MOV.W       R14,@(168:12,R15); mp.accel_type
    00004F4C 3421601F               MOV.L       @(124:12,R2),R4; Sp[].fl
    00004F50 35216020               MOV.L       @(128:12,R2),R5; Sp[].fh
    00004F54 3721903D               MOVU.W      @(122,R2),R7; Sp[].gl
    00004F58 EE00                   MOV         #0,R14     ; H'00000000
    00004F5A 3F012029               MOV.L       R0,@(164:12,R15); mp.factor
    00004F5E 3F41202B               MOV.L       R4,@(172:12,R15); mp.FL
    00004F62 3F51202C               MOV.L       R5,@(176:12,R15); mp.FH
    00004F66 3F71202D               MOV.L       R7,@(180:12,R15); mp.utime
    00004F6A 3F71202E               MOV.L       R7,@(184:12,R15); mp.dtime
    00004F6E 3FE1202F               MOV.L       R14,@(188:12,R15); mp.us
    00004F72 3FE12030               MOV.L       R14,@(192:12,R15); mp.ds
    00004F76 7FE0                   ADD         #-32,R15
    00004F78 E4C4                   MOV         #-60,R4    ; H'FFFFFFC4
    00004F7A 644C                   EXTU.B      R4,R4
    00004F7C 62F3                   MOV         R15,R2
    00004F7E 324C                   ADD         R4,R2
    00004F80 6522                   MOV.L       @R2,R5     ; (part of)mp
    00004F82 5121                   MOV.L       @(4,R2),R1 ; (part of)mp
    00004F84 5723                   MOV.L       @(12,R2),R7; (part of)mp
    00004F86 5E25                   MOV.L       @(20,R2),R14; (part of)mp
    00004F88 2F52                   MOV.L       R5,@R15
    00004F8A 1F11                   MOV.L       R1,@(4,R15)
    00004F8C 5522                   MOV.L       @(8,R2),R5 ; (part of)mp
    00004F8E 1F73                   MOV.L       R7,@(12,R15)
    00004F90 5724                   MOV.L       @(16,R2),R7; (part of)mp
    00004F92 1FE5                   MOV.L       R14,@(20,R15)
    00004F94 5E26                   MOV.L       @(24,R2),R14; (part of)mp
    00004F96 5127                   MOV.L       @(28,R2),R1; (part of)mp
    00004F98 1F52                   MOV.L       R5,@(8,R15)
    00004F9A 1F74                   MOV.L       R7,@(16,R15)
    00004F9C 1FE6                   MOV.L       R14,@(24,R15)
    00004F9E 1F17                   MOV.L       R1,@(28,R15)
    00004FA0 D146                   MOV.L       L1383+18,R1; _motor_SET
    00004FA2 410B                   JSR         @R1
    00004FA4 E402                   MOV         #2,R4      ; H'00000002
    00004FA6 7F20                   ADD         #32,R15
             tskcmd.c       7671                             Sp[devno][spdptn].ac, 
             tskcmd.c       7672                             Sp[devno][spdptn].fl, 
             tskcmd.c       7673                             Sp[devno][spdptn].fh, 
             tskcmd.c       7674                             Sp[devno][spdptn].gl );
             tskcmd.c       7675    
             tskcmd.c       7676              devno  = MT_P0;
             tskcmd.c       7677              spdptn = (pProcAdr->step[actstep].par05 & 0x0f);// 吐出速度パターン
             tskcmd.c       7678              MAC_SPEED_SET( devno, 
    00004FA8 61D2                   MOV.L       @R13,R1    ; pProcAdr
    00004FAA 30F1604C               MOV.L       @(304:12,R15),R0
    00004FAE 7104                   ADD         #4,R1
    00004FB0 ED0C                   MOV         #12,R13    ; H'0000000C
    00004FB2 001C                   MOV.B       @(R0,R1),R0; pProcAdr->step[].par05
    00004FB4 D43E                   MOV.L       L1383+6,R4 ; __$Sp
    00004FB6 C90F                   AND         #15,R0
    00004FB8 6603                   MOV         R0,R6
    00004FBA 60D3                   MOV         R13,R0
    00004FBC 4680                   MULR        R0,R6
    00004FBE 364C                   ADD         R4,R6
    00004FC0 3561505A               MOV.W       @(180:12,R6),R5; Sp[].ac
    00004FC4 3F612053               MOV.L       R6,@(332:12,R15)
    00004FC8 3F511064               MOV.W       R5,@(200:12,R15); mp.accel_type
    00004FCC D73A                   MOV.L       L1383+14,R7; _GetFactor
    00004FCE 470B                   JSR         @R7
    00004FD0 E403                   MOV         #3,R4      ; H'00000003
    00004FD2 31F16053               MOV.L       @(332:12,R15),R1
    00004FD6 3F012031               MOV.L       R0,@(196:12,R15); mp.factor
    00004FDA 3D11602E               MOV.L       @(184:12,R1),R13; Sp[].fl
    00004FDE 3E11602F               MOV.L       @(188:12,R1),R14; Sp[].fh
    00004FE2 3511905B               MOVU.W      @(182,R1),R5; Sp[].gl
    00004FE6 3FD12033               MOV.L       R13,@(204:12,R15); mp.FL
    00004FEA ED00                   MOV         #0,R13     ; H'00000000
    00004FEC 3FE12034               MOV.L       R14,@(208:12,R15); mp.FH
    00004FF0 3F512035               MOV.L       R5,@(212:12,R15); mp.utime
    00004FF4 3F512036               MOV.L       R5,@(216:12,R15); mp.dtime
    00004FF8 3FD12037               MOV.L       R13,@(220:12,R15); mp.us
    00004FFC 3FD12038               MOV.L       R13,@(224:12,R15); mp.ds
    00005000 7FE0                   ADD         #-32,R15
    00005002 EDE4                   MOV         #-28,R13   ; H'FFFFFFE4
    00005004 6DDC                   EXTU.B      R13,R13
    00005006 E403                   MOV         #3,R4      ; H'00000003
    00005008 65F3                   MOV         R15,R5
    0000500A 35DC                   ADD         R13,R5
    0000500C 6252                   MOV.L       @R5,R2     ; (part of)mp
    0000500E 5651                   MOV.L       @(4,R5),R6 ; (part of)mp
    00005010 2F22                   MOV.L       R2,@R15
    00005012 1F61                   MOV.L       R6,@(4,R15)
    00005014 5252                   MOV.L       @(8,R5),R2 ; (part of)mp
    00005016 5653                   MOV.L       @(12,R5),R6; (part of)mp
    00005018 1F22                   MOV.L       R2,@(8,R15)
    0000501A 1F63                   MOV.L       R6,@(12,R15)
    0000501C 5654                   MOV.L       @(16,R5),R6; (part of)mp
    0000501E 5255                   MOV.L       @(20,R5),R2; (part of)mp
    00005020 1F64                   MOV.L       R6,@(16,R15)
    00005022 1F25                   MOV.L       R2,@(20,R15)
    00005024 5656                   MOV.L       @(24,R5),R6; (part of)mp
    00005026 5257                   MOV.L       @(28,R5),R2; (part of)mp
    00005028 1F66                   MOV.L       R6,@(24,R15)
    0000502A D624                   MOV.L       L1383+18,R6; _motor_SET
    0000502C 460B                   JSR         @R6
    0000502E 1F27                   MOV.L       R2,@(28,R15)
    00005030 7F20                   ADD         #32,R15
             tskcmd.c       7679                             Sp[devno][spdptn].ac, 
             tskcmd.c       7680                             Sp[devno][spdptn].fl, 
             tskcmd.c       7681                             Sp[devno][spdptn].fh, 
             tskcmd.c       7682                             Sp[devno][spdptn].gl );
             tskcmd.c       7683      
             tskcmd.c       7684              // ★最終の吐出か（余剰量＋吐出量を吐き出す）
             tskcmd.c       7685              if( ((pProcAdr->step[actstep].par03 & 0x0f)+1) >= psns.tcnt )
             tskcmd.c       7686              {
             tskcmd.c       7687                  MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par14 );
             tskcmd.c       7688              }
             tskcmd.c       7689              else
             tskcmd.c       7690              {
             tskcmd.c       7691                  MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par14 );
             tskcmd.c       7692              }
             tskcmd.c       7693              if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7694    
             tskcmd.c       7695              mbx_send    (
             tskcmd.c       7696                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       7697                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7698                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7699                              prid1,               // prid1
             tskcmd.c       7700                              bcid,                // bcid
             tskcmd.c       7701                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       7702                              inf1,                // sts
             tskcmd.c       7703                              inf2,                // sts2
             tskcmd.c       7704                              &dummy,              // data
             tskcmd.c       7705                              sizeof( dummy )      // siz
             tskcmd.c       7706                          );
    00005032 D21E                   MOV.L       L1383+2,R2 ; __$pProcAdr
    00005034 6522                   MOV.L       @R2,R5     ; pProcAdr
    00005036 30F1604C               MOV.L       @(304:12,R15),R0
    0000503A 7510                   ADD         #16,R5
    0000503C 055E                   MOV.L       @(R0,R5),R5; pProcAdr->step[].par14
    0000503E 2F56                   MOV.L       R5,@-R15
    00005040 7FFC                   ADD         #-4,R15
    00005042 E602                   MOV         #2,R6      ; H'00000002
    00005044 37F16056               MOV.L       @(344:12,R15),R7; movval
    00005048 35F14134               MOV.B       @(308:12,R15),R5; bcid
    0000504C 2F72                   MOV.L       R7,@R15
    0000504E E703                   MOV         #3,R7      ; H'00000003
    00005050 D31B                   MOV.L       L1383+22,R3; __$MapAction
    00005052 430B                   JSR         @R3
    00005054 64A3                   MOV         R10,R4
    00005056 7F08                   ADD         #8,R15
    00005058 ED01                   MOV         #1,R13     ; H'00000001
    0000505A 2FD6                   MOV.L       R13,@-R15
    0000505C 6EF3                   MOV         R15,R14
    0000505E 7E44                   ADD         #68,R14
    00005060 2FE6                   MOV.L       R14,@-R15
    00005062 2FC6                   MOV.L       R12,@-R15
    00005064 2FB6                   MOV.L       R11,@-R15
    00005066 E799                   MOV         #-103,R7   ; H'FFFFFF99
    00005068 677C                   EXTU.B      R7,R7
    0000506A 2F76                   MOV.L       R7,@-R15
    0000506C 7FFC                   ADD         #-4,R15
    0000506E E60D                   MOV         #13,R6     ; H'0000000D
    00005070 34F18144               MOVU.B      @(324,R15),R4; bcid
    00005074 E50C                   MOV         #12,R5     ; H'0000000C
    00005076 67A3                   MOV         R10,R7
    00005078 2F42                   MOV.L       R4,@R15
    0000507A D112                   MOV.L       L1383+26,R1; _mbx_send
    0000507C 410B                   JSR         @R1
    0000507E 6463                   MOV         R6,R4
    00005080 7F18                   ADD         #24,R15
             tskcmd.c       7707              
             tskcmd.c       7708              pProcDat->Stp++;
    00005082 6A92                   MOV.L       @R9,R10    ; pProcDat
    00005084 84A2                   MOV.B       @(2,R10),R0; (pProcDat)->Stp
    00005086 7001                   ADD         #1,R0
    00005088 A0F4                   BRA         L991
    0000508A 80A2                   MOV.B       R0,@(2,R10); (pProcDat)->Stp
    0000508C              L974:
             tskcmd.c       7709          }
             tskcmd.c       7710          break;
             tskcmd.c       7711          
             tskcmd.c       7712      case 8 :    // [攪拌処理]  8 ．撹拌容量を吐出
             tskcmd.c       7713          if( tskid == ID_TSK_PUNIT )
    0000508C 6063                   MOV         R6,R0
    0000508E 880D                   CMP/EQ      #13,R0
    00005090 8B01                   BF          L1415
    00005092 A0EF                   BRA         L991
    00005094 0009                   NOP
    00005096              L1415:
    00005096 6B92                   MOV.L       @R9,R11    ; pProcDat
             tskcmd.c       7714          {
             tskcmd.c       7715              // 読み捨て
             tskcmd.c       7716          }
             tskcmd.c       7717          else
             tskcmd.c       7718          {
             tskcmd.c       7719              pProcDat->Stp++;
    00005098 7201                   ADD         #1,R2
    0000509A 6023                   MOV         R2,R0
             tskcmd.c       7720              WaitAction( prid1, bcid, 10 );
    0000509C E60A                   MOV         #10,R6     ; H'0000000A
    0000509E 80B2                   MOV.B       R0,@(2,R11); (pProcDat)->Stp
    000050A0 D309                   MOV.L       L1383+30,R3; __$WaitAction
    000050A2 430B                   JSR         @R3
    000050A4 64A3                   MOV         R10,R4
    000050A6 A0E5                   BRA         L991
    000050A8 0009                   NOP
    000050AA              L1383:
    000050AA 00000002               .RES.W      1
    000050AC <00000000>             .DATA.L     __$pProcAdr
    000050B0 <00000000>             .DATA.L     __$Sp
    000050B4 <00000000>             .DATA.L     __$GetPositionValue
    000050B8 <00000000>             .DATA.L     _GetFactor
    000050BC <00000000>             .DATA.L     _motor_SET
    000050C0 <00000000>             .DATA.L     __$MapAction
    000050C4 <00000000>             .DATA.L     _mbx_send
    000050C8 <00000000>             .DATA.L     __$WaitAction
    000050CC              L975:
             tskcmd.c       7721          }
             tskcmd.c       7722          break;
             tskcmd.c       7723          
             tskcmd.c       7724      case 9 :    // [攪拌処理]  9 ．吐出後ウェイト
             tskcmd.c       7725          if( tskid == ID_TSK_PUNIT )
    000050CC 6063                   MOV         R6,R0
    000050CE 880D                   CMP/EQ      #13,R0
    000050D0 8B01                   BF          L1416
    000050D2 A0CF                   BRA         L991
    000050D4 0009                   NOP
    000050D6              L1416:
             tskcmd.c       7726          {
             tskcmd.c       7727              // 読み捨て
             tskcmd.c       7728          }
             tskcmd.c       7729          else
             tskcmd.c       7730          {
             tskcmd.c       7731              psns.tcnt++;
    000050D6 D17D                   MOV.L       L1051,R1   ; __$psns
    000050D8 8513                   MOV.W       @(6,R1),R0 ; psns.tcnt
    000050DA D47D                   MOV.L       L1051+4,R4 ; __$pProcAdr
    000050DC 7001                   ADD         #1,R0
    000050DE 6642                   MOV.L       @R4,R6     ; pProcAdr
    000050E0 8113                   MOV.W       R0,@(6,R1) ; psns.tcnt
             tskcmd.c       7732    
             tskcmd.c       7733              cntwk  = pProcAdr->step[actstep].par03 & 0x0f;
             tskcmd.c       7734    
             tskcmd.c       7735              if( psns.tcnt >= cntwk )
    000050E2 670D                   EXTU.W      R0,R7
    000050E4 E014                   MOV         #20,R0     ; H'00000014
    000050E6 7602                   ADD         #2,R6
    000050E8 4E80                   MULR        R0,R14
    000050EA 60E3                   MOV         R14,R0
    000050EC 006C                   MOV.B       @(R0,R6),R0; pProcAdr->step[].par03
    000050EE C90F                   AND         #15,R0
    000050F0 3703                   CMP/GE      R0,R7
    000050F2 8B03                   BF          L1020
             tskcmd.c       7736              {
             tskcmd.c       7737                  pProcDat->Stp++;
    000050F4 7201                   ADD         #1,R2
    000050F6 6692                   MOV.L       @R9,R6     ; pProcDat
    000050F8 A002                   BRA         L1021
    000050FA 6023                   MOV         R2,R0
    000050FC              L1020:
             tskcmd.c       7738              }
             tskcmd.c       7739              else
             tskcmd.c       7740              {
             tskcmd.c       7741                  pProcDat->Stp = 5;// ｢5〜9｣を設定回数繰り返す
    000050FC 6692                   MOV.L       @R9,R6     ; pProcDat
    000050FE E005                   MOV         #5,R0      ; H'00000005
    00005100              L1021:
             tskcmd.c       7742              }
             tskcmd.c       7743              WaitAction( prid1, bcid, 2 );
    00005100 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005102 E602                   MOV         #2,R6      ; H'00000002
    00005104 D373                   MOV.L       L1051+8,R3 ; __$WaitAction
    00005106 430B                   JSR         @R3
    00005108 64A3                   MOV         R10,R4
    0000510A A0B3                   BRA         L991
    0000510C 0009                   NOP
    0000510E              L987:
             tskcmd.c       7744          }
             tskcmd.c       7745          break;
             tskcmd.c       7746          
             tskcmd.c       7747      case 10:    // [攪拌処理]  10．分注Z軸ブローアウト高さ位置移動
             tskcmd.c       7748          MAC_SPEED_SET( MT_Z0, 
             tskcmd.c       7749                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].ac, 
             tskcmd.c       7750                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fl, 
             tskcmd.c       7751                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].fh, 
             tskcmd.c       7752                         Sp[MT_Z0][SpPtn.Z0_SpdNmlPtn].gl );
             tskcmd.c       7753    
             tskcmd.c       7754          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, BkP7.Z0_Taihi );
             tskcmd.c       7755          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7756          pProcDat->Stp++;
             tskcmd.c       7757          break;
             tskcmd.c       7758          
             tskcmd.c       7759      case 11:    // [攪拌処理]  11．ポンプリセット
             tskcmd.c       7760          // ブローアウトエア吸引
             tskcmd.c       7761          devno  = MT_P0;
             tskcmd.c       7762          spdptn = SpPtn.P0_SpdMovAirS;
             tskcmd.c       7763          MAC_SPEED_SET( devno, 
             tskcmd.c       7764                         Sp[devno][spdptn].ac, 
             tskcmd.c       7765                         Sp[devno][spdptn].fl, 
             tskcmd.c       7766                         Sp[devno][spdptn].fh, 
             tskcmd.c       7767                         Sp[devno][spdptn].gl );
             tskcmd.c       7768          result = RelmvAction( ID_TPL_PRTCL, bcid, MT_P0, REQ_STAUD, 0 );
             tskcmd.c       7769          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7770          pProcDat->Stp++;
             tskcmd.c       7771          break;
             tskcmd.c       7772          
             tskcmd.c       7773      case 12:    // [攪拌処理]  12．圧力基板制御：未指定のノズルチャンネルの電磁弁をONにする
             tskcmd.c       7774          pProcDat->Stp++;
             tskcmd.c       7775          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7776    
             tskcmd.c       7777    
             tskcmd.c       7778      case 13:    // [攪拌処理]  13．分注Z軸チップタッチ位置移動  (チップタッチ有り)
             tskcmd.c       7779          pProcDat->Stp++;
             tskcmd.c       7780          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7781    
             tskcmd.c       7782    
             tskcmd.c       7783      case 14:    // [攪拌処理]  14．分注Z軸退避位置移動
             tskcmd.c       7784          result = AbsmvAction( ID_TPL_PRTCL, bcid, MT_Z0, REQ_STAUD, BkP7.Z0_Taihi );
             tskcmd.c       7785          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7786          pProcDat->Stp++;
             tskcmd.c       7787          break;
             tskcmd.c       7788          
             tskcmd.c       7789      case 15:    // [攪拌処理] 
             tskcmd.c       7790          result = E_SUCCESS;
    0000510E E200                   MOV         #0,R2      ; H'00000000
    00005110 3F21204A               MOV.L       R2,@(296:12,R15); result
    00005114 A0AE                   BRA         L991
    00005116 0009                   NOP
    00005118              L984:
    00005118 D26F                   MOV.L       L1051+12,R2; __$pProcDat
    0000511A 6622                   MOV.L       @R2,R6     ; pProcDat
    0000511C 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000511E 7001                   ADD         #1,R0
    00005120 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005122              L985:
    00005122 D26D                   MOV.L       L1051+12,R2; __$pProcDat
    00005124 6622                   MOV.L       @R2,R6     ; pProcDat
    00005126 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005128 7001                   ADD         #1,R0
    0000512A A08B                   BRA         L1025
    0000512C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000512E              L983:
    0000512E DE6B                   MOV.L       L1051+16,R14; H'0000000A+__$SpPtn
    00005130 6EE0                   MOV.B       @R14,R14   ; SpPtn.P0_SpdMovAirS
    00005132 E00C                   MOV         #12,R0     ; H'0000000C
    00005134 D76A                   MOV.L       L1051+20,R7; H'000000B4+__$Sp
    00005136 61EC                   EXTU.B      R14,R1
    00005138 4180                   MULR        R0,R1
    0000513A 6013                   MOV         R1,R0
    0000513C 047D                   MOV.W       @(R0,R7),R4; Sp[].ac
    0000513E 3F411084               MOV.W       R4,@(264:12,R15); mp.accel_type
    00005142 D568                   MOV.L       L1051+24,R5; _GetFactor
    00005144 450B                   JSR         @R5
    00005146 E403                   MOV         #3,R4      ; H'00000003
    00005148 3F012041               MOV.L       R0,@(260:12,R15); mp.factor
    0000514C 62EC                   EXTU.B      R14,R2
    0000514E E00C                   MOV         #12,R0     ; H'0000000C
    00005150 4280                   MULR        R0,R2
    00005152 D165                   MOV.L       L1051+28,R1; __$Sp
    00005154 321C                   ADD         R1,R2
    00005156 3721602E               MOV.L       @(184:12,R2),R7; Sp[].fl
    0000515A 3421602F               MOV.L       @(188:12,R2),R4; Sp[].fh
    0000515E 3521905B               MOVU.W      @(182,R2),R5; Sp[].gl
    00005162 3F712043               MOV.L       R7,@(268:12,R15); mp.FL
    00005166 E700                   MOV         #0,R7      ; H'00000000
    00005168 3F412044               MOV.L       R4,@(272:12,R15); mp.FH
    0000516C 3F512045               MOV.L       R5,@(276:12,R15); mp.utime
    00005170 3F512046               MOV.L       R5,@(280:12,R15); mp.dtime
    00005174 3F712047               MOV.L       R7,@(284:12,R15); mp.us
    00005178 3F712048               MOV.L       R7,@(288:12,R15); mp.ds
    0000517C 7FE0                   ADD         #-32,R15
    0000517E E449                   MOV         #73,R4     ; H'00000049
    00005180 4408                   SHLL2       R4
    00005182 65F3                   MOV         R15,R5
    00005184 354C                   ADD         R4,R5
    00005186 6652                   MOV.L       @R5,R6     ; (part of)mp
    00005188 E403                   MOV         #3,R4      ; H'00000003
    0000518A 5252                   MOV.L       @(8,R5),R2 ; (part of)mp
    0000518C 2F62                   MOV.L       R6,@R15
    0000518E 5653                   MOV.L       @(12,R5),R6; (part of)mp
    00005190 1F22                   MOV.L       R2,@(8,R15)
    00005192 1F63                   MOV.L       R6,@(12,R15)
    00005194 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00005196 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00005198 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    0000519A 1F24                   MOV.L       R2,@(16,R15)
    0000519C 1F65                   MOV.L       R6,@(20,R15)
    0000519E 5256                   MOV.L       @(24,R5),R2; (part of)mp
    000051A0 5657                   MOV.L       @(28,R5),R6; (part of)mp
    000051A2 1F71                   MOV.L       R7,@(4,R15)
    000051A4 1F26                   MOV.L       R2,@(24,R15)
    000051A6 D251                   MOV.L       L1051+32,R2; _motor_SET
    000051A8 420B                   JSR         @R2
    000051AA 1F67                   MOV.L       R6,@(28,R15)
    000051AC 7F20                   ADD         #32,R15
    000051AE E700                   MOV         #0,R7      ; H'00000000
    000051B0 2F76                   MOV.L       R7,@-R15
    000051B2 E603                   MOV         #3,R6      ; H'00000003
    000051B4 35F14130               MOV.B       @(304:12,R15),R5; bcid
    000051B8 D34D                   MOV.L       L1051+36,R3; __$RelmvAction
    000051BA 430B                   JSR         @R3
    000051BC E451                   MOV         #81,R4     ; H'00000051
    000051BE A04B                   BRA         L1027
    000051C0 0009                   NOP
    000051C2              L982:
    000051C2 DE4C                   MOV.L       L1051+40,R14; __$SpPtn
    000051C4 31E18006               MOVU.B      @(6,R14),R1; SpPtn.Z0_SpdNmlPtn
    000051C8 E00C                   MOV         #12,R0     ; H'0000000C
    000051CA 4180                   MULR        R0,R1
    000051CC D54A                   MOV.L       L1051+44,R5; H'00000078+__$Sp
    000051CE 6013                   MOV         R1,R0
    000051D0 075D                   MOV.W       @(R0,R5),R7; Sp[].ac
    000051D2 3F711074               MOV.W       R7,@(232:12,R15); mp.accel_type
    000051D6 D543                   MOV.L       L1051+24,R5; _GetFactor
    000051D8 450B                   JSR         @R5
    000051DA E403                   MOV         #3,R4      ; H'00000003
    000051DC 32E18006               MOVU.B      @(6,R14),R2; SpPtn.Z0_SpdNmlPtn
    000051E0 3F012039               MOV.L       R0,@(228:12,R15); mp.factor
    000051E4 E00C                   MOV         #12,R0     ; H'0000000C
    000051E6 E500                   MOV         #0,R5      ; H'00000000
    000051E8 4280                   MULR        R0,R2
    000051EA D73F                   MOV.L       L1051+28,R7; __$Sp
    000051EC 3F51203F               MOV.L       R5,@(252:12,R15); mp.us
    000051F0 3F512040               MOV.L       R5,@(256:12,R15); mp.ds
    000051F4 327C                   ADD         R7,R2
    000051F6 3721601F               MOV.L       @(124:12,R2),R7; Sp[].fl
    000051FA 31216020               MOV.L       @(128:12,R2),R1; Sp[].fh
    000051FE 3421903D               MOVU.W      @(122,R2),R4; Sp[].gl
    00005202 3F71203B               MOV.L       R7,@(236:12,R15); mp.FL
    00005206 3F11203C               MOV.L       R1,@(240:12,R15); mp.FH
    0000520A 3F41203D               MOV.L       R4,@(244:12,R15); mp.utime
    0000520E 3F41203E               MOV.L       R4,@(248:12,R15); mp.dtime
    00005212 7FE0                   ADD         #-32,R15
    00005214 E541                   MOV         #65,R5     ; H'00000041
    00005216 4508                   SHLL2       R5
    00005218 64F3                   MOV         R15,R4
    0000521A 345C                   ADD         R5,R4
    0000521C 5643                   MOV.L       @(12,R4),R6; (part of)mp
    0000521E 6142                   MOV.L       @R4,R1     ; (part of)mp
    00005220 1F63                   MOV.L       R6,@(12,R15)
    00005222 5244                   MOV.L       @(16,R4),R2; (part of)mp
    00005224 5645                   MOV.L       @(20,R4),R6; (part of)mp
    00005226 5741                   MOV.L       @(4,R4),R7 ; (part of)mp
    00005228 2F12                   MOV.L       R1,@R15
    0000522A 5142                   MOV.L       @(8,R4),R1 ; (part of)mp
    0000522C 1F24                   MOV.L       R2,@(16,R15)
    0000522E 1F65                   MOV.L       R6,@(20,R15)
    00005230 5246                   MOV.L       @(24,R4),R2; (part of)mp
    00005232 5647                   MOV.L       @(28,R4),R6; (part of)mp
    00005234 E402                   MOV         #2,R4      ; H'00000002
    00005236 1F71                   MOV.L       R7,@(4,R15)
    00005238 1F12                   MOV.L       R1,@(8,R15)
    0000523A 1F26                   MOV.L       R2,@(24,R15)
    0000523C D22B                   MOV.L       L1051+32,R2; _motor_SET
    0000523E 420B                   JSR         @R2
    00005240 1F67                   MOV.L       R6,@(28,R15)
    00005242 7F20                   ADD         #32,R15
    00005244              L986:
    00005244              L1025:
    00005244 D42D                   MOV.L       L1051+48,R4; H'00000018+__$BkP7
    00005246 6242                   MOV.L       @R4,R2     ; BkP7.Z0_Taihi
    00005248 2F26                   MOV.L       R2,@-R15
    0000524A E700                   MOV         #0,R7      ; H'00000000
    0000524C 35F14130               MOV.B       @(304:12,R15),R5; bcid
    00005250 E451                   MOV         #81,R4     ; H'00000051
    00005252 D32B                   MOV.L       L1051+52,R3; __$AbsmvAction
    00005254 430B                   JSR         @R3
    00005256 E602                   MOV         #2,R6      ; H'00000002
    00005258              L1027:
    00005258 7F04                   ADD         #4,R15
    0000525A 2008                   TST         R0,R0
    0000525C 3F01204A               MOV.L       R0,@(296:12,R15); result
    00005260 8B03                   BF          L1030
    00005262 E6F1                   MOV         #-15,R6    ; H'FFFFFFF1
    00005264 666C                   EXTU.B      R6,R6
    00005266 3F61204A               MOV.L       R6,@(296:12,R15); result
    0000526A              L1030:
    0000526A D21B                   MOV.L       L1051+12,R2; __$pProcDat
    0000526C 6622                   MOV.L       @R2,R6     ; pProcDat
    0000526E 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005270 7001                   ADD         #1,R0
    00005272 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005274              L991:
             tskcmd.c       7791          break;
             tskcmd.c       7792      }
             tskcmd.c       7793      
             tskcmd.c       7794      return( result );
    00005274 30F1604A               MOV.L       @(296:12,R15),R0; result
    00005278 03000154               MOVI20      #340,R3    ; H'00000154
    0000527C 3F3C                   ADD         R3,R15
    0000527E 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       7795    }
    00005280 006B                   RTS/N
             tskcmd.c       7796    /***********************************************************************
             tskcmd.c       7797    * 
             tskcmd.c       7798    * [概要]  吸引
             tskcmd.c       7799    * [引数]  
             tskcmd.c       7800    * [戻値]  
             tskcmd.c       7801    * [補足]  P1  P2   P3     P4        P5  P6       P7       P8        P9  P10  P11  P12  P13    P14
             tskcmd.c       7802    *           *8       ﾊﾟﾀ-ﾝ  吸引位置  -   吸引速度 吸引高開 吸引高終  -   -    -    -    吸引量 -
             tskcmd.c       7803    * 
             tskcmd.c       7804    ***********************************************************************/
             tskcmd.c       7805    static ER  CmdActionSuc( T_CMD_MSG* mrcv )
    00005282              __$CmdActionSuc:                 ; function: __$CmdActionSuc
                                                           ; frame size=252
    00005282 48F0                   MOVMU.L     R8,@-R15
    00005284 03F0FF44               MOVI20      #-188,R3   ; H'FFFFFF44
    00005288 3F3C                   ADD         R3,R15
             tskcmd.c       7806    {
             tskcmd.c       7807      ER result = E_CONTINUE;
             tskcmd.c       7808      UB bcid;
             tskcmd.c       7809      UB prid1;
             tskcmd.c       7810      UB actstep;
             tskcmd.c       7811      UB spdptn;
             tskcmd.c       7812      UB inf1;
             tskcmd.c       7813      UB inf2;
             tskcmd.c       7814      UB movptn;
             tskcmd.c       7815      UB devno;
             tskcmd.c       7816      INT movval;
             tskcmd.c       7817      UB dummy;
             tskcmd.c       7818    
             tskcmd.c       7819      bcid  = mrcv->msgdata.bcid;
    0000528A 3841801A               MOVU.B      @(26,R4),R8; (mrcv)->bcid
             tskcmd.c       7820      prid1   = mrcv->msgdata.prid1;
             tskcmd.c       7821      inf1  = mrcv->msgdata.inf;
             tskcmd.c       7822      inf2  = mrcv->msgdata.inf2;
             tskcmd.c       7823      actstep = bcctrl[bcid].actstp -1 ;
    0000528E D21D                   MOV.L       L1051+56,R2; H'00000002+__$bcctrl
    00005290 6083                   MOV         R8,R0
    00005292 EBF1                   MOV         #-15,R11   ; H'FFFFFFF1
    00005294 4008                   SHLL2       R0
    00005296 4000                   SHLL        R0
             tskcmd.c       7824    
             tskcmd.c       7825    //    psel.pno = Atoi( args[PARAM1], N_DEC, sizeof(UB), N_SIG );
             tskcmd.c       7826    //    psel.smp = Atoi( args[PARAM2], N_DEC, sizeof(UB), N_SIG );
             tskcmd.c       7827    //    psel.val = Atoi( args[PARAM3], N_DEC, sizeof(UB), N_SIG );
             tskcmd.c       7828    
             tskcmd.c       7829    
             tskcmd.c       7830      switch( pProcDat->Stp )
    00005298 D70F                   MOV.L       L1051+12,R7; __$pProcDat
    0000529A 012C                   MOV.B       @(R0,R2),R1; bcctrl[].actstp
    0000529C 6BBC                   EXTU.B      R11,R11
    0000529E 6572                   MOV.L       @R7,R5     ; pProcDat
    000052A0 6AB3                   MOV         R11,R10
    000052A2 71FF                   ADD         #-1,R1
    000052A4 36518002               MOVU.B      @(2,R5),R6 ; (pProcDat)->Stp
    000052A8 6E1C                   EXTU.B      R1,R14
    000052AA E10E                   MOV         #14,R1     ; H'0000000E
    000052AC 3616                   CMP/HI      R1,R6
    000052AE 39418018               MOVU.B      @(24,R4),R9; (mrcv)->prid1
    000052B2 3C41801C               MOVU.B      @(28,R4),R12; (mrcv)->inf
    000052B6 3D41801D               MOVU.B      @(29,R4),R13; (mrcv)->inf2
    000052BA 8F02                   BF/S        L1417
    000052BC 6263                   MOV         R6,R2
    000052BE A236                   BRA         L1050
    000052C0 0009                   NOP
    000052C2              L1417:
    000052C2 4600                   SHLL        R6
    000052C4 C710                   MOVA        L1052,R0
    000052C6 006D                   MOV.W       @(R0,R6),R0
    000052C8 0023                   BRAF        R0
    000052CA 0009                   NOP
    000052CC              L1051:
    000052CC <00000000>             .DATA.L     __$psns
    000052D0 <00000000>             .DATA.L     __$pProcAdr
    000052D4 <00000000>             .DATA.L     __$WaitAction
    000052D8 <00000000>             .DATA.L     __$pProcDat
    000052DC <0000000A>             .DATA.L     H'0000000A+__$SpPtn
    000052E0 <000000B4>             .DATA.L     H'000000B4+__$Sp
    000052E4 <00000000>             .DATA.L     _GetFactor
    000052E8 <00000000>             .DATA.L     __$Sp
    000052EC <00000000>             .DATA.L     _motor_SET
    000052F0 <00000000>             .DATA.L     __$RelmvAction
    000052F4 <00000000>             .DATA.L     __$SpPtn
    000052F8 <00000078>             .DATA.L     H'00000078+__$Sp
    000052FC <00000018>             .DATA.L     H'00000018+__$BkP7
    00005300 <00000000>             .DATA.L     __$AbsmvAction
    00005304 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00005308              L1052:
    00005308 005A                   .DATA.W     L1033-L1051
    0000530A 0060                   .DATA.W     L1034-L1051
    0000530C 0436                   .DATA.W     L1035-L1051
    0000530E 00E6                   .DATA.W     L1036-L1051
    00005310 016C                   .DATA.W     L1037-L1051
    00005312 017E                   .DATA.W     L1038-L1051
    00005314 0198                   .DATA.W     L1039-L1051
    00005316 01AE                   .DATA.W     L1040-L1051
    00005318 02CC                   .DATA.W     L1041-L1051
    0000531A 02FC                   .DATA.W     L1042-L1051
    0000531C 032E                   .DATA.W     L1043-L1051
    0000531E 0334                   .DATA.W     L1044-L1051
    00005320 036C                   .DATA.W     L1045-L1051
    00005322 03B4                   .DATA.W     L1046-L1051
    00005324 0432                   .DATA.W     L1047-L1051
    00005326              L1033:
             tskcmd.c       7831      {
             tskcmd.c       7832      case 0: // 0． 待機
             tskcmd.c       7833          pProcDat->Stp++;
    00005326 7201                   ADD         #1,R2
    00005328 6023                   MOV         R2,R0
    0000532A 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    0000532C              L1034:
             tskcmd.c       7834          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7835    
             tskcmd.c       7836      case 1: // 1． Z軸通常速度設定
             tskcmd.c       7837          devno  = MT_Z0;
             tskcmd.c       7838          spdptn = SpPtn.Z0_SpdNmlPtn;
    0000532C D1C7                   MOV.L       L1384,R1   ; H'00000006+__$SpPtn
    0000532E 6010                   MOV.B       @R1,R0     ; SpPtn.Z0_SpdNmlPtn
    00005330 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
             tskcmd.c       7839          movval = GetPositionValue(POS_Z0_TAIHI);
    00005334 D3C6                   MOV.L       L1384+4,R3 ; __$GetPositionValue
    00005336 430B                   JSR         @R3
    00005338 E407                   MOV         #7,R4      ; H'00000007
             tskcmd.c       7840    
             tskcmd.c       7841          MAC_SPEED_SET( devno, 
    0000533A 3CF180A4               MOVU.B      @(164,R15),R12; spdptn
    0000533E 3F01202A               MOV.L       R0,@(168:12,R15); movval
    00005342 E00C                   MOV         #12,R0     ; H'0000000C
    00005344 4C80                   MULR        R0,R12
    00005346 D4C3                   MOV.L       L1384+8,R4 ; __$Sp
    00005348 3C4C                   ADD         R4,R12
    0000534A 3FC1202B               MOV.L       R12,@(172:12,R15)
    0000534E 36C1503C               MOV.W       @(120:12,R12),R6; Sp[].ac
    00005352 3F611002               MOV.W       R6,@(4:12,R15); mp.accel_type
    00005356 D7C0                   MOV.L       L1384+12,R7; _GetFactor
    00005358 470B                   JSR         @R7
    0000535A E403                   MOV         #3,R4      ; H'00000003
    0000535C 39C1601F               MOV.L       @(124:12,R12),R9; Sp[].fl
    00005360 3BC16020               MOV.L       @(128:12,R12),R11; Sp[].fh
    00005364 3CC1903D               MOVU.W      @(122,R12),R12; Sp[].gl
    00005368 ED00                   MOV         #0,R13     ; H'00000000
    0000536A 2F02                   MOV.L       R0,@R15    ; mp.factor
    0000536C 1F92                   MOV.L       R9,@(8,R15); mp.FL
    0000536E 1FB3                   MOV.L       R11,@(12,R15); mp.FH
    00005370 1FC4                   MOV.L       R12,@(16,R15); mp.utime
    00005372 1FC5                   MOV.L       R12,@(20,R15); mp.dtime
    00005374 1FD6                   MOV.L       R13,@(24,R15); mp.us
    00005376 1FD7                   MOV.L       R13,@(28,R15); mp.ds
    00005378 7FE0                   ADD         #-32,R15
    0000537A 6BF3                   MOV         R15,R11
    0000537C 7B20                   ADD         #32,R11
    0000537E 6EB2                   MOV.L       @R11,R14   ; (part of)mp
    00005380 E402                   MOV         #2,R4      ; H'00000002
    00005382 51B1                   MOV.L       @(4,R11),R1; (part of)mp
    00005384 57B4                   MOV.L       @(16,R11),R7; (part of)mp
    00005386 2FE2                   MOV.L       R14,@R15
    00005388 1F11                   MOV.L       R1,@(4,R15)
    0000538A 52B2                   MOV.L       @(8,R11),R2; (part of)mp
    0000538C 51B3                   MOV.L       @(12,R11),R1; (part of)mp
    0000538E 56B5                   MOV.L       @(20,R11),R6; (part of)mp
    00005390 1F74                   MOV.L       R7,@(16,R15)
    00005392 57B6                   MOV.L       @(24,R11),R7; (part of)mp
    00005394 5EB7                   MOV.L       @(28,R11),R14; (part of)mp
    00005396 1F22                   MOV.L       R2,@(8,R15)
    00005398 1F13                   MOV.L       R1,@(12,R15)
    0000539A 1F65                   MOV.L       R6,@(20,R15)
    0000539C 1F76                   MOV.L       R7,@(24,R15)
    0000539E D9AF                   MOV.L       L1384+16,R9; _motor_SET
    000053A0 490B                   JSR         @R9
    000053A2 1FE7                   MOV.L       R14,@(28,R15)
    000053A4 7F20                   ADD         #32,R15
             tskcmd.c       7842                         Sp[devno][spdptn].ac, 
             tskcmd.c       7843                         Sp[devno][spdptn].fl, 
             tskcmd.c       7844                         Sp[devno][spdptn].fh, 
             tskcmd.c       7845                         Sp[devno][spdptn].gl );
             tskcmd.c       7846          pProcDat->Stp++;
    000053A6 D2AE                   MOV.L       L1384+20,R2; __$pProcDat
    000053A8 6522                   MOV.L       @R2,R5     ; pProcDat
    000053AA 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    000053AC 7001                   ADD         #1,R0
    000053AE A1A8                   BRA         L1055
    000053B0 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    000053B2              L1036:
             tskcmd.c       7847          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7848    
             tskcmd.c       7849      case 2: // 2． Z軸退避高さへ移動
             tskcmd.c       7850          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       7851          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7852          pProcDat->Stp++;
             tskcmd.c       7853          break;
             tskcmd.c       7854    
             tskcmd.c       7855      case 3: // 3． Y0軸通常速度設定
             tskcmd.c       7856          devno  = MT_Y0;
             tskcmd.c       7857          spdptn = SpPtn.Y0_SpdNmlPtn;
    000053B2 D4AC                   MOV.L       L1384+24,R4; H'00000005+__$SpPtn
    000053B4 6040                   MOV.B       @R4,R0     ; SpPtn.Y0_SpdNmlPtn
    000053B6 D4AC                   MOV.L       L1384+28,R4; __$pProcAdr
    000053B8 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
             tskcmd.c       7858          movptn = pProcAdr->step[actstep].par03;
             tskcmd.c       7859          movval = GetPositionValue(movptn);
    000053BC E014                   MOV         #20,R0     ; H'00000014
    000053BE 6B42                   MOV.L       @R4,R11    ; pProcAdr
    000053C0 4E80                   MULR        R0,R14
    000053C2 7B02                   ADD         #2,R11
    000053C4 60E3                   MOV         R14,R0
             tskcmd.c       7860          
             tskcmd.c       7861          MAC_SPEED_SET( devno, 
    000053C6 3EF180A4               MOVU.B      @(164,R15),R14; spdptn
    000053CA D3A1                   MOV.L       L1384+4,R3 ; __$GetPositionValue
    000053CC 430B                   JSR         @R3
    000053CE 04BC                   MOV.B       @(R0,R11),R4; pProcAdr->step[].par03
    000053D0 3F01202A               MOV.L       R0,@(168:12,R15); movval
    000053D4 E00C                   MOV         #12,R0     ; H'0000000C
    000053D6 4E80                   MULR        R0,R14
    000053D8 D59E                   MOV.L       L1384+8,R5 ; __$Sp
    000053DA 3E5C                   ADD         R5,R14
    000053DC 3FE1202B               MOV.L       R14,@(172:12,R15)
    000053E0 35E1501E               MOV.W       @(60:12,R14),R5; Sp[].ac
    000053E4 3F511012               MOV.W       R5,@(36:12,R15); mp.accel_type
    000053E8 D69B                   MOV.L       L1384+12,R6; _GetFactor
    000053EA 460B                   JSR         @R6
    000053EC E403                   MOV         #3,R4      ; H'00000003
    000053EE 37E16010               MOV.L       @(64:12,R14),R7; Sp[].fl
    000053F2 39E16011               MOV.L       @(68:12,R14),R9; Sp[].fh
    000053F6 3BE1901F               MOVU.W      @(62,R14),R11; Sp[].gl
    000053FA EC00                   MOV         #0,R12     ; H'00000000
    000053FC 1F08                   MOV.L       R0,@(32,R15); mp.factor
    000053FE 1F7A                   MOV.L       R7,@(40,R15); mp.FL
    00005400 1F9B                   MOV.L       R9,@(44,R15); mp.FH
    00005402 1FBC                   MOV.L       R11,@(48,R15); mp.utime
    00005404 1FBD                   MOV.L       R11,@(52,R15); mp.dtime
    00005406 1FCE                   MOV.L       R12,@(56,R15); mp.us
    00005408 1FCF                   MOV.L       R12,@(60,R15); mp.ds
    0000540A 7FE0                   ADD         #-32,R15
    0000540C 62F3                   MOV         R15,R2
    0000540E 7240                   ADD         #64,R2
    00005410 5D21                   MOV.L       @(4,R2),R13; (part of)mp
    00005412 E401                   MOV         #1,R4      ; H'00000001
    00005414 5922                   MOV.L       @(8,R2),R9 ; (part of)mp
    00005416 6722                   MOV.L       @R2,R7     ; (part of)mp
    00005418 1FD1                   MOV.L       R13,@(4,R15)
    0000541A 5E23                   MOV.L       @(12,R2),R14; (part of)mp
    0000541C 1F92                   MOV.L       R9,@(8,R15)
    0000541E 5B24                   MOV.L       @(16,R2),R11; (part of)mp
    00005420 5125                   MOV.L       @(20,R2),R1; (part of)mp
    00005422 5D26                   MOV.L       @(24,R2),R13; (part of)mp
    00005424 5927                   MOV.L       @(28,R2),R9; (part of)mp
    00005426 2F72                   MOV.L       R7,@R15
    00005428 1FE3                   MOV.L       R14,@(12,R15)
    0000542A 1FB4                   MOV.L       R11,@(16,R15)
    0000542C 1F15                   MOV.L       R1,@(20,R15)
    0000542E 1FD6                   MOV.L       R13,@(24,R15)
    00005430 D28A                   MOV.L       L1384+16,R2; _motor_SET
    00005432 420B                   JSR         @R2
    00005434 1F97                   MOV.L       R9,@(28,R15)
    00005436 7F20                   ADD         #32,R15
    00005438              L1037:
             tskcmd.c       7862                         Sp[devno][spdptn].ac, 
             tskcmd.c       7863                         Sp[devno][spdptn].fl, 
             tskcmd.c       7864                         Sp[devno][spdptn].fh, 
             tskcmd.c       7865                         Sp[devno][spdptn].gl );
             tskcmd.c       7866          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7867    
             tskcmd.c       7868      case 4: // 4． Y0軸指定位置移動
             tskcmd.c       7869          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00005438 7FFC                   ADD         #-4,R15
    0000543A 6583                   MOV         R8,R5
    0000543C 31F1602B               MOV.L       @(172:12,R15),R1; movval
    00005440 E700                   MOV         #0,R7      ; H'00000000
    00005442 E601                   MOV         #1,R6      ; H'00000001
    00005444 2F12                   MOV.L       R1,@R15
    00005446 A164                   BRA         L1058
    00005448 E451                   MOV         #81,R4     ; H'00000051
    0000544A              L1038:
             tskcmd.c       7870          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7871          pProcDat->Stp++;
             tskcmd.c       7872          break;
             tskcmd.c       7873    
             tskcmd.c       7874      case 5: // 5． Z軸吸引高さ位置移動
             tskcmd.c       7875          devno  = MT_Z0;
             tskcmd.c       7876          movptn = pProcAdr->step[actstep].par06;
             tskcmd.c       7877          movval = GetPositionValue(movptn);
    0000544A E014                   MOV         #20,R0     ; H'00000014
    0000544C 4E80                   MULR        R0,R14
    0000544E D286                   MOV.L       L1384+28,R2; __$pProcAdr
    00005450 6522                   MOV.L       @R2,R5     ; pProcAdr
    00005452 7505                   ADD         #5,R5
    00005454 60E3                   MOV         R14,R0
    00005456 D37E                   MOV.L       L1384+4,R3 ; __$GetPositionValue
    00005458 430B                   JSR         @R3
    0000545A 045C                   MOV.B       @(R0,R5),R4; pProcAdr->step[].par06
    0000545C 3F01202A               MOV.L       R0,@(168:12,R15); movval
    00005460 A14F                   BRA         L1055
    00005462 0009                   NOP
    00005464              L1039:
             tskcmd.c       7878    
             tskcmd.c       7879          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       7880          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7881          pProcDat->Stp++;
             tskcmd.c       7882          break;
             tskcmd.c       7883    
             tskcmd.c       7884      case 6: // 6． 圧力基板制御：未指定電磁弁ON、指定電磁弁OFF
             tskcmd.c       7885          vout.target = 0x01fff;
    00005464 06001FFF               MOVI20      #8191,R6   ; H'00001FFF
    00005468 D180                   MOV.L       L1384+32,R1; __$vout
             tskcmd.c       7886          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
    0000546A D381                   MOV.L       L1384+36,R3; __$NzlTargetGet
    0000546C 430B                   JSR         @R3
    0000546E 2161                   MOV.W       R6,@R1     ; vout.target
    00005470 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    00005474 D57D                   MOV.L       L1384+32,R5; __$vout
    00005476 A0C8                   BRA         L1061
    00005478 204A                   XOR         R4,R0
    0000547A              L1040:
             tskcmd.c       7887          
             tskcmd.c       7888          mbx_send    (
             tskcmd.c       7889                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7890                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7891                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7892                          prid1,               // prid1
             tskcmd.c       7893                          bcid,                // bcid
             tskcmd.c       7894                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       7895                          inf1,                // sts
             tskcmd.c       7896                          inf2,                // sts2
             tskcmd.c       7897                          (UB *)&vout.target,  // data
             tskcmd.c       7898                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7899                      );
             tskcmd.c       7900          pProcDat->Stp++;
             tskcmd.c       7901          break;
             tskcmd.c       7902    
             tskcmd.c       7903      case 7: // 7． P軸吸引速度設定
             tskcmd.c       7904          devno  = MT_Z0;
             tskcmd.c       7905          spdptn = (pProcAdr->step[actstep].par05 >> 4);
    0000547A E014                   MOV         #20,R0     ; H'00000014
    0000547C 62E3                   MOV         R14,R2
    0000547E 4280                   MULR        R0,R2
    00005480 DA79                   MOV.L       L1384+28,R10; __$pProcAdr
    00005482 67A2                   MOV.L       @R10,R7    ; pProcAdr
    00005484 E4FC                   MOV         #-4,R4     ; H'FFFFFFFC
    00005486 372C                   ADD         R2,R7
    00005488 30718004               MOVU.B      @(4,R7),R0 ; pProcAdr->step[].par05
    0000548C 3F21202C               MOV.L       R2,@(176:12,R15)
    00005490 404C                   SHAD        R4,R0
    00005492 3F0100B4               MOV.B       R0,@(180:12,R15)
             tskcmd.c       7906          movptn = pProcAdr->step[actstep].par06;             // 吸引終了高さ
             tskcmd.c       7907          movval = GetPositionValue(movptn);
    00005496 8475                   MOV.B       @(5,R7),R0 ; pProcAdr->step[].par06
    00005498 D36D                   MOV.L       L1384+4,R3 ; __$GetPositionValue
    0000549A 430B                   JSR         @R3
    0000549C 6403                   MOV         R0,R4
             tskcmd.c       7908    
             tskcmd.c       7909          MAC_SPEED_SET( devno, 
    0000549E 35F180B4               MOVU.B      @(180,R15),R5
    000054A2 3F01202A               MOV.L       R0,@(168:12,R15); movval
    000054A6 E00C                   MOV         #12,R0     ; H'0000000C
    000054A8 4580                   MULR        R0,R5
    000054AA D66A                   MOV.L       L1384+8,R6 ; __$Sp
    000054AC 356C                   ADD         R6,R5
    000054AE 3151503C               MOV.W       @(120:12,R5),R1; Sp[].ac
    000054B2 3F51202E               MOV.L       R5,@(184:12,R15)
    000054B6 3F111022               MOV.W       R1,@(68:12,R15); mp.accel_type
    000054BA D567                   MOV.L       L1384+12,R5; _GetFactor
    000054BC 450B                   JSR         @R5
    000054BE E403                   MOV         #3,R4      ; H'00000003
    000054C0 31F1602E               MOV.L       @(184:12,R15),R1
    000054C4 E340                   MOV         #64,R3     ; H'00000040
    000054C6 3711601F               MOV.L       @(124:12,R1),R7; Sp[].fl
    000054CA 3C116020               MOV.L       @(128:12,R1),R12; Sp[].fh
    000054CE 3D11903D               MOVU.W      @(122,R1),R13; Sp[].gl
    000054D2 33FC                   ADD         R15,R3
    000054D4 E100                   MOV         #0,R1      ; H'00000000
    000054D6 2302                   MOV.L       R0,@R3     ; mp.factor
    000054D8 1372                   MOV.L       R7,@(8,R3) ; mp.FL
    000054DA 13C3                   MOV.L       R12,@(12,R3); mp.FH
    000054DC 13D4                   MOV.L       R13,@(16,R3); mp.utime
    000054DE 13D5                   MOV.L       R13,@(20,R3); mp.dtime
    000054E0 1316                   MOV.L       R1,@(24,R3); mp.us
    000054E2 1317                   MOV.L       R1,@(28,R3); mp.ds
    000054E4 7FE0                   ADD         #-32,R15
    000054E6 61F3                   MOV         R15,R1
    000054E8 7160                   ADD         #96,R1
    000054EA 5511                   MOV.L       @(4,R1),R5 ; (part of)mp
    000054EC 5C15                   MOV.L       @(20,R1),R12; (part of)mp
    000054EE 6212                   MOV.L       @R1,R2     ; (part of)mp
    000054F0 1F51                   MOV.L       R5,@(4,R15)
    000054F2 5412                   MOV.L       @(8,R1),R4 ; (part of)mp
    000054F4 5713                   MOV.L       @(12,R1),R7; (part of)mp
    000054F6 5514                   MOV.L       @(16,R1),R5; (part of)mp
    000054F8 1FC5                   MOV.L       R12,@(20,R15)
    000054FA 5C16                   MOV.L       @(24,R1),R12; (part of)mp
    000054FC 5D17                   MOV.L       @(28,R1),R13; (part of)mp
    000054FE 2F22                   MOV.L       R2,@R15
    00005500 1F42                   MOV.L       R4,@(8,R15)
    00005502 E402                   MOV         #2,R4      ; H'00000002
    00005504 1F73                   MOV.L       R7,@(12,R15)
    00005506 1F54                   MOV.L       R5,@(16,R15)
    00005508 1FC6                   MOV.L       R12,@(24,R15)
    0000550A DC54                   MOV.L       L1384+16,R12; _motor_SET
    0000550C 4C0B                   JSR         @R12
    0000550E 1FD7                   MOV.L       R13,@(28,R15)
    00005510 7F20                   ADD         #32,R15
             tskcmd.c       7910                         Sp[devno][spdptn].ac, 
             tskcmd.c       7911                         Sp[devno][spdptn].fl, 
             tskcmd.c       7912                         Sp[devno][spdptn].fh, 
             tskcmd.c       7913                         Sp[devno][spdptn].gl );
             tskcmd.c       7914    
             tskcmd.c       7915          devno  = MT_P0;
             tskcmd.c       7916          spdptn = (pProcAdr->step[actstep].par05 & 0x0f);
             tskcmd.c       7917          MAC_SPEED_SET( devno, 
    00005512 61A2                   MOV.L       @R10,R1    ; pProcAdr
    00005514 30F1602C               MOV.L       @(176:12,R15),R0
    00005518 7104                   ADD         #4,R1
    0000551A EC60                   MOV         #96,R12    ; H'00000060
    0000551C 001C                   MOV.B       @(R0,R1),R0; pProcAdr->step[].par05
    0000551E 3CFC                   ADD         R15,R12
    00005520 DA4C                   MOV.L       L1384+8,R10; __$Sp
    00005522 C90F                   AND         #15,R0
    00005524 6403                   MOV         R0,R4
    00005526 E00C                   MOV         #12,R0     ; H'0000000C
    00005528 4480                   MULR        R0,R4
    0000552A 34AC                   ADD         R10,R4
    0000552C 3041505A               MOV.W       @(180:12,R4),R0; Sp[].ac
    00005530 3F41202B               MOV.L       R4,@(172:12,R15)
    00005534 E403                   MOV         #3,R4      ; H'00000003
    00005536 D548                   MOV.L       L1384+12,R5; _GetFactor
    00005538 450B                   JSR         @R5
    0000553A 81C2                   MOV.W       R0,@(4,R12); mp.accel_type
    0000553C 32F1602B               MOV.L       @(172:12,R15),R2
    00005540 E100                   MOV         #0,R1      ; H'00000000
    00005542 2C02                   MOV.L       R0,@R12    ; mp.factor
    00005544 3721602E               MOV.L       @(184:12,R2),R7; Sp[].fl
    00005548 3A21602F               MOV.L       @(188:12,R2),R10; Sp[].fh
    0000554C 3D21905B               MOVU.W      @(182,R2),R13; Sp[].gl
    00005550 1C72                   MOV.L       R7,@(8,R12); mp.FL
    00005552 1CA3                   MOV.L       R10,@(12,R12); mp.FH
    00005554 1CD4                   MOV.L       R13,@(16,R12); mp.utime
    00005556 1CD5                   MOV.L       R13,@(20,R12); mp.dtime
    00005558 1C16                   MOV.L       R1,@(24,R12); mp.us
    0000555A 1C17                   MOV.L       R1,@(28,R12); mp.ds
    0000555C 7FE0                   ADD         #-32,R15
    0000555E EA80                   MOV         #-128,R10  ; H'FFFFFF80
    00005560 65F3                   MOV         R15,R5
    00005562 6AAC                   EXTU.B      R10,R10
    00005564 E403                   MOV         #3,R4      ; H'00000003
    00005566 35AC                   ADD         R10,R5
    00005568 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    0000556A 5255                   MOV.L       @(20,R5),R2; (part of)mp
    0000556C 1F62                   MOV.L       R6,@(8,R15)
    0000556E 5654                   MOV.L       @(16,R5),R6; (part of)mp
    00005570 6C52                   MOV.L       @R5,R12    ; (part of)mp
    00005572 5D51                   MOV.L       @(4,R5),R13; (part of)mp
    00005574 5A53                   MOV.L       @(12,R5),R10; (part of)mp
    00005576 1F64                   MOV.L       R6,@(16,R15)
    00005578 1F25                   MOV.L       R2,@(20,R15)
    0000557A 5256                   MOV.L       @(24,R5),R2; (part of)mp
    0000557C 5657                   MOV.L       @(28,R5),R6; (part of)mp
    0000557E 2FC2                   MOV.L       R12,@R15
    00005580 1FD1                   MOV.L       R13,@(4,R15)
    00005582 1FA3                   MOV.L       R10,@(12,R15)
    00005584 1F26                   MOV.L       R2,@(24,R15)
    00005586 DD35                   MOV.L       L1384+16,R13; _motor_SET
    00005588 4D0B                   JSR         @R13
    0000558A 1F67                   MOV.L       R6,@(28,R15)
    0000558C 7F20                   ADD         #32,R15
             tskcmd.c       7918                         Sp[devno][spdptn].ac, 
             tskcmd.c       7919                         Sp[devno][spdptn].fl, 
             tskcmd.c       7920                         Sp[devno][spdptn].fh, 
             tskcmd.c       7921                         Sp[devno][spdptn].gl );
             tskcmd.c       7922          pProcDat->Stp++;
    0000558E D234                   MOV.L       L1384+20,R2; __$pProcDat
    00005590 6622                   MOV.L       @R2,R6     ; pProcDat
    00005592 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005594 7001                   ADD         #1,R0
    00005596 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005598              L1041:
             tskcmd.c       7923          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       7924    
             tskcmd.c       7925      case 8: // 8． 吸引開始（P軸吸引 & Z軸下降）
             tskcmd.c       7926    //      MapAction( UB prid1, UB bcid, UB mm1, UB mm2, INT pppp1, INT pppp2 );
             tskcmd.c       7927          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
    00005598 E014                   MOV         #20,R0     ; H'00000014
    0000559A 4E80                   MULR        R0,R14
    0000559C DC32                   MOV.L       L1384+28,R12; __$pProcAdr
    0000559E 61C2                   MOV.L       @R12,R1    ; pProcAdr
    000055A0 710C                   ADD         #12,R1
    000055A2 60E3                   MOV         R14,R0
    000055A4 011E                   MOV.L       @(R0,R1),R1; pProcAdr->step[].par13
    000055A6 2F16                   MOV.L       R1,@-R15
    000055A8 7FFC                   ADD         #-4,R15
    000055AA E703                   MOV         #3,R7      ; H'00000003
    000055AC 3DF1602C               MOV.L       @(176:12,R15),R13; movval
    000055B0 E602                   MOV         #2,R6      ; H'00000002
    000055B2 6583                   MOV         R8,R5
    000055B4 2FD2                   MOV.L       R13,@R15
    000055B6 D32F                   MOV.L       L1384+40,R3; __$MapAction
    000055B8 430B                   JSR         @R3
    000055BA 6493                   MOV         R9,R4
    000055BC 7F08                   ADD         #8,R15
    000055BE DE28                   MOV.L       L1384+20,R14; __$pProcDat
    000055C0 65E2                   MOV.L       @R14,R5    ; pProcDat
    000055C2 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    000055C4 A0B0                   BRA         L1064
    000055C6 6203                   MOV         R0,R2
    000055C8              L1042:
             tskcmd.c       7928    
             tskcmd.c       7929          
             tskcmd.c       7930          
             tskcmd.c       7931          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7932          pProcDat->Stp++;
             tskcmd.c       7933          break;
             tskcmd.c       7934    
             tskcmd.c       7935      case 9: // 9． 圧力基板制御：吸引動作中に指定したノズルチャンネルの圧力を監視
             tskcmd.c       7936              //     ※各チャンネルの圧力センサ値が設定値を上回った場合、エラーとし電磁弁をONにする。
             tskcmd.c       7937          mbx_send    (
             tskcmd.c       7938                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7939                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7940                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7941                          prid1,               // prid1
             tskcmd.c       7942                          bcid,                // bcid
             tskcmd.c       7943                          ID_MSG_PRESSREN,     // msgid
             tskcmd.c       7944                          inf1,                // sts
             tskcmd.c       7945                          inf2,                // sts2
             tskcmd.c       7946                          &dummy,              // data
             tskcmd.c       7947                          sizeof( dummy )      // siz
             tskcmd.c       7948                      );
    000055C8 E401                   MOV         #1,R4      ; H'00000001
    000055CA 2F46                   MOV.L       R4,@-R15
    000055CC EA84                   MOV         #-124,R10  ; H'FFFFFF84
    000055CE 6AAC                   EXTU.B      R10,R10
    000055D0 65F3                   MOV         R15,R5
    000055D2 35AC                   ADD         R10,R5
    000055D4 2F56                   MOV.L       R5,@-R15
    000055D6 2FD6                   MOV.L       R13,@-R15
    000055D8 2FC6                   MOV.L       R12,@-R15
    000055DA EC98                   MOV         #-104,R12  ; H'FFFFFF98
    000055DC 6CCC                   EXTU.B      R12,R12
    000055DE 2FC6                   MOV.L       R12,@-R15
    000055E0 2F86                   MOV.L       R8,@-R15
    000055E2 E60D                   MOV         #13,R6     ; H'0000000D
    000055E4 E50C                   MOV         #12,R5     ; H'0000000C
    000055E6 6463                   MOV         R6,R4
    000055E8 D823                   MOV.L       L1384+44,R8; _mbx_send
    000055EA 480B                   JSR         @R8
    000055EC 6793                   MOV         R9,R7
    000055EE 7F18                   ADD         #24,R15
    000055F0 D91B                   MOV.L       L1384+20,R9; __$pProcDat
    000055F2 6592                   MOV.L       @R9,R5     ; pProcDat
    000055F4 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    000055F6 A097                   BRA         L1064
    000055F8 6203                   MOV         R0,R2
    000055FA              L1043:
             tskcmd.c       7949          pProcDat->Stp++;
             tskcmd.c       7950          break;
             tskcmd.c       7951    
             tskcmd.c       7952      case 10:// 10．吸引動作終了
             tskcmd.c       7953          pProcDat->Stp++;
    000055FA 7201                   ADD         #1,R2
    000055FC 6023                   MOV         R2,R0
    000055FE 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00005600              L1044:
             tskcmd.c       7954    
             tskcmd.c       7955    
             tskcmd.c       7956      case 11:// 11．圧力基板制御：圧力監視終了。全てのノズルチャンネルの電磁弁をOFFにする。
             tskcmd.c       7957          vout.target = 0x0fff;
    00005600 04000FFF               MOVI20      #4095,R4   ; H'00000FFF
    00005604 D519                   MOV.L       L1384+32,R5; __$vout
    00005606 2541                   MOV.W       R4,@R5     ; vout.target
             tskcmd.c       7958          vout.valout = 0x0000;
    00005608 E000                   MOV         #0,R0      ; H'00000000
    0000560A              L1061:
    0000560A EE04                   MOV         #4,R14     ; H'00000004
    0000560C 8151                   MOV.W       R0,@(2,R5) ; vout.valout
    0000560E 2FE6                   MOV.L       R14,@-R15
    00005610 D116                   MOV.L       L1384+32,R1; __$vout
    00005612 2F16                   MOV.L       R1,@-R15
    00005614 2FD6                   MOV.L       R13,@-R15
    00005616 2FC6                   MOV.L       R12,@-R15
    00005618 EA9B                   MOV         #-101,R10  ; H'FFFFFF9B
    0000561A 6AAC                   EXTU.B      R10,R10
    0000561C 2FA6                   MOV.L       R10,@-R15
    0000561E 2F86                   MOV.L       R8,@-R15
    00005620 E60D                   MOV         #13,R6     ; H'0000000D
    00005622 E50C                   MOV         #12,R5     ; H'0000000C
    00005624 6463                   MOV         R6,R4
    00005626 D814                   MOV.L       L1384+44,R8; _mbx_send
    00005628 480B                   JSR         @R8
    0000562A 6793                   MOV         R9,R7
    0000562C 7F18                   ADD         #24,R15
    0000562E D90C                   MOV.L       L1384+20,R9; __$pProcDat
    00005630 6592                   MOV.L       @R9,R5     ; pProcDat
    00005632 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00005634 A078                   BRA         L1064
    00005636 6203                   MOV         R0,R2
    00005638              L1045:
             tskcmd.c       7959          
             tskcmd.c       7960          mbx_send    (
             tskcmd.c       7961                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       7962                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       7963                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       7964                          prid1,               // prid1
             tskcmd.c       7965                          bcid,                // bcid
             tskcmd.c       7966                          ID_MSG_VALVEOUT,     // msgid
             tskcmd.c       7967                          inf1,                // sts
             tskcmd.c       7968                          inf2,                // sts2
             tskcmd.c       7969                          (UB *)&vout.target,        // data
             tskcmd.c       7970                          sizeof( ST_VOUT )    // siz
             tskcmd.c       7971                      );
             tskcmd.c       7972          pProcDat->Stp++;
             tskcmd.c       7973          break;
             tskcmd.c       7974    
             tskcmd.c       7975      case 12:// 12．指定時間ウェイト
             tskcmd.c       7976          pProcDat->Stp++;
    00005638 7201                   ADD         #1,R2
             tskcmd.c       7977          WaitAction( prid1, bcid, 10 );
    0000563A E60A                   MOV         #10,R6     ; H'0000000A
    0000563C 6023                   MOV         R2,R0
    0000563E 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00005640 6583                   MOV         R8,R5
    00005642 D30E                   MOV.L       L1384+48,R3; __$WaitAction
    00005644 430B                   JSR         @R3
    00005646 6493                   MOV         R9,R4
    00005648 A071                   BRA         L1050
    0000564A 0009                   NOP
    0000564C              L1384:
    0000564C <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005650 <00000000>             .DATA.L     __$GetPositionValue
    00005654 <00000000>             .DATA.L     __$Sp
    00005658 <00000000>             .DATA.L     _GetFactor
    0000565C <00000000>             .DATA.L     _motor_SET
    00005660 <00000000>             .DATA.L     __$pProcDat
    00005664 <00000005>             .DATA.L     H'00000005+__$SpPtn
    00005668 <00000000>             .DATA.L     __$pProcAdr
    0000566C <00000000>             .DATA.L     __$vout
    00005670 <00000000>             .DATA.L     __$NzlTargetGet
    00005674 <00000000>             .DATA.L     __$MapAction
    00005678 <00000000>             .DATA.L     _mbx_send
    0000567C <00000000>             .DATA.L     __$WaitAction
    00005680              L1046:
             tskcmd.c       7978          break;
             tskcmd.c       7979    
             tskcmd.c       7980      case 13:// 13．Z軸退避高さへ移動
             tskcmd.c       7981          devno  = MT_Z0;
             tskcmd.c       7982          spdptn = SpPtn.Z0_SpdNmlPtn;
    00005680 D940                   MOV.L       L1091+2,R9 ; H'00000006+__$SpPtn
    00005682 6090                   MOV.B       @R9,R0     ; SpPtn.Z0_SpdNmlPtn
    00005684 E984                   MOV         #-124,R9   ; H'FFFFFF84
             tskcmd.c       7983          movval = GetPositionValue(POS_Z0_TAIHI);
    00005686 E407                   MOV         #7,R4      ; H'00000007
    00005688 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
    0000568C B750                   BSR         __$GetPositionValue
    0000568E 699C                   EXTU.B      R9,R9
    00005690 39FC                   ADD         R15,R9
    00005692 E403                   MOV         #3,R4      ; H'00000003
             tskcmd.c       7984    
             tskcmd.c       7985          MAC_SPEED_SET( devno, 
    00005694 3BF180A4               MOVU.B      @(164,R15),R11; spdptn
    00005698 1909                   MOV.L       R0,@(36,R9); movval
    0000569A E00C                   MOV         #12,R0     ; H'0000000C
    0000569C 4B80                   MULR        R0,R11
    0000569E DD3A                   MOV.L       L1091+6,R13; __$Sp
    000056A0 3BDC                   ADD         R13,R11
    000056A2 19BA                   MOV.L       R11,@(40,R9)
    000056A4 30B1503C               MOV.W       @(120:12,R11),R0; Sp[].ac
    000056A8 DC38                   MOV.L       L1091+10,R12; _GetFactor
    000056AA 4C0B                   JSR         @R12
    000056AC 8192                   MOV.W       R0,@(4,R9) ; mp.accel_type
    000056AE E500                   MOV         #0,R5      ; H'00000000
    000056B0 2902                   MOV.L       R0,@R9     ; mp.factor
    000056B2 3DB1601F               MOV.L       @(124:12,R11),R13; Sp[].fl
    000056B6 3EB16020               MOV.L       @(128:12,R11),R14; Sp[].fh
    000056BA 34B1903D               MOVU.W      @(122,R11),R4; Sp[].gl
    000056BE 19D2                   MOV.L       R13,@(8,R9); mp.FL
    000056C0 19E3                   MOV.L       R14,@(12,R9); mp.FH
    000056C2 1944                   MOV.L       R4,@(16,R9); mp.utime
    000056C4 1945                   MOV.L       R4,@(20,R9); mp.dtime
    000056C6 1956                   MOV.L       R5,@(24,R9); mp.us
    000056C8 1957                   MOV.L       R5,@(28,R9); mp.ds
    000056CA 7FE0                   ADD         #-32,R15
    000056CC E5A4                   MOV         #-92,R5    ; H'FFFFFFA4
    000056CE 6CF3                   MOV         R15,R12
    000056D0 655C                   EXTU.B      R5,R5
    000056D2 E402                   MOV         #2,R4      ; H'00000002
    000056D4 3C5C                   ADD         R5,R12
    000056D6 57C3                   MOV.L       @(12,R12),R7; (part of)mp
    000056D8 6EC2                   MOV.L       @R12,R14   ; (part of)mp
    000056DA 56C1                   MOV.L       @(4,R12),R6; (part of)mp
    000056DC 51C2                   MOV.L       @(8,R12),R1; (part of)mp
    000056DE 1F73                   MOV.L       R7,@(12,R15)
    000056E0 52C4                   MOV.L       @(16,R12),R2; (part of)mp
    000056E2 59C5                   MOV.L       @(20,R12),R9; (part of)mp
    000056E4 5BC6                   MOV.L       @(24,R12),R11; (part of)mp
    000056E6 57C7                   MOV.L       @(28,R12),R7; (part of)mp
    000056E8 2FE2                   MOV.L       R14,@R15
    000056EA 1F61                   MOV.L       R6,@(4,R15)
    000056EC 1F12                   MOV.L       R1,@(8,R15)
    000056EE 1F24                   MOV.L       R2,@(16,R15)
    000056F0 1F95                   MOV.L       R9,@(20,R15)
    000056F2 1FB6                   MOV.L       R11,@(24,R15)
    000056F4 D226                   MOV.L       L1091+14,R2; _motor_SET
    000056F6 420B                   JSR         @R2
    000056F8 1F77                   MOV.L       R7,@(28,R15)
    000056FA A002                   BRA         L1055
    000056FC 7F20                   ADD         #32,R15
    000056FE              L1047:
             tskcmd.c       7986                         Sp[devno][spdptn].ac, 
             tskcmd.c       7987                         Sp[devno][spdptn].fl, 
             tskcmd.c       7988                         Sp[devno][spdptn].fh, 
             tskcmd.c       7989                         Sp[devno][spdptn].gl );
             tskcmd.c       7990    
             tskcmd.c       7991          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       7992          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       7993          pProcDat->Stp++;
             tskcmd.c       7994          break;
             tskcmd.c       7995          
             tskcmd.c       7996      case 14:    // 
             tskcmd.c       7997          result = E_SUCCESS;
    000056FE A013                   BRA         L1064
    00005700 EB00                   MOV         #0,R11     ; H'00000000
    00005702              L1035:
    00005702              L1055:
    00005702 7FFC                   ADD         #-4,R15
    00005704 6583                   MOV         R8,R5
    00005706 37F1602B               MOV.L       @(172:12,R15),R7; movval
    0000570A E451                   MOV         #81,R4     ; H'00000051
    0000570C E602                   MOV         #2,R6      ; H'00000002
    0000570E 2F72                   MOV.L       R7,@R15
    00005710 E700                   MOV         #0,R7      ; H'00000000
    00005712              L1058:
    00005712 D320                   MOV.L       L1091+18,R3; __$AbsmvAction
    00005714 434B                   JSR/N       @R3
    00005716 7F04                   ADD         #4,R15
    00005718 6B03                   MOV         R0,R11
    0000571A D81F                   MOV.L       L1091+22,R8; __$pProcDat
    0000571C 6582                   MOV.L       @R8,R5     ; pProcDat
    0000571E 2008                   TST         R0,R0
    00005720 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00005722 8F01                   BF/S        L1064
    00005724 6203                   MOV         R0,R2
    00005726 6BA3                   MOV         R10,R11
    00005728              L1064:
    00005728 7201                   ADD         #1,R2
    0000572A 6023                   MOV         R2,R0
    0000572C 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    0000572E              L1050:
             tskcmd.c       7998          pProcDat->Stp++;
             tskcmd.c       7999          break;
             tskcmd.c       8000      }
             tskcmd.c       8001      
             tskcmd.c       8002      return( result );
    0000572E 60B3                   MOV         R11,R0
    00005730 030000BC               MOVI20      #188,R3    ; H'000000BC
    00005734 3F3C                   ADD         R3,R15
    00005736 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       8003    }
    00005738 006B                   RTS/N
             tskcmd.c       8004    
             tskcmd.c       8005    /***********************************************************************
             tskcmd.c       8006    * 
             tskcmd.c       8007    * [概要]  吐出
             tskcmd.c       8008    * [引数]  
             tskcmd.c       8009    * [戻値]  
             tskcmd.c       8010    * [補足]  P1  P2    P3    P4       P5   P6   P7   P8   P9   P10   P11   P12   P13   P14
             tskcmd.c       8011    *           *8       ﾊﾟﾀ-ﾝ  吸引位置 -    -    -    -
             tskcmd.c       8012    *
             tskcmd.c       8013    ***********************************************************************/
             tskcmd.c       8014    static ER  CmdActionPut( T_CMD_MSG* mrcv )
    0000573A              __$CmdActionPut:                 ; function: __$CmdActionPut
                                                           ; frame size=252
    0000573A 49F0                   MOVMU.L     R9,@-R15
    0000573C 03F0FF40               MOVI20      #-192,R3   ; H'FFFFFF40
    00005740 3F3C                   ADD         R3,R15
             tskcmd.c       8015    {
             tskcmd.c       8016      ER result = E_CONTINUE;
             tskcmd.c       8017      INT tskid;
             tskcmd.c       8018      UB prid1;
             tskcmd.c       8019      UB bcid;
             tskcmd.c       8020      UB msgid;
             tskcmd.c       8021      UB inf1;
             tskcmd.c       8022      UB inf2;
             tskcmd.c       8023      UB actstep;
             tskcmd.c       8024      UB spdptn;
             tskcmd.c       8025      UB devno;
             tskcmd.c       8026      UB movptn;
             tskcmd.c       8027      UB dummy;
             tskcmd.c       8028      INT movval;
             tskcmd.c       8029    
             tskcmd.c       8030      bcid    = mrcv->msgdata.bcid;
    00005742 3A41801A               MOVU.B      @(26,R4),R10; (mrcv)->bcid
             tskcmd.c       8031      prid1   = mrcv->msgdata.prid1;
             tskcmd.c       8032      actstep = bcctrl[bcid].actstp - 1 ;
    00005746 D215                   MOV.L       L1091+26,R2; H'00000002+__$bcctrl
    00005748 60A3                   MOV         R10,R0
             tskcmd.c       8033      tskid    = mrcv->msgdata.tskid;
    0000574A 5745                   MOV.L       @(20,R4),R7; (mrcv)->tskid
    0000574C 4008                   SHLL2       R0
    0000574E EDF1                   MOV         #-15,R13   ; H'FFFFFFF1
    00005750 4000                   SHLL        R0
             tskcmd.c       8034      msgid    = mrcv->msgdata.msgid;
             tskcmd.c       8035      
             tskcmd.c       8036      switch( pProcDat->Stp )
    00005752 D911                   MOV.L       L1091+22,R9; __$pProcDat
    00005754 3B418018               MOVU.B      @(24,R4),R11; (mrcv)->prid1
    00005758 012C                   MOV.B       @(R0,R2),R1; bcctrl[].actstp
    0000575A 6DDC                   EXTU.B      R13,R13
    0000575C 3241801B               MOVU.B      @(27,R4),R2; (mrcv)->msgid
    00005760 6492                   MOV.L       @R9,R4     ; pProcDat
    00005762 71FF                   ADD         #-1,R1
    00005764 6E1C                   EXTU.B      R1,R14
    00005766 E10D                   MOV         #13,R1     ; H'0000000D
    00005768 35418002               MOVU.B      @(2,R4),R5 ; (pProcDat)->Stp
    0000576C 6CD3                   MOV         R13,R12
    0000576E 3516                   CMP/HI      R1,R5
    00005770 8F02                   BF/S        L1418
    00005772 6653                   MOV         R5,R6
    00005774 A241                   BRA         L1090
    00005776 0009                   NOP
    00005778              L1418:
    00005778 4500                   SHLL        R5
    0000577A C709                   MOVA        L1092,R0
    0000577C 005D                   MOV.W       @(R0,R5),R0
    0000577E 0023                   BRAF        R0
    00005780 0009                   NOP
    00005782              L1091:
    00005782 00000002               .RES.W      1
    00005784 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005788 <00000000>             .DATA.L     __$Sp
    0000578C <00000000>             .DATA.L     _GetFactor
    00005790 <00000000>             .DATA.L     _motor_SET
    00005794 <00000000>             .DATA.L     __$AbsmvAction
    00005798 <00000000>             .DATA.L     __$pProcDat
    0000579C <00000002>             .DATA.L     H'00000002+__$bcctrl
    000057A0              L1092:
    000057A0 03CA                   .DATA.W     L1074-L1091
    000057A2 03D0                   .DATA.W     L1075-L1091
    000057A4 0452                   .DATA.W     L1076-L1091
    000057A6 0336                   .DATA.W     L1077-L1091
    000057A8 03BA                   .DATA.W     L1078-L1091
    000057AA 02F2                   .DATA.W     L1079-L1091
    000057AC 02B0                   .DATA.W     L1080-L1091
    000057AE 0126                   .DATA.W     L1081-L1091
    000057B0 0256                   .DATA.W     L1082-L1091
    000057B2 0284                   .DATA.W     L1083-L1091
    000057B4 00DE                   .DATA.W     L1084-L1091
    000057B6 003E                   .DATA.W     L1085-L1091
    000057B8 0058                   .DATA.W     L1086-L1091
    000057BA 003A                   .DATA.W     L1087-L1091
    000057BC              L1087:
             tskcmd.c       8037      {
             tskcmd.c       8038      case 0: // 0． 待機
             tskcmd.c       8039          pProcDat->Stp++;
             tskcmd.c       8040          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8041    
             tskcmd.c       8042      //****************************************************
             tskcmd.c       8043      //***                    吸引                      ***
             tskcmd.c       8044      //****************************************************
             tskcmd.c       8045      case 1: // 1． Z軸通常速度設定
             tskcmd.c       8046          devno  = MT_Z0;
             tskcmd.c       8047          spdptn = SpPtn.Z0_SpdNmlPtn;                    // [Z]通常速度
             tskcmd.c       8048          movval = GetPositionValue(POS_Z0_TAIHI);        // [Z]退避位置
             tskcmd.c       8049    
             tskcmd.c       8050          MAC_SPEED_SET( devno, 
             tskcmd.c       8051                         Sp[devno][spdptn].ac, 
             tskcmd.c       8052                         Sp[devno][spdptn].fl, 
             tskcmd.c       8053                         Sp[devno][spdptn].fh, 
             tskcmd.c       8054                         Sp[devno][spdptn].gl );
             tskcmd.c       8055          pProcDat->Stp++;
             tskcmd.c       8056          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8057    
             tskcmd.c       8058      case 2: // 2． Z軸退避高さへ移動
             tskcmd.c       8059          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8060          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8061          pProcDat->Stp++;
             tskcmd.c       8062          break;
             tskcmd.c       8063    
             tskcmd.c       8064      case 3: // 3． Y0軸通常速度設定
             tskcmd.c       8065          devno  = MT_Y0;
             tskcmd.c       8066          spdptn = SpPtn.Y0_SpdNmlPtn;                    // [Y0]通常速度
             tskcmd.c       8067          movptn = pProcAdr->step[actstep].par03;         // [Y0]吸引位置
             tskcmd.c       8068          movval = GetPositionValue(movptn);
             tskcmd.c       8069          
             tskcmd.c       8070          MAC_SPEED_SET( devno, 
             tskcmd.c       8071                         Sp[devno][spdptn].ac, 
             tskcmd.c       8072                         Sp[devno][spdptn].fl, 
             tskcmd.c       8073                         Sp[devno][spdptn].fh, 
             tskcmd.c       8074                         Sp[devno][spdptn].gl );
             tskcmd.c       8075          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8076    
             tskcmd.c       8077      case 4: // 4． Y0軸指定位置移動
             tskcmd.c       8078          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8079          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8080          pProcDat->Stp++;
             tskcmd.c       8081          break;
             tskcmd.c       8082    
             tskcmd.c       8083      case 5: // 5． Z軸吸引高さ位置移動
             tskcmd.c       8084          devno  = MT_Z0;
             tskcmd.c       8085          movptn = pProcAdr->step[actstep].par06;         // [Z]吸引開始高さ
             tskcmd.c       8086          movval = GetPositionValue(movptn);
             tskcmd.c       8087    
             tskcmd.c       8088          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8089          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8090          pProcDat->Stp++;
             tskcmd.c       8091          break;
             tskcmd.c       8092    
             tskcmd.c       8093      case 6: // 6． 圧力基板制御：未指定電磁弁ON、指定電磁弁OFF
             tskcmd.c       8094          vout.target = 0x0fff;
             tskcmd.c       8095          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
             tskcmd.c       8096          
             tskcmd.c       8097          mbx_send    (
             tskcmd.c       8098                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8099                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8100                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8101                          prid1,               // prid1
             tskcmd.c       8102                          bcid,                // bcid
             tskcmd.c       8103                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       8104                          inf1,                // sts
             tskcmd.c       8105                          inf2,                // sts2
             tskcmd.c       8106                          (UB *)&vout.target,  // data
             tskcmd.c       8107                          sizeof( ST_VOUT )    // siz
             tskcmd.c       8108                      );
             tskcmd.c       8109          pProcDat->Stp++;
             tskcmd.c       8110          break;
             tskcmd.c       8111    
             tskcmd.c       8112      case 7: // 7． P軸吸引速度設定
             tskcmd.c       8113          devno  = MT_Z0;
             tskcmd.c       8114          spdptn = (pProcAdr->step[actstep].par05 >> 4);  // [Z]吸引下降速度パターン
             tskcmd.c       8115          movptn = pProcAdr->step[actstep].par07;         // [Z]吸引終了高さ
             tskcmd.c       8116          movval = GetPositionValue(movptn);
             tskcmd.c       8117    
             tskcmd.c       8118          MAC_SPEED_SET( devno, 
             tskcmd.c       8119                         Sp[devno][spdptn].ac, 
             tskcmd.c       8120                         Sp[devno][spdptn].fl, 
             tskcmd.c       8121                         Sp[devno][spdptn].fh, 
             tskcmd.c       8122                         Sp[devno][spdptn].gl );
             tskcmd.c       8123    
             tskcmd.c       8124          devno  = MT_P0;
             tskcmd.c       8125          spdptn = (pProcAdr->step[actstep].par05 & 0x0f);// [P]吸引速度パターン
             tskcmd.c       8126          MAC_SPEED_SET( devno, 
             tskcmd.c       8127                         Sp[devno][spdptn].ac, 
             tskcmd.c       8128                         Sp[devno][spdptn].fl, 
             tskcmd.c       8129                         Sp[devno][spdptn].fh, 
             tskcmd.c       8130                         Sp[devno][spdptn].gl );
             tskcmd.c       8131          pProcDat->Stp++;
             tskcmd.c       8132          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8133    
             tskcmd.c       8134      case 8: // 8． 吸引開始（P軸吸引 & Z軸下降）
             tskcmd.c       8135          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
             tskcmd.c       8136          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8137          pProcDat->Stp++;
             tskcmd.c       8138          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8139    
             tskcmd.c       8140      case 9: // 9． 圧力基板制御：吸引動作中に指定したノズルチャンネルの圧力を監視
             tskcmd.c       8141              //     ※各チャンネルの圧力センサ値が設定値を上回った場合、エラーとし電磁弁をONにする。
             tskcmd.c       8142          mbx_send    (
             tskcmd.c       8143                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8144                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8145                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8146                          prid1,               // prid1
             tskcmd.c       8147                          bcid,                // bcid
             tskcmd.c       8148                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8149                          inf1,                // sts
             tskcmd.c       8150                          inf2,                // sts2
             tskcmd.c       8151                          &dummy,              // data
             tskcmd.c       8152                          sizeof( dummy )      // siz
             tskcmd.c       8153                      );
             tskcmd.c       8154          pProcDat->Stp++;
             tskcmd.c       8155          break;
             tskcmd.c       8156    
             tskcmd.c       8157      case 10:// 10．吸引動作終了
             tskcmd.c       8158          if( tskid == ID_TSK_MOTEND )
             tskcmd.c       8159          {
             tskcmd.c       8160              WaitAction( prid1, bcid, 10 );
             tskcmd.c       8161              pProcDat->Stp++;
             tskcmd.c       8162          }
             tskcmd.c       8163          if( tskid == ID_TSK_PUNIT )
             tskcmd.c       8164          {
             tskcmd.c       8165              mbx_send    (
             tskcmd.c       8166                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8167                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8168                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8169                              prid1,               // prid1
             tskcmd.c       8170                              bcid,                // bcid
             tskcmd.c       8171                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8172                              inf1,                // sts
             tskcmd.c       8173                              inf2,                // sts2
             tskcmd.c       8174                              &dummy,              // data
             tskcmd.c       8175                              sizeof( dummy )      // siz
             tskcmd.c       8176                          );
             tskcmd.c       8177          }
             tskcmd.c       8178          break;
             tskcmd.c       8179    
             tskcmd.c       8180      case 11:  // 11．指定時間ウェイト待ち
             tskcmd.c       8181          if( msgid == ID_MSG_PRESSTAN )
             tskcmd.c       8182          {
             tskcmd.c       8183              //読み捨て
             tskcmd.c       8184              break;
             tskcmd.c       8185          }
             tskcmd.c       8186          if( msgid == ID_MSG_TIMWAIT )
             tskcmd.c       8187          {
             tskcmd.c       8188              pProcDat->Stp++;
             tskcmd.c       8189          }
             tskcmd.c       8190          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8191          
             tskcmd.c       8192      case 12:// 12．Z軸退避高さへ移動
             tskcmd.c       8193          devno  = MT_Z0;
             tskcmd.c       8194          spdptn = SpPtn.Z0_SpdNmlPtn;
             tskcmd.c       8195          movval = GetPositionValue(POS_Z0_TAIHI);
             tskcmd.c       8196    
             tskcmd.c       8197          MAC_SPEED_SET( devno, 
             tskcmd.c       8198                         Sp[devno][spdptn].ac, 
             tskcmd.c       8199                         Sp[devno][spdptn].fl, 
             tskcmd.c       8200                         Sp[devno][spdptn].fh, 
             tskcmd.c       8201                         Sp[devno][spdptn].gl );
             tskcmd.c       8202    
             tskcmd.c       8203          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8204          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8205          pProcDat->Stp++;
             tskcmd.c       8206          break;
             tskcmd.c       8207    
             tskcmd.c       8208      case 13:  // 13．終了待ち
             tskcmd.c       8209          result = E_SUCCESS;
    000057BC A21D                   BRA         L1090
    000057BE ED00                   MOV         #0,R13     ; H'00000000
    000057C0              L1085:
    000057C0 E199                   MOV         #-103,R1   ; H'FFFFFF99
    000057C2 611C                   EXTU.B      R1,R1
    000057C4 3210                   CMP/EQ      R1,R2
    000057C6 8B01                   BF          L1419
    000057C8 A217                   BRA         L1090
    000057CA 0009                   NOP
    000057CC              L1419:
    000057CC E1C8                   MOV         #-56,R1    ; H'FFFFFFC8
    000057CE 611C                   EXTU.B      R1,R1
    000057D0 3210                   CMP/EQ      R1,R2
    000057D2 8B02                   BF          L1096
    000057D4 7601                   ADD         #1,R6
    000057D6 6063                   MOV         R6,R0
    000057D8 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    000057DA              L1086:
    000057DA              L1096:
    000057DA DDAC                   MOV.L       L1385,R13  ; H'00000006+__$SpPtn
    000057DC 60D0                   MOV.B       @R13,R0    ; SpPtn.Z0_SpdNmlPtn
    000057DE E407                   MOV         #7,R4      ; H'00000007
    000057E0 3F0100A4               MOV.B       R0,@(164:12,R15); spdptn
    000057E4 B6A4                   BSR         __$GetPositionValue
    000057E6 EB84                   MOV         #-124,R11  ; H'FFFFFF84
    000057E8 E384                   MOV         #-124,R3   ; H'FFFFFF84
    000057EA 6BBC                   EXTU.B      R11,R11
    000057EC 633C                   EXTU.B      R3,R3
    000057EE 3BFC                   ADD         R15,R11
    000057F0 33FC                   ADD         R15,R3
    000057F2 3EF180A4               MOVU.B      @(164,R15),R14; spdptn
    000057F6 1309                   MOV.L       R0,@(36,R3); movval
    000057F8 E00C                   MOV         #12,R0     ; H'0000000C
    000057FA 4E80                   MULR        R0,R14
    000057FC D4A4                   MOV.L       L1385+4,R4 ; __$Sp
    000057FE 3E4C                   ADD         R4,R14
    00005800 E403                   MOV         #3,R4      ; H'00000003
    00005802 13EA                   MOV.L       R14,@(40,R3)
    00005804 30E1503C               MOV.W       @(120:12,R14),R0; Sp[].ac
    00005808 EE00                   MOV         #0,R14     ; H'00000000
    0000580A D5A2                   MOV.L       L1385+8,R5 ; _GetFactor
    0000580C 450B                   JSR         @R5
    0000580E 8132                   MOV.W       R0,@(4,R3) ; mp.accel_type
    00005810 51BA                   MOV.L       @(40,R11),R1
    00005812 2B02                   MOV.L       R0,@R11    ; mp.factor
    00005814 3611601F               MOV.L       @(124:12,R1),R6; Sp[].fl
    00005818 37116020               MOV.L       @(128:12,R1),R7; Sp[].fh
    0000581C 3D11903D               MOVU.W      @(122,R1),R13; Sp[].gl
    00005820 1B62                   MOV.L       R6,@(8,R11); mp.FL
    00005822 1B73                   MOV.L       R7,@(12,R11); mp.FH
    00005824 1BD4                   MOV.L       R13,@(16,R11); mp.utime
    00005826 1BD5                   MOV.L       R13,@(20,R11); mp.dtime
    00005828 1BE6                   MOV.L       R14,@(24,R11); mp.us
    0000582A 1BE7                   MOV.L       R14,@(28,R11); mp.ds
    0000582C 7FE0                   ADD         #-32,R15
    0000582E EEA4                   MOV         #-92,R14   ; H'FFFFFFA4
    00005830 6DF3                   MOV         R15,R13
    00005832 6EEC                   EXTU.B      R14,R14
    00005834 E402                   MOV         #2,R4      ; H'00000002
    00005836 3DEC                   ADD         R14,R13
    00005838 57D3                   MOV.L       @(12,R13),R7; (part of)mp
    0000583A 5BD5                   MOV.L       @(20,R13),R11; (part of)mp
    0000583C 61D2                   MOV.L       @R13,R1    ; (part of)mp
    0000583E 52D1                   MOV.L       @(4,R13),R2; (part of)mp
    00005840 56D2                   MOV.L       @(8,R13),R6; (part of)mp
    00005842 1F73                   MOV.L       R7,@(12,R15)
    00005844 57D4                   MOV.L       @(16,R13),R7; (part of)mp
    00005846 1FB5                   MOV.L       R11,@(20,R15)
    00005848 55D6                   MOV.L       @(24,R13),R5; (part of)mp
    0000584A 5BD7                   MOV.L       @(28,R13),R11; (part of)mp
    0000584C 2F12                   MOV.L       R1,@R15
    0000584E 1F21                   MOV.L       R2,@(4,R15)
    00005850 1F62                   MOV.L       R6,@(8,R15)
    00005852 1F74                   MOV.L       R7,@(16,R15)
    00005854 1F56                   MOV.L       R5,@(24,R15)
    00005856 D290                   MOV.L       L1385+12,R2; _motor_SET
    00005858 420B                   JSR         @R2
    0000585A 1FB7                   MOV.L       R11,@(28,R15)
    0000585C A1BA                   BRA         L1098
    0000585E 7F20                   ADD         #32,R15
    00005860              L1084:
    00005860 6073                   MOV         R7,R0
    00005862 880A                   CMP/EQ      #10,R0
    00005864 8919                   BT          L1101
    00005866 880D                   CMP/EQ      #13,R0
    00005868 8901                   BT          L1420
    0000586A A1C6                   BRA         L1090
    0000586C 0009                   NOP
    0000586E              L1420:
    0000586E 0129                   MOVT        R1
    00005870 2F16                   MOV.L       R1,@-R15
    00005872 EC84                   MOV         #-124,R12  ; H'FFFFFF84
    00005874 6CCC                   EXTU.B      R12,R12
    00005876 64F3                   MOV         R15,R4
    00005878 34CC                   ADD         R12,R4
    0000587A 2F46                   MOV.L       R4,@-R15
    0000587C 644C                   EXTU.B      R4,R4
    0000587E 2F46                   MOV.L       R4,@-R15
    00005880 2F46                   MOV.L       R4,@-R15
    00005882 E199                   MOV         #-103,R1   ; H'FFFFFF99
    00005884 611C                   EXTU.B      R1,R1
    00005886 2F16                   MOV.L       R1,@-R15
    00005888 2FA6                   MOV.L       R10,@-R15
    0000588A E60D                   MOV         #13,R6     ; H'0000000D
    0000588C E50C                   MOV         #12,R5     ; H'0000000C
    0000588E 6463                   MOV         R6,R4
    00005890 D982                   MOV.L       L1385+16,R9; _mbx_send
    00005892 490B                   JSR         @R9
    00005894 67B3                   MOV         R11,R7
    00005896 A1B0                   BRA         L1090
    00005898 7F18                   ADD         #24,R15
    0000589A              L1101:
    0000589A E60A                   MOV         #10,R6     ; H'0000000A
    0000589C 65A3                   MOV         R10,R5
    0000589E D380                   MOV.L       L1385+20,R3; __$WaitAction
    000058A0 430B                   JSR         @R3
    000058A2 64B3                   MOV         R11,R4
    000058A4 A1A5                   BRA         L1103
    000058A6 0009                   NOP
    000058A8              L1081:
    000058A8 E014                   MOV         #20,R0     ; H'00000014
    000058AA 61E3                   MOV         R14,R1
    000058AC 4180                   MULR        R0,R1
    000058AE DC7D                   MOV.L       L1385+24,R12; __$pProcAdr
    000058B0 67C2                   MOV.L       @R12,R7    ; pProcAdr
    000058B2 E4FC                   MOV         #-4,R4     ; H'FFFFFFFC
    000058B4 371C                   ADD         R1,R7
    000058B6 30718004               MOVU.B      @(4,R7),R0 ; pProcAdr->step[].par05
    000058BA 3F11202C               MOV.L       R1,@(176:12,R15)
    000058BE 404C                   SHAD        R4,R0
    000058C0 3F0100B4               MOV.B       R0,@(180:12,R15)
    000058C4 8476                   MOV.B       @(6,R7),R0 ; pProcAdr->step[].par07
    000058C6 B633                   BSR         __$GetPositionValue
    000058C8 6403                   MOV         R0,R4
    000058CA 35F180B4               MOVU.B      @(180,R15),R5
    000058CE 3F01202A               MOV.L       R0,@(168:12,R15); movval
    000058D2 E00C                   MOV         #12,R0     ; H'0000000C
    000058D4 4580                   MULR        R0,R5
    000058D6 D26E                   MOV.L       L1385+4,R2 ; __$Sp
    000058D8 352C                   ADD         R2,R5
    000058DA 3151503C               MOV.W       @(120:12,R5),R1; Sp[].ac
    000058DE 3F51202E               MOV.L       R5,@(184:12,R15)
    000058E2 3F111022               MOV.W       R1,@(68:12,R15); mp.accel_type
    000058E6 D26B                   MOV.L       L1385+8,R2 ; _GetFactor
    000058E8 420B                   JSR         @R2
    000058EA E403                   MOV         #3,R4      ; H'00000003
    000058EC 31F1602E               MOV.L       @(184:12,R15),R1
    000058F0 3F012010               MOV.L       R0,@(64:12,R15); mp.factor
    000058F4 3411601F               MOV.L       @(124:12,R1),R4; Sp[].fl
    000058F8 35116020               MOV.L       @(128:12,R1),R5; Sp[].fh
    000058FC 3711903D               MOVU.W      @(122,R1),R7; Sp[].gl
    00005900 E100                   MOV         #0,R1      ; H'00000000
    00005902 3F412012               MOV.L       R4,@(72:12,R15); mp.FL
    00005906 3F512013               MOV.L       R5,@(76:12,R15); mp.FH
    0000590A 3F712014               MOV.L       R7,@(80:12,R15); mp.utime
    0000590E 3F712015               MOV.L       R7,@(84:12,R15); mp.dtime
    00005912 3F112016               MOV.L       R1,@(88:12,R15); mp.us
    00005916 3F112017               MOV.L       R1,@(92:12,R15); mp.ds
    0000591A 7FE0                   ADD         #-32,R15
    0000591C 62F3                   MOV         R15,R2
    0000591E 7260                   ADD         #96,R2
    00005920 6522                   MOV.L       @R2,R5     ; (part of)mp
    00005922 5722                   MOV.L       @(8,R2),R7 ; (part of)mp
    00005924 2F52                   MOV.L       R5,@R15
    00005926 5523                   MOV.L       @(12,R2),R5; (part of)mp
    00005928 5421                   MOV.L       @(4,R2),R4 ; (part of)mp
    0000592A 1F72                   MOV.L       R7,@(8,R15)
    0000592C 1F53                   MOV.L       R5,@(12,R15)
    0000592E 5724                   MOV.L       @(16,R2),R7; (part of)mp
    00005930 5125                   MOV.L       @(20,R2),R1; (part of)mp
    00005932 5626                   MOV.L       @(24,R2),R6; (part of)mp
    00005934 5527                   MOV.L       @(28,R2),R5; (part of)mp
    00005936 1F41                   MOV.L       R4,@(4,R15)
    00005938 E402                   MOV         #2,R4      ; H'00000002
    0000593A 1F74                   MOV.L       R7,@(16,R15)
    0000593C 1F15                   MOV.L       R1,@(20,R15)
    0000593E 1F66                   MOV.L       R6,@(24,R15)
    00005940 D155                   MOV.L       L1385+12,R1; _motor_SET
    00005942 410B                   JSR         @R1
    00005944 1F57                   MOV.L       R5,@(28,R15)
    00005946 7F20                   ADD         #32,R15
    00005948 67C2                   MOV.L       @R12,R7    ; pProcAdr
    0000594A 30F1602C               MOV.L       @(176:12,R15),R0
    0000594E 7704                   ADD         #4,R7
    00005950 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].par05
    00005952 DC4F                   MOV.L       L1385+4,R12; __$Sp
    00005954 C90F                   AND         #15,R0
    00005956 6203                   MOV         R0,R2
    00005958 E00C                   MOV         #12,R0     ; H'0000000C
    0000595A 4280                   MULR        R0,R2
    0000595C 32CC                   ADD         R12,R2
    0000595E 3121505A               MOV.W       @(180:12,R2),R1; Sp[].ac
    00005962 3F21202B               MOV.L       R2,@(172:12,R15)
    00005966 3F111032               MOV.W       R1,@(100:12,R15); mp.accel_type
    0000596A D64A                   MOV.L       L1385+8,R6 ; _GetFactor
    0000596C 460B                   JSR         @R6
    0000596E E403                   MOV         #3,R4      ; H'00000003
    00005970 35F1602B               MOV.L       @(172:12,R15),R5
    00005974 E100                   MOV         #0,R1      ; H'00000000
    00005976 3451602E               MOV.L       @(184:12,R5),R4; Sp[].fl
    0000597A 3751602F               MOV.L       @(188:12,R5),R7; Sp[].fh
    0000597E 3C51905B               MOVU.W      @(182,R5),R12; Sp[].gl
    00005982 3F012018               MOV.L       R0,@(96:12,R15); mp.factor
    00005986 3F41201A               MOV.L       R4,@(104:12,R15); mp.FL
    0000598A 3F71201B               MOV.L       R7,@(108:12,R15); mp.FH
    0000598E 3FC1201C               MOV.L       R12,@(112:12,R15); mp.utime
    00005992 3FC1201D               MOV.L       R12,@(116:12,R15); mp.dtime
    00005996 3F11201E               MOV.L       R1,@(120:12,R15); mp.us
    0000599A 3F11201F               MOV.L       R1,@(124:12,R15); mp.ds
    0000599E 7FE0                   ADD         #-32,R15
    000059A0 EC80                   MOV         #-128,R12  ; H'FFFFFF80
    000059A2 6CCC                   EXTU.B      R12,R12
    000059A4 E403                   MOV         #3,R4      ; H'00000003
    000059A6 65F3                   MOV         R15,R5
    000059A8 35CC                   ADD         R12,R5
    000059AA 5251                   MOV.L       @(4,R5),R2 ; (part of)mp
    000059AC 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    000059AE 1F21                   MOV.L       R2,@(4,R15)
    000059B0 5253                   MOV.L       @(12,R5),R2; (part of)mp
    000059B2 1F62                   MOV.L       R6,@(8,R15)
    000059B4 1F23                   MOV.L       R2,@(12,R15)
    000059B6 5654                   MOV.L       @(16,R5),R6; (part of)mp
    000059B8 5255                   MOV.L       @(20,R5),R2; (part of)mp
    000059BA 6C52                   MOV.L       @R5,R12    ; (part of)mp
    000059BC 1F64                   MOV.L       R6,@(16,R15)
    000059BE 1F25                   MOV.L       R2,@(20,R15)
    000059C0 5656                   MOV.L       @(24,R5),R6; (part of)mp
    000059C2 5257                   MOV.L       @(28,R5),R2; (part of)mp
    000059C4 2FC2                   MOV.L       R12,@R15
    000059C6 1F66                   MOV.L       R6,@(24,R15)
    000059C8 DC33                   MOV.L       L1385+12,R12; _motor_SET
    000059CA 4C0B                   JSR         @R12
    000059CC 1F27                   MOV.L       R2,@(28,R15)
    000059CE 7F20                   ADD         #32,R15
    000059D0 6692                   MOV.L       @R9,R6     ; pProcDat
    000059D2 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000059D4 7001                   ADD         #1,R0
    000059D6 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000059D8              L1082:
    000059D8 E014                   MOV         #20,R0     ; H'00000014
    000059DA 4E80                   MULR        R0,R14
    000059DC D731                   MOV.L       L1385+24,R7; __$pProcAdr
    000059DE 6172                   MOV.L       @R7,R1     ; pProcAdr
    000059E0 710C                   ADD         #12,R1
    000059E2 60E3                   MOV         R14,R0
    000059E4 011E                   MOV.L       @(R0,R1),R1; pProcAdr->step[].par13
    000059E6 2F16                   MOV.L       R1,@-R15
    000059E8 7FFC                   ADD         #-4,R15
    000059EA E703                   MOV         #3,R7      ; H'00000003
    000059EC 3CF1602C               MOV.L       @(176:12,R15),R12; movval
    000059F0 E602                   MOV         #2,R6      ; H'00000002
    000059F2 65A3                   MOV         R10,R5
    000059F4 2FC2                   MOV.L       R12,@R15
    000059F6 D32C                   MOV.L       L1385+28,R3; __$MapAction
    000059F8 430B                   JSR         @R3
    000059FA 64B3                   MOV         R11,R4
    000059FC 7F08                   ADD         #8,R15
    000059FE 6292                   MOV.L       @R9,R2     ; pProcDat
    00005A00 8422                   MOV.B       @(2,R2),R0 ; (pProcDat)->Stp
    00005A02 7001                   ADD         #1,R0
    00005A04 8022                   MOV.B       R0,@(2,R2) ; (pProcDat)->Stp
    00005A06              L1083:
    00005A06 E401                   MOV         #1,R4      ; H'00000001
    00005A08 2F46                   MOV.L       R4,@-R15
    00005A0A EE84                   MOV         #-124,R14  ; H'FFFFFF84
    00005A0C 6EEC                   EXTU.B      R14,R14
    00005A0E 65F3                   MOV         R15,R5
    00005A10 35EC                   ADD         R14,R5
    00005A12 2F56                   MOV.L       R5,@-R15
    00005A14 655C                   EXTU.B      R5,R5
    00005A16 2F56                   MOV.L       R5,@-R15
    00005A18 2F56                   MOV.L       R5,@-R15
    00005A1A E199                   MOV         #-103,R1   ; H'FFFFFF99
    00005A1C 611C                   EXTU.B      R1,R1
    00005A1E 2F16                   MOV.L       R1,@-R15
    00005A20 2FA6                   MOV.L       R10,@-R15
    00005A22 E60D                   MOV         #13,R6     ; H'0000000D
    00005A24 E50C                   MOV         #12,R5     ; H'0000000C
    00005A26 6463                   MOV         R6,R4
    00005A28 DC1C                   MOV.L       L1385+16,R12; _mbx_send
    00005A2A 4C0B                   JSR         @R12
    00005A2C 67B3                   MOV         R11,R7
    00005A2E A0E0                   BRA         L1103
    00005A30 7F18                   ADD         #24,R15
    00005A32              L1080:
    00005A32 01000FFF               MOVI20      #4095,R1   ; H'00000FFF
    00005A36 DE1D                   MOV.L       L1385+32,R14; __$vout
    00005A38 2E11                   MOV.W       R1,@R14    ; vout.target
    00005A3A 3F11105E               MOV.W       R1,@(188:12,R15)
    00005A3E D31C                   MOV.L       L1385+36,R3; __$NzlTargetGet
    00005A40 434B                   JSR/N       @R3
    00005A42 6403                   MOV         R0,R4
    00005A44 E604                   MOV         #4,R6      ; H'00000004
    00005A46 30F1505E               MOV.W       @(188:12,R15),R0
    00005A4A D11A                   MOV.L       L1385+40,R1; H'00000002+__$vout
    00005A4C 204A                   XOR         R4,R0
    00005A4E 2101                   MOV.W       R0,@R1     ; vout.valout
    00005A50 2F66                   MOV.L       R6,@-R15
    00005A52 D716                   MOV.L       L1385+32,R7; __$vout
    00005A54 2F76                   MOV.L       R7,@-R15
    00005A56 677C                   EXTU.B      R7,R7
    00005A58 2F76                   MOV.L       R7,@-R15
    00005A5A 2F76                   MOV.L       R7,@-R15
    00005A5C E29B                   MOV         #-101,R2   ; H'FFFFFF9B
    00005A5E 622C                   EXTU.B      R2,R2
    00005A60 2F26                   MOV.L       R2,@-R15
    00005A62 2FA6                   MOV.L       R10,@-R15
    00005A64 E60D                   MOV         #13,R6     ; H'0000000D
    00005A66 E50C                   MOV         #12,R5     ; H'0000000C
    00005A68 6463                   MOV         R6,R4
    00005A6A DC0C                   MOV.L       L1385+16,R12; _mbx_send
    00005A6C 4C0B                   JSR         @R12
    00005A6E 67B3                   MOV         R11,R7
    00005A70 A0BF                   BRA         L1103
    00005A72 7F18                   ADD         #24,R15
    00005A74              L1079:
    00005A74 E014                   MOV         #20,R0     ; H'00000014
    00005A76 4E80                   MULR        R0,R14
    00005A78 D20A                   MOV.L       L1385+24,R2; __$pProcAdr
    00005A7A 6522                   MOV.L       @R2,R5     ; pProcAdr
    00005A7C 7505                   ADD         #5,R5
    00005A7E 60E3                   MOV         R14,R0
    00005A80 B556                   BSR         __$GetPositionValue
    00005A82 045C                   MOV.B       @(R0,R5),R4; pProcAdr->step[].par06
    00005A84 3F01202A               MOV.L       R0,@(168:12,R15); movval
    00005A88 A0A4                   BRA         L1098
    00005A8A 0009                   NOP
    00005A8C              L1385:
    00005A8C <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005A90 <00000000>             .DATA.L     __$Sp
    00005A94 <00000000>             .DATA.L     _GetFactor
    00005A98 <00000000>             .DATA.L     _motor_SET
    00005A9C <00000000>             .DATA.L     _mbx_send
    00005AA0 <00000000>             .DATA.L     __$WaitAction
    00005AA4 <00000000>             .DATA.L     __$pProcAdr
    00005AA8 <00000000>             .DATA.L     __$MapAction
    00005AAC <00000000>             .DATA.L     __$vout
    00005AB0 <00000000>             .DATA.L     __$NzlTargetGet
    00005AB4 <00000002>             .DATA.L     H'00000002+__$vout
    00005AB8              L1077:
    00005AB8 D466                   MOV.L       L1145+2,R4 ; H'00000005+__$SpPtn
    00005ABA EDA4                   MOV         #-92,R13   ; H'FFFFFFA4
    00005ABC 6040                   MOV.B       @R4,R0     ; SpPtn.Y0_SpdNmlPtn
    00005ABE 6DDC                   EXTU.B      R13,R13
    00005AC0 3DFC                   ADD         R15,R13
    00005AC2 2D00                   MOV.B       R0,@R13    ; spdptn
    00005AC4 E014                   MOV         #20,R0     ; H'00000014
    00005AC6 4E80                   MULR        R0,R14
    00005AC8 D563                   MOV.L       L1145+6,R5 ; __$pProcAdr
    00005ACA 6452                   MOV.L       @R5,R4     ; pProcAdr
    00005ACC 7402                   ADD         #2,R4
    00005ACE 60E3                   MOV         R14,R0
    00005AD0 3ED18000               MOVU.B      @(0,R13),R14; spdptn
    00005AD4 B52C                   BSR         __$GetPositionValue
    00005AD6 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par03
    00005AD8 1D01                   MOV.L       R0,@(4,R13); movval
    00005ADA E00C                   MOV         #12,R0     ; H'0000000C
    00005ADC 4E80                   MULR        R0,R14
    00005ADE D55F                   MOV.L       L1145+10,R5; __$Sp
    00005AE0 3E5C                   ADD         R5,R14
    00005AE2 1DE2                   MOV.L       R14,@(8,R13)
    00005AE4 36E1501E               MOV.W       @(60:12,R14),R6; Sp[].ac
    00005AE8 3F611012               MOV.W       R6,@(36:12,R15); mp.accel_type
    00005AEC D75C                   MOV.L       L1145+14,R7; _GetFactor
    00005AEE 470B                   JSR         @R7
    00005AF0 E403                   MOV         #3,R4      ; H'00000003
    00005AF2 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00005AF4 3BE16010               MOV.L       @(64:12,R14),R11; Sp[].fl
    00005AF8 3DE16011               MOV.L       @(68:12,R14),R13; Sp[].fh
    00005AFC 3EE1901F               MOVU.W      @(62,R14),R14; Sp[].gl
    00005B00 E100                   MOV         #0,R1      ; H'00000000
    00005B02 1FBA                   MOV.L       R11,@(40,R15); mp.FL
    00005B04 1FDB                   MOV.L       R13,@(44,R15); mp.FH
    00005B06 1FEC                   MOV.L       R14,@(48,R15); mp.utime
    00005B08 1FED                   MOV.L       R14,@(52,R15); mp.dtime
    00005B0A 1F1E                   MOV.L       R1,@(56,R15); mp.us
    00005B0C 1F1F                   MOV.L       R1,@(60,R15); mp.ds
    00005B0E 7FE0                   ADD         #-32,R15
    00005B10 62F3                   MOV         R15,R2
    00005B12 7240                   ADD         #64,R2
    00005B14 5721                   MOV.L       @(4,R2),R7 ; (part of)mp
    00005B16 5B23                   MOV.L       @(12,R2),R11; (part of)mp
    00005B18 5D24                   MOV.L       @(16,R2),R13; (part of)mp
    00005B1A 6422                   MOV.L       @R2,R4     ; (part of)mp
    00005B1C 1F71                   MOV.L       R7,@(4,R15)
    00005B1E 5722                   MOV.L       @(8,R2),R7 ; (part of)mp
    00005B20 1FB3                   MOV.L       R11,@(12,R15)
    00005B22 5B25                   MOV.L       @(20,R2),R11; (part of)mp
    00005B24 1FD4                   MOV.L       R13,@(16,R15)
    00005B26 5626                   MOV.L       @(24,R2),R6; (part of)mp
    00005B28 5D27                   MOV.L       @(28,R2),R13; (part of)mp
    00005B2A 2F42                   MOV.L       R4,@R15
    00005B2C E401                   MOV         #1,R4      ; H'00000001
    00005B2E 1F72                   MOV.L       R7,@(8,R15)
    00005B30 1FB5                   MOV.L       R11,@(20,R15)
    00005B32 1F66                   MOV.L       R6,@(24,R15)
    00005B34 D24B                   MOV.L       L1145+18,R2; _motor_SET
    00005B36 420B                   JSR         @R2
    00005B38 1FD7                   MOV.L       R13,@(28,R15)
    00005B3A 7F20                   ADD         #32,R15
    00005B3C              L1078:
    00005B3C 7FFC                   ADD         #-4,R15
    00005B3E 65A3                   MOV         R10,R5
    00005B40 31F1602B               MOV.L       @(172:12,R15),R1; movval
    00005B44 E700                   MOV         #0,R7      ; H'00000000
    00005B46 E601                   MOV         #1,R6      ; H'00000001
    00005B48 A04B                   BRA         L1111
    00005B4A 2F12                   MOV.L       R1,@R15
    00005B4C              L1074:
    00005B4C 7601                   ADD         #1,R6
    00005B4E 6063                   MOV         R6,R0
    00005B50 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00005B52              L1075:
    00005B52 DE45                   MOV.L       L1145+22,R14; H'00000006+__$SpPtn
    00005B54 EDA4                   MOV         #-92,R13   ; H'FFFFFFA4
    00005B56 60E0                   MOV.B       @R14,R0    ; SpPtn.Z0_SpdNmlPtn
    00005B58 6DDC                   EXTU.B      R13,R13
    00005B5A E407                   MOV         #7,R4      ; H'00000007
    00005B5C 3DFC                   ADD         R15,R13
    00005B5E B4E7                   BSR         __$GetPositionValue
    00005B60 2D00                   MOV.B       R0,@R13    ; spdptn
    00005B62 3ED18000               MOVU.B      @(0,R13),R14; spdptn
    00005B66 1D01                   MOV.L       R0,@(4,R13); movval
    00005B68 E00C                   MOV         #12,R0     ; H'0000000C
    00005B6A 4E80                   MULR        R0,R14
    00005B6C D23B                   MOV.L       L1145+10,R2; __$Sp
    00005B6E 3E2C                   ADD         R2,R14
    00005B70 1DE2                   MOV.L       R14,@(8,R13)
    00005B72 3EE1503C               MOV.W       @(120:12,R14),R14; Sp[].ac
    00005B76 D13A                   MOV.L       L1145+14,R1; _GetFactor
    00005B78 410B                   JSR         @R1
    00005B7A E403                   MOV         #3,R4      ; H'00000003
    00005B7C 51D2                   MOV.L       @(8,R13),R1
    00005B7E E700                   MOV         #0,R7      ; H'00000000
    00005B80 3FE11002               MOV.W       R14,@(4:12,R15); mp.accel_type
    00005B84 3411601F               MOV.L       @(124:12,R1),R4; Sp[].fl
    00005B88 35116020               MOV.L       @(128:12,R1),R5; Sp[].fh
    00005B8C 3611903D               MOVU.W      @(122,R1),R6; Sp[].gl
    00005B90 2F02                   MOV.L       R0,@R15    ; mp.factor
    00005B92 1F42                   MOV.L       R4,@(8,R15); mp.FL
    00005B94 1F53                   MOV.L       R5,@(12,R15); mp.FH
    00005B96 1F64                   MOV.L       R6,@(16,R15); mp.utime
    00005B98 1F65                   MOV.L       R6,@(20,R15); mp.dtime
    00005B9A 1F76                   MOV.L       R7,@(24,R15); mp.us
    00005B9C 1F77                   MOV.L       R7,@(28,R15); mp.ds
    00005B9E 7FE0                   ADD         #-32,R15
    00005BA0 61F3                   MOV         R15,R1
    00005BA2 7120                   ADD         #32,R1
    00005BA4 5B11                   MOV.L       @(4,R1),R11; (part of)mp
    00005BA6 5715                   MOV.L       @(20,R1),R7; (part of)mp
    00005BA8 6412                   MOV.L       @R1,R4     ; (part of)mp
    00005BAA 1FB1                   MOV.L       R11,@(4,R15)
    00005BAC 5D12                   MOV.L       @(8,R1),R13; (part of)mp
    00005BAE 5613                   MOV.L       @(12,R1),R6; (part of)mp
    00005BB0 5E14                   MOV.L       @(16,R1),R14; (part of)mp
    00005BB2 1F75                   MOV.L       R7,@(20,R15)
    00005BB4 5B16                   MOV.L       @(24,R1),R11; (part of)mp
    00005BB6 5717                   MOV.L       @(28,R1),R7; (part of)mp
    00005BB8 2F42                   MOV.L       R4,@R15
    00005BBA E402                   MOV         #2,R4      ; H'00000002
    00005BBC 1FD2                   MOV.L       R13,@(8,R15)
    00005BBE 1F63                   MOV.L       R6,@(12,R15)
    00005BC0 1FE4                   MOV.L       R14,@(16,R15)
    00005BC2 1FB6                   MOV.L       R11,@(24,R15)
    00005BC4 D227                   MOV.L       L1145+18,R2; _motor_SET
    00005BC6 420B                   JSR         @R2
    00005BC8 1F77                   MOV.L       R7,@(28,R15)
    00005BCA 7F20                   ADD         #32,R15
    00005BCC 6D92                   MOV.L       @R9,R13    ; pProcDat
    00005BCE 84D2                   MOV.B       @(2,R13),R0; (pProcDat)->Stp
    00005BD0 7001                   ADD         #1,R0
    00005BD2 80D2                   MOV.B       R0,@(2,R13); (pProcDat)->Stp
    00005BD4              L1076:
    00005BD4              L1098:
    00005BD4 7FFC                   ADD         #-4,R15
    00005BD6 65A3                   MOV         R10,R5
    00005BD8 3EF1602B               MOV.L       @(172:12,R15),R14; movval
    00005BDC E602                   MOV         #2,R6      ; H'00000002
    00005BDE E700                   MOV         #0,R7      ; H'00000000
    00005BE0 2FE2                   MOV.L       R14,@R15
    00005BE2              L1111:
    00005BE2 D322                   MOV.L       L1145+26,R3; __$AbsmvAction
    00005BE4 430B                   JSR         @R3
    00005BE6 E451                   MOV         #81,R4     ; H'00000051
    00005BE8 7F04                   ADD         #4,R15
    00005BEA 2008                   TST         R0,R0
    00005BEC 8F01                   BF/S        L1103
    00005BEE 6D03                   MOV         R0,R13
    00005BF0 6DC3                   MOV         R12,R13
    00005BF2              L1103:
    00005BF2 6692                   MOV.L       @R9,R6     ; pProcDat
    00005BF4 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005BF6 7001                   ADD         #1,R0
    00005BF8 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005BFA              L1090:
             tskcmd.c       8210          break;
             tskcmd.c       8211      }
             tskcmd.c       8212    
             tskcmd.c       8213      return( result );
    00005BFA 60D3                   MOV         R13,R0
    00005BFC 030000C0               MOVI20      #192,R3    ; H'000000C0
    00005C00 3F3C                   ADD         R3,R15
    00005C02 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       8214    }
    00005C04 006B                   RTS/N
             tskcmd.c       8215    /***********************************************************************
             tskcmd.c       8216    * 
             tskcmd.c       8217    * [概要]  分注１
             tskcmd.c       8218    * [引数]  
             tskcmd.c       8219    * [戻値]  
             tskcmd.c       8220    * 
             tskcmd.c       8221    ***********************************************************************/
             tskcmd.c       8222    static ER  CmdActionPrep1( T_CMD_MSG* mrcv )
    00005C06              __$CmdActionPrep1:               ; function: __$CmdActionPrep1
                                                           ; frame size=372
    00005C06 49F0                   MOVMU.L     R9,@-R15
    00005C08 03F0FEC8               MOVI20      #-312,R3   ; H'FFFFFEC8
    00005C0C 3F3C                   ADD         R3,R15
             tskcmd.c       8223    {
             tskcmd.c       8224      ER result = E_CONTINUE;
    00005C0E E341                   MOV         #65,R3     ; H'00000041
    00005C10 EDF1                   MOV         #-15,R13   ; H'FFFFFFF1
    00005C12 4308                   SHLL2       R3
             tskcmd.c       8225      INT tskid;
             tskcmd.c       8226      UB prid1;
             tskcmd.c       8227      UB bcid;
             tskcmd.c       8228      UB msgid;
             tskcmd.c       8229      UB inf1;
             tskcmd.c       8230      UB inf2;
             tskcmd.c       8231      UB actstep;
             tskcmd.c       8232      UB spdptn;
             tskcmd.c       8233      UB devno;
             tskcmd.c       8234      UB movptn;
             tskcmd.c       8235      UB dummy;
             tskcmd.c       8236      INT movval;
             tskcmd.c       8237      
             tskcmd.c       8238      bcid  = mrcv->msgdata.bcid;
    00005C14 3041801A               MOVU.B      @(26,R4),R0; (mrcv)->bcid
    00005C18 33FC                   ADD         R15,R3
    00005C1A 6DDC                   EXTU.B      R13,R13
    00005C1C 6B03                   MOV         R0,R11
    00005C1E 8038                   MOV.B       R0,@(8,R3) ; bcid
    00005C20 4008                   SHLL2       R0
    00005C22 2342                   MOV.L       R4,@R3     ; mrcv
             tskcmd.c       8239      prid1   = mrcv->msgdata.prid1;
             tskcmd.c       8240      actstep = bcctrl[bcid].actstp -1 ;
    00005C24 D712                   MOV.L       L1145+30,R7; H'00000002+__$bcctrl
    00005C26 4000                   SHLL        R0
    00005C28 13D1                   MOV.L       R13,@(4,R3); result
             tskcmd.c       8241      
             tskcmd.c       8242      switch( pProcDat->Stp )
    00005C2A DA12                   MOV.L       L1145+34,R10; __$pProcDat
    00005C2C 3C418018               MOVU.B      @(24,R4),R12; (mrcv)->prid1
    00005C30 057C                   MOV.B       @(R0,R7),R5; bcctrl[].actstp
    00005C32 64A2                   MOV.L       @R10,R4    ; pProcDat
    00005C34 75FF                   ADD         #-1,R5
    00005C36 36418002               MOVU.B      @(2,R4),R6 ; (pProcDat)->Stp
    00005C3A 6E5C                   EXTU.B      R5,R14
    00005C3C E515                   MOV         #21,R5     ; H'00000015
    00005C3E 3656                   CMP/HI      R5,R6
    00005C40 8F02                   BF/S        L1421
    00005C42 6263                   MOV         R6,R2
    00005C44 A456                   BRA         L1144
    00005C46 0009                   NOP
    00005C48              L1421:
    00005C48 4600                   SHLL        R6
    00005C4A C70B                   MOVA        L1146,R0
    00005C4C 006D                   MOV.W       @(R0,R6),R0
    00005C4E 0023                   BRAF        R0
    00005C50 0009                   NOP
    00005C52              L1145:
    00005C52 00000002               .RES.W      1
    00005C54 <00000005>             .DATA.L     H'00000005+__$SpPtn
    00005C58 <00000000>             .DATA.L     __$pProcAdr
    00005C5C <00000000>             .DATA.L     __$Sp
    00005C60 <00000000>             .DATA.L     _GetFactor
    00005C64 <00000000>             .DATA.L     _motor_SET
    00005C68 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005C6C <00000000>             .DATA.L     __$AbsmvAction
    00005C70 <00000002>             .DATA.L     H'00000002+__$bcctrl
    00005C74 <00000000>             .DATA.L     __$pProcDat
    00005C78              L1146:
    00005C78 0052                   .DATA.W     L1117-L1145
    00005C7A 0058                   .DATA.W     L1118-L1145
    00005C7C 00DA                   .DATA.W     L1119-L1145
    00005C7E 010A                   .DATA.W     L1120-L1145
    00005C80 018E                   .DATA.W     L1121-L1145
    00005C82 01BE                   .DATA.W     L1122-L1145
    00005C84 01F8                   .DATA.W     L1123-L1145
    00005C86 0272                   .DATA.W     L1124-L1145
    00005C88 0394                   .DATA.W     L1125-L1145
    00005C8A 03C2                   .DATA.W     L1126-L1145
    00005C8C 03FC                   .DATA.W     L1127-L1145
    00005C8E 0454                   .DATA.W     L1128-L1145
    00005C90 046E                   .DATA.W     L1129-L1145
    00005C92 051C                   .DATA.W     L1130-L1145
    00005C94 0556                   .DATA.W     L1131-L1145
    00005C96 05B6                   .DATA.W     L1132-L1145
    00005C98 06E0                   .DATA.W     L1133-L1145
    00005C9A 070E                   .DATA.W     L1134-L1145
    00005C9C 0748                   .DATA.W     L1135-L1145
    00005C9E 07CE                   .DATA.W     L1136-L1145
    00005CA0 07F4                   .DATA.W     L1139-L1145
    00005CA2 07EA                   .DATA.W     L1140-L1145
    00005CA4              L1117:
             tskcmd.c       8243      {
             tskcmd.c       8244      case 0: // 0． 待機
             tskcmd.c       8245          pProcDat->Stp++;
    00005CA4 7201                   ADD         #1,R2
    00005CA6 6023                   MOV         R2,R0
    00005CA8 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00005CAA              L1118:
             tskcmd.c       8246          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8247    
             tskcmd.c       8248      //****************************************************
             tskcmd.c       8249      //***                    吸引                      ***
             tskcmd.c       8250      //****************************************************
             tskcmd.c       8251      case 1: // 1． Z軸通常速度設定
             tskcmd.c       8252          devno  = MT_Z0;
             tskcmd.c       8253          spdptn = SpPtn.Z0_SpdNmlPtn;                    // [Z]通常速度
    00005CAA D77C                   MOV.L       L1386,R7   ; H'00000006+__$SpPtn
    00005CAC E944                   MOV         #68,R9     ; H'00000044
    00005CAE 6070                   MOV.B       @R7,R0     ; SpPtn.Z0_SpdNmlPtn
    00005CB0 4908                   SHLL2       R9
             tskcmd.c       8254          movval = GetPositionValue(POS_Z0_TAIHI);        // [Z]退避位置
    00005CB2 E407                   MOV         #7,R4      ; H'00000007
    00005CB4 39FC                   ADD         R15,R9
    00005CB6 B43B                   BSR         __$GetPositionValue
    00005CB8 2900                   MOV.B       R0,@R9     ; spdptn
             tskcmd.c       8255    
             tskcmd.c       8256          MAC_SPEED_SET( devno, 
    00005CBA 31918000               MOVU.B      @(0,R9),R1 ; spdptn
    00005CBE 1901                   MOV.L       R0,@(4,R9) ; movval
    00005CC0 E00C                   MOV         #12,R0     ; H'0000000C
    00005CC2 4180                   MULR        R0,R1
    00005CC4 DC76                   MOV.L       L1386+4,R12; __$Sp
    00005CC6 31CC                   ADD         R12,R1
    00005CC8 1912                   MOV.L       R1,@(8,R9)
    00005CCA 3E11503C               MOV.W       @(120:12,R1),R14; Sp[].ac
    00005CCE D175                   MOV.L       L1386+8,R1 ; _GetFactor
    00005CD0 410B                   JSR         @R1
    00005CD2 E403                   MOV         #3,R4      ; H'00000003
    00005CD4 5292                   MOV.L       @(8,R9),R2
    00005CD6 E900                   MOV         #0,R9      ; H'00000000
    00005CD8 3FE11002               MOV.W       R14,@(4:12,R15); mp.accel_type
    00005CDC 3421601F               MOV.L       @(124:12,R2),R4; Sp[].fl
    00005CE0 36216020               MOV.L       @(128:12,R2),R6; Sp[].fh
    00005CE4 3721903D               MOVU.W      @(122,R2),R7; Sp[].gl
    00005CE8 2F02                   MOV.L       R0,@R15    ; mp.factor
    00005CEA 1F42                   MOV.L       R4,@(8,R15); mp.FL
    00005CEC 1F63                   MOV.L       R6,@(12,R15); mp.FH
    00005CEE 1F74                   MOV.L       R7,@(16,R15); mp.utime
    00005CF0 1F75                   MOV.L       R7,@(20,R15); mp.dtime
    00005CF2 1F96                   MOV.L       R9,@(24,R15); mp.us
    00005CF4 1F97                   MOV.L       R9,@(28,R15); mp.ds
    00005CF6 7FE0                   ADD         #-32,R15
    00005CF8 69F3                   MOV         R15,R9
    00005CFA 7920                   ADD         #32,R9
    00005CFC 5693                   MOV.L       @(12,R9),R6; (part of)mp
    00005CFE 6C92                   MOV.L       @R9,R12    ; (part of)mp
    00005D00 5491                   MOV.L       @(4,R9),R4 ; (part of)mp
    00005D02 5E92                   MOV.L       @(8,R9),R14; (part of)mp
    00005D04 1F63                   MOV.L       R6,@(12,R15)
    00005D06 5794                   MOV.L       @(16,R9),R7; (part of)mp
    00005D08 5195                   MOV.L       @(20,R9),R1; (part of)mp
    00005D0A 5596                   MOV.L       @(24,R9),R5; (part of)mp
    00005D0C 5697                   MOV.L       @(28,R9),R6; (part of)mp
    00005D0E 2FC2                   MOV.L       R12,@R15
    00005D10 1F41                   MOV.L       R4,@(4,R15)
    00005D12 E402                   MOV         #2,R4      ; H'00000002
    00005D14 1FE2                   MOV.L       R14,@(8,R15)
    00005D16 1F74                   MOV.L       R7,@(16,R15)
    00005D18 1F15                   MOV.L       R1,@(20,R15)
    00005D1A 1F56                   MOV.L       R5,@(24,R15)
    00005D1C D262                   MOV.L       L1386+12,R2; _motor_SET
    00005D1E 420B                   JSR         @R2
    00005D20 1F67                   MOV.L       R6,@(28,R15)
    00005D22 7F20                   ADD         #32,R15
             tskcmd.c       8257                         Sp[devno][spdptn].ac, 
             tskcmd.c       8258                         Sp[devno][spdptn].fl, 
             tskcmd.c       8259                         Sp[devno][spdptn].fh, 
             tskcmd.c       8260                         Sp[devno][spdptn].gl );
             tskcmd.c       8261          pProcDat->Stp++;
    00005D24 65A2                   MOV.L       @R10,R5    ; pProcDat
    00005D26 8452                   MOV.B       @(2,R5),R0 ; (pProcDat)->Stp
    00005D28 7001                   ADD         #1,R0
    00005D2A 8052                   MOV.B       R0,@(2,R5) ; (pProcDat)->Stp
    00005D2C              L1119:
             tskcmd.c       8262          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8263    
             tskcmd.c       8264      case 2: // 2． Z軸退避高さへ移動
             tskcmd.c       8265          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00005D2C 7FFC                   ADD         #-4,R15
    00005D2E E700                   MOV         #0,R7      ; H'00000000
    00005D30 39F16046               MOV.L       @(280:12,R15),R9; movval
    00005D34 E602                   MOV         #2,R6      ; H'00000002
    00005D36 E451                   MOV         #81,R4     ; H'00000051
    00005D38 2F92                   MOV.L       R9,@R15
    00005D3A D35C                   MOV.L       L1386+16,R3; __$AbsmvAction
    00005D3C 430B                   JSR         @R3
    00005D3E 65B3                   MOV         R11,R5
    00005D40 6203                   MOV         R0,R2
    00005D42 7F04                   ADD         #4,R15
    00005D44 6B03                   MOV         R0,R11
    00005D46 E042                   MOV         #66,R0     ; H'00000042
    00005D48 4008                   SHLL2       R0
             tskcmd.c       8266          if( result == E_SUCCESS ) result = E_CONTINUE;
    00005D4A 2228                   TST         R2,R2
    00005D4C 8F01                   BF/S        L1151
    00005D4E 0FB6                   MOV.L       R11,@(R0,R15); result
    00005D50 0FD6                   MOV.L       R13,@(R0,R15); result
    00005D52              L1151:
             tskcmd.c       8267          pProcDat->Stp++;
    00005D52 66A2                   MOV.L       @R10,R6    ; pProcDat
    00005D54 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005D56 7001                   ADD         #1,R0
    00005D58 A3CC                   BRA         L1144
    00005D5A 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005D5C              L1120:
             tskcmd.c       8268          break;
             tskcmd.c       8269    
             tskcmd.c       8270      case 3: // 3． Y0軸通常速度設定
             tskcmd.c       8271          devno  = MT_Y0;
             tskcmd.c       8272          spdptn = SpPtn.Y0_SpdNmlPtn;                    // [Y0]通常速度
    00005D5C D954                   MOV.L       L1386+20,R9; H'00000005+__$SpPtn
    00005D5E 6090                   MOV.B       @R9,R0     ; SpPtn.Y0_SpdNmlPtn
    00005D60 E944                   MOV         #68,R9     ; H'00000044
    00005D62 4908                   SHLL2       R9
    00005D64 39FC                   ADD         R15,R9
    00005D66 2900                   MOV.B       R0,@R9     ; spdptn
             tskcmd.c       8273          movptn = pProcAdr->step[actstep].par03;         // [Y0]吸引位置
             tskcmd.c       8274          movval = GetPositionValue(movptn);
    00005D68 E014                   MOV         #20,R0     ; H'00000014
    00005D6A 4E80                   MULR        R0,R14
    00005D6C DC51                   MOV.L       L1386+24,R12; __$pProcAdr
    00005D6E 64C2                   MOV.L       @R12,R4    ; pProcAdr
             tskcmd.c       8275          
             tskcmd.c       8276          MAC_SPEED_SET( devno, 
    00005D70 3C918000               MOVU.B      @(0,R9),R12; spdptn
    00005D74 7402                   ADD         #2,R4
    00005D76 60E3                   MOV         R14,R0
    00005D78 B3DA                   BSR         __$GetPositionValue
    00005D7A 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par03
    00005D7C 1901                   MOV.L       R0,@(4,R9) ; movval
    00005D7E E00C                   MOV         #12,R0     ; H'0000000C
    00005D80 4C80                   MULR        R0,R12
    00005D82 D447                   MOV.L       L1386+4,R4 ; __$Sp
    00005D84 3C4C                   ADD         R4,R12
    00005D86 19C2                   MOV.L       R12,@(8,R9)
    00005D88 3EC1501E               MOV.W       @(60:12,R12),R14; Sp[].ac
    00005D8C D145                   MOV.L       L1386+8,R1 ; _GetFactor
    00005D8E 410B                   JSR         @R1
    00005D90 E403                   MOV         #3,R4      ; H'00000003
    00005D92 E900                   MOV         #0,R9      ; H'00000000
    00005D94 3FE11012               MOV.W       R14,@(36:12,R15); mp.accel_type
    00005D98 34C16010               MOV.L       @(64:12,R12),R4; Sp[].fl
    00005D9C 36C16011               MOV.L       @(68:12,R12),R6; Sp[].fh
    00005DA0 37C1901F               MOVU.W      @(62,R12),R7; Sp[].gl
    00005DA4 1F08                   MOV.L       R0,@(32,R15); mp.factor
    00005DA6 1F4A                   MOV.L       R4,@(40,R15); mp.FL
    00005DA8 1F6B                   MOV.L       R6,@(44,R15); mp.FH
    00005DAA 1F7C                   MOV.L       R7,@(48,R15); mp.utime
    00005DAC 1F7D                   MOV.L       R7,@(52,R15); mp.dtime
    00005DAE 1F9E                   MOV.L       R9,@(56,R15); mp.us
    00005DB0 1F9F                   MOV.L       R9,@(60,R15); mp.ds
    00005DB2 7FE0                   ADD         #-32,R15
    00005DB4 65F3                   MOV         R15,R5
    00005DB6 7540                   ADD         #64,R5
    00005DB8 5751                   MOV.L       @(4,R5),R7 ; (part of)mp
    00005DBA E401                   MOV         #1,R4      ; H'00000001
    00005DBC 6C52                   MOV.L       @R5,R12    ; (part of)mp
    00005DBE 1F71                   MOV.L       R7,@(4,R15)
    00005DC0 5952                   MOV.L       @(8,R5),R9 ; (part of)mp
    00005DC2 5E53                   MOV.L       @(12,R5),R14; (part of)mp
    00005DC4 5154                   MOV.L       @(16,R5),R1; (part of)mp
    00005DC6 5255                   MOV.L       @(20,R5),R2; (part of)mp
    00005DC8 5756                   MOV.L       @(24,R5),R7; (part of)mp
    00005DCA 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00005DCC 2FC2                   MOV.L       R12,@R15
    00005DCE 1F92                   MOV.L       R9,@(8,R15)
    00005DD0 1FE3                   MOV.L       R14,@(12,R15)
    00005DD2 1F14                   MOV.L       R1,@(16,R15)
    00005DD4 1F25                   MOV.L       R2,@(20,R15)
    00005DD6 1F76                   MOV.L       R7,@(24,R15)
    00005DD8 D233                   MOV.L       L1386+12,R2; _motor_SET
    00005DDA 420B                   JSR         @R2
    00005DDC 1F67                   MOV.L       R6,@(28,R15)
    00005DDE 7F20                   ADD         #32,R15
    00005DE0              L1121:
             tskcmd.c       8277                         Sp[devno][spdptn].ac, 
             tskcmd.c       8278                         Sp[devno][spdptn].fl, 
             tskcmd.c       8279                         Sp[devno][spdptn].fh, 
             tskcmd.c       8280                         Sp[devno][spdptn].gl );
             tskcmd.c       8281          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8282    
             tskcmd.c       8283      case 4: // 4． Y0軸指定位置移動
             tskcmd.c       8284          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00005DE0 7FFC                   ADD         #-4,R15
    00005DE2 E700                   MOV         #0,R7      ; H'00000000
    00005DE4 31F16046               MOV.L       @(280:12,R15),R1; movval
    00005DE8 E451                   MOV         #81,R4     ; H'00000051
    00005DEA E601                   MOV         #1,R6      ; H'00000001
    00005DEC 2F12                   MOV.L       R1,@R15
    00005DEE D32F                   MOV.L       L1386+16,R3; __$AbsmvAction
    00005DF0 430B                   JSR         @R3
    00005DF2 65B3                   MOV         R11,R5
    00005DF4 6203                   MOV         R0,R2
    00005DF6 7F04                   ADD         #4,R15
    00005DF8 6403                   MOV         R0,R4
    00005DFA E042                   MOV         #66,R0     ; H'00000042
    00005DFC 4008                   SHLL2       R0
             tskcmd.c       8285          if( result == E_SUCCESS ) result = E_CONTINUE;
    00005DFE 2228                   TST         R2,R2
    00005E00 8F01                   BF/S        L1155
    00005E02 0F46                   MOV.L       R4,@(R0,R15); result
    00005E04 0FD6                   MOV.L       R13,@(R0,R15); result
    00005E06              L1155:
             tskcmd.c       8286          pProcDat->Stp++;
    00005E06 66A2                   MOV.L       @R10,R6    ; pProcDat
    00005E08 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005E0A 7001                   ADD         #1,R0
    00005E0C A372                   BRA         L1144
    00005E0E 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005E10              L1122:
             tskcmd.c       8287          break;
             tskcmd.c       8288    
             tskcmd.c       8289      case 5: // 5． Z軸吸引高さ位置移動
             tskcmd.c       8290          devno  = MT_Z0;
             tskcmd.c       8291          movptn = pProcAdr->step[actstep].par06;         // [Z]吸引開始高さ
             tskcmd.c       8292          movval = GetPositionValue(movptn);
    00005E10 E014                   MOV         #20,R0     ; H'00000014
    00005E12 4E80                   MULR        R0,R14
    00005E14 D727                   MOV.L       L1386+24,R7; __$pProcAdr
    00005E16 6C72                   MOV.L       @R7,R12    ; pProcAdr
    00005E18 7C05                   ADD         #5,R12
    00005E1A 60E3                   MOV         R14,R0
    00005E1C B388                   BSR         __$GetPositionValue
    00005E1E 04CC                   MOV.B       @(R0,R12),R4; pProcAdr->step[].par06
             tskcmd.c       8293    
             tskcmd.c       8294          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00005E20 2F06                   MOV.L       R0,@-R15
    00005E22 E700                   MOV         #0,R7      ; H'00000000
    00005E24 E602                   MOV         #2,R6      ; H'00000002
    00005E26 E451                   MOV         #81,R4     ; H'00000051
    00005E28 D320                   MOV.L       L1386+16,R3; __$AbsmvAction
    00005E2A 430B                   JSR         @R3
    00005E2C 65B3                   MOV         R11,R5
    00005E2E 6903                   MOV         R0,R9
    00005E30 7F04                   ADD         #4,R15
    00005E32 6E03                   MOV         R0,R14
    00005E34 E042                   MOV         #66,R0     ; H'00000042
    00005E36 4008                   SHLL2       R0
             tskcmd.c       8295          if( result == E_SUCCESS ) result = E_CONTINUE;
    00005E38 2998                   TST         R9,R9
    00005E3A 8F01                   BF/S        L1158
    00005E3C 0FE6                   MOV.L       R14,@(R0,R15); result
    00005E3E 0FD6                   MOV.L       R13,@(R0,R15); result
    00005E40              L1158:
             tskcmd.c       8296          pProcDat->Stp++;
    00005E40 66A2                   MOV.L       @R10,R6    ; pProcDat
    00005E42 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005E44 7001                   ADD         #1,R0
    00005E46 A355                   BRA         L1144
    00005E48 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005E4A              L1123:
             tskcmd.c       8297          break;
             tskcmd.c       8298    
             tskcmd.c       8299      case 6: // 6． 圧力基板制御：未指定電磁弁ON、指定電磁弁OFF
             tskcmd.c       8300          vout.target = 0x0fff;
    00005E4A 0D000FFF               MOVI20      #4095,R13  ; H'00000FFF
    00005E4E D91A                   MOV.L       L1386+28,R9; __$vout
    00005E50 29D1                   MOV.W       R13,@R9    ; vout.target
    00005E52 3FD1108E               MOV.W       R13,@(284:12,R15)
             tskcmd.c       8301          vout.valout = ( (NzlTargetGet()) ^ 0x0fff );
    00005E56 B5DC                   BSR         __$NzlTargetGet
    00005E58 0009                   NOP
    00005E5A 6E03                   MOV         R0,R14
             tskcmd.c       8302          
             tskcmd.c       8303          mbx_send    (
             tskcmd.c       8304                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8305                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8306                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8307                          prid1,               // prid1
             tskcmd.c       8308                          bcid,                // bcid
             tskcmd.c       8309                          ID_MSG_VALVEOUT, // msgid
             tskcmd.c       8310                          inf1,                // sts
             tskcmd.c       8311                          inf2,                // sts2
             tskcmd.c       8312                          (UB *)&vout.target,  // data
             tskcmd.c       8313                          sizeof( ST_VOUT )    // siz
             tskcmd.c       8314                      );
    00005E5C E104                   MOV         #4,R1      ; H'00000004
    00005E5E 60DF                   EXTS.W      R13,R0
    00005E60 DD16                   MOV.L       L1386+32,R13; H'00000002+__$vout
    00005E62 20EA                   XOR         R14,R0
    00005E64 2D01                   MOV.W       R0,@R13    ; vout.valout
    00005E66 2F16                   MOV.L       R1,@-R15
    00005E68 D413                   MOV.L       L1386+28,R4; __$vout
    00005E6A 2F46                   MOV.L       R4,@-R15
    00005E6C 7FFC                   ADD         #-4,R15
    00005E6E 37F1812C               MOVU.B      @(300,R15),R7; inf2
    00005E72 2F72                   MOV.L       R7,@R15
    00005E74 7FFC                   ADD         #-4,R15
    00005E76 34F18134               MOVU.B      @(308,R15),R4; inf1
    00005E7A E99B                   MOV         #-101,R9   ; H'FFFFFF9B
    00005E7C 699C                   EXTU.B      R9,R9
    00005E7E 2F42                   MOV.L       R4,@R15
    00005E80 2F96                   MOV.L       R9,@-R15
    00005E82 2FB6                   MOV.L       R11,@-R15
    00005E84 E60D                   MOV         #13,R6     ; H'0000000D
    00005E86 E50C                   MOV         #12,R5     ; H'0000000C
    00005E88 6463                   MOV         R6,R4
    00005E8A D20D                   MOV.L       L1386+36,R2; _mbx_send
    00005E8C 420B                   JSR         @R2
    00005E8E 67C3                   MOV         R12,R7
    00005E90 7F18                   ADD         #24,R15
             tskcmd.c       8315          pProcDat->Stp++;
    00005E92 6EA2                   MOV.L       @R10,R14   ; pProcDat
    00005E94 84E2                   MOV.B       @(2,R14),R0; (pProcDat)->Stp
    00005E96 7001                   ADD         #1,R0
    00005E98 A32C                   BRA         L1144
    00005E9A 80E2                   MOV.B       R0,@(2,R14); (pProcDat)->Stp
    00005E9C              L1386:
    00005E9C <00000006>             .DATA.L     H'00000006+__$SpPtn
    00005EA0 <00000000>             .DATA.L     __$Sp
    00005EA4 <00000000>             .DATA.L     _GetFactor
    00005EA8 <00000000>             .DATA.L     _motor_SET
    00005EAC <00000000>             .DATA.L     __$AbsmvAction
    00005EB0 <00000005>             .DATA.L     H'00000005+__$SpPtn
    00005EB4 <00000000>             .DATA.L     __$pProcAdr
    00005EB8 <00000000>             .DATA.L     __$vout
    00005EBC <00000002>             .DATA.L     H'00000002+__$vout
    00005EC0 <00000000>             .DATA.L     _mbx_send
    00005EC4              L1124:
             tskcmd.c       8316          break;
             tskcmd.c       8317    
             tskcmd.c       8318      case 7: // 7． P軸吸引速度設定
             tskcmd.c       8319          devno  = MT_Z0;
             tskcmd.c       8320          spdptn = (pProcAdr->step[actstep].par05 >> 4);  // [Z]吸引下降速度パターン
    00005EC4 E014                   MOV         #20,R0     ; H'00000014
    00005EC6 65E3                   MOV         R14,R5
    00005EC8 4580                   MULR        R0,R5
    00005ECA D9C6                   MOV.L       L1387+2,R9 ; __$pProcAdr
    00005ECC 6D92                   MOV.L       @R9,R13    ; pProcAdr
    00005ECE E1FC                   MOV         #-4,R1     ; H'FFFFFFFC
    00005ED0 3D5C                   ADD         R5,R13
    00005ED2 30D18004               MOVU.B      @(4,R13),R0; pProcAdr->step[].par05
    00005ED6 3F51204A               MOV.L       R5,@(296:12,R15)
    00005EDA 401C                   SHAD        R1,R0
    00005EDC 3F01012C               MOV.B       R0,@(300:12,R15)
             tskcmd.c       8321          movptn = pProcAdr->step[actstep].par07;         // [Z]吸引終了高さ
             tskcmd.c       8322          movval = GetPositionValue(movptn);
    00005EE0 84D6                   MOV.B       @(6,R13),R0; pProcAdr->step[].par07
    00005EE2 DDC1                   MOV.L       L1387+6,R13; __$Sp
    00005EE4 B324                   BSR         __$GetPositionValue
    00005EE6 6403                   MOV         R0,R4
             tskcmd.c       8323    
             tskcmd.c       8324          MAC_SPEED_SET( devno, 
    00005EE8 32F1812C               MOVU.B      @(300,R15),R2
    00005EEC 3F012045               MOV.L       R0,@(276:12,R15); movval
    00005EF0 E00C                   MOV         #12,R0     ; H'0000000C
    00005EF2 E403                   MOV         #3,R4      ; H'00000003
    00005EF4 4280                   MULR        R0,R2
    00005EF6 32DC                   ADD         R13,R2
    00005EF8 ED40                   MOV         #64,R13    ; H'00000040
    00005EFA 3021503C               MOV.W       @(120:12,R2),R0; Sp[].ac
    00005EFE 3F21204C               MOV.L       R2,@(304:12,R15)
    00005F02 3DFC                   ADD         R15,R13
    00005F04 D5B9                   MOV.L       L1387+10,R5; _GetFactor
    00005F06 450B                   JSR         @R5
    00005F08 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    00005F0A 32F1604C               MOV.L       @(304:12,R15),R2
    00005F0E E600                   MOV         #0,R6      ; H'00000000
    00005F10 2D02                   MOV.L       R0,@R13    ; mp.factor
    00005F12 3121601F               MOV.L       @(124:12,R2),R1; Sp[].fl
    00005F16 34216020               MOV.L       @(128:12,R2),R4; Sp[].fh
    00005F1A 3521903D               MOVU.W      @(122,R2),R5; Sp[].gl
    00005F1E 1D12                   MOV.L       R1,@(8,R13); mp.FL
    00005F20 1D43                   MOV.L       R4,@(12,R13); mp.FH
    00005F22 1D54                   MOV.L       R5,@(16,R13); mp.utime
    00005F24 1D55                   MOV.L       R5,@(20,R13); mp.dtime
    00005F26 1D66                   MOV.L       R6,@(24,R13); mp.us
    00005F28 1D67                   MOV.L       R6,@(28,R13); mp.ds
    00005F2A 7FE0                   ADD         #-32,R15
    00005F2C 62F3                   MOV         R15,R2
    00005F2E 7260                   ADD         #96,R2
    00005F30 5721                   MOV.L       @(4,R2),R7 ; (part of)mp
    00005F32 5522                   MOV.L       @(8,R2),R5 ; (part of)mp
    00005F34 5D23                   MOV.L       @(12,R2),R13; (part of)mp
    00005F36 6422                   MOV.L       @R2,R4     ; (part of)mp
    00005F38 1F71                   MOV.L       R7,@(4,R15)
    00005F3A 1F52                   MOV.L       R5,@(8,R15)
    00005F3C 1FD3                   MOV.L       R13,@(12,R15)
    00005F3E 5724                   MOV.L       @(16,R2),R7; (part of)mp
    00005F40 5125                   MOV.L       @(20,R2),R1; (part of)mp
    00005F42 5D26                   MOV.L       @(24,R2),R13; (part of)mp
    00005F44 5527                   MOV.L       @(28,R2),R5; (part of)mp
    00005F46 2F42                   MOV.L       R4,@R15
    00005F48 E402                   MOV         #2,R4      ; H'00000002
    00005F4A 1F74                   MOV.L       R7,@(16,R15)
    00005F4C 1F15                   MOV.L       R1,@(20,R15)
    00005F4E 1FD6                   MOV.L       R13,@(24,R15)
    00005F50 D1A7                   MOV.L       L1387+14,R1; _motor_SET
    00005F52 410B                   JSR         @R1
    00005F54 1F57                   MOV.L       R5,@(28,R15)
    00005F56 7F20                   ADD         #32,R15
             tskcmd.c       8325                         Sp[devno][spdptn].ac, 
             tskcmd.c       8326                         Sp[devno][spdptn].fl, 
             tskcmd.c       8327                         Sp[devno][spdptn].fh, 
             tskcmd.c       8328                         Sp[devno][spdptn].gl );
             tskcmd.c       8329    
             tskcmd.c       8330          devno  = MT_P0;
             tskcmd.c       8331          spdptn = (pProcAdr->step[actstep].par05 & 0x0f);// [P]吸引速度パターン
             tskcmd.c       8332          MAC_SPEED_SET( devno, 
    00005F58 6792                   MOV.L       @R9,R7     ; pProcAdr
    00005F5A 30F1604A               MOV.L       @(296:12,R15),R0
    00005F5E 7704                   ADD         #4,R7
    00005F60 E403                   MOV         #3,R4      ; H'00000003
    00005F62 007C                   MOV.B       @(R0,R7),R0; pProcAdr->step[].par05
    00005F64 D9A0                   MOV.L       L1387+6,R9 ; __$Sp
    00005F66 C90F                   AND         #15,R0
    00005F68 6103                   MOV         R0,R1
    00005F6A E00C                   MOV         #12,R0     ; H'0000000C
    00005F6C 4180                   MULR        R0,R1
    00005F6E 319C                   ADD         R9,R1
    00005F70 3F112046               MOV.L       R1,@(280:12,R15)
    00005F74 3D11505A               MOV.W       @(180:12,R1),R13; Sp[].ac
    00005F78 D79C                   MOV.L       L1387+10,R7; _GetFactor
    00005F7A 470B                   JSR         @R7
    00005F7C 6913                   MOV         R1,R9
    00005F7E 3191602E               MOV.L       @(184:12,R9),R1; Sp[].fl
    00005F82 3491602F               MOV.L       @(188:12,R9),R4; Sp[].fh
    00005F86 3791905B               MOVU.W      @(182,R9),R7; Sp[].gl
    00005F8A E900                   MOV         #0,R9      ; H'00000000
    00005F8C 3FD11032               MOV.W       R13,@(100:12,R15); mp.accel_type
    00005F90 3F012018               MOV.L       R0,@(96:12,R15); mp.factor
    00005F94 3F11201A               MOV.L       R1,@(104:12,R15); mp.FL
    00005F98 3F41201B               MOV.L       R4,@(108:12,R15); mp.FH
    00005F9C 3F71201C               MOV.L       R7,@(112:12,R15); mp.utime
    00005FA0 3F71201D               MOV.L       R7,@(116:12,R15); mp.dtime
    00005FA4 3F91201E               MOV.L       R9,@(120:12,R15); mp.us
    00005FA8 3F91201F               MOV.L       R9,@(124:12,R15); mp.ds
    00005FAC 7FE0                   ADD         #-32,R15
    00005FAE E180                   MOV         #-128,R1   ; H'FFFFFF80
    00005FB0 611C                   EXTU.B      R1,R1
    00005FB2 E403                   MOV         #3,R4      ; H'00000003
    00005FB4 65F3                   MOV         R15,R5
    00005FB6 351C                   ADD         R1,R5
    00005FB8 5251                   MOV.L       @(4,R5),R2 ; (part of)mp
    00005FBA 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    00005FBC 1F21                   MOV.L       R2,@(4,R15)
    00005FBE 5253                   MOV.L       @(12,R5),R2; (part of)mp
    00005FC0 1F62                   MOV.L       R6,@(8,R15)
    00005FC2 1F23                   MOV.L       R2,@(12,R15)
    00005FC4 5254                   MOV.L       @(16,R5),R2; (part of)mp
    00005FC6 5655                   MOV.L       @(20,R5),R6; (part of)mp
    00005FC8 6952                   MOV.L       @R5,R9     ; (part of)mp
    00005FCA 1F24                   MOV.L       R2,@(16,R15)
    00005FCC 1F65                   MOV.L       R6,@(20,R15)
    00005FCE 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00005FD0 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00005FD2 2F92                   MOV.L       R9,@R15
    00005FD4 1F26                   MOV.L       R2,@(24,R15)
    00005FD6 D986                   MOV.L       L1387+14,R9; _motor_SET
    00005FD8 490B                   JSR         @R9
    00005FDA 1F67                   MOV.L       R6,@(28,R15)
    00005FDC 7F20                   ADD         #32,R15
             tskcmd.c       8333                         Sp[devno][spdptn].ac, 
             tskcmd.c       8334                         Sp[devno][spdptn].fl, 
             tskcmd.c       8335                         Sp[devno][spdptn].fh, 
             tskcmd.c       8336                         Sp[devno][spdptn].gl );
             tskcmd.c       8337          pProcDat->Stp++;
    00005FDE 66A2                   MOV.L       @R10,R6    ; pProcDat
    00005FE0 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00005FE2 7001                   ADD         #1,R0
    00005FE4 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00005FE6              L1125:
             tskcmd.c       8338          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8339    
             tskcmd.c       8340      case 8: // 8． 吸引開始（P軸吸引 & Z軸下降）
             tskcmd.c       8341          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par13 );
    00005FE6 E014                   MOV         #20,R0     ; H'00000014
    00005FE8 4E80                   MULR        R0,R14
    00005FEA D77E                   MOV.L       L1387+2,R7 ; __$pProcAdr
    00005FEC 6D72                   MOV.L       @R7,R13    ; pProcAdr
    00005FEE 7D0C                   ADD         #12,R13
    00005FF0 60E3                   MOV         R14,R0
    00005FF2 0DDE                   MOV.L       @(R0,R13),R13; pProcAdr->step[].par13
    00005FF4 2FD6                   MOV.L       R13,@-R15
    00005FF6 7FFC                   ADD         #-4,R15
    00005FF8 E602                   MOV         #2,R6      ; H'00000002
    00005FFA 39F16047               MOV.L       @(284:12,R15),R9; movval
    00005FFE E703                   MOV         #3,R7      ; H'00000003
    00006000 65B3                   MOV         R11,R5
    00006002 2F92                   MOV.L       R9,@R15
    00006004 D37B                   MOV.L       L1387+18,R3; __$MapAction
    00006006 430B                   JSR         @R3
    00006008 64C3                   MOV         R12,R4
    0000600A 7F08                   ADD         #8,R15
             tskcmd.c       8342          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8343          pProcDat->Stp++;
    0000600C 6EA2                   MOV.L       @R10,R14   ; pProcDat
    0000600E 84E2                   MOV.B       @(2,R14),R0; (pProcDat)->Stp
    00006010 7001                   ADD         #1,R0
    00006012 80E2                   MOV.B       R0,@(2,R14); (pProcDat)->Stp
    00006014              L1126:
             tskcmd.c       8344          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8345    
             tskcmd.c       8346      case 9: // 9． 圧力基板制御：吸引動作中に指定したノズルチャンネルの圧力を監視
             tskcmd.c       8347              //     ※各チャンネルの圧力センサ値が設定値を上回った場合、エラーとし電磁弁をONにする。
             tskcmd.c       8348          mbx_send    (
             tskcmd.c       8349                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8350                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8351                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8352                          prid1,               // prid1
             tskcmd.c       8353                          bcid,                // bcid
             tskcmd.c       8354                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8355                          inf1,                // sts
             tskcmd.c       8356                          inf2,                // sts2
             tskcmd.c       8357                          &dummy,              // data
             tskcmd.c       8358                          sizeof( dummy )      // siz
             tskcmd.c       8359                      );
    00006014 E501                   MOV         #1,R5      ; H'00000001
    00006016 2F56                   MOV.L       R5,@-R15
    00006018 ED84                   MOV         #-124,R13  ; H'FFFFFF84
    0000601A 6DDC                   EXTU.B      R13,R13
    0000601C 67F3                   MOV         R15,R7
    0000601E 37DC                   ADD         R13,R7
    00006020 2F76                   MOV.L       R7,@-R15
    00006022 7FFC                   ADD         #-4,R15
    00006024 611C                   EXTU.B      R1,R1
    00006026 3EF1812C               MOVU.B      @(300,R15),R14; inf2
    0000602A 2FE2                   MOV.L       R14,@R15
    0000602C 2F16                   MOV.L       R1,@-R15
    0000602E E499                   MOV         #-103,R4   ; H'FFFFFF99
    00006030 644C                   EXTU.B      R4,R4
    00006032 2F46                   MOV.L       R4,@-R15
    00006034 2FB6                   MOV.L       R11,@-R15
    00006036 E60D                   MOV         #13,R6     ; H'0000000D
    00006038 E50C                   MOV         #12,R5     ; H'0000000C
    0000603A 6463                   MOV         R6,R4
    0000603C D96E                   MOV.L       L1387+22,R9; _mbx_send
    0000603E 490B                   JSR         @R9
    00006040 67C3                   MOV         R12,R7
    00006042 7F18                   ADD         #24,R15
             tskcmd.c       8360          pProcDat->Stp++;
    00006044 61A2                   MOV.L       @R10,R1    ; pProcDat
    00006046 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00006048 7001                   ADD         #1,R0
    0000604A A253                   BRA         L1144
    0000604C 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    0000604E              L1127:
             tskcmd.c       8361          break;
             tskcmd.c       8362    
             tskcmd.c       8363      case 10:// 10．吸引動作終了
             tskcmd.c       8364          if( tskid == ID_TSK_MOTEND )
    0000604E 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    00006052 880A                   CMP/EQ      #10,R0
    00006054 8B08                   BF          L1165
             tskcmd.c       8365          {
             tskcmd.c       8366              WaitAction( prid1, bcid, 10 );
    00006056 E60A                   MOV         #10,R6     ; H'0000000A
    00006058 65B3                   MOV         R11,R5
    0000605A D368                   MOV.L       L1387+26,R3; __$WaitAction
    0000605C 430B                   JSR         @R3
    0000605E 64C3                   MOV         R12,R4
             tskcmd.c       8367              pProcDat->Stp++;
    00006060 62A2                   MOV.L       @R10,R2    ; pProcDat
    00006062 8422                   MOV.B       @(2,R2),R0 ; (pProcDat)->Stp
    00006064 7001                   ADD         #1,R0
    00006066 8022                   MOV.B       R0,@(2,R2) ; (pProcDat)->Stp
    00006068              L1165:
             tskcmd.c       8368          }
             tskcmd.c       8369          if( tskid == ID_TSK_PUNIT )
    00006068 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    0000606C 880D                   CMP/EQ      #13,R0
    0000606E 8901                   BT          L1422
    00006070 A240                   BRA         L1144
    00006072 0009                   NOP
    00006074              L1422:
             tskcmd.c       8370          {
             tskcmd.c       8371              mbx_send    (
             tskcmd.c       8372                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8373                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8374                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8375                              prid1,               // prid1
             tskcmd.c       8376                              bcid,                // bcid
             tskcmd.c       8377                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8378                              inf1,                // sts
             tskcmd.c       8379                              inf2,                // sts2
             tskcmd.c       8380                              &dummy,              // data
             tskcmd.c       8381                              sizeof( dummy )      // siz
             tskcmd.c       8382                          );
    00006074 E501                   MOV         #1,R5      ; H'00000001
    00006076 2F56                   MOV.L       R5,@-R15
    00006078 EA84                   MOV         #-124,R10  ; H'FFFFFF84
    0000607A 6AAC                   EXTU.B      R10,R10
    0000607C 67F3                   MOV         R15,R7
    0000607E 37AC                   ADD         R10,R7
    00006080 2F76                   MOV.L       R7,@-R15
    00006082 7FFC                   ADD         #-4,R15
    00006084 611C                   EXTU.B      R1,R1
    00006086 3DF1812C               MOVU.B      @(300,R15),R13; inf2
    0000608A 2FD2                   MOV.L       R13,@R15
    0000608C 2F16                   MOV.L       R1,@-R15
    0000608E E499                   MOV         #-103,R4   ; H'FFFFFF99
    00006090 644C                   EXTU.B      R4,R4
    00006092 2F46                   MOV.L       R4,@-R15
    00006094 2FB6                   MOV.L       R11,@-R15
    00006096 E60D                   MOV         #13,R6     ; H'0000000D
    00006098 E50C                   MOV         #12,R5     ; H'0000000C
    0000609A 6463                   MOV         R6,R4
    0000609C D956                   MOV.L       L1387+22,R9; _mbx_send
    0000609E 490B                   JSR         @R9
    000060A0 67C3                   MOV         R12,R7
    000060A2 A227                   BRA         L1144
    000060A4 7F18                   ADD         #24,R15
    000060A6              L1128:
             tskcmd.c       8383          }
             tskcmd.c       8384          break;
             tskcmd.c       8385    
             tskcmd.c       8386      case 11:  // 11．指定時間ウェイト待ち
             tskcmd.c       8387          if( msgid == ID_MSG_PRESSTAN )
    000060A6 E199                   MOV         #-103,R1   ; H'FFFFFF99
    000060A8 611C                   EXTU.B      R1,R1
    000060AA 3510                   CMP/EQ      R1,R5
    000060AC 8B01                   BF          L1423
    000060AE A221                   BRA         L1144
    000060B0 0009                   NOP
    000060B2              L1423:
             tskcmd.c       8388          {
             tskcmd.c       8389              //読み捨て
             tskcmd.c       8390              break;
             tskcmd.c       8391          }
             tskcmd.c       8392          if( msgid == ID_MSG_TIMWAIT )
    000060B2 E1C8                   MOV         #-56,R1    ; H'FFFFFFC8
    000060B4 611C                   EXTU.B      R1,R1
    000060B6 3510                   CMP/EQ      R1,R5
    000060B8 8B02                   BF          L1170
             tskcmd.c       8393          {
             tskcmd.c       8394              pProcDat->Stp++;
    000060BA 7201                   ADD         #1,R2
    000060BC 6023                   MOV         R2,R0
    000060BE 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    000060C0              L1129:
    000060C0              L1170:
             tskcmd.c       8395          }
             tskcmd.c       8396          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8397          
             tskcmd.c       8398      case 12:// 12．Z軸退避高さへ移動
             tskcmd.c       8399          devno  = MT_Z0;
             tskcmd.c       8400          spdptn = SpPtn.Z0_SpdNmlPtn;
    000060C0 DE4F                   MOV.L       L1387+30,R14; H'00000006+__$SpPtn
    000060C2 60E0                   MOV.B       @R14,R0    ; SpPtn.Z0_SpdNmlPtn
             tskcmd.c       8401          movval = GetPositionValue(POS_Z0_TAIHI);
    000060C4 E407                   MOV         #7,R4      ; H'00000007
    000060C6 E984                   MOV         #-124,R9   ; H'FFFFFF84
    000060C8 3F010110               MOV.B       R0,@(272:12,R15); spdptn
    000060CC B230                   BSR         __$GetPositionValue
    000060CE EC00                   MOV         #0,R12     ; H'00000000
             tskcmd.c       8402    
             tskcmd.c       8403          MAC_SPEED_SET( devno, 
    000060D0 3EF18110               MOVU.B      @(272,R15),R14; spdptn
    000060D4 3F012045               MOV.L       R0,@(276:12,R15); movval
    000060D8 E00C                   MOV         #12,R0     ; H'0000000C
    000060DA 699C                   EXTU.B      R9,R9
    000060DC 4E80                   MULR        R0,R14
    000060DE D442                   MOV.L       L1387+6,R4 ; __$Sp
    000060E0 39FC                   ADD         R15,R9
    000060E2 3E4C                   ADD         R4,R14
    000060E4 E403                   MOV         #3,R4      ; H'00000003
    000060E6 30E1503C               MOV.W       @(120:12,R14),R0; Sp[].ac
    000060EA 3FE12046               MOV.L       R14,@(280:12,R15)
    000060EE D13F                   MOV.L       L1387+10,R1; _GetFactor
    000060F0 410B                   JSR         @R1
    000060F2 8192                   MOV.W       R0,@(4,R9) ; mp.accel_type
    000060F4 2902                   MOV.L       R0,@R9     ; mp.factor
    000060F6 34E1601F               MOV.L       @(124:12,R14),R4; Sp[].fl
    000060FA 36E16020               MOV.L       @(128:12,R14),R6; Sp[].fh
    000060FE 37E1903D               MOVU.W      @(122,R14),R7; Sp[].gl
    00006102 1942                   MOV.L       R4,@(8,R9) ; mp.FL
    00006104 1963                   MOV.L       R6,@(12,R9); mp.FH
    00006106 1974                   MOV.L       R7,@(16,R9); mp.utime
    00006108 1975                   MOV.L       R7,@(20,R9); mp.dtime
    0000610A 19C6                   MOV.L       R12,@(24,R9); mp.us
    0000610C 19C7                   MOV.L       R12,@(28,R9); mp.ds
    0000610E 7FE0                   ADD         #-32,R15
    00006110 E7A4                   MOV         #-92,R7    ; H'FFFFFFA4
    00006112 65F3                   MOV         R15,R5
    00006114 677C                   EXTU.B      R7,R7
    00006116 E402                   MOV         #2,R4      ; H'00000002
    00006118 357C                   ADD         R7,R5
    0000611A 6952                   MOV.L       @R5,R9     ; (part of)mp
    0000611C 5E51                   MOV.L       @(4,R5),R14; (part of)mp
    0000611E 5152                   MOV.L       @(8,R5),R1 ; (part of)mp
    00006120 2F92                   MOV.L       R9,@R15
    00006122 1FE1                   MOV.L       R14,@(4,R15)
    00006124 5C53                   MOV.L       @(12,R5),R12; (part of)mp
    00006126 1F12                   MOV.L       R1,@(8,R15)
    00006128 5754                   MOV.L       @(16,R5),R7; (part of)mp
    0000612A 5E55                   MOV.L       @(20,R5),R14; (part of)mp
    0000612C 5156                   MOV.L       @(24,R5),R1; (part of)mp
    0000612E 5957                   MOV.L       @(28,R5),R9; (part of)mp
    00006130 1FC3                   MOV.L       R12,@(12,R15)
    00006132 1F74                   MOV.L       R7,@(16,R15)
    00006134 1FE5                   MOV.L       R14,@(20,R15)
    00006136 1F16                   MOV.L       R1,@(24,R15)
    00006138 DC2D                   MOV.L       L1387+14,R12; _motor_SET
    0000613A 4C0B                   JSR         @R12
    0000613C 1F97                   MOV.L       R9,@(28,R15)
    0000613E 7F1C                   ADD         #28,R15
    00006140 E700                   MOV         #0,R7      ; H'00000000
             tskcmd.c       8404                         Sp[devno][spdptn].ac, 
             tskcmd.c       8405                         Sp[devno][spdptn].fl, 
             tskcmd.c       8406                         Sp[devno][spdptn].fh, 
             tskcmd.c       8407                         Sp[devno][spdptn].gl );
             tskcmd.c       8408    
             tskcmd.c       8409          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00006142 31F16046               MOV.L       @(280:12,R15),R1; movval
    00006146 E602                   MOV         #2,R6      ; H'00000002
    00006148 E451                   MOV         #81,R4     ; H'00000051
    0000614A 2F12                   MOV.L       R1,@R15
    0000614C D32D                   MOV.L       L1387+34,R3; __$AbsmvAction
    0000614E 430B                   JSR         @R3
    00006150 65B3                   MOV         R11,R5
    00006152 6203                   MOV         R0,R2
    00006154 7F04                   ADD         #4,R15
    00006156 6503                   MOV         R0,R5
    00006158 E042                   MOV         #66,R0     ; H'00000042
    0000615A 4008                   SHLL2       R0
             tskcmd.c       8410          if( result == E_SUCCESS ) result = E_CONTINUE;
    0000615C 2228                   TST         R2,R2
    0000615E 8F01                   BF/S        L1172
    00006160 0F56                   MOV.L       R5,@(R0,R15); result
    00006162 0FD6                   MOV.L       R13,@(R0,R15); result
    00006164              L1172:
             tskcmd.c       8411          pProcDat->Stp++;
    00006164 66A2                   MOV.L       @R10,R6    ; pProcDat
    00006166 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    00006168 7001                   ADD         #1,R0
    0000616A A1C3                   BRA         L1144
    0000616C 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    0000616E              L1130:
             tskcmd.c       8412          break;
             tskcmd.c       8413    
             tskcmd.c       8414      //****************************************************
             tskcmd.c       8415      //***                    吐出                      ***
             tskcmd.c       8416      //****************************************************
             tskcmd.c       8417      case 13:   // 13．Y0軸指定位置移動
             tskcmd.c       8418          movptn = pProcAdr->step[actstep].par04;
             tskcmd.c       8419          movval = GetPositionValue(movptn);
    0000616E E014                   MOV         #20,R0     ; H'00000014
    00006170 4E80                   MULR        R0,R14
    00006172 D71C                   MOV.L       L1387+2,R7 ; __$pProcAdr
    00006174 6C72                   MOV.L       @R7,R12    ; pProcAdr
    00006176 7C03                   ADD         #3,R12
    00006178 60E3                   MOV         R14,R0
    0000617A 04CC                   MOV.B       @(R0,R12),R4; pProcAdr->step[].par04
    0000617C B1D8                   BSR         __$GetPositionValue
    0000617E 66E3                   MOV         R14,R6
             tskcmd.c       8420          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    00006180 2F06                   MOV.L       R0,@-R15
    00006182 E700                   MOV         #0,R7      ; H'00000000
    00006184 E451                   MOV         #81,R4     ; H'00000051
    00006186 D31F                   MOV.L       L1387+34,R3; __$AbsmvAction
    00006188 430B                   JSR         @R3
    0000618A 65B3                   MOV         R11,R5
    0000618C 6903                   MOV         R0,R9
    0000618E 7F04                   ADD         #4,R15
    00006190 6E03                   MOV         R0,R14
    00006192 E042                   MOV         #66,R0     ; H'00000042
    00006194 4008                   SHLL2       R0
             tskcmd.c       8421          if( result == E_SUCCESS ) result = E_CONTINUE;
    00006196 2998                   TST         R9,R9
    00006198 8F01                   BF/S        L1175
    0000619A 0FE6                   MOV.L       R14,@(R0,R15); result
    0000619C 0FD6                   MOV.L       R13,@(R0,R15); result
    0000619E              L1175:
             tskcmd.c       8422          pProcDat->Stp++;
    0000619E 66A2                   MOV.L       @R10,R6    ; pProcDat
    000061A0 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000061A2 7001                   ADD         #1,R0
    000061A4 A1A6                   BRA         L1144
    000061A6 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000061A8              L1131:
             tskcmd.c       8423          break;
             tskcmd.c       8424    
             tskcmd.c       8425      case 14:   // 14．Z軸吐出開始高さへ移動
             tskcmd.c       8426          devno  = MT_Z0;
             tskcmd.c       8427          movptn = pProcAdr->step[actstep].par09;                 // 吐出開始高さ
             tskcmd.c       8428          movval = GetPositionValue(movptn);
    000061A8 E014                   MOV         #20,R0     ; H'00000014
    000061AA 4E80                   MULR        R0,R14
    000061AC D10D                   MOV.L       L1387+2,R1 ; __$pProcAdr
    000061AE 6C12                   MOV.L       @R1,R12    ; pProcAdr
    000061B0 7C08                   ADD         #8,R12
    000061B2 60E3                   MOV         R14,R0
    000061B4 B1BC                   BSR         __$GetPositionValue
    000061B6 04CC                   MOV.B       @(R0,R12),R4; pProcAdr->step[].par09
             tskcmd.c       8429    
             tskcmd.c       8430          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    000061B8 2F06                   MOV.L       R0,@-R15
    000061BA E700                   MOV         #0,R7      ; H'00000000
    000061BC E602                   MOV         #2,R6      ; H'00000002
    000061BE E451                   MOV         #81,R4     ; H'00000051
    000061C0 D310                   MOV.L       L1387+34,R3; __$AbsmvAction
    000061C2 430B                   JSR         @R3
    000061C4 65B3                   MOV         R11,R5
    000061C6 6903                   MOV         R0,R9
    000061C8 7F04                   ADD         #4,R15
    000061CA 6E03                   MOV         R0,R14
    000061CC E042                   MOV         #66,R0     ; H'00000042
    000061CE 4008                   SHLL2       R0
             tskcmd.c       8431          if( result == E_SUCCESS ) result = E_CONTINUE;
    000061D0 2998                   TST         R9,R9
    000061D2 8F01                   BF/S        L1178
    000061D4 0FE6                   MOV.L       R14,@(R0,R15); result
    000061D6 0FD6                   MOV.L       R13,@(R0,R15); result
    000061D8              L1178:
             tskcmd.c       8432          pProcDat->Stp++;
    000061D8 66A2                   MOV.L       @R10,R6    ; pProcDat
    000061DA 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000061DC 7001                   ADD         #1,R0
    000061DE A189                   BRA         L1144
    000061E0 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000061E2              L1387:
    000061E2 00000002               .RES.W      1
    000061E4 <00000000>             .DATA.L     __$pProcAdr
    000061E8 <00000000>             .DATA.L     __$Sp
    000061EC <00000000>             .DATA.L     _GetFactor
    000061F0 <00000000>             .DATA.L     _motor_SET
    000061F4 <00000000>             .DATA.L     __$MapAction
    000061F8 <00000000>             .DATA.L     _mbx_send
    000061FC <00000000>             .DATA.L     __$WaitAction
    00006200 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00006204 <00000000>             .DATA.L     __$AbsmvAction
    00006208              L1132:
             tskcmd.c       8433          break;
             tskcmd.c       8434          
             tskcmd.c       8435      case 15:   // 15．P軸吐出速度設定、Z軸上昇速度設定
             tskcmd.c       8436          devno  = MT_Z0;
             tskcmd.c       8437          spdptn = (pProcAdr->step[actstep].par08 >> 4);
    00006208 E014                   MOV         #20,R0     ; H'00000014
    0000620A 61E3                   MOV         R14,R1
    0000620C 4180                   MULR        R0,R1
    0000620E D9BD                   MOV.L       L1388+2,R9 ; __$pProcAdr
    00006210 6D92                   MOV.L       @R9,R13    ; pProcAdr
    00006212 3D1C                   ADD         R1,R13
    00006214 30D18007               MOVU.B      @(7,R13),R0; pProcAdr->step[].par08
    00006218 3F11204A               MOV.L       R1,@(296:12,R15)
    0000621C E1FC                   MOV         #-4,R1     ; H'FFFFFFFC
    0000621E 401C                   SHAD        R1,R0
    00006220 3F01012C               MOV.B       R0,@(300:12,R15)
             tskcmd.c       8438          movptn = pProcAdr->step[actstep].par10;                 // 吐出終了位置
             tskcmd.c       8439          movval = GetPositionValue(movptn);
    00006224 84D9                   MOV.B       @(9,R13),R0; pProcAdr->step[].par10
    00006226 EDA4                   MOV         #-92,R13   ; H'FFFFFFA4
    00006228 6DDC                   EXTU.B      R13,R13
    0000622A 6403                   MOV         R0,R4
    0000622C B180                   BSR         __$GetPositionValue
    0000622E 3DFC                   ADD         R15,R13
             tskcmd.c       8440    
             tskcmd.c       8441          MAC_SPEED_SET( devno, 
    00006230 32F1812C               MOVU.B      @(300,R15),R2
    00006234 3F012045               MOV.L       R0,@(276:12,R15); movval
    00006238 E00C                   MOV         #12,R0     ; H'0000000C
    0000623A E403                   MOV         #3,R4      ; H'00000003
    0000623C 4280                   MULR        R0,R2
    0000623E D1B2                   MOV.L       L1388+6,R1 ; __$Sp
    00006240 321C                   ADD         R1,R2
    00006242 3021503C               MOV.W       @(120:12,R2),R0; Sp[].ac
    00006246 3F21204C               MOV.L       R2,@(304:12,R15)
    0000624A D7B0                   MOV.L       L1388+10,R7; _GetFactor
    0000624C 470B                   JSR         @R7
    0000624E 81D2                   MOV.W       R0,@(4,R13); mp.accel_type
    00006250 31F1604C               MOV.L       @(304:12,R15),R1
    00006254 2D02                   MOV.L       R0,@R13    ; mp.factor
    00006256 3411601F               MOV.L       @(124:12,R1),R4; Sp[].fl
    0000625A 35116020               MOV.L       @(128:12,R1),R5; Sp[].fh
    0000625E 3711903D               MOVU.W      @(122,R1),R7; Sp[].gl
    00006262 E100                   MOV         #0,R1      ; H'00000000
    00006264 1D42                   MOV.L       R4,@(8,R13); mp.FL
    00006266 1D53                   MOV.L       R5,@(12,R13); mp.FH
    00006268 1D74                   MOV.L       R7,@(16,R13); mp.utime
    0000626A 1D75                   MOV.L       R7,@(20,R13); mp.dtime
    0000626C 1D16                   MOV.L       R1,@(24,R13); mp.us
    0000626E 1D17                   MOV.L       R1,@(28,R13); mp.ds
    00006270 7FE0                   ADD         #-32,R15
    00006272 E4C4                   MOV         #-60,R4    ; H'FFFFFFC4
    00006274 62F3                   MOV         R15,R2
    00006276 644C                   EXTU.B      R4,R4
    00006278 324C                   ADD         R4,R2
    0000627A 6522                   MOV.L       @R2,R5     ; (part of)mp
    0000627C 5D22                   MOV.L       @(8,R2),R13; (part of)mp
    0000627E 5124                   MOV.L       @(16,R2),R1; (part of)mp
    00006280 5421                   MOV.L       @(4,R2),R4 ; (part of)mp
    00006282 2F52                   MOV.L       R5,@R15
    00006284 5723                   MOV.L       @(12,R2),R7; (part of)mp
    00006286 1FD2                   MOV.L       R13,@(8,R15)
    00006288 5D25                   MOV.L       @(20,R2),R13; (part of)mp
    0000628A 1F14                   MOV.L       R1,@(16,R15)
    0000628C 5126                   MOV.L       @(24,R2),R1; (part of)mp
    0000628E 5527                   MOV.L       @(28,R2),R5; (part of)mp
    00006290 1F41                   MOV.L       R4,@(4,R15)
    00006292 E402                   MOV         #2,R4      ; H'00000002
    00006294 1F73                   MOV.L       R7,@(12,R15)
    00006296 1FD5                   MOV.L       R13,@(20,R15)
    00006298 1F16                   MOV.L       R1,@(24,R15)
    0000629A DD9D                   MOV.L       L1388+14,R13; _motor_SET
    0000629C 4D0B                   JSR         @R13
    0000629E 1F57                   MOV.L       R5,@(28,R15)
    000062A0 7F20                   ADD         #32,R15
             tskcmd.c       8442                         Sp[devno][spdptn].ac, 
             tskcmd.c       8443                         Sp[devno][spdptn].fl, 
             tskcmd.c       8444                         Sp[devno][spdptn].fh, 
             tskcmd.c       8445                         Sp[devno][spdptn].gl );
             tskcmd.c       8446    
             tskcmd.c       8447          devno  = MT_P0;
             tskcmd.c       8448          spdptn = (pProcAdr->step[actstep].par08 & 0x0f);
             tskcmd.c       8449          MAC_SPEED_SET( devno, 
    000062A2 6492                   MOV.L       @R9,R4     ; pProcAdr
    000062A4 30F1604A               MOV.L       @(296:12,R15),R0
    000062A8 7407                   ADD         #7,R4
    000062AA E90C                   MOV         #12,R9     ; H'0000000C
    000062AC 004C                   MOV.B       @(R0,R4),R0; pProcAdr->step[].par08
    000062AE D596                   MOV.L       L1388+6,R5 ; __$Sp
    000062B0 C90F                   AND         #15,R0
    000062B2 6D03                   MOV         R0,R13
    000062B4 6093                   MOV         R9,R0
    000062B6 4D80                   MULR        R0,R13
    000062B8 3D5C                   ADD         R5,R13
    000062BA 37D1505A               MOV.W       @(180:12,R13),R7; Sp[].ac
    000062BE 3FD12046               MOV.L       R13,@(280:12,R15)
    000062C2 3F711064               MOV.W       R7,@(200:12,R15); mp.accel_type
    000062C6 D791                   MOV.L       L1388+10,R7; _GetFactor
    000062C8 470B                   JSR         @R7
    000062CA E403                   MOV         #3,R4      ; H'00000003
    000062CC 65D3                   MOV         R13,R5
    000062CE 3F012031               MOV.L       R0,@(196:12,R15); mp.factor
    000062D2 39D1602E               MOV.L       @(184:12,R13),R9; Sp[].fl
    000062D6 3DD1602F               MOV.L       @(188:12,R13),R13; Sp[].fh
    000062DA 3151905B               MOVU.W      @(182,R5),R1; Sp[].gl
    000062DE 3F912033               MOV.L       R9,@(204:12,R15); mp.FL
    000062E2 E900                   MOV         #0,R9      ; H'00000000
    000062E4 3FD12034               MOV.L       R13,@(208:12,R15); mp.FH
    000062E8 3F112035               MOV.L       R1,@(212:12,R15); mp.utime
    000062EC 3F112036               MOV.L       R1,@(216:12,R15); mp.dtime
    000062F0 3F912037               MOV.L       R9,@(220:12,R15); mp.us
    000062F4 3F912038               MOV.L       R9,@(224:12,R15); mp.ds
    000062F8 7FE0                   ADD         #-32,R15
    000062FA E2E4                   MOV         #-28,R2    ; H'FFFFFFE4
    000062FC 622C                   EXTU.B      R2,R2
    000062FE E403                   MOV         #3,R4      ; H'00000003
    00006300 65F3                   MOV         R15,R5
    00006302 352C                   ADD         R2,R5
    00006304 5651                   MOV.L       @(4,R5),R6 ; (part of)mp
    00006306 5252                   MOV.L       @(8,R5),R2 ; (part of)mp
    00006308 1F61                   MOV.L       R6,@(4,R15)
    0000630A 5653                   MOV.L       @(12,R5),R6; (part of)mp
    0000630C 1F22                   MOV.L       R2,@(8,R15)
    0000630E 1F63                   MOV.L       R6,@(12,R15)
    00006310 5654                   MOV.L       @(16,R5),R6; (part of)mp
    00006312 5255                   MOV.L       @(20,R5),R2; (part of)mp
    00006314 6952                   MOV.L       @R5,R9     ; (part of)mp
    00006316 1F64                   MOV.L       R6,@(16,R15)
    00006318 1F25                   MOV.L       R2,@(20,R15)
    0000631A 5256                   MOV.L       @(24,R5),R2; (part of)mp
    0000631C 5657                   MOV.L       @(28,R5),R6; (part of)mp
    0000631E 2F92                   MOV.L       R9,@R15
    00006320 1F26                   MOV.L       R2,@(24,R15)
    00006322 D17B                   MOV.L       L1388+14,R1; _motor_SET
    00006324 410B                   JSR         @R1
    00006326 1F67                   MOV.L       R6,@(28,R15)
    00006328 7F20                   ADD         #32,R15
             tskcmd.c       8450                         Sp[devno][spdptn].ac, 
             tskcmd.c       8451                         Sp[devno][spdptn].fl, 
             tskcmd.c       8452                         Sp[devno][spdptn].fh, 
             tskcmd.c       8453                         Sp[devno][spdptn].gl );
             tskcmd.c       8454          pProcDat->Stp++;
    0000632A 66A2                   MOV.L       @R10,R6    ; pProcDat
    0000632C 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    0000632E 7001                   ADD         #1,R0
    00006330 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    00006332              L1133:
             tskcmd.c       8455          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8456    
             tskcmd.c       8457      case 16:   // 16．吐出開始（P軸吐出・Z軸吐出上昇同時駆動）、同時に圧力基板へ圧力値取得指示
             tskcmd.c       8458          MapAction( prid1, bcid, MT_Z0, MT_P0, movval, pProcAdr->step[actstep].par14 );
    00006332 E014                   MOV         #20,R0     ; H'00000014
    00006334 4E80                   MULR        R0,R14
    00006336 D473                   MOV.L       L1388+2,R4 ; __$pProcAdr
    00006338 6D42                   MOV.L       @R4,R13    ; pProcAdr
    0000633A 7D10                   ADD         #16,R13
    0000633C 60E3                   MOV         R14,R0
    0000633E 0DDE                   MOV.L       @(R0,R13),R13; pProcAdr->step[].par14
    00006340 2FD6                   MOV.L       R13,@-R15
    00006342 7FFC                   ADD         #-4,R15
    00006344 E602                   MOV         #2,R6      ; H'00000002
    00006346 39F16047               MOV.L       @(284:12,R15),R9; movval
    0000634A E703                   MOV         #3,R7      ; H'00000003
    0000634C 65B3                   MOV         R11,R5
    0000634E 2F92                   MOV.L       R9,@R15
    00006350 D370                   MOV.L       L1388+18,R3; __$MapAction
    00006352 430B                   JSR         @R3
    00006354 64C3                   MOV         R12,R4
    00006356 7F08                   ADD         #8,R15
             tskcmd.c       8459          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8460          pProcDat->Stp++;
    00006358 6EA2                   MOV.L       @R10,R14   ; pProcDat
    0000635A 84E2                   MOV.B       @(2,R14),R0; (pProcDat)->Stp
    0000635C 7001                   ADD         #1,R0
    0000635E 80E2                   MOV.B       R0,@(2,R14); (pProcDat)->Stp
    00006360              L1134:
             tskcmd.c       8461          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8462    
             tskcmd.c       8463      case 17:   // 17．P軸・Z軸動作終わるまで、圧力状態監視を行う。閾値以下を検出した場合は、吐出失敗。
             tskcmd.c       8464          mbx_send    (
             tskcmd.c       8465                          ID_TSK_PUNIT,        // tskid
             tskcmd.c       8466                          ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8467                          ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8468                          prid1,               // prid1
             tskcmd.c       8469                          bcid,                // bcid
             tskcmd.c       8470                          ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8471                          inf1,                // sts
             tskcmd.c       8472                          inf2,                // sts2
             tskcmd.c       8473                          &dummy,              // data
             tskcmd.c       8474                          sizeof( dummy )      // siz
             tskcmd.c       8475                      );
    00006360 E501                   MOV         #1,R5      ; H'00000001
    00006362 2F56                   MOV.L       R5,@-R15
    00006364 EE84                   MOV         #-124,R14  ; H'FFFFFF84
    00006366 6EEC                   EXTU.B      R14,R14
    00006368 67F3                   MOV         R15,R7
    0000636A 37EC                   ADD         R14,R7
    0000636C 2F76                   MOV.L       R7,@-R15
    0000636E 7FFC                   ADD         #-4,R15
    00006370 611C                   EXTU.B      R1,R1
    00006372 39F1812C               MOVU.B      @(300,R15),R9; inf2
    00006376 2F92                   MOV.L       R9,@R15
    00006378 2F16                   MOV.L       R1,@-R15
    0000637A E499                   MOV         #-103,R4   ; H'FFFFFF99
    0000637C 644C                   EXTU.B      R4,R4
    0000637E 2F46                   MOV.L       R4,@-R15
    00006380 2FB6                   MOV.L       R11,@-R15
    00006382 E60D                   MOV         #13,R6     ; H'0000000D
    00006384 E50C                   MOV         #12,R5     ; H'0000000C
    00006386 6463                   MOV         R6,R4
    00006388 DD63                   MOV.L       L1388+22,R13; _mbx_send
    0000638A 4D0B                   JSR         @R13
    0000638C 67C3                   MOV         R12,R7
    0000638E 7F18                   ADD         #24,R15
             tskcmd.c       8476          pProcDat->Stp++;
    00006390 61A2                   MOV.L       @R10,R1    ; pProcDat
    00006392 8412                   MOV.B       @(2,R1),R0 ; (pProcDat)->Stp
    00006394 7001                   ADD         #1,R0
    00006396 A0AD                   BRA         L1144
    00006398 8012                   MOV.B       R0,@(2,R1) ; (pProcDat)->Stp
    0000639A              L1135:
             tskcmd.c       8477          break;
             tskcmd.c       8478    
             tskcmd.c       8479      case 18:   // 18．（P軸・Z軸動作終了後）圧力基板制御：圧力監視終了。全てのノズルチャンネルの電磁弁をOFFにする。
             tskcmd.c       8480          if( tskid == ID_TSK_MOTEND )
    0000639A 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    0000639E 880A                   CMP/EQ      #10,R0
    000063A0 8B1D                   BF          L1184
             tskcmd.c       8481          {
             tskcmd.c       8482              vout.target = 0x0fff;
    000063A2 06000FFF               MOVI20      #4095,R6   ; H'00000FFF
    000063A6 DE5D                   MOV.L       L1388+26,R14; __$vout
             tskcmd.c       8483              vout.valout = 0x0000;
    000063A8 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       8484              
             tskcmd.c       8485              mbx_send    (
             tskcmd.c       8486                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8487                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8488                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8489                              prid1,               // prid1
             tskcmd.c       8490                              bcid,                // bcid
             tskcmd.c       8491                              ID_MSG_VALVEOUT, // msgid
             tskcmd.c       8492                              inf1,                // sts
             tskcmd.c       8493                              inf2,                // sts2
             tskcmd.c       8494                              (UB *)&vout.target,  // data
             tskcmd.c       8495                              sizeof( ST_VOUT )    // siz
             tskcmd.c       8496                          );
    000063AA E704                   MOV         #4,R7      ; H'00000004
    000063AC 2E61                   MOV.W       R6,@R14    ; vout.target
    000063AE 81E1                   MOV.W       R0,@(2,R14); vout.valout
    000063B0 2F76                   MOV.L       R7,@-R15
    000063B2 D95A                   MOV.L       L1388+26,R9; __$vout
    000063B4 2F96                   MOV.L       R9,@-R15
    000063B6 7FFC                   ADD         #-4,R15
    000063B8 32F1812C               MOVU.B      @(300,R15),R2; inf2
    000063BC 2F22                   MOV.L       R2,@R15
    000063BE 2F16                   MOV.L       R1,@-R15
    000063C0 E49B                   MOV         #-101,R4   ; H'FFFFFF9B
    000063C2 644C                   EXTU.B      R4,R4
    000063C4 2F46                   MOV.L       R4,@-R15
    000063C6 2FB6                   MOV.L       R11,@-R15
    000063C8 E60D                   MOV         #13,R6     ; H'0000000D
    000063CA E50C                   MOV         #12,R5     ; H'0000000C
    000063CC 6463                   MOV         R6,R4
    000063CE DD52                   MOV.L       L1388+22,R13; _mbx_send
    000063D0 4D0B                   JSR         @R13
    000063D2 67C3                   MOV         R12,R7
    000063D4 7F18                   ADD         #24,R15
             tskcmd.c       8497              pProcDat->Stp++;
    000063D6 64A2                   MOV.L       @R10,R4    ; pProcDat
    000063D8 8442                   MOV.B       @(2,R4),R0 ; (pProcDat)->Stp
    000063DA 7001                   ADD         #1,R0
    000063DC 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    000063DE              L1184:
             tskcmd.c       8498          }
             tskcmd.c       8499          if( tskid == ID_TSK_PUNIT )
    000063DE 30F1604D               MOV.L       @(308:12,R15),R0; tskid
    000063E2 880D                   CMP/EQ      #13,R0
    000063E4 8901                   BT          L1424
    000063E6 A085                   BRA         L1144
    000063E8 0009                   NOP
    000063EA              L1424:
             tskcmd.c       8500          {
             tskcmd.c       8501              mbx_send    (
             tskcmd.c       8502                              ID_TSK_PUNIT,        // tskid
             tskcmd.c       8503                              ID_MPF_PUNIT,        // mpfid
             tskcmd.c       8504                              ID_MBX_PUNIT,        // mbxid
             tskcmd.c       8505                              prid1,               // prid1
             tskcmd.c       8506                              bcid,                // bcid
             tskcmd.c       8507                              ID_MSG_PRESSTAN, // msgid
             tskcmd.c       8508                              inf1,                // sts
             tskcmd.c       8509                              inf2,                // sts2
             tskcmd.c       8510                              &dummy,              // data
             tskcmd.c       8511                              sizeof( dummy )      // siz
             tskcmd.c       8512                          );
    000063EA EA01                   MOV         #1,R10     ; H'00000001
    000063EC 2FA6                   MOV.L       R10,@-R15
    000063EE E284                   MOV         #-124,R2   ; H'FFFFFF84
    000063F0 622C                   EXTU.B      R2,R2
    000063F2 6DF3                   MOV         R15,R13
    000063F4 3D2C                   ADD         R2,R13
    000063F6 2FD6                   MOV.L       R13,@-R15
    000063F8 7FFC                   ADD         #-4,R15
    000063FA 3EF1812C               MOVU.B      @(300,R15),R14; inf2
    000063FE 2FE2                   MOV.L       R14,@R15
    00006400 7FFC                   ADD         #-4,R15
    00006402 35F18134               MOVU.B      @(308,R15),R5; inf1
    00006406 E999                   MOV         #-103,R9   ; H'FFFFFF99
    00006408 699C                   EXTU.B      R9,R9
    0000640A 2F52                   MOV.L       R5,@R15
    0000640C 2F96                   MOV.L       R9,@-R15
    0000640E 2FB6                   MOV.L       R11,@-R15
    00006410 E60D                   MOV         #13,R6     ; H'0000000D
    00006412 E50C                   MOV         #12,R5     ; H'0000000C
    00006414 6463                   MOV         R6,R4
    00006416 D140                   MOV.L       L1388+22,R1; _mbx_send
    00006418 410B                   JSR         @R1
    0000641A 67C3                   MOV         R12,R7
    0000641C A06A                   BRA         L1144
    0000641E 7F18                   ADD         #24,R15
    00006420              L1136:
             tskcmd.c       8513          }
             tskcmd.c       8514          break;
             tskcmd.c       8515          
             tskcmd.c       8516      case 19:  // 19．指定時間ウェイト
             tskcmd.c       8517          if( msgid == ID_MSG_PRESSTAN )
             tskcmd.c       8518          {
             tskcmd.c       8519              //読み捨て
             tskcmd.c       8520          }
             tskcmd.c       8521          if( msgid == ID_MSG_VALVEOUT )
    00006420 E19B                   MOV         #-101,R1   ; H'FFFFFF9B
    00006422 611C                   EXTU.B      R1,R1
    00006424 3510                   CMP/EQ      R1,R5
    00006426 8B65                   BF          L1144
             tskcmd.c       8522          {
             tskcmd.c       8523              pProcDat->Stp++;
    00006428 7201                   ADD         #1,R2
             tskcmd.c       8524              WaitAction( prid1, bcid, 10 );
    0000642A E60A                   MOV         #10,R6     ; H'0000000A
    0000642C 6023                   MOV         R2,R0
    0000642E 8042                   MOV.B       R0,@(2,R4) ; (pProcDat)->Stp
    00006430 65B3                   MOV         R11,R5
    00006432 D33B                   MOV.L       L1388+30,R3; __$WaitAction
    00006434 430B                   JSR         @R3
    00006436 64C3                   MOV         R12,R4
    00006438 A05C                   BRA         L1144
    0000643A 0009                   NOP
    0000643C              L1140:
             tskcmd.c       8525          }
             tskcmd.c       8526          break;
             tskcmd.c       8527          
             tskcmd.c       8528          
             tskcmd.c       8529      case 20:  // 20．Z軸通常速度設定・退避位置移動
             tskcmd.c       8530          devno  = MT_Z0;
             tskcmd.c       8531          spdptn = SpPtn.Z0_SpdNmlPtn;
             tskcmd.c       8532          movval = GetPositionValue(POS_Z0_TAIHI);
             tskcmd.c       8533    
             tskcmd.c       8534          MAC_SPEED_SET( devno, 
             tskcmd.c       8535                         Sp[devno][spdptn].ac, 
             tskcmd.c       8536                         Sp[devno][spdptn].fl, 
             tskcmd.c       8537                         Sp[devno][spdptn].fh, 
             tskcmd.c       8538                         Sp[devno][spdptn].gl );
             tskcmd.c       8539    
             tskcmd.c       8540          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
             tskcmd.c       8541          if( result == E_SUCCESS ) result = E_CONTINUE;
             tskcmd.c       8542          pProcDat->Stp++;
             tskcmd.c       8543          break;
             tskcmd.c       8544          
             tskcmd.c       8545          
             tskcmd.c       8546      case 21:  // 21．終了待ち
             tskcmd.c       8547          result = E_SUCCESS;
    0000643C E200                   MOV         #0,R2      ; H'00000000
    0000643E 3F212042               MOV.L       R2,@(264:12,R15); result
    00006442 A057                   BRA         L1144
    00006444 0009                   NOP
    00006446              L1139:
    00006446 D437                   MOV.L       L1388+34,R4; H'00000006+__$SpPtn
    00006448 6E40                   MOV.B       @R4,R14    ; SpPtn.Z0_SpdNmlPtn
    0000644A B071                   BSR         __$GetPositionValue
    0000644C E407                   MOV         #7,R4      ; H'00000007
    0000644E 6D03                   MOV         R0,R13
    00006450 E00C                   MOV         #12,R0     ; H'0000000C
    00006452 6EEC                   EXTU.B      R14,R14
    00006454 4E80                   MULR        R0,R14
    00006456 D22C                   MOV.L       L1388+6,R2 ; __$Sp
    00006458 3E2C                   ADD         R2,R14
    0000645A 35E1503C               MOV.W       @(120:12,R14),R5; Sp[].ac
    0000645E 3F511074               MOV.W       R5,@(232:12,R15); mp.accel_type
    00006462 D62A                   MOV.L       L1388+10,R6; _GetFactor
    00006464 460B                   JSR         @R6
    00006466 E403                   MOV         #3,R4      ; H'00000003
    00006468 37E1601F               MOV.L       @(124:12,R14),R7; Sp[].fl
    0000646C 34E16020               MOV.L       @(128:12,R14),R4; Sp[].fh
    00006470 35E1903D               MOVU.W      @(122,R14),R5; Sp[].gl
    00006474 3F71203B               MOV.L       R7,@(236:12,R15); mp.FL
    00006478 E700                   MOV         #0,R7      ; H'00000000
    0000647A 3F012039               MOV.L       R0,@(228:12,R15); mp.factor
    0000647E 3F41203C               MOV.L       R4,@(240:12,R15); mp.FH
    00006482 3F51203D               MOV.L       R5,@(244:12,R15); mp.utime
    00006486 3F51203E               MOV.L       R5,@(248:12,R15); mp.dtime
    0000648A 3F71203F               MOV.L       R7,@(252:12,R15); mp.us
    0000648E 3F712040               MOV.L       R7,@(256:12,R15); mp.ds
    00006492 7FE0                   ADD         #-32,R15
    00006494 E441                   MOV         #65,R4     ; H'00000041
    00006496 4408                   SHLL2       R4
    00006498 65F3                   MOV         R15,R5
    0000649A 354C                   ADD         R4,R5
    0000649C 6752                   MOV.L       @R5,R7     ; (part of)mp
    0000649E 5251                   MOV.L       @(4,R5),R2 ; (part of)mp
    000064A0 2F72                   MOV.L       R7,@R15
    000064A2 1F21                   MOV.L       R2,@(4,R15)
    000064A4 5652                   MOV.L       @(8,R5),R6 ; (part of)mp
    000064A6 5753                   MOV.L       @(12,R5),R7; (part of)mp
    000064A8 5255                   MOV.L       @(20,R5),R2; (part of)mp
    000064AA 1F62                   MOV.L       R6,@(8,R15)
    000064AC 1F73                   MOV.L       R7,@(12,R15)
    000064AE 5754                   MOV.L       @(16,R5),R7; (part of)mp
    000064B0 1F25                   MOV.L       R2,@(20,R15)
    000064B2 5656                   MOV.L       @(24,R5),R6; (part of)mp
    000064B4 5257                   MOV.L       @(28,R5),R2; (part of)mp
    000064B6 1F74                   MOV.L       R7,@(16,R15)
    000064B8 1F66                   MOV.L       R6,@(24,R15)
    000064BA 1F27                   MOV.L       R2,@(28,R15)
    000064BC D214                   MOV.L       L1388+14,R2; _motor_SET
    000064BE 420B                   JSR         @R2
    000064C0 E402                   MOV         #2,R4      ; H'00000002
    000064C2 7F20                   ADD         #32,R15
    000064C4 2FD6                   MOV.L       R13,@-R15
    000064C6 E700                   MOV         #0,R7      ; H'00000000
    000064C8 35F14110               MOV.B       @(272:12,R15),R5; bcid
    000064CC E602                   MOV         #2,R6      ; H'00000002
    000064CE D316                   MOV.L       L1388+38,R3; __$AbsmvAction
    000064D0 430B                   JSR         @R3
    000064D2 E451                   MOV         #81,R4     ; H'00000051
    000064D4 6203                   MOV         R0,R2
    000064D6 7F04                   ADD         #4,R15
    000064D8 6603                   MOV         R0,R6
    000064DA E042                   MOV         #66,R0     ; H'00000042
    000064DC 4008                   SHLL2       R0
    000064DE 2228                   TST         R2,R2
    000064E0 8F03                   BF/S        L1191
    000064E2 0F66                   MOV.L       R6,@(R0,R15); result
    000064E4 E6F1                   MOV         #-15,R6    ; H'FFFFFFF1
    000064E6 666C                   EXTU.B      R6,R6
    000064E8 0F66                   MOV.L       R6,@(R0,R15); result
    000064EA              L1191:
    000064EA D210                   MOV.L       L1388+42,R2; __$pProcDat
    000064EC 6622                   MOV.L       @R2,R6     ; pProcDat
    000064EE 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000064F0 7001                   ADD         #1,R0
    000064F2 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000064F4              L1144:
             tskcmd.c       8548          break;
             tskcmd.c       8549      }
             tskcmd.c       8550      
             tskcmd.c       8551      return( result );
    000064F4 30F16042               MOV.L       @(264:12,R15),R0; result
    000064F8 03000138               MOVI20      #312,R3    ; H'00000138
    000064FC 3F3C                   ADD         R3,R15
    000064FE 49F4                   MOVMU.L     @R15+,R9
             tskcmd.c       8552    }
    00006500 006B                   RTS/N
    00006502              L1388:
    00006502 00000002               .RES.W      1
    00006504 <00000000>             .DATA.L     __$pProcAdr
    00006508 <00000000>             .DATA.L     __$Sp
    0000650C <00000000>             .DATA.L     _GetFactor
    00006510 <00000000>             .DATA.L     _motor_SET
    00006514 <00000000>             .DATA.L     __$MapAction
    00006518 <00000000>             .DATA.L     _mbx_send
    0000651C <00000000>             .DATA.L     __$vout
    00006520 <00000000>             .DATA.L     __$WaitAction
    00006524 <00000006>             .DATA.L     H'00000006+__$SpPtn
    00006528 <00000000>             .DATA.L     __$AbsmvAction
    0000652C <00000000>             .DATA.L     __$pProcDat
             tskcmd.c       8553    
             tskcmd.c       8554    /***********************************************************************
             tskcmd.c       8555    * 
             tskcmd.c       8556    * [概要]  吸引位置取得
             tskcmd.c       8557    * [引数]  
             tskcmd.c       8558    * [戻値]  
             tskcmd.c       8559    * 
             tskcmd.c       8560    ***********************************************************************/
             tskcmd.c       8561    static INT  GetPositionValue( UB index )
    00006530              __$GetPositionValue:             ; function: __$GetPositionValue
                                                           ; frame size=0
             tskcmd.c       8562    {
             tskcmd.c       8563      INT *posadr;
             tskcmd.c       8564      INT result = CLR;
    00006530 614C                   EXTU.B      R4,R1
    00006532 E601                   MOV         #1,R6      ; H'00000001
    00006534 3163                   CMP/GE      R6,R1
    00006536 E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       8565      
             tskcmd.c       8566      if(( index >= POS_Y0_OFFSE )&&( index <= POS_Z0_COLDS ))    // 1〜32
    00006538 8F08                   BF/S        L1194
    0000653A 6413                   MOV         R1,R4
    0000653C E620                   MOV         #32,R6     ; H'00000020
    0000653E 3467                   CMP/GT      R6,R4
    00006540 8904                   BT          L1194
             tskcmd.c       8567      {
             tskcmd.c       8568          posadr = &BkP7.Y0_Offset + (index - POS_Y0_OFFSE) ;
             tskcmd.c       8569          result = *posadr;
    00006542 6513                   MOV         R1,R5
    00006544 75FF                   ADD         #-1,R5
    00006546 4508                   SHLL2       R5
    00006548 D083                   MOV.L       L1389,R0   ; __$BkP7
    0000654A 025E                   MOV.L       @(R0,R5),R2; *(posadr)
    0000654C              L1194:
             tskcmd.c       8570      }
             tskcmd.c       8571    
             tskcmd.c       8572      if(( index >= POS_Z0_SUCS1 )&&( index <= POS_XX_RSV64 ))    // 33〜
    0000654C E621                   MOV         #33,R6     ; H'00000021
    0000654E 3463                   CMP/GE      R6,R4
    00006550 8B07                   BF          L1197
    00006552 E640                   MOV         #64,R6     ; H'00000040
    00006554 3467                   CMP/GT      R6,R4
    00006556 8904                   BT          L1197
             tskcmd.c       8573      {
             tskcmd.c       8574          posadr = &BkP8.Z0_SucStaHei1 + (index - POS_Z0_SUCS1) ;
             tskcmd.c       8575          result = *posadr;
    00006558 6513                   MOV         R1,R5
    0000655A 75DF                   ADD         #-33,R5
    0000655C 4508                   SHLL2       R5
    0000655E D07F                   MOV.L       L1389+4,R0 ; __$BkP8
    00006560 025E                   MOV.L       @(R0,R5),R2; *(posadr)
    00006562              L1197:
             tskcmd.c       8576      }
             tskcmd.c       8577    
             tskcmd.c       8578      if(( index >= POS_H1_C1VO1 )&&( index <= POS_XX_RSV96 ))    // 65〜
    00006562 E641                   MOV         #65,R6     ; H'00000041
    00006564 3463                   CMP/GE      R6,R4
    00006566 8B06                   BF          L1200
    00006568 E660                   MOV         #96,R6     ; H'00000060
    0000656A 3467                   CMP/GT      R6,R4
    0000656C 8903                   BT          L1200
             tskcmd.c       8579      {
             tskcmd.c       8580          posadr = &BkP9.Hosei[0].HS_VL1 + (index - POS_H1_C1VO1) ;
             tskcmd.c       8581          result = *posadr;
    0000656E 71BF                   ADD         #-65,R1
    00006570 4108                   SHLL2       R1
    00006572 D07B                   MOV.L       L1389+8,R0 ; __$BkP9
    00006574 021E                   MOV.L       @(R0,R1),R2; *(posadr)
    00006576              L1200:
             tskcmd.c       8582      }
             tskcmd.c       8583    
             tskcmd.c       8584      if( index == POS_P0_TIPDL ) // 
    00006576 6043                   MOV         R4,R0
    00006578 8837                   CMP/EQ      #55,R0
    0000657A 8B00                   BF          L1203
             tskcmd.c       8585      {
             tskcmd.c       8586          result = 100;
    0000657C E264                   MOV         #100,R2    ; H'00000064
    0000657E              L1203:
             tskcmd.c       8587      }
             tskcmd.c       8588      return( result );
             tskcmd.c       8589    }
    0000657E 027B                   RTV/N       R2
             tskcmd.c       8590    
             tskcmd.c       8591    /***********************************************************************
             tskcmd.c       8592    * 
             tskcmd.c       8593    * [概要]  分注２
             tskcmd.c       8594    * [引数]  
             tskcmd.c       8595    * [戻値]  
             tskcmd.c       8596    * 
             tskcmd.c       8597    ***********************************************************************/
             tskcmd.c       8598    static ER  CmdActionPrep2( T_CMD_MSG* mrcv )
    00006580              __$CmdActionPrep2:               ; function: __$CmdActionPrep2
                                                           ; frame size=0
             tskcmd.c       8599    {
             tskcmd.c       8600      ER result = E_CONTINUE;
             tskcmd.c       8601    
             tskcmd.c       8602      return( result );
    00006580 E0F1                   MOV         #-15,R0    ; H'FFFFFFF1
             tskcmd.c       8603    }
    00006582 000B                   RTS
    00006584 600C                   EXTU.B      R0,R0
             tskcmd.c       8604    /***********************************************************************
             tskcmd.c       8605    * 
             tskcmd.c       8606    * [概要]  インキュベーション
             tskcmd.c       8607    * [引数]  
             tskcmd.c       8608    * [戻値]  
             tskcmd.c       8609    * 
             tskcmd.c       8610    ***********************************************************************/
             tskcmd.c       8611    static ER  CmdActionIncub( T_CMD_MSG* mrcv )
    00006586              __$CmdActionIncub:               ; function: __$CmdActionIncub
                                                           ; frame size=100
    00006586 48F0                   MOVMU.L     R8,@-R15
    00006588 7FDC                   ADD         #-36,R15
             tskcmd.c       8612    {
             tskcmd.c       8613      ER result = E_CONTINUE;
             tskcmd.c       8614      UB  msgid;
             tskcmd.c       8615      UB actstep;
             tskcmd.c       8616      UB spdptn;
             tskcmd.c       8617      UB movptn;
             tskcmd.c       8618      UB devno;
             tskcmd.c       8619      INT movval;
             tskcmd.c       8620      UB  inf;
             tskcmd.c       8621      UB  inf2;
             tskcmd.c       8622      UB  prid1;
             tskcmd.c       8623      UB  bcid;
             tskcmd.c       8624      UB  tempdat;
             tskcmd.c       8625    
             tskcmd.c       8626      prid1 = mrcv->msgdata.prid1;
             tskcmd.c       8627      bcid  = mrcv->msgdata.bcid;
    0000658A 3A41801A               MOVU.B      @(26,R4),R10; (mrcv)->bcid
             tskcmd.c       8628      msgid = mrcv->msgdata.msgid;
             tskcmd.c       8629      inf   = mrcv->msgdata.inf;
             tskcmd.c       8630      inf2  = mrcv->msgdata.inf2;
             tskcmd.c       8631      actstep = bcctrl[bcid].actstp -1 ;
             tskcmd.c       8632    
             tskcmd.c       8633      switch( pProcDat->Stp )
    0000658E D875                   MOV.L       L1389+12,R8; __$pProcDat
    00006590 60A3                   MOV         R10,R0
    00006592 6582                   MOV.L       @R8,R5     ; pProcDat
    00006594 4008                   SHLL2       R0
    00006596 EEF1                   MOV         #-15,R14   ; H'FFFFFFF1
    00006598 D673                   MOV.L       L1389+16,R6; H'00000002+__$bcctrl
    0000659A 4000                   SHLL        R0
    0000659C 026C                   MOV.B       @(R0,R6),R2; bcctrl[].actstp
    0000659E 6EEC                   EXTU.B      R14,R14
    000065A0 30518002               MOVU.B      @(2,R5),R0 ; (pProcDat)->Stp
    000065A4 72FF                   ADD         #-1,R2
    000065A6 69E3                   MOV         R14,R9
    000065A8 2008                   TST         R0,R0
    000065AA 3B418018               MOVU.B      @(24,R4),R11; (mrcv)->prid1
    000065AE 3C41801C               MOVU.B      @(28,R4),R12; (mrcv)->inf
    000065B2 3D41801D               MOVU.B      @(29,R4),R13; (mrcv)->inf2
    000065B6 8D0A                   BT/S        L1213
    000065B8 622C                   EXTU.B      R2,R2
    000065BA 8801                   CMP/EQ      #1,R0
    000065BC 895B                   BT          L1215
    000065BE 8802                   CMP/EQ      #2,R0
    000065C0 8979                   BT          L1217
    000065C2 8803                   CMP/EQ      #3,R0
    000065C4 8B01                   BF          L1425
    000065C6 A098                   BRA         L1218
    000065C8 0009                   NOP
    000065CA              L1425:
    000065CA A097                   BRA         L1219
    000065CC 0009                   NOP
    000065CE              L1213:
             tskcmd.c       8634      {
             tskcmd.c       8635      case 0:// [Z]ノズル高さ移動
             tskcmd.c       8636          IncuvDataInit(pProcAdr->step[actstep].par03 , pProcAdr->step[actstep].par04);
    000065CE E014                   MOV         #20,R0     ; H'00000014
    000065D0 4280                   MULR        R0,R2
    000065D2 DD66                   MOV.L       L1389+20,R13; __$pProcAdr
    000065D4 6CD2                   MOV.L       @R13,R12   ; pProcAdr
             tskcmd.c       8637          
             tskcmd.c       8638          devno  = MT_Z0;
             tskcmd.c       8639          spdptn = (pProcAdr->step[actstep].par05 >> 4);  // [Z]吸引下降速度パターン
    000065D6 DB65                   MOV.L       L1389+20,R11; __$pProcAdr
    000065D8 6E23                   MOV         R2,R14
    000065DA 3C2C                   ADD         R2,R12
    000065DC 35C18003               MOVU.B      @(3,R12),R5; pProcAdr->step[].par04
    000065E0 84C2                   MOV.B       @(2,R12),R0; pProcAdr->step[].par03
    000065E2 B0AB                   BSR         __$IncuvDataInit
    000065E4 6403                   MOV         R0,R4
    000065E6 6CB2                   MOV.L       @R11,R12   ; pProcAdr
    000065E8 E4FC                   MOV         #-4,R4     ; H'FFFFFFFC
    000065EA 3CEC                   ADD         R14,R12
    000065EC 3EC18004               MOVU.B      @(4,R12),R14; pProcAdr->step[].par05
             tskcmd.c       8640          movptn = pProcAdr->step[actstep].par06;         // [Z]吸引終了高さ
             tskcmd.c       8641          movval = GetPositionValue(movptn);
    000065F0 84C5                   MOV.B       @(5,R12),R0; pProcAdr->step[].par06
             tskcmd.c       8642          
             tskcmd.c       8643          MAC_SPEED_SET( devno, 
    000065F2 EC00                   MOV         #0,R12     ; H'00000000
    000065F4 4E4C                   SHAD        R4,R14
    000065F6 1FC6                   MOV.L       R12,@(24,R15); mp.us
    000065F8 6403                   MOV         R0,R4
    000065FA BF99                   BSR         __$GetPositionValue
    000065FC 1FC7                   MOV.L       R12,@(28,R15); mp.ds
    000065FE 6D03                   MOV         R0,R13
    00006600 E00C                   MOV         #12,R0     ; H'0000000C
    00006602 6EEC                   EXTU.B      R14,R14
    00006604 4E80                   MULR        R0,R14
    00006606 D55A                   MOV.L       L1389+24,R5; __$Sp
    00006608 3E5C                   ADD         R5,R14
    0000660A 31E1503C               MOV.W       @(120:12,R14),R1; Sp[].ac
    0000660E 3F111002               MOV.W       R1,@(4:12,R15); mp.accel_type
    00006612 D558                   MOV.L       L1389+28,R5; _GetFactor
    00006614 450B                   JSR         @R5
    00006616 E403                   MOV         #3,R4      ; H'00000003
    00006618 36E1601F               MOV.L       @(124:12,R14),R6; Sp[].fl
    0000661C 37E16020               MOV.L       @(128:12,R14),R7; Sp[].fh
    00006620 3BE1903D               MOVU.W      @(122,R14),R11; Sp[].gl
    00006624 2F02                   MOV.L       R0,@R15    ; mp.factor
    00006626 1F62                   MOV.L       R6,@(8,R15); mp.FL
    00006628 1F73                   MOV.L       R7,@(12,R15); mp.FH
    0000662A 1FB4                   MOV.L       R11,@(16,R15); mp.utime
    0000662C 1FB5                   MOV.L       R11,@(20,R15); mp.dtime
    0000662E 7FE0                   ADD         #-32,R15
    00006630 62F3                   MOV         R15,R2
    00006632 7220                   ADD         #32,R2
    00006634 6722                   MOV.L       @R2,R7     ; (part of)mp
    00006636 E402                   MOV         #2,R4      ; H'00000002
    00006638 5122                   MOV.L       @(8,R2),R1 ; (part of)mp
    0000663A 5B23                   MOV.L       @(12,R2),R11; (part of)mp
    0000663C 5E21                   MOV.L       @(4,R2),R14; (part of)mp
    0000663E 2F72                   MOV.L       R7,@R15
    00006640 1F12                   MOV.L       R1,@(8,R15)
    00006642 1FB3                   MOV.L       R11,@(12,R15)
    00006644 5724                   MOV.L       @(16,R2),R7; (part of)mp
    00006646 5C25                   MOV.L       @(20,R2),R12; (part of)mp
    00006648 5B26                   MOV.L       @(24,R2),R11; (part of)mp
    0000664A 5127                   MOV.L       @(28,R2),R1; (part of)mp
    0000664C 1FE1                   MOV.L       R14,@(4,R15)
    0000664E 1F74                   MOV.L       R7,@(16,R15)
    00006650 1FC5                   MOV.L       R12,@(20,R15)
    00006652 1FB6                   MOV.L       R11,@(24,R15)
    00006654 D248                   MOV.L       L1389+32,R2; _motor_SET
    00006656 420B                   JSR         @R2
    00006658 1F17                   MOV.L       R1,@(28,R15)
    0000665A 7F20                   ADD         #32,R15
             tskcmd.c       8644                         Sp[devno][spdptn].ac, 
             tskcmd.c       8645                         Sp[devno][spdptn].fl, 
             tskcmd.c       8646                         Sp[devno][spdptn].fh, 
             tskcmd.c       8647                         Sp[devno][spdptn].gl );
             tskcmd.c       8648          
             tskcmd.c       8649          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    0000665C 2FD6                   MOV.L       R13,@-R15
    0000665E E700                   MOV         #0,R7      ; H'00000000
    00006660 E602                   MOV         #2,R6      ; H'00000002
    00006662 E451                   MOV         #81,R4     ; H'00000051
    00006664 D345                   MOV.L       L1389+36,R3; __$AbsmvAction
    00006666 430B                   JSR         @R3
    00006668 65A3                   MOV         R10,R5
    0000666A 7F04                   ADD         #4,R15
             tskcmd.c       8650          if( result == E_SUCCESS ) result = E_CONTINUE;
    0000666C 2008                   TST         R0,R0
    0000666E 8F1D                   BF/S        L1221
    00006670 6E03                   MOV         R0,R14
    00006672 A01B                   BRA         L1221
    00006674 6E93                   MOV         R9,R14
    00006676              L1215:
             tskcmd.c       8651          pProcDat->Stp++;
             tskcmd.c       8652          break;
             tskcmd.c       8653          
             tskcmd.c       8654      case 1: // 温調器へ指定した温度に設定通知を行う。
             tskcmd.c       8655          // 指定温度通知
             tskcmd.c       8656          tempdat = pProcAdr->step[actstep].par04;
    00006676 E014                   MOV         #20,R0     ; H'00000014
             tskcmd.c       8657    
             tskcmd.c       8658          mbx_send    (
             tskcmd.c       8659                      ID_TSK_TMPCNT,       // tskid
             tskcmd.c       8660                      ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       8661                      ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       8662                      prid1,               // prid1
             tskcmd.c       8663                      bcid,                // bcid
             tskcmd.c       8664                      ID_MSG_TMPSET,       // msgid
             tskcmd.c       8665                      inf,                 // sts
             tskcmd.c       8666                      inf2,                // sts2/inf2
             tskcmd.c       8667                      (UB *)&tempdat,      // data
             tskcmd.c       8668                      sizeof( tempdat )    // siz
             tskcmd.c       8669                  );
    00006678 E501                   MOV         #1,R5      ; H'00000001
    0000667A 4280                   MULR        R0,R2
    0000667C D13B                   MOV.L       L1389+20,R1; __$pProcAdr
    0000667E 6412                   MOV.L       @R1,R4     ; pProcAdr
    00006680 7403                   ADD         #3,R4
    00006682 6023                   MOV         R2,R0
    00006684 044C                   MOV.B       @(R0,R4),R4; pProcAdr->step[].par04
    00006686 3F410020               MOV.B       R4,@(32:12,R15); tempdat
    0000668A 2F56                   MOV.L       R5,@-R15
    0000668C 66F3                   MOV         R15,R6
    0000668E 7624                   ADD         #36,R6
    00006690 2F66                   MOV.L       R6,@-R15
    00006692 2FD6                   MOV.L       R13,@-R15
    00006694 2FC6                   MOV.L       R12,@-R15
    00006696 EC9D                   MOV         #-99,R12   ; H'FFFFFF9D
    00006698 6CCC                   EXTU.B      R12,R12
    0000669A 2FC6                   MOV.L       R12,@-R15
    0000669C 2FA6                   MOV.L       R10,@-R15
    0000669E E60E                   MOV         #14,R6     ; H'0000000E
    000066A0 E50D                   MOV         #13,R5     ; H'0000000D
    000066A2 6463                   MOV         R6,R4
    000066A4 D936                   MOV.L       L1389+40,R9; _mbx_send
    000066A6 490B                   JSR         @R9
    000066A8 67B3                   MOV         R11,R7
    000066AA 7F18                   ADD         #24,R15
    000066AC              L1221:
    000066AC 6682                   MOV.L       @R8,R6     ; pProcDat
    000066AE 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000066B0 7001                   ADD         #1,R0
    000066B2 A023                   BRA         L1219
    000066B4 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000066B6              L1217:
             tskcmd.c       8670          pProcDat->Stp++;
             tskcmd.c       8671          break;
             tskcmd.c       8672    
             tskcmd.c       8673      case 2: // 指定温度を指定時間になるまで監視
             tskcmd.c       8674          if( TempChk() == FALSE  )
    000066B6 B025                   BSR         __$TempChk
    000066B8 0009                   NOP
    000066BA 2008                   TST         R0,R0
    000066BC 8B19                   BF          L1223
             tskcmd.c       8675          {
             tskcmd.c       8676              mbx_send    (
             tskcmd.c       8677                          ID_TSK_TMPCNT,       // tskid
             tskcmd.c       8678                          ID_MPF_TMPCNT,       // mpfid
             tskcmd.c       8679                          ID_MBX_TMPCNT,       // mbxid
             tskcmd.c       8680                          prid1,               // prid1
             tskcmd.c       8681                          bcid,                // bcid
             tskcmd.c       8682                          ID_MSG_TMPGETR,      // msgid
             tskcmd.c       8683                          inf,                 // sts
             tskcmd.c       8684                          inf2,                // sts2/inf2
             tskcmd.c       8685                          (UB *)&tempdat,      // data
             tskcmd.c       8686                          sizeof( tempdat )    // siz
             tskcmd.c       8687                      );
    000066BE 0129                   MOVT        R1
    000066C0 2F16                   MOV.L       R1,@-R15
    000066C2 67F3                   MOV         R15,R7
    000066C4 7724                   ADD         #36,R7
    000066C6 2F76                   MOV.L       R7,@-R15
    000066C8 2FD6                   MOV.L       R13,@-R15
    000066CA 2FC6                   MOV.L       R12,@-R15
    000066CC E99F                   MOV         #-97,R9    ; H'FFFFFF9F
    000066CE 699C                   EXTU.B      R9,R9
    000066D0 2F96                   MOV.L       R9,@-R15
    000066D2 2FA6                   MOV.L       R10,@-R15
    000066D4 E60E                   MOV         #14,R6     ; H'0000000E
    000066D6 E50D                   MOV         #13,R5     ; H'0000000D
    000066D8 6463                   MOV         R6,R4
    000066DA D829                   MOV.L       L1389+40,R8; _mbx_send
    000066DC 480B                   JSR         @R8
    000066DE 67B3                   MOV         R11,R7
    000066E0 7F18                   ADD         #24,R15
             tskcmd.c       8688              WaitAction( prid1, bcid, TEMP_CHK_WAIT );
    000066E2 E67D                   MOV         #125,R6    ; H'0000007D
    000066E4 4608                   SHLL2       R6
    000066E6 64B3                   MOV         R11,R4
    000066E8 D326                   MOV.L       L1389+44,R3; __$WaitAction
    000066EA 430B                   JSR         @R3
    000066EC 65A3                   MOV         R10,R5
    000066EE A005                   BRA         L1219
    000066F0 0009                   NOP
    000066F2              L1223:
             tskcmd.c       8689              break;
             tskcmd.c       8690          }
             tskcmd.c       8691          else
             tskcmd.c       8692          {
             tskcmd.c       8693              pProcDat->Stp++;
    000066F2 6682                   MOV.L       @R8,R6     ; pProcDat
    000066F4 8462                   MOV.B       @(2,R6),R0 ; (pProcDat)->Stp
    000066F6 7001                   ADD         #1,R0
    000066F8 8062                   MOV.B       R0,@(2,R6) ; (pProcDat)->Stp
    000066FA              L1218:
             tskcmd.c       8694          // ↓↓↓  下に続く  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
             tskcmd.c       8695          }
             tskcmd.c       8696    
             tskcmd.c       8697      case 3: // 終了待ち
             tskcmd.c       8698          result = E_SUCCESS;
    000066FA EE00                   MOV         #0,R14     ; H'00000000
    000066FC              L1219:
             tskcmd.c       8699          break;
             tskcmd.c       8700      }
             tskcmd.c       8701      return( result );
    000066FC 60E3                   MOV         R14,R0
    000066FE 7F24                   ADD         #36,R15
    00006700 48F4                   MOVMU.L     @R15+,R8
             tskcmd.c       8702    }
    00006702 006B                   RTS/N
             tskcmd.c       8703    /***********************************************************************
             tskcmd.c       8704    * 
             tskcmd.c       8705    * [概要]  
             tskcmd.c       8706    * [引数]  
             tskcmd.c       8707    * [戻値]  TRUE = インキュベーション終了 
             tskcmd.c       8708    * 
             tskcmd.c       8709    ***********************************************************************/
             tskcmd.c       8710    static BOOL TempChk()
    00006704              __$TempChk:                      ; function: __$TempChk
                                                           ; frame size=8
    00006704 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       8711    {
             tskcmd.c       8712      BOOL blnResult = FALSE;
             tskcmd.c       8713      unsigned char tempdat;
             tskcmd.c       8714      
             tskcmd.c       8715      tempdat = TmpDataGet();
    00006706 D120                   MOV.L       L1389+48,R1; _TmpDataGet
    00006708 414B                   JSR/N       @R1
             tskcmd.c       8716      
             tskcmd.c       8717      incuv.smp[2] = incuv.smp[1];
    0000670A D220                   MOV.L       L1389+52,R2; H'00000001+__$incuv
    0000670C 6603                   MOV         R0,R6
    0000670E 8421                   MOV.B       @(1,R2),R0 ; incuv.smp[]
    00006710 D41F                   MOV.L       L1389+56,R4; __$incuv
    00006712 8022                   MOV.B       R0,@(2,R2) ; incuv.smp[]
    00006714 EE00                   MOV         #0,R14     ; H'00000000
    00006716 37418000               MOVU.B      @(0,R4),R7 ; incuv.tmp
             tskcmd.c       8718      incuv.smp[1] = incuv.smp[0];
    0000671A 6020                   MOV.B       @R2,R0     ; incuv.smp[]
    0000671C 8021                   MOV.B       R0,@(1,R2) ; incuv.smp[]
             tskcmd.c       8719      incuv.smp[0] = tempdat;
    0000671E 2260                   MOV.B       R6,@R2     ; incuv.smp[]
             tskcmd.c       8720      
             tskcmd.c       8721      if( tempdat == incuv.tmp )
    00006720 666C                   EXTU.B      R6,R6
    00006722 3670                   CMP/EQ      R7,R6
    00006724 8F02                   BF/S        L1226
    00006726 62E3                   MOV         R14,R2
             tskcmd.c       8722      {
             tskcmd.c       8723          incuv.cnt += (( TEMP_CHK_WAIT * 10 ) / 1000) ;
    00006728 5242                   MOV.L       @(8,R4),R2 ; incuv.cnt
    0000672A 7205                   ADD         #5,R2
    0000672C              L1226:
    0000672C 5641                   MOV.L       @(4,R4),R6 ; incuv.tim
             tskcmd.c       8724      }
             tskcmd.c       8725      else
             tskcmd.c       8726      {
             tskcmd.c       8727          incuv.cnt = 0;
             tskcmd.c       8728      }
             tskcmd.c       8729      
             tskcmd.c       8730      if( incuv.cnt >= incuv.tim )
    0000672E 3263                   CMP/GE      R6,R2
    00006730 8F01                   BF/S        L1228
    00006732 1422                   MOV.L       R2,@(8,R4) ; incuv.cnt
             tskcmd.c       8731      {
             tskcmd.c       8732          blnResult = TRUE;
    00006734 EE01                   MOV         #1,R14     ; H'00000001
    00006736              L1228:
             tskcmd.c       8733      }
             tskcmd.c       8734      else
             tskcmd.c       8735      {
             tskcmd.c       8736      }
             tskcmd.c       8737      
             tskcmd.c       8738      return( blnResult );
    00006736 60E3                   MOV         R14,R0
    00006738 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       8739    }
    0000673A 006B                   RTS/N
             tskcmd.c       8740    /***********************************************************************
             tskcmd.c       8741    * 
             tskcmd.c       8742    * [概要]  
             tskcmd.c       8743    * [引数]  
             tskcmd.c       8744    * [戻値]  TRUE = インキュベーション終了 
             tskcmd.c       8745    * 
             tskcmd.c       8746    ***********************************************************************/
             tskcmd.c       8747    static void IncuvDataInit( unsigned char tmp, unsigned int tim )
    0000673C              __$IncuvDataInit:                ; function: __$IncuvDataInit
                                                           ; frame size=0
             tskcmd.c       8748    {
             tskcmd.c       8749      incuv.tmp = tmp;
    0000673C D114                   MOV.L       L1389+56,R1; __$incuv
    0000673E 2140                   MOV.B       R4,@R1     ; incuv.tmp
    00006740 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       8750      incuv.smp[0] = 0;
    00006742 D412                   MOV.L       L1389+52,R4; H'00000001+__$incuv
    00006744 2400                   MOV.B       R0,@R4     ; incuv.smp[]
             tskcmd.c       8751      incuv.smp[1] = 0;
             tskcmd.c       8752      incuv.smp[2] = 0;
             tskcmd.c       8753      incuv.tim = ( tim * 60 ) ;
             tskcmd.c       8754      incuv.cnt = 0;
    00006746 E600                   MOV         #0,R6      ; H'00000000
    00006748 8041                   MOV.B       R0,@(1,R4) ; incuv.smp[]
    0000674A 8042                   MOV.B       R0,@(2,R4) ; incuv.smp[]
    0000674C E03C                   MOV         #60,R0     ; H'0000003C
    0000674E 4580                   MULR        R0,R5
    00006750 1162                   MOV.L       R6,@(8,R1) ; incuv.cnt
             tskcmd.c       8755      incuv.tmo = 0;
    00006752 1163                   MOV.L       R6,@(12,R1); incuv.tmo
             tskcmd.c       8756    }
    00006754 000B                   RTS
    00006756 1151                   MOV.L       R5,@(4,R1) ; incuv.tim
    00006758              L1389:
    00006758 <00000000>             .DATA.L     __$BkP7
    0000675C <00000000>             .DATA.L     __$BkP8
    00006760 <00000000>             .DATA.L     __$BkP9
    00006764 <00000000>             .DATA.L     __$pProcDat
    00006768 <00000002>             .DATA.L     H'00000002+__$bcctrl
    0000676C <00000000>             .DATA.L     __$pProcAdr
    00006770 <00000000>             .DATA.L     __$Sp
    00006774 <00000000>             .DATA.L     _GetFactor
    00006778 <00000000>             .DATA.L     _motor_SET
    0000677C <00000000>             .DATA.L     __$AbsmvAction
    00006780 <00000000>             .DATA.L     _mbx_send
    00006784 <00000000>             .DATA.L     __$WaitAction
    00006788 <00000000>             .DATA.L     _TmpDataGet
    0000678C <00000001>             .DATA.L     H'00000001+__$incuv
    00006790 <00000000>             .DATA.L     __$incuv
             tskcmd.c       8757    
             tskcmd.c       8758    /***********************************************************************
             tskcmd.c       8759    * 
             tskcmd.c       8760    * [概要]  移動
             tskcmd.c       8761    * [引数]  
             tskcmd.c       8762    * [戻値]  
             tskcmd.c       8763    * 
             tskcmd.c       8764    ***********************************************************************/
             tskcmd.c       8765    static ER  CmdActionMove( T_CMD_MSG* mrcv )
    00006794              __$CmdActionMove:                ; function: __$CmdActionMove
                                                           ; frame size=84
    00006794 4BF0                   MOVMU.L     R11,@-R15
    00006796 7FE0                   ADD         #-32,R15
             tskcmd.c       8766    {
             tskcmd.c       8767      ER result = E_CONTINUE;
             tskcmd.c       8768      UB bcid;
             tskcmd.c       8769      UB prid1;
             tskcmd.c       8770      UB actstep;
             tskcmd.c       8771      UB spdptn;
             tskcmd.c       8772      UB movptn;
             tskcmd.c       8773      UB devno;
             tskcmd.c       8774      INT movval;
             tskcmd.c       8775    
             tskcmd.c       8776      bcid  = mrcv->msgdata.bcid;
    00006798 3041801A               MOVU.B      @(26,R4),R0; (mrcv)->bcid
             tskcmd.c       8777      prid1   = mrcv->msgdata.prid1;
             tskcmd.c       8778      actstep = bcctrl[bcid].actstp -1 ;
    0000679C D249                   MOV.L       L1320,R2   ; H'00000002+__$bcctrl
    0000679E 6D03                   MOV         R0,R13
    000067A0 E1F1                   MOV         #-15,R1    ; H'FFFFFFF1
    000067A2 4008                   SHLL2       R0
    000067A4 4000                   SHLL        R0
    000067A6 062C                   MOV.B       @(R0,R2),R6; bcctrl[].actstp
    000067A8 611C                   EXTU.B      R1,R1
             tskcmd.c       8779    
             tskcmd.c       8780      switch( pProcDat->Stp )
    000067AA D247                   MOV.L       L1320+4,R2 ; __$pProcDat
    000067AC 6722                   MOV.L       @R2,R7     ; pProcDat
    000067AE 8472                   MOV.B       @(2,R7),R0 ; (pProcDat)->Stp
    000067B0 2008                   TST         R0,R0
    000067B2 8F63                   BF/S        L1235
    000067B4 76FF                   ADD         #-1,R6
             tskcmd.c       8781      {
             tskcmd.c       8782      case 0: //
             tskcmd.c       8783          movptn = pProcAdr->step[actstep].par03;
    000067B6 656C                   EXTU.B      R6,R5
    000067B8 E014                   MOV         #20,R0     ; H'00000014
    000067BA 4580                   MULR        R0,R5
    000067BC DB43                   MOV.L       L1320+8,R11; __$pProcAdr
    000067BE 62B2                   MOV.L       @R11,R2    ; pProcAdr
    000067C0 7202                   ADD         #2,R2
    000067C2 6053                   MOV         R5,R0
    000067C4 022C                   MOV.B       @(R0,R2),R2; pProcAdr->step[].par03
    000067C6 6E2C                   EXTU.B      R2,R14
             tskcmd.c       8784          devno = GetMoveDevice(movptn);
    000067C8 B06F                   BSR         __$GetMoveDevice
    000067CA 64E3                   MOV         R14,R4
    000067CC 6C0C                   EXTU.B      R0,R12
             tskcmd.c       8785          movval = GetPositionValue(movptn);
    000067CE BEAF                   BSR         __$GetPositionValue
    000067D0 64E3                   MOV         R14,R4
    000067D2 6B03                   MOV         R0,R11
             tskcmd.c       8786          
             tskcmd.c       8787          if( devno == MT_Y0 )        spdptn = SpPtn.Y0_SpdNmlPtn;
    000067D4 60C3                   MOV         R12,R0
    000067D6 8801                   CMP/EQ      #1,R0
    000067D8 8B01                   BF          L1237
    000067DA D63D                   MOV.L       L1320+12,R6; H'00000005+__$SpPtn
    000067DC 6560                   MOV.B       @R6,R5     ; SpPtn.Y0_SpdNmlPtn
    000067DE              L1237:
             tskcmd.c       8788          if( devno == MT_Z0 )        spdptn = SpPtn.Z0_SpdNmlPtn;
    000067DE 60C3                   MOV         R12,R0
    000067E0 8802                   CMP/EQ      #2,R0
    000067E2 8B01                   BF          L1239
    000067E4 D63B                   MOV.L       L1320+16,R6; H'00000006+__$SpPtn
    000067E6 6560                   MOV.B       @R6,R5     ; SpPtn.Z0_SpdNmlPtn
    000067E8              L1239:
             tskcmd.c       8789          if( devno == MT_P0 )        spdptn = SpPtn.P0_SpdNmlPtn;
    000067E8 60C3                   MOV         R12,R0
    000067EA 8803                   CMP/EQ      #3,R0
    000067EC 8B01                   BF          L1241
    000067EE D63A                   MOV.L       L1320+20,R6; H'00000007+__$SpPtn
    000067F0 6560                   MOV.B       @R6,R5     ; SpPtn.P0_SpdNmlPtn
    000067F2              L1241:
             tskcmd.c       8790          if( devno == MT_F0 )        spdptn = SpPtn.F0_SpdNmlPtn;
    000067F2 60C3                   MOV         R12,R0
    000067F4 8804                   CMP/EQ      #4,R0
    000067F6 8B01                   BF          L1243
    000067F8 D638                   MOV.L       L1320+24,R6; H'00000009+__$SpPtn
    000067FA 6560                   MOV.B       @R6,R5     ; SpPtn.F0_SpdNmlPtn
    000067FC              L1243:
             tskcmd.c       8791          if( devno == MT_Y1 )        spdptn = SpPtn.Y1_SpdNmlPtn;
    000067FC 60C3                   MOV         R12,R0
    000067FE 8805                   CMP/EQ      #5,R0
    00006800 8B01                   BF          L1245
    00006802 D637                   MOV.L       L1320+28,R6; H'00000008+__$SpPtn
    00006804 6560                   MOV.B       @R6,R5     ; SpPtn.Y1_SpdNmlPtn
    00006806              L1245:
             tskcmd.c       8792          
             tskcmd.c       8793          MAC_SPEED_SET( devno, 
    00006806 E03C                   MOV         #60,R0     ; H'0000003C
    00006808 6EC3                   MOV         R12,R14
    0000680A 4E80                   MULR        R0,R14
    0000680C 655C                   EXTU.B      R5,R5
    0000680E E00C                   MOV         #12,R0     ; H'0000000C
    00006810 D134                   MOV.L       L1320+32,R1; __$Sp
    00006812 4580                   MULR        R0,R5
    00006814 3E5C                   ADD         R5,R14
    00006816 3E1C                   ADD         R1,R14
    00006818 64E1                   MOV.W       @R14,R4    ; Sp[].ac
    0000681A 3F411002               MOV.W       R4,@(4:12,R15); mp.accel_type
    0000681E D532                   MOV.L       L1320+36,R5; _GetFactor
    00006820 450B                   JSR         @R5
    00006822 E403                   MOV         #3,R4      ; H'00000003
    00006824 2F02                   MOV.L       R0,@R15    ; mp.factor
    00006826 56E1                   MOV.L       @(4,R14),R6; Sp[].fl
    00006828 57E2                   MOV.L       @(8,R14),R7; Sp[].fh
    0000682A 30E19001               MOVU.W      @(2,R14),R0; Sp[].gl
    0000682E EE00                   MOV         #0,R14     ; H'00000000
    00006830 1F62                   MOV.L       R6,@(8,R15); mp.FL
    00006832 1F73                   MOV.L       R7,@(12,R15); mp.FH
    00006834 1F04                   MOV.L       R0,@(16,R15); mp.utime
    00006836 1F05                   MOV.L       R0,@(20,R15); mp.dtime
    00006838 1FE6                   MOV.L       R14,@(24,R15); mp.us
    0000683A 1FE7                   MOV.L       R14,@(28,R15); mp.ds
    0000683C 7FE0                   ADD         #-32,R15
    0000683E 65F3                   MOV         R15,R5
    00006840 7520                   ADD         #32,R5
    00006842 5251                   MOV.L       @(4,R5),R2 ; (part of)mp
    00006844 5753                   MOV.L       @(12,R5),R7; (part of)mp
    00006846 6152                   MOV.L       @R5,R1     ; (part of)mp
    00006848 1F21                   MOV.L       R2,@(4,R15)
    0000684A 5452                   MOV.L       @(8,R5),R4 ; (part of)mp
    0000684C 1F73                   MOV.L       R7,@(12,R15)
    0000684E 5E54                   MOV.L       @(16,R5),R14; (part of)mp
    00006850 5755                   MOV.L       @(20,R5),R7; (part of)mp
    00006852 5256                   MOV.L       @(24,R5),R2; (part of)mp
    00006854 5657                   MOV.L       @(28,R5),R6; (part of)mp
    00006856 2F12                   MOV.L       R1,@R15
    00006858 1F42                   MOV.L       R4,@(8,R15)
    0000685A 64C3                   MOV         R12,R4
    0000685C 1FE4                   MOV.L       R14,@(16,R15)
    0000685E 1F75                   MOV.L       R7,@(20,R15)
    00006860 1F26                   MOV.L       R2,@(24,R15)
    00006862 D222                   MOV.L       L1320+40,R2; _motor_SET
    00006864 420B                   JSR         @R2
    00006866 1F67                   MOV.L       R6,@(28,R15)
    00006868 7F20                   ADD         #32,R15
             tskcmd.c       8794                         Sp[devno][spdptn].ac, 
             tskcmd.c       8795                         Sp[devno][spdptn].fl, 
             tskcmd.c       8796                         Sp[devno][spdptn].fh, 
             tskcmd.c       8797                         Sp[devno][spdptn].gl );
             tskcmd.c       8798    
             tskcmd.c       8799          result = AbsmvAction( ID_TPL_PRTCL, bcid, devno, REQ_STAUD, movval );
    0000686A 2FB6                   MOV.L       R11,@-R15
    0000686C E700                   MOV         #0,R7      ; H'00000000
    0000686E E451                   MOV         #81,R4     ; H'00000051
    00006870 65D3                   MOV         R13,R5
    00006872 D31F                   MOV.L       L1320+44,R3; __$AbsmvAction
    00006874 430B                   JSR         @R3
    00006876 66C3                   MOV         R12,R6
    00006878 6103                   MOV         R0,R1
    0000687A 7F04                   ADD         #4,R15
    0000687C              L1235:
    0000687C 7F20                   ADD         #32,R15
    0000687E 4BF4                   MOVMU.L     @R15+,R11
             tskcmd.c       8800          break;
             tskcmd.c       8801      }
             tskcmd.c       8802      return( result );
             tskcmd.c       8803    }
    00006880 017B                   RTV/N       R1
             tskcmd.c       8804    
             tskcmd.c       8805    /***********************************************************************
             tskcmd.c       8806    * 
             tskcmd.c       8807    * [概要]  
             tskcmd.c       8808    * [引数]  
             tskcmd.c       8809    * [戻値]  
             tskcmd.c       8810    * 
             tskcmd.c       8811    ***********************************************************************/
             tskcmd.c       8812    static UB  GetTipPatern( UB commdat )
    00006882              __$GetTipPatern:                 ; function: __$GetTipPatern
                                                           ; frame size=0
             tskcmd.c       8813    {
             tskcmd.c       8814      UB result = CLR;
             tskcmd.c       8815      UB tipwk;
             tskcmd.c       8816      
             tskcmd.c       8817      tipwk = ( commdat >> 6);
             tskcmd.c       8818      
             tskcmd.c       8819      switch( tipwk )
    00006882 624C                   EXTU.B      R4,R2
    00006884 E6FA                   MOV         #-6,R6     ; H'FFFFFFFA
    00006886 426D                   SHLD        R6,R2
    00006888 602C                   EXTU.B      R2,R0
    0000688A 8801                   CMP/EQ      #1,R0
    0000688C 8905                   BT          L1254
    0000688E 8802                   CMP/EQ      #2,R0
    00006890 8905                   BT          L1256
    00006892 8803                   CMP/EQ      #3,R0
    00006894 8905                   BT          L1257
    00006896 A007                   BRA         L1258
    00006898 0009                   NOP
    0000689A              L1254:
             tskcmd.c       8820      {
             tskcmd.c       8821      case 1:
             tskcmd.c       8822          result = POS_STRIPTP1;
    0000689A A003                   BRA         L1259
    0000689C E20B                   MOV         #11,R2     ; H'0000000B
    0000689E              L1256:
             tskcmd.c       8823          break;
             tskcmd.c       8824      case 2:
             tskcmd.c       8825          result = POS_STRIPTP2;
    0000689E A001                   BRA         L1259
    000068A0 E20C                   MOV         #12,R2     ; H'0000000C
    000068A2              L1257:
             tskcmd.c       8826          break;
             tskcmd.c       8827      case 3:
             tskcmd.c       8828          result = POS_STRIPTPL;
    000068A2 E20D                   MOV         #13,R2     ; H'0000000D
    000068A4              L1259:
    000068A4 000B                   RTS
    000068A6 6023                   MOV         R2,R0
    000068A8              L1258:
    000068A8 006B                   RTS/N
             tskcmd.c       8829          break;
             tskcmd.c       8830      default:
             tskcmd.c       8831          break;
             tskcmd.c       8832      }
             tskcmd.c       8833    
             tskcmd.c       8834      if( result )
             tskcmd.c       8835      
             tskcmd.c       8836      return( result );
             tskcmd.c       8837    }
             tskcmd.c       8838    /***********************************************************************
             tskcmd.c       8839    * 
             tskcmd.c       8840    * [概要]  
             tskcmd.c       8841    * [引数]  
             tskcmd.c       8842    * [戻値]  
             tskcmd.c       8843    * 
             tskcmd.c       8844    ***********************************************************************/
             tskcmd.c       8845    static UB  GetMoveDevice( UB posi )
    000068AA              __$GetMoveDevice:                ; function: __$GetMoveDevice
                                                           ; frame size=0
             tskcmd.c       8846    {
             tskcmd.c       8847      UB devno = CLR;
             tskcmd.c       8848      
             tskcmd.c       8849      switch( posi )
    000068AA 624C                   EXTU.B      R4,R2
    000068AC E535                   MOV         #53,R5     ; H'00000035
    000068AE 72FF                   ADD         #-1,R2
    000068B0 3256                   CMP/HI      R5,R2
    000068B2 8F02                   BF/S        L1426
    000068B4 E600                   MOV         #0,R6      ; H'00000000
    000068B6 A05C                   BRA         L1319
    000068B8 0009                   NOP
    000068BA              L1426:
    000068BA 4200                   SHLL        R2
    000068BC C70D                   MOVA        L1321,R0
    000068BE 002D                   MOV.W       @(R0,R2),R0
    000068C0 0023                   BRAF        R0
    000068C2 0009                   NOP
    000068C4              L1320:
    000068C4 <00000002>             .DATA.L     H'00000002+__$bcctrl
    000068C8 <00000000>             .DATA.L     __$pProcDat
    000068CC <00000000>             .DATA.L     __$pProcAdr
    000068D0 <00000005>             .DATA.L     H'00000005+__$SpPtn
    000068D4 <00000006>             .DATA.L     H'00000006+__$SpPtn
    000068D8 <00000007>             .DATA.L     H'00000007+__$SpPtn
    000068DC <00000009>             .DATA.L     H'00000009+__$SpPtn
    000068E0 <00000008>             .DATA.L     H'00000008+__$SpPtn
    000068E4 <00000000>             .DATA.L     __$Sp
    000068E8 <00000000>             .DATA.L     _GetFactor
    000068EC <00000000>             .DATA.L     _motor_SET
    000068F0 <00000000>             .DATA.L     __$AbsmvAction
    000068F4              L1321:
    000068F4 00A8                   .DATA.W     L1269-L1320
    000068F6 00AC                   .DATA.W     L1283-L1320
    000068F8 009C                   .DATA.W     L1263-L1320
    000068FA 00A0                   .DATA.W     L1265-L1320
    000068FC 00A4                   .DATA.W     L1267-L1320
    000068FE 00A8                   .DATA.W     L1270-L1320
    00006900 00AC                   .DATA.W     L1284-L1320
    00006902 009C                   .DATA.W     L1264-L1320
    00006904 00A0                   .DATA.W     L1266-L1320
    00006906 00A4                   .DATA.W     L1268-L1320
    00006908 00A8                   .DATA.W     L1271-L1320
    0000690A 00A8                   .DATA.W     L1272-L1320
    0000690C 00A8                   .DATA.W     L1273-L1320
    0000690E 00A8                   .DATA.W     L1274-L1320
    00006910 00A8                   .DATA.W     L1275-L1320
    00006912 00A8                   .DATA.W     L1276-L1320
    00006914 00A8                   .DATA.W     L1277-L1320
    00006916 00A8                   .DATA.W     L1278-L1320
    00006918 00A8                   .DATA.W     L1279-L1320
    0000691A 00A8                   .DATA.W     L1280-L1320
    0000691C 00A8                   .DATA.W     L1281-L1320
    0000691E 00A8                   .DATA.W     L1282-L1320
    00006920 00AC                   .DATA.W     L1285-L1320
    00006922 00AC                   .DATA.W     L1286-L1320
    00006924 00AC                   .DATA.W     L1287-L1320
    00006926 00AC                   .DATA.W     L1288-L1320
    00006928 00AC                   .DATA.W     L1289-L1320
    0000692A 00AC                   .DATA.W     L1290-L1320
    0000692C 00AC                   .DATA.W     L1291-L1320
    0000692E 00AC                   .DATA.W     L1292-L1320
    00006930 00AC                   .DATA.W     L1293-L1320
    00006932 00AC                   .DATA.W     L1294-L1320
    00006934 00AC                   .DATA.W     L1295-L1320
    00006936 00AC                   .DATA.W     L1296-L1320
    00006938 00AC                   .DATA.W     L1297-L1320
    0000693A 00AC                   .DATA.W     L1298-L1320
    0000693C 00AC                   .DATA.W     L1299-L1320
    0000693E 00AC                   .DATA.W     L1300-L1320
    00006940 00AC                   .DATA.W     L1301-L1320
    00006942 00AC                   .DATA.W     L1302-L1320
    00006944 00AC                   .DATA.W     L1303-L1320
    00006946 00AC                   .DATA.W     L1304-L1320
    00006948 00AC                   .DATA.W     L1305-L1320
    0000694A 00AC                   .DATA.W     L1306-L1320
    0000694C 00AC                   .DATA.W     L1307-L1320
    0000694E 00AC                   .DATA.W     L1308-L1320
    00006950 00AC                   .DATA.W     L1309-L1320
    00006952 00AC                   .DATA.W     L1310-L1320
    00006954 00AC                   .DATA.W     L1311-L1320
    00006956 00AC                   .DATA.W     L1312-L1320
    00006958 00AC                   .DATA.W     L1313-L1320
    0000695A 00AC                   .DATA.W     L1314-L1320
    0000695C 00AC                   .DATA.W     L1315-L1320
    0000695E 00AC                   .DATA.W     L1316-L1320
    00006960              L1263:
    00006960              L1264:
             tskcmd.c       8850      {
             tskcmd.c       8851          case POS_P0_OFFSE :   // [P0] 仮想原点オフセット値               ポジション番号３
             tskcmd.c       8852          case POS_P0_TAIHI :   // [P0] 退避位置                           ポジション番号８
             tskcmd.c       8853              devno = MT_P0;
    00006960 E603                   MOV         #3,R6      ; H'00000003
    00006962 067B                   RTV/N       R6
    00006964              L1265:
    00006964              L1266:
             tskcmd.c       8854              break;
             tskcmd.c       8855    
             tskcmd.c       8856          case POS_F0_OFFSE :   // [F0] 仮想原点オフセット値               ポジション番号４
             tskcmd.c       8857          case POS_F0_TAIHI :   // [F0] 退避位置                           ポジション番号９
             tskcmd.c       8858              devno = MT_F0;
    00006964 E604                   MOV         #4,R6      ; H'00000004
    00006966 067B                   RTV/N       R6
    00006968              L1267:
    00006968              L1268:
             tskcmd.c       8859              break;
             tskcmd.c       8860          
             tskcmd.c       8861          case POS_Y1_OFFSE :   // [Y1] 仮想原点オフセット値               ポジション番号５
             tskcmd.c       8862          case POS_Y1_TAIHI :   // [Y1] 退避位置                           ポジション番号１０
             tskcmd.c       8863              devno = MT_Y1;
    00006968 E605                   MOV         #5,R6      ; H'00000005
    0000696A 067B                   RTV/N       R6
    0000696C              L1269:
    0000696C              L1270:
    0000696C              L1271:
    0000696C              L1272:
    0000696C              L1273:
    0000696C              L1274:
    0000696C              L1275:
    0000696C              L1276:
    0000696C              L1277:
    0000696C              L1278:
    0000696C              L1279:
    0000696C              L1280:
    0000696C              L1281:
    0000696C              L1282:
             tskcmd.c       8864              break;
             tskcmd.c       8865    
             tskcmd.c       8866          case POS_Y0_OFFSE :   // [Y0] 仮想原点オフセット値               ポジション番号１
             tskcmd.c       8867          case POS_Y0_TAIHI :   // [Y0] 退避位置                           ポジション番号６
             tskcmd.c       8868          case POS_STRIPTP1 :   // [Y0] 試薬ストリップ-ショートチップ１    ポジション番号１１
             tskcmd.c       8869          case POS_STRIPTP2 :   // [Y0] 試薬ストリップ-ショートチップ２    ポジション番号１２
             tskcmd.c       8870          case POS_STRIPTPL :   // [Y0] 試薬ストリップ-ロングチップ        ポジション番号１３
             tskcmd.c       8871          case POS_STRIPTUB :   // [Y0] 試薬ストリップ-サンプルチューブ    ポジション番号１４
             tskcmd.c       8872          case POS_STRIPSM6 :   // [Y0] 試薬ストリップ-抽出用試薬6         ポジション番号１５
             tskcmd.c       8873          case POS_STRIPSM5 :   // [Y0] 試薬ストリップ-抽出用試薬5         ポジション番号１６
             tskcmd.c       8874          case POS_STRIPSM4 :   // [Y0] 試薬ストリップ-抽出用試薬4         ポジション番号１７
             tskcmd.c       8875          case POS_STRIPSM3 :   // [Y0] 試薬ストリップ-抽出用試薬3         ポジション番号１８
             tskcmd.c       8876          case POS_STRIPSM2 :   // [Y0] 試薬ストリップ-抽出用試薬2         ポジション番号１９
             tskcmd.c       8877          case POS_STRIPSM1 :   // [Y0] 試薬ストリップ-抽出用試薬1         ポジション番号２０
             tskcmd.c       8878          case POS_STRIPCAT :   // [Y0] 試薬ストリップ-カートリッジ        ポジション番号２１
             tskcmd.c       8879          case POS_STRIPCOL :   // [Y0] 試薬ストリップ-核酸回収液          ポジション番号２２
             tskcmd.c       8880              devno = MT_Y0;
    0000696C E601                   MOV         #1,R6      ; H'00000001
    0000696E 067B                   RTV/N       R6
    00006970              L1283:
    00006970              L1284:
    00006970              L1285:
    00006970              L1286:
    00006970              L1287:
    00006970              L1288:
    00006970              L1289:
    00006970              L1290:
    00006970              L1291:
    00006970              L1292:
    00006970              L1293:
    00006970              L1294:
    00006970              L1295:
    00006970              L1296:
    00006970              L1297:
    00006970              L1298:
    00006970              L1299:
    00006970              L1300:
    00006970              L1301:
    00006970              L1302:
    00006970              L1303:
    00006970              L1304:
    00006970              L1305:
    00006970              L1306:
    00006970              L1307:
    00006970              L1308:
    00006970              L1309:
    00006970              L1310:
    00006970              L1311:
    00006970              L1312:
    00006970              L1313:
    00006970              L1314:
    00006970              L1315:
    00006970              L1316:
             tskcmd.c       8881              break;
             tskcmd.c       8882    
             tskcmd.c       8883          case POS_Z0_OFFSE :   // [Z0] 仮想原点オフセット値               ポジション番号２
             tskcmd.c       8884          case POS_Z0_TAIHI :   // [Z0] 退避位置                           ポジション番号７
             tskcmd.c       8885          case POS_Z0_STOPE :   // [Z0] 試薬ストリップ-シール開け最終位置  ポジション番号２３
             tskcmd.c       8886          case POS_Z0_STOP1 :   // [Z0] 試薬ストリップ-シール開け１段位置  ポジション番号２４
             tskcmd.c       8887          case POS_Z0_STRIP :   // [Z0] 試薬ストリップ-加圧位置            ポジション番号２５
             tskcmd.c       8888          case POS_Z0_TPGTE :   // [Z0] チップ取得最終位置                 ポジション番号２６
             tskcmd.c       8889          case POS_Z0_TPGT1 :   // [Z0] チップ取得１段位置                 ポジション番号２７
             tskcmd.c       8890          case POS_Z0_TPDLE :   // [Z0] チップ廃棄最終位置                 ポジション番号２８
             tskcmd.c       8891          case POS_Z0_TPDL1 :   // [Z0] チップ廃棄１段位置                 ポジション番号２９
             tskcmd.c       8892          case POS_Z0_LIQPU :   // [Z0] 廃液吐出位置                       ポジション番号３０
             tskcmd.c       8893          case POS_Z0_COPOS :   // [Z0] コレクション 回収チューブ位置      ポジション番号３１
             tskcmd.c       8894          case POS_Z0_COLDS :   // [Z0] 廃液チューブ位置                   ポジション番号３２
             tskcmd.c       8895          case POS_Z0_SUCS1 :   // [Z0] 吸引開始高さ1                      ポジション番号３３
             tskcmd.c       8896          case POS_Z0_SUCS2 :   // [Z0] 吸引開始高さ2                      ポジション番号３４
             tskcmd.c       8897          case POS_Z0_SUCS3 :   // [Z0] 吸引開始高さ3                      ポジション番号３５
             tskcmd.c       8898          case POS_Z0_SUCS4 :   // [Z0] 吸引開始高さ4                      ポジション番号３６
             tskcmd.c       8899          case POS_Z0_SUCS5 :   // [Z0] 吸引開始高さ5                      ポジション番号３７
             tskcmd.c       8900          case POS_Z0_SUCE1 :   // [Z0] 吸引終了高さ1                      ポジション番号３８
             tskcmd.c       8901          case POS_Z0_SUCE2 :   // [Z0] 吸引終了高さ2                      ポジション番号３９
             tskcmd.c       8902          case POS_Z0_SUCE3 :   // [Z0] 吸引終了高さ3                      ポジション番号４０
             tskcmd.c       8903          case POS_Z0_SUCE4 :   // [Z0] 吸引終了高さ4                      ポジション番号４１
             tskcmd.c       8904          case POS_Z0_SUCE5 :   // [Z0] 吸引終了高さ5                      ポジション番号４２
             tskcmd.c       8905          case POS_Z0_PUTS1 :   // [Z0] 吐出開始高さ1                      ポジション番号４３
             tskcmd.c       8906          case POS_Z0_PUTS2 :   // [Z0] 吐出開始高さ2                      ポジション番号４４
             tskcmd.c       8907          case POS_Z0_PUTS3 :   // [Z0] 吐出開始高さ3                      ポジション番号４５
             tskcmd.c       8908          case POS_Z0_PUTS4 :   // [Z0] 吐出開始高さ4                      ポジション番号４６
             tskcmd.c       8909          case POS_Z0_PUTS5 :   // [Z0] 吐出開始高さ5                      ポジション番号４７
             tskcmd.c       8910          case POS_Z0_PUTE1 :   // [Z0] 吐出終了高さ1                      ポジション番号４８
             tskcmd.c       8911          case POS_Z0_PUTE2 :   // [Z0] 吐出終了高さ2                      ポジション番号４９
             tskcmd.c       8912          case POS_Z0_PUTE3 :   // [Z0] 吐出終了高さ3                      ポジション番号５０
             tskcmd.c       8913          case POS_Z0_PUTE4 :   // [Z0] 吐出終了高さ4                      ポジション番号５１
             tskcmd.c       8914          case POS_Z0_PUTE5 :   // [Z0] 吐出終了高さ5                      ポジション番号５２
             tskcmd.c       8915          case POS_Z0_MIXS1 :   // [Z0] 撹拌吸引開始高さ                   ポジション番号５３
             tskcmd.c       8916          case POS_Z0_MIXE1 :   // [Z0] 撹拌吸引終了高さ                   ポジション番号５４
             tskcmd.c       8917              devno = MT_Z0;
    00006970 E602                   MOV         #2,R6      ; H'00000002
    00006972              L1319:
    00006972 067B                   RTV/N       R6
             tskcmd.c       8918              break;
             tskcmd.c       8919          
             tskcmd.c       8920          default:
             tskcmd.c       8921              break;
             tskcmd.c       8922      }
             tskcmd.c       8923      return( devno );
             tskcmd.c       8924    }
             tskcmd.c       8925    /***********************************************************************
             tskcmd.c       8926    * 
             tskcmd.c       8927    * [概要]  
             tskcmd.c       8928    * [引数]  
             tskcmd.c       8929    * [戻値]  
             tskcmd.c       8930    * 
             tskcmd.c       8931    ***********************************************************************/
             tskcmd.c       8932    static INT GetPosiData( UB posino )
    00006974              __$GetPosiData:                  ; function: __$GetPosiData
                                                           ; frame size=0
             tskcmd.c       8933    {
             tskcmd.c       8934      INT result = CLR;
             tskcmd.c       8935      INT *adr;
             tskcmd.c       8936      
             tskcmd.c       8937      if(
    00006974 664C                   EXTU.B      R4,R6
    00006976 E503                   MOV         #3,R5      ; H'00000003
    00006978 3653                   CMP/GE      R5,R6
    0000697A 8F08                   BF/S        L1330
    0000697C E200                   MOV         #0,R2      ; H'00000000
    0000697E E560                   MOV         #96,R5     ; H'00000060
    00006980 3657                   CMP/GT      R5,R6
    00006982 8904                   BT          L1330
             tskcmd.c       8938          ( posino >= POS_P0_OFFSE )&&
             tskcmd.c       8939          ( posino <= POS_XX_RSV96 )
             tskcmd.c       8940      )
             tskcmd.c       8941      {
             tskcmd.c       8942          adr = &BkP7.Y0_Offset + ( posino - 1 ) ;
             tskcmd.c       8943          result = *adr;
    00006984 644C                   EXTU.B      R4,R4
    00006986 74FF                   ADD         #-1,R4
    00006988 4408                   SHLL2       R4
    0000698A D03E                   MOV.L       L1390+2,R0 ; __$BkP7
    0000698C 024E                   MOV.L       @(R0,R4),R2; *(adr)
    0000698E              L1330:
             tskcmd.c       8944      }
             tskcmd.c       8945    
             tskcmd.c       8946      return( result );
             tskcmd.c       8947    }
    0000698E 027B                   RTV/N       R2
             tskcmd.c       8948    
             tskcmd.c       8949    /***********************************************************************
             tskcmd.c       8950    * 
             tskcmd.c       8951    * [概要]  圧力ユニットへ加圧指示
             tskcmd.c       8952    * [引数]  
             tskcmd.c       8953    * [戻値]  
             tskcmd.c       8954    * 
             tskcmd.c       8955    ***********************************************************************/
             tskcmd.c       8956    static ER  PressReq( UB *par )
             tskcmd.c       8957    {
             tskcmd.c       8958      ER result = E_CONTINUE;
             tskcmd.c       8959      // ★後日検討
             tskcmd.c       8960      
             tskcmd.c       8961      return( result );
             tskcmd.c       8962    }
             tskcmd.c       8963    /***********************************************************************
             tskcmd.c       8964    * 
             tskcmd.c       8965    * [概要]  圧力ユニットへ加圧指示
             tskcmd.c       8966    * [引数]  
             tskcmd.c       8967    * [戻値]  
             tskcmd.c       8968    * 
             tskcmd.c       8969    ***********************************************************************/
             tskcmd.c       8970    static INT  PressStatus( UB *par )
    00006990              __$PressStatus:                  ; function: __$PressStatus
                                                           ; frame size=0
             tskcmd.c       8971    {
             tskcmd.c       8972      INT result = E_CONTINUE;
             tskcmd.c       8973      
             tskcmd.c       8974      // ★後日検討
             tskcmd.c       8975      result = E_SUCCESS;
             tskcmd.c       8976      
             tskcmd.c       8977      return( result );
             tskcmd.c       8978    }
    00006990 000B                   RTS
    00006992 E000                   MOV         #0,R0      ; H'00000000
             tskcmd.c       8979    /***********************************************************************
             tskcmd.c       8980    * 
             tskcmd.c       8981    * [概要]  
             tskcmd.c       8982    * [引数]  
             tskcmd.c       8983    * [戻値]  
             tskcmd.c       8984    * 
             tskcmd.c       8985    ***********************************************************************/
             tskcmd.c       8986    static void  SetPauseStop( UB act )
    00006994              __$SetPauseStop:                 ; function: __$SetPauseStop
                                                           ; frame size=0
             tskcmd.c       8987    {
             tskcmd.c       8988      if( act > PAUS_STS )    PauseStopFlg = PAUS_STS;
    00006994 624C                   EXTU.B      R4,R2
    00006996 E602                   MOV         #2,R6      ; H'00000002
    00006998 3267                   CMP/GT      R6,R2
    0000699A 8902                   BT          L1334
             tskcmd.c       8989      else                    PauseStopFlg = act;
    0000699C D63A                   MOV.L       L1390+6,R6 ; __$PauseStopFlg
    0000699E 000B                   RTS
    000069A0 2640                   MOV.B       R4,@R6     ; PauseStopFlg
    000069A2              L1334:
    000069A2 E202                   MOV         #2,R2      ; H'00000002
    000069A4 D638                   MOV.L       L1390+6,R6 ; __$PauseStopFlg
    000069A6 000B                   RTS
    000069A8 2620                   MOV.B       R2,@R6     ; PauseStopFlg
             tskcmd.c       8990      
             tskcmd.c       8991      // 状態書き込み
             tskcmd.c       8992      
             tskcmd.c       8993    }
             tskcmd.c       8994    /***********************************************************************
             tskcmd.c       8995    * 
             tskcmd.c       8996    * [概要]  
             tskcmd.c       8997    * [引数]  
             tskcmd.c       8998    * [戻値]  
             tskcmd.c       8999    * 
             tskcmd.c       9000    ***********************************************************************/
             tskcmd.c       9001    static UB  GetPauseStop()
    000069AA              __$GetPauseStop:                 ; function: __$GetPauseStop
                                                           ; frame size=0
             tskcmd.c       9002    {
             tskcmd.c       9003      return( PauseStopFlg );
    000069AA D637                   MOV.L       L1390+6,R6 ; __$PauseStopFlg
             tskcmd.c       9004    }
    000069AC 000B                   RTS
    000069AE 6060                   MOV.B       @R6,R0     ; PauseStopFlg
             tskcmd.c       9005    /***********************************************************************
             tskcmd.c       9006    * 
             tskcmd.c       9007    * [概要]  
             tskcmd.c       9008    * [引数]  
             tskcmd.c       9009    * [戻値]  
             tskcmd.c       9010    * 
             tskcmd.c       9011    ***********************************************************************/
             tskcmd.c       9012    static UB  InitPauseStop()
             tskcmd.c       9013    {
             tskcmd.c       9014      PauseStopFlg = IDLE_STS;
             tskcmd.c       9015    }
             tskcmd.c       9016    
             tskcmd.c       9017    /***********************************************************************
             tskcmd.c       9018    * 
             tskcmd.c       9019    * [概要]  ブローアウトエア量
             tskcmd.c       9020    * [引数]  補正前容量
             tskcmd.c       9021    * [戻値]  補正後容量
             tskcmd.c       9022    * 
             tskcmd.c       9023    ***********************************************************************/
             tskcmd.c       9024    static INT  BlowoutAirValue( ST_HOSEI_PTN *adr )
    000069B0              __$BlowoutAirValue:              ; function: __$BlowoutAirValue
                                                           ; frame size=0
             tskcmd.c       9025    {
             tskcmd.c       9026      INT result = 0;
             tskcmd.c       9027      
             tskcmd.c       9028      result = ValueCal(adr, adr->HS_Out);
    000069B0 5543                   MOV.L       @(12,R4),R5; (adr)->HS_Out
             tskcmd.c       9029      
             tskcmd.c       9030      return( result);
             tskcmd.c       9031    }
             tskcmd.c       9032    /***********************************************************************
             tskcmd.c       9033    * 
             tskcmd.c       9034    * [概要]  エアギャップ量
             tskcmd.c       9035    * [引数]  補正前容量
             tskcmd.c       9036    * [戻値]  補正後容量
             tskcmd.c       9037    * 
             tskcmd.c       9038    ***********************************************************************/
             tskcmd.c       9039    static INT  AirGapValue( ST_HOSEI_PTN *adr )
             tskcmd.c       9040    {
             tskcmd.c       9041      INT result = 0;
             tskcmd.c       9042      
             tskcmd.c       9043      result = ValueCal(adr, adr->HS_Air);
             tskcmd.c       9044      
             tskcmd.c       9045      return( result);
             tskcmd.c       9046    }
             tskcmd.c       9047    /***********************************************************************
             tskcmd.c       9048    * 
             tskcmd.c       9049    * [概要]  余剰量
             tskcmd.c       9050    * [引数]  補正前容量
             tskcmd.c       9051    * [戻値]  補正後容量
             tskcmd.c       9052    * 
             tskcmd.c       9053    ***********************************************************************/
             tskcmd.c       9054    static INT  SurplusValue( ST_HOSEI_PTN *adr )
             tskcmd.c       9055    {
             tskcmd.c       9056      INT result = 0;
             tskcmd.c       9057      
             tskcmd.c       9058      result = ValueCal(adr, adr->HS_Tra);
             tskcmd.c       9059      
             tskcmd.c       9060      return( result);
             tskcmd.c       9061    }
             tskcmd.c       9062    
             tskcmd.c       9063    /***********************************************************************
             tskcmd.c       9064    * 
             tskcmd.c       9065    * [概要]  容量補正計算
             tskcmd.c       9066    * [引数]  補正前容量
             tskcmd.c       9067    * [戻値]  補正後容量
             tskcmd.c       9068    * 
             tskcmd.c       9069    ***********************************************************************/
             tskcmd.c       9070    static INT  ValueCal( ST_HOSEI_PTN *adr, INT value )
    000069B2              __$ValueCal:                     ; function: __$ValueCal
                                                           ; frame size=8
    000069B2 4F12                   STS.L       MACL,@-R15
    000069B4 4F02                   STS.L       MACH,@-R15
             tskcmd.c       9071    {
             tskcmd.c       9072      INT result = 0;
             tskcmd.c       9073      INT valcal = 0;
             tskcmd.c       9074      INT factor = 0;
             tskcmd.c       9075      INT vl0_base = POMPVALUE_BASE * (0.0*10) ;
             tskcmd.c       9076      INT vl1_base = POMPVALUE_BASE * (0.1*10) ;
             tskcmd.c       9077      INT vl2_base = POMPVALUE_BASE * (0.5*10) ;
             tskcmd.c       9078      INT vl3_base = POMPVALUE_BASE * (1.0*10) ;
             tskcmd.c       9079      
             tskcmd.c       9080      valcal = value * 10;
    000069B6 E00A                   MOV         #10,R0     ; H'0000000A
    000069B8 4580                   MULR        R0,R5
             tskcmd.c       9081      
             tskcmd.c       9082      if( ( vl0_base >= 0 )&&( ( valcal < vl1_base ) ))           //  0%以上 〜 10%未満
    000069BA 060003E8               MOVI20      #1000,R6   ; H'000003E8
    000069BE 3563                   CMP/GE      R6,R5
    000069C0 8D01                   BT/S        L1341
    000069C2 E200                   MOV         #0,R2      ; H'00000000
             tskcmd.c       9083      {
             tskcmd.c       9084          factor = adr->HS_VL1;
    000069C4 6242                   MOV.L       @R4,R2     ; (adr)->HS_VL1
    000069C6              L1341:
             tskcmd.c       9085      }
             tskcmd.c       9086      if( ( valcal >= vl1_base )&&( ( valcal < vl2_base ) ))  // 10%以上 〜 50%未満
    000069C6 3563                   CMP/GE      R6,R5
    000069C8 8B04                   BF          L1343
    000069CA 06001388               MOVI20      #5000,R6   ; H'00001388
    000069CE 3563                   CMP/GE      R6,R5
    000069D0 8900                   BT          L1343
             tskcmd.c       9087      {
             tskcmd.c       9088          factor = adr->HS_VL2;
    000069D2 5241                   MOV.L       @(4,R4),R2 ; (adr)->HS_VL2
    000069D4              L1343:
             tskcmd.c       9089      }
             tskcmd.c       9090      if( ( valcal >= vl2_base )&&( ( valcal < vl3_base ) ))  // 50%以上 〜 100%未満
    000069D4 06001388               MOVI20      #5000,R6   ; H'00001388
    000069D8 3563                   CMP/GE      R6,R5
    000069DA 8B04                   BF          L1346
    000069DC 06002710               MOVI20      #10000,R6  ; H'00002710
    000069E0 3563                   CMP/GE      R6,R5
    000069E2 8900                   BT          L1346
             tskcmd.c       9091      {
             tskcmd.c       9092          factor = adr->HS_VL3;
    000069E4 5242                   MOV.L       @(8,R4),R2 ; (adr)->HS_VL3
    000069E6              L1346:
             tskcmd.c       9093      }
             tskcmd.c       9094      if( valcal >= vl3_base )                                        // 100%以上
    000069E6 06002710               MOVI20      #10000,R6  ; H'00002710
    000069EA 3563                   CMP/GE      R6,R5
    000069EC 8B00                   BF          L1349
             tskcmd.c       9095      {
             tskcmd.c       9096          factor = adr->HS_VL3;
    000069EE 5242                   MOV.L       @(8,R4),R2 ; (adr)->HS_VL3
    000069F0              L1349:
             tskcmd.c       9097      }
             tskcmd.c       9098      
             tskcmd.c       9099      result = factor * valcal;
             tskcmd.c       9100      result = result / 1000;
             tskcmd.c       9101    
             tskcmd.c       9102      return( result);
    000069F0 6053                   MOV         R5,R0
    000069F2 D126                   MOV.L       L1390+10,R1; H'10624DD3
    000069F4 4280                   MULR        R0,R2
    000069F6 E4FA                   MOV         #-6,R4     ; H'FFFFFFFA
    000069F8 312D                   DMULS.L     R2,R1
    000069FA 070A                   STS         MACH,R7
    000069FC 474C                   SHAD        R4,R7
    000069FE 6073                   MOV         R7,R0
    00006A00 4004                   ROTL        R0
    00006A02 C901                   AND         #1,R0
    00006A04 370C                   ADD         R0,R7
    00006A06 4F06                   LDS.L       @R15+,MACH
    00006A08 4F16                   LDS.L       @R15+,MACL
             tskcmd.c       9103    }
    00006A0A 077B                   RTV/N       R7
             tskcmd.c       9104    
             tskcmd.c       9105    /***********************************************************************
             tskcmd.c       9106    * 
             tskcmd.c       9107    * [概要]  
             tskcmd.c       9108    * [引数]  
             tskcmd.c       9109    * [戻値]  
             tskcmd.c       9110    * 
             tskcmd.c       9111    ***********************************************************************/
             tskcmd.c       9112    static unsigned short  GetNzlStsAll()
    00006A0C              __$GetNzlStsAll:                 ; function: __$GetNzlStsAll
                                                           ; frame size=0
             tskcmd.c       9113    {
             tskcmd.c       9114      return( nzlsts );
    00006A0C D620                   MOV.L       L1390+14,R6; __$nzlsts
             tskcmd.c       9115    }
    00006A0E 000B                   RTS
    00006A10 6061                   MOV.W       @R6,R0     ; nzlsts
             tskcmd.c       9116    /***********************************************************************
             tskcmd.c       9117    * 
             tskcmd.c       9118    * [概要]  指定ノズルの状態を取得する
             tskcmd.c       9119    * [引数]  ノズル番号
             tskcmd.c       9120    * [戻値]  ノズル状態（0 ≠  エラー状態、0 = 正常状態）
             tskcmd.c       9121    * 
             tskcmd.c       9122    ***********************************************************************/
             tskcmd.c       9123    static unsigned short  GetNzlSts(UB no)
             tskcmd.c       9124    {
             tskcmd.c       9125      unsigned short sftbit = 0x0001;
             tskcmd.c       9126      unsigned short result = 0x0000;
             tskcmd.c       9127      
             tskcmd.c       9128      if( no > 0 )
             tskcmd.c       9129      {
             tskcmd.c       9130          sftbit = ( sftbit << ( no - 1) );
             tskcmd.c       9131          result = ( nzlsts & sftbit );
             tskcmd.c       9132      }
             tskcmd.c       9133      
             tskcmd.c       9134      return( result );
             tskcmd.c       9135    }
             tskcmd.c       9136    /***********************************************************************
             tskcmd.c       9137    * 
             tskcmd.c       9138    * [概要]  ノズル状態セット
             tskcmd.c       9139    * [引数]  ノズル番号
             tskcmd.c       9140    * [戻値]  −
             tskcmd.c       9141    * [備考]  bit0:ノズル1・・・・bit11:ノズル12  ノズル状態（1 =  エラー状態、0 = 正常状態）
             tskcmd.c       9142    * 
             tskcmd.c       9143    ***********************************************************************/
             tskcmd.c       9144    static void  SetNzlSts( unsigned char  no )
             tskcmd.c       9145    {
             tskcmd.c       9146      unsigned short sftbit = 0x0001;
             tskcmd.c       9147      
             tskcmd.c       9148      if( no > 0 )
             tskcmd.c       9149      {
             tskcmd.c       9150          sftbit  = ( sftbit << ( no - 1) );
             tskcmd.c       9151          nzlsts |= sftbit;
             tskcmd.c       9152      }
             tskcmd.c       9153    }
             tskcmd.c       9154    /***********************************************************************
             tskcmd.c       9155    * 
             tskcmd.c       9156    * [概要]  ノズル状態クリア
             tskcmd.c       9157    * [引数]  ノズル番号
             tskcmd.c       9158    * [戻値]  −
             tskcmd.c       9159    * 
             tskcmd.c       9160    ***********************************************************************/
             tskcmd.c       9161    static void  ClrNzlSts( unsigned char  no )
             tskcmd.c       9162    {
             tskcmd.c       9163      unsigned short sftbit = 0x0001;
             tskcmd.c       9164      
             tskcmd.c       9165      if( no > 0 )
             tskcmd.c       9166      {
             tskcmd.c       9167          sftbit  = ( sftbit << ( no - 1) );
             tskcmd.c       9168          nzlsts &= ( sftbit ^ 0xffff );
             tskcmd.c       9169      }
             tskcmd.c       9170    }
             tskcmd.c       9171    /***********************************************************************
             tskcmd.c       9172    * 
             tskcmd.c       9173    * [概要]  
             tskcmd.c       9174    * [引数]  
             tskcmd.c       9175    * [戻値]  
             tskcmd.c       9176    * 
             tskcmd.c       9177    ***********************************************************************/
             tskcmd.c       9178    static unsigned short  NzlTargetGet()
    00006A12              __$NzlTargetGet:                 ; function: __$NzlTargetGet
                                                           ; frame size=8
    00006A12 4EF0                   MOVMU.L     R14,@-R15
    00006A14 D61F                   MOV.L       L1390+18,R6; H'00000001+__$psel
             tskcmd.c       9179    {
             tskcmd.c       9180      unsigned short nzltarget;
             tskcmd.c       9181      unsigned short nzlerror;
             tskcmd.c       9182      unsigned short nzlmask;
             tskcmd.c       9183      unsigned short nzlresult;
             tskcmd.c       9184      
             tskcmd.c       9185      nzltarget = IdleBitSet( psel.smp ); // ターゲット取得
    00006A16 D220                   MOV.L       L1390+22,R2; _IdleBitSet
    00006A18 420B                   JSR         @R2
    00006A1A 6460                   MOV.B       @R6,R4     ; psel.smp
             tskcmd.c       9186      nzlerror  = GetNzlStsAll() ;        // エラー状態取得
    00006A1C BFF6                   BSR         __$GetNzlStsAll
    00006A1E 6E03                   MOV         R0,R14
             tskcmd.c       9187      nzlmask   = ( nzlerror ^ 0xffff );  // エラーチャネルマスクデータ作成
             tskcmd.c       9188      nzlresult = ( nzltarget & nzlmask );// エラー以外のターゲット取得
             tskcmd.c       9189      
             tskcmd.c       9190      return( nzlresult );
    00006A20 E5FF                   MOV         #-1,R5     ; H'FFFFFFFF
    00006A22 205A                   XOR         R5,R0
    00006A24 20E9                   AND         R14,R0
    00006A26 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       9191    }
    00006A28 006B                   RTS/N
             tskcmd.c       9192    
             tskcmd.c       9193    /***********************************************************************
             tskcmd.c       9194    * 
             tskcmd.c       9195    * [概要]  
             tskcmd.c       9196    * [引数]  メッセージデータ
             tskcmd.c       9197    * [戻値]  −
             tskcmd.c       9198    * 
             tskcmd.c       9199    ***********************************************************************/
             tskcmd.c       9200    INT GetPsnsData( unsigned char *pdat )
    00006A2A              _GetPsnsData:                    ; function: GetPsnsData
                                                           ; frame size=8
    00006A2A 4EF0                   MOVMU.L     R14,@-R15
             tskcmd.c       9201    {
             tskcmd.c       9202      INT i;
             tskcmd.c       9203      INT len;
             tskcmd.c       9204    
             tskcmd.c       9205      len = strlen(&psnsdat[0]);
    00006A2C 6E43                   MOV         R4,R14
    00006A2E D41B                   MOV.L       L1390+26,R4; __$psnsdat
    00006A30 D21B                   MOV.L       L1390+30,R2; _strlen
    00006A32 424B                   JSR/N       @R2
    00006A34 6403                   MOV         R0,R4
             tskcmd.c       9206    
             tskcmd.c       9207      for( i=0;i<len;i++)
    00006A36 D519                   MOV.L       L1390+26,R5; __$psnsdat
    00006A38 A003                   BRA         L1353
    00006A3A E600                   MOV         #0,R6      ; H'00000000
    00006A3C              L1354:
             tskcmd.c       9208      {
             tskcmd.c       9209          *pdat=psnsdat[i];
    00006A3C 6054                   MOV.B       @R5+,R0    ; psnsdat[]
    00006A3E 7601                   ADD         #1,R6
    00006A40 4E8B                   MOV.B       R0,@R14+   ; *(pdat)
    00006A42              L1353:
    00006A42 3643                   CMP/GE      R4,R6
    00006A44 8BFA                   BF          L1354
    00006A46 4EF4                   MOVMU.L     @R15+,R14
             tskcmd.c       9210          pdat++;
             tskcmd.c       9211      }
             tskcmd.c       9212      return( len );
             tskcmd.c       9213    }
    00006A48 047B                   RTV/N       R4
             tskcmd.c       9214    
             tskcmd.c       9215    /***********************************************************************
             tskcmd.c       9216    * 
             tskcmd.c       9217    * [概要]  
             tskcmd.c       9218    * [引数]  メッセージデータ
             tskcmd.c       9219    * [戻値]  −
             tskcmd.c       9220    * 
             tskcmd.c       9221    ***********************************************************************/
             tskcmd.c       9222    INT GetRunData( unsigned char *buf )
    00006A4A              _GetRunData:                     ; function: GetRunData
                                                           ; frame size=4
    00006A4A 4F22                   STS.L       PR,@-R15
    00006A4C D715                   MOV.L       L1390+34,R7; __$RcvDataSize
             tskcmd.c       9223    {
             tskcmd.c       9224      memcpy( buf, &ImpExpRcvData[0], RcvDataSize );
    00006A4E D516                   MOV.L       L1390+38,R5; __$ImpExpRcvData
    00006A50 D216                   MOV.L       L1390+42,R2; _memcpy
    00006A52 420B                   JSR         @R2
    00006A54 6672                   MOV.L       @R7,R6     ; RcvDataSize
             tskcmd.c       9225      
             tskcmd.c       9226      return( RcvDataSize );
    00006A56 D113                   MOV.L       L1390+34,R1; __$RcvDataSize
    00006A58 4F26                   LDS.L       @R15+,PR
             tskcmd.c       9227    }
    00006A5A 000B                   RTS
    00006A5C 6012                   MOV.L       @R1,R0     ; RcvDataSize
             tskcmd.c       9228    
             tskcmd.c       9229    /***********************************************************************
             tskcmd.c       9230    * 
             tskcmd.c       9231    * [概要]  大容量データ扱う場合、一時的にRcvDataに格納 ※競合しない設計必要
             tskcmd.c       9232    * [引数]  メッセージデータ
             tskcmd.c       9233    * [戻値]  −
             tskcmd.c       9234    * 
             tskcmd.c       9235    ***********************************************************************/
             tskcmd.c       9236    void SetRcvData( unsigned char *buf, unsigned int len )
    00006A5E              _SetRcvData:                     ; function: SetRcvData
                                                           ; frame size=12
    00006A5E 4DF0                   MOVMU.L     R13,@-R15
             tskcmd.c       9237    {
             tskcmd.c       9238      memset( &ImpExpRcvData[0], CLR, sizeof( ImpExpRcvData ) );
    00006A60 6E53                   MOV         R5,R14
    00006A62 6D43                   MOV         R4,R13
    00006A64 D410                   MOV.L       L1390+38,R4; __$ImpExpRcvData
    00006A66 06000D48               MOVI20      #3400,R6   ; H'00000D48
    00006A6A D111                   MOV.L       L1390+46,R1; _memset
    00006A6C 410B                   JSR         @R1
    00006A6E E500                   MOV         #0,R5      ; H'00000000
             tskcmd.c       9239    
             tskcmd.c       9240      RcvDataSize = len;
    00006A70 D70C                   MOV.L       L1390+34,R7; __$RcvDataSize
    00006A72 27E2                   MOV.L       R14,@R7    ; RcvDataSize
    00006A74 65D3                   MOV         R13,R5
             tskcmd.c       9241      memcpy( &ImpExpRcvData[0], buf, len );
    00006A76 D40C                   MOV.L       L1390+38,R4; __$ImpExpRcvData
    00006A78 66E3                   MOV         R14,R6
    00006A7A D20C                   MOV.L       L1390+42,R2; _memcpy
    00006A7C 4DF4                   MOVMU.L     @R15+,R13
    00006A7E 422B                   JMP         @R2
    00006A80 0009                   NOP
    00006A82              L1390:
    00006A82 00000002               .RES.W      1
    00006A84 <00000000>             .DATA.L     __$BkP7
    00006A88 <00000000>             .DATA.L     __$PauseStopFlg
    00006A8C 10624DD3               .DATA.L     H'10624DD3
    00006A90 <00000000>             .DATA.L     __$nzlsts
    00006A94 <00000001>             .DATA.L     H'00000001+__$psel
    00006A98 <00000000>             .DATA.L     _IdleBitSet
    00006A9C <00000000>             .DATA.L     __$psnsdat
    00006AA0 <00000000>             .DATA.L     _strlen
    00006AA4 <00000000>             .DATA.L     __$RcvDataSize
    00006AA8 <00000000>             .DATA.L     __$ImpExpRcvData
    00006AAC <00000000>             .DATA.L     _memcpy
    00006AB0 <00000000>             .DATA.L     _memset
             tskcmd.c       9242    }
             tskcmd.c       9243    
             tskcmd.c       9244    
             tskcmd.c       9245    
C   00000000              _DATCHK_TBL:                     ; static: DATCHK_TBL
    00000000 01                     .DATA.B     H'01
    00000001 00                     .DATAB.B    3,0
    00000004 0000000000             .DATA.L     H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000002,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,
             0100000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000002,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000005,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000004,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000002,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0001000000 +                       H'00000006,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000005,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000007,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000005,H'00000000,H'00000000,H'00000000,
             0000010000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000004,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000008,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000002,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000002,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000004,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000200 +                       H'00000000,H'00000000,H'00000000,H'00000000
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0200000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000050000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000400   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000002   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0600000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0005000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000070000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000300   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0500000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0004000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000080000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000200   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000002   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0400000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
    00000324 00                     .DATA.B     H'00
    00000325 00                     .DATAB.B    3,0
    00000328 0000000000             .DATA.L     H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000001 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000002,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,
             0100000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000003,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0200000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0003000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000030000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000300   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0300000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0003000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000030000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000300   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000003   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
    00000648 00                     .DATA.B     H'00
    00000649 00                     .DATAB.B    3,0
    0000064C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
    00000654 00                     .DATAB.B    33756,0
    00008A30              __$TP_RID_SEND_FORM:             ; static: __$TP_RID_SEND_FORM
    00008A30 0000000D               .DATA.L     H'0000000D
    00008A34 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'49,H'44,H'20,H'26,H'48,H'2A,H'2A,H'03,H'30,H'30,H'0D
             4944202648   
             2A2A033030   
             0D           
    00008A44 00                     .DATAB.B    28,0
    00008A60              __$TP_RP1_SEND_FORM01:           ; static: __$TP_RP1_SEND_FORM01
    00008A60 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'31,H'20,H'30,H'03,H'30,H'30,H'0D
             5031203003   
             30300D       
    00008A6D              __$TP_RP1_SEND_FORM02:           ; static: __$TP_RP1_SEND_FORM02
    00008A6D 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'31,H'20,H'30,H'30,H'03,H'30,H'30,H'0D
             5031203030   
             0330300D     
    00008A7B              __$TP_RP1_SEND_FORM04:           ; static: __$TP_RP1_SEND_FORM04
    00008A7B 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'31,H'20,H'30,H'30,H'30,H'30,H'03,H'30,H'30,H'0D
             5031203030   
             3030033030   
             0D           
    00008A8B              __$TP_RP3_SEND_FORM:             ; static: __$TP_RP3_SEND_FORM
    00008A8B 02574E2052             .DATA.B     H'02,H'57,H'4E,H'20,H'52,H'50,H'33,H'20,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,
             5033202A2A +                       H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,
             2A2A2A2A2A +                       H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'2A,H'03,H'30,H'30,H'0D
             2A2A2A2A2A   
             2A2A2A2A2A   
             2A2A2A2A2A   
             2A2A2A2A2A   
             2A2A2A2A2A   
             0330300D     
D   00000000              __$CmdFuncTbl:                   ; static: __$CmdFuncTbl
    00000000 <00000000>   
             <00000000>             .DATA.L     __$CmdVER,__$CmdDummy,__$CmdVER,__$CmdALLIN,__$CmdBIN,__$CmdBOUT,__$CmdCINIT,
             <00000000> +                       __$CmdCOUNT,__$CmdINT,__$CmdABSMV,__$CmdABORT,__$CmdENCODER,__$CmdLIMIT,__$CmdMAP,
             <00000000> +                       __$CmdPDELAY,__$CmdPOWER,__$CmdPSET,__$CmdRELMV,__$CmdSET,__$CmdSTATUS,__$CmdSTOP,
             <00000000> +                       __$CmdBZCNT,__$CmdEEPREAD,__$CmdEEPWRIT,__$CmdDummy,__$CmdDummy,__$CmdTmpSet,
             <00000000> +                       __$CmdTmpGet,__$CmdDummy,__$CmdVini,__$CmdPini,__$CmdPren,__$CmdPtan,__$CmdPcan,
             <00000000> +                       __$CmdVout,__$CmdPsns,__$CmdImpPdat,__$CmdImpSped,__$CmdImpPosi,__$CmdImpOptn,
             <00000000> +                       __$CmdExpRunl,__$CmdExpComl,__$CmdDummy,__$CmdDummy,__$CmdDummy
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
    000000B4              _TpFuncTbl:                      ; static: TpFuncTbl
    000000B4 <00000000>   
             <00000000>             .DATA.L     __$TplDummy,__$TplFwver,__$TplOptif,__$TplLgin1,__$TplLgin2,__$TplInita,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplUsral,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDummy,__$TplInf01,__$TplInf02,__$TplInf03,__$TplInf04,
             <00000000> +                       __$TplInf05,__$TplInf06,__$TplInf07,__$TplInf08,__$TplInf09,__$TplInf10,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplRec01,__$TplRec02,
             <00000000> +                       __$TplRec03,__$TplRec04,__$TplRec05,__$TplRec06,__$TplRec07,__$TplRec08,__$TplRec09,
             <00000000> +                       __$TplRec10,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplChg01,__$TplChg02,__$TplChg03,__$TplChg04,__$TplChg05,__$TplChg06,__$TplChg07,
             <00000000> +                       __$TplChg08,__$TplChg09,__$TplChg10,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDel01,__$TplDel02,__$TplDel03,__$TplDel04,__$TplDel05,
             <00000000> +                       __$TplDel06,__$TplDel07,__$TplDel08,__$TplDel09,__$TplDel10,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplDummy,__$TplFwpol,__$TplPrtcl,__$TplResta,__$TplPause,
             <00000000> +                       __$TplResum,__$TplAbort,__$TplDummy,__$TplDummy,__$TplOptcd,__$TplSmbar,__$TplSmsgl,
             <00000000> +                       __$TplSmall,__$TplCllne,__$TplClqrc,__$TplClsgl,__$TplClall,__$TplLdlmp,__$TplUvlmp,
             <00000000> +                       __$TplPtlmp,__$TplPowof,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy,
             <00000000> +                       __$TplDummy,__$TplDummy,__$TplExRun,__$TplDummy,__$TplDummy,__$TplDummy,__$TplDummy
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
C   00008AB7 00000001               .RES.B      1
    00008AB8              L1428:
    00008AB8 433A5C576F             .SDATA      "C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskcmd.c"
             726B537061   
             63655C5175   
             69636B4765   
             6E655C536F   
             66745F4669   
             726D5C5175   
             69636B4765   
             6E655F5072   
             6F6A656374   
             5C74736B63   
             6D642E63     
    00008AF3 00                     .DATA.B     H'00
    00008AF4              L1470:
    00008AF4 25732C2530             .SDATA      "%s,%04X,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d"
             34582C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             34642C2530   
             3464         
    00008B3C 00                     .DATA.B     H'00
    00008B3D 00                     .DATAB.B    3,0
    00008B40              L1473:
    00008B40 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             3064         
    00008B6F 00                     .DATA.B     H'00
    00008B70              L1474:
    00008B70 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
             2C2530642C   
             253064       
    00008B9B 00                     .DATA.B     H'00
    00008B9C              L1475:
    00008B9C 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
             2C253064     
    00008BC3 00                     .DATA.B     H'00
    00008BC4              L1476:
    00008BC4 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             642C253064   
    00008BE7 00                     .DATA.B     H'00
    00008BE8              L1477:
    00008BE8 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             30642C2530   
             64           
    00008C07 00                     .DATA.B     H'00
    00008C08              L1478:
    00008C08 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             2530642C25   
             3064         
    00008C23 00                     .DATA.B     H'00
    00008C24              L1479:
    00008C24 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C2530642C   
             253064       
    00008C3B 00                     .DATA.B     H'00
    00008C3C              L1480:
    00008C3C 25732C2530             .SDATA      "%s,%04X,%0d,%0d,%0d"
             34582C2530   
             642C253064   
             2C253064     
    00008C4F 00                     .DATA.B     H'00
    00008C50              L1481:
    00008C50 25732C2530             .SDATA      "%s,%04X,%0d,%0d"
             34582C2530   
             642C253064   
    00008C5F 00                     .DATA.B     H'00
    00008C60              L1482:
    00008C60 25732C2530             .SDATA      "%s,%04X,%0d"
             34582C2530   
             64           
    00008C6B 00                     .DATA.B     H'00
    00008C6C              L1483:
    00008C6C 25732C2530             .SDATA      "%s,%04X"
             3458         
    00008C73 00                     .DATA.B     H'00
    00008C74              L1484:
    00008C74 2573                   .SDATA      "%s"
    00008C76 00                     .DATA.B     H'00
    00008C77 00                     .DATAB.B    1,0
    00008C78              L1485:
    00008C78 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008CA2 00                     .DATA.B     H'00
    00008CA3 00                     .DATAB.B    1,0
    00008CA4              L1486:
    00008CA4 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008CC9 00                     .DATA.B     H'00
    00008CCA 00                     .DATAB.B    2,0
    00008CCC              L1487:
    00008CCC 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008CEC 00                     .DATA.B     H'00
    00008CED 00                     .DATAB.B    3,0
    00008CF0              L1488:
    00008CF0 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008D0B 00                     .DATA.B     H'00
    00008D0C              L1489:
    00008D0C 25732C2530             .SDATA      "%s,%04X,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             34582C2530   
             3458         
    00008D22 00                     .DATA.B     H'00
    00008D23 00                     .DATAB.B    1,0
    00008D24              L1490:
    00008D24 25732C2530             .SDATA      "%s,%04X,%04X,%04X"
             34582C2530   
             34582C2530   
             3458         
    00008D35 00                     .DATA.B     H'00
    00008D36 00                     .DATAB.B    2,0
    00008D38              L1491:
    00008D38 25732C2530             .SDATA      "%s,%04X,%04X"
             34582C2530   
             3458         
    00008D44 00                     .DATA.B     H'00
    00008D45 00                     .DATAB.B    3,0
    00008D48              L1492:
    00008D48 25732C2530             .SDATA      "%s,%0d,%0d"
             642C253064   
    00008D52 00                     .DATA.B     H'00
    00008D53 00                     .DATAB.B    1,0
    00008D54              L1493:
    00008D54 25732C2530             .SDATA      "%s,%0d"
             64           
    00008D5A 00                     .DATA.B     H'00
    00008D5B 00                     .DATAB.B    1,0
    00008D5C              L1494:
    00008D5C 25732C2530             .SDATA      "%s,%04X,%0d,%0u"
             34582C2530   
             642C253075   
    00008D6B 00                     .DATA.B     H'00
    00008D6C              L1495:
    00008D6C 25732C2530             .SDATA      "%s,%04X,%s,%s"
             34582C2573   
             2C2573       
    00008D79 00                     .DATA.B     H'00
    00008D7A 00                     .DATAB.B    2,0
    00008D7C              L1496:
    00008D7C 25732C2530             .SDATA      "%s,%04X,%s"
             34582C2573   
    00008D86 00                     .DATA.B     H'00
    00008D87 00                     .DATAB.B    1,0
    00008D88              L1627:
    00008D88 574E205250             .SDATA      "WN RP%0d &H%08X"
             2530642026   
             4825303858   
    00008D97 00                     .DATA.B     H'00
    00008D98              L1628:
    00008D98 574E205250             .SDATA      "WN RP1 %02d"
             3120253032   
             64           
    00008DA3 00                     .DATA.B     H'00
    00008DA4              L1629:
    00008DA4 574E205250             .SDATA      "WN RP100 %s"
             3130302025   
             73           
    00008DAF 00                     .DATA.B     H'00
    00008DB0              L1631:
    00008DB0 574E205250             .SDATA      "WN RP1 %s"
             31202573     
    00008DB9 00                     .DATA.B     H'00
B   00000000              _MentePcSendbuf:                 ; static: MentePcSendbuf
    00000000 00000001               .RES.B      3400
    00000D48              __$stCtl:                        ; static: __$stCtl
    00000D48 00000004               .RES.L      71
    00000E64              __$RecvData:                     ; static: __$RecvData
    00000E64 00000001               .RES.B      60
    00000EA0              __$RecvArgs:                     ; static: __$RecvArgs
    00000EA0 00000004               .RES.L      100
    00001030              __$bufwk:                        ; static: __$bufwk
    00001030 00000001               .RES.B      60
    0000106C              __$eepb:                         ; static: __$eepb
    0000106C 00000004               .RES.L      32
    000010EC              __$RcvUserInfo:                  ; static: __$RcvUserInfo
    000010EC 00000001               .RES.B      12
    000010F8              __$DeviceStatus:                 ; static: __$DeviceStatus
    000010F8 00000004               .RES.L      2
    00001100              __$MnetStatus:                   ; static: __$MnetStatus
    00001100 00000004               .RES.L      1
    00001104              __$power:                        ; static: __$power
    00001104 00000001               .RES.B      16
    00001114              __$pProcAdr:                     ; static: __$pProcAdr
    00001114 00000004               .RES.L      1
    00001118              __$pProcDat:                     ; static: __$pProcDat
    00001118 00000004               .RES.L      1
    0000111C              __$bzcnt:                        ; static: __$bzcnt
    0000111C 00000001               .RES.B      4
    00001120              __$PauseStopFlg:                 ; static: __$PauseStopFlg
    00001120 00000001               .RES.B      1
    00001121 00000001               .RES.B      1
    00001122 00000002               .RES.W      1
    00001124              __$RcvDataSize:                  ; static: __$RcvDataSize
    00001124 00000004               .RES.L      1
    00001128              __$ExpRunlSeqno:                 ; static: __$ExpRunlSeqno
    00001128 00000001               .RES.B      1
    00001129              __$ExpRunlRetry:                 ; static: __$ExpRunlRetry
    00001129 00000001               .RES.B      1
    0000112A 00000002               .RES.W      1
    0000112C              __$tp:                           ; static: __$tp
    0000112C 00000004               .RES.L      71
    00001248              __$TpRecvData:                   ; static: __$TpRecvData
    00001248 00000001               .RES.B      60
    00001284              __$TpRecvArgs:                   ; static: __$TpRecvArgs
    00001284 00000004               .RES.L      100
    00001414              __$bcctrl:                       ; static: __$bcctrl
    00001414 00000001               .RES.B      152
    000014AC              __$BkP1:                         ; static: __$BkP1
    000014AC 00000001               .RES.B      128
    0000152C              __$Sp:                           ; static: __$Sp
    0000152C 00000004               .RES.L      120
    0000170C              __$SpPtn:                        ; static: __$SpPtn
    0000170C 00000001               .RES.B      68
    00001750              __$BkP7:                         ; static: __$BkP7
    00001750 00000004               .RES.L      32
    000017D0              __$BkP8:                         ; static: __$BkP8
    000017D0 00000004               .RES.L      32
    00001850              __$BkP9:                         ; static: __$BkP9
    00001850 00000004               .RES.L      32
    000018D0              __$BkP10:                        ; static: __$BkP10
    000018D0 00000001               .RES.B      128
    00001950              __$BkPrData:                     ; static: __$BkPrData
    00001950 00000001               .RES.B      80
    000019A0              __$BkPr:                         ; static: __$BkPr
    000019A0 00000004               .RES.L      400
    00001FE0              __$incuv:                        ; static: __$incuv
    00001FE0 00000004               .RES.L      4
    00001FF0              __$vout:                         ; static: __$vout
    00001FF0 00000002               .RES.W      2
    00001FF4              __$psns:                         ; static: __$psns
    00001FF4 00000002               .RES.W      173
    0000214E              __$psel:                         ; static: __$psel
    0000214E 00000001               .RES.B      4
    00002152              __$nzlsts:                       ; static: __$nzlsts
    00002152 00000002               .RES.W      1
    00002154              __$rspbuf2:                      ; static: __$rspbuf2
    00002154 00000001               .RES.B      128
    000021D4              __$psnsdat:                      ; static: __$psnsdat
    000021D4 00000001               .RES.B      128
    00002254              __$rspbuf:                       ; static: __$rspbuf
    00002254 00000001               .RES.B      60
    00002290              __$ImpExpRcvData:                ; static: __$ImpExpRcvData
    00002290 00000001               .RES.B      3400
    00002FD8              __$peekdat:                      ; static: __$peekdat
    00002FD8 00000004               .RES.L      1
    00002FDC              __$debug1_flg:                   ; static: __$debug1_flg
    00002FDC 00000004               .RES.L      1
    00002FE0              __$temp1:                        ; static: __$temp1
    00002FE0 00000001               .RES.B      1
    00002FE1              __$temp2:                        ; static: __$temp2
    00002FE1 00000001               .RES.B      1
    00002FE2 00000002               .RES.W      1
    00002FE4              __$lendbg:                       ; static: __$lendbg
    00002FE4 00000004               .RES.L      1
SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:34  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     9245



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 00006AB4 Byte(s)
CONSTANT SECTION (C):                                 00008DBA Byte(s)
DATA     SECTION (D):                                 00000274 Byte(s)
BSS      SECTION (B):                                 00002FE8 Byte(s)

TOTAL PROGRAM  SECTION: 00006AB4 Byte(s)
TOTAL CONSTANT SECTION: 00008DBA Byte(s)
TOTAL DATA     SECTION: 00000274 Byte(s)
TOTAL BSS      SECTION: 00002FE8 Byte(s)

    TOTAL PROGRAM SIZE: 00012ACA Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           60
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          27
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           772



*** COMMAND PARAMETER ***

-subcommand=C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskcmd.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-define=DEBUG_FLG=1
-object="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskcmd.obj"
-debug
-listfile="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskcmd.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskcmd.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
