SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:37  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskmotwait.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           tskmotwait          1    /******************************************************************************
           tskmotwait          2    * モータウェイト制御タスク                                                    *
           tskmotwait          3    *                                                                             *
           tskmotwait          4    * File name : tskmotwait.c                                                    *
           tskmotwait          5    *                                                                             *
           tskmotwait          6    * Copyright (c) 2018 NICHIRYO Co., Ltd.                                       *
           tskmotwait          7    *                                                                             *
           tskmotwait          8    ******************************************************************************/
           tskmotwait          9    #include <kernel.h>
           tskmotwait         10    #include "sh7237.h"
           tskmotwait         11    #include "iodefine.h"
           tskmotwait         12    #include "define.h"
           tskmotwait         13    #include "datastruct.h"
           tskmotwait         14    #include "tskmotwait.h"
           tskmotwait         15    #include "tskcmd.h"
           tskmotwait         16    #include "sub.h"
           tskmotwait         17    #include "automachine.h"
           tskmotwait         18    
           tskmotwait         19    
           tskmotwait         20    //*************************************
           tskmotwait         21    // 関数定義
           tskmotwait         22    //*************************************
           tskmotwait         23    
           tskmotwait         24    static  void MotWaitInit();                                               // ウェイト要求処理
           tskmotwait         25    static  void MotWaitChk();                                                // 
           tskmotwait         26    static  void MotWaitProc   ( T_CMD_MSG* mrcv );                           // ウェイト要求処理
           tskmotwait         27    static  void CmdRcvMsg     ( T_CMD_MSG* mrcv );                           // メッセージ受信処理
           tskmotwait         28    static  ER   MotWaitAnalyze( T_CMD_MSG* mrcv );                           // コマンドの解析
           tskmotwait         29    static  ER   MotWaitDummy     ( T_CMD_MSG* mrcv );                        // 
           tskmotwait         30    static  ER   MotWaitRequest   ( T_CMD_MSG* mrcv );                        // モータ動作前のウェイトリクエスト
           tskmotwait         31    static  ER   MotWaitRequestW  ( T_CMD_MSG* mrcv );                        // モータ動作前のウェイトリクエスト
           tskmotwait         32    static  ER   MotWaitPDELAY    ( T_CMD_MSG* mrcv );                        // PDELAY  パルスモータのパワー制御待ち時間設定
           tskmotwait         33    static  ER   MotWaitTimeRequest( T_CMD_MSG* mrcv );
           tskmotwait         34    static void MotWaitTimeAllInit();
           tskmotwait         35    static void MotWaitTimeInit(UB bcid);
           tskmotwait         36    
           tskmotwait         37    
           tskmotwait         38    //*************************************
           tskmotwait         39    // テーブル
           tskmotwait         40    //*************************************
           tskmotwait         41    
           tskmotwait         42    
           tskmotwait         43    
           tskmotwait         44    //*************************************
           tskmotwait         45    // データ定義
           tskmotwait         46    //*************************************
           tskmotwait         47    static    ST_MOTWAIT          MotWait[(DVMAX+1)];                         // ウェイト制御データ
           tskmotwait         48    static    ST_MOTWAIT          WaitTime[BCCTRL_MAX];                           // ウェイト制御データ
           tskmotwait         49    //static  INT WaitTime[BCCTRL_MAX];                                       // 指定時間ＷＡＩＴ用
           tskmotwait         50    static    INT IntervalCounter;
           tskmotwait         51    static    UB  inf2_dbg;
           tskmotwait         52    
           tskmotwait         53    /******************************************************************************
           tskmotwait         54    * 
           tskmotwait         55    * [概要]  モータ制御タスク
           tskmotwait         56    * [引数]  
           tskmotwait         57    * [戻値]  
           tskmotwait         58    * 
           tskmotwait         59    ******************************************************************************/
           tskmotwait         60    TASK TskMotWait( void )
P   00000000              _TskMotWait:                     ; function: TskMotWait
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
           tskmotwait         61    {
           tskmotwait         62      T_CMD_MSG*  msg;
           tskmotwait         63      ER          err;
           tskmotwait         64    
           tskmotwait         65      MotWaitInit();
    00000002 B018                   BSR         __$MotWaitInit
    00000004 0009                   NOP
           tskmotwait         66      MotWaitTimeAllInit();
    00000006 B02B                   BSR         __$MotWaitTimeAllInit
    00000008 0009                   NOP
    0000000A DE8D                   MOV.L       L95+2,R14  ; _v4_trcv_mbx
    0000000C DC8D                   MOV.L       L95+6,R12  ; L97
    0000000E DD8E                   MOV.L       L95+10,R13 ; _api_rel_mpf
    00000010              L11:
           tskmotwait         67      
           tskmotwait         68      for( ;; )
           tskmotwait         69      {
           tskmotwait         70            // コマンド待ち
           tskmotwait         71            err = trcv_mbx( ID_MBX_MOTWAIT, (T_MSG**)&msg, DLY_10M );
    00000010 E60A                   MOV         #10,R6     ; H'0000000A
    00000012 E408                   MOV         #8,R4      ; H'00000008
    00000014 4E0B                   JSR         @R14
    00000016 65F3                   MOV         R15,R5
           tskmotwait         72    
           tskmotwait         73          if( err == E_TMOUT )
    00000018 88CE                   CMP/EQ      #-50,R0
    0000001A 8B03                   BF          L13
           tskmotwait         74          {
           tskmotwait         75              MotWaitChk();
    0000001C B03E                   BSR         __$MotWaitChk
    0000001E 0009                   NOP
    00000020 AFF6                   BRA         L11
    00000022 0009                   NOP
    00000024              L13:
           tskmotwait         76              continue;
           tskmotwait         77          }
           tskmotwait         78          else
           tskmotwait         79          {
           tskmotwait         80              MotWaitProc(msg);
    00000024 B0D1                   BSR         __$MotWaitProc
    00000026 64F2                   MOV.L       @R15,R4    ; msg
    00000028 67F2                   MOV.L       @R15,R7    ; msg
           tskmotwait         81          }
           tskmotwait         82          // メモリ解放
           tskmotwait         83          RelMpf( ID_MPF_MOTWAIT, (VP)msg );
    0000002A E607                   MOV         #7,R6      ; H'00000007
    0000002C E553                   MOV         #83,R5     ; H'00000053
    0000002E 4D0B                   JSR         @R13
    00000030 64C3                   MOV         R12,R4
    00000032 AFED                   BRA         L11
    00000034 0009                   NOP
           tskmotwait         84      }
           tskmotwait         85    }
           tskmotwait         86    /******************************************************************************
           tskmotwait         87    * 
           tskmotwait         88    * [概要]  モータウェイト初期化
           tskmotwait         89    * [引数]  
           tskmotwait         90    * [戻値]  
           tskmotwait         91    * 
           tskmotwait         92    ******************************************************************************/
           tskmotwait         93    static void MotWaitInit()
    00000036              __$MotWaitInit:                  ; function: __$MotWaitInit
                                                           ; frame size=0
    00000036 E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
           tskmotwait         94    {
           tskmotwait         95      INT Loop;
           tskmotwait         96    
           tskmotwait         97      for( Loop = DVMIN; Loop <= DVMAX; Loop++ )
    00000038 E507                   MOV         #7,R5      ; H'00000007
    0000003A E700                   MOV         #0,R7      ; H'00000000
    0000003C D683                   MOV.L       L95+14,R6  ; H'0000004C+__$MotWait
    0000003E E40A                   MOV         #10,R4     ; H'0000000A
    00000040              L16:
    00000040 4510                   DT          R5
           tskmotwait         98      {
           tskmotwait         99          
           tskmotwait        100          MotWait[Loop].req = CLR;            // default
    00000042 2670                   MOV.B       R7,@R6     ; MotWait[].req
           tskmotwait        101          MotWait[Loop].tskid = DEFDAT;       // default
    00000044 8061                   MOV.B       R0,@(1,R6) ; MotWait[].tskid
           tskmotwait        102          MotWait[Loop].prid1 = DEFDAT;       // default
    00000046 8062                   MOV.B       R0,@(2,R6) ; MotWait[].prid1
           tskmotwait        103          MotWait[Loop].bcid  = DEFDAT;       // default
    00000048 8063                   MOV.B       R0,@(3,R6) ; MotWait[].bcid
           tskmotwait        104          MotWait[Loop].msgid = DEFDAT;       // default
    0000004A 8064                   MOV.B       R0,@(4,R6) ; MotWait[].msgid
           tskmotwait        105          MotWait[Loop].tim = 100/DLY_10M;    // default
    0000004C 36412011               MOV.L       R4,@(68:12,R6); MotWait[].tim
           tskmotwait        106          MotWait[Loop].cnt = CLR;            // default
    00000050 36712012               MOV.L       R7,@(72:12,R6); MotWait[].cnt
    00000054 8FF4                   BF/S        L16
    00000056 764C                   ADD         #76,R6
           tskmotwait        107    
           tskmotwait        108      }
           tskmotwait        109      IntervalCounter = 0;
    00000058 E200                   MOV         #0,R2      ; H'00000000
    0000005A D67D                   MOV.L       L95+18,R6  ; __$IntervalCounter
           tskmotwait        110    }
    0000005C 000B                   RTS
    0000005E 2622                   MOV.L       R2,@R6     ; IntervalCounter
           tskmotwait        111    static void MotWaitTimeAllInit()
    00000060              __$MotWaitTimeAllInit:           ; function: __$MotWaitTimeAllInit
                                                           ; frame size=12
    00000060 4DF0                   MOVMU.L     R13,@-R15
           tskmotwait        112    {
           tskmotwait        113      INT Loop;
           tskmotwait        114      
           tskmotwait        115      for( Loop = 0; Loop < BCCTRL_MAX; Loop++ )
    00000062 EE13                   MOV         #19,R14    ; H'00000013
    00000064 ED00                   MOV         #0,R13     ; H'00000000
    00000066              L19:
           tskmotwait        116      {
           tskmotwait        117          MotWaitTimeInit(Loop);
    00000066 64D3                   MOV         R13,R4
    00000068 B007                   BSR         __$MotWaitTimeInit
    0000006A 7D01                   ADD         #1,R13
    0000006C 4E10                   DT          R14
    0000006E 8BFA                   BF          L19
           tskmotwait        118      }
           tskmotwait        119      
           tskmotwait        120      IntervalCounter = 0;
    00000070 E200                   MOV         #0,R2      ; H'00000000
    00000072 D677                   MOV.L       L95+18,R6  ; __$IntervalCounter
    00000074 2622                   MOV.L       R2,@R6     ; IntervalCounter
    00000076 4DF4                   MOVMU.L     @R15+,R13
           tskmotwait        121    }
    00000078 006B                   RTS/N
           tskmotwait        122    static void MotWaitTimeInit(UB bcid)
    0000007A              __$MotWaitTimeInit:              ; function: __$MotWaitTimeInit
                                                           ; frame size=0
           tskmotwait        123    {
           tskmotwait        124      WaitTime[bcid].req = CLR;           // default
    0000007A 644C                   EXTU.B      R4,R4
    0000007C E04C                   MOV         #76,R0     ; H'0000004C
    0000007E 4480                   MULR        R0,R4
    00000080 D174                   MOV.L       L95+22,R1  ; __$WaitTime
    00000082 E200                   MOV         #0,R2      ; H'00000000
           tskmotwait        125      WaitTime[bcid].tskid = DEFDAT;      // default
    00000084 E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
    00000086 341C                   ADD         R1,R4
    00000088 2420                   MOV.B       R2,@R4     ; WaitTime[].req
    0000008A 8041                   MOV.B       R0,@(1,R4) ; WaitTime[].tskid
           tskmotwait        126      WaitTime[bcid].prid1 = DEFDAT;      // default
    0000008C 8042                   MOV.B       R0,@(2,R4) ; WaitTime[].prid1
           tskmotwait        127      WaitTime[bcid].bcid  = DEFDAT;      // default
    0000008E 8043                   MOV.B       R0,@(3,R4) ; WaitTime[].bcid
           tskmotwait        128      WaitTime[bcid].msgid = DEFDAT;      // default
    00000090 8044                   MOV.B       R0,@(4,R4) ; WaitTime[].msgid
           tskmotwait        129      WaitTime[bcid].tim = CLR;           // default
    00000092 34212011               MOV.L       R2,@(68:12,R4); WaitTime[].tim
           tskmotwait        130      WaitTime[bcid].cnt = CLR;           // default
    00000096 34212012               MOV.L       R2,@(72:12,R4); WaitTime[].cnt
           tskmotwait        131    }
    0000009A 006B                   RTS/N
           tskmotwait        132    
           tskmotwait        133    /***********************************************************************
           tskmotwait        134    * 
           tskmotwait        135    * [概要]  ウェイト監視
           tskmotwait        136    * [引数]  −
           tskmotwait        137    * [戻値]  −
           tskmotwait        138    * 
           tskmotwait        139    ***********************************************************************/
           tskmotwait        140    static void MotWaitChk()
    0000009C              __$MotWaitChk:                   ; function: __$MotWaitChk
                                                           ; frame size=68
    0000009C 48F0                   MOVMU.L     R8,@-R15
    0000009E 7FF4                   ADD         #-12,R15
    000000A0 DC6D                   MOV.L       L95+26,R12 ; __$MotWait
    000000A2 61C3                   MOV         R12,R1
    000000A4 7144                   ADD         #68,R1
    000000A6 1F11                   MOV.L       R1,@(4,R15)
    000000A8 61C3                   MOV         R12,R1
           tskmotwait        141    {
           tskmotwait        142      UB Loop;
           tskmotwait        143      ER result;
           tskmotwait        144      ID mpfid;
           tskmotwait        145      ID mbxid;
           tskmotwait        146    
           tskmotwait        147      // ＤＥＬＡＹ時間経過したかチェック
           tskmotwait        148      for( Loop = DVMIN; Loop <= DVMAX; Loop++  )
    000000AA E401                   MOV         #1,R4      ; H'00000001
    000000AC 7108                   ADD         #8,R1
    000000AE 6DC3                   MOV         R12,R13
    000000B0 7D48                   ADD         #72,R13
    000000B2 6BC3                   MOV         R12,R11
    000000B4 1F12                   MOV.L       R1,@(8,R15)
    000000B6 68C3                   MOV         R12,R8
    000000B8 7B04                   ADD         #4,R11
    000000BA 69C3                   MOV         R12,R9
    000000BC 7803                   ADD         #3,R8
    000000BE 6AC3                   MOV         R12,R10
    000000C0 7902                   ADD         #2,R9
    000000C2 6EC3                   MOV         R12,R14
    000000C4 7A01                   ADD         #1,R10
    000000C6 3F410000               MOV.B       R4,@(0:12,R15); Loop
    000000CA 7E05                   ADD         #5,R14
    000000CC              L23:
           tskmotwait        149      {
           tskmotwait        150          if( MotWait[Loop].req == SET )
    000000CC 644C                   EXTU.B      R4,R4
    000000CE E04C                   MOV         #76,R0     ; H'0000004C
    000000D0 6243                   MOV         R4,R2
    000000D2 4280                   MULR        R0,R2
    000000D4 6023                   MOV         R2,R0
    000000D6 00CC                   MOV.B       @(R0,R12),R0; MotWait[].req
    000000D8 8801                   CMP/EQ      #1,R0
    000000DA 8B2E                   BF          L25
           tskmotwait        151          {
           tskmotwait        152              MotWait[Loop].cnt --;                                       // デクリメント
    000000DC 65D3                   MOV         R13,R5
    000000DE 352C                   ADD         R2,R5
    000000E0 6652                   MOV.L       @R5,R6     ; MotWait[].cnt
    000000E2 76FF                   ADD         #-1,R6
           tskmotwait        153    
           tskmotwait        154              if( MotWait[Loop].cnt <= 0 )
    000000E4 4615                   CMP/PL      R6
    000000E6 8D28                   BT/S        L25
    000000E8 2562                   MOV.L       R6,@R5     ; MotWait[].cnt
           tskmotwait        155              {
           tskmotwait        156    inf2_dbg = MotWait[Loop].motpare;
    000000EA 6023                   MOV         R2,R0
    000000EC 05EC                   MOV.B       @(R0,R14),R5; MotWait[].motpare
    000000EE D75B                   MOV.L       L95+30,R7  ; __$inf2_dbg
    000000F0 655C                   EXTU.B      R5,R5
    000000F2 2750                   MOV.B       R5,@R7     ; inf2_dbg
           tskmotwait        157                  // 動作指示
           tskmotwait        158                  result = mbx_send(  MotWait[Loop].tskid,                //  tskid
           tskmotwait        159                              ID_MPF_MOTACT,                              //  mpfid
           tskmotwait        160                              ID_MBX_MOTACT,                              //  mbxid
           tskmotwait        161                              MotWait[Loop].prid1,                        //  prid1
           tskmotwait        162                              MotWait[Loop].bcid,                         //  bcid
           tskmotwait        163                              MotWait[Loop].msgid,                        //  msgid
           tskmotwait        164                              Loop,                                       //  sts
           tskmotwait        165                              MotWait[Loop].motpare,                      //  sts2
           tskmotwait        166                              &MotWait[Loop].msgdat[0],                   //  data
           tskmotwait        167                              CMD_BUFSIZ                                  //  siz
           tskmotwait        168                          );
    000000F4 E73C                   MOV         #60,R7     ; H'0000003C
    000000F6 2F76                   MOV.L       R7,@-R15
    000000F8 51F3                   MOV.L       @(12,R15),R1
    000000FA 312C                   ADD         R2,R1
    000000FC 2F16                   MOV.L       R1,@-R15
    000000FE 2F56                   MOV.L       R5,@-R15
    00000100 2F46                   MOV.L       R4,@-R15
    00000102 07BC                   MOV.B       @(R0,R11),R7; MotWait[].msgid
    00000104 677C                   EXTU.B      R7,R7
    00000106 2F76                   MOV.L       R7,@-R15
    00000108 018C                   MOV.B       @(R0,R8),R1; MotWait[].bcid
    0000010A 611C                   EXTU.B      R1,R1
    0000010C 2F16                   MOV.L       R1,@-R15
    0000010E E609                   MOV         #9,R6      ; H'00000009
    00000110 02AC                   MOV.B       @(R0,R10),R2; MotWait[].tskid
    00000112 E508                   MOV         #8,R5      ; H'00000008
    00000114 079C                   MOV.B       @(R0,R9),R7; MotWait[].prid1
    00000116 D152                   MOV.L       L95+34,R1  ; _mbx_send
    00000118 410B                   JSR         @R1
    0000011A 642C                   EXTU.B      R2,R4
    0000011C 7F18                   ADD         #24,R15
           tskmotwait        169                  // 監視データクリア
           tskmotwait        170                  MotWait[Loop].req = CLR;            // default
    0000011E E04C                   MOV         #76,R0     ; H'0000004C
    00000120 34F18000               MOVU.B      @(0,R15),R4; Loop
    00000124 E600                   MOV         #0,R6      ; H'00000000
           tskmotwait        171                  MotWait[Loop].cnt = CLR;            // default
           tskmotwait        172                  MotWait[Loop].msgid = DEFDAT;       // default
           tskmotwait        173                  MotWait[Loop].tim = 100/DLY_10M;        // default
    00000126 55F1                   MOV.L       @(4,R15),R5
    00000128 6243                   MOV         R4,R2
    0000012A E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    0000012C 4280                   MULR        R0,R2
    0000012E 6023                   MOV         R2,R0
    00000130 0C64                   MOV.B       R6,@(R0,R12); MotWait[].req
    00000132 0D66                   MOV.L       R6,@(R0,R13); MotWait[].cnt
    00000134 E60A                   MOV         #10,R6     ; H'0000000A
    00000136 0B14                   MOV.B       R1,@(R0,R11); MotWait[].msgid
    00000138 0566                   MOV.L       R6,@(R0,R5); MotWait[].tim
    0000013A              L25:
    0000013A 7401                   ADD         #1,R4
    0000013C 3F410000               MOV.B       R4,@(0:12,R15); Loop
    00000140 624C                   EXTU.B      R4,R2
    00000142 E607                   MOV         #7,R6      ; H'00000007
    00000144 3267                   CMP/GT      R6,R2
    00000146 8BC1                   BF          L23
    00000148 DC42                   MOV.L       L95+22,R12 ; __$WaitTime
           tskmotwait        174              }
           tskmotwait        175          }
           tskmotwait        176      }
           tskmotwait        177      // 指定時間待ったかチェック
           tskmotwait        178      for( Loop = 0; Loop < BCCTRL_MAX; Loop++ )
    0000014A E400                   MOV         #0,R4      ; H'00000000
    0000014C 6DC3                   MOV         R12,R13
    0000014E 6BC3                   MOV         R12,R11
    00000150 7C02                   ADD         #2,R12
    00000152 6043                   MOV         R4,R0
    00000154 0F44                   MOV.B       R4,@(R0,R15); Loop
    00000156 7D44                   ADD         #68,R13
    00000158 7B01                   ADD         #1,R11
    0000015A 6EF3                   MOV         R15,R14
    0000015C E84C                   MOV         #76,R8     ; H'0000004C
    0000015E E901                   MOV         #1,R9      ; H'00000001
    00000160 EA13                   MOV         #19,R10    ; H'00000013
    00000162              L29:
           tskmotwait        179      {
           tskmotwait        180          // 待ち時間あり？
           tskmotwait        181          if( WaitTime[Loop].tim )
    00000162 644C                   EXTU.B      R4,R4
    00000164 6083                   MOV         R8,R0
    00000166 6543                   MOV         R4,R5
    00000168 4580                   MULR        R0,R5
    0000016A 66D3                   MOV         R13,R6
    0000016C 365C                   ADD         R5,R6
    0000016E 6262                   MOV.L       @R6,R2     ; WaitTime[].tim
    00000170 2228                   TST         R2,R2
    00000172 8920                   BT          L31
           tskmotwait        182          {
           tskmotwait        183              WaitTime[Loop].tim--;
    00000174 4210                   DT          R2
    00000176 8F1E                   BF/S        L31
    00000178 2622                   MOV.L       R2,@R6     ; WaitTime[].tim
           tskmotwait        184    
           tskmotwait        185              // 待ち終了
           tskmotwait        186              if( WaitTime[Loop].tim == CLR )
           tskmotwait        187              {   
           tskmotwait        188                  if( WaitTime[Loop].tskid == ID_TSK_TMPCNT )
    0000017A 6053                   MOV         R5,R0
    0000017C 00BC                   MOV.B       @(R0,R11),R0; WaitTime[].tskid
    0000017E 880E                   CMP/EQ      #14,R0
    00000180 8B02                   BF          L34
           tskmotwait        189                  {
           tskmotwait        190                      mpfid = ID_MPF_TMPCNT;
    00000182 E10D                   MOV         #13,R1     ; H'0000000D
           tskmotwait        191                      mbxid = ID_MBX_TMPCNT;
    00000184 A002                   BRA         L35
    00000186 E60E                   MOV         #14,R6     ; H'0000000E
    00000188              L34:
           tskmotwait        192                  }
           tskmotwait        193                  else
           tskmotwait        194                  {
           tskmotwait        195                      mpfid = ID_MPF_CMD;
    00000188 E104                   MOV         #4,R1      ; H'00000004
           tskmotwait        196                      mbxid = ID_MBX_CMD;
    0000018A E605                   MOV         #5,R6      ; H'00000005
    0000018C              L35:
           tskmotwait        197                  }
           tskmotwait        198                  
           tskmotwait        199                  // メッセージ通知
           tskmotwait        200                  result = mbx_send(
           tskmotwait        201                                      ID_TSK_MOTWAIT,
           tskmotwait        202                                      mpfid,
           tskmotwait        203                                      mbxid,
           tskmotwait        204                                      WaitTime[Loop].prid1,
           tskmotwait        205                                      Loop,
           tskmotwait        206                                      ID_MSG_TIMWAIT,
           tskmotwait        207                                      NO_DATA,
           tskmotwait        208                                      NO_DATA,
           tskmotwait        209                                      &Loop,
           tskmotwait        210                                      sizeof( Loop )
           tskmotwait        211                                  );
    0000018C 2F96                   MOV.L       R9,@-R15
    0000018E 2FE6                   MOV.L       R14,@-R15
    00000190 E7FF                   MOV         #-1,R7     ; H'FFFFFFFF
    00000192 677C                   EXTU.B      R7,R7
    00000194 2F76                   MOV.L       R7,@-R15
    00000196 2F76                   MOV.L       R7,@-R15
    00000198 77C9                   ADD         #-55,R7
    0000019A 677C                   EXTU.B      R7,R7
    0000019C 2F76                   MOV.L       R7,@-R15
    0000019E 2F46                   MOV.L       R4,@-R15
    000001A0 6053                   MOV         R5,R0
    000001A2 07CC                   MOV.B       @(R0,R12),R7; WaitTime[].prid1
    000001A4 E408                   MOV         #8,R4      ; H'00000008
    000001A6 D22E                   MOV.L       L95+34,R2  ; _mbx_send
    000001A8 420B                   JSR         @R2
    000001AA 6513                   MOV         R1,R5
    000001AC 7F18                   ADD         #24,R15
           tskmotwait        212                  MotWaitTimeInit(Loop);
    000001AE 34F14000               MOV.B       @(0:12,R15),R4; Loop
    000001B2 BF62                   BSR         __$MotWaitTimeInit
    000001B4 0009                   NOP
    000001B6              L31:
    000001B6 E000                   MOV         #0,R0      ; H'00000000
    000001B8 04FC                   MOV.B       @(R0,R15),R4; Loop
    000001BA 7401                   ADD         #1,R4
    000001BC 0F44                   MOV.B       R4,@(R0,R15); Loop
    000001BE 624C                   EXTU.B      R4,R2
    000001C0 32A3                   CMP/GE      R10,R2
    000001C2 8BCE                   BF          L29
    000001C4 7F0C                   ADD         #12,R15
    000001C6 48F4                   MOVMU.L     @R15+,R8
           tskmotwait        213              }
           tskmotwait        214          }
           tskmotwait        215      }
           tskmotwait        216    }
    000001C8 006B                   RTS/N
           tskmotwait        217    
           tskmotwait        218    /***********************************************************************
           tskmotwait        219    * 
           tskmotwait        220    * [概要]  ウェイト要求処理
           tskmotwait        221    * [引数]  メッセージデータ
           tskmotwait        222    * [戻値]  −
           tskmotwait        223    * 
           tskmotwait        224    ***********************************************************************/
           tskmotwait        225    static void MotWaitProc(T_CMD_MSG* mrcv)
    000001CA              __$MotWaitProc:                  ; function: __$MotWaitProc
                                                           ; frame size=0
           tskmotwait        226    {
           tskmotwait        227      switch( mrcv->msgdata.tskid )
    000001CA 5045                   MOV.L       @(20,R4),R0; (mrcv)->tskid
    000001CC 8805                   CMP/EQ      #5,R0
    000001CE 8903                   BT          L50
    000001D0 880B                   CMP/EQ      #11,R0
    000001D2 8901                   BT          L50
    000001D4 880E                   CMP/EQ      #14,R0
    000001D6 8B01                   BF          L52
    000001D8              L50:
           tskmotwait        228      {
           tskmotwait        229      case ID_TSK_CMD:
           tskmotwait        230      case ID_TSK_INT:
           tskmotwait        231      case ID_TSK_TMPCNT:
           tskmotwait        232          CmdRcvMsg(mrcv);
    000001D8 A001                   BRA         __$CmdRcvMsg
    000001DA 0009                   NOP
    000001DC              L52:
    000001DC 006B                   RTS/N
           tskmotwait        233          break;
           tskmotwait        234      case ID_TSK_RX0:    // TSK_RX0->
           tskmotwait        235      case ID_TSK_TX0:    // TSK_TX0->
           tskmotwait        236      case ID_TSK_RXEX:   // TSK_RX2->
           tskmotwait        237      case ID_TSK_TXEX:
           tskmotwait        238      case ID_TSK_EEP:    // TSK_EEP->
           tskmotwait        239      default:
           tskmotwait        240          break;
           tskmotwait        241      }
           tskmotwait        242    }
           tskmotwait        243    /***********************************************************************
           tskmotwait        244    * 
           tskmotwait        245    * [概要]  メッセージ受信処理
           tskmotwait        246    * [引数]  メッセージデータ
           tskmotwait        247    * [戻値]  −
           tskmotwait        248    * 
           tskmotwait        249    ***********************************************************************/
           tskmotwait        250    static void CmdRcvMsg( T_CMD_MSG* mrcv )
    000001DE              __$CmdRcvMsg:                    ; function: __$CmdRcvMsg
                                                           ; frame size=0
           tskmotwait        251    {
           tskmotwait        252      ER          err;
           tskmotwait        253    
           tskmotwait        254      err = MotWaitAnalyze( mrcv );
           tskmotwait        255    }
           tskmotwait        256    /***********************************************************************
           tskmotwait        257    * 
           tskmotwait        258    * [概要]  コマンドの解析
           tskmotwait        259    * [引数]  data:コマンドリクエスト電文
           tskmotwait        260    * [戻値]  −
           tskmotwait        261    * 
           tskmotwait        262    ***********************************************************************/
           tskmotwait        263    static ER MotWaitAnalyze( T_CMD_MSG* mrcv )
    000001DE              __$MotWaitAnalyze:               ; function: __$MotWaitAnalyze
                                                           ; frame size=4
    000001DE 4F22                   STS.L       PR,@-R15
           tskmotwait        264    {
           tskmotwait        265      ER          err = E_SUCCESS;
           tskmotwait        266      UB          msgid;
           tskmotwait        267    
           tskmotwait        268      // メッセージＩＤ取得
           tskmotwait        269      msgid = mrcv->msgdata.msgid;
           tskmotwait        270    
           tskmotwait        271      if(
    000001E0 3641801B               MOVU.B      @(27,R4),R6; (mrcv)->msgid
    000001E4 E22D                   MOV         #45,R2     ; H'0000002D
    000001E6 3627                   CMP/GT      R2,R6
    000001E8 8B03                   BF          L66
    000001EA E2C8                   MOV         #-56,R2    ; H'FFFFFFC8
    000001EC 622C                   EXTU.B      R2,R2
    000001EE 3620                   CMP/EQ      R2,R6
    000001F0 8B22                   BF          L67
    000001F2              L66:
           tskmotwait        272          (( msgid >= ID_MSG_HELLO ) && ( msgid <= ID_MSG_BASE_CMD_MAX))||
           tskmotwait        273          ( msgid == ID_MSG_TIMWAIT)
           tskmotwait        274      )
           tskmotwait        275      {
           tskmotwait        276          // コールファンクション
           tskmotwait        277          switch( msgid )
    000001F2 6063                   MOV         R6,R0
    000001F4 8809                   CMP/EQ      #9,R0
    000001F6 8911                   BT          L69
    000001F8 880A                   CMP/EQ      #10,R0
    000001FA 890F                   BT          L69
    000001FC 880C                   CMP/EQ      #12,R0
    000001FE 890D                   BT          L69
    00000200 8811                   CMP/EQ      #17,R0
    00000202 890B                   BT          L69
    00000204 8814                   CMP/EQ      #20,R0
    00000206 8909                   BT          L69
    00000208 880E                   CMP/EQ      #14,R0
    0000020A 890B                   BT          L75
    0000020C 880D                   CMP/EQ      #13,R0
    0000020E 890D                   BT          L77
    00000210 E2C8                   MOV         #-56,R2    ; H'FFFFFFC8
    00000212 622C                   EXTU.B      R2,R2
    00000214 3620                   CMP/EQ      R2,R6
    00000216 890D                   BT          L78
    00000218 A00E                   BRA         L67
    0000021A 0009                   NOP
    0000021C              L69:
           tskmotwait        278          {
           tskmotwait        279              case ID_MSG_ABSMV :
           tskmotwait        280              case ID_MSG_ABORT :
           tskmotwait        281              case ID_MSG_LIMIT :
           tskmotwait        282              case ID_MSG_RELMV :
           tskmotwait        283              case ID_MSG_STOP  :
           tskmotwait        284                  MotWaitRequest( mrcv );
    0000021C B022                   BSR         __$MotWaitRequest
    0000021E 0009                   NOP
    00000220 A00A                   BRA         L67
    00000222 0009                   NOP
    00000224              L75:
           tskmotwait        285                  break;
           tskmotwait        286              case ID_MSG_PDELAY:
           tskmotwait        287                  MotWaitPDELAY( mrcv );
    00000224 B105                   BSR         __$MotWaitPDELAY
    00000226 0009                   NOP
    00000228 A006                   BRA         L67
    0000022A 0009                   NOP
    0000022C              L77:
           tskmotwait        288                  break;
           tskmotwait        289              case ID_MSG_MAP   :
           tskmotwait        290                  MotWaitRequestW( mrcv );
    0000022C B064                   BSR         __$MotWaitRequestW
    0000022E 0009                   NOP
    00000230 A002                   BRA         L67
    00000232 0009                   NOP
    00000234              L78:
           tskmotwait        291                  break;
           tskmotwait        292              case ID_MSG_TIMWAIT :
           tskmotwait        293                  MotWaitTimeRequest( mrcv );
    00000234 B0A4                   BSR         __$MotWaitTimeRequest
    00000236 0009                   NOP
    00000238              L67:
           tskmotwait        294                  break;
           tskmotwait        295              default:
           tskmotwait        296                  break;
           tskmotwait        297          }
           tskmotwait        298          
           tskmotwait        299      }
           tskmotwait        300    
           tskmotwait        301      return( err );
    00000238 4F26                   LDS.L       @R15+,PR
           tskmotwait        302    }
    0000023A 000B                   RTS
    0000023C E000                   MOV         #0,R0      ; H'00000000
    0000023E              L95:
    0000023E 00000002               .RES.W      1
    00000240 <00000000>             .DATA.L     _v4_trcv_mbx
    00000244 <00000000>             .DATA.L     L97
    00000248 <00000000>             .DATA.L     _api_rel_mpf
    0000024C <0000004C>             .DATA.L     H'0000004C+__$MotWait
    00000250 <00000000>             .DATA.L     __$IntervalCounter
    00000254 <00000000>             .DATA.L     __$WaitTime
    00000258 <00000000>             .DATA.L     __$MotWait
    0000025C <00000000>             .DATA.L     __$inf2_dbg
    00000260 <00000000>             .DATA.L     _mbx_send
           tskmotwait        303    
           tskmotwait        304    /***********************************************************************
           tskmotwait        305    * 
           tskmotwait        306    * [概要]  ダミールーチン
           tskmotwait        307    * [引数]  msg:メッセージID、mm1:モータ、mm2:モータ、data:メッセージデータ
           tskmotwait        308    * [戻値]  エラーコード
           tskmotwait        309    * 
           tskmotwait        310    ***********************************************************************/
           tskmotwait        311    static ER MotWaitDummy( T_CMD_MSG* mrcv )
           tskmotwait        312    {
           tskmotwait        313      // 必要であればエラー出力
           tskmotwait        314      return(E_SYS_FNCCAL);
           tskmotwait        315    }
           tskmotwait        316    
           tskmotwait        317    /***********************************************************************
           tskmotwait        318    * 
           tskmotwait        319    * [概要]  モータ動作前のウェイトリクエスト
           tskmotwait        320    * [引数]  msg:メッセージID、mm1:モータ、mm2:モータ、data:メッセージデータ
           tskmotwait        321    * [戻値]  エラーコード
           tskmotwait        322    * 
           tskmotwait        323    ***********************************************************************/
           tskmotwait        324    static ER MotWaitRequest( T_CMD_MSG* mrcv )
    00000264              __$MotWaitRequest:               ; function: __$MotWaitRequest
                                                           ; frame size=44
    00000264 4BF0                   MOVMU.L     R11,@-R15
    00000266 3D41801C               MOVU.B      @(28,R4),R13; (mrcv)->inf
           tskmotwait        325    {
           tskmotwait        326      ER      result = E_SUCCESS;
           tskmotwait        327      UB      mm;
           tskmotwait        328    
           tskmotwait        329      // １軸目
           tskmotwait        330      mm = mrcv->msgdata.inf;                                             // モータ取得
           tskmotwait        331      MotWait[mm].tskid = mrcv->msgdata.tskid;                            // タスクＩＤセット
    0000026A E04C                   MOV         #76,R0     ; H'0000004C
           tskmotwait        332      MotWait[mm].prid1 = mrcv->msgdata.prid1;                            // プロセスＩＤ
           tskmotwait        333      MotWait[mm].bcid  = mrcv->msgdata.bcid;                             // ＢＣＩＤセット
           tskmotwait        334      MotWait[mm].msgid = mrcv->msgdata.msgid;                            // メッセージＩＤセット
           tskmotwait        335      MotWait[mm].req   = SET;                                                // ディレイ開始
    0000026C E101                   MOV         #1,R1      ; H'00000001
    0000026E 6BD3                   MOV         R13,R11
    00000270 E63C                   MOV         #60,R6     ; H'0000003C
    00000272 4D80                   MULR        R0,R13
    00000274 DC7F                   MOV.L       L96,R12    ; __$MotWait
    00000276 5045                   MOV.L       @(20,R4),R0; (mrcv)->tskid
    00000278 6E43                   MOV         R4,R14
    0000027A 3DCC                   ADD         R12,R13
    0000027C 80D1                   MOV.B       R0,@(1,R13); MotWait[].tskid
    0000027E 6CD3                   MOV         R13,R12
    00000280 30414018               MOV.B       @(24:12,R4),R0; (mrcv)->prid1
           tskmotwait        336      MotWait[mm].cnt   = MotWait[mm].tim;                                // ディレイ時間設定
    00000284 35D16011               MOV.L       @(68:12,R13),R5; MotWait[].tim
    00000288 80D2                   MOV.B       R0,@(2,R13); MotWait[].prid1
    0000028A 7C08                   ADD         #8,R12
    0000028C 3041401A               MOV.B       @(26:12,R4),R0; (mrcv)->bcid
    00000290 80D3                   MOV.B       R0,@(3,R13); MotWait[].bcid
    00000292 3041401B               MOV.B       @(27:12,R4),R0; (mrcv)->msgid
    00000296 2D10                   MOV.B       R1,@R13    ; MotWait[].req
    00000298 80D4                   MOV.B       R0,@(4,R13); MotWait[].msgid
    0000029A 3D512012               MOV.L       R5,@(72:12,R13); MotWait[].cnt
           tskmotwait        337      MotWait[mm].motpare = mrcv->msgdata.inf2;                           // モータペアセット
    0000029E 3041401D               MOV.B       @(29:12,R4),R0; (mrcv)->inf2
           tskmotwait        338      memcpy( &MotWait[mm].msgdat[0],&mrcv->msgdata.data[0],CMD_BUFSIZ ); // データコピー
    000002A2 7424                   ADD         #36,R4
    000002A4 80D5                   MOV.B       R0,@(5,R13); MotWait[].motpare
    000002A6 6543                   MOV         R4,R5
    000002A8 D773                   MOV.L       L96+4,R7   ; _memcpy
    000002AA 470B                   JSR         @R7
    000002AC 64C3                   MOV         R12,R4
           tskmotwait        339    
           tskmotwait        340    inf2_dbg = mrcv->msgdata.inf2;
    000002AE 31E1401D               MOV.B       @(29:12,R14),R1; (mrcv)->inf2
    000002B2 DE72                   MOV.L       L96+8,R14  ; __$inf2_dbg
    000002B4 2E10                   MOV.B       R1,@R14    ; inf2_dbg
    000002B6 E501                   MOV         #1,R5      ; H'00000001
           tskmotwait        341    
           tskmotwait        342      motor_POWER( mm, SET ); 
    000002B8 D771                   MOV.L       L96+12,R7  ; _motor_POWER
    000002BA 470B                   JSR         @R7
    000002BC 64B3                   MOV         R11,R4
           tskmotwait        343    
           tskmotwait        344      // １軸目
           tskmotwait        345      if( MotWait[mm].tim == 0 )
    000002BE 32D16011               MOV.L       @(68:12,R13),R2; MotWait[].tim
    000002C2 2228                   TST         R2,R2
    000002C4 8B15                   BF          L81
           tskmotwait        346      {
           tskmotwait        347          // 動作指示
           tskmotwait        348          mbx_send(   MotWait[mm].tskid,                                  // tskid
           tskmotwait        349                      ID_MPF_MOTACT,                                      // mpfid
           tskmotwait        350                      ID_MBX_MOTACT,                                      // mbxid
           tskmotwait        351                      MotWait[mm].prid1,                                  // prid1
           tskmotwait        352                      MotWait[mm].bcid,                                   // bcid
           tskmotwait        353                      MotWait[mm].msgid,                                  // msgid
           tskmotwait        354                      mm,                                                 // sts
           tskmotwait        355                      MotWait[mm].motpare,                                // sts2
           tskmotwait        356                      &MotWait[mm].msgdat[0],                             // data
           tskmotwait        357                      CMD_BUFSIZ                                          // siz
           tskmotwait        358                  );
    000002C6 E13C                   MOV         #60,R1     ; H'0000003C
    000002C8 2F16                   MOV.L       R1,@-R15
    000002CA 2FC6                   MOV.L       R12,@-R15
    000002CC 30D18005               MOVU.B      @(5,R13),R0; MotWait[].motpare
    000002D0 2F06                   MOV.L       R0,@-R15
    000002D2 2FB6                   MOV.L       R11,@-R15
    000002D4 30D18004               MOVU.B      @(4,R13),R0; MotWait[].msgid
    000002D8 2F06                   MOV.L       R0,@-R15
    000002DA 30D18003               MOVU.B      @(3,R13),R0; MotWait[].bcid
    000002DE 2F06                   MOV.L       R0,@-R15
    000002E0 E609                   MOV         #9,R6      ; H'00000009
    000002E2 84D2                   MOV.B       @(2,R13),R0; MotWait[].prid1
    000002E4 E508                   MOV         #8,R5      ; H'00000008
    000002E6 34D18001               MOVU.B      @(1,R13),R4; MotWait[].tskid
    000002EA DE66                   MOV.L       L96+16,R14 ; _mbx_send
    000002EC 4E0B                   JSR         @R14
    000002EE 6703                   MOV         R0,R7
    000002F0 7F18                   ADD         #24,R15
    000002F2              L81:
           tskmotwait        359      }
           tskmotwait        360      return(result);
    000002F2 E000                   MOV         #0,R0      ; H'00000000
    000002F4 4BF4                   MOVMU.L     @R15+,R11
           tskmotwait        361    }
    000002F6 006B                   RTS/N
           tskmotwait        362    
           tskmotwait        363    /***********************************************************************
           tskmotwait        364    * 
           tskmotwait        365    * [概要]  モータ動作前のウェイトリクエスト
           tskmotwait        366    * [引数]  msg:メッセージID、mm1:モータ、mm2:モータ、data:メッセージデータ
           tskmotwait        367    * [戻値]  エラーコード
           tskmotwait        368    * 
           tskmotwait        369    ***********************************************************************/
           tskmotwait        370    static ER MotWaitRequestW( T_CMD_MSG* mrcv )
    000002F8              __$MotWaitRequestW:              ; function: __$MotWaitRequestW
                                                           ; frame size=44
    000002F8 4BF0                   MOVMU.L     R11,@-R15
           tskmotwait        371    {
           tskmotwait        372      UB      mm;
           tskmotwait        373      UB      mm2;
           tskmotwait        374      ER      result = E_SUCCESS;
           tskmotwait        375      
           tskmotwait        376      // １軸目
           tskmotwait        377      mm = mrcv->msgdata.inf;                                             // モータ取得
    000002FA 3C41801C               MOVU.B      @(28,R4),R12; (mrcv)->inf
           tskmotwait        378      mm2 = mrcv->msgdata.inf2;                                           // モータ取得
           tskmotwait        379      MotWait[mm].tskid = mrcv->msgdata.tskid;                            // タスクＩＤセット
    000002FE E04C                   MOV         #76,R0     ; H'0000004C
           tskmotwait        380    //    MotWait[mm].tskid = ID_TSK_MOTWAIT;                                 // タスクＩＤ
           tskmotwait        381      MotWait[mm].prid1 = mrcv->msgdata.prid1;                            // プロセスＩＤ
           tskmotwait        382      MotWait[mm].bcid = mrcv->msgdata.bcid;                              // ＢＣＩＤ
           tskmotwait        383      MotWait[mm].msgid = mrcv->msgdata.msgid;                            // メッセージＩＤ
           tskmotwait        384      MotWait[mm].req = SET;                                              // ディレイ開始
    00000300 E101                   MOV         #1,R1      ; H'00000001
    00000302 6EC3                   MOV         R12,R14
    00000304 E63C                   MOV         #60,R6     ; H'0000003C
    00000306 4E80                   MULR        R0,R14
    00000308 D25A                   MOV.L       L96,R2     ; __$MotWait
    0000030A 5045                   MOV.L       @(20,R4),R0; (mrcv)->tskid
    0000030C 3B41801D               MOVU.B      @(29,R4),R11; (mrcv)->inf2
    00000310 3E2C                   ADD         R2,R14
    00000312 80E1                   MOV.B       R0,@(1,R14); MotWait[].tskid
    00000314 6DE3                   MOV         R14,R13
    00000316 30414018               MOV.B       @(24:12,R4),R0; (mrcv)->prid1
           tskmotwait        385      MotWait[mm].cnt = MotWait[mm].tim;                                  // ディレイ時間設定
    0000031A 35E16011               MOV.L       @(68:12,R14),R5; MotWait[].tim
    0000031E 80E2                   MOV.B       R0,@(2,R14); MotWait[].prid1
    00000320 7D08                   ADD         #8,R13
    00000322 3041401A               MOV.B       @(26:12,R4),R0; (mrcv)->bcid
    00000326 80E3                   MOV.B       R0,@(3,R14); MotWait[].bcid
    00000328 3041401B               MOV.B       @(27:12,R4),R0; (mrcv)->msgid
    0000032C 2E10                   MOV.B       R1,@R14    ; MotWait[].req
           tskmotwait        386      MotWait[mm].motpare = mm2;                                          // モータペアセット
           tskmotwait        387      memcpy( &MotWait[mm].msgdat[0],&mrcv->msgdata.data[0],CMD_BUFSIZ ); // データコピー
    0000032E 7424                   ADD         #36,R4
    00000330 80E4                   MOV.B       R0,@(4,R14); MotWait[].msgid
    00000332 60B3                   MOV         R11,R0
    00000334 3E512012               MOV.L       R5,@(72:12,R14); MotWait[].cnt
    00000338 80E5                   MOV.B       R0,@(5,R14); MotWait[].motpare
    0000033A 6543                   MOV         R4,R5
    0000033C D74E                   MOV.L       L96+4,R7   ; _memcpy
    0000033E 470B                   JSR         @R7
    00000340 64D3                   MOV         R13,R4
    00000342 E501                   MOV         #1,R5      ; H'00000001
           tskmotwait        388    
           tskmotwait        389      motor_POWER( mm, SET );
    00000344 D14E                   MOV.L       L96+12,R1  ; _motor_POWER
    00000346 410B                   JSR         @R1
    00000348 64C3                   MOV         R12,R4
           tskmotwait        390    
           tskmotwait        391      // WAIT無し
           tskmotwait        392      if( MotWait[mm].tim == 0 )
    0000034A 32E16011               MOV.L       @(68:12,R14),R2; MotWait[].tim
    0000034E 2228                   TST         R2,R2
    00000350 8B13                   BF          L84
           tskmotwait        393      {
           tskmotwait        394          // 動作指示
           tskmotwait        395          mbx_send(   MotWait[mm].tskid,                                  // tskid
           tskmotwait        396                      ID_MPF_MOTACT,                                      // mpfid
           tskmotwait        397                      ID_MBX_MOTACT,                                      // mbxid
           tskmotwait        398                      MotWait[mm].prid1,                                  // prid1
           tskmotwait        399                      MotWait[mm].bcid,                                   // bcid
           tskmotwait        400                      MotWait[mm].msgid,                                  // msgid
           tskmotwait        401                      mm,                                                 // sts
           tskmotwait        402                      mm2,                                                // sts2
           tskmotwait        403                      &MotWait[mm].msgdat[0],                             // data
           tskmotwait        404                      CMD_BUFSIZ                                          // siz
           tskmotwait        405                  );
    00000352 E43C                   MOV         #60,R4     ; H'0000003C
    00000354 2F46                   MOV.L       R4,@-R15
    00000356 2FD6                   MOV.L       R13,@-R15
    00000358 2FB6                   MOV.L       R11,@-R15
    0000035A 2FC6                   MOV.L       R12,@-R15
    0000035C 30E18004               MOVU.B      @(4,R14),R0; MotWait[].msgid
    00000360 2F06                   MOV.L       R0,@-R15
    00000362 30E18003               MOVU.B      @(3,R14),R0; MotWait[].bcid
    00000366 2F06                   MOV.L       R0,@-R15
    00000368 E609                   MOV         #9,R6      ; H'00000009
    0000036A 84E2                   MOV.B       @(2,R14),R0; MotWait[].prid1
    0000036C E508                   MOV         #8,R5      ; H'00000008
    0000036E 34E18001               MOVU.B      @(1,R14),R4; MotWait[].tskid
    00000372 D144                   MOV.L       L96+16,R1  ; _mbx_send
    00000374 410B                   JSR         @R1
    00000376 6703                   MOV         R0,R7
    00000378 7F18                   ADD         #24,R15
    0000037A              L84:
           tskmotwait        406      }
           tskmotwait        407      return(result);
    0000037A E000                   MOV         #0,R0      ; H'00000000
    0000037C 4BF4                   MOVMU.L     @R15+,R11
           tskmotwait        408    }
    0000037E 006B                   RTS/N
           tskmotwait        409    
           tskmotwait        410    /***********************************************************************
           tskmotwait        411    * 
           tskmotwait        412    * [概要]  指定時間ＷＡＩＴ
           tskmotwait        413    * [引数]  mrcv:メッセージデータ
           tskmotwait        414    * [戻値]  エラーコード
           tskmotwait        415    * 
           tskmotwait        416    ***********************************************************************/
           tskmotwait        417    static ER MotWaitTimeRequest( T_CMD_MSG* mrcv )
    00000380              __$MotWaitTimeRequest:           ; function: __$MotWaitTimeRequest
                                                           ; frame size=52
    00000380 4BF0                   MOVMU.L     R11,@-R15
    00000382 7FF8                   ADD         #-8,R15
    00000384 ED00                   MOV         #0,R13     ; H'00000000
           tskmotwait        418    {
           tskmotwait        419      ER      result = E_SUCCESS;
           tskmotwait        420      UB      bcid;
           tskmotwait        421      UB      prid1;
           tskmotwait        422      UB      msgid;
           tskmotwait        423      INT     waittim = CLR;
           tskmotwait        424      ID      mpfid;
           tskmotwait        425      ID      mbxid;
           tskmotwait        426      
           tskmotwait        427      bcid = mrcv->msgdata.bcid;                                          // ＢＣＩＤセット
           tskmotwait        428    
           tskmotwait        429      if( bcid < BCCTRL_MAX )
    00000386 E613                   MOV         #19,R6     ; H'00000013
    00000388 2FD2                   MOV.L       R13,@R15   ; waittim
    0000038A 3241801A               MOVU.B      @(26,R4),R2; (mrcv)->bcid
    0000038E 3263                   CMP/GE      R6,R2
    00000390 3F210004               MOV.B       R2,@(4:12,R15); bcid
    00000394 8D42                   BT/S        L87
    00000396 6E43                   MOV         R4,R14
           tskmotwait        430      {
           tskmotwait        431          prid1 = mrcv->msgdata.prid1;                                    // 
           tskmotwait        432          msgid = mrcv->msgdata.msgid;
           tskmotwait        433          // 指定ＷＡＩＴ時間取得
           tskmotwait        434          memcpy( &waittim, &mrcv->msgdata.data[0],sizeof( INT ) );
    00000398 65E3                   MOV         R14,R5
    0000039A 7524                   ADD         #36,R5
    0000039C E604                   MOV         #4,R6      ; H'00000004
    0000039E 3BE18018               MOVU.B      @(24,R14),R11; (mrcv)->prid1
    000003A2 3CE1401B               MOV.B       @(27:12,R14),R12; (mrcv)->msgid
    000003A6 D234                   MOV.L       L96+4,R2   ; _memcpy
    000003A8 420B                   JSR         @R2
    000003AA 64F3                   MOV         R15,R4
    000003AC 64F2                   MOV.L       @R15,R4    ; waittim
           tskmotwait        435          
           tskmotwait        436          // WAIT無し
           tskmotwait        437          if( waittim == 0 )
    000003AE 2448                   TST         R4,R4
    000003B0 8F1F                   BF/S        L89
    000003B2 56E5                   MOV.L       @(20,R14),R6; (mrcv)->tskid
           tskmotwait        438          {
           tskmotwait        439              if( mrcv->msgdata.tskid == ID_TSK_TMPCNT )
    000003B4 6063                   MOV         R6,R0
    000003B6 880E                   CMP/EQ      #14,R0
    000003B8 8B02                   BF          L91
           tskmotwait        440              {
           tskmotwait        441                  mpfid = ID_MPF_TMPCNT;
    000003BA E50D                   MOV         #13,R5     ; H'0000000D
           tskmotwait        442                  mbxid = ID_MBX_TMPCNT;
    000003BC A002                   BRA         L92
    000003BE E60E                   MOV         #14,R6     ; H'0000000E
    000003C0              L91:
           tskmotwait        443              }
           tskmotwait        444              else
           tskmotwait        445              {
           tskmotwait        446                  mpfid = ID_MPF_CMD;
    000003C0 E504                   MOV         #4,R5      ; H'00000004
           tskmotwait        447                  mbxid = ID_MBX_CMD;
    000003C2 E605                   MOV         #5,R6      ; H'00000005
    000003C4              L92:
           tskmotwait        448              }
           tskmotwait        449              
           tskmotwait        450              // メッセージ通知
           tskmotwait        451              result = mbx_send(
           tskmotwait        452                                  ID_TSK_MOTWAIT,   // tskid
           tskmotwait        453                                  mpfid,            // mpfid
           tskmotwait        454                                  mbxid,            // mbxid
           tskmotwait        455                                  prid1,            // prid1
           tskmotwait        456                                  bcid,             // bcid
           tskmotwait        457                                  ID_MSG_TIMWAIT,   // msgid
           tskmotwait        458                                  NO_DATA,          // sts
           tskmotwait        459                                  NO_DATA,          // sts2
           tskmotwait        460                                  &bcid,            // data
           tskmotwait        461                                  sizeof( bcid )    // siz
           tskmotwait        462                              );
    000003C4 E101                   MOV         #1,R1      ; H'00000001
    000003C6 2F16                   MOV.L       R1,@-R15
    000003C8 64F3                   MOV         R15,R4
    000003CA 7408                   ADD         #8,R4
    000003CC 2F46                   MOV.L       R4,@-R15
    000003CE E1FF                   MOV         #-1,R1     ; H'FFFFFFFF
    000003D0 611C                   EXTU.B      R1,R1
    000003D2 2F16                   MOV.L       R1,@-R15
    000003D4 2F16                   MOV.L       R1,@-R15
    000003D6 71C9                   ADD         #-55,R1
    000003D8 671C                   EXTU.B      R1,R7
    000003DA 2F76                   MOV.L       R7,@-R15
    000003DC 7FFC                   ADD         #-4,R15
    000003DE E408                   MOV         #8,R4      ; H'00000008
    000003E0 3CF1801C               MOVU.B      @(28,R15),R12; bcid
    000003E4 2FC2                   MOV.L       R12,@R15
    000003E6 DE27                   MOV.L       L96+16,R14 ; _mbx_send
    000003E8 4E0B                   JSR         @R14
    000003EA 67B3                   MOV         R11,R7
    000003EC 7F18                   ADD         #24,R15
    000003EE A015                   BRA         L87
    000003F0 6D03                   MOV         R0,R13
    000003F2              L89:
           tskmotwait        463          }
           tskmotwait        464          else
           tskmotwait        465          {
           tskmotwait        466              // 指定ＷＡＩＴ時間セット
           tskmotwait        467              WaitTime[bcid].tskid = mrcv->msgdata.tskid;
    000003F2 31F18004               MOVU.B      @(4,R15),R1; bcid
    000003F6 E04C                   MOV         #76,R0     ; H'0000004C
    000003F8 6213                   MOV         R1,R2
    000003FA 4280                   MULR        R0,R2
    000003FC D522                   MOV.L       L96+20,R5  ; __$WaitTime
    000003FE 6063                   MOV         R6,R0
    00000400 325C                   ADD         R5,R2
    00000402 8021                   MOV.B       R0,@(1,R2) ; WaitTime[].tskid
           tskmotwait        468              WaitTime[bcid].prid1 = prid1;
    00000404 60B3                   MOV         R11,R0
    00000406 8022                   MOV.B       R0,@(2,R2) ; WaitTime[].prid1
           tskmotwait        469              WaitTime[bcid].bcid  = bcid;
    00000408 6013                   MOV         R1,R0
    0000040A 8023                   MOV.B       R0,@(3,R2) ; WaitTime[].bcid
           tskmotwait        470              WaitTime[bcid].msgid = msgid;
    0000040C 60C3                   MOV         R12,R0
    0000040E 8024                   MOV.B       R0,@(4,R2) ; WaitTime[].msgid
           tskmotwait        471              WaitTime[bcid].motpare  = 0;
    00000410 E000                   MOV         #0,R0      ; H'00000000
    00000412 8025                   MOV.B       R0,@(5,R2) ; WaitTime[].motpare
           tskmotwait        472              WaitTime[bcid].tim   = waittim;
    00000414 32412011               MOV.L       R4,@(68:12,R2); WaitTime[].tim
           tskmotwait        473              WaitTime[bcid].cnt   = waittim;
    00000418 32412012               MOV.L       R4,@(72:12,R2); WaitTime[].cnt
    0000041C              L87:
           tskmotwait        474          }
           tskmotwait        475      }
           tskmotwait        476      
           tskmotwait        477      return(result);
    0000041C 60D3                   MOV         R13,R0
    0000041E 7F08                   ADD         #8,R15
    00000420 4BF4                   MOVMU.L     @R15+,R11
           tskmotwait        478    }
    00000422 006B                   RTS/N
           tskmotwait        479    /***********************************************************************
           tskmotwait        480    * 
           tskmotwait        481    * [概要]  モータウェイト状態取得
           tskmotwait        482    * [引数]  モータ番号
           tskmotwait        483    * [戻値]  −
           tskmotwait        484    * 
           tskmotwait        485    ***********************************************************************/
           tskmotwait        486    UB GetMotWait( UB mot  )
    00000424              _GetMotWait:                     ; function: GetMotWait
                                                           ; frame size=0
    00000424 644C                   EXTU.B      R4,R4
    00000426 E04C                   MOV         #76,R0     ; H'0000004C
    00000428 4480                   MULR        R0,R4
           tskmotwait        487    {
           tskmotwait        488      return( MotWait[mot].req );
    0000042A D512                   MOV.L       L96,R5     ; __$MotWait
    0000042C 6043                   MOV         R4,R0
           tskmotwait        489    }
    0000042E 000B                   RTS
    00000430 005C                   MOV.B       @(R0,R5),R0; MotWait[].req
           tskmotwait        490    
           tskmotwait        491    /***********************************************************************
           tskmotwait        492    *
           tskmotwait        493    * [概要]  PDELAY  パルスモータのパワー制御待ち時間設定
           tskmotwait        494    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
           tskmotwait        495    * [戻値]  -
           tskmotwait        496    * 
           tskmotwait        497    ***********************************************************************/
           tskmotwait        498    static ER MotWaitPDELAY ( T_CMD_MSG* mrcv )
    00000432              __$MotWaitPDELAY:                ; function: __$MotWaitPDELAY
                                                           ; frame size=20
    00000432 4F22                   STS.L       PR,@-R15
    00000434 4F12                   STS.L       MACL,@-R15
    00000436 4F02                   STS.L       MACH,@-R15
    00000438 7FF8                   ADD         #-8,R15
           tskmotwait        499    {
           tskmotwait        500      ER      result = E_SUCCESS;
           tskmotwait        501      ST_PDELAY pdelay;
           tskmotwait        502    
           tskmotwait        503      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
           tskmotwait        504      memcpy( &pdelay, &mrcv->msgdata.data[0], sizeof(ST_PDELAY) );
    0000043A 7424                   ADD         #36,R4
    0000043C E608                   MOV         #8,R6      ; H'00000008
    0000043E 6543                   MOV         R4,R5
    00000440 D10D                   MOV.L       L96+4,R1   ; _memcpy
    00000442 410B                   JSR         @R1
    00000444 64F3                   MOV         R15,R4
           tskmotwait        505    
           tskmotwait        506      // ディレイ時間設定
           tskmotwait        507      MotWait[pdelay.mm].tim = ( pdelay.tttt / DLY_10M );
    00000446 D711                   MOV.L       L96+24,R7  ; H'66666667
    00000448 52F1                   MOV.L       @(4,R15),R2; pdelay.tttt
    0000044A 31F18000               MOVU.B      @(0,R15),R1; pdelay.mm
    0000044E 372D                   DMULS.L     R2,R7
    00000450 D20F                   MOV.L       L96+28,R2  ; H'00000044+__$MotWait
    00000452 050A                   STS         MACH,R5
    00000454 4521                   SHAR        R5
    00000456 4521                   SHAR        R5
    00000458 6053                   MOV         R5,R0
    0000045A 4004                   ROTL        R0
    0000045C C901                   AND         #1,R0
    0000045E 350C                   ADD         R0,R5
    00000460 E04C                   MOV         #76,R0     ; H'0000004C
    00000462 4180                   MULR        R0,R1
    00000464 6013                   MOV         R1,R0
    00000466 0256                   MOV.L       R5,@(R0,R2); MotWait[].tim
           tskmotwait        508    
           tskmotwait        509      return(result);
    00000468 7F08                   ADD         #8,R15
    0000046A 4F06                   LDS.L       @R15+,MACH
    0000046C 4F16                   LDS.L       @R15+,MACL
    0000046E 4F26                   LDS.L       @R15+,PR
           tskmotwait        510    }
    00000470 000B                   RTS
    00000472 E000                   MOV         #0,R0      ; H'00000000
    00000474              L96:
    00000474 <00000000>             .DATA.L     __$MotWait
    00000478 <00000000>             .DATA.L     _memcpy
    0000047C <00000000>             .DATA.L     __$inf2_dbg
    00000480 <00000000>             .DATA.L     _motor_POWER
    00000484 <00000000>             .DATA.L     _mbx_send
    00000488 <00000000>             .DATA.L     __$WaitTime
    0000048C 66666667               .DATA.L     H'66666667
    00000490 <00000044>             .DATA.L     H'00000044+__$MotWait
C   00000000              L97:
    00000000 433A5C576F             .SDATA      "C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskmotwait.c"
             726B537061   
             63655C5175   
             69636B4765   
             6E655C536F   
             66745F4669   
             726D5C5175   
             69636B4765   
             6E655F5072   
             6F6A656374   
             5C74736B6D   
             6F74776169   
             742E63       
    0000003F 00                     .DATA.B     H'00
B   00000000              __$MotWait:                      ; static: __$MotWait
    00000000 00000004               .RES.L      152
    00000260              __$WaitTime:                     ; static: __$WaitTime
    00000260 00000004               .RES.L      361
    00000804              __$IntervalCounter:              ; static: __$IntervalCounter
    00000804 00000004               .RES.L      1
    00000808              __$inf2_dbg:                     ; static: __$inf2_dbg
    00000808 00000001               .RES.B      1
SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:37  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      510



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 00000494 Byte(s)
CONSTANT SECTION (C):                                 00000040 Byte(s)
DATA     SECTION (D):                                 00000000 Byte(s)
BSS      SECTION (B):                                 00000809 Byte(s)

TOTAL PROGRAM  SECTION: 00000494 Byte(s)
TOTAL CONSTANT SECTION: 00000040 Byte(s)
TOTAL DATA     SECTION: 00000000 Byte(s)
TOTAL BSS      SECTION: 00000809 Byte(s)

    TOTAL PROGRAM SIZE: 00000CDD Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            5
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            34



*** COMMAND PARAMETER ***

-subcommand=C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskmotwait.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-object="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskmotwait.obj"
-debug
-listfile="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskmotwait.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskmotwait.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
