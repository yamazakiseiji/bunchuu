SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:37  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskmotend.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           tskmotend.          1    /******************************************************************************
           tskmotend.          2    * モータ動作終了監視タスク                                                    *
           tskmotend.          3    *                                                                             *
           tskmotend.          4    * File name : tskmotend.c                                                     *
           tskmotend.          5    *                                                                             *
           tskmotend.          6    * Copyright (c) 2018 NICHIRYO Co., Ltd.                                       *
           tskmotend.          7    *                                                                             *
           tskmotend.          8    ******************************************************************************/
           tskmotend.          9    #include <kernel.h>
           tskmotend.         10    #include "sh7237.h"
           tskmotend.         11    #include "iodefine.h"
           tskmotend.         12    #include "define.h"
           tskmotend.         13    #include "datastruct.h"
           tskmotend.         14    #include "tskmotend.h"
           tskmotend.         15    #include "tskmotact.h"
           tskmotend.         16    #include "tskcmd.h"
           tskmotend.         17    #include "sub.h"
           tskmotend.         18    #include "mnet.h"
           tskmotend.         19    #include "tblchr.h"
           tskmotend.         20    #include "automachine.h"
           tskmotend.         21    
           tskmotend.         22    
           tskmotend.         23    //*************************************
           tskmotend.         24    // 内部関数
           tskmotend.         25    //*************************************
           tskmotend.         26    static  void MotEndInit();                                                // ウェイト要求処理
           tskmotend.         27    static  void MotEndInitSet( UB mm );                                  // 制御用データ初期値セット
           tskmotend.         28    static  void MotEndDlyTmo();                                          // ディレイタイムアウト監視
           tskmotend.         29    static  void MotEndChk();                                             // コマンド動作完了チェック
           tskmotend.         30    static  void MotEndMulti( UB mm );                                        // 
           tskmotend.         31    static  void MotEndSigle( UB mm );                                        // 
           tskmotend.         32    static  void MotEndProc   ( T_CMD_MSG* mrcv );                            // ウェイト要求処理
           tskmotend.         33    static  void CmdRcvMsg     ( T_CMD_MSG* mrcv );                           // メッセージ受信処理
           tskmotend.         34    static  ER   MotEndAnalyze( T_CMD_MSG* mrcv );                            // コマンドの解析
           tskmotend.         35    static  ER   MotEndDummy     ( T_CMD_MSG* mrcv );                     // 
           tskmotend.         36    static  ER   MotEndRequest   ( T_CMD_MSG* mrcv );                     // モータ動作前のウェイトリクエスト
           tskmotend.         37    static  ER   MotEndRequestW  ( T_CMD_MSG* mrcv );                     // モータ動作前のウェイトリクエスト
           tskmotend.         38    static  ER   MotEndPDELAY    ( T_CMD_MSG* mrcv );                     // PDELAY  パルスモータのパワー制御待ち時間設定
           tskmotend.         39    
           tskmotend.         40    
           tskmotend.         41    /***********************************************************************
           tskmotend.         42    * テーブル
           tskmotend.         43    ***********************************************************************/
           tskmotend.         44    
           tskmotend.         45    
           tskmotend.         46    
           tskmotend.         47    
           tskmotend.         48    //*************************************
           tskmotend.         49    // データ定義
           tskmotend.         50    //*************************************
           tskmotend.         51    static    ST_MOTWAIT          MotEnd[(DVMAX+1)];                          // ウェイト制御データ
           tskmotend.         52    static    ST_MOTOR_STATUS     sts;                                        // 
           tskmotend.         53    static    ST_MOTOR_STATUS     sts2;                                       // 
           tskmotend.         54    
           tskmotend.         55    
           tskmotend.         56    /******************************************************************************
           tskmotend.         57    * 
           tskmotend.         58    * [概要]  モータ動作終了監視タスク
           tskmotend.         59    * [引数]  
           tskmotend.         60    * [戻値]  
           tskmotend.         61    * 
           tskmotend.         62    ******************************************************************************/
           tskmotend.         63    TASK TskMotEnd( void )
P   00000000              _TskMotEnd:                      ; function: TskMotEnd
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
           tskmotend.         64    {
           tskmotend.         65      T_CMD_MSG*  msg;
           tskmotend.         66      ER          err;
           tskmotend.         67    
           tskmotend.         68      MotEndInit();
    00000002 B018                   BSR         __$MotEndInit
    00000004 0009                   NOP
    00000006 DE9C                   MOV.L       L95+2,R14  ; _v4_trcv_mbx
    00000008 DC9C                   MOV.L       L95+6,R12  ; L97
    0000000A DD9D                   MOV.L       L95+10,R13 ; _api_rel_mpf
    0000000C              L11:
           tskmotend.         69    
           tskmotend.         70      for( ;; )
           tskmotend.         71      {
           tskmotend.         72            // コマンド待ち
           tskmotend.         73            err = trcv_mbx( ID_MBX_MOTEND, (T_MSG**)&msg, DLY_10M );
    0000000C E60A                   MOV         #10,R6     ; H'0000000A
    0000000E 65F3                   MOV         R15,R5
    00000010 4E0B                   JSR         @R14
    00000012 6463                   MOV         R6,R4
           tskmotend.         74    
           tskmotend.         75          if( err == E_TMOUT )
    00000014 88CE                   CMP/EQ      #-50,R0
    00000016 8B05                   BF          L13
           tskmotend.         76          {
           tskmotend.         77              MotEndDlyTmo();
    00000018 B032                   BSR         __$MotEndDlyTmo
    0000001A 0009                   NOP
           tskmotend.         78              MotEndChk();
    0000001C B062                   BSR         __$MotEndChk
    0000001E 0009                   NOP
    00000020 AFF4                   BRA         L11
    00000022 0009                   NOP
    00000024              L13:
           tskmotend.         79              continue;
           tskmotend.         80          }
           tskmotend.         81          else
           tskmotend.         82          {
           tskmotend.         83              MotEndProc(msg);
    00000024 B11D                   BSR         __$MotEndProc
    00000026 64F2                   MOV.L       @R15,R4    ; msg
    00000028 67F2                   MOV.L       @R15,R7    ; msg
           tskmotend.         84          }
           tskmotend.         85          // メモリ解放
           tskmotend.         86          RelMpf( ID_MPF_MOTEND, (VP)msg );
    0000002A E609                   MOV         #9,R6      ; H'00000009
    0000002C E556                   MOV         #86,R5     ; H'00000056
    0000002E 4D0B                   JSR         @R13
    00000030 64C3                   MOV         R12,R4
    00000032 AFEB                   BRA         L11
    00000034 0009                   NOP
           tskmotend.         87      }
           tskmotend.         88    }
           tskmotend.         89    /******************************************************************************
           tskmotend.         90    * 
           tskmotend.         91    * [概要]  モータウェイト初期化
           tskmotend.         92    * [引数]  
           tskmotend.         93    * [戻値]  
           tskmotend.         94    * 
           tskmotend.         95    ******************************************************************************/
           tskmotend.         96    static void MotEndInit()
    00000036              __$MotEndInit:                   ; function: __$MotEndInit
                                                           ; frame size=12
    00000036 4DF0                   MOVMU.L     R13,@-R15
    00000038 E500                   MOV         #0,R5      ; H'00000000
           tskmotend.         97    {
           tskmotend.         98      UB Loop;
           tskmotend.         99    
           tskmotend.        100      memset( &MotEnd, CLR, sizeof( MotEnd ) );
    0000003A D492                   MOV.L       L95+14,R4  ; __$MotEnd
    0000003C 06000260               MOVI20      #608,R6    ; H'00000260
    00000040 D291                   MOV.L       L95+18,R2  ; _memset
    00000042 420B                   JSR         @R2
    00000044 EE01                   MOV         #1,R14     ; H'00000001
    00000046 ED07                   MOV         #7,R13     ; H'00000007
    00000048              L16:
           tskmotend.        101    
           tskmotend.        102      for( Loop = DVMIN; Loop <= DVMAX; Loop++ )
           tskmotend.        103      {
           tskmotend.        104          MotEndInitSet(Loop);
    00000048 64E3                   MOV         R14,R4
    0000004A B004                   BSR         __$MotEndInitSet
    0000004C 7E01                   ADD         #1,R14
    0000004E 3ED7                   CMP/GT      R13,R14
    00000050 8BFA                   BF          L16
    00000052 4DF4                   MOVMU.L     @R15+,R13
           tskmotend.        105    //        MotEnd[Loop].req     = DEFDAT;                                  // default
           tskmotend.        106    //        MotEnd[Loop].motpare = DEFDAT;                                  // default
           tskmotend.        107    //        MotEnd[Loop].prid1   = DEFDAT;                                  // default      
           tskmotend.        108    //        MotEnd[Loop].bcid    = DEFDAT;                                  // default      
           tskmotend.        109    //        MotEnd[Loop].msgid   = DEFDAT;                                  // default
           tskmotend.        110    //        MotEnd[Loop].inf     = DEFDAT;                                  // default
           tskmotend.        111    //        MotEnd[Loop].inf2    = DEFDAT;                                  // default
           tskmotend.        112    //        MotEnd[Loop].tim     = 10/DLY_10M;                              // default
           tskmotend.        113    //        memset( &MotEnd[Loop].msgdat[0], CLR, CMD_BUFSIZ );
           tskmotend.        114      }
           tskmotend.        115    }
    00000054 006B                   RTS/N
           tskmotend.        116    
           tskmotend.        117    /******************************************************************************
           tskmotend.        118    * 
           tskmotend.        119    * [概要]  制御用データ初期値セット
           tskmotend.        120    * [引数]  モータ番号
           tskmotend.        121    * [戻値]  −
           tskmotend.        122    * 
           tskmotend.        123    ******************************************************************************/
           tskmotend.        124    static void MotEndInitSet( UB mm )
    00000056              __$MotEndInitSet:                ; function: __$MotEndInitSet
                                                           ; frame size=0
           tskmotend.        125    {
           tskmotend.        126      MotEnd[mm].req     = DEFDAT;                                    // default
    00000056 644C                   EXTU.B      R4,R4
    00000058 E04C                   MOV         #76,R0     ; H'0000004C
    0000005A 4480                   MULR        R0,R4
    0000005C D189                   MOV.L       L95+14,R1  ; __$MotEnd
    0000005E E0FF                   MOV         #-1,R0     ; H'FFFFFFFF
           tskmotend.        127      MotEnd[mm].motpare = DEFDAT;                                    // default
           tskmotend.        128      MotEnd[mm].prid1   = DEFDAT;                                    // default      
           tskmotend.        129      MotEnd[mm].bcid    = DEFDAT;                                    // default      
           tskmotend.        130      MotEnd[mm].msgid   = DEFDAT;                                    // default
           tskmotend.        131      MotEnd[mm].inf     = DEFDAT;                                    // default
           tskmotend.        132      MotEnd[mm].inf2    = DEFDAT;                                    // default
           tskmotend.        133      MotEnd[mm].tim     = 10/DLY_10M;                                // default
    00000060 E201                   MOV         #1,R2      ; H'00000001
    00000062 E63C                   MOV         #60,R6     ; H'0000003C
    00000064 E500                   MOV         #0,R5      ; H'00000000
    00000066 341C                   ADD         R1,R4
    00000068 2400                   MOV.B       R0,@R4     ; MotEnd[].req
    0000006A 8045                   MOV.B       R0,@(5,R4) ; MotEnd[].motpare
    0000006C 8042                   MOV.B       R0,@(2,R4) ; MotEnd[].prid1
    0000006E 8043                   MOV.B       R0,@(3,R4) ; MotEnd[].bcid
    00000070 8044                   MOV.B       R0,@(4,R4) ; MotEnd[].msgid
    00000072 8046                   MOV.B       R0,@(6,R4) ; MotEnd[].inf
    00000074 8047                   MOV.B       R0,@(7,R4) ; MotEnd[].inf2
    00000076 34212011               MOV.L       R2,@(68:12,R4); MotEnd[].tim
           tskmotend.        134      memset( &MotEnd[mm].msgdat[0], CLR, CMD_BUFSIZ );
    0000007A D283                   MOV.L       L95+18,R2  ; _memset
    0000007C 422B                   JMP         @R2
    0000007E 7408                   ADD         #8,R4
           tskmotend.        135    }
           tskmotend.        136    
           tskmotend.        137    /***********************************************************************
           tskmotend.        138    * 
           tskmotend.        139    * [概要]  ディレイタイムアウト監視
           tskmotend.        140    * [引数]  −
           tskmotend.        141    * [戻値]  −
           tskmotend.        142    * 
           tskmotend.        143    ***********************************************************************/
           tskmotend.        144    static void MotEndDlyTmo()
    00000080              __$MotEndDlyTmo:                 ; function: __$MotEndDlyTmo
                                                           ; frame size=20
    00000080 4BF0                   MOVMU.L     R11,@-R15
           tskmotend.        145    {
           tskmotend.        146      UB Loop;
           tskmotend.        147      
           tskmotend.        148      for( Loop = DVMIN; Loop <= DVMAX; Loop++  )
    00000082 ED01                   MOV         #1,R13     ; H'00000001
    00000084 EBEE                   MOV         #-18,R11   ; H'FFFFFFEE
    00000086 DE81                   MOV.L       L95+22,R14 ; H'0000004C+__$MotEnd
    00000088 EC07                   MOV         #7,R12     ; H'00000007
    0000008A              L24:
           tskmotend.        149      {
           tskmotend.        150          switch( MotEnd[Loop].req )
    0000008A 30E18000               MOVU.B      @(0,R14),R0; MotEnd[].req
    0000008E 8801                   CMP/EQ      #1,R0
    00000090 8903                   BT          L26
    00000092 8802                   CMP/EQ      #2,R0
    00000094 8919                   BT          L27
    00000096 A01F                   BRA         L28
    00000098 0009                   NOP
    0000009A              L26:
           tskmotend.        151          {
           tskmotend.        152          case REQRDY:
           tskmotend.        153              // Busy有→Busy解除
           tskmotend.        154              if( motor_IsBusy(Loop) == FALSE )
    0000009A D27D                   MOV.L       L95+26,R2  ; _motor_IsBusy
    0000009C 420B                   JSR         @R2
    0000009E 64D3                   MOV         R13,R4
    000000A0 2008                   TST         R0,R0
    000000A2 8B19                   BF          L28
           tskmotend.        155              {
           tskmotend.        156                  // 励磁OFFするか判定
           tskmotend.        157                  if( GetPowerSts( Loop ) == FALSE )
    000000A4 D27B                   MOV.L       L95+30,R2  ; _GetPowerSts
    000000A6 420B                   JSR         @R2
    000000A8 64D3                   MOV         R13,R4
    000000AA 2008                   TST         R0,R0
    000000AC 8B13                   BF          L31
           tskmotend.        158                  {
           tskmotend.        159                      // WAITなし
           tskmotend.        160                      if( MotEnd[Loop].tim == 0 )
    000000AE 32E16011               MOV.L       @(68:12,R14),R2; MotEnd[].tim
    000000B2 2228                   TST         R2,R2
    000000B4 8B01                   BF          L33
           tskmotend.        161                      {
           tskmotend.        162                          MotEnd[Loop].req = REQEND;                      // 終了動作
    000000B6 A002                   BRA         L34
    000000B8 2EB0                   MOV.B       R11,@R14   ; MotEnd[].req
    000000BA              L33:
           tskmotend.        163                      }
           tskmotend.        164                      else
           tskmotend.        165                      {
           tskmotend.        166                          MotEnd[Loop].req = REQACT;                      // ディレイ動作
    000000BA E102                   MOV         #2,R1      ; H'00000002
    000000BC 2E10                   MOV.B       R1,@R14    ; MotEnd[].req
    000000BE              L34:
    000000BE E500                   MOV         #0,R5      ; H'00000000
           tskmotend.        167                      }
           tskmotend.        168                      motor_POWER( Loop, CLR );
    000000C0 D275                   MOV.L       L95+34,R2  ; _motor_POWER
    000000C2 420B                   JSR         @R2
    000000C4 64D3                   MOV         R13,R4
    000000C6 A007                   BRA         L28
    000000C8 0009                   NOP
    000000CA              L27:
           tskmotend.        169                  }
           tskmotend.        170                  else
           tskmotend.        171                  {
           tskmotend.        172                      MotEnd[Loop].req = REQEND;                          // ディレイ要求終了
           tskmotend.        173                  }
           tskmotend.        174              }
           tskmotend.        175              else
           tskmotend.        176              {
           tskmotend.        177              }
           tskmotend.        178              break;
           tskmotend.        179    
           tskmotend.        180          case REQACT:
           tskmotend.        181              MotEnd[Loop].cnt --;                                        // デクリメント
    000000CA E048                   MOV         #72,R0     ; H'00000048
    000000CC 02EE                   MOV.L       @(R0,R14),R2; MotEnd[].cnt
    000000CE 72FF                   ADD         #-1,R2
           tskmotend.        182    
           tskmotend.        183              if( MotEnd[Loop].cnt <= 0 )
    000000D0 4215                   CMP/PL      R2
    000000D2 8D01                   BT/S        L28
    000000D4 0E26                   MOV.L       R2,@(R0,R14); MotEnd[].cnt
    000000D6              L31:
    000000D6 2EB0                   MOV.B       R11,@R14   ; MotEnd[].req
    000000D8              L28:
    000000D8 7D01                   ADD         #1,R13
    000000DA 3DC7                   CMP/GT      R12,R13
    000000DC 8FD5                   BF/S        L24
    000000DE 7E4C                   ADD         #76,R14
    000000E0 4BF4                   MOVMU.L     @R15+,R11
           tskmotend.        184              {
           tskmotend.        185                  MotEnd[Loop].req = REQEND;                              // ディレイ要求終了
           tskmotend.        186              }
           tskmotend.        187              break;
           tskmotend.        188    
           tskmotend.        189          default:
           tskmotend.        190              break;
           tskmotend.        191          }
           tskmotend.        192      }
           tskmotend.        193    }
    000000E2 006B                   RTS/N
           tskmotend.        194    /***********************************************************************
           tskmotend.        195    * 
           tskmotend.        196    * [概要]  コマンド動作完了チェック
           tskmotend.        197    * [引数]  −
           tskmotend.        198    * [戻値]  −
           tskmotend.        199    * 
           tskmotend.        200    ***********************************************************************/
           tskmotend.        201    static void MotEndChk()
    000000E4              __$MotEndChk:                    ; function: __$MotEndChk
                                                           ; frame size=16
    000000E4 4CF0                   MOVMU.L     R12,@-R15
           tskmotend.        202    {
           tskmotend.        203      UB Loop;
           tskmotend.        204      
           tskmotend.        205      for( Loop = DVMIN; Loop <= DVMAX; Loop++  )
    000000E6 ED01                   MOV         #1,R13     ; H'00000001
    000000E8 EC07                   MOV         #7,R12     ; H'00000007
    000000EA DE6C                   MOV.L       L95+38,R14 ; H'00000050+__$MotEnd
    000000EC              L37:
           tskmotend.        206      {
           tskmotend.        207          if( MotEnd[Loop].msgid == ID_MSG_MAP )
    000000EC 60E0                   MOV.B       @R14,R0    ; MotEnd[].msgid
    000000EE 880D                   CMP/EQ      #13,R0
    000000F0 8F04                   BF/S        L39
    000000F2 64D3                   MOV         R13,R4
           tskmotend.        208          {
           tskmotend.        209              MotEndMulti( Loop );
    000000F4 B069                   BSR         __$MotEndMulti
    000000F6 0009                   NOP
    000000F8 A002                   BRA         L40
    000000FA 0009                   NOP
    000000FC              L39:
           tskmotend.        210          }
           tskmotend.        211          else
           tskmotend.        212          {
           tskmotend.        213              MotEndSigle(Loop);
    000000FC B006                   BSR         __$MotEndSigle
    000000FE 0009                   NOP
    00000100              L40:
    00000100 7D01                   ADD         #1,R13
    00000102 3DC7                   CMP/GT      R12,R13
    00000104 8FF2                   BF/S        L37
    00000106 7E4C                   ADD         #76,R14
    00000108 4CF4                   MOVMU.L     @R15+,R12
           tskmotend.        214          }
           tskmotend.        215      }
           tskmotend.        216    }
    0000010A 006B                   RTS/N
           tskmotend.        217    /***********************************************************************
           tskmotend.        218    * 
           tskmotend.        219    * [概要]  コマンド動作完了後のレスポンス処理（シングル駆動）
           tskmotend.        220    * [引数]  mm:モータ
           tskmotend.        221    * [戻値]  −
           tskmotend.        222    * 
           tskmotend.        223    ***********************************************************************/
           tskmotend.        224    static void MotEndSigle( UB mm )
    0000010C              __$MotEndSigle:                  ; function: __$MotEndSigle
                                                           ; frame size=336
    0000010C 4DF0                   MOVMU.L     R13,@-R15
    0000010E 03F0FEE4               MOVI20      #-284,R3   ; H'FFFFFEE4
    00000112 3F3C                   ADD         R3,R15
           tskmotend.        225    {
           tskmotend.        226      ER  result = E_SUCCESS;
           tskmotend.        227      ST_CNTLDATA         msgdat;                                     // メッセージデータ
           tskmotend.        228    
           tskmotend.        229      // ディレイ終了したか
           tskmotend.        230      if( MotEnd[mm].req == REQEND )
    00000114 6E4C                   EXTU.B      R4,R14
    00000116 E04C                   MOV         #76,R0     ; H'0000004C
    00000118 6DE3                   MOV         R14,R13
    0000011A E5EE                   MOV         #-18,R5    ; H'FFFFFFEE
    0000011C 4D80                   MULR        R0,R13
    0000011E D659                   MOV.L       L95+14,R6  ; __$MotEnd
    00000120 3D6C                   ADD         R6,R13
    00000122 62D0                   MOV.B       @R13,R2    ; MotEnd[].req
    00000124 3250                   CMP/EQ      R5,R2
    00000126 8B4B                   BF          L44
    00000128 E618                   MOV         #24,R6     ; H'00000018
           tskmotend.        231      {
           tskmotend.        232          memset( &sts,   CLR,  sizeof( ST_MOTOR_STATUS ) );
    0000012A D45D                   MOV.L       L95+42,R4  ; __$sts
    0000012C D156                   MOV.L       L95+18,R1  ; _memset
    0000012E 410B                   JSR         @R1
    00000130 E500                   MOV         #0,R5      ; H'00000000
           tskmotend.        233    
           tskmotend.        234          // 状態取得
           tskmotend.        235          result = motor_STATUS( mm, &sts );
    00000132 D55B                   MOV.L       L95+42,R5  ; __$sts
    00000134 D65B                   MOV.L       L95+46,R6  ; _motor_STATUS
    00000136 460B                   JSR         @R6
    00000138 64E3                   MOV         R14,R4
           tskmotend.        236    
           tskmotend.        237          // リミット確認
           tskmotend.        238          if(
    0000013A 32D18004               MOVU.B      @(4,R13),R2; MotEnd[].msgid
    0000013E 6703                   MOV         R0,R7
    00000140 6023                   MOV         R2,R0
    00000142 8809                   CMP/EQ      #9,R0
    00000144 8903                   BT          L46
    00000146 8811                   CMP/EQ      #17,R0
    00000148 8901                   BT          L46
    0000014A 880D                   CMP/EQ      #13,R0
    0000014C 8B0A                   BF          L48
    0000014E              L46:
           tskmotend.        239              ( MotEnd[mm].msgid == ID_MSG_ABSMV )||
           tskmotend.        240              ( MotEnd[mm].msgid == ID_MSG_RELMV )||
           tskmotend.        241              ( MotEnd[mm].msgid == ID_MSG_MAP   ) )
           tskmotend.        242          {
           tskmotend.        243              // リミットか？
           tskmotend.        244              if(( sts.cw_limit )||( sts.ccw_limit ))
    0000014E D554                   MOV.L       L95+42,R5  ; __$sts
    00000150 5654                   MOV.L       @(16,R5),R6; sts.cw_limit
    00000152 2668                   TST         R6,R6
    00000154 8B02                   BF          L50
    00000156 5655                   MOV.L       @(20,R5),R6; sts.ccw_limit
    00000158 2668                   TST         R6,R6
    0000015A 8903                   BT          L48
    0000015C              L50:
    0000015C 05000340               MOVI20      #832,R5    ; H'00000340
           tskmotend.        245              {
           tskmotend.        246                  result = ( E_LMT_ERR | mm );
    00000160 67E3                   MOV         R14,R7
    00000162 275B                   OR          R5,R7
    00000164              L48:
           tskmotend.        247              }
           tskmotend.        248          }
           tskmotend.        249          
           tskmotend.        250          // 応答メッセージ作成
           tskmotend.        251          CmdMakeResponse(    &msgdat,
           tskmotend.        252                              PARAM7,                                     // パラメータ数
           tskmotend.        253                              STRTBL_MSG[MotEnd[mm].msgid],               // コマンド文字列
           tskmotend.        254                              result,                                     // エラーコード
           tskmotend.        255    
           tskmotend.        256                              (INT)mm,                                    // モータ１番号
           tskmotend.        257                              sts.pos,                                    // パルスカウント１
           tskmotend.        258                              sts.enc,                                    // エンコーダ１
           tskmotend.        259                              sts.cw_limit,                               // CWリミットセンサ(0:OFF,1:ON)
           tskmotend.        260                              sts.ccw_limit,                              // CCWリミットセンサ(0:OFF,1:ON)
           tskmotend.        261    
           tskmotend.        262                              0,                                          // モータ２番号
           tskmotend.        263                              0,                                          // パルスカウント２
           tskmotend.        264                              0,                                          // エンコーダ２
           tskmotend.        265                              0,                                          // CWリミットセンサ(0:OFF,1:ON)
           tskmotend.        266                              0                                           // CCWリミットセンサ(0:OFF,1:ON)
           tskmotend.        267                          );
    00000164 E400                   MOV         #0,R4      ; H'00000000
    00000166 2F46                   MOV.L       R4,@-R15
    00000168 2F46                   MOV.L       R4,@-R15
    0000016A 2F46                   MOV.L       R4,@-R15
    0000016C 2F46                   MOV.L       R4,@-R15
    0000016E 2F46                   MOV.L       R4,@-R15
    00000170 D14B                   MOV.L       L95+42,R1  ; __$sts
    00000172 5515                   MOV.L       @(20,R1),R5; sts.ccw_limit
    00000174 2F56                   MOV.L       R5,@-R15
    00000176 5414                   MOV.L       @(16,R1),R4; sts.cw_limit
    00000178 2F46                   MOV.L       R4,@-R15
    0000017A 5511                   MOV.L       @(4,R1),R5 ; sts.enc
    0000017C 2F56                   MOV.L       R5,@-R15
    0000017E 6612                   MOV.L       @R1,R6     ; sts.pos
    00000180 2F66                   MOV.L       R6,@-R15
    00000182 2FE6                   MOV.L       R14,@-R15
    00000184 4208                   SHLL2       R2
    00000186 D148                   MOV.L       L95+50,R1  ; _STRTBL_MSG
    00000188 6023                   MOV         R2,R0
    0000018A 061E                   MOV.L       @(R0,R1),R6; STRTBL_MSG[]
    0000018C 64F3                   MOV         R15,R4
    0000018E 7428                   ADD         #40,R4
    00000190 D146                   MOV.L       L95+54,R1  ; _CmdMakeResponse
    00000192 410B                   JSR         @R1
    00000194 E507                   MOV         #7,R5      ; H'00000007
    00000196 7F28                   ADD         #40,R15
           tskmotend.        268    
           tskmotend.        269          // 応答メッセージ送信
           tskmotend.        270          CmdEndResponse  (
           tskmotend.        271                              ID_TSK_MOTEND,                              // ﾀｽｸID
           tskmotend.        272                              MotEnd[mm].prid1,                           // PROCID
           tskmotend.        273                              MotEnd[mm].bcid,                            // BCID
           tskmotend.        274                              MotEnd[mm].msgid,                           // ﾒｯｾｰｼﾞID
           tskmotend.        275                              MotEnd[mm].inf,                             // 情報1
           tskmotend.        276                              MotEnd[mm].inf2,                            // 情報2
           tskmotend.        277                              &msgdat                                     // DATA
           tskmotend.        278                          );
    00000198 67F3                   MOV         R15,R7
    0000019A 2F76                   MOV.L       R7,@-R15
    0000019C 30D18007               MOVU.B      @(7,R13),R0; MotEnd[].inf2
    000001A0 2F06                   MOV.L       R0,@-R15
    000001A2 30D18006               MOVU.B      @(6,R13),R0; MotEnd[].inf
    000001A6 2F06                   MOV.L       R0,@-R15
    000001A8 E40A                   MOV         #10,R4     ; H'0000000A
    000001AA 84D4                   MOV.B       @(4,R13),R0; MotEnd[].msgid
    000001AC 6703                   MOV         R0,R7
    000001AE 84D3                   MOV.B       @(3,R13),R0; MotEnd[].bcid
    000001B0 6603                   MOV         R0,R6
    000001B2 84D2                   MOV.B       @(2,R13),R0; MotEnd[].prid1
    000001B4 DD3E                   MOV.L       L95+58,R13 ; _CmdEndResponse
    000001B6 4D0B                   JSR         @R13
    000001B8 6503                   MOV         R0,R5
    000001BA 7F0C                   ADD         #12,R15
           tskmotend.        279          
           tskmotend.        280          MotEndInitSet(mm);
    000001BC BF4B                   BSR         __$MotEndInitSet
    000001BE 64E3                   MOV         R14,R4
    000001C0              L44:
    000001C0 0300011C               MOVI20      #284,R3    ; H'0000011C
    000001C4 3F3C                   ADD         R3,R15
    000001C6 4DF4                   MOVMU.L     @R15+,R13
           tskmotend.        281      }
           tskmotend.        282    }
    000001C8 006B                   RTS/N
           tskmotend.        283    /***********************************************************************
           tskmotend.        284    * 
           tskmotend.        285    * [概要]  コマンド動作完了後のレスポンス処理（マルチ駆動）
           tskmotend.        286    * [引数]  mm:モータ
           tskmotend.        287    * [戻値]  −
           tskmotend.        288    * 
           tskmotend.        289    ***********************************************************************/
           tskmotend.        290    static void MotEndMulti( UB mm )
    000001CA              __$MotEndMulti:                  ; function: __$MotEndMulti
                                                           ; frame size=336
    000001CA 4DF0                   MOVMU.L     R13,@-R15
    000001CC 03F0FEE4               MOVI20      #-284,R3   ; H'FFFFFEE4
    000001D0 3F3C                   ADD         R3,R15
           tskmotend.        291    {
           tskmotend.        292      ER  result = E_SUCCESS;
           tskmotend.        293      ST_CNTLDATA         msgdat;                                     // メッセージデータ
           tskmotend.        294    
           tskmotend.        295      // ディレイ終了したか
           tskmotend.        296      if(
    000001D2 6E4C                   EXTU.B      R4,R14
    000001D4 E04C                   MOV         #76,R0     ; H'0000004C
    000001D6 6DE3                   MOV         R14,R13
    000001D8 E5EE                   MOV         #-18,R5    ; H'FFFFFFEE
    000001DA 4D80                   MULR        R0,R13
    000001DC D629                   MOV.L       L95+14,R6  ; __$MotEnd
    000001DE 3D6C                   ADD         R6,R13
    000001E0 62D0                   MOV.B       @R13,R2    ; MotEnd[].req
    000001E2 3250                   CMP/EQ      R5,R2
    000001E4 8B38                   BF          L53
    000001E6 E618                   MOV         #24,R6     ; H'00000018
           tskmotend.        297          ( MotEnd[mm].req == REQEND )
           tskmotend.        298      )
           tskmotend.        299      {
           tskmotend.        300          memset( &sts,   CLR,  sizeof( ST_MOTOR_STATUS ) );
    000001E8 D42D                   MOV.L       L95+42,R4  ; __$sts
    000001EA D127                   MOV.L       L95+18,R1  ; _memset
    000001EC 410B                   JSR         @R1
    000001EE E500                   MOV         #0,R5      ; H'00000000
           tskmotend.        301    
           tskmotend.        302          // 状態取得
           tskmotend.        303          result = motor_STATUS( mm, &sts );
    000001F0 D52B                   MOV.L       L95+42,R5  ; __$sts
    000001F2 D62C                   MOV.L       L95+46,R6  ; _motor_STATUS
    000001F4 460B                   JSR         @R6
    000001F6 64E3                   MOV         R14,R4
           tskmotend.        304    
           tskmotend.        305          // 応答メッセージ作成
           tskmotend.        306          CmdMakeResponse(    &msgdat,
           tskmotend.        307                              PARAM7,                                     // パラメータ数
           tskmotend.        308                              STRTBL_MSG[MotEnd[mm].msgid],               // コマンド文字列
           tskmotend.        309                              result,                                     // エラーコード
           tskmotend.        310    
           tskmotend.        311                              (INT)mm,                                    // モータ１番号
           tskmotend.        312                              sts.pos,                                    // パルスカウント１
           tskmotend.        313                              sts.enc,                                    // エンコーダ１
           tskmotend.        314                              sts.cw_limit,                               // CWリミットセンサ(0:OFF,1:ON)
           tskmotend.        315                              sts.ccw_limit,                              // CCWリミットセンサ(0:OFF,1:ON)
           tskmotend.        316    
           tskmotend.        317                              0,                                          // モータ２番号
           tskmotend.        318                              0,                                          // パルスカウント２
           tskmotend.        319                              0,                                          // エンコーダ２
           tskmotend.        320                              0,                                          // CWリミットセンサ(0:OFF,1:ON)
           tskmotend.        321                              0                                           // CCWリミットセンサ(0:OFF,1:ON)
           tskmotend.        322                          );
    000001F8 E100                   MOV         #0,R1      ; H'00000000
    000001FA 6703                   MOV         R0,R7
    000001FC 2F16                   MOV.L       R1,@-R15
    000001FE 2F16                   MOV.L       R1,@-R15
    00000200 2F16                   MOV.L       R1,@-R15
    00000202 2F16                   MOV.L       R1,@-R15
    00000204 2F16                   MOV.L       R1,@-R15
    00000206 D226                   MOV.L       L95+42,R2  ; __$sts
    00000208 5425                   MOV.L       @(20,R2),R4; sts.ccw_limit
    0000020A 2F46                   MOV.L       R4,@-R15
    0000020C 5524                   MOV.L       @(16,R2),R5; sts.cw_limit
    0000020E 2F56                   MOV.L       R5,@-R15
    00000210 5121                   MOV.L       @(4,R2),R1 ; sts.enc
    00000212 2F16                   MOV.L       R1,@-R15
    00000214 6122                   MOV.L       @R2,R1     ; sts.pos
    00000216 2F16                   MOV.L       R1,@-R15
    00000218 2FE6                   MOV.L       R14,@-R15
    0000021A E507                   MOV         #7,R5      ; H'00000007
    0000021C 30D18004               MOVU.B      @(4,R13),R0; MotEnd[].msgid
    00000220 D121                   MOV.L       L95+50,R1  ; _STRTBL_MSG
    00000222 4008                   SHLL2       R0
    00000224 061E                   MOV.L       @(R0,R1),R6; STRTBL_MSG[]
    00000226 64F3                   MOV         R15,R4
    00000228 D220                   MOV.L       L95+54,R2  ; _CmdMakeResponse
    0000022A 420B                   JSR         @R2
    0000022C 7428                   ADD         #40,R4
    0000022E 7F28                   ADD         #40,R15
           tskmotend.        323    
           tskmotend.        324          // 応答メッセージ送信
           tskmotend.        325          CmdEndResponse  (
           tskmotend.        326                              ID_TSK_MOTEND,
           tskmotend.        327                              MotEnd[mm].prid1,  
           tskmotend.        328                              MotEnd[mm].bcid,
           tskmotend.        329                              MotEnd[mm].msgid,
           tskmotend.        330    // 05/23                  mm,
           tskmotend.        331    // 05/23                  MotEnd[mm].motpare,
           tskmotend.        332                              MotEnd[mm].inf,                             // 情報1
           tskmotend.        333                              MotEnd[mm].inf2,                            // 情報2
           tskmotend.        334                              &msgdat
           tskmotend.        335                          );
    00000230 67F3                   MOV         R15,R7
    00000232 2F76                   MOV.L       R7,@-R15
    00000234 30D18007               MOVU.B      @(7,R13),R0; MotEnd[].inf2
    00000238 2F06                   MOV.L       R0,@-R15
    0000023A 30D18006               MOVU.B      @(6,R13),R0; MotEnd[].inf
    0000023E 2F06                   MOV.L       R0,@-R15
    00000240 E40A                   MOV         #10,R4     ; H'0000000A
    00000242 84D4                   MOV.B       @(4,R13),R0; MotEnd[].msgid
    00000244 6703                   MOV         R0,R7
    00000246 84D3                   MOV.B       @(3,R13),R0; MotEnd[].bcid
    00000248 6603                   MOV         R0,R6
    0000024A 84D2                   MOV.B       @(2,R13),R0; MotEnd[].prid1
    0000024C DD18                   MOV.L       L95+58,R13 ; _CmdEndResponse
    0000024E 4D0B                   JSR         @R13
    00000250 6503                   MOV         R0,R5
    00000252 7F0C                   ADD         #12,R15
           tskmotend.        336          
           tskmotend.        337          MotEndInitSet(mm);
    00000254 BEFF                   BSR         __$MotEndInitSet
    00000256 64E3                   MOV         R14,R4
    00000258              L53:
    00000258 0300011C               MOVI20      #284,R3    ; H'0000011C
    0000025C 3F3C                   ADD         R3,R15
    0000025E 4DF4                   MOVMU.L     @R15+,R13
           tskmotend.        338      }
           tskmotend.        339    }
    00000260 006B                   RTS/N
           tskmotend.        340    
           tskmotend.        341    /***********************************************************************
           tskmotend.        342    * 
           tskmotend.        343    * [概要]  ウェイト要求処理
           tskmotend.        344    * [引数]  メッセージデータ
           tskmotend.        345    * [戻値]  −
           tskmotend.        346    * 
           tskmotend.        347    ***********************************************************************/
           tskmotend.        348    static void MotEndProc(T_CMD_MSG* mrcv)
    00000262              __$MotEndProc:                   ; function: __$MotEndProc
                                                           ; frame size=0
           tskmotend.        349    {
           tskmotend.        350      switch( mrcv->msgdata.tskid )
    00000262 5045                   MOV.L       @(20,R4),R0; (mrcv)->tskid
    00000264 8805                   CMP/EQ      #5,R0
    00000266 8903                   BT          L66
    00000268 8809                   CMP/EQ      #9,R0
    0000026A 8901                   BT          L66
    0000026C 880B                   CMP/EQ      #11,R0
    0000026E 8B01                   BF          L68
    00000270              L66:
           tskmotend.        351      {
           tskmotend.        352      case ID_TSK_CMD:    // TSK_CMD->
           tskmotend.        353      case ID_TSK_MOTACT: // TSK_MOTACT->
           tskmotend.        354      case ID_TSK_INT:    // TSK_INT->
           tskmotend.        355          CmdRcvMsg(mrcv);
    00000270 A020                   BRA         __$CmdRcvMsg
    00000272 0009                   NOP
    00000274              L68:
    00000274 006B                   RTS/N
    00000276              L95:
    00000276 00000002               .RES.W      1
    00000278 <00000000>             .DATA.L     _v4_trcv_mbx
    0000027C <00000000>             .DATA.L     L97
    00000280 <00000000>             .DATA.L     _api_rel_mpf
    00000284 <00000000>             .DATA.L     __$MotEnd
    00000288 <00000000>             .DATA.L     _memset
    0000028C <0000004C>             .DATA.L     H'0000004C+__$MotEnd
    00000290 <00000000>             .DATA.L     _motor_IsBusy
    00000294 <00000000>             .DATA.L     _GetPowerSts
    00000298 <00000000>             .DATA.L     _motor_POWER
    0000029C <00000050>             .DATA.L     H'00000050+__$MotEnd
    000002A0 <00000000>             .DATA.L     __$sts
    000002A4 <00000000>             .DATA.L     _motor_STATUS
    000002A8 <00000000>             .DATA.L     _STRTBL_MSG
    000002AC <00000000>             .DATA.L     _CmdMakeResponse
    000002B0 <00000000>             .DATA.L     _CmdEndResponse
           tskmotend.        356          break;
           tskmotend.        357      case ID_TSK_RX0:    // TSK_RX0->
           tskmotend.        358      case ID_TSK_TX0:    // TSK_TX0->
           tskmotend.        359      case ID_TSK_RXEX:   // TSK_RX2->
           tskmotend.        360      case ID_TSK_TXEX:
           tskmotend.        361      case ID_TSK_EEP:    // TSK_EEP->
           tskmotend.        362      default:
           tskmotend.        363          break;
           tskmotend.        364      }
           tskmotend.        365    }
           tskmotend.        366    /***********************************************************************
           tskmotend.        367    * 
           tskmotend.        368    * [概要]  メッセージ受信処理
           tskmotend.        369    * [引数]  メッセージデータ
           tskmotend.        370    * [戻値]  −
           tskmotend.        371    * 
           tskmotend.        372    ***********************************************************************/
           tskmotend.        373    static void CmdRcvMsg( T_CMD_MSG* mrcv )
    000002B4              __$CmdRcvMsg:                    ; function: __$CmdRcvMsg
                                                           ; frame size=0
           tskmotend.        374    {
           tskmotend.        375      ER          err;
           tskmotend.        376    
           tskmotend.        377      err = MotEndAnalyze( mrcv );
           tskmotend.        378    }
           tskmotend.        379    /***********************************************************************
           tskmotend.        380    * 
           tskmotend.        381    * [概要]  コマンドの解析
           tskmotend.        382    * [引数]  data:コマンドリクエスト電文
           tskmotend.        383    * [戻値]  −
           tskmotend.        384    * 
           tskmotend.        385    ***********************************************************************/
           tskmotend.        386    static ER MotEndAnalyze( T_CMD_MSG* mrcv )
    000002B4              __$MotEndAnalyze:                ; function: __$MotEndAnalyze
                                                           ; frame size=4
    000002B4 4F22                   STS.L       PR,@-R15
           tskmotend.        387    {
           tskmotend.        388      ER          err = E_SUCCESS;
           tskmotend.        389      UB          msgid;
           tskmotend.        390    
           tskmotend.        391      // メッセージＩＤ取得
           tskmotend.        392      msgid = mrcv->msgdata.msgid;
           tskmotend.        393    
           tskmotend.        394      if( ( msgid >= ID_MSG_HELLO ) && ( msgid <= ID_MSG_BASE_CMD_MAX  ))
    000002B6 3041801B               MOVU.B      @(27,R4),R0; (mrcv)->msgid
    000002BA E22D                   MOV         #45,R2     ; H'0000002D
    000002BC 3027                   CMP/GT      R2,R0
    000002BE 8917                   BT          L82
           tskmotend.        395      {
           tskmotend.        396          switch( msgid )
    000002C0 8808                   CMP/EQ      #8,R0
    000002C2 890F                   BT          L84
    000002C4 8809                   CMP/EQ      #9,R0
    000002C6 890D                   BT          L84
    000002C8 880A                   CMP/EQ      #10,R0
    000002CA 890B                   BT          L84
    000002CC 880C                   CMP/EQ      #12,R0
    000002CE 8909                   BT          L84
    000002D0 880D                   CMP/EQ      #13,R0
    000002D2 8907                   BT          L84
    000002D4 8811                   CMP/EQ      #17,R0
    000002D6 8905                   BT          L84
    000002D8 8814                   CMP/EQ      #20,R0
    000002DA 8903                   BT          L84
    000002DC 880E                   CMP/EQ      #14,R0
    000002DE 8905                   BT          L91
    000002E0 A006                   BRA         L82
    000002E2 0009                   NOP
    000002E4              L84:
           tskmotend.        397          {
           tskmotend.        398              case ID_MSG_INT   :
           tskmotend.        399              case ID_MSG_ABSMV :
           tskmotend.        400              case ID_MSG_ABORT :
           tskmotend.        401              case ID_MSG_LIMIT :
           tskmotend.        402              case ID_MSG_MAP   :
           tskmotend.        403              case ID_MSG_RELMV :
           tskmotend.        404              case ID_MSG_STOP  :
           tskmotend.        405                  MotEndRequest( mrcv );
    000002E4 B007                   BSR         __$MotEndRequest
    000002E6 0009                   NOP
    000002E8 A002                   BRA         L82
    000002EA 0009                   NOP
    000002EC              L91:
           tskmotend.        406                  break;
           tskmotend.        407              case ID_MSG_PDELAY:
           tskmotend.        408                  MotEndPDELAY( mrcv );
    000002EC B033                   BSR         __$MotEndPDELAY
    000002EE 0009                   NOP
    000002F0              L82:
           tskmotend.        409                  break;
           tskmotend.        410              default:
           tskmotend.        411                  break;
           tskmotend.        412          }
           tskmotend.        413      }
           tskmotend.        414    
           tskmotend.        415      return( err );
    000002F0 4F26                   LDS.L       @R15+,PR
           tskmotend.        416    }
    000002F2 000B                   RTS
    000002F4 E000                   MOV         #0,R0      ; H'00000000
           tskmotend.        417    
           tskmotend.        418    /***********************************************************************
           tskmotend.        419    * 
           tskmotend.        420    * [概要]  ダミールーチン
           tskmotend.        421    * [引数]  msg:メッセージID、mm1:モータ、mm2:モータ、data:メッセージデータ
           tskmotend.        422    * [戻値]  エラーコード
           tskmotend.        423    * 
           tskmotend.        424    ***********************************************************************/
           tskmotend.        425    static ER MotEndDummy( T_CMD_MSG* mrcv )
           tskmotend.        426    {
           tskmotend.        427      memset( mrcv, CLR,  sizeof( T_CMD_MSG ) );
           tskmotend.        428      
           tskmotend.        429      // 必要であればエラー出力
           tskmotend.        430      return(E_SYS_FNCCAL);
           tskmotend.        431    }
           tskmotend.        432    /***********************************************************************
           tskmotend.        433    * 
           tskmotend.        434    * [概要]  モータ動作前のウェイトリクエスト
           tskmotend.        435    * [引数]  msg:メッセージID、mm1:モータ、mm2:モータ、data:メッセージデータ
           tskmotend.        436    * [戻値]  エラーコード
           tskmotend.        437    * 
           tskmotend.        438    ***********************************************************************/
           tskmotend.        439    static ER MotEndRequest( T_CMD_MSG* mrcv )
    000002F6              __$MotEndRequest:                ; function: __$MotEndRequest
                                                           ; frame size=12
    000002F6 4DF0                   MOVMU.L     R13,@-R15
           tskmotend.        440    {
           tskmotend.        441      ER      result = E_SUCCESS;
           tskmotend.        442      UB      mm;
           tskmotend.        443      UB      mm2;
           tskmotend.        444    
           tskmotend.        445      // モータ取得
           tskmotend.        446      mm = mrcv->msgdata.inf;
    000002F8 3241801C               MOVU.B      @(28,R4),R2; (mrcv)->inf
           tskmotend.        447      mm2 = mrcv->msgdata.inf2;
           tskmotend.        448    
           tskmotend.        449      MotEnd[mm].prid1 = mrcv->msgdata.prid1;                         // procidセット
    000002FC E04C                   MOV         #76,R0     ; H'0000004C
    000002FE E63C                   MOV         #60,R6     ; H'0000003C
    00000300 6E23                   MOV         R2,R14
    00000302 4E80                   MULR        R0,R14
    00000304 D124                   MOV.L       L96,R1     ; __$MotEnd
    00000306 30414018               MOV.B       @(24:12,R4),R0; (mrcv)->prid1
    0000030A 3D41401D               MOV.B       @(29:12,R4),R13; (mrcv)->inf2
    0000030E 3E1C                   ADD         R1,R14
    00000310 80E2                   MOV.B       R0,@(2,R14); MotEnd[].prid1
           tskmotend.        450      MotEnd[mm].bcid  = mrcv->msgdata.bcid;                          // BCIDセット
    00000312 3041401A               MOV.B       @(26:12,R4),R0; (mrcv)->bcid
    00000316 80E3                   MOV.B       R0,@(3,R14); MotEnd[].bcid
           tskmotend.        451      MotEnd[mm].msgid = mrcv->msgdata.msgid;                         // メッセージＩＤセット
    00000318 3041401B               MOV.B       @(27:12,R4),R0; (mrcv)->msgid
           tskmotend.        452      MotEnd[mm].inf   = mrcv->msgdata.inf;                           // 
           tskmotend.        453      MotEnd[mm].inf2  = mrcv->msgdata.inf2;                          // 
           tskmotend.        454    
           tskmotend.        455      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
           tskmotend.        456      memcpy( &MotEnd[mm].msgdat[0], &mrcv->msgdata.data[0], CMD_BUFSIZ );
    0000031C 7424                   ADD         #36,R4
    0000031E 80E4                   MOV.B       R0,@(4,R14); MotEnd[].msgid
    00000320 6023                   MOV         R2,R0
    00000322 80E6                   MOV.B       R0,@(6,R14); MotEnd[].inf
    00000324 60D3                   MOV         R13,R0
    00000326 80E7                   MOV.B       R0,@(7,R14); MotEnd[].inf2
    00000328 6543                   MOV         R4,R5
    0000032A 64E3                   MOV         R14,R4
    0000032C D11B                   MOV.L       L96+4,R1   ; _memcpy
    0000032E 410B                   JSR         @R1
    00000330 7408                   ADD         #8,R4
           tskmotend.        457    
           tskmotend.        458      MotEnd[mm].req = REQRDY;                                            // モータ動作中のためディレイアクションレディ
           tskmotend.        459      MotEnd[mm].cnt = MotEnd[mm].tim;
    00000332 32E16011               MOV.L       @(68:12,R14),R2; MotEnd[].tim
    00000336 E701                   MOV         #1,R7      ; H'00000001
           tskmotend.        460    
           tskmotend.        461      // モータペアセット
           tskmotend.        462      MotEnd[mm].motpare = mm2;
    00000338 60D3                   MOV         R13,R0
    0000033A 2E70                   MOV.B       R7,@R14    ; MotEnd[].req
    0000033C 3E212012               MOV.L       R2,@(72:12,R14); MotEnd[].cnt
    00000340 80E5                   MOV.B       R0,@(5,R14); MotEnd[].motpare
           tskmotend.        463      
           tskmotend.        464      return(result);
    00000342 E000                   MOV         #0,R0      ; H'00000000
    00000344 4DF4                   MOVMU.L     @R15+,R13
           tskmotend.        465    }
    00000346 006B                   RTS/N
           tskmotend.        466    
           tskmotend.        467    /***********************************************************************
           tskmotend.        468    * 
           tskmotend.        469    * [概要]  モータウェイト状態取得
           tskmotend.        470    * [引数]  モータ番号
           tskmotend.        471    * [戻値]  −
           tskmotend.        472    * 
           tskmotend.        473    ***********************************************************************/
           tskmotend.        474    UB GetMotEnd( UB mot  )
    00000348              _GetMotEnd:                      ; function: GetMotEnd
                                                           ; frame size=0
    00000348 644C                   EXTU.B      R4,R4
    0000034A E04C                   MOV         #76,R0     ; H'0000004C
    0000034C 4480                   MULR        R0,R4
           tskmotend.        475    {
           tskmotend.        476      return( MotEnd[mot].req );
    0000034E D512                   MOV.L       L96,R5     ; __$MotEnd
    00000350 6043                   MOV         R4,R0
           tskmotend.        477    }
    00000352 000B                   RTS
    00000354 005C                   MOV.B       @(R0,R5),R0; MotEnd[].req
           tskmotend.        478    
           tskmotend.        479    /***********************************************************************
           tskmotend.        480    *
           tskmotend.        481    * [概要]  PDELAY  パルスモータのパワー制御待ち時間設定
           tskmotend.        482    * [引数]  ｺﾏﾝﾄﾞ電文引数ﾃﾞｰﾀ
           tskmotend.        483    * [戻値]  -
           tskmotend.        484    * 
           tskmotend.        485    ***********************************************************************/
           tskmotend.        486    static ER MotEndPDELAY ( T_CMD_MSG* mrcv )
    00000356              __$MotEndPDELAY:                 ; function: __$MotEndPDELAY
                                                           ; frame size=20
    00000356 4F22                   STS.L       PR,@-R15
    00000358 4F12                   STS.L       MACL,@-R15
    0000035A 4F02                   STS.L       MACH,@-R15
    0000035C 7FF8                   ADD         #-8,R15
           tskmotend.        487    {
           tskmotend.        488      ER      result = E_SUCCESS;
           tskmotend.        489      ST_PDELAY pdelay;
           tskmotend.        490    
           tskmotend.        491      // memcpy(コピー先アドレス、コピー元アドレス、コピーサイズ)
           tskmotend.        492      memcpy( &pdelay, &mrcv->msgdata.data[0], sizeof(ST_PDELAY) );
    0000035E 7424                   ADD         #36,R4
    00000360 E608                   MOV         #8,R6      ; H'00000008
    00000362 6543                   MOV         R4,R5
    00000364 D10D                   MOV.L       L96+4,R1   ; _memcpy
    00000366 410B                   JSR         @R1
    00000368 64F3                   MOV         R15,R4
           tskmotend.        493    
           tskmotend.        494      // ディレイ時間設定
           tskmotend.        495      MotEnd[pdelay.mm].tim = ( pdelay.tttt / 10 );
    0000036A D70D                   MOV.L       L96+8,R7   ; H'66666667
    0000036C 52F1                   MOV.L       @(4,R15),R2; pdelay.tttt
    0000036E 31F18000               MOVU.B      @(0,R15),R1; pdelay.mm
    00000372 372D                   DMULS.L     R2,R7
    00000374 D20B                   MOV.L       L96+12,R2  ; H'00000044+__$MotEnd
    00000376 050A                   STS         MACH,R5
    00000378 4521                   SHAR        R5
    0000037A 4521                   SHAR        R5
    0000037C 6053                   MOV         R5,R0
    0000037E 4004                   ROTL        R0
    00000380 C901                   AND         #1,R0
    00000382 350C                   ADD         R0,R5
    00000384 E04C                   MOV         #76,R0     ; H'0000004C
    00000386 4180                   MULR        R0,R1
    00000388 6013                   MOV         R1,R0
    0000038A 0256                   MOV.L       R5,@(R0,R2); MotEnd[].tim
           tskmotend.        496    
           tskmotend.        497      return(result);
    0000038C 7F08                   ADD         #8,R15
    0000038E 4F06                   LDS.L       @R15+,MACH
    00000390 4F16                   LDS.L       @R15+,MACL
    00000392 4F26                   LDS.L       @R15+,PR
           tskmotend.        498    }
    00000394 000B                   RTS
    00000396 E000                   MOV         #0,R0      ; H'00000000
    00000398              L96:
    00000398 <00000000>             .DATA.L     __$MotEnd
    0000039C <00000000>             .DATA.L     _memcpy
    000003A0 66666667               .DATA.L     H'66666667
    000003A4 <00000044>             .DATA.L     H'00000044+__$MotEnd
C   00000000              L97:
    00000000 433A5C576F             .SDATA      "C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskmotend.c"
             726B537061   
             63655C5175   
             69636B4765   
             6E655C536F   
             66745F4669   
             726D5C5175   
             69636B4765   
             6E655F5072   
             6F6A656374   
             5C74736B6D   
             6F74656E64   
             2E63         
    0000003E 00                     .DATA.B     H'00
B   00000000              __$MotEnd:                       ; static: __$MotEnd
    00000000 00000004               .RES.L      152
    00000260              __$sts:                          ; static: __$sts
    00000260 00000004               .RES.L      6
    00000278              __$sts2:                         ; static: __$sts2
    00000278 00000004               .RES.L      6
SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         07-Sep-2023 20:41:37  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      498



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 000003A8 Byte(s)
CONSTANT SECTION (C):                                 0000003F Byte(s)
DATA     SECTION (D):                                 00000000 Byte(s)
BSS      SECTION (B):                                 00000290 Byte(s)

TOTAL PROGRAM  SECTION: 000003A8 Byte(s)
TOTAL CONSTANT SECTION: 0000003F Byte(s)
TOTAL DATA     SECTION: 00000000 Byte(s)
TOTAL BSS      SECTION: 00000290 Byte(s)

    TOTAL PROGRAM SIZE: 00000677 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           11
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            39



*** COMMAND PARAMETER ***

-subcommand=C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskmotend.shc
-cpu=sh2a
-include="C:\NORTi\INC","C:\NORTi\INC\Dummy","C:\NORTi\INC","C:\NORTi\LIB"
-object="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskmotend.obj"
-debug
-listfile="C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\SHC9\QuickGene_Hew\ROM_Big\tskmotend.lst"
-show=source,tab=4
-gbr=auto
-chgincpath
-errorpath
"C:\WorkSpace\QuickGene\Soft_Firm\QuickGene_Project\tskmotend.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
