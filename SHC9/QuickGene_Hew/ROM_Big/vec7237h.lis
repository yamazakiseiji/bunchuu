*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     1
PROGRAM NAME =

    1                               1     ;****************************************************************************
    2                               2     ;* SHCベクタテーブル設定（SH7237)                                           *
    3                               3     ;*                                                                          *
    4                               4     ;*  File name : vec7237h.asm                                                *
    5                               5     ;*                                                                          *
    6                               6     ;*                                                                          *
    7                               7     ;*                                                                          *
    8                               8     ;****************************************************************************
    9                               9     
   10                              10     ;* スタックポインタ初期値の指定は、STACK_ENDセクションで行っています。
   11                              11     ;* リンカにて、STACK_ENDセクションを定義してください。
   12                              12     ;* STACK_ENDセクションの開始アドレスが、SP初期値となります。
   13                              13     ;  START VECT/00000000,P,C,D/00000600,R,B,STACK/0C000400,STACK_END/0D000000
   14                              14     
   15 00000000                     15             .section STACK_END,DATA     ; スタック領域最終アドレス+1
   16                              16     _INIT_STACK: .define "(STARTOF STACK_END)"
   17                              17     
   18                              18     ;* 外部参照
   19                              19     
   20                              20             .import __INIT              ; Cの初期設定ルーチン
   21                              21             .import _ini_cpu            ; CPU内蔵周辺の初期化
   22                              22     
   23                              23     ;* リセットベクタ
   24                              24     
   25                              25             ; SDRAMへコードをローディングする場合、VECTセクションをSDRAM先頭に定義。
   26                              26             ; ROM上のコードをそのまま動作させる場合、0番地に定義。
   27                              27     
   28 00000000                     28             .section VECT,CODE
   29                              29             .export _RST_VECT
   30 00000000                     30     _RST_VECT:
   31                              31             ; パワーオンリセット
   32 00000000 00000000            32             .data.l _RESET - (STARTOF VECT) ; PC初期値
   33 00000004 00000000            33             .data.l (STARTOF STACK_END)             ; SP初期値
   34                              34             ; マニュアルリセット
   35 00000008 00000000            35             .data.l _RESET - (STARTOF VECT) ; PC初期値
   36 0000000C 00000000            36             .data.l (STARTOF STACK_END)             ; SP初期値
   37                              37     
   38                              38     ;* 割込みベクタテーブル
   39                              39     
   40                              40             ; 割込みベクタを直接ROMに定義する場合は、アセンブル時に1マクロを
   41                              41             ; 定義し、割込みハンドラのシンボルをここに書き加えてください。
   42                              42             ; def_inh や cre_isr システムコールを用いる場合、この定義は不要です。
   43                              43     
   44                              44           .aifdef ROMVEC
   45                              45 C           .import _inthdr             ; 周期タイマ割込みハンドラ
   46                              46 C           .import _int_sio0_er        ; シリアルチャネル0 受信エラー割込みハンドラ
   47                              47 C           .import _int_sio0_rx        ; シリアルチャネル0 受信割込みハンドラ
   48                              48 C           .import _int_irq4           ; シリアルチャネル0 受信割込みハンドラ
   49                              49 C           .import _int_sio1_er        ; シリアルチャネル1 受信エラー割込みハンドラ
   50                              50 C           .import _int_sio1_rx        ; シリアルチャネル1 受信割込みハンドラ
   51                              51 C           .import _int_sio2_er        ; シリアルチャネル2 受信エラー割込みハンドラ
   52                              52 C           .import _int_sio2_rx        ; シリアルチャネル2 受信割込みハンドラ
   53                              53 C   ;5/11        .import _int_sio3_er        ; シリアルチャネル3 受信エラー割込みハンドラ
   54                              54 C   ;5/11        .import _int_sio3_rx        ; シリアルチャネル3 受信割込みハンドラ
   55                              55 C   
   56 00000010 FFFFFFFF            56 C           .data.l -1                  ;   4: 一般不当命令
   57 00000014 FFFFFFFF            57 C           .data.l -1                  ;   5: Reserved
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     2
PROGRAM NAME =

   58 00000018 FFFFFFFF            58 C           .data.l -1                  ;   6: スロット不当命令
   59 0000001C FFFFFFFF            59 C           .data.l -1                  ;   7: Reserved
   60 00000020 FFFFFFFF            60 C           .data.l -1                  ;   8: Reserved
   61 00000024 FFFFFFFF            61 C           .data.l -1                  ;   9: CPUアドレスエラー
   62 00000028 FFFFFFFF            62 C           .data.l -1                  ;  10: DMACアドレスエラー
   63 0000002C FFFFFFFF            63 C           .data.l -1                  ;  11: NMI
   64 00000030 FFFFFFFF            64 C           .data.l -1                  ;  12: UBC
   65 00000034 FFFFFFFF            65 C           .data.l -1                  ;  13: Reserved
   66 00000038 FFFFFFFF            66 C           .data.l -1                  ;  14: HUDI
   67 0000003C FFFFFFFF            67 C           .data.l -1                  ;  15: バンクオーバフロー
   68 00000040 FFFFFFFF            68 C           .data.l -1                  ;  16: バンクアンダフロー
   69 00000044 FFFFFFFF            69 C           .data.l -1                  ;  17: 整数除算例外 (0除算)
   70 00000048 FFFFFFFF            70 C           .data.l -1                  ;  18: 整数除算例外 (オーバフロー)
   71 0000004C FFFFFFFF            71 C           .data.l -1                  ;  19: Reserved
   72 00000050 FFFFFFFF            72 C           .data.l -1                  ;  20: Reserved
   73 00000054 FFFFFFFF            73 C           .data.l -1                  ;  21: Reserved
   74 00000058 FFFFFFFF            74 C           .data.l -1                  ;  22: Reserved
   75 0000005C FFFFFFFF            75 C           .data.l -1                  ;  23: Reserved
   76 00000060 FFFFFFFF            76 C           .data.l -1                  ;  24: Reserved
   77 00000064 FFFFFFFF            77 C           .data.l -1                  ;  25: Reserved
   78 00000068 FFFFFFFF            78 C           .data.l -1                  ;  26: Reserved
   79 0000006C FFFFFFFF            79 C           .data.l -1                  ;  27: Reserved
   80 00000070 FFFFFFFF            80 C           .data.l -1                  ;  28: Reserved
   81 00000074 FFFFFFFF            81 C           .data.l -1                  ;  29: Reserved
   82 00000078 FFFFFFFF            82 C           .data.l -1                  ;  30: Reserved
   83 0000007C FFFFFFFF            83 C           .data.l -1                  ;  31: Reserved
   84 00000080 FFFFFFFF            84 C           .data.l -1                  ;  32:
   85 00000084 FFFFFFFF            85 C           .data.l -1                  ;  33:
   86 00000088 FFFFFFFF            86 C           .data.l -1                  ;  34:
   87 0000008C FFFFFFFF            87 C           .data.l -1                  ;  35:
   88 00000090 FFFFFFFF            88 C           .data.l -1                  ;  36:
   89 00000094 FFFFFFFF            89 C           .data.l -1                  ;  37:
   90 00000098 FFFFFFFF            90 C           .data.l -1                  ;  38:
   91 0000009C FFFFFFFF            91 C           .data.l -1                  ;  39:
   92 000000A0 FFFFFFFF            92 C           .data.l -1                  ;  40:
   93 000000A4 FFFFFFFF            93 C           .data.l -1                  ;  41:
   94 000000A8 FFFFFFFF            94 C           .data.l -1                  ;  42:
   95 000000AC FFFFFFFF            95 C           .data.l -1                  ;  43:
   96 000000B0 FFFFFFFF            96 C           .data.l -1                  ;  44:
   97 000000B4 FFFFFFFF            97 C           .data.l -1                  ;  45:
   98 000000B8 FFFFFFFF            98 C           .data.l -1                  ;  46:
   99 000000BC FFFFFFFF            99 C           .data.l -1                  ;  47:
  100 000000C0 FFFFFFFF           100 C           .data.l -1                  ;  48:
  101 000000C4 FFFFFFFF           101 C           .data.l -1                  ;  49:
  102 000000C8 FFFFFFFF           102 C           .data.l -1                  ;  50:
  103 000000CC FFFFFFFF           103 C           .data.l -1                  ;  51:
  104 000000D0 FFFFFFFF           104 C           .data.l -1                  ;  52:
  105 000000D4 FFFFFFFF           105 C           .data.l -1                  ;  53:
  106 000000D8 FFFFFFFF           106 C           .data.l -1                  ;  54:
  107 000000DC FFFFFFFF           107 C           .data.l -1                  ;  55:
  108 000000E0 FFFFFFFF           108 C           .data.l -1                  ;  56:
  109 000000E4 FFFFFFFF           109 C           .data.l -1                  ;  57:
  110 000000E8 FFFFFFFF           110 C           .data.l -1                  ;  58:
  111 000000EC FFFFFFFF           111 C           .data.l -1                  ;  59:
  112 000000F0 FFFFFFFF           112 C           .data.l -1                  ;  60:
  113 000000F4 FFFFFFFF           113 C           .data.l -1                  ;  61:
  114 000000F8 FFFFFFFF           114 C           .data.l -1                  ;  62:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     3
PROGRAM NAME =

  115 000000FC FFFFFFFF           115 C           .data.l -1                  ;  63:
  116 00000100 FFFFFFFF           116 C           .data.l -1                  ;  64: IRQ0
  117 00000104 FFFFFFFF           117 C           .data.l -1                  ;  65: IRQ1
  118 00000108 FFFFFFFF           118 C           .data.l -1                  ;  66: IRQ2
  119 0000010C FFFFFFFF           119 C           .data.l -1                  ;  67: IRQ3
  120 00000110 00000000           120 C           .data.l _int_irq4           ;  68: IRQ4
  121 00000114 FFFFFFFF           121 C           .data.l -1                  ;  69: IRQ5
  122 00000118 FFFFFFFF           122 C           .data.l -1                  ;  70: IRQ6
  123 0000011C FFFFFFFF           123 C           .data.l -1                  ;  71: IRQ7
  124 00000120 FFFFFFFF           124 C           .data.l -1                  ;  72:
  125 00000124 FFFFFFFF           125 C           .data.l -1                  ;  73:
  126 00000128 FFFFFFFF           126 C           .data.l -1                  ;  74:
  127 0000012C FFFFFFFF           127 C           .data.l -1                  ;  75:
  128 00000130 FFFFFFFF           128 C           .data.l -1                  ;  76:
  129 00000134 FFFFFFFF           129 C           .data.l -1                  ;  77:
  130 00000138 FFFFFFFF           130 C           .data.l -1                  ;  78:
  131 0000013C FFFFFFFF           131 C           .data.l -1                  ;  79:
  132 00000140 FFFFFFFF           132 C           .data.l -1                  ;  80:
  133 00000144 FFFFFFFF           133 C           .data.l -1                  ;  81:
  134 00000148 FFFFFFFF           134 C           .data.l -1                  ;  82:
  135 0000014C FFFFFFFF           135 C           .data.l -1                  ;  83:
  136 00000150 FFFFFFFF           136 C           .data.l -1                  ;  84:
  137 00000154 FFFFFFFF           137 C           .data.l -1                  ;  85:
  138 00000158 FFFFFFFF           138 C           .data.l -1                  ;  86:
  139 0000015C FFFFFFFF           139 C           .data.l -1                  ;  87:
  140 00000160 FFFFFFFF           140 C           .data.l -1                  ;  88:
  141 00000164 FFFFFFFF           141 C           .data.l -1                  ;  89:
  142 00000168 FFFFFFFF           142 C           .data.l -1                  ;  90:
  143 0000016C FFFFFFFF           143 C           .data.l -1                  ;  91:
  144 00000170 FFFFFFFF           144 C           .data.l -1                  ;  92: ADI0
  145 00000174 FFFFFFFF           145 C           .data.l -1                  ;  93:
  146 00000178 FFFFFFFF           146 C           .data.l -1                  ;  94:
  147 0000017C FFFFFFFF           147 C           .data.l -1                  ;  95:
  148 00000180 FFFFFFFF           148 C           .data.l -1                  ;  96: ADI1
  149 00000184 FFFFFFFF           149 C           .data.l -1                  ;  97:
  150 00000188 FFFFFFFF           150 C           .data.l -1                  ;  98:
  151 0000018C FFFFFFFF           151 C           .data.l -1                  ;  99:
  152 00000190 FFFFFFFF           152 C           .data.l -1                  ; 100: ADI2
  153 00000194 FFFFFFFF           153 C           .data.l -1                  ; 101:
  154 00000198 FFFFFFFF           154 C           .data.l -1                  ; 102:
  155 0000019C FFFFFFFF           155 C           .data.l -1                  ; 103:
  156 000001A0 FFFFFFFF           156 C           .data.l -1                  ; 104: ERS_0
  157 000001A4 FFFFFFFF           157 C           .data.l -1                  ; 105: OVR_0
  158 000001A8 FFFFFFFF           158 C           .data.l -1                  ; 106: RM0_0、RM1_0
  159 000001AC FFFFFFFF           159 C           .data.l -1                  ; 107: SLE_0
  160 000001B0 FFFFFFFF           160 C           .data.l -1                  ; 108: DEI0
  161 000001B4 FFFFFFFF           161 C           .data.l -1                  ; 109: HEI0
  162 000001B8 FFFFFFFF           162 C           .data.l -1                  ; 110:
  163 000001BC FFFFFFFF           163 C           .data.l -1                  ; 111:
  164 000001C0 FFFFFFFF           164 C           .data.l -1                  ; 112: DEI1
  165 000001C4 FFFFFFFF           165 C           .data.l -1                  ; 113: HEI1
  166 000001C8 FFFFFFFF           166 C           .data.l -1                  ; 114:
  167 000001CC FFFFFFFF           167 C           .data.l -1                  ; 115:
  168 000001D0 FFFFFFFF           168 C           .data.l -1                  ; 116: DEI2
  169 000001D4 FFFFFFFF           169 C           .data.l -1                  ; 117: HEI2
  170 000001D8 FFFFFFFF           170 C           .data.l -1                  ; 118:
  171 000001DC FFFFFFFF           171 C           .data.l -1                  ; 119:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     4
PROGRAM NAME =

  172 000001E0 FFFFFFFF           172 C           .data.l -1                  ; 120: DEI3
  173 000001E4 FFFFFFFF           173 C           .data.l -1                  ; 121: HEI3
  174 000001E8 FFFFFFFF           174 C           .data.l -1                  ; 122:
  175 000001EC FFFFFFFF           175 C           .data.l -1                  ; 123:
  176 000001F0 FFFFFFFF           176 C           .data.l -1                  ; 124: DEI4
  177 000001F4 FFFFFFFF           177 C           .data.l -1                  ; 125: HEI4
  178 000001F8 FFFFFFFF           178 C           .data.l -1                  ; 126:
  179 000001FC FFFFFFFF           179 C           .data.l -1                  ; 127:
  180 00000200 FFFFFFFF           180 C           .data.l -1                  ; 128: DEI5
  181 00000204 FFFFFFFF           181 C           .data.l -1                  ; 129: HEI5
  182 00000208 FFFFFFFF           182 C           .data.l -1                  ; 130:
  183 0000020C FFFFFFFF           183 C           .data.l -1                  ; 131:
  184 00000210 FFFFFFFF           184 C           .data.l -1                  ; 132: DEI6
  185 00000214 FFFFFFFF           185 C           .data.l -1                  ; 133: HEI6
  186 00000218 FFFFFFFF           186 C           .data.l -1                  ; 134:
  187 0000021C FFFFFFFF           187 C           .data.l -1                  ; 135:
  188 00000220 FFFFFFFF           188 C           .data.l -1                  ; 136: DEI7
  189 00000224 FFFFFFFF           189 C           .data.l -1                  ; 137: HEI7
  190 00000228 FFFFFFFF           190 C           .data.l -1                  ; 138:
  191 0000022C FFFFFFFF           191 C           .data.l -1                  ; 139:
  192 00000230 00000000           192 C           .data.l _inthdr             ; 140: CMI0
  193 00000234 FFFFFFFF           193 C           .data.l -1                  ; 141:
  194 00000238 FFFFFFFF           194 C           .data.l -1                  ; 142:
  195 0000023C FFFFFFFF           195 C           .data.l -1                  ; 143:
  196 00000240 FFFFFFFF           196 C           .data.l -1                  ; 144: CMI1
  197 00000244 FFFFFFFF           197 C           .data.l -1                  ; 145:
  198 00000248 FFFFFFFF           198 C           .data.l -1                  ; 146:
  199 0000024C FFFFFFFF           199 C           .data.l -1                  ; 147:
  200 00000250 FFFFFFFF           200 C           .data.l -1                  ; 148: CMI
  201 00000254 FFFFFFFF           201 C           .data.l -1                  ; 149:
  202 00000258 FFFFFFFF           202 C           .data.l -1                  ; 150:
  203 0000025C FFFFFFFF           203 C           .data.l -1                  ; 151:
  204 00000260 FFFFFFFF           204 C           .data.l -1                  ; 152: ITI
  205 00000264 FFFFFFFF           205 C           .data.l -1                  ; 153:
  206 00000268 FFFFFFFF           206 C           .data.l -1                  ; 154: USBRXI
  207 0000026C FFFFFFFF           207 C           .data.l -1                  ; 155: USBTXI
  208 00000270 FFFFFFFF           208 C           .data.l -1                  ; 156: TGI0A
  209 00000274 FFFFFFFF           209 C           .data.l -1                  ; 157: TGI0B
  210 00000278 FFFFFFFF           210 C           .data.l -1                  ; 158: TGI0C
  211 0000027C FFFFFFFF           211 C           .data.l -1                  ; 159: TGI0D
  212 00000280 FFFFFFFF           212 C           .data.l -1                  ; 160: TCI0V
  213 00000284 FFFFFFFF           213 C           .data.l -1                  ; 161: TGI0E
  214 00000288 FFFFFFFF           214 C           .data.l -1                  ; 162: TGI0F
  215 0000028C FFFFFFFF           215 C           .data.l -1                  ; 163:
  216 00000290 FFFFFFFF           216 C           .data.l -1                  ; 164: TGI1A
  217 00000294 FFFFFFFF           217 C           .data.l -1                  ; 165: TGI1B
  218 00000298 FFFFFFFF           218 C           .data.l -1                  ; 166:
  219 0000029C FFFFFFFF           219 C           .data.l -1                  ; 167:
  220 000002A0 FFFFFFFF           220 C           .data.l -1                  ; 168: TCI1V
  221 000002A4 FFFFFFFF           221 C           .data.l -1                  ; 169: TCI1U
  222 000002A8 FFFFFFFF           222 C           .data.l -1                  ; 170:
  223 000002AC FFFFFFFF           223 C           .data.l -1                  ; 171:
  224 000002B0 FFFFFFFF           224 C           .data.l -1                  ; 172: TGI2A
  225 000002B4 FFFFFFFF           225 C           .data.l -1                  ; 173: TGI2B
  226 000002B8 FFFFFFFF           226 C           .data.l -1                  ; 174:
  227 000002BC FFFFFFFF           227 C           .data.l -1                  ; 175:
  228 000002C0 FFFFFFFF           228 C           .data.l -1                  ; 176: TCI2V
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     5
PROGRAM NAME =

  229 000002C4 FFFFFFFF           229 C           .data.l -1                  ; 177: TCI2U
  230 000002C8 FFFFFFFF           230 C           .data.l -1                  ; 178:
  231 000002CC FFFFFFFF           231 C           .data.l -1                  ; 179:
  232 000002D0 FFFFFFFF           232 C           .data.l -1                  ; 180: TGI3A
  233 000002D4 FFFFFFFF           233 C           .data.l -1                  ; 181: TGI3B
  234 000002D8 FFFFFFFF           234 C           .data.l -1                  ; 182: TGI3C
  235 000002DC FFFFFFFF           235 C           .data.l -1                  ; 183: TGI3D
  236 000002E0 FFFFFFFF           236 C           .data.l -1                  ; 184: TCI3V
  237 000002E4 FFFFFFFF           237 C           .data.l -1                  ; 185:
  238 000002E8 FFFFFFFF           238 C           .data.l -1                  ; 186:
  239 000002EC FFFFFFFF           239 C           .data.l -1                  ; 187:
  240 000002F0 FFFFFFFF           240 C           .data.l -1                  ; 188: TGI4A
  241 000002F4 FFFFFFFF           241 C           .data.l -1                  ; 189: TGI4B
  242 000002F8 FFFFFFFF           242 C           .data.l -1                  ; 190: TGI4C
  243 000002FC FFFFFFFF           243 C           .data.l -1                  ; 191: TGI4D
  244 00000300 FFFFFFFF           244 C           .data.l -1                  ; 192: TCI4V
  245 00000304 FFFFFFFF           245 C           .data.l -1                  ; 193:
  246 00000308 FFFFFFFF           246 C           .data.l -1                  ; 194:
  247 0000030C FFFFFFFF           247 C           .data.l -1                  ; 195:
  248 00000310 FFFFFFFF           248 C           .data.l -1                  ; 196: TGI5U
  249 00000314 FFFFFFFF           249 C           .data.l -1                  ; 197: TGI5V
  250 00000318 FFFFFFFF           250 C           .data.l -1                  ; 198: TGI5W
  251 0000031C FFFFFFFF           251 C           .data.l -1                  ; 199:
  252 00000320 FFFFFFFF           252 C           .data.l -1                  ; 200: OEI1
  253 00000324 FFFFFFFF           253 C           .data.l -1                  ; 201: OEI2
  254 00000328 FFFFFFFF           254 C           .data.l -1                  ; 202:
  255 0000032C FFFFFFFF           255 C           .data.l -1                  ; 203:
  256 00000330 FFFFFFFF           256 C           .data.l -1                  ; 204: TGI3A
  257 00000334 FFFFFFFF           257 C           .data.l -1                  ; 205: TGI3B
  258 00000338 FFFFFFFF           258 C           .data.l -1                  ; 206: TGI3C
  259 0000033C FFFFFFFF           259 C           .data.l -1                  ; 207: TGI3D
  260 00000340 FFFFFFFF           260 C           .data.l -1                  ; 208: TCI3V
  261 00000344 FFFFFFFF           261 C           .data.l -1                  ; 209:
  262 00000348 FFFFFFFF           262 C           .data.l -1                  ; 210:
  263 0000034C FFFFFFFF           263 C           .data.l -1                  ; 211:
  264 00000350 FFFFFFFF           264 C           .data.l -1                  ; 212: TGI4A
  265 00000354 FFFFFFFF           265 C           .data.l -1                  ; 213: TGI4B
  266 00000358 FFFFFFFF           266 C           .data.l -1                  ; 214: TGI4C
  267 0000035C FFFFFFFF           267 C           .data.l -1                  ; 215: TGI4D
  268 00000360 FFFFFFFF           268 C           .data.l -1                  ; 216: TCI4V
  269 00000364 FFFFFFFF           269 C           .data.l -1                  ; 217:
  270 00000368 FFFFFFFF           270 C           .data.l -1                  ; 218:
  271 0000036C FFFFFFFF           271 C           .data.l -1                  ; 219:
  272 00000370 FFFFFFFF           272 C           .data.l -1                  ; 220: TGI5U
  273 00000374 FFFFFFFF           273 C           .data.l -1                  ; 221: TGI5V
  274 00000378 FFFFFFFF           274 C           .data.l -1                  ; 222: TGI5W
  275 0000037C FFFFFFFF           275 C           .data.l -1                  ; 223:
  276 00000380 FFFFFFFF           276 C           .data.l -1                  ; 224: OEI3
  277 00000384 FFFFFFFF           277 C           .data.l -1                  ; 225:
  278 00000388 FFFFFFFF           278 C           .data.l -1                  ; 226: USI0
  279 0000038C FFFFFFFF           279 C           .data.l -1                  ; 227: USI1
  280 00000390 FFFFFFFF           280 C           .data.l -1                  ; 228: STPI
  281 00000394 FFFFFFFF           281 C           .data.l -1                  ; 229: NAKI
  282 00000398 FFFFFFFF           282 C           .data.l -1                  ; 230: RXI
  283 0000039C FFFFFFFF           283 C           .data.l -1                  ; 231: TXI
  284 000003A0 FFFFFFFF           284 C           .data.l -1                  ; 232: TEI
  285 000003A4 FFFFFFFF           285 C           .data.l -1                  ; 233: SSERI
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     6
PROGRAM NAME =

  286 000003A8 FFFFFFFF           286 C           .data.l -1                  ; 234: SSRXI
  287 000003AC FFFFFFFF           287 C           .data.l -1                  ; 235: SSTXI
  288 000003B0 FFFFFFFF           288 C           .data.l -1                  ; 236: ERI4
  289 000003B4 FFFFFFFF           289 C           .data.l -1                  ; 237: RXI4
  290 000003B8 FFFFFFFF           290 C           .data.l -1                  ; 238: TXI4
  291 000003BC FFFFFFFF           291 C           .data.l -1                  ; 239: TEI4
  292 000003C0 00000000           292 C           .data.l _int_sio0_er        ; 240: ERI0
  293 000003C4 00000000           293 C           .data.l _int_sio0_rx        ; 241: RXI0
  294 000003C8 FFFFFFFF           294 C           .data.l -1                  ; 242: TXI0
  295 000003CC FFFFFFFF           295 C           .data.l -1                  ; 243: TEI0
  296 000003D0 00000000           296 C           .data.l _int_sio1_er        ; 244: ERI1
  297 000003D4 00000000           297 C           .data.l _int_sio1_rx        ; 245: RXI1
  298 000003D8 FFFFFFFF           298 C           .data.l -1                  ; 246: TXI1
  299 000003DC FFFFFFFF           299 C           .data.l -1                  ; 247: TEI1
  300 000003E0 00000000           300 C           .data.l _int_sio2_er        ; 248: ERI2
  301 000003E4 00000000           301 C           .data.l _int_sio2_rx        ; 249: RXI2
  302 000003E8 FFFFFFFF           302 C           .data.l -1                  ; 250: TXI2
  303 000003EC FFFFFFFF           303 C           .data.l -1                  ; 251: TEI2
  304 000003F0 FFFFFFFF           304 C           .data.l -1                  ; 252: BRI3
  305 000003F4 FFFFFFFF           305 C           .data.l -1                  ; 253: ERI3
  306 000003F8 FFFFFFFF           306 C           .data.l -1                  ; 254: RXI3
  307                             307 C   ;5/11        .data.l _int_sio3_er        ; 253: ERI3
  308                             308 C   ;5/11        .data.l _int_sio3_rx        ; 254: RXI3
  309 000003FC FFFFFFFF           309 C           .data.l -1                  ; 255: TXI3
  310                             310           .aendi
  311                             311     
  312                             312     ;* リセット処理
  313                             313     
  314                             314             .export _RESET
  315 00000400                    315             .org H'400
  316 00000400                    316     _RESET:
  317                             317             ; リスタートを考慮して割込みマスクレベルを最高に
  318 00000400 0002               318             stc     sr,r0
  319 00000402 CBF0               319             or      #H'F0,r0
  320 00000404 400E               320             ldc     r0,sr
  321                             321     
  322 00000406 D205               322             mov.l   ini_cpu,r2
  323 00000408 420B               323             jsr     @r2
  324 0000040A 0009               324             nop
  325                             325     
  326                             326             ; リスタートを考慮してスタックポインタ初期化
  327 0000040C DF01               327             mov.l   INIT_STACK,sp
  328                             328     
  329                             329             ; Cの初期化ルーチンへ
  330 0000040E D202               330             mov.l   INIT,r2
  331 00000410 422B               331             jmp     @r2
  332 00000412 0009               332             nop
  333                             333     
  334                             334     ;* 参照アドレス/データ値
  335                             335     
  336 00000414                    336             .align  4
  337 00000414 00000000           337     INIT_STACK:     .data.l (STARTOF STACK_END) ; スタック領域終わりのアドレス
  338 00000418 00000000           338     INIT:           .data.l __INIT
  339 0000041C 00000000           339     ini_cpu:        .data.l _ini_cpu
  340                             340     
  341                             341     ;* 各セクションのアドレス
  342                             342     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     7
PROGRAM NAME =

  343 00000000                    343             .section P,CODE,ALIGN=4
  344 00000000                    344             .section D,DATA,ALIGN=4     ; 初期化データ領域(ROM)
  345 00000000                    345             .section R,DATA,ALIGN=4     ; 初期化データ領域(RAM)
  346 00000000                    346             .section B,DATA,ALIGN=4     ; 未初期化データ領域(RAM)
  347 00000000                    347             .section STACK,DATA,ALIGN=4 ; スタック領域(RAM)
  348 00000000 00000002           348             .res.w  1
  349 00000000                    349             .section C,DATA,ALIGN=4     ; 定数領域(ROM)
  350 00000000                    350             .align  4
  351 00000000 00000000           351     __P_BGN     .data.l (STARTOF P)
  352 00000004 00000000           352     __P_END     .data.l (STARTOF P)+(SIZEOF P)
  353 00000008 00000000           353     __C_BGN     .data.l (STARTOF C)
  354 0000000C 00000000           354     __C_END     .data.l (STARTOF C)+(SIZEOF C)
  355 00000010 00000000           355     __D_ROM     .data.l (STARTOF D)
  356 00000014 00000000           356     __D_BGN     .data.l (STARTOF R)
  357 00000018 00000000           357     __D_END     .data.l (STARTOF R)+(SIZEOF R)
  358 0000001C 00000000           358     __B_BGN     .data.l (STARTOF B)
  359 00000020 00000000           359     __B_END     .data.l (STARTOF B)+(SIZEOF B)
  360 00000024 00000000           360     __VECT_BGN  .data.l (STARTOF VECT)
  361                             361             .export __P_BGN
  362                             362             .export __P_END
  363                             363             .export __C_BGN
  364                             364             .export __C_END
  365                             365             .export __D_ROM
  366                             366             .export __D_BGN
  367                             367             .export __D_END
  368                             368             .export __B_BGN
  369                             369             .export __B_END
  370                             370             .export __VECT_BGN
  371                             371     
  372                             372     ; [ROM上のコードで実行する場合]
  373                             373     ;
  374                             374     ; ROM先頭┌──────────┐
  375                             375     ;        │ 割込みベクタ(VECT) │
  376                             376     ;        ├──────────┤
  377                             377     ;        │   プログラム領域   │
  378                             378     ;        │        (P)         │
  379                             379     ;        ├──────────┤
  380                             380     ;        │      定数領域      │
  381                             381     ;        │        (C)         │
  382                             382     ;        ├──────────┤
  383                             383     ;        │  初期化データ領域  │──┐
  384                             384     ;        │        (D)         │    │_INITSCT() でコピー
  385                             385     ;        ├──────────┤    ｜
  386                             386     ;         〜                  〜     ｜
  387                             387     ; RAM先頭┌──────────┐    ｜
  388                             388     ;        │  初期化データ領域  │←─┘
  389                             389     ;        │        (R)         │
  390                             390     ;        ├──────────┤
  391                             391     ;        │ 未初期化データ領域 │←─ _INITSCT()で0クリア
  392                             392     ;        │        (B)         │
  393                             393     ;        ├──────────┤
  394                             394     ;        │    スタック領域    │
  395                             395     ;        │      (STACK)       │
  396                             396     ;         〜                  〜
  397                             397     ;SP初期値└──────────┘STACK_END
  398                             398     
  399                             399             .end
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     8
PROGRAM NAME =

  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE     9

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

B                                B        SCT  00000000    346*  358   359   359 
C                                C        SCT  00000000    349*  353   354   354 
D                                D        SCT  00000000    344*  355 
INIT                             VECT          00000418    330   338*
INIT_STACK                       VECT          00000414    327   337*
P                                P        SCT  00000000    343*  351   352   352 
R                                R        SCT  00000000    345*  356   357   357 
STACK                            STACK    SCT  00000000    347*
STACK_END                        STACK_EN SCT  00000000     15*   33    36   337 
VECT                             VECT     SCT  00000000     28*   32    35   360 
_RESET                           VECT     EXPT 00000400     32    35   314   316*
_RST_VECT                        VECT     EXPT 00000000     29    30*
__B_BGN                          C        EXPT 0000001C    358*  368 
__B_END                          C        EXPT 00000020    359*  369 
__C_BGN                          C        EXPT 00000008    353*  363 
__C_END                          C        EXPT 0000000C    354*  364 
__D_BGN                          C        EXPT 00000014    356*  366 
__D_END                          C        EXPT 00000018    357*  367 
__D_ROM                          C        EXPT 00000010    355*  365 
__INIT                                    IMPT 00000000     20   338 
__P_BGN                          C        EXPT 00000000    351*  361 
__P_END                          C        EXPT 00000004    352*  362 
__VECT_BGN                       C        EXPT 00000024    360*  370 
_ini_cpu                                  IMPT 00000000     21   339 
_int_irq4                                 IMPT 00000000     48   120 
_int_sio0_er                              IMPT 00000000     46   292 
_int_sio0_rx                              IMPT 00000000     47   293 
_int_sio1_er                              IMPT 00000000     49   296 
_int_sio1_rx                              IMPT 00000000     50   297 
_int_sio2_er                              IMPT 00000000     51   300 
_int_sio2_rx                              IMPT 00000000     52   301 
_inthdr                                   IMPT 00000000     45   192 
ini_cpu                          VECT          0000041C    322   339*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    09/07/23 14:07:56                                                  PAGE    10

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

STACK_END                        REL-DATA    000000000        
VECT                             REL-CODE    000000420        
P                                REL-CODE    000000000        
D                                REL-DATA    000000000        
R                                REL-DATA    000000000        
B                                REL-DATA    000000000        
STACK                            REL-DATA    000000002        
C                                REL-DATA    000000028        
